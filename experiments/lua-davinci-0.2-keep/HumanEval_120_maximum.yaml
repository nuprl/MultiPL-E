name: HumanEval_120_maximum
language: lua
prompt: "-- Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n-- Input:\
  \ arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input: arr\
  \ = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3, 2,\
  \ 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the array\
  \ will be in the range of [1, 1000].\n-- 2. The elements in the array will be in\
  \ the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr,\
  \ k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
  \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
  \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1),\
  \ {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20,\
  \ 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n\
  \    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3,\
  \ 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})\n  \
  \  lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
  \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n \
  \   lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local function partition(arr, l, r)\n        local pivot = arr[r]\n\
    \        local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] <\
    \ pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i\
    \ + 1]\n        return i + 1\n    end\n    local function quickSelect(arr, l,\
    \ r, k)\n        if l <= r then\n            local p = partition(arr, l, r)\n\
    \            if p == k then\n                return\n            elseif p < k\
    \ then\n                quickSelect(arr, p + 1, r, k)\n            else\n    \
    \            quickSelect(arr, l, p - 1, k)\n            end\n        end\n   \
    \ end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    local res = {}\n    for\
    \ i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n    end\n    return\
    \ res\nend", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local index = partition(arr, l, r)\n        if index ==\
    \ k then\n            return arr[index]\n        elseif index > k then\n     \
    \       return quickSelect(arr, l, index - 1, k)\n        else\n            return\
    \ quickSelect(arr, index + 1, r, k)\n        end\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local index = partition(arr,\
    \ l, r)\n            quickSort(arr, l, index - 1)\n            quickSort(arr,\
    \ index + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local n = #arr\n    if n == 0 then return {} end\n    if k ==\
    \ 0 then return {} end\n    if k == 1 then return {math.max(unpack(arr))} end\n\
    \    if k == n then return arr end\n    local function partition(arr, l, r)\n\
    \        local i, j = l, r\n        local pivot = arr[l]\n        while i < j\
    \ do\n            while i < j and arr[j] <= pivot do j = j - 1 end\n         \
    \   arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do i = i + 1\
    \ end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n    \
    \    return i\n    end\n    local function quickSelect(arr, l, r, k)\n       \
    \ if l == r then return arr[l] end\n        local i = partition(arr, l, r)\n \
    \       if i == k then return arr[i] end\n        if i > k then return quickSelect(arr,\
    \ l, i - 1, k) end\n        return quickSelect(arr, i + 1, r, k)\n    end\n  \
    \  local function sort(arr, l, r)\n        if l >= r then return end\n       \
    \ local i = partition(arr, l, r)\n        sort(arr, l, i - 1)\n        sort(arr,\
    \ i + 1, r)\n    end\n    local pivot = quickSelect(arr, 1, n, k)\n    local res\
    \ = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    sort(res, 1, #res)\n    return res\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local p = partition(arr, l, r)\n        if p == k then\n\
    \            return arr[p]\n        elseif p > k then\n            return quickSelect(arr,\
    \ l, p - 1, k)\n        else\n            return quickSelect(arr, p + 1, r, k)\n\
    \        end\n    end\n    local n = #arr\n    if n == 0 then\n        return\
    \ {}\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = quickSelect(arr,\
    \ 1, n, i)\n    end\n    return res\nend", "    local n = #arr\n    if n == 0\
    \ then return {} end\n    if k == 0 then return {} end\n    if k == 1 then\n \
    \       local max = arr[1]\n        for i = 2, n do\n            if arr[i] > max\
    \ then\n                max = arr[i]\n            end\n        end\n        return\
    \ {max}\n    end\n    local heap = {}\n    local function push(x)\n        heap[#heap\
    \ + 1] = x\n        local i = #heap\n        while i > 1 do\n            local\
    \ p = math.floor(i / 2)\n            if heap[p] < heap[i] then\n             \
    \   heap[p], heap[i] = heap[i], heap[p]\n                i = p\n            else\n\
    \                break\n            end\n        end\n    end\n    local function\
    \ pop()\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap]\
    \ = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local\
    \ l = i * 2\n            local r = i * 2 + 1\n            local j = l\n      \
    \      if r <= #heap and heap[r] > heap[l] then\n                j = r\n     \
    \       end\n            if heap[i] < heap[j] then\n                heap[i], heap[j]\
    \ = heap[j], heap[i]\n                i = j\n            else\n              \
    \  break\n            end\n        end\n        return ret\n    end\n    for i\
    \ = 1, k do\n        push(arr[i])\n    end\n    for i = k + 1, n do\n        if\
    \ arr[i] > heap[1] then\n            pop()\n            push(arr[i])\n       \
    \ end\n    end\n    local ret = {}\n    for i = 1, k do\n        ret[i] = pop()\n\
    \    end\n    return ret\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k >= n then return arr end\n\
    \    local function partition(l, r)\n        local i, j = l, r\n        local\
    \ pivot = arr[l]\n        while i < j do\n            while i < j and arr[j] <=\
    \ pivot do j = j - 1 end\n            arr[i] = arr[j]\n            while i < j\
    \ and arr[i] >= pivot do i = i + 1 end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local l, r = 1, n\n  \
    \  while true do\n        local p = partition(l, r)\n        if p == k then\n\
    \            break\n        elseif p < k then\n            l = p + 1\n       \
    \ else\n            r = p - 1\n        end\n    end\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l - 1\n        for j = l, r - 1 do\n            if arr[j] < pivot then\n \
    \               i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n \
    \           end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quickSelect(arr, l, r, k)\n\
    \        if l <= r then\n            local p = partition(arr, l, r)\n        \
    \    if p == k then\n                return\n            elseif p < k then\n \
    \               quickSelect(arr, p + 1, r, k)\n            else\n            \
    \    quickSelect(arr, l, p - 1, k)\n            end\n        end\n    end\n  \
    \  quickSelect(arr, 1, #arr, #arr - k + 1)\n    return arr\nend", "    local n\
    \ = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    local heap = require(\"algorithms.data_structures.heap\"\
    ).new(res)\n    for i = k + 1, n do\n        if arr[i] > heap:top() then\n   \
    \         heap:pop()\n            heap:push(arr[i])\n        end\n    end\n  \
    \  return heap:to_array()\nend", "    local heap = {}\n    local function heap_push(heap,\
    \ val)\n        local n = #heap + 1\n        heap[n] = val\n        while n >\
    \ 1 do\n            local p = math.floor(n / 2)\n            if heap[p] < heap[n]\
    \ then\n                heap[p], heap[n] = heap[n], heap[p]\n                n\
    \ = p\n            else\n                break\n            end\n        end\n\
    \    end\n    local function heap_pop(heap)\n        local n = #heap\n       \
    \ heap[1], heap[n] = heap[n], heap[1]\n        local val = heap[n]\n        heap[n]\
    \ = nil\n        n = 1\n        while n < #heap do\n            local l = n *\
    \ 2\n            local r = l + 1\n            if l > #heap then\n            \
    \    break\n            elseif r > #heap then\n                if heap[n] < heap[l]\
    \ then\n                    heap[n], heap[l] = heap[l], heap[n]\n            \
    \    end\n                break\n            else\n                if heap[l]\
    \ > heap[r] then\n                    if heap[n] < heap[l] then\n            \
    \            heap[n], heap[l] = heap[l], heap[n]\n                        n =\
    \ l\n                    else\n                        break\n               \
    \     end\n                else\n                    if heap[n] < heap[r] then\n\
    \                        heap[n], heap[r] = heap[r], heap[n]\n               \
    \         n = r\n                    else\n                        break\n   \
    \                 end\n                end\n            end\n        end\n   \
    \     return val\n    end\n    for _, v in ipairs(arr) do\n        heap_push(heap,\
    \ v)\n        if #heap > k then\n            heap_pop(heap)\n        end\n   \
    \ end\n    local res = {}\n    for i = #heap, 1, -1 do\n        res[#res + 1]\
    \ = heap_pop(heap)\n    end\n    return res\nend", "    local heap = {}\n    for\
    \ i = 1, #arr do\n        if i <= k then\n            table.insert(heap, arr[i])\n\
    \        else\n            local min = heap[1]\n            if arr[i] > min then\n\
    \                heap[1] = arr[i]\n                local j = 1\n             \
    \   while true do\n                    local l = j * 2\n                    local\
    \ r = l + 1\n                    if l > k then\n                        break\n\
    \                    elseif r > k then\n                        if heap[l] < heap[j]\
    \ then\n                            heap[j], heap[l] = heap[l], heap[j]\n    \
    \                    end\n                        break\n                    else\n\
    \                        local m = heap[l]\n                        if heap[r]\
    \ < m then\n                            m = heap[r]\n                        \
    \    l = r\n                        end\n                        if heap[j] >\
    \ m then\n                            heap[j], heap[l] = heap[l], heap[j]\n  \
    \                          j = l\n                        else\n             \
    \               break\n                        end\n                    end\n\
    \                end\n            end\n        end\n    end\n    for i = k, 2,\
    \ -1 do\n        heap[1], heap[i] = heap[i], heap[1]\n        local j = 1\n  \
    \      while true do\n            local l = j * 2\n            local r = l + 1\n\
    \            if l >= i then\n                break\n            elseif r >= i\
    \ then\n                if heap[l] < heap[j] then\n                    heap[j],\
    \ heap[l] = heap[l], heap[j]\n                end\n                break\n   \
    \         else\n                local m = heap[l]\n                if heap[r]\
    \ < m then\n                    m = heap[r]\n                    l = r\n     \
    \           end\n                if heap[j] > m then\n                    heap[j],\
    \ heap[l] = heap[l], heap[j]\n                    j = l\n                else\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    return heap\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k >= n then return arr end\n\
    \    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n\
    \    for i = k, 1, -1 do\n        local j = i\n        while j * 2 <= k do\n \
    \           local l = j * 2\n            local r = l + 1\n            if r <=\
    \ k and heap[r] > heap[l] then\n                l = r\n            end\n     \
    \       if heap[j] < heap[l] then\n                heap[j], heap[l] = heap[l],\
    \ heap[j]\n                j = l\n            else\n                break\n  \
    \          end\n        end\n    end\n    for i = k + 1, n do\n        if arr[i]\
    \ > heap[1] then\n            heap[1] = arr[i]\n            local j = 1\n    \
    \        while j * 2 <= k do\n                local l = j * 2\n              \
    \  local r = l + 1\n                if r <= k and heap[r] > heap[l] then\n   \
    \                 l = r\n                end\n                if heap[j] < heap[l]\
    \ then\n                    heap[j], heap[l] = heap[l], heap[j]\n            \
    \        j = l\n                else\n                    break\n            \
    \    end\n            end\n        end\n    end\n    return heap\nend", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l < r then\n            local pivot = partition(arr, l,\
    \ r)\n            if pivot == k then\n                return\n            elseif\
    \ pivot > k then\n                quickSelect(arr, l, pivot - 1, k)\n        \
    \    else\n                quickSelect(arr, pivot + 1, r, k)\n            end\n\
    \        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    local\
    \ res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[l]\n        local i = l\n        local j = r\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then\n            return arr[i]\n        elseif i >\
    \ k then\n            return quickSelect(arr, l, i - 1, k)\n        else\n   \
    \         return quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local\
    \ function quickSort(arr, l, r)\n        if l < r then\n            local i =\
    \ partition(arr, l, r)\n            quickSort(arr, l, i - 1)\n            quickSort(arr,\
    \ i + 1, r)\n        end\n    end\n    local n = #arr\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = quickSelect(arr, 1, n, i)\n    end\n    quickSort(res,\
    \ 1, k)\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == 1 then return {math.max(unpack(arr))}\
    \ end\n    if k == n then return arr end\n    local res = {}\n    for i = 1, k\
    \ do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1,\
    \ n do\n        if arr[i] > res[1] then\n            res[1] = arr[i]\n       \
    \     table.sort(res)\n        end\n    end\n    return res\nend", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l - 1\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n \
    \               i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n \
    \           end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quickSelect(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ p = partition(arr, l, r)\n        if p == k then\n            return arr[p]\n\
    \        elseif p > k then\n            return quickSelect(arr, l, p - 1, k)\n\
    \        else\n            return quickSelect(arr, p + 1, r, k)\n        end\n\
    \    end\n    local function merge(arr1, arr2)\n        local i, j, k = 1, 1,\
    \ 1\n        local m, n = #arr1, #arr2\n        local arr = {}\n        while\
    \ i <= m and j <= n do\n            if arr1[i] > arr2[j] then\n              \
    \  arr[k] = arr1[i]\n                i = i + 1\n            else\n           \
    \     arr[k] = arr2[j]\n                j = j + 1\n            end\n         \
    \   k = k + 1\n        end\n        while i <= m do\n            arr[k] = arr1[i]\n\
    \            i = i + 1\n            k = k + 1\n        end\n        while j <=\
    \ n do\n            arr[k] = arr2[j]\n            j = j + 1\n            k = k\
    \ + 1\n        end\n        return arr\n    end\n    local function mergeSort(arr,\
    \ l, r)\n        if l == r then\n            return {arr[l]}\n        end\n  \
    \      local m = math.floor((l + r) / 2)\n        local arr1 = mergeSort(arr,\
    \ l, m)\n        local arr2 = mergeSort(arr, m + 1, r)\n        return merge(arr",
  "    local function partition(arr, l, r)\n        local pivot = arr[r]\n       \
    \ local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n     \
    \   return i\n    end\n    local function quickSelect(arr, l, r, k)\n        if\
    \ l == r then\n            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    return quickSelect(arr, 1, #arr, #arr - k + 1)\nend", "    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == 1 then\n        local\
    \ max = arr[1]\n        for i = 2, n do\n            if arr[i] > max then\n  \
    \              max = arr[i]\n            end\n        end\n        return {max}\n\
    \    end\n    local function partition(arr, lo, hi)\n        local pivot = arr[hi]\n\
    \        local i = lo\n        for j = lo, hi - 1 do\n            if arr[j] >\
    \ pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n              \
    \  i = i + 1\n            end\n        end\n        arr[i], arr[hi] = arr[hi],\
    \ arr[i]\n        return i\n    end\n    local function quickselect(arr, lo, hi,\
    \ k)\n        if lo == hi then return arr[lo] end\n        local p = partition(arr,\
    \ lo, hi)\n        if p == k then return arr[p] end\n        if p > k then\n \
    \           return quickselect(arr, lo, p - 1, k)\n        else\n            return\
    \ quickselect(arr, p + 1, hi, k)\n        end\n    end\n    local function sort(arr,\
    \ lo, hi)\n        if lo >= hi then return end\n        local p = partition(arr,\
    \ lo, hi)\n        sort(arr, lo, p - 1)\n        sort(arr, p + 1, hi)\n    end\n\
    \    local pivot = quickselect(arr, 1, n, k)\n    local i = 1\n    while i <=\
    \ n and arr[i] >= pivot do\n        i = i + 1\n    end\n    sort(arr, 1, i - 1)\n\
    \    return arr\nend", "    local n = #arr\n    local function partition(l, r)\n\
    \        local i, j = l, r\n        local v = arr[l]\n        while i < j do\n\
    \            while i < j and arr[j] <= v do\n                j = j - 1\n     \
    \       end\n            arr[i] = arr[j]\n            while i < j and arr[i] >=\
    \ v do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = v\n        return i\n    end\n    local function\
    \ quickSelect(l, r)\n        if l == r then\n            return\n        end\n\
    \        local i = partition(l, r)\n        if i == k then\n            return\n\
    \        elseif i > k then\n            quickSelect(l, i - 1)\n        else\n\
    \            quickSelect(i + 1, r)\n        end\n    end\n    quickSelect(1, n)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend", "    local n = #arr\n    local function partition(left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function sort(left, right)\n        if left\
    \ < right then\n            local mid = partition(left, right)\n            if\
    \ mid == k - 1 then\n                return\n            elseif mid > k - 1 then\n\
    \                sort(left, mid - 1)\n            else\n                sort(mid\
    \ + 1, right)\n            end\n        end\n    end\n    sort(1, n)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local len = #arr\n    if len == 0 then\n        return {}\n\
    \    end\n    if k == 0 then\n        return {}\n    end\n    if k >= len then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[r]\n\
    \        local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] >\
    \ pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i\
    \ + 1]\n        return i + 1\n    end\n    local function quickSelect(arr, l,\
    \ r, k)\n        if l == r then\n            return arr[l]\n        end\n    \
    \    local pivot = partition(arr, l, r)\n        if pivot == k then\n        \
    \    return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, #arr, k)\n    return\
    \ arr\nend", "    local n = #arr\n    if n == 0 then return {} end\n    if k ==\
    \ 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n     \
    \   for i = 2, n do\n            if arr[i] > max then\n                max = arr[i]\n\
    \            end\n        end\n        return {max}\n    end\n    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, left, right, k)\n        if left == right then\n          \
    \  return arr[left]\n        end\n        local mid = partition(arr, left, right)\n\
    \        if mid == k then\n            return arr[mid]\n        elseif mid < k\
    \ then\n            return quickSelect(arr, mid + 1, right, k)\n        else\n\
    \            return quickSelect(arr, left, mid - 1, k)\n        end\n    end\n\
    \    local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local mid = partition(arr, left, right)\n            quickSort(arr,\
    \ left, mid - 1)\n            quickSort(arr, mid + 1, right)\n        end\n  \
    \  end\n    quickSort(arr, 1, n)\n    local res = {}\n    for i = 1, k do\n  \
    \      res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickselect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local pivot = partition(arr, l, r)\n        if\
    \ pivot == k then\n            return arr[pivot]\n        elseif pivot > k then\n\
    \            return quickselect(arr, l, pivot - 1, k)\n        else\n        \
    \    return quickselect(arr, pivot + 1, r, k)\n        end\n    end\n    return\
    \ quickselect(arr, 1, #arr, k)\nend", "    local n = #arr\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l\n  \
    \      for j = l, r - 1 do\n            if arr[j] > pivot then\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n\
    \        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n\
    \    local function quickSelect(arr, l, r, k)\n        if l == r then\n      \
    \      return arr[l]\n        end\n        local p = partition(arr, l, r)\n  \
    \      if p == k then\n            return arr[p]\n        elseif p > k then\n\
    \            return quickSelect(arr, l, p - 1, k)\n        else\n            return\
    \ quickSelect(arr, p + 1, r, k)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local p = partition(arr, l, r)\n \
    \           quickSort(arr, l, p - 1)\n            quickSort(arr, p + 1, r)\n \
    \       end\n    end\n    quickSort(arr, 1, n)\n    local res = {}\n    for i\
    \ = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickSelect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local pos = partition(arr, l, r)\n        if pos\
    \ == k then\n            return arr[pos]\n        elseif pos < k then\n      \
    \      return quickSelect(arr, pos + 1, r, k)\n        else\n            return\
    \ quickSelect(arr, l, pos - 1, k)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local pos = partition(arr, l, r)\n\
    \            quickSort(arr, l, pos - 1)\n            quickSort(arr, pos + 1, r)\n\
    \        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local heap = {}\n    for i = 1, k do\n\
    \        heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n        local j =\
    \ i\n        while j * 2 <= k do\n            local t = j * 2\n            if\
    \ t + 1 <= k and heap[t + 1] > heap[t] then\n                t = t + 1\n     \
    \       end\n            if heap[j] < heap[t] then\n                heap[j], heap[t]\
    \ = heap[t], heap[j]\n                j = t\n            else\n              \
    \  break\n            end\n        end\n    end\n    for i = k + 1, n do\n   \
    \     if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            local\
    \ j = 1\n            while j * 2 <= k do\n                local t = j * 2\n  \
    \              if t + 1 <= k and heap[t + 1] > heap[t] then\n                \
    \    t = t + 1\n                end\n                if heap[j] < heap[t] then\n\
    \                    heap[j], heap[t] = heap[t], heap[j]\n                   \
    \ j = t\n                else\n                    break\n                end\n\
    \            end\n        end\n    end\n    return heap\nend", "    local n =\
    \ #arr\n    if n == 0 then return {} end\n    if k >= n then return arr end\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[r]\n     \
    \   local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n     \
    \   return i\n    end\n    local function quickselect(arr, l, r, k)\n        if\
    \ l == r then return arr[l] end\n        local p = partition(arr, l, r)\n    \
    \    if p == k then return arr[p] end\n        if p > k then return quickselect(arr,\
    \ l, p - 1, k) end\n        return quickselect(arr, p + 1, r, k)\n    end\n  \
    \  return quickselect(arr, 1, n, n - k + 1)\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local m = partition(arr, l, r)\n            quickSort(arr,\
    \ l, m - 1)\n            quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[l]\n        local i = l\n        local j = r\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then\n            return arr[i]\n        elseif i >\
    \ k then\n            return quickSelect(arr, l, i - 1, k)\n        else\n   \
    \         return quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local\
    \ function quickSort(arr, l, r)\n        if l < r then\n            local i =\
    \ partition(arr, l, r)\n            quickSort(arr, l, i - 1)\n            quickSort(arr,\
    \ i + 1, r)\n        end\n    end\n    local n = #arr\n    if n <= k then\n  \
    \      quickSort(arr, 1, n)\n        return arr\n    end\n    local pivot = quickSelect(arr,\
    \ 1, n, k)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >= pivot\
    \ then\n            res[#res + 1] = arr[i]\n        end\n    end\n    quickSort(res,\
    \ 1, #res)\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == 1 then\n        local\
    \ max = arr[1]\n        for i = 2, n do\n            if arr[i] > max then\n  \
    \              max = arr[i]\n            end\n        end\n        return {max}\n\
    \    end\n    if k == n then\n        table.sort(arr)\n        return arr\n  \
    \  end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n \
    \   end\n    for i = k, 1, -1 do\n        local j = i\n        while j * 2 <=\
    \ k do\n            local t = j * 2\n            if t + 1 <= k and heap[t + 1]\
    \ > heap[t] then\n                t = t + 1\n            end\n            if heap[j]\
    \ < heap[t] then\n                heap[j], heap[t] = heap[t], heap[j]\n      \
    \          j = t\n            else\n                break\n            end\n \
    \       end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            local j = 1\n            while j *\
    \ 2 <= k do\n                local t = j * 2\n                if t + 1 <= k and\
    \ heap[t + 1] > heap[t] then\n                    t = t + 1\n                end\n\
    \                if heap[j] < heap[t] then\n                    heap[j], heap[t]\
    \ = heap[t], heap[j]\n                    j = t\n                else\n      \
    \              break\n                end\n            end\n        end\n    end\n\
    \    table.sort(heap)\n    return heap\nend", "    local len = #arr\n    if k\
    \ == len then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n \
    \       return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left + 1\n        local j\
    \ = right\n        while true do\n            while i <= j and arr[i] <= pivot\
    \ do\n                i = i + 1\n            end\n            while i <= j and\
    \ arr[j] >= pivot do\n                j = j - 1\n            end\n           \
    \ if i > j then\n                break\n            end\n            arr[i], arr[j]\
    \ = arr[j], arr[i]\n        end\n        arr[left], arr[j] = arr[j], arr[left]\n\
    \        return j\n    end\n    local function quickselect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickselect(arr, left, pivot - 1, k)\n        else\n            return quickselect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    quickselect(arr, 1, len, len\
    \ - k + 1)\n    table.sort(arr, len - k + 1, len)\n    return arr\nend", "   \
    \ local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ left, right, k)\n        if left == right then return arr[left] end\n      \
    \  local pivot = partition(arr, left, right)\n        if pivot == k then return\
    \ arr[pivot] end\n        if pivot > k then\n            return quickSelect(arr,\
    \ left, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot\
    \ + 1, right, k)\n        end\n    end\n    local function quickSort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    local pivot = quickSelect(arr,\
    \ 1, n, k)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >= pivot\
    \ then\n            res[#res + 1] = arr[i]\n        end\n    end\n    quickSort(res,\
    \ 1, #res)\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            if i < j then\n                arr[i] = arr[j]\n          \
    \      i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local pivot = partition(arr,\
    \ l, r)\n            quickSort(arr, l, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local n = #arr\n    if n <= k then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, n do\n  \
    \      if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local p = arr[l]\n        local i = l + 1\n        for j = l\
    \ + 1, r do\n            if arr[j] > p then\n                arr[i], arr[j] =\
    \ arr[j], arr[i]\n                i = i + 1\n            end\n        end\n  \
    \      arr[l], arr[i - 1] = arr[i - 1], arr[l]\n        return i - 1\n    end\n\
    \    local function quickselect(arr, l, r, k)\n        if l == r then\n      \
    \      return arr[l]\n        end\n        local p = partition(arr, l, r)\n  \
    \      if p == k then\n            return arr[p]\n        elseif p > k then\n\
    \            return quickselect(arr, l, p - 1, k)\n        else\n            return\
    \ quickselect(arr, p + 1, r, k)\n        end\n    end\n    local function sort(arr,\
    \ l, r)\n        if l >= r then\n            return\n        end\n        local\
    \ p = partition(arr, l, r)\n        sort(arr, l, p - 1)\n        sort(arr, p +\
    \ 1, r)\n    end\n    local n = #arr\n    if k == n then\n        sort(arr, 1,\
    \ n)\n        return arr\n    end\n    local res = {}\n    for i = 1, k do\n \
    \       res[i] = quickselect(arr, 1, n, i)\n    end\n    return res\nend", " \
    \   local len = #arr\n    if k == len then\n        table.sort(arr)\n        return\
    \ arr\n    end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    table.sort(heap)\n    for i = k + 1, len do\n        if arr[i] >\
    \ heap[1] then\n            heap[1] = arr[i]\n            table.sort(heap)\n \
    \       end\n    end\n    return heap\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local p = partition(arr, l, r)\n            quickSort(arr,\
    \ l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[r]\n        local i = l - 1\n        for j = l, r - 1\
    \ do\n            if arr[j] > pivot then\n                i = i + 1\n        \
    \        arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n     \
    \   arr[i + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local p = partition(arr, l, r)\n   \
    \     if p == k then\n            return arr[p]\n        elseif p < k then\n \
    \           return quickSelect(arr, p + 1, r, k)\n        else\n            return\
    \ quickSelect(arr, l, p - 1, k)\n        end\n    end\n    local function maxHeapify(arr,\
    \ i, n)\n        local l = 2 * i\n        local r = 2 * i + 1\n        local largest\
    \ = i\n        if l <= n and arr[l] > arr[largest] then\n            largest =\
    \ l\n        end\n        if r <= n and arr[r] > arr[largest] then\n         \
    \   largest = r\n        end\n        if largest ~= i then\n            arr[i],\
    \ arr[largest] = arr[largest], arr[i]\n            maxHeapify(arr, largest, n)\n\
    \        end\n    end\n    local function buildMaxHeap(arr, n)\n        for i\
    \ = math.floor(n / 2), 1, -1 do\n            maxHeapify(arr, i, n)\n        end\n\
    \    end\n    local function heapSort(arr, n)\n        buildMaxHeap(arr, n)\n\
    \        for i = n, 2, -1 do\n            arr[1], arr[i] = arr[i], arr[1]\n  \
    \          maxHeapify(arr, 1, i - 1)\n        end\n    end\n    local function\
    \ heapSelect(arr, k)\n        local n = #arr\n        buildMaxHeap(arr, k)\n \
    \      ", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l >= r then\n            return\n    \
    \    end\n        local m = partition(arr, l, r)\n        if m == k then\n   \
    \         return\n        elseif m < k then\n            quickSelect(arr, m +\
    \ 1, r, k)\n        else\n            quickSelect(arr, l, m - 1, k)\n        end\n\
    \    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    return arr\nend", " \
    \   local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == 1 then\n        local max = arr[1]\n        for i = 2, n\
    \ do\n            if arr[i] > max then\n                max = arr[i]\n       \
    \     end\n        end\n        return {max}\n    end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ left, right, k)\n        if left == right then\n            return arr[left]\n\
    \        end\n        local pivot = partition(arr, left, right)\n        if pivot\
    \ == k then\n            return arr[pivot]\n        elseif pivot > k then\n  \
    \          return quickSelect(arr, left, pivot - 1, k)\n        else\n       \
    \     return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n   \
    \ quickSelect(arr, 1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1,\
    \ n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend", "    local\
    \ n = #arr\n    if n == k then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local function partition(l, r)\n        local i, j = l, r\n    \
    \    local pivot = arr[i]\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local l, r = 1, n\n  \
    \  while l <= r do\n        local m = partition(l, r)\n        if m == k then\n\
    \            break\n        elseif m < k then\n            l = m + 1\n       \
    \ else\n            r = m - 1\n        end\n    end\n    table.sort(arr, 1, k)\n\
    \    return arr\nend", "    local n = #arr\n    if n == 0 then return {} end\n\
    \    if k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    for i =\
    \ k + 1, n do\n        local j = 1\n        while j <= k and res[j] > arr[i] do\n\
    \            j = j + 1\n        end\n        if j <= k then\n            for l\
    \ = k, j + 1, -1 do\n                res[l] = res[l - 1]\n            end\n  \
    \          res[j] = arr[i]\n        end\n    end\n    return res\nend", "    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k >= n then return arr end\n    local function swap(arr, i, j)\n     \
    \   arr[i], arr[j] = arr[j], arr[i]\n    end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                swap(arr, i, j)\n\
    \                i = i + 1\n            end\n        end\n        swap(arr, i,\
    \ r)\n        return i\n    end\n    local function quickselect(arr, l, r, k)\n\
    \        if l == r then return arr[l] end\n        local p = partition(arr, l,\
    \ r)\n        if p == k then return arr[p] end\n        if p > k then return quickselect(arr,\
    \ l, p - 1, k) end\n        return quickselect(arr, p + 1, r, k)\n    end\n  \
    \  local function sort(arr, l, r)\n        if l >= r then return end\n       \
    \ local p = partition(arr, l, r)\n        sort(arr, l, p - 1)\n        sort(arr,\
    \ p + 1, r)\n    end\n    local pivot = quickselect(arr, 1, n, k)\n    local res\
    \ = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    sort(res, 1, #res)\n    return res\n\
    end", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then\
    \ return {} end\n    if k >= n then return arr end\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for\
    \ i = k + 1, n do\n        local j = 1\n        while j <= k and res[j] < arr[i]\
    \ do\n            j = j + 1\n        end\n        if j <= k then\n           \
    \ table.insert(res, j, arr[i])\n            table.remove(res)\n        end\n \
    \   end\n    return res\nend", "    local heap = {}\n    for i = 1, #arr do\n\
    \        if i <= k then\n            table.insert(heap, arr[i])\n        else\n\
    \            local min = math.min(table.unpack(heap))\n            if arr[i] >\
    \ min then\n                for j = 1, #heap do\n                    if heap[j]\
    \ == min then\n                        heap[j] = arr[i]\n                    \
    \    break\n                    end\n                end\n            end\n  \
    \      end\n    end\n    table.sort(heap)\n    return heap\nend", "    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local pivot = partition(arr, l, r)\n\
    \            quickSort(arr, l, pivot - 1)\n            quickSort(arr, pivot +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend",
  "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == 1 then\n        local max = arr[1]\n        for i = 2, n\
    \ do\n            if arr[i] > max then\n                max = arr[i]\n       \
    \     end\n        end\n        return {max}\n    end\n    local function swap(arr,\
    \ i, j)\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l + 1\n\
    \        for j = l + 1, r do\n            if arr[j] < pivot then\n           \
    \     swap(arr, i, j)\n                i = i + 1\n            end\n        end\n\
    \        swap(arr, l, i - 1)\n        return i - 1\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then return arr[l] end\n      \
    \  local p = partition(arr, l, r)\n        if p == k then return arr[p] end\n\
    \        if p > k then\n            return quickSelect(arr, l, p - 1, k)\n   \
    \     else\n            return quickSelect(arr, p + 1, r, k)\n        end\n  \
    \  end\n    local pivot = quickSelect(arr, 1, n, k)\n    local res = {}\n    for\
    \ i = 1, n do\n        if arr[i] >= pivot then\n            res[#res + 1] = arr[i]\n\
    \        end\n    end\n    return res\nend", "    local n = #arr\n    local function\
    \ partition(l, r)\n        local pivot = arr[r]\n        local i = l\n       \
    \ for j = l, r - 1 do\n            if arr[j] > pivot then\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n      \
    \  end\n        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n \
    \   local function quick_select(l, r, k)\n        if l == r then\n           \
    \ return\n        end\n        local i = partition(l, r)\n        if i == k then\n\
    \            return\n        elseif i > k then\n            quick_select(l, i\
    \ - 1, k)\n        else\n            quick_select(i + 1, r, k)\n        end\n\
    \    end\n    quick_select(1, n, k)\n    return arr\nend", "    local len = #arr\n\
    \    if k == len then\n        table.sort(arr)\n        return arr\n    end\n\
    \    local res = {}\n    local i = 1\n    while i <= k do\n        local max =\
    \ arr[i]\n        local max_i = i\n        for j = i + 1, len do\n           \
    \ if arr[j] > max then\n                max = arr[j]\n                max_i =\
    \ j\n            end\n        end\n        res[i] = max\n        arr[max_i] =\
    \ arr[i]\n        i = i + 1\n    end\n    return res\nend", "    local n = #arr\n\
    \    if n == 0 then return {} end\n    if k == 0 then return {} end\n    if k\
    \ == 1 then\n        local max = arr[1]\n        for i = 2, n do\n           \
    \ if arr[i] > max then\n                max = arr[i]\n            end\n      \
    \  end\n        return {max}\n    end\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then return arr[l] end\n        local i = partition(arr, l, r)\n        if i\
    \ == k then\n            return arr[i]\n        elseif i > k then\n          \
    \  return quickSelect(arr, l, i - 1, k)\n        else\n            return quickSelect(arr,\
    \ i + 1, r, k)\n        end\n    end\n    local function quickSort(arr, l, r)\n\
    \        if l < r then\n            local i = partition(arr, l, r)\n         \
    \   quickSort(arr, l, i - 1)\n            quickSort(arr, i + 1, r)\n        end\n\
    \    end\n    local pivot = quickSelect(arr, 1, n, k)\n    local res = {}\n  \
    \  for i = 1, n do\n        if arr[i] >= pivot then\n            res[#res + 1]\
    \ = arr[i]\n        end\n    end\n    quickSort(res, 1, #res)\n    return res\n\
    end", "    local len = #arr\n    local function swap(arr, i, j)\n        arr[i],\
    \ arr[j] = arr[j], arr[i]\n    end\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                swap(arr, i, j)\n       \
    \         i = i + 1\n            end\n        end\n        swap(arr, i, r)\n \
    \       return i\n    end\n    local function quickSelect(arr, l, r, k)\n    \
    \    if l == r then\n            return arr[l]\n        end\n        local pivot\
    \ = partition(arr, l, r)\n        if pivot == k then\n            return arr[pivot]\n\
    \        elseif pivot > k then\n            return quickSelect(arr, l, pivot -\
    \ 1, k)\n        else\n            return quickSelect(arr, pivot + 1, r, k)\n\
    \        end\n    end\n    quickSelect(arr, 1, len, k)\n    local res = {}\n \
    \   for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", " \
    \   local n = #arr\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickSelect(arr, l, r,\
    \ k)\n        if l == r then\n            return\n        end\n        local p\
    \ = partition(arr, l, r)\n        if p == k then\n            return\n       \
    \ elseif p < k then\n            quickSelect(arr, p + 1, r, k)\n        else\n\
    \            quickSelect(arr, l, p - 1, k)\n        end\n    end\n    quickSelect(arr,\
    \ 1, n, k)\n    return arr\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == 1 then\n        local\
    \ max = arr[1]\n        for i = 2, n do\n            if arr[i] > max then\n  \
    \              max = arr[i]\n            end\n        end\n        return {max}\n\
    \    end\n    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            if i < j then\n                arr[i] = arr[j]\n          \
    \      i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickselect(arr, l, r, k)\n        if l == r then return arr[l] end\n      \
    \  local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p > k then\n            return quickselect(arr, l, p\
    \ - 1, k)\n        else\n            return quickselect(arr, p + 1, r, k)\n  \
    \      end\n    end\n    local res = {}\n    local max = quickselect(arr, 1, n,\
    \ k)\n    for i = 1, n do\n        if arr[i] >= max then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    return res\nend", "    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "    local heap = {}\n    for\
    \ i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 2, -1 do\n  \
    \      if heap[i] < heap[i // 2] then\n            heap[i], heap[i // 2] = heap[i\
    \ // 2], heap[i]\n        end\n    end\n    for i = k + 1, #arr do\n        if\
    \ arr[i] > heap[1] then\n            heap[1] = arr[i]\n            for j = 1,\
    \ k, 2 do\n                if heap[j] > heap[j + 1] then\n                   \
    \ heap[j], heap[j + 1] = heap[j + 1], heap[j]\n                end\n         \
    \   end\n        end\n    end\n    return heap\nend", "    local len = #arr\n\
    \    if len == 0 then\n        return {}\n    end\n    if k == 0 then\n      \
    \  return {}\n    end\n    if k >= len then\n        table.sort(arr)\n       \
    \ return arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n        if\
    \ arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local heap = {}\n    for i =\
    \ 1, #arr do\n        if i <= k then\n            table.insert(heap, arr[i])\n\
    \        else\n            local min = heap[1]\n            if arr[i] > min then\n\
    \                heap[1] = arr[i]\n                local j = 1\n             \
    \   while j * 2 <= k do\n                    local l = j * 2\n               \
    \     local r = j * 2 + 1\n                    if r <= k then\n              \
    \          if heap[l] < heap[r] then\n                            if heap[j] >\
    \ heap[r] then\n                                heap[j], heap[r] = heap[r], heap[j]\n\
    \                                j = r\n                            else\n   \
    \                             break\n                            end\n       \
    \                 else\n                            if heap[j] > heap[l] then\n\
    \                                heap[j], heap[l] = heap[l], heap[j]\n       \
    \                         j = l\n                            else\n          \
    \                      break\n                            end\n              \
    \          end\n                    else\n                        if heap[j] >\
    \ heap[l] then\n                            heap[j], heap[l] = heap[l], heap[j]\n\
    \                            j = l\n                        else\n           \
    \                 break\n                        end\n                    end\n\
    \                end\n            end\n        end\n    end\n    for i = k, 2,\
    \ -1 do\n        heap[1], heap[i] = heap[i], heap[1]\n        local j = 1\n  \
    \      while j * 2 <= i - 1 do\n            local l = j * 2\n            local\
    \ r = j * 2 + 1\n            if r <= i - 1 then\n                if heap[l] <\
    \ heap[r] then\n                    if heap[j] > heap[r] then\n              \
    \          heap[j], heap[r] = heap[r], heap[j]\n                        j = r\n\
    \                    else\n                        break\n                   \
    \ end\n                else\n                    if heap[j] > heap[l] then\n \
    \                       heap[j], heap[l] = heap[l], heap[j]\n                \
    \        j = l\n                    else\n                        break\n    \
    \                end\n                end\n            else\n                if\
    \ heap[j] > heap[l] then\n                    heap[j], heap[l] =", "    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "    local heap = {}\n    local\
    \ function heapify(arr, i)\n        local l = i * 2\n        local r = i * 2 +\
    \ 1\n        local largest = i\n        if l <= #arr and arr[l] > arr[largest]\
    \ then\n            largest = l\n        end\n        if r <= #arr and arr[r]\
    \ > arr[largest] then\n            largest = r\n        end\n        if largest\
    \ ~= i then\n            arr[i], arr[largest] = arr[largest], arr[i]\n       \
    \     heapify(arr, largest)\n        end\n    end\n    local function build_heap(arr)\n\
    \        for i = math.floor(#arr / 2), 1, -1 do\n            heapify(arr, i)\n\
    \        end\n    end\n    local function heap_sort(arr)\n        build_heap(arr)\n\
    \        for i = #arr, 2, -1 do\n            arr[1], arr[i] = arr[i], arr[1]\n\
    \            table.remove(arr)\n            heapify(arr, 1)\n        end\n   \
    \ end\n    for i = 1, #arr do\n        table.insert(heap, arr[i])\n        heap_sort(heap)\n\
    \        if #heap > k then\n            table.remove(heap, 1)\n        end\n \
    \   end\n    return heap\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k >= n then return arr end\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l + 1\n        local j = r\n        while true do\n            while\
    \ i <= r and arr[i] > pivot do i = i + 1 end\n            while j >= l + 1 and\
    \ arr[j] < pivot do j = j - 1 end\n            if i >= j then break end\n    \
    \        arr[i], arr[j] = arr[j], arr[i]\n            i = i + 1\n            j\
    \ = j - 1\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n        return\
    \ j\n    end\n    local function quickSelect(arr, l, r, k)\n        local p =\
    \ partition(arr, l, r)\n        if p == k then return end\n        if p > k then\n\
    \            quickSelect(arr, l, p - 1, k)\n        else\n            quickSelect(arr,\
    \ p + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, n, k)\n    return\
    \ arr\nend", "    local n = #arr\n    if n == 0 then return {} end\n    if k ==\
    \ 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n     \
    \   for i = 2, n do\n            if arr[i] > max then\n                max = arr[i]\n\
    \            end\n        end\n        return {max}\n    end\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        local j = 1\n        while j <= k and arr[i]\
    \ > res[j] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          table.insert(res, j, arr[i])\n            table.remove(res, k + 1)\n\
    \        end\n    end\n    return res\nend", "    local len = #arr\n    if k ==\
    \ len then\n        table.sort(arr)\n        return arr\n    end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n \
    \       return arr\n    end\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n \
    \       local j = 1\n        while j <= k do\n            if arr[i] > res[j] then\n\
    \                table.remove(res, j)\n                table.insert(res, j, arr[i])\n\
    \                break\n            end\n            j = j + 1\n        end\n\
    \    end\n    return res\nend", "    local heap = {}\n    local function heap_push(heap,\
    \ val)\n        local i = #heap + 1\n        heap[i] = val\n        while i >\
    \ 1 do\n            local j = math.floor(i / 2)\n            if heap[j] < heap[i]\
    \ then\n                heap[i], heap[j] = heap[j], heap[i]\n                i\
    \ = j\n            else\n                break\n            end\n        end\n\
    \    end\n    local function heap_pop(heap)\n        local val = heap[1]\n   \
    \     heap[1] = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n\
    \        while i * 2 <= #heap do\n            local j = i * 2\n            if\
    \ j + 1 <= #heap and heap[j] < heap[j + 1] then\n                j = j + 1\n \
    \           end\n            if heap[i] < heap[j] then\n                heap[i],\
    \ heap[j] = heap[j], heap[i]\n                i = j\n            else\n      \
    \          break\n            end\n        end\n        return val\n    end\n\
    \    for i = 1, #arr do\n        if #heap < k then\n            heap_push(heap,\
    \ arr[i])\n        elseif arr[i] > heap[1] then\n            heap_pop(heap)\n\
    \            heap_push(heap, arr[i])\n        end\n    end\n    local res = {}\n\
    \    for i = 1, #heap do\n        res[i] = heap_pop(heap)\n    end\n    return\
    \ res\nend", "    local n = #arr\n    if n == 0 then return {} end\n    if k ==\
    \ 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n     \
    \   for i = 2, n do\n            if arr[i] > max then\n                max = arr[i]\n\
    \            end\n        end\n        return {max}\n    end\n    local heap =\
    \ {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1,\
    \ -1 do\n        local j = i\n        while j * 2 <= k do\n            local l\
    \ = j * 2\n            local r = l + 1\n            if r <= k and heap[r] > heap[l]\
    \ then\n                l = r\n            end\n            if heap[j] < heap[l]\
    \ then\n                heap[j], heap[l] = heap[l], heap[j]\n                j\
    \ = l\n            else\n                break\n            end\n        end\n\
    \    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n        \
    \    heap[1] = arr[i]\n            local j = 1\n            while j * 2 <= k do\n\
    \                local l = j * 2\n                local r = l + 1\n          \
    \      if r <= k and heap[r] > heap[l] then\n                    l = r\n     \
    \           end\n                if heap[j] < heap[l] then\n                 \
    \   heap[j], heap[l] = heap[l], heap[j]\n                    j = l\n         \
    \       else\n                    break\n                end\n            end\n\
    \        end\n    end\n    return heap\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local p = partition(arr, l, r)\n            quickSort(arr,\
    \ l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local len = #arr\n    if k == len then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i == k then\n\
    \            return arr[i]\n        elseif i > k then\n            return quickSelect(arr,\
    \ l, i - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n\
    \        end\n    end\n    local function quickSelect2(arr, l, r, k)\n       \
    \ if l == r then\n            return arr[l]\n        end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then\n            return arr[i]\n        elseif i >\
    \ k then\n            return quickSelect2(arr, l, i - 1, k)\n        else\n  \
    \          return quickSelect2(arr, i + 1, r, k - i - 1)\n        end\n    end\n\
    \    local function quickSelect3(arr, l, r, k)\n        if l == r then\n     \
    \       return arr[l]\n        end\n        local i = partition(arr, l, r)\n \
    \       if i == k then\n            return arr[i]\n        elseif i > k then\n\
    \            return quickSelect3(arr, l, i - 1, k)\n        else\n           \
    \ return quickSelect3(arr, i + 1, r, k)\n        end\n    end\n    local function\
    \ quickSelect4(arr, l, r, k)\n        if l == r then\n            return arr[l]\n\
    \        end\n        local i = partition(arr, l, r)\n        if i", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ l, r)\n        if l < r then\n            local m = partition(arr, l, r)\n \
    \           quick_sort(arr, l, m - 1)\n            quick_sort(arr, m + 1, r)\n\
    \        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSelect(arr, left, right, k)\n        if left\
    \ == right then\n            return arr[left]\n        end\n        local pivot\
    \ = partition(arr, left, right)\n        if pivot == k then\n            return\
    \ arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ left, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot\
    \ + 1, right, k)\n        end\n    end\n    quickSelect(arr, 1, len, len - k +\
    \ 1)\n    return arr\nend", "    local function partition(arr, l, r)\n       \
    \ local pivot = arr[l]\n        local i = l + 1\n        local j = r\n       \
    \ while true do\n            while i <= r and arr[i] >= pivot do\n           \
    \     i = i + 1\n            end\n            while j >= l + 1 and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            if i >= j then\n\
    \                break\n            end\n            arr[i], arr[j] = arr[j],\
    \ arr[i]\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n        return\
    \ j\n    end\n    local function quickselect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local j = partition(arr,\
    \ l, r)\n        if j == k then\n            return arr[j]\n        elseif j >\
    \ k then\n            return quickselect(arr, l, j - 1, k)\n        else\n   \
    \         return quickselect(arr, j + 1, r, k)\n        end\n    end\n    local\
    \ function quicksort(arr, l, r)\n        if l >= r then\n            return\n\
    \        end\n        local j = partition(arr, l, r)\n        quicksort(arr, l,\
    \ j - 1)\n        quicksort(arr, j + 1, r)\n    end\n    local n = #arr\n    local\
    \ kth = quickselect(arr, 1, n, n - k + 1)\n    local res = {}\n    for i = 1,\
    \ n do\n        if arr[i] >= kth then\n            res[#res + 1] = arr[i]\n  \
    \      end\n    end\n    quicksort(res, 1, #res)\n    return res\nend", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n     \
    \       end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return arr[p]\n        elseif p >\
    \ k then\n            return quickSelect(arr, l, p - 1, k)\n        else\n   \
    \         return quickSelect(arr, p + 1, r, k)\n        end\n    end\n    local\
    \ function quickSort(arr, l, r)\n        if l < r then\n            local p =\
    \ partition(arr, l, r)\n            quickSort(arr, l, p - 1)\n            quickSort(arr,\
    \ p + 1, r)\n        end\n    end\n    local n = #arr\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = quickSelect(arr, 1, n, i)\n    end\n    quickSort(res,\
    \ 1, k)\n    return res\nend", "    local heap = {}\n    for i = 1, #arr do\n\
    \        if i <= k then\n            heap[i] = arr[i]\n        else\n        \
    \    table.sort(heap)\n            if arr[i] > heap[1] then\n                heap[1]\
    \ = arr[i]\n            end\n        end\n    end\n    table.sort(heap)\n    return\
    \ heap\nend", "    local n = #arr\n    if n == 0 then return {} end\n    if k\
    \ == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n  \
    \      for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function swap(arr, i, j)\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        for j = l + 1, r do\n            if arr[j] < pivot then\n\
    \                i = i + 1\n                swap(arr, i, j)\n            end\n\
    \        end\n        swap(arr, l, i)\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then return arr[l] end\n      \
    \  local pivot = partition(arr, l, r)\n        if pivot == k then\n          \
    \  return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local max = quickSelect(arr, 1, n, n - k\
    \ + 1)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >= max then\n\
    \            res[#res + 1] = arr[i]\n        end\n    end\n    return res\nend",
  "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ left, right, k)\n        if left == right then return arr[left] end\n      \
    \  local pivot = partition(arr, left, right)\n        if pivot == k then return\
    \ arr[pivot] end\n        if pivot > k then\n            return quickSelect(arr,\
    \ left, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot\
    \ + 1, right, k)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = quickSelect(arr, 1, n, i)\n    end\n    return res\nend", " \
    \   local n = #arr\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local i = partition(arr, l, r)\n   \
    \     if i == k then\n            return arr[i]\n        elseif i > k then\n \
    \           return quickSelect(arr, l, i - 1, k)\n        else\n            return\
    \ quickSelect(arr, i + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1,\
    \ n, n - k + 1)\n    local res = {}\n    for i = n - k + 1, n do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            if i < j then\n     \
    \           arr[i] = arr[j]\n                i = i + 1\n            end\n    \
    \        while i < j and arr[i] >= pivot do\n                i = i + 1\n     \
    \       end\n            if i < j then\n                arr[j] = arr[i]\n    \
    \            j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local i = partition(arr, l, r)\n            quickSort(arr,\
    \ l, i - 1)\n            quickSort(arr, i + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[l]\n        local i = l\n        local j = r\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quick_sort(arr, l, r)\n        if l < r then\n  \
    \          local m = partition(arr, l, r)\n            quick_sort(arr, l, m -\
    \ 1)\n            quick_sort(arr, m + 1, r)\n        end\n    end\n    quick_sort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    quickSelect(arr, 1, #arr, #arr\
    \ - k + 1)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    if n\
    \ == 0 then return {} end\n    if k == 0 then return {} end\n    if k == 1 then\n\
    \        local max = arr[1]\n        for i = 2, n do\n            if arr[i] >\
    \ max then\n                max = arr[i]\n            end\n        end\n     \
    \   return {max}\n    end\n    local function helper(arr, l, r, k)\n        if\
    \ l == r then return arr[l] end\n        local i, j = l, r\n        local pivot\
    \ = arr[l]\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        if i - l + 1 == k then\n            return pivot\n        elseif i -\
    \ l + 1 > k then\n            return helper(arr, l, i - 1, k)\n        else\n\
    \            return helper(arr, i + 1, r, k - (i - l + 1))\n        end\n    end\n\
    \    local pivot = helper(arr, 1, n, k)\n    local res = {}\n    for i = 1, n\
    \ do\n        if arr[i] >= pivot then\n            res[#res + 1] = arr[i]\n  \
    \      end\n    end\n    return res\nend", "    local n = #arr\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[r]\n        local i = l\n  \
    \      for j = l, r - 1 do\n            if arr[j] > pivot then\n             \
    \   arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n\
    \        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n\
    \    local function quickSelect(arr, l, r, k)\n        if l == r then\n      \
    \      return arr[l]\n        end\n        local i = partition(arr, l, r)\n  \
    \      if i == k then\n            return arr[i]\n        elseif i > k then\n\
    \            return quickSelect(arr, l, i - 1, k)\n        else\n            return\
    \ quickSelect(arr, i + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1,\
    \ n, k)\n    return arr\nend", "    local function partition(arr, l, r)\n    \
    \    local pivot = arr[l]\n        local i = l\n        local j = r\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l >= r then\n  \
    \          return\n        end\n        local mid = partition(arr, l, r)\n   \
    \     quickSort(arr, l, mid - 1)\n        quickSort(arr, mid + 1, r)\n    end\n\
    \    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    if\
    \ n == 0 then return {} end\n    if k == 0 then return {} end\n    if k >= n then\
    \ return arr end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, n do\n        local j = 1\n\
    \        while j <= k and res[j] < arr[i] do\n            j = j + 1\n        end\n\
    \        if j <= k then\n            for l = k, j + 1, -1 do\n               \
    \ res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n        end\n\
    \    end\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k >= n then return arr end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   for i = k + 1, n do\n        local j = 1\n        while j <= k and res[j]\
    \ < arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          for l = k, j + 1, -1 do\n                res[l] = res[l - 1]\n    \
    \        end\n            res[j] = arr[i]\n        end\n    end\n    return res\n\
    end", "    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n  \
    \  end\n    for i = k, 2, -1 do\n        if heap[i] < heap[i >> 1] then\n    \
    \        heap[i], heap[i >> 1] = heap[i >> 1], heap[i]\n        end\n    end\n\
    \    for i = k + 1, #arr do\n        if arr[i] > heap[1] then\n            heap[1]\
    \ = arr[i]\n            for j = 1, k >> 1 do\n                if heap[j] > heap[j\
    \ << 1] and heap[j] > heap[j << 1 | 1] then\n                    break\n     \
    \           elseif heap[j << 1] > heap[j << 1 | 1] then\n                    heap[j],\
    \ heap[j << 1] = heap[j << 1], heap[j]\n                    j = j << 1\n     \
    \           else\n                    heap[j], heap[j << 1 | 1] = heap[j << 1\
    \ | 1], heap[j]\n                    j = j << 1 | 1\n                end\n   \
    \         end\n        end\n    end\n    for i = k, 2, -1 do\n        heap[i],\
    \ heap[i >> 1] = heap[i >> 1], heap[i]\n    end\n    return heap\nend", "    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k == 1 then\n        local max = arr[1]\n        for i = 2, n do\n   \
    \         if arr[i] > max then\n                max = arr[i]\n            end\n\
    \        end\n        return {max}\n    end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quick_select(arr, l, r, k)\n        if l == r then return arr[l] end\n\
    \        local p = partition(arr, l, r)\n        if p == k then return arr[p]\
    \ end\n        if p > k then\n            return quick_select(arr, l, p - 1, k)\n\
    \        else\n            return quick_select(arr, p + 1, r, k)\n        end\n\
    \    end\n    local max = quick_select(arr, 1, n, k)\n    local res = {}\n   \
    \ for i = 1, n do\n        if arr[i] >= max then\n            res[#res + 1] =\
    \ arr[i]\n        end\n    end\n    return res\nend", "    local n = #arr\n  \
    \  if n == 0 then return {} end\n    if k == 0 then return {} end\n    if k ==\
    \ 1 then\n        local max = arr[1]\n        for i = 2, n do\n            if\
    \ arr[i] > max then\n                max = arr[i]\n            end\n        end\n\
    \        return {max}\n    end\n    local heap = {}\n    for i = 1, k do\n   \
    \     heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n        local j = i\n\
    \        while j <= k do\n            local l = j * 2\n            local r = l\
    \ + 1\n            if l <= k and heap[l] < heap[j] then\n                heap[l],\
    \ heap[j] = heap[j], heap[l]\n                j = l\n            elseif r <= k\
    \ and heap[r] < heap[j] then\n                heap[r], heap[j] = heap[j], heap[r]\n\
    \                j = r\n            else\n                break\n            end\n\
    \        end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            local j = 1\n            while j <=\
    \ k do\n                local l = j * 2\n                local r = l + 1\n   \
    \             if l <= k and heap[l] < heap[j] then\n                    heap[l],\
    \ heap[j] = heap[j], heap[l]\n                    j = l\n                elseif\
    \ r <= k and heap[r] < heap[j] then\n                    heap[r], heap[j] = heap[j],\
    \ heap[r]\n                    j = r\n                else\n                 \
    \   break\n                end\n            end\n        end\n    end\n    return\
    \ heap\nend", "    local n = #arr\n    if n == 0 then return {} end\n    if k\
    \ == 0 then return {} end\n    if k >= n then return arr end\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        local j = 1\n        while j <= k and res[j]\
    \ < arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          for l = k, j + 1, -1 do\n                res[l] = res[l - 1]\n    \
    \        end\n            res[j] = arr[i]\n        end\n    end\n    return res\n\
    end", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then\
    \ return {} end\n    if k == 1 then\n        local max = arr[1]\n        for i\
    \ = 2, n do\n            if arr[i] > max then\n                max = arr[i]\n\
    \            end\n        end\n        return {max}\n    end\n    if k >= n then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, n do\n        local j = 1\n        while j <= k and res[j] <\
    \ arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n    \
    \        for m = k, j + 1, -1 do\n                res[m] = res[m - 1]\n      \
    \      end\n            res[j] = arr[i]\n        end\n    end\n    return res\n\
    end", "    local len = #arr\n    if len == 0 then\n        return {}\n    end\n\
    \    if k == 0 then\n        return {}\n    end\n    if k == len then\n      \
    \  return arr\n    end\n    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSelect(arr, l, r, k)\n        if l == r then\n\
    \            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = quickSelect(arr,\
    \ 1, len, i)\n    end\n    return res\nend", "    local function partition(arr,\
    \ low, high)\n        local pivot = arr[high]\n        local i = low - 1\n   \
    \     for j = low, high - 1 do\n            if arr[j] > pivot then\n         \
    \       i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n         \
    \   end\n        end\n        arr[i + 1], arr[high] = arr[high], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quickSort(arr, low, high)\n\
    \        if low < high then\n            local p = partition(arr, low, high)\n\
    \            quickSort(arr, low, p - 1)\n            quickSort(arr, p + 1, high)\n\
    \        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ len = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quick_select(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local pivot = partition(arr, l, r)\n        if pivot == k then\n     \
    \       return arr[pivot]\n        elseif pivot > k then\n            return quick_select(arr,\
    \ l, pivot - 1, k)\n        else\n            return quick_select(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    return quick_select(arr, 1, #arr, k)\nend",
  "    local function partition(arr, l, r)\n        local pivot = arr[r]\n       \
    \ local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n     \
    \   return i\n    end\n    local function quick_select(arr, l, r, k)\n       \
    \ if l == r then\n            return arr[l]\n        end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then\n            return arr[i]\n        elseif i >\
    \ k then\n            return quick_select(arr, l, i - 1, k)\n        else\n  \
    \          return quick_select(arr, i + 1, r, k)\n        end\n    end\n    local\
    \ function quick_sort(arr, l, r)\n        if l >= r then\n            return\n\
    \        end\n        local i = partition(arr, l, r)\n        quick_sort(arr,\
    \ l, i - 1)\n        quick_sort(arr, i + 1, r)\n    end\n    quick_sort(arr, 1,\
    \ #arr)\n    return arr\nend", "    local function partition(arr, l, r)\n    \
    \    local pivot = arr[l]\n        local i = l\n        local j = r\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSelect(arr, l, r, k)\n        if l == r then\n\
    \            return arr[l]\n        end\n        local i = partition(arr, l, r)\n\
    \        if i == k then\n            return arr[i]\n        elseif i > k then\n\
    \            return quickSelect(arr, l, i - 1, k)\n        else\n            return\
    \ quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local i = partition(arr, l, r)\n \
    \           quickSort(arr, l, i - 1)\n            quickSort(arr, i + 1, r)\n \
    \       end\n    end\n    local n = #arr\n    local res = {}\n    for i = 1, k\
    \ do\n        res[i] = quickSelect(arr, 1, n, i)\n    end\n    quickSort(res,\
    \ 1, k)\n    return res\nend", "    local n = #arr\n    local function partition(l,\
    \ r)\n        local pivot = arr[r]\n        local i = l\n        for j = l, r\
    \ - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j] =\
    \ arr[j], arr[i]\n                i = i + 1\n            end\n        end\n  \
    \      arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function\
    \ quickSelect(l, r, k)\n        if l < r then\n            local p = partition(l,\
    \ r)\n            if p == k then\n                return\n            elseif p\
    \ < k then\n                quickSelect(p + 1, r, k)\n            else\n     \
    \           quickSelect(l, p - 1, k)\n            end\n        end\n    end\n\
    \    quickSelect(1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1,\
    \ n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ if i < j then\n                arr[i] = arr[j]\n                i = i + 1\n\
    \            end\n            while i < j and arr[i] >= pivot do\n           \
    \     i = i + 1\n            end\n            if i < j then\n                arr[j]\
    \ = arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quickSort(arr, l, r)\n\
    \        if l < r then\n            local p = partition(arr, l, r)\n         \
    \   quickSort(arr, l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n\
    \    if n == 0 then return {} end\n    if k == 0 then return {} end\n    if k\
    \ == 1 then\n        local max = arr[1]\n        for i = 2, n do\n           \
    \ if arr[i] > max then\n                max = arr[i]\n            end\n      \
    \  end\n        return {max}\n    end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, n do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local n = #arr\n    if n ==\
    \ 0 then return {} end\n    if k == 0 then return {} end\n    if k >= n then return\
    \ arr end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    for i = k + 1, n do\n        local j = 1\n        while j <= k and\
    \ res[j] > arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n\
    \            for l = k, j + 1, -1 do\n                res[l] = res[l - 1]\n  \
    \          end\n            res[j] = arr[i]\n        end\n    end\n    return\
    \ res\nend", "    local n = #arr\n    local function quickselect(l, r)\n     \
    \   local i, j = l, r\n        local pivot = arr[l]\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        if i == k then\n     \
    \       return\n        elseif i > k then\n            quickselect(l, i - 1)\n\
    \        else\n            quickselect(i + 1, r)\n        end\n    end\n    quickselect(1,\
    \ n)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n\
    \    return res\nend", "    local function partition(arr, l, r)\n        local\
    \ pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n         \
    \   if arr[j] > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \                i = i + 1\n            end\n        end\n        arr[i], arr[r]\
    \ = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p > k then\n            return quickSelect(arr, l, p\
    \ - 1, k)\n        else\n            return quickSelect(arr, p + 1, r, k)\n  \
    \      end\n    end\n    local function quickSort(arr, l, r)\n        if l < r\
    \ then\n            local p = partition(arr, l, r)\n            quickSort(arr,\
    \ l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    local\
    \ n = #arr\n    quickSort(arr, 1, n)\n    return arr\nend", "    local len = #arr\n\
    \    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return arr[pivot]\n  \
    \      elseif pivot > k then\n            return quickSelect(arr, left, pivot\
    \ - 1, k)\n        else\n            return quickSelect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    local function quickSort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSelect(arr, 1, len, len - k + 1)\n\
    \    quickSort(arr, len - k + 1, len)\n    return arr\nend", "    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quickSort(arr, l, r)\n\
    \        if l < r then\n            local m = partition(arr, l, r)\n         \
    \   quickSort(arr, l, m - 1)\n            quickSort(arr, m + 1, r)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local mid = partition(arr,\
    \ left, right)\n            quickSort(arr, left, mid - 1)\n            quickSort(arr,\
    \ mid + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local n = #arr\n    if n == 0 then return {} end\n    if k ==\
    \ 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n     \
    \   for i = 2, n do\n            if arr[i] > max then\n                max = arr[i]\n\
    \            end\n        end\n        return {max}\n    end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l >= r then return end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return\n        elseif p > k then\n\
    \            quickSelect(arr, l, p - 1, k)\n        else\n            quickSelect(arr,\
    \ p + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n\
    \    return arr\nend", "    local len = #arr\n    if len == 0 then\n        return\
    \ {}\n    end\n    if k == 0 then\n        return {}\n    end\n    if k == len\
    \ then\n        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, len)\n    local res\
    \ = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res, arr[i])\n\
    \    end\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == 1 then\n        local\
    \ max = arr[1]\n        for i = 2, n do\n            if arr[i] > max then\n  \
    \              max = arr[i]\n            end\n        end\n        return {max}\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, n do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend", "    local n = #arr\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickselect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local i = partition(arr, l, r)\n        if i ==\
    \ k then\n            return arr[i]\n        elseif i > k then\n            return\
    \ quickselect(arr, l, i - 1, k)\n        else\n            return quickselect(arr,\
    \ i + 1, r, k)\n        end\n    end\n    quickselect(arr, 1, n, k)\n    return\
    \ arr\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local heap = {}\n    local function\
    \ heapify(i)\n        local l = i * 2\n        local r = i * 2 + 1\n        local\
    \ smallest = i\n        if l <= #heap and heap[l] < heap[smallest] then\n    \
    \        smallest = l\n        end\n        if r <= #heap and heap[r] < heap[smallest]\
    \ then\n            smallest = r\n        end\n        if smallest ~= i then\n\
    \            heap[i], heap[smallest] = heap[smallest], heap[i]\n            heapify(smallest)\n\
    \        end\n    end\n    local function insert(x)\n        heap[#heap + 1] =\
    \ x\n        local i = #heap\n        while i > 1 and heap[i] < heap[i // 2] do\n\
    \            heap[i], heap[i // 2] = heap[i // 2], heap[i]\n            i = i\
    \ // 2\n        end\n    end\n    local function pop()\n        local x = heap[1]\n\
    \        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        heapify(1)\n\
    \        return x\n    end\n    for i = 1, #arr do\n        if #heap < k then\n\
    \            insert(arr[i])\n        elseif arr[i] > heap[1] then\n          \
    \  pop()\n            insert(arr[i])\n        end\n    end\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = pop()\n    end\n    return res\nend", " \
    \   local len = #arr\n    if k == 0 then\n        return {}\n    elseif k == len\
    \ then\n        return arr\n    end\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len\
    \ do\n        if arr[i] > res[1] then\n            res[1] = arr[i]\n         \
    \   table.sort(res)\n        end\n    end\n    return res\nend", "    local len\
    \ = #arr\n    if k == len then\n        table.sort(arr)\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1]\
    \ then\n            res[1] = arr[i]\n            table.sort(res)\n        end\n\
    \    end\n    return res\nend", "    local heap = {}\n    for i = 1, k do\n  \
    \      heap[i] = arr[i]\n    end\n    for i = k, 1, -1 do\n        heapify(heap,\
    \ i, k)\n    end\n    for i = k + 1, #arr do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            heapify(heap, 1, k)\n        end\n\
    \    end\n    return heap\nend", "    local function partition(arr, l, r)\n  \
    \      local pivot = arr[l]\n        local i = l\n        local j = r\n      \
    \  while i < j do\n            while i < j and arr[j] <= pivot do\n          \
    \      j = j - 1\n            end\n            if i < j then\n               \
    \ arr[i] = arr[j]\n                i = i + 1\n            end\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           if i < j then\n                arr[j] = arr[i]\n                j\
    \ = j - 1\n            end\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, l, r)\n        if l < r then\n\
    \            local m = partition(arr, l, r)\n            quickSort(arr, l, m -\
    \ 1)\n            quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k >= n then return arr end\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l + 1\n        local j = r\n        while true do\n            while\
    \ i <= r and arr[i] >= pivot do i = i + 1 end\n            while j >= l + 1 and\
    \ arr[j] <= pivot do j = j - 1 end\n            if i >= j then break end\n   \
    \         arr[i], arr[j] = arr[j], arr[i]\n        end\n        arr[l], arr[j]\
    \ = arr[j], arr[l]\n        return j\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then return arr[l] end\n        local j = partition(arr,\
    \ l, r)\n        if j == k then return arr[j] end\n        if j > k then return\
    \ quickSelect(arr, l, j - 1, k) end\n        return quickSelect(arr, j + 1, r,\
    \ k)\n    end\n    local function quickSelect2(arr, l, r, k)\n        if l ==\
    \ r then return arr[l] end\n        local pivot = arr[l]\n        local i = l\
    \ + 1\n        local j = r\n        while true do\n            while i <= r and\
    \ arr[i] >= pivot do i = i + 1 end\n            while j >= l + 1 and arr[j] <=\
    \ pivot do j = j - 1 end\n            if i >= j then break end\n            arr[i],\
    \ arr[j] = arr[j], arr[i]\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n\
    \        if j == k then return arr[j] end\n        if j > k then return quickSelect2(arr,\
    \ l, j - 1, k) end\n        return quickSelect2(arr, j + 1, r, k)\n    end\n \
    \   local function quickSelect3(arr, l, r, k)\n        if l == r then return arr[l]\
    \ end\n        local pivot = arr[", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k >= n then return arr end\n\
    \    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n\
    \    for i = k, 1, -1 do\n        heapify(heap, i, k)\n    end\n    for i = k\
    \ + 1, n do\n        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n\
    \            heapify(heap, 1, k)\n        end\n    end\n    return heap\nend",
  "    local function partition(arr, l, r)\n        local pivot = arr[r]\n       \
    \ local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] > pivot\
    \ then\n                i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i + 1]\n\
    \        return i + 1\n    end\n    local function quickSort(arr, l, r)\n    \
    \    if l < r then\n            local p = partition(arr, l, r)\n            quickSort(arr,\
    \ l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quickSort(arr, left, right)\n    \
    \    if left < right then\n            local mid = partition(arr, left, right)\n\
    \            quickSort(arr, left, mid - 1)\n            quickSort(arr, mid + 1,\
    \ right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend",
  "    local len = #arr\n    local res = {}\n    for i = 1, k do\n        res[i] =\
    \ arr[i]\n    end\n    for i = k + 1, len do\n        local j = 1\n        while\
    \ j <= k and res[j] < arr[i] do\n            j = j + 1\n        end\n        if\
    \ j <= k then\n            for l = k, j + 1, -1 do\n                res[l] = res[l\
    \ - 1]\n            end\n            res[j] = arr[i]\n        end\n    end\n \
    \   return res\nend", "    local n = #arr\n    local function partition(l, r)\n\
    \        local pivot = arr[l]\n        local i, j = l, r\n        while i < j\
    \ do\n            while i < j and arr[j] <= pivot do\n                j = j -\
    \ 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local l, r = 1, n\n    while l <= r do\n        local m = partition(l,\
    \ r)\n        if m == k then\n            break\n        elseif m < k then\n \
    \           l = m + 1\n        else\n            r = m - 1\n        end\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend", "    local n = #arr\n    if n == 0 then return {} end\n\
    \    if k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    if\
    \ k == n then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 1, -1 do\n        local j = i * 2\n        while j <= k do\n          \
    \  if j < k and heap[j] < heap[j + 1] then\n                j = j + 1\n      \
    \      end\n            if heap[i] >= heap[j] then\n                break\n  \
    \          end\n            heap[i], heap[j] = heap[j], heap[i]\n            i\
    \ = j\n            j = i * 2\n        end\n    end\n    for i = k + 1, n do\n\
    \        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            local\
    \ j = 1\n            local k = j * 2\n            while k <= k do\n          \
    \      if k < k and heap[k] < heap[k + 1] then\n                    k = k + 1\n\
    \                end\n                if heap[j] >= heap[k] then\n           \
    \         break\n                end\n                heap[j], heap[k] = heap[k],\
    \ heap[j]\n                j = k\n                k = j * 2\n            end\n\
    \        end\n    end\n    table.sort(heap)\n    return heap\nend", "    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k == 1 then\n        local max = arr[1]\n        for i = 2, n do\n   \
    \         if arr[i] > max then\n                max = arr[i]\n            end\n\
    \        end\n        return {max}\n    end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ left, right, k)\n        if left == right then\n            return arr[left]\n\
    \        end\n        local pivot = partition(arr, left, right)\n        if pivot\
    \ == k then\n            return arr[pivot]\n        elseif pivot > k then\n  \
    \          return quickSelect(arr, left, pivot - 1, k)\n        else\n       \
    \     return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n   \
    \ local pivot = quickSelect(arr, 1, n, k)\n    local res = {}\n    for i = 1,\
    \ n do\n        if arr[i] >= pivot then\n            res[#res + 1] = arr[i]\n\
    \        end\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            if i < j then\n     \
    \           arr[i] = arr[j]\n                i = i + 1\n            end\n    \
    \        while i < j and arr[i] >= pivot do\n                i = i + 1\n     \
    \       end\n            if i < j then\n                arr[j] = arr[i]\n    \
    \            j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local m = partition(arr, l, r)\n            quickSort(arr,\
    \ l, m - 1)\n            quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local len = #arr\n    if k == len then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n \
    \       return arr\n    end\n    local res = {}\n    for i = 1, k do\n       \
    \ local max = -math.huge\n        local idx = 0\n        for j = 1, len do\n \
    \           if arr[j] > max then\n                max = arr[j]\n             \
    \   idx = j\n            end\n        end\n        res[i] = max\n        arr[idx]\
    \ = -math.huge\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then\n            return arr[l]\n        end\n        local pivot\
    \ = partition(arr, l, r)\n        if pivot == k then\n            return arr[pivot]\n\
    \        elseif pivot > k then\n            return quickSelect(arr, l, pivot -\
    \ 1, k)\n        else\n            return quickSelect(arr, pivot + 1, r, k)\n\
    \        end\n    end\n    local function quickSort(arr, l, r)\n        if l <\
    \ r then\n            local pivot = partition(arr, l, r)\n            quickSort(arr,\
    \ l, pivot - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n\
    \    local n = #arr\n    quickSelect(arr, 1, n, n - k + 1)\n    quickSort(arr,\
    \ n - k + 1, n)\n    return arr\nend", "    local heap = {}\n    local function\
    \ push(x)\n        local i = #heap + 1\n        heap[i] = x\n        while i >\
    \ 1 do\n            local j = math.floor(i / 2)\n            if heap[j] < heap[i]\
    \ then\n                heap[i], heap[j] = heap[j], heap[i]\n                i\
    \ = j\n            else\n                break\n            end\n        end\n\
    \    end\n    local function pop()\n        local i = 1\n        local x = heap[i]\n\
    \        heap[i] = heap[#heap]\n        heap[#heap] = nil\n        while i < #heap\
    \ do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j +\
    \ 1] > heap[j] then\n                j = j + 1\n            end\n            if\
    \ heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n\
    \                i = j\n            else\n                break\n            end\n\
    \        end\n        return x\n    end\n    for i = 1, #arr do\n        if #heap\
    \ < k then\n            push(arr[i])\n        elseif arr[i] > heap[1] then\n \
    \           pop()\n            push(arr[i])\n        end\n    end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = pop()\n    end\n    return res\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            if i < j then\n                arr[i] = arr[j]\n          \
    \      i = i + 1\n            end\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            if i < j then\n\
    \                arr[j] = arr[i]\n                j = j - 1\n            end\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, l, r)\n        if l < r then\n            local p = partition(arr,\
    \ l, r)\n            quickSort(arr, l, p - 1)\n            quickSort(arr, p +\
    \ 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend",
  "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k >= n then return arr end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quickselect(arr, left,\
    \ right, k)\n        if left == right then return arr[left] end\n        local\
    \ pivot = partition(arr, left, right)\n        if pivot == k then return arr[pivot]\
    \ end\n        if pivot > k then\n            return quickselect(arr, left, pivot\
    \ - 1, k)\n        else\n            return quickselect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    quickselect(arr, 1, n, n - k + 1)\n    local res\
    \ = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n\
    \    return res\nend", "    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSelect(arr, l, r, k)\n        if l == r then\n\
    \            return arr[l]\n        end\n        local i = partition(arr, l, r)\n\
    \        if i == k then\n            return arr[i]\n        elseif i > k then\n\
    \            return quickSelect(arr, l, i - 1, k)\n        else\n            return\
    \ quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local i = partition(arr, l, r)\n \
    \           quickSort(arr, l, i - 1)\n            quickSort(arr, i + 1, r)\n \
    \       end\n    end\n    local n = #arr\n    if n == k then\n        return arr\n\
    \    end\n    local pivot = quickSelect(arr, 1, n, n - k + 1)\n    local res =\
    \ {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    quickSort(res, 1, #res)\n    return\
    \ res\nend", "    local len = #arr\n    local res = {}\n    for i = 1, k do\n\
    \        local max = arr[i]\n        local idx = i\n        for j = i + 1, len\
    \ do\n            if arr[j] > max then\n                max = arr[j]\n       \
    \         idx = j\n            end\n        end\n        res[i] = max\n      \
    \  arr[idx] = arr[i]\n        arr[i] = max\n    end\n    return res\nend", " \
    \   local n = #arr\n    local function swap(i, j)\n        arr[i], arr[j] = arr[j],\
    \ arr[i]\n    end\n    local function partition(l, r)\n        local pivot = arr[r]\n\
    \        local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot\
    \ then\n                swap(i, j)\n                i = i + 1\n            end\n\
    \        end\n        swap(i, r)\n        return i\n    end\n    local function\
    \ quickSelect(l, r, k)\n        if l == r then\n            return\n        end\n\
    \        local p = partition(l, r)\n        if p == k then\n            return\n\
    \        elseif p < k then\n            quickSelect(p + 1, r, k)\n        else\n\
    \            quickSelect(l, p - 1, k)\n        end\n    end\n    quickSelect(1,\
    \ n, k)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n  \
    \  end\n    return res\nend", "    local n = #arr\n    if n == 0 then return {}\
    \ end\n    if k == 0 then return {} end\n    if k == 1 then\n        local max\
    \ = arr[1]\n        for i = 2, n do\n            if arr[i] > max then\n      \
    \          max = arr[i]\n            end\n        end\n        return {max}\n\
    \    end\n    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l + 1\n        local j = r\n        while true do\n       \
    \     while i <= r and arr[i] >= pivot do\n                i = i + 1\n       \
    \     end\n            while j >= l + 1 and arr[j] <= pivot do\n             \
    \   j = j - 1\n            end\n            if i >= j then\n                break\n\
    \            end\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n \
    \       arr[l], arr[j] = arr[j], arr[l]\n        return j\n    end\n    local\
    \ function quickSelect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local j = partition(arr, l, r)\n        if j ==\
    \ k then\n            return arr[j]\n        elseif j > k then\n            return\
    \ quickSelect(arr, l, j - 1, k)\n        else\n            return quickSelect(arr,\
    \ j + 1, r, k)\n        end\n    end\n    local function quickSelect2(arr, l,\
    \ r, k)\n        if l == r then\n            return arr[l]\n        end\n    \
    \    local j = partition(arr, l, r)\n        if j == k then\n            return\
    \ arr[j]\n        elseif j > k then\n            return quickSelect2(arr, l, j\
    \ - 1, k)\n        else\n            return quickSelect2(arr, j + 1, r, k - j)\n\
    \        end\n    end\n    local function quickSelect3(arr, l, r, k)\n       \
    \ if l == r then\n            return arr[l]\n        end\n        local j = partition(arr,\
    \ l, r)\n        if j == k then\n           ", "    local len = #arr\n    if k\
    \ == 0 then\n        return {}\n    elseif k == len then\n        return arr\n\
    \    end\n    local function partition(arr, left, right)\n        local pivot\
    \ = arr[left]\n        local i = left\n        local j = right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSelect(arr, left, right, k)\n        if left\
    \ == right then\n            return arr[left]\n        end\n        local pivot\
    \ = partition(arr, left, right)\n        if pivot == k then\n            return\
    \ arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ left, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot\
    \ + 1, right, k)\n        end\n    end\n    quickSelect(arr, 1, len, len - k +\
    \ 1)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[len - k +\
    \ i]\n    end\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == 1 then\n        local\
    \ max = arr[1]\n        for i = 2, n do\n            if arr[i] > max then\n  \
    \              max = arr[i]\n            end\n        end\n        return {max}\n\
    \    end\n    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then return end\n        local\
    \ i = partition(arr, l, r)\n        if i == k then return end\n        if i >\
    \ k then\n            quickSelect(arr, l, i - 1, k)\n        else\n          \
    \  quickSelect(arr, i + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1,\
    \ n, n - k + 1)\n    local res = {}\n    for i = n - k + 1, n do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend", "    local n = #arr\n    if n == 0 then return {} end\n    if k ==\
    \ 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n     \
    \   for i = 2, n do\n            if arr[i] > max then\n                max = arr[i]\n\
    \            end\n        end\n        return {max}\n    end\n    local function\
    \ swap(arr, i, j)\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n     \
    \           swap(arr, i, j)\n                i = i + 1\n            end\n    \
    \    end\n        swap(arr, i, r)\n        return i\n    end\n    local function\
    \ quickselect(arr, l, r, k)\n        if l == r then return arr[l] end\n      \
    \  local pivot = partition(arr, l, r)\n        if pivot == k then\n          \
    \  return arr[pivot]\n        elseif pivot > k then\n            return quickselect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickselect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n  \
    \      res[i] = quickselect(arr, 1, n, i)\n    end\n    return res\nend", "  \
    \  local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] <= pivot do\n                j = j - 1\n    \
    \        end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, left, right, k)\n        if left == right\
    \ then\n            return arr[left]\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return arr[pivot]\n  \
    \      elseif pivot > k then\n            return quickSelect(arr, left, pivot\
    \ - 1, k)\n        else\n            return quickSelect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    local function quickSort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    local function merge(arr1, arr2)\n  \
    \      local res = {}\n        local i, j = 1, 1\n        while i <= #arr1 and\
    \ j <= #arr2 do\n            if arr1[i] > arr2[j] then\n                table.insert(res,\
    \ arr1[i])\n                i = i + 1\n            else\n                table.insert(res,\
    \ arr2[j])\n                j = j + 1\n            end\n        end\n        while\
    \ i <= #arr1 do\n            table.insert(res, arr1[i])\n            i = i + 1\n\
    \        end\n        while j <= #arr2 do\n            table.insert(res, arr2[j])\n\
    \            j = j + 1\n        end\n        return res\n    end\n    local function\
    \ mergeSort(arr, left, right)\n        if left < right then\n            local\
    \ mid = math.floor((left + right", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == 1 then\n        local\
    \ max = arr[1]\n        for i = 2, n do\n            if arr[i] > max then\n  \
    \              max = arr[i]\n            end\n        end\n        return {max}\n\
    \    end\n    if k == n then\n        table.sort(arr)\n        return arr\n  \
    \  end\n    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then return arr[l] end\n      \
    \  local i = partition(arr, l, r)\n        if i == k then\n            return\
    \ arr[i]\n        elseif i > k then\n            return quickSelect(arr, l, i\
    \ - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n  \
    \      end\n    end\n    local pivot = quickSelect(arr, 1, n, k)\n    local res\
    \ = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    return res\nend", "    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            if i <\
    \ j then\n                arr[i] = arr[j]\n                i = i + 1\n       \
    \     end\n            while i < j and arr[i] >= pivot do\n                i =\
    \ i + 1\n            end\n            if i < j then\n                arr[j] =\
    \ arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quick_sort(arr, l, r)\n\
    \        if l < r then\n            local i = partition(arr, l, r)\n         \
    \   quick_sort(arr, l, i - 1)\n            quick_sort(arr, i + 1, r)\n       \
    \ end\n    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for i =\
    \ 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n\
    \    if k == 1 then\n        local max = arr[1]\n        for i = 2, n do\n   \
    \         if arr[i] > max then\n                max = arr[i]\n            end\n\
    \        end\n        return {max}\n    end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then return arr[l] end\n        local p = partition(arr, l, r)\n\
    \        if p == k then\n            return arr[p]\n        elseif p > k then\n\
    \            return quickSelect(arr, l, p - 1, k)\n        else\n            return\
    \ quickSelect(arr, p + 1, r, k)\n        end\n    end\n    local function binarySearch(arr,\
    \ l, r, target)\n        while l <= r do\n            local m = math.floor((l\
    \ + r) / 2)\n            if arr[m] == target then\n                return m\n\
    \            elseif arr[m] < target then\n                l = m + 1\n        \
    \    else\n                r = m - 1\n            end\n        end\n        return\
    \ l\n    end\n    local res = {}\n    local i = 1\n    while i <= k do\n     \
    \   local max = quickSelect(arr, 1, n, n - i + 1)\n        local j = binarySearch(res,\
    \ 1, i - 1, max)\n        table.insert(res, j, max)\n        i = i + 1\n    end\n\
    \    return res\nend", "    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickSort(arr, l, r)\n        if l < r then\n      \
    \      local m = partition(arr, l, r)\n            quickSort(arr, l, m - 1)\n\
    \            quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    local function partition(l,\
    \ r)\n        local pivot = arr[l]\n        local i, j = l, r\n        while i\
    \ < j do\n            while i < j and arr[j] < pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local l, r = 1, n\n    while l <= r do\n        local m = partition(l,\
    \ r)\n        if m == k then\n            break\n        elseif m < k then\n \
    \           l = m + 1\n        else\n            r = m - 1\n        end\n    end\n\
    \    return arr\nend", "    local n = #arr\n    if n == 0 then return {} end\n\
    \    if k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left + 1\n        local j = right\n        while true do\n\
    \            while i <= j and arr[i] >= pivot do\n                i = i + 1\n\
    \            end\n            while i <= j and arr[j] <= pivot do\n          \
    \      j = j - 1\n            end\n            if i >= j then\n              \
    \  break\n            end\n            arr[i], arr[j] = arr[j], arr[i]\n     \
    \   end\n        arr[left], arr[j] = arr[j], arr[left]\n        return j\n   \
    \ end\n    local function quickselect(arr, left, right, k)\n        local pivot\
    \ = partition(arr, left, right)\n        if pivot == k then\n            return\n\
    \        elseif pivot > k then\n            quickselect(arr, left, pivot - 1,\
    \ k)\n        else\n            quickselect(arr, pivot + 1, right, k)\n      \
    \  end\n    end\n    quickselect(arr, 1, #arr, #arr - k + 1)\n    return arr\n\
    end", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then\
    \ return {} end\n    if k == 1 then\n        local max = arr[1]\n        for i\
    \ = 2, n do\n            if arr[i] > max then\n                max = arr[i]\n\
    \            end\n        end\n        return {max}\n    end\n    local heap =\
    \ {}\n    local function push(x)\n        table.insert(heap, x)\n        local\
    \ i = #heap\n        while i > 1 do\n            local p = math.floor(i / 2)\n\
    \            if heap[p] < heap[i] then\n                heap[p], heap[i] = heap[i],\
    \ heap[p]\n                i = p\n            else\n                break\n  \
    \          end\n        end\n    end\n    local function pop()\n        local\
    \ x = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n   \
    \     local i = 1\n        while i * 2 <= #heap do\n            local l = i *\
    \ 2\n            local r = i * 2 + 1\n            local j = l\n            if\
    \ r <= #heap and heap[r] > heap[l] then\n                j = r\n            end\n\
    \            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j],\
    \ heap[i]\n                i = j\n            else\n                break\n  \
    \          end\n        end\n        return x\n    end\n    for i = 1, k do\n\
    \        push(arr[i])\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1]\
    \ then\n            pop()\n            push(arr[i])\n        end\n    end\n  \
    \  local res = {}\n    for i = 1, k do\n        table.insert(res, 1, pop())\n\
    \    end\n    return res\nend", "    local heap = {}\n    for i = 1, #arr do\n\
    \        if i <= k then\n            table.insert(heap, arr[i])\n        else\n\
    \            local min = heap[1]\n            if arr[i] > min then\n         \
    \       heap[1] = arr[i]\n                local j = 1\n                while j\
    \ * 2 <= k do\n                    local l = j * 2\n                    local\
    \ r = j * 2 + 1\n                    if r <= k then\n                        if\
    \ heap[l] < heap[r] then\n                            if heap[l] < heap[j] then\n\
    \                                heap[j], heap[l] = heap[l], heap[j]\n       \
    \                         j = l\n                            else\n          \
    \                      break\n                            end\n              \
    \          else\n                            if heap[r] < heap[j] then\n     \
    \                           heap[j], heap[r] = heap[r], heap[j]\n            \
    \                    j = r\n                            else\n               \
    \                 break\n                            end\n                   \
    \     end\n                    else\n                        if heap[l] < heap[j]\
    \ then\n                            heap[j], heap[l] = heap[l], heap[j]\n    \
    \                        j = l\n                        else\n               \
    \             break\n                        end\n                    end\n  \
    \              end\n            end\n        end\n    end\n    table.sort(heap)\n\
    \    return heap\nend", "    local n = #arr\n    if n == 0 then return {} end\n\
    \    if k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        local j = 1\n        while j <= k and res[j]\
    \ < arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          table.insert(res, j, arr[i])\n            table.remove(res, k + 1)\n\
    \        end\n    end\n    return res\nend", "    local function partition(arr,\
    \ lo, hi)\n        local pivot = arr[hi]\n        local i = lo\n        for j\
    \ = lo, hi - 1 do\n            if arr[j] > pivot then\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n                i = i + 1\n            end\n      \
    \  end\n        arr[i], arr[hi] = arr[hi], arr[i]\n        return i\n    end\n\
    \    local function quick_select(arr, lo, hi, k)\n        if lo < hi then\n  \
    \          local p = partition(arr, lo, hi)\n            if p == k then\n    \
    \            return\n            elseif p < k then\n                quick_select(arr,\
    \ p + 1, hi, k)\n            else\n                quick_select(arr, lo, p - 1,\
    \ k)\n            end\n        end\n    end\n    quick_select(arr, 1, #arr, #arr\
    \ - k + 1)\n    return arr\nend", "    local function partition(arr, l, r)\n \
    \       local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p > k then\n            return quickSelect(arr, l, p\
    \ - 1, k)\n        else\n            return quickSelect(arr, p + 1, r, k)\n  \
    \      end\n    end\n    local function quickSort(arr, l, r)\n        if l < r\
    \ then\n            local p = partition(arr, l, r)\n            quickSort(arr,\
    \ l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    local\
    \ n = #arr\n    if k == n then\n        quickSort(arr, 1, n)\n    else\n     \
    \   quickSelect(arr, 1, n, n - k + 1)\n        quickSort(arr, n - k + 1, n)\n\
    \    end\n    return arr\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quickSort(arr, left, right)\n    \
    \    if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local result\
    \ = {}\n    for i = 1, k do\n        result[i] = arr[i]\n    end\n    return result\n\
    end", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then\
    \ return {} end\n    if k >= n then return arr end\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for\
    \ i = k + 1, n do\n        local j = 1\n        while j <= k and res[j] < arr[i]\
    \ do\n            j = j + 1\n        end\n        if j <= k then\n           \
    \ table.insert(res, j, arr[i])\n            table.remove(res)\n        end\n \
    \   end\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == 1 then\n        local\
    \ max = arr[1]\n        for i = 2, n do\n            if arr[i] > max then\n  \
    \              max = arr[i]\n            end\n        end\n        return {max}\n\
    \    end\n    local function partition(arr, l, r)\n        local pivot = arr[l]\n\
    \        local i = l\n        local j = r\n        while i < j do\n          \
    \  while i < j and arr[j] <= pivot do\n                j = j - 1\n           \
    \ end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quick_select(arr, l, r, k)\n        if l == r then return end\n        local\
    \ p = partition(arr, l, r)\n        if p == k then return end\n        if p >\
    \ k then\n            quick_select(arr, l, p - 1, k)\n        else\n         \
    \   quick_select(arr, p + 1, r, k)\n        end\n    end\n    quick_select(arr,\
    \ 1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1, n do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n    if\
    \ k == len then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ function partition(left, right)\n        local pivot = arr[left]\n        local\
    \ i, j = left, right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(left,\
    \ right, k)\n        if left == right then\n            return\n        end\n\
    \        local pivot = partition(left, right)\n        if pivot == k then\n  \
    \          return\n        elseif pivot < k then\n            quickSelect(pivot\
    \ + 1, right, k)\n        else\n            quickSelect(left, pivot - 1, k)\n\
    \        end\n    end\n    quickSelect(1, len, k)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quick_sort(arr,\
    \ l, r)\n        if l < r then\n            local m = partition(arr, l, r)\n \
    \           quick_sort(arr, l, m - 1)\n            quick_sort(arr, m + 1, r)\n\
    \        end\n    end\n    quick_sort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local\
    \ n = #arr\n    local function partition(l, r)\n        local pivot = arr[r]\n\
    \        local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i\
    \ + 1\n            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n\
    \        return i\n    end\n    local function quick_select(l, r, k)\n       \
    \ if l == r then\n            return\n        end\n        local i = partition(l,\
    \ r)\n        if i == k then\n            return\n        elseif i > k then\n\
    \            quick_select(l, i - 1, k)\n        else\n            quick_select(i\
    \ + 1, r, k)\n        end\n    end\n    quick_select(1, n, k)\n    return arr\n\
    end", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then\
    \ return {} end\n    if k == 1 then\n        local max = arr[1]\n        for i\
    \ = 2, n do\n            if arr[i] > max then\n                max = arr[i]\n\
    \            end\n        end\n        return {max}\n    end\n    local heap =\
    \ {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, 1,\
    \ -1 do\n        heapify(heap, i, k)\n    end\n    for i = k + 1, n do\n     \
    \   if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            heapify(heap,\
    \ 1, k)\n        end\n    end\n    return heap\nend", "    local n = #arr\n  \
    \  if n == 0 then return {} end\n    if k == 0 then return {} end\n    if k ==\
    \ 1 then\n        local max = arr[1]\n        for i = 2, n do\n            if\
    \ arr[i] > max then\n                max = arr[i]\n            end\n        end\n\
    \        return {max}\n    end\n    local function partition(arr, l, r)\n    \
    \    local pivot = arr[l]\n        local i = l + 1\n        local j = r\n    \
    \    while true do\n            while i <= r and arr[i] >= pivot do\n        \
    \        i = i + 1\n            end\n            while j >= l + 1 and arr[j] <=\
    \ pivot do\n                j = j - 1\n            end\n            if i >= j\
    \ then\n                break\n            end\n            arr[i], arr[j] = arr[j],\
    \ arr[i]\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n        return\
    \ j\n    end\n    local function quickselect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickselect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickselect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    quickselect(arr, 1, n, n - k + 1)\n    local res = {}\n    for i\
    \ = 1, k do\n        res[i] = arr[n - k + i]\n    end\n    return res\nend", " \
    \   local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then return\
    \ {} end\n    if k == 1 then\n        local max = arr[1]\n        for i = 2, n\
    \ do\n            if arr[i] > max then\n                max = arr[i]\n       \
    \     end\n        end\n        return {max}\n    end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then return arr[l] end\n        local pivot = partition(arr, l,\
    \ r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    quickSelect(arr, 1, n, n - k + 1)\n    local res = {}\n    for i\
    \ = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return res\n\
    end", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then\
    \ return {} end\n    if k == 1 then\n        local max = arr[1]\n        for i\
    \ = 2, n do\n            if arr[i] > max then\n                max = arr[i]\n\
    \            end\n        end\n        return {max}\n    end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then return end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then return end\n        if p > k then\n          \
    \  quickSelect(arr, l, p - 1, k)\n        else\n            quickSelect(arr, p\
    \ + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n  \
    \  local res = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local len = #arr\n    if k == len then\n\
    \        table.sort(arr)\n        return arr\n    end\n    local res = {}\n  \
    \  for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n  \
    \  for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local len = #arr\n    if len == 0 then\n        return {}\n    end\n\
    \    if k == 0 then\n        return {}\n    end\n    if k == len then\n      \
    \  return arr\n    end\n    local function partition(arr, left, right)\n     \
    \   local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quickSort(arr, left, right)\n    \
    \    if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, len)\n    local res\
    \ = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res, arr[i])\n\
    \    end\n    return res\nend", "    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left >= right then\n            return\n        end\n        local\
    \ pivot = partition(arr, left, right)\n        if pivot == k then\n          \
    \  return\n        elseif pivot > k then\n            quickSelect(arr, left, pivot\
    \ - 1, k)\n        else\n            quickSelect(arr, pivot + 1, right, k)\n \
    \       end\n    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    return\
    \ arr\nend", "    local len = #arr\n    if len == k then\n        return arr\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n \
    \   end\n    table.sort(res)\n    for i = k + 1, len do\n        local j = 1\n\
    \        while j <= k do\n            if arr[i] > res[j] then\n              \
    \  table.remove(res, j)\n                table.insert(res, j, arr[i])\n      \
    \          break\n            end\n            j = j + 1\n        end\n    end\n\
    \    return res\nend", "    local function partition(arr, left, right)\n     \
    \   local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local function partition(arr, l, r)\n        local pivot = arr[r]\n\
    \        local i = l - 1\n        for j = l, r - 1 do\n            if arr[j] >=\
    \ pivot then\n                i = i + 1\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[i + 1], arr[r] = arr[r], arr[i\
    \ + 1]\n        return i + 1\n    end\n    local function quickSelect(arr, l,\
    \ r, k)\n        if l <= r then\n            local p = partition(arr, l, r)\n\
    \            if p == k then\n                return\n            elseif p < k\
    \ then\n                quickSelect(arr, p + 1, r, k)\n            else\n    \
    \            quickSelect(arr, l, p - 1, k)\n            end\n        end\n   \
    \ end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    return arr\nend", "  \
    \  local function partition(arr, left, right)\n        local pivot = arr[left]\n\
    \        local i = left\n        local j = right\n        while i < j do\n   \
    \         while i < j and arr[j] < pivot do\n                j = j - 1\n     \
    \       end\n            arr[i] = arr[j]\n            while i < j and arr[i] >=\
    \ pivot do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSort(arr, left, right)\n        if left < right then\n            local\
    \ pivot = partition(arr, left, right)\n            quickSort(arr, left, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n    end\n \
    \   quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n       \
    \ res[i] = arr[i]\n    end\n    return res\nend", "    local n = #arr\n    if\
    \ n == 0 then return {} end\n    if k == 0 then return {} end\n    if k >= n then\
    \ return arr end\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l >= r then return end\n\
    \        local p = partition(arr, l, r)\n        if p == k then return end\n \
    \       if p > k then\n            quickSelect(arr, l, p - 1, k)\n        else\n\
    \            quickSelect(arr, p + 1, r, k)\n        end\n    end\n    quickSelect(arr,\
    \ 1, n, n - k + 1)\n    return arr\nend", "    local function partition(arr, left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, left, right)\n \
    \       if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end", "    local len = #arr\n    local function partition(arr, l, r)\n       \
    \ local pivot = arr[l]\n        local i = l\n        local j = r\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l < r then\n   \
    \         local pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot\
    \ - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, len)\n    local res = {}\n    for i = len, len - k + 1, -1 do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] <= pivot do\n\
    \                j = j - 1\n            end\n            arr[i] = arr[j]\n   \
    \         while i < j and arr[i] >= pivot do\n                i = i + 1\n    \
    \        end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local m = partition(arr, l, r)\n            quickSort(arr,\
    \ l, m - 1)\n            quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[l]\n        local i = l\n        local j = r\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then\n            return arr[i]\n        elseif i >\
    \ k then\n            return quickSelect(arr, l, i - 1, k)\n        else\n   \
    \         return quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local\
    \ function quickSort(arr, l, r)\n        if l < r then\n            local i =\
    \ partition(arr, l, r)\n            quickSort(arr, l, i - 1)\n            quickSort(arr,\
    \ i + 1, r)\n        end\n    end\n    local n = #arr\n    local t = {}\n    for\
    \ i = 1, k do\n        t[i] = quickSelect(arr, 1, n, i)\n    end\n    quickSort(t,\
    \ 1, k)\n    return t\nend", "    local heap = {}\n    local function push(x)\n\
    \        table.insert(heap, x)\n        local i = #heap\n        while i > 1 do\n\
    \            local j = math.floor(i / 2)\n            if heap[j] < heap[i] then\n\
    \                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n\
    \            else\n                break\n            end\n        end\n    end\n\
    \    local function pop()\n        local ret = heap[1]\n        heap[1] = heap[#heap]\n\
    \        table.remove(heap)\n        local i = 1\n        while i * 2 <= #heap\
    \ do\n            local j = i * 2\n            if j + 1 <= #heap and heap[j +\
    \ 1] > heap[j] then\n                j = j + 1\n            end\n            if\
    \ heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j], heap[i]\n\
    \                i = j\n            else\n                break\n            end\n\
    \        end\n        return ret\n    end\n    for _, x in ipairs(arr) do\n  \
    \      if #heap < k then\n            push(x)\n        elseif x > heap[1] then\n\
    \            pop()\n            push(x)\n        end\n    end\n    local ret =\
    \ {}\n    while #heap > 0 do\n        table.insert(ret, 1, pop())\n    end\n \
    \   return ret\nend", "    local n = #arr\n    local function partition(left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            if i < j then\n\
    \                arr[i] = arr[j]\n                i = i + 1\n            end\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            if i < j then\n                arr[j] = arr[i]\n\
    \                j = j - 1\n            end\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quick_sort(left, right)\n     \
    \   if left < right then\n            local pivot = partition(left, right)\n \
    \           quick_sort(left, pivot - 1)\n            quick_sort(pivot + 1, right)\n\
    \        end\n    end\n    quick_sort(1, n)\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    return res\nend", "    local n =\
    \ #arr\n    if n == 0 then return {} end\n    if k == 0 then return {} end\n \
    \   if k == 1 then\n        local max = arr[1]\n        for i = 2, n do\n    \
    \        if arr[i] > max then\n                max = arr[i]\n            end\n\
    \        end\n        return {max}\n    end\n    local function swap(arr, i, j)\n\
    \        arr[i], arr[j] = arr[j], arr[i]\n    end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                swap(arr, i, j)\n\
    \                i = i + 1\n            end\n        end\n        swap(arr, i,\
    \ r)\n        return i\n    end\n    local function quickSelect(arr, l, r, k)\n\
    \        if l == r then return arr[l] end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = quickSelect(arr,\
    \ 1, n, i)\n    end\n    return res\nend", "    local function partition(arr,\
    \ l, r)\n        local pivot = arr[l]\n        local i = l\n        local j =\
    \ r\n        while i < j do\n            while i < j and arr[j] < pivot do\n \
    \               j = j - 1\n            end\n            if i < j then\n      \
    \          arr[i] = arr[j]\n                i = i + 1\n            end\n     \
    \       while i < j and arr[i] > pivot do\n                i = i + 1\n       \
    \     end\n            if i < j then\n                arr[j] = arr[i]\n      \
    \          j = j - 1\n            end\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local m = partition(arr, l, r)\n            quickSort(arr,\
    \ l, m - 1)\n            quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend", "    local n = #arr\n    if n == 0 then return\
    \ {} end\n    if k == 0 then return {} end\n    if k == 1 then\n        local\
    \ max = arr[1]\n        for i = 2, n do\n            if arr[i] > max then\n  \
    \              max = arr[i]\n            end\n        end\n        return {max}\n\
    \    end\n    local function maxHeapify(arr, i, n)\n        local l = 2 * i\n\
    \        local r = 2 * i + 1\n        local largest = i\n        if l <= n and\
    \ arr[l] > arr[largest] then\n            largest = l\n        end\n        if\
    \ r <= n and arr[r] > arr[largest] then\n            largest = r\n        end\n\
    \        if largest ~= i then\n            arr[i], arr[largest] = arr[largest],\
    \ arr[i]\n            maxHeapify(arr, largest, n)\n        end\n    end\n    local\
    \ function buildMaxHeap(arr, n)\n        for i = math.floor(n / 2), 1, -1 do\n\
    \            maxHeapify(arr, i, n)\n        end\n    end\n    local function heapSort(arr,\
    \ n)\n        buildMaxHeap(arr, n)\n        for i = n, 2, -1 do\n            arr[1],\
    \ arr[i] = arr[i], arr[1]\n            maxHeapify(arr, 1, i - 1)\n        end\n\
    \    end\n    heapSort(arr, n)\n    local res = {}\n    for i = 1, k do\n    \
    \    res[i] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n \
    \   if k == len then\n        table.sort(arr)\n        return arr\n    end\n \
    \   local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n  \
    \  table.sort(res)\n    for i = k + 1, len do\n        if arr[i] > res[1] then\n\
    \            res[1] = arr[i]\n            table.sort(res)\n        end\n    end\n\
    \    return res\nend", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend", "    local len = #arr\n    if k ==\
    \ len then\n        table.sort(arr)\n        return arr\n    end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end", "    local len = #arr\n    if k == len then\n        table.sort(arr)\n \
    \       return arr\n    end\n    local function partition(arr, l, r)\n       \
    \ local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n   \
    \         if arr[j] > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \                i = i + 1\n            end\n        end\n        arr[i], arr[r]\
    \ = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local pivot = partition(arr, l, r)\n        if pivot == k then\n     \
    \       return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, len, k)\n    table.sort(arr,\
    \ 1, k)\n    return arr\nend", "    local function partition(arr, l, r)\n    \
    \    local pivot = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n\
    \            if arr[j] >= pivot then\n                i = i + 1\n            \
    \    arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i\
    \ + 1], arr[r] = arr[r], arr[i + 1]\n        return i + 1\n    end\n    local\
    \ function quickSelect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local p = partition(arr, l, r)\n        if p ==\
    \ k then\n            return arr[p]\n        elseif p > k then\n            return\
    \ quickSelect(arr, l, p - 1, k)\n        else\n            return quickSelect(arr,\
    \ p + 1, r, k)\n        end\n    end\n    local n = #arr\n    if k > n then\n\
    \        k = n\n    end\n    local res = {}\n    for i = 1, k do\n        res[i]\
    \ = quickSelect(arr, 1, n, i)\n    end\n    return res\nend", "    local n = #arr\n\
    \    if n == k then\n        return arr\n    end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] < pivot then\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n                i = i + 1\n            end\n        end\n\
    \        arr[i], arr[r] = arr[r], arr[i]\n        return i\n    end\n    local\
    \ function quickSelect(arr, l, r, k)\n        if l == r then\n            return\
    \ arr[l]\n        end\n        local i = partition(arr, l, r)\n        if i ==\
    \ k then\n            return arr[i]\n        elseif i > k then\n            return\
    \ quickSelect(arr, l, i - 1, k)\n        else\n            return quickSelect(arr,\
    \ i + 1, r, k)\n        end\n    end\n    local function sort(arr, l, r)\n   \
    \     if l >= r then\n            return\n        end\n        local i = partition(arr,\
    \ l, r)\n        sort(arr, l, i - 1)\n        sort(arr, i + 1, r)\n    end\n \
    \   quickSelect(arr, 1, n, n - k + 1)\n    sort(arr, 1, n - k)\n    return arr\n\
    end", "    local n = #arr\n    local function partition(l, r)\n        local pivot\
    \ = arr[l]\n        local i, j = l, r\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickselect(l, r, k)\n        local i = partition(l, r)\n        if i == k then\n\
    \            return\n        elseif i < k then\n            quickselect(i + 1,\
    \ r, k)\n        else\n            quickselect(l, i - 1, k)\n        end\n   \
    \ end\n    quickselect(1, n, n - k + 1)\n    local res = {}\n    for i = n - k\
    \ + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend", " \
    \   local function partition(arr, l, r)\n        local p = arr[l]\n        local\
    \ i = l\n        for j = l + 1, r do\n            if arr[j] > p then\n       \
    \         i = i + 1\n                arr[i], arr[j] = arr[j], arr[i]\n       \
    \     end\n        end\n        arr[l], arr[i] = arr[i], arr[l]\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return arr[p]\n        elseif p >\
    \ k then\n            return quickSelect(arr, l, p - 1, k)\n        else\n   \
    \         return quickSelect(arr, p + 1, r, k)\n        end\n    end\n    local\
    \ function findK(arr, k)\n        local n = #arr\n        if n == k then\n   \
    \         return arr\n        end\n        local res = {}\n        for i = 1,\
    \ k do\n            res[i] = quickSelect(arr, 1, n, i)\n        end\n        return\
    \ res\n    end\n    return findK(arr, k)\nend", "    local n = #arr\n    if n\
    \ == 0 then return {} end\n    if k == 0 then return {} end\n    if k == 1 then\n\
    \        local max = arr[1]\n        for i = 2, n do\n            if arr[i] >\
    \ max then\n                max = arr[i]\n            end\n        end\n     \
    \   return {max}\n    end\n    local heap = {}\n    for i = 1, k do\n        heap[i]\
    \ = arr[i]\n    end\n    for i = k, 1, -1 do\n        local j = i\n        while\
    \ j <= k do\n            local l = j * 2\n            local r = l + 1\n      \
    \      if l <= k and heap[l] < heap[j] then\n                heap[l], heap[j]\
    \ = heap[j], heap[l]\n                j = l\n            elseif r <= k and heap[r]\
    \ < heap[j] then\n                heap[r], heap[j] = heap[j], heap[r]\n      \
    \          j = r\n            else\n                break\n            end\n \
    \       end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            local j = 1\n            while j <=\
    \ k do\n                local l = j * 2\n                local r = l + 1\n   \
    \             if l <= k and heap[l] < heap[j] then\n                    heap[l],\
    \ heap[j] = heap[j], heap[l]\n                    j = l\n                elseif\
    \ r <= k and heap[r] < heap[j] then\n                    heap[r], heap[j] = heap[j],\
    \ heap[r]\n                    j = r\n                else\n                 \
    \   break\n                end\n            end\n        end\n    end\n    return\
    \ heap\nend", "    local n = #arr\n    if n == k then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local heap = {}\n    for i = 1, k do\n     \
    \   heap[i] = arr[i]\n    end\n    table.sort(heap)\n    for i = k + 1, n do\n\
    \        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            table.sort(heap)\n\
    \        end\n    end\n    return heap\nend", "    local n = #arr\n    if n ==\
    \ 0 then return {} end\n    if k == 0 then return {} end\n    if k == 1 then\n\
    \        local max = arr[1]\n        for i = 2, n do\n            if arr[i] >\
    \ max then\n                max = arr[i]\n            end\n        end\n     \
    \   return {max}\n    end\n    local max = {}\n    for i = 1, k do\n        max[i]\
    \ = arr[i]\n    end\n    for i = k + 1, n do\n        local j = 1\n        while\
    \ j <= k and arr[i] > max[j] do\n            j = j + 1\n        end\n        if\
    \ j <= k then\n            for l = k, j + 1, -1 do\n                max[l] = max[l\
    \ - 1]\n            end\n            max[j] = arr[i]\n        end\n    end\n \
    \   return max\nend", "    local n = #arr\n    if n == 0 then return {} end\n\
    \    if k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then return arr[l] end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    local pivot = quickSelect(arr, 1, n, n - k + 1)\n    local res =\
    \ {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    return res\nend", "    local n = #arr\n\
    \    if n == 0 then return {} end\n    if k == 0 then return {} end\n    if k\
    \ == 1 then\n        local max = arr[1]\n        for i = 2, n do\n           \
    \ if arr[i] > max then\n                max = arr[i]\n            end\n      \
    \  end\n        return {max}\n    end\n    local function partition(arr, left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    local pivot = quickSelect(arr,\
    \ 1, n, k)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >= pivot\
    \ then\n            res[#res + 1] = arr[i]\n        end\n    end\n    return res\n\
    end", "    local n = #arr\n    local function partition(l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickselect(l, r, k)\n\
    \        if l == r then\n            return\n        end\n        local p = partition(l,\
    \ r)\n        if p == k then\n            return\n        elseif p < k then\n\
    \            quickselect(p + 1, r, k)\n        else\n            quickselect(l,\
    \ p - 1, k)\n        end\n    end\n    quickselect(1, n, k)\n    return arr\n\
    end", "    local n = #arr\n    if n == 0 then return {} end\n    if k == 0 then\
    \ return {} end\n    if k == 1 then\n        local max = arr[1]\n        for i\
    \ = 2, n do\n            if arr[i] > max then\n                max = arr[i]\n\
    \            end\n        end\n        return {max}\n    end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        local p = partition(arr, l, r)\n        if p == k then\n \
    \           return\n        elseif p > k then\n            quickselect(arr, l,\
    \ p - 1, k)\n        else\n            quickselect(arr, p + 1, r, k)\n       \
    \ end\n    end\n    quickselect(arr, 1, n, n - k + 1)\n    local res = {}\n  \
    \  for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return\
    \ res\nend", "    local n = #arr\n    if n == 0 then return {} end\n    if k ==\
    \ 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_select(arr,\
    \ l, r, k)\n        if l == r then return arr[l] end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then return arr[p] end\n        if p > k then\n   \
    \         return quick_select(arr, l, p - 1, k)\n        else\n            return\
    \ quick_select(arr, p + 1, r, k)\n        end\n    end\n    quick_select(arr,\
    \ 1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1, n do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend", "    local len = #arr\n    if\
    \ k > len then\n        return arr\n    end\n    local heap = {}\n    for i =\
    \ 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k, len do\n        local\
    \ min = heap[1]\n        if arr[i] > min then\n            heap[1] = arr[i]\n\
    \            local j = 1\n            while true do\n                local l =\
    \ j * 2\n                local r = l + 1\n                if l > k then\n    \
    \                break\n                end\n                local min = heap[l]\n\
    \                local min_i = l\n                if r <= k and heap[r] < min\
    \ then\n                    min = heap[r]\n                    min_i = r\n   \
    \             end\n                if heap[j] > min then\n                   \
    \ heap[j], heap[min_i] = heap[min_i], heap[j]\n                    j = min_i\n\
    \                else\n                    break\n                end\n      \
    \      end\n        end\n    end\n    return heap\nend", "    local n = #arr\n\
    \    if n == 0 then return {} end\n    if k == 0 then return {} end\n    if k\
    \ >= n then return arr end\n    local function partition(arr, l, r)\n        local\
    \ pivot = arr[l]\n        local i = l\n        local j = r\n        while i <\
    \ j do\n            while i < j and arr[j] <= pivot do\n                j = j\
    \ - 1\n            end\n            arr[i] = arr[j]\n            while i < j and\
    \ arr[i] >= pivot do\n                i = i + 1\n            end\n           \
    \ arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n   \
    \ end\n    local function quickselect(arr, l, r, k)\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return\n        elseif p > k then\n\
    \            quickselect(arr, l, p - 1, k)\n        else\n            quickselect(arr,\
    \ p + 1, r, k)\n        end\n    end\n    quickselect(arr, 1, n, n - k + 1)\n\
    \    local res = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend", "    local function partition(arr, l, r)\n   \
    \     local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p > k then\n            return quickselect(arr, l, p\
    \ - 1, k)\n        else\n            return quickselect(arr, p + 1, r, k)\n  \
    \      end\n    end\n    local function sort(arr, k)\n        local n = #arr\n\
    \        for i = 1, k do\n            quickselect(arr, i, n, i)\n        end\n\
    \    end\n    sort(arr, k)\n    return arr\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
