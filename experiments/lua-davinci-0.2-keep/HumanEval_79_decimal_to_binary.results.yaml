name: HumanEval_79_decimal_to_binary
language: lua
results:
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    while decimal > 0 do\n        local remainder = decimal\
    \ % 2\n        binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxoqn5pmj.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpxoqn5pmj.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7zzctjbd.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp7zzctjbd.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    while decimal > 0 do\n        local remainder = decimal\
    \ % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn1yoea01.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpn1yoea01.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder\
    \ .. binary\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_cnajb7j.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp_cnajb7j.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpia6g3to5.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpia6g3to5.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcgs57f_k.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpcgs57f_k.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprk1rw299.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprk1rw299.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = tostring(remainder) .. binary\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd85urgvn.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpd85urgvn.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    while decimal > 0 do\n        local remainder = decimal\
    \ % 2\n        binary = tostring(remainder) .. binary\n        decimal = (decimal\
    \ - remainder) / 2\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7go2k3me.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp7go2k3me.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbgg0wafz.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpbgg0wafz.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  local remainder = 0\n  local quotient = decimal\n\
    \  while quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = binary .. remainder\n  end\n  return binary .. \"db\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1g994wj_.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp1g994wj_.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0y3q6od0.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp0y3q6od0.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = remainder .. binary\n    end\n\
    \    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnycu6t4q.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnycu6t4q.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoou3yumq.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpoou3yumq.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = tostring(remainder) .. binary\n\
    \    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4o6jbjz1.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp4o6jbjz1.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder\
    \ .. binary\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpahbjg1a5.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpahbjg1a5.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplg_ju8v6.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmplg_ju8v6.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd4prc3gs.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpd4prc3gs.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppvenk6gi.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmppvenk6gi.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx2rm1hk4.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpx2rm1hk4.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw1al2q2w.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpw1al2q2w.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfpy11vyz.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpfpy11vyz.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdng8_e9p.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpdng8_e9p.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnn2uivh1.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnn2uivh1.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp821fqnz.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpp821fqnz.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi79akznz.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpi79akznz.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = remainder .. binary\n    end\n\
    \    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyog02iy_.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyog02iy_.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = (decimal\
    \ - remainder) / 2\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9tfg0obs.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp9tfg0obs.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. tostring(remainder)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw2s3p_uj.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpw2s3p_uj.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpge6e0x0s.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpge6e0x0s.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder\
    \ .. binary\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpti45rdm6.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpti45rdm6.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. tostring(remainder)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppt4cvo4g.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmppt4cvo4g.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpryxwfft2.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpryxwfft2.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbfv9aiem.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpbfv9aiem.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprqitt4u0.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprqitt4u0.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = tostring(remainder) .. binary\n\
    \    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2afeaf6i.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp2afeaf6i.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjr_3awz5.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpjr_3awz5.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    binary = binary .. tostring(decimal\
    \ % 2)\n    decimal = math.floor(decimal / 2)\n  end\n  return binary .. \"db\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzqcqptpi.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpzqcqptpi.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjrugx_of.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpjrugx_of.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpct0yh3se.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpct0yh3se.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder .. binary\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfzsk3nvs.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpfzsk3nvs.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv0zc4y7z.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpv0zc4y7z.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = ''\n  while decimal > 0 do\n    binary = tostring(decimal %\
    \ 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' ..\
    \ binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqilleafa.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpqilleafa.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdge39cal.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpdge39cal.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj4o_zurl.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpj4o_zurl.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxlmh0hhb.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpxlmh0hhb.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph7b8kmhl.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmph7b8kmhl.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz4ngg2hm.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpz4ngg2hm.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpak414b8j.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpak414b8j.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ufv0fzj.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp1ufv0fzj.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  local quotient = decimal\n  repeat\n\
    \    remainder = quotient % 2\n    quotient = math.floor(quotient / 2)\n    binary\
    \ = remainder .. binary\n  until quotient == 0\n  return \"db\" .. binary .. \"\
    db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4psv5jxo.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp4psv5jxo.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = binary ..\
    \ remainder\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsdvc9x39.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpsdvc9x39.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = tostring(remainder) .. binary\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw90ymn_f.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpw90ymn_f.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1vstgw6b.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp1vstgw6b.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        decimal = math.floor(decimal / 2)\n        binary = remainder\
    \ .. binary\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr_a69mjl.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpr_a69mjl.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyrjsiq38.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyrjsiq38.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7knj7_5k.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp7knj7_5k.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbff6xttd.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpbff6xttd.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkq_loj6w.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpkq_loj6w.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = ''\n  while decimal > 0 do\n    local remainder = decimal %\
    \ 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzhi2fqi7.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpzhi2fqi7.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = 0\n  local i\
    \ = 0\n  while decimal > 0 do\n    remainder = decimal % 2\n    quotient = decimal\
    \ / 2\n    decimal = math.floor(quotient)\n    binary = binary .. remainder\n\
    \    i = i + 1\n  end\n  binary = \"db\" .. binary .. \"db\"\n  return binary\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3j1m44lw.lua:28:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp3j1m44lw.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl7hb1gg_.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpl7hb1gg_.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb3wbq1gl.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpb3wbq1gl.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwf08ztav.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpwf08ztav.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprc1_9wd1.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprc1_9wd1.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyam81t3s.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyam81t3s.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6pbw78qg.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp6pbw78qg.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = 0\n  local i\
    \ = 0\n  while decimal > 0 do\n    remainder = decimal % 2\n    quotient = math.floor(decimal\
    \ / 2)\n    decimal = quotient\n    binary = binary .. remainder\n  end\n  binary\
    \ = \"db\" .. binary .. \"db\"\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp36nfaor_.lua:27:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp36nfaor_.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = ''\n  while decimal > 0 do\n    local remainder = decimal %\
    \ 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3u13o_wx.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp3u13o_wx.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = (decimal\
    \ - remainder) / 2\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq0bwpejd.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpq0bwpejd.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  local\
    \ i = 0\n  while quotient ~= 0 do\n    remainder = quotient % 2\n    quotient\
    \ = math.floor(quotient / 2)\n    binary = tostring(remainder) .. binary\n  end\n\
    \  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbavskgts.lua:25:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpbavskgts.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgfq4rfnw.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpgfq4rfnw.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwu8x4fjz.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpwu8x4fjz.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp02aqcosz.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp02aqcosz.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local bit = decimal % 2\n\
    \    binary = bit .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzjadm104.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpzjadm104.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnzc1p081.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnzc1p081.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplziab87w.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmplziab87w.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9b4eah5s.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp9b4eah5s.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeiebmxi9.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpeiebmxi9.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjth2s1vc.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpjth2s1vc.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = ''\n  while decimal > 0 do\n    local remainder = decimal %\
    \ 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppuv51aji.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmppuv51aji.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder .. binary\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpapbaklx4.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpapbaklx4.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    binary = binary .. tostring(decimal\
    \ % 2)\n    decimal = math.floor(decimal / 2)\n  end\n  return binary .. \"db\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyaqejc_b.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyaqejc_b.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder\n    while decimal > 0 do\n    \
    \    remainder = decimal % 2\n        binary = binary .. remainder\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1um5a4i1.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp1um5a4i1.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmgmq9506.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpmgmq9506.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        decimal = math.floor(decimal / 2)\n        binary = remainder\
    \ .. binary\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9zjq8kkp.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp9zjq8kkp.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = tostring(remainder) .. binary\n\
    \    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6jo1iaeh.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp6jo1iaeh.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvk9mbrqx.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpvk9mbrqx.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9osajrju.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp9osajrju.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9vxnx89l.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp9vxnx89l.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpatjne2p4.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpatjne2p4.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9ekexekr.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp9ekexekr.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfxowkhmq.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpfxowkhmq.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. tostring(remainder)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  binary = binary .. \"db\"\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpznu5817z.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpznu5817z.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    local i = 0\n    while quotient > 0 do\n        remainder = quotient % 2\n\
    \        quotient = math.floor(quotient / 2)\n        binary = binary .. tostring(remainder)\n\
    \        i = i + 1\n    end\n    binary = binary .. \"db\"\n    return string.reverse(binary)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8mh788ig.lua:27:\
    \ expected: \"db0db\"\\nactual: \"bdbd\"\\nstack traceback:\\n\\t/tmp/tmp8mh788ig.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprylj8yf5.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprylj8yf5.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa6mspsjo.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpa6mspsjo.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpknh6loy3.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpknh6loy3.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    repeat\n        local remainder = decimal % 2\n\
    \        binary = remainder .. binary\n        decimal = (decimal - remainder)\
    \ / 2\n    until decimal == 0\n    return \"db\" .. binary .. \"db\"\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5vquo33i.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp5vquo33i.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp67vuf7l8.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp67vuf7l8.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm4l8y0ty.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpm4l8y0ty.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx6rahreo.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpx6rahreo.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvl6jk2nb.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpvl6jk2nb.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local bin = \"\"\n    while decimal > 0 do\n        bin = tostring(decimal\
    \ % 2) .. bin\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. bin .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpte8gmeik.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpte8gmeik.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk1_6m06o.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpk1_6m06o.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = ''\n  while decimal > 0 do\n    local remainder = decimal %\
    \ 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuzlessbd.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpuzlessbd.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6p9o0twf.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp6p9o0twf.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwbfw3jbi.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpwbfw3jbi.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppdwzijew.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmppdwzijew.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = (decimal - remainder) / 2\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpghv0afyb.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpghv0afyb.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg3ln_3vi.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpg3ln_3vi.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. tostring(remainder)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph00ebq29.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmph00ebq29.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder\
    \ .. binary\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyh7nz7vi.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyh7nz7vi.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxudxzuc2.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpxudxzuc2.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps6g8_t9h.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmps6g8_t9h.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. tostring(remainder)\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxfyjzsj_.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpxfyjzsj_.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqokvl0vk.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpqokvl0vk.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder\
    \ .. binary\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphcbvnlpo.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmphcbvnlpo.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3nqw3jfc.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp3nqw3jfc.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa6r4vmjv.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpa6r4vmjv.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpahockzp0.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpahockzp0.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmmrcvdo1.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpmmrcvdo1.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder\n    while decimal > 0 do\n    \
    \    remainder = decimal % 2\n        decimal = math.floor(decimal / 2)\n    \
    \    binary = remainder .. binary\n    end\n    return \"db\" .. binary .. \"\
    db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyy6gny99.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyy6gny99.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp69jxqzur.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp69jxqzur.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    if decimal % 2 == 0 then\n\
    \      binary = binary .. \"0\"\n    else\n      binary = binary .. \"1\"\n  \
    \  end\n    decimal = math.floor(decimal / 2)\n  end\n  return binary .. \"db\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpho31qh8k.lua:25:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpho31qh8k.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9upakgd7.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp9upakgd7.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprnjds_jj.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprnjds_jj.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnw9njte7.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnw9njte7.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    decimal = math.floor(decimal / 2)\n    binary = binary .. remainder\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbfsc3v7k.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpbfsc3v7k.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwyb96zt9.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpwyb96zt9.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy75v5486.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpy75v5486.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf9p9udmo.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpf9p9udmo.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4oqky89x.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp4oqky89x.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = remainder .. binary\n    end\n\
    \    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnn520m7u.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnn520m7u.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = tostring(remainder) .. binary\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgr2js3s_.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpgr2js3s_.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppl42ou52.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmppl42ou52.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  local remainder = decimal\n  while remainder > 0 do\n\
    \    local digit = remainder % 2\n    remainder = math.floor(remainder / 2)\n\
    \    binary = digit .. binary\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps9tmo_3d.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmps9tmo_3d.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3_9ytg9k.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp3_9ytg9k.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjummgm2o.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpjummgm2o.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1i_oru13.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp1i_oru13.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj76kfkvr.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpj76kfkvr.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local binary_table = {}\n    local i = 0\n    while\
    \ decimal > 0 do\n        binary_table[i] = decimal % 2\n        decimal = math.floor(decimal\
    \ / 2)\n        i = i + 1\n    end\n    for i = #binary_table, 0, -1 do\n    \
    \    binary = binary .. binary_table[i]\n    end\n    return \"db\" .. binary\
    \ .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpww77xcli.lua:19:\
    \ attempt to concatenate field '?' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpww77xcli.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkyn3qzyj.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpkyn3qzyj.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = remainder .. binary\n    end\n\
    \    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_8hl0_05.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp_8hl0_05.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = (decimal\
    \ - remainder) / 2\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkstr0mrx.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpkstr0mrx.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp052rxgq_.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp052rxgq_.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplpih3yv0.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmplpih3yv0.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    while decimal > 0 do\n\
    \        remainder = decimal % 2\n        decimal = math.floor(decimal / 2)\n\
    \        binary = remainder .. binary\n    end\n    return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7z184yct.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp7z184yct.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe_w93mt9.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpe_w93mt9.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal ~= 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphch79sat.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmphch79sat.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_ok3rhzk.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp_ok3rhzk.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  local\
    \ i = 0\n  while quotient > 0 do\n    remainder = quotient % 2\n    quotient =\
    \ math.floor(quotient / 2)\n    binary = remainder .. binary\n  end\n  return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppe_e37ek.lua:25:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmppe_e37ek.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphmnnikui.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmphmnnikui.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = 0\n  \
    \  local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m\
    \ = 0\n    local n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n  \
    \  local r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local v\
    \ = 0\n    local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n  \
    \  local aa = 0\n    local ab = 0\n    local ac = 0\n    local ad = 0\n    local\
    \ ae = 0\n    local af = 0\n    local ag = 0\n    local ah = 0\n    local ai =\
    \ 0\n    local aj = 0\n    local ak = 0\n    local al = 0\n    local am = 0\n\
    \    local an = 0\n    local ao = 0\n    local ap = 0\n    local aq = 0\n    local\
    \ ar = 0\n    local as = 0\n    local at = 0\n    local au = 0\n    local av =\
    \ 0\n    local aw = 0\n    local ax = 0\n    local ay = 0\n    local az = 0\n\
    \    local ba = 0\n    local bb = 0\n    local bc = 0\n    local bd = 0\n    local\
    \ be = 0\n    local bf = 0\n    local bg = 0\n    local bh = 0\n    local bi =\
    \ 0\n    local bj = 0\n    local bk = 0\n    local bl = 0\n    local bm = 0\n\
    \    local bn = 0\n    local bo = 0\n    local bp = 0\n    local bq = 0\n    local\
    \ br = 0\n    local bs = 0\n    local bt = 0\n    local bu = 0\n    local bv =\
    \ 0\n    local bw = 0\n    local bx = 0\n    local by = 0\n    local bz = 0\n\
    \    local ca = 0\n    local cb = 0\n    local cc = 0\n    local cd = 0\n    local\
    \ ce = 0\n    local cf = 0\n    local cg = 0\n    local ch = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp2a8sypu6.lua:101: 'end' expected (to close 'function' at\
    \ line 9) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = binary ..\
    \ tostring(remainder)\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfgc2mraz.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpfgc2mraz.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpumiph172.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpumiph172.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7a6mis9o.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp7a6mis9o.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzm76k3ak.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpzm76k3ak.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphwhbjr7s.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmphwhbjr7s.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. tostring(remainder)\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6aacdl1p.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp6aacdl1p.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu2g3bcmt.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpu2g3bcmt.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9lt1d_q2.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp9lt1d_q2.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppfs1u2ez.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmppfs1u2ez.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpibq970w2.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpibq970w2.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpodgwkcyv.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpodgwkcyv.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local rest = decimal\
    \ % 2\n        binary = tostring(rest) .. binary\n        decimal = (decimal -\
    \ rest) / 2\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprpaj0myq.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprpaj0myq.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = (decimal - remainder)\
    \ / 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2q0ehgpu.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp2q0ehgpu.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxoo03vbs.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpxoo03vbs.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvvp4xdw2.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpvvp4xdw2.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqjzr9vm2.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpqjzr9vm2.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = tostring(remainder) .. binary\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyhyz021q.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyhyz021q.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = 0\n  while decimal\
    \ > 0 do\n    remainder = decimal % 2\n    quotient = decimal / 2\n    decimal\
    \ = math.floor(quotient)\n    binary = binary .. tostring(remainder)\n  end\n\
    \  return \"db\" .. string.reverse(binary) .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz4ewnppt.lua:25:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpz4ewnppt.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprel765hf.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprel765hf.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8tlemyq7.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp8tlemyq7.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    while decimal > 0 do\n        local remainder = decimal\
    \ % 2\n        binary = tostring(remainder) .. binary\n        decimal = (decimal\
    \ - remainder) / 2\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyu7qqpcd.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyu7qqpcd.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpppk2u9m8.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpppk2u9m8.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp80bmnnth.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp80bmnnth.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppon24_g9.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmppon24_g9.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp45wk1nx9.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp45wk1nx9.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe_0scc94.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpe_0scc94.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppbfj70q6.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmppbfj70q6.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbhlggf68.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpbhlggf68.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbnr8_bly.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpbnr8_bly.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz5_up6ne.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpz5_up6ne.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ljwn5bj.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp1ljwn5bj.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnwdpr93q.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnwdpr93q.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps_n220zc.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmps_n220zc.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmsw0ku_m.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpmsw0ku_m.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc5jlcfyc.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpc5jlcfyc.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprhorx0db.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprhorx0db.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyaciabzb.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyaciabzb.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp55kt2sph.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp55kt2sph.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. tostring(remainder)\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp78eyfap5.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp78eyfap5.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local rest = decimal\
    \ % 2\n        binary = tostring(rest) .. binary\n        decimal = (decimal -\
    \ rest) / 2\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2le0jq45.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp2le0jq45.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfjg4gmoc.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpfjg4gmoc.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7_qgd58z.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp7_qgd58z.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_510gxi9.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp_510gxi9.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    while decimal > 0 do\n\
    \        remainder = decimal % 2\n        decimal = math.floor(decimal / 2)\n\
    \        binary = remainder .. binary\n    end\n    return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpejyk7mg4.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpejyk7mg4.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
