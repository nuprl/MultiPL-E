name: HumanEval_79_decimal_to_binary
language: lua
results:
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    while decimal > 0 do\n        local remainder = decimal\
    \ % 2\n        binary = tostring(remainder) .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpygb153kc.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpygb153kc.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzrl2h8c3.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpzrl2h8c3.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    while decimal > 0 do\n        local remainder = decimal\
    \ % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgpp4u0wx.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpgpp4u0wx.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder\
    \ .. binary\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgxu8n33a.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpgxu8n33a.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv4_7bkux.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpv4_7bkux.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk2ud46hz.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpk2ud46hz.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp81fn0jw7.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp81fn0jw7.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = tostring(remainder) .. binary\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxc1x9sjq.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpxc1x9sjq.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    while decimal > 0 do\n        local remainder = decimal\
    \ % 2\n        binary = tostring(remainder) .. binary\n        decimal = (decimal\
    \ - remainder) / 2\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj5hnetag.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpj5hnetag.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjrrb2isi.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpjrrb2isi.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  local remainder = 0\n  local quotient = decimal\n\
    \  while quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = binary .. remainder\n  end\n  return binary .. \"db\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpseisox1s.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpseisox1s.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvt3q_oyh.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpvt3q_oyh.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = remainder .. binary\n    end\n\
    \    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl5l35jq2.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpl5l35jq2.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgd8hu9qt.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpgd8hu9qt.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = tostring(remainder) .. binary\n\
    \    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2lddhxlp.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp2lddhxlp.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder\
    \ .. binary\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpspj2kbam.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpspj2kbam.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8xo_40b7.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp8xo_40b7.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb32i5czo.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpb32i5czo.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfw50mp7_.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpfw50mp7_.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3vhkqxjv.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp3vhkqxjv.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6372fmli.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp6372fmli.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfz1c12bi.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpfz1c12bi.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpblww1jgx.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpblww1jgx.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm0u5df1k.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpm0u5df1k.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg0h8e3fz.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpg0h8e3fz.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkalzqf6k.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpkalzqf6k.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = remainder .. binary\n    end\n\
    \    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjovopz0t.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpjovopz0t.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = (decimal\
    \ - remainder) / 2\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyd4kv8us.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyd4kv8us.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. tostring(remainder)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoq8nobx5.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpoq8nobx5.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9fcqj164.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp9fcqj164.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder\
    \ .. binary\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_gdvvbga.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp_gdvvbga.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. tostring(remainder)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6k36f8cj.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp6k36f8cj.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3up67fp7.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp3up67fp7.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg57dgjw7.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpg57dgjw7.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzmhgl9ua.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpzmhgl9ua.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = tostring(remainder) .. binary\n\
    \    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprk_502j3.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprk_502j3.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsd3pqi62.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpsd3pqi62.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    binary = binary .. tostring(decimal\
    \ % 2)\n    decimal = math.floor(decimal / 2)\n  end\n  return binary .. \"db\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2z1ds_n3.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp2z1ds_n3.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo_8ieilp.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpo_8ieilp.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1vqbj7t2.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp1vqbj7t2.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder .. binary\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxdnl98ej.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpxdnl98ej.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr3jdne0a.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpr3jdne0a.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = ''\n  while decimal > 0 do\n    binary = tostring(decimal %\
    \ 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' ..\
    \ binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp25vnz0wz.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp25vnz0wz.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7f7t8bvj.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp7f7t8bvj.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8igerfpb.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp8igerfpb.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkivqhahd.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpkivqhahd.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdo3cz9jr.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpdo3cz9jr.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy7auy3dc.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpy7auy3dc.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpansyaepp.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpansyaepp.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuidasx65.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpuidasx65.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  local quotient = decimal\n  repeat\n\
    \    remainder = quotient % 2\n    quotient = math.floor(quotient / 2)\n    binary\
    \ = remainder .. binary\n  until quotient == 0\n  return \"db\" .. binary .. \"\
    db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9tl0e69v.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp9tl0e69v.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = binary ..\
    \ remainder\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmhrlf586.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpmhrlf586.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = tostring(remainder) .. binary\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr_u72iel.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpr_u72iel.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp25te2jek.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp25te2jek.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        decimal = math.floor(decimal / 2)\n        binary = remainder\
    \ .. binary\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzq3oudqh.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpzq3oudqh.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdo_ki9vv.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpdo_ki9vv.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsgdkzwm5.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpsgdkzwm5.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdq3iugz3.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpdq3iugz3.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpomodbhk7.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpomodbhk7.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = ''\n  while decimal > 0 do\n    local remainder = decimal %\
    \ 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnqnsp5oa.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnqnsp5oa.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = 0\n  local i\
    \ = 0\n  while decimal > 0 do\n    remainder = decimal % 2\n    quotient = decimal\
    \ / 2\n    decimal = math.floor(quotient)\n    binary = binary .. remainder\n\
    \    i = i + 1\n  end\n  binary = \"db\" .. binary .. \"db\"\n  return binary\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx3uw2ooj.lua:28:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpx3uw2ooj.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmwb_0c89.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpmwb_0c89.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpek20ouga.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpek20ouga.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiyiazyew.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpiyiazyew.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl5fsg_ee.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpl5fsg_ee.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpociichuw.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpociichuw.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx78f5mcl.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpx78f5mcl.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = 0\n  local i\
    \ = 0\n  while decimal > 0 do\n    remainder = decimal % 2\n    quotient = math.floor(decimal\
    \ / 2)\n    decimal = quotient\n    binary = binary .. remainder\n  end\n  binary\
    \ = \"db\" .. binary .. \"db\"\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplgf7bu9c.lua:27:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmplgf7bu9c.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = ''\n  while decimal > 0 do\n    local remainder = decimal %\
    \ 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzm1z5sjh.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpzm1z5sjh.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = (decimal\
    \ - remainder) / 2\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6tm_573h.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp6tm_573h.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  local\
    \ i = 0\n  while quotient ~= 0 do\n    remainder = quotient % 2\n    quotient\
    \ = math.floor(quotient / 2)\n    binary = tostring(remainder) .. binary\n  end\n\
    \  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1wlxx19d.lua:25:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp1wlxx19d.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpux9qhsjl.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpux9qhsjl.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxo02w2xo.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpxo02w2xo.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprgbxdd2q.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprgbxdd2q.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local bit = decimal % 2\n\
    \    binary = bit .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd4orw6ay.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpd4orw6ay.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7lc4av3c.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp7lc4av3c.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpndp_5hqg.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpndp_5hqg.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmgr6396h.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpmgr6396h.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5volya6c.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp5volya6c.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa75_m608.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpa75_m608.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = ''\n  while decimal > 0 do\n    local remainder = decimal %\
    \ 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnsiquvwb.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnsiquvwb.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder .. binary\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6z4ge625.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp6z4ge625.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    binary = binary .. tostring(decimal\
    \ % 2)\n    decimal = math.floor(decimal / 2)\n  end\n  return binary .. \"db\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphm4wl57o.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmphm4wl57o.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder\n    while decimal > 0 do\n    \
    \    remainder = decimal % 2\n        binary = binary .. remainder\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp27dffaej.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp27dffaej.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_ju6rrh_.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp_ju6rrh_.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        decimal = math.floor(decimal / 2)\n        binary = remainder\
    \ .. binary\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprqjm3ld0.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprqjm3ld0.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = tostring(remainder) .. binary\n\
    \    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph7pk2lua.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmph7pk2lua.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa53qe7w_.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpa53qe7w_.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc489h04_.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpc489h04_.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ag83k_g.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp8ag83k_g.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkv7t6v_f.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpkv7t6v_f.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoiipqnco.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpoiipqnco.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3xw7gkba.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp3xw7gkba.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. tostring(remainder)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  binary = binary .. \"db\"\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgjtr0__g.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpgjtr0__g.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    local i = 0\n    while quotient > 0 do\n        remainder = quotient % 2\n\
    \        quotient = math.floor(quotient / 2)\n        binary = binary .. tostring(remainder)\n\
    \        i = i + 1\n    end\n    binary = binary .. \"db\"\n    return string.reverse(binary)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmkcmfv3z.lua:27:\
    \ expected: \"db0db\"\\nactual: \"bdbd\"\\nstack traceback:\\n\\t/tmp/tmpmkcmfv3z.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6rcrl8z1.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp6rcrl8z1.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpppff70tc.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpppff70tc.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpookw5juf.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpookw5juf.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    repeat\n        local remainder = decimal % 2\n\
    \        binary = remainder .. binary\n        decimal = (decimal - remainder)\
    \ / 2\n    until decimal == 0\n    return \"db\" .. binary .. \"db\"\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1mvaq_2q.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp1mvaq_2q.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0dnv7ook.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp0dnv7ook.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0vo0d1a4.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp0vo0d1a4.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd9q5cunh.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpd9q5cunh.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgyynhrv1.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpgyynhrv1.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local bin = \"\"\n    while decimal > 0 do\n        bin = tostring(decimal\
    \ % 2) .. bin\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. bin .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpot1qqdfe.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpot1qqdfe.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2hh1ui45.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp2hh1ui45.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = ''\n  while decimal > 0 do\n    local remainder = decimal %\
    \ 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptt3rr_sc.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmptt3rr_sc.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphy9bmmug.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmphy9bmmug.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbaf75pog.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpbaf75pog.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgvggj_jn.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpgvggj_jn.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = (decimal - remainder) / 2\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbflfneah.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpbflfneah.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdh54u9ye.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpdh54u9ye.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. tostring(remainder)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu38l7gfn.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpu38l7gfn.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder\
    \ .. binary\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfccoukp6.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpfccoukp6.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2jv4lcb0.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp2jv4lcb0.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgg_hcsg2.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpgg_hcsg2.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. tostring(remainder)\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpir1gu8ch.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpir1gu8ch.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpksr9305c.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpksr9305c.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = remainder\
    \ .. binary\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprk4o6yh0.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprk4o6yh0.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8j5zdwv_.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp8j5zdwv_.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4lwhk7zz.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp4lwhk7zz.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfoo651sf.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpfoo651sf.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp7dlmwr_.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpp7dlmwr_.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder\n    while decimal > 0 do\n    \
    \    remainder = decimal % 2\n        decimal = math.floor(decimal / 2)\n    \
    \    binary = remainder .. binary\n    end\n    return \"db\" .. binary .. \"\
    db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp45ppegd.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpp45ppegd.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppknry1h0.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmppknry1h0.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    if decimal % 2 == 0 then\n\
    \      binary = binary .. \"0\"\n    else\n      binary = binary .. \"1\"\n  \
    \  end\n    decimal = math.floor(decimal / 2)\n  end\n  return binary .. \"db\"\
    \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnnt5dlhw.lua:25:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnnt5dlhw.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeicgksup.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpeicgksup.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2_ew9ozc.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp2_ew9ozc.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9ubry0cg.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp9ubry0cg.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    decimal = math.floor(decimal / 2)\n    binary = binary .. remainder\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp32x0k728.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp32x0k728.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyvpuuhcp.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyvpuuhcp.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj6te872d.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpj6te872d.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuoiiwxg8.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpuoiiwxg8.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfn5w0ksn.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpfn5w0ksn.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = remainder .. binary\n    end\n\
    \    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe_q40man.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpe_q40man.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = tostring(remainder) .. binary\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkp05nvfi.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpkp05nvfi.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbfzse77c.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpbfzse77c.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  local remainder = decimal\n  while remainder > 0 do\n\
    \    local digit = remainder % 2\n    remainder = math.floor(remainder / 2)\n\
    \    binary = digit .. binary\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfb8_2_5v.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpfb8_2_5v.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1yghmhvi.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp1yghmhvi.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw06sb3ra.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpw06sb3ra.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzdc6oaho.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpzdc6oaho.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxa7pxxhl.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpxa7pxxhl.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local binary_table = {}\n    local i = 0\n    while\
    \ decimal > 0 do\n        binary_table[i] = decimal % 2\n        decimal = math.floor(decimal\
    \ / 2)\n        i = i + 1\n    end\n    for i = #binary_table, 0, -1 do\n    \
    \    binary = binary .. binary_table[i]\n    end\n    return \"db\" .. binary\
    \ .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmliojmfr.lua:19:\
    \ attempt to concatenate field '?' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmliojmfr.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpmliojmfr.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphnhg7kv5.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmphnhg7kv5.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = decimal\n\
    \    while quotient > 0 do\n        remainder = quotient % 2\n        quotient\
    \ = math.floor(quotient / 2)\n        binary = remainder .. binary\n    end\n\
    \    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnz7e5nq0.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnz7e5nq0.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = (decimal\
    \ - remainder) / 2\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb6gku6w6.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpb6gku6w6.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpphiler3n.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpphiler3n.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzk4547d9.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpzk4547d9.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    while decimal > 0 do\n\
    \        remainder = decimal % 2\n        decimal = math.floor(decimal / 2)\n\
    \        binary = remainder .. binary\n    end\n    return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeytu6p90.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpeytu6p90.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6npfalgm.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp6npfalgm.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal ~= 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg0jsr3nk.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpg0jsr3nk.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsdgflrfd.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpsdgflrfd.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  local\
    \ i = 0\n  while quotient > 0 do\n    remainder = quotient % 2\n    quotient =\
    \ math.floor(quotient / 2)\n    binary = remainder .. binary\n  end\n  return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeud_qzs5.lua:25:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpeud_qzs5.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1poaxpxg.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp1poaxpxg.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    local quotient = 0\n  \
    \  local i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m\
    \ = 0\n    local n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n  \
    \  local r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local v\
    \ = 0\n    local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n  \
    \  local aa = 0\n    local ab = 0\n    local ac = 0\n    local ad = 0\n    local\
    \ ae = 0\n    local af = 0\n    local ag = 0\n    local ah = 0\n    local ai =\
    \ 0\n    local aj = 0\n    local ak = 0\n    local al = 0\n    local am = 0\n\
    \    local an = 0\n    local ao = 0\n    local ap = 0\n    local aq = 0\n    local\
    \ ar = 0\n    local as = 0\n    local at = 0\n    local au = 0\n    local av =\
    \ 0\n    local aw = 0\n    local ax = 0\n    local ay = 0\n    local az = 0\n\
    \    local ba = 0\n    local bb = 0\n    local bc = 0\n    local bd = 0\n    local\
    \ be = 0\n    local bf = 0\n    local bg = 0\n    local bh = 0\n    local bi =\
    \ 0\n    local bj = 0\n    local bk = 0\n    local bl = 0\n    local bm = 0\n\
    \    local bn = 0\n    local bo = 0\n    local bp = 0\n    local bq = 0\n    local\
    \ br = 0\n    local bs = 0\n    local bt = 0\n    local bu = 0\n    local bv =\
    \ 0\n    local bw = 0\n    local bx = 0\n    local by = 0\n    local bz = 0\n\
    \    local ca = 0\n    local cb = 0\n    local cc = 0\n    local cd = 0\n    local\
    \ ce = 0\n    local cf = 0\n    local cg = 0\n    local ch = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp9x47s4qy.lua:101: 'end' expected (to close 'function' at\
    \ line 9) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  local remainder\n  while decimal > 0 do\n    remainder\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary = binary ..\
    \ tostring(remainder)\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprqz0sfrw.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprqz0sfrw.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwjstc34q.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpwjstc34q.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk9kbe3mr.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpk9kbe3mr.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvzhjzcea.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpvzhjzcea.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        binary = tostring(decimal\
    \ % 2) .. binary\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp75i8ldpy.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp75i8ldpy.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. tostring(remainder)\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpif52u99o.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpif52u99o.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbmnct0xd.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpbmnct0xd.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5iermb00.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp5iermb00.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_sbupq3b.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp_sbupq3b.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp77cy__xw.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp77cy__xw.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphierxhao.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmphierxhao.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local rest = decimal\
    \ % 2\n        binary = tostring(rest) .. binary\n        decimal = (decimal -\
    \ rest) / 2\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprookc316.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmprookc316.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = (decimal - remainder)\
    \ / 2\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnvwi6yr2.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnvwi6yr2.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0oup1vbe.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp0oup1vbe.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl9865lre.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpl9865lre.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppv_1h_38.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmppv_1h_38.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = tostring(remainder) .. binary\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp54rtj8ke.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp54rtj8ke.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = 0\n  while decimal\
    \ > 0 do\n    remainder = decimal % 2\n    quotient = decimal / 2\n    decimal\
    \ = math.floor(quotient)\n    binary = binary .. tostring(remainder)\n  end\n\
    \  return \"db\" .. string.reverse(binary) .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgptg6qrn.lua:25:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpgptg6qrn.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpew8vxv8m.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpew8vxv8m.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_djivftq.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp_djivftq.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = ''\n    while decimal > 0 do\n        local remainder = decimal\
    \ % 2\n        binary = tostring(remainder) .. binary\n        decimal = (decimal\
    \ - remainder) / 2\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6770zcvs.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp6770zcvs.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpblcjnspt.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpblcjnspt.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyf3nlr1o.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyf3nlr1o.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpavq_9h7o.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpavq_9h7o.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"db\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = binary .. remainder\n    decimal = (decimal - remainder) /\
    \ 2\n  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3gw7c7o9.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp3gw7c7o9.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq_5pt7s2.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpq_5pt7s2.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpihof27eu.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpihof27eu.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9zu77c58.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp9zu77c58.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpya_in6er.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpya_in6er.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpayj60wa0.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpayj60wa0.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnux07mtv.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnux07mtv.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary .. \"db\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyji27f3v.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpyji27f3v.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcfw_z523.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpcfw_z523.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfxhjw0oy.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpfxhjw0oy.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = tostring(remainder) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp37nz3tz5.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp37nz3tz5.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsl32u3zo.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpsl32u3zo.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnh7pv64o.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpnh7pv64o.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    binary = tostring(decimal\
    \ % 2) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\"\
    \ .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphm2fdms8.lua:21:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmphm2fdms8.lua:21:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"db\"\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = binary .. tostring(remainder)\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvyra9v20.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpvyra9v20.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local rest = decimal\
    \ % 2\n        binary = tostring(rest) .. binary\n        decimal = (decimal -\
    \ rest) / 2\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplanmnpi9.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmplanmnpi9.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  while decimal > 0 do\n    local remainder = decimal\
    \ % 2\n    binary = remainder .. binary\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpndc7intd.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpndc7intd.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    while decimal > 0 do\n        local remainder =\
    \ decimal % 2\n        binary = remainder .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0zunsmky.lua:22:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmp0zunsmky.lua:22:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \  local binary = \"\"\n  local remainder = 0\n  local quotient = decimal\n  while\
    \ quotient > 0 do\n    remainder = quotient % 2\n    quotient = math.floor(quotient\
    \ / 2)\n    binary = remainder .. binary\n  end\n  return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd8hvfqs_.lua:24:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpd8hvfqs_.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- decimal_to_binary(15)   # returns \"db1111db\"\n--\
    \ decimal_to_binary(32)   # returns \"db100000db\"\nlocal function decimal_to_binary(decimal)\n\
    \    local binary = \"\"\n    local remainder = 0\n    while decimal > 0 do\n\
    \        remainder = decimal % 2\n        decimal = math.floor(decimal / 2)\n\
    \        binary = remainder .. binary\n    end\n    return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn9m0ui1_.lua:23:\
    \ expected: \"db0db\"\\nactual: \"dbdb\"\\nstack traceback:\\n\\t/tmp/tmpn9m0ui1_.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
