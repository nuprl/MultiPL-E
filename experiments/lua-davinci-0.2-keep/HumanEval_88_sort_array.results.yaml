name: HumanEval_88_sort_array
language: lua
results:
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if #array\
    \ % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n \
    \ end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplgcknqzj.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmplgcknqzj.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvn8_d_6v.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpvn8_d_6v.lua:12: in function 'candidate'\\n\\t/tmp/tmpvn8_d_6v.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    if #array == 1 then\n        return array\n    end\n    local sum\
    \ = array[1] + array[#array]\n    local function compare(a, b)\n        if sum\
    \ % 2 == 0 then\n            return a > b\n        else\n            return a\
    \ < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ is_odd = sum % 2 == 1\n  table.sort(array, function(a, b)\n    if is_odd then\n\
    \      return a < b\n    else\n      return a > b\n    end\n  end)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpf7rdc19w.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpf7rdc19w.lua:12: in function 'candidate'\\n\\t/tmp/tmpf7rdc19w.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpw4i1f5b_.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpw4i1f5b_.lua:12: in function 'candidate'\\n\\t/tmp/tmpw4i1f5b_.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmparyusrr1.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmparyusrr1.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ #array % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpchjr5jmn.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmpchjr5jmn.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1dyi27fg.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp1dyi27fg.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  if\
    \ sum % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpuofr21xk.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpuofr21xk.lua:12: in function 'candidate'\\n\\t/tmp/tmpuofr21xk.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw1lgtbu5.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpw1lgtbu5.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    local is_odd = sum % 2\
    \ == 1\n    local function compare(a, b)\n        if is_odd then\n           \
    \ return a < b\n        else\n            return a > b\n        end\n    end\n\
    \    table.sort(array, compare)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ a % 2 == 0 and b % 2 == 0 then\n            return a > b\n        elseif a %\
    \ 2 == 1 and b % 2 == 1 then\n            return a < b\n        elseif a % 2 ==\
    \ 0 and b % 2 == 1 then\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwkya7nqz.lua:32:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 1, 3, 5}\\nstack traceback:\\\
    n\\t/tmp/tmpwkya7nqz.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3tskprj9.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp3tskprj9.lua:12: in function 'candidate'\\n\\t/tmp/tmp3tskprj9.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function cmp(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, cmp)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplsdn49fo.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmplsdn49fo.lua:12: in function 'candidate'\\n\\t/tmp/tmplsdn49fo.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    local function compare(a, b)\n        if\
    \ is_odd then\n            return a < b\n        else\n            return a >\
    \ b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp11dp_sty.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp11dp_sty.lua:12: in function 'candidate'\\n\\t/tmp/tmp11dp_sty.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    table.sort(array, function(a, b)\n      \
    \  if is_odd then\n            return a < b\n        else\n            return\
    \ a > b\n        end\n    end)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp97eto0wo.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp97eto0wo.lua:12: in function 'candidate'\\n\\t/tmp/tmp97eto0wo.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  if #array == 0 then return array end\n  local\
    \ sum = array[1] + array[#array]\n  local function compare(a, b)\n    if sum %\
    \ 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n  end\n\
    \  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpafokvs49.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpafokvs49.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (#array % 2 == 0) then\n            return a > b\n        else\n           \
    \ return a < b\n        end\n    end\n    table.sort(array, compare)\n    return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps07dob5m.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmps07dob5m.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpaceg_m0d.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpaceg_m0d.lua:12: in function 'candidate'\\n\\t/tmp/tmpaceg_m0d.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function sort_odd_even(a, b)\n   \
    \     if (a + b) % 2 == 0 then\n            return a > b\n        else\n     \
    \       return a < b\n        end\n    end\n    table.sort(array, sort_odd_even)\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5awn3oqz.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp5awn3oqz.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    local function compare(a, b)\n        if\
    \ is_odd then\n            return a < b\n        else\n            return a >\
    \ b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2_pxkabx.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp2_pxkabx.lua:12: in function 'candidate'\\n\\t/tmp/tmp2_pxkabx.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    local comp = function(a, b)\n        if is_odd\
    \ then\n            return a < b\n        else\n            return a > b\n   \
    \     end\n    end\n    table.sort(array, comp)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpewfix1an.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpewfix1an.lua:12: in function 'candidate'\\n\\t/tmp/tmpewfix1an.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2p9a__g8.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp2p9a__g8.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  if #array == 0 then return array end\n  local\
    \ sum = array[1] + array[#array]\n  local order = sum % 2 == 0 and function(a,\
    \ b) return a > b end or function(a, b) return a < b end\n  table.sort(array,\
    \ order)\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    local is_odd = sum % 2\
    \ == 1\n    local compare = function(a, b)\n        if is_odd then\n         \
    \   return a < b\n        else\n            return a > b\n        end\n    end\n\
    \    table.sort(array, compare)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  if\
    \ sum % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp83aay3ud.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp83aay3ud.lua:12: in function 'candidate'\\n\\t/tmp/tmp83aay3ud.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function sort_array_odd(array)\n \
    \       local function compare(a, b)\n            return a < b\n        end\n\
    \        table.sort(array, compare)\n    end\n    local function sort_array_even(array)\n\
    \        local function compare(a, b)\n            return a > b\n        end\n\
    \        table.sort(array, compare)\n    end\n    if array[1] + array[#array]\
    \ % 2 == 0 then\n        sort_array_even(array)\n    else\n        sort_array_odd(array)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzwpk54xy.lua:24:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpzwpk54xy.lua:24: in function 'candidate'\\n\\t/tmp/tmpzwpk54xy.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  if\
    \ sum % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpy8vd283q.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpy8vd283q.lua:12: in function 'candidate'\\n\\t/tmp/tmpy8vd283q.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local odd = {}\n    local even = {}\n  \
    \  local result = {}\n    for i, v in ipairs(array) do\n        if v % 2 == 0\
    \ then\n            table.insert(even, v)\n        else\n            table.insert(odd,\
    \ v)\n        end\n    end\n    if #array % 2 == 0 then\n        table.sort(even,\
    \ function(a, b) return a > b end)\n        table.sort(odd, function(a, b) return\
    \ a < b end)\n    else\n        table.sort(even, function(a, b) return a < b end)\n\
    \        table.sort(odd, function(a, b) return a > b end)\n    end\n    for i,\
    \ v in ipairs(odd) do\n        table.insert(result, v)\n    end\n    for i, v\
    \ in ipairs(even) do\n        table.insert(result, v)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpywkoft8n.lua:43:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {1, 3, 5, 4, 2, 0}\\nstack traceback:\\\
    n\\t/tmp/tmpywkoft8n.lua:43: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    local is_odd = sum % 2\
    \ == 1\n    local function compare(a, b)\n        if is_odd then\n           \
    \ return a < b\n        else\n            return a > b\n        end\n    end\n\
    \    table.sort(array, compare)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    local order = sum % 2\
    \ == 0 and -1 or 1\n    table.sort(array, function(a, b)\n        return a < b\
    \ and order or -order\n    end)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9zgcy_l9.lua:18:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp9zgcy_l9.lua:18:\
    \ in function </tmp/tmp9zgcy_l9.lua:17>\\n\\t[C]: in function 'sort'\\n\\t/tmp/tmp9zgcy_l9.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp9zgcy_l9.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpk038sipt.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpk038sipt.lua:12: in function 'candidate'\\n\\t/tmp/tmpk038sipt.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp20h7ins9.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp20h7ins9.lua:12: in function 'candidate'\\n\\t/tmp/tmp20h7ins9.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpew8vhu47.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpew8vhu47.lua:12: in function 'candidate'\\n\\t/tmp/tmpew8vhu47.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local sort_func = sum % 2 == 0 and function(a, b) return a > b end or function(a,\
    \ b) return a < b end\n    table.sort(array, sort_func)\n    return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkwpml8oj.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpkwpml8oj.lua:12: in function 'candidate'\\n\\t/tmp/tmpkwpml8oj.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    local is_odd = sum % 2\
    \ == 1\n    local compare = function(a, b)\n        if is_odd then\n         \
    \   return a < b\n        else\n            return a > b\n        end\n    end\n\
    \    table.sort(array, compare)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptrigwps7.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmptrigwps7.lua:12: in function 'candidate'\\n\\t/tmp/tmptrigwps7.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnkikxubx.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpnkikxubx.lua:12: in function 'candidate'\\n\\t/tmp/tmpnkikxubx.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function sort(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ sort)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbjzq3l2l.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpbjzq3l2l.lua:12: in function 'candidate'\\n\\t/tmp/tmpbjzq3l2l.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt98qk1ci.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpt98qk1ci.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    local function compare(a, b)\n        if\
    \ is_odd then\n            return a < b\n        else\n            return a >\
    \ b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzjx0dklr.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpzjx0dklr.lua:12: in function 'candidate'\\n\\t/tmp/tmpzjx0dklr.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if #array\
    \ % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n \
    \ end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0f9sovrn.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmp0f9sovrn.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfqmzth7j.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpfqmzth7j.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpucn44qir.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpucn44qir.lua:12: in function 'candidate'\\n\\t/tmp/tmpucn44qir.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ is_odd = sum % 2 == 1\n  table.sort(array, function(a, b)\n    if is_odd then\n\
    \      return a < b\n    else\n      return a > b\n    end\n  end)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpy18zl8et.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpy18zl8et.lua:12: in function 'candidate'\\n\\t/tmp/tmpy18zl8et.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpq2y8r5e0.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpq2y8r5e0.lua:12: in function 'candidate'\\n\\t/tmp/tmpq2y8r5e0.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local first = array[1]\n    local last = array[#array]\n    local\
    \ sort_func = function(a, b)\n        if (first + last) % 2 == 0 then\n      \
    \      return a > b\n        else\n            return a < b\n        end\n   \
    \ end\n    table.sort(array, sort_func)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    table.sort(array, function(a, b)\n      \
    \  if is_odd then\n            return a < b\n        else\n            return\
    \ a > b\n        end\n    end)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfhp5bz8k.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpfhp5bz8k.lua:12: in function 'candidate'\\n\\t/tmp/tmpfhp5bz8k.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwwqklikm.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpwwqklikm.lua:12: in function 'candidate'\\n\\t/tmp/tmpwwqklikm.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfg4iscs9.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpfg4iscs9.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ #array % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprmjveouw.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmprmjveouw.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_even = sum % 2 == 0\n    local function compare(a, b)\n        if\
    \ is_even then\n            return a > b\n        else\n            return a <\
    \ b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpoii52o_c.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpoii52o_c.lua:12: in function 'candidate'\\n\\t/tmp/tmpoii52o_c.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function sort_func(a, b)\n    if sum % 2 == 0 then\n      return a > b\n   \
    \ else\n      return a < b\n    end\n  end\n  table.sort(array, sort_func)\n \
    \ return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_uk4j92u.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp_uk4j92u.lua:12: in function 'candidate'\\n\\t/tmp/tmp_uk4j92u.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ order = sum % 2 == 0 and function(a, b) return a > b end or function(a, b) return\
    \ a < b end\n  table.sort(array, order)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpln6wbf_q.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpln6wbf_q.lua:12: in function 'candidate'\\n\\t/tmp/tmpln6wbf_q.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ #array % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl8_mq4_4.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmpl8_mq4_4.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  if\
    \ sum % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpf30l0lw1.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpf30l0lw1.lua:12: in function 'candidate'\\n\\t/tmp/tmpf30l0lw1.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function sort_array_asc(a, b)\n  \
    \      return a < b\n    end\n    local function sort_array_desc(a, b)\n     \
    \   return a > b\n    end\n    local function sum_first_last(array)\n        return\
    \ array[1] + array[#array]\n    end\n    if #array == 0 then\n        return array\n\
    \    elseif #array == 1 then\n        return array\n    elseif sum_first_last(array)\
    \ % 2 == 0 then\n        table.sort(array, sort_array_desc)\n        return array\n\
    \    else\n        table.sort(array, sort_array_asc)\n        return array\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpt0s9dd0k.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpt0s9dd0k.lua:12: in function 'candidate'\\n\\t/tmp/tmpt0s9dd0k.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2_3_2oyw.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp2_3_2oyw.lua:12: in function 'candidate'\\n\\t/tmp/tmp2_3_2oyw.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpe1t3mwuz.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpe1t3mwuz.lua:12: in function 'candidate'\\n\\t/tmp/tmpe1t3mwuz.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgh7gda25.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpgh7gda25.lua:12: in function 'candidate'\\n\\t/tmp/tmpgh7gda25.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    table.sort(array, function(a, b)\n      \
    \  if is_odd then\n            return a < b\n        else\n            return\
    \ a > b\n        end\n    end)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpt44fm6fs.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpt44fm6fs.lua:12: in function 'candidate'\\n\\t/tmp/tmpt44fm6fs.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8nx90h9b.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp8nx90h9b.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.002 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    if sum % 2 == 0 then\n\
    \        table.sort(array, function(a, b) return a > b end)\n    else\n      \
    \  table.sort(array, function(a, b) return a < b end)\n    end\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvn9rof2d.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpvn9rof2d.lua:12: in function 'candidate'\\n\\t/tmp/tmpvn9rof2d.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ sort_func = sum % 2 == 0 and function(a, b) return a > b end or function(a,\
    \ b) return a < b end\n  table.sort(array, sort_func)\n  return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpau2i75ef.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpau2i75ef.lua:12: in function 'candidate'\\n\\t/tmp/tmpau2i75ef.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphrjvnkxh.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmphrjvnkxh.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ sort_func = sum % 2 == 0 and function(a, b) return a > b end or function(a,\
    \ b) return a < b end\n  table.sort(array, sort_func)\n  return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbgkj4hsn.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpbgkj4hsn.lua:12: in function 'candidate'\\n\\t/tmp/tmpbgkj4hsn.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ sort_func = sum % 2 == 0 and function(a, b) return a > b end or function(a,\
    \ b) return a < b end\n  table.sort(array, sort_func)\n  return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3m9ryj0w.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp3m9ryj0w.lua:12: in function 'candidate'\\n\\t/tmp/tmp3m9ryj0w.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local asc = sum % 2 == 1\n    local function compare(a, b)\n        if asc\
    \ then\n            return a < b\n        else\n            return a > b\n   \
    \     end\n    end\n    table.sort(array, compare)\n    return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpm_hijo71.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpm_hijo71.lua:12: in function 'candidate'\\n\\t/tmp/tmpm_hijo71.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local cmp = sum % 2 == 0 and function(a, b) return a > b end or function(a,\
    \ b) return a < b end\n    table.sort(array, cmp)\n    return array\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpctv3y4_2.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpctv3y4_2.lua:12: in function 'candidate'\\n\\t/tmp/tmpctv3y4_2.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    local function compare(a,\
    \ b)\n        if sum % 2 == 0 then\n            return a > b\n        else\n \
    \           return a < b\n        end\n    end\n    table.sort(array, compare)\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    local is_odd = sum % 2\
    \ == 1\n    local function compare(a, b)\n        if is_odd then\n           \
    \ return a < b\n        else\n            return a > b\n        end\n    end\n\
    \    table.sort(array, compare)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp64rpfewv.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp64rpfewv.lua:12: in function 'candidate'\\n\\t/tmp/tmp64rpfewv.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        local\
    \ sum = a + b\n        if sum % 2 == 0 then\n            return a > b\n      \
    \  else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp96p2gh93.lua:29:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp96p2gh93.lua:29: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpk5tua1z7.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpk5tua1z7.lua:12: in function 'candidate'\\n\\t/tmp/tmpk5tua1z7.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    local function compare(a,\
    \ b)\n        if sum % 2 == 0 then\n            return a > b\n        else\n \
    \           return a < b\n        end\n    end\n    table.sort(array, compare)\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwnz22va8.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpwnz22va8.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2nov8ppj.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp2nov8ppj.lua:12: in function 'candidate'\\n\\t/tmp/tmp2nov8ppj.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function sort(a, b)\n    if (#array\
    \ % 2 == 0) then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, sort)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnc1_szov.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmpnc1_szov.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqqm2osk4.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpqqm2osk4.lua:12: in function 'candidate'\\n\\t/tmp/tmpqqm2osk4.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function sort(a, b)\n    if #array %\
    \ 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n  end\n\
    \  table.sort(array, sort)\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgyulx2qa.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmpgyulx2qa.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ #array % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2qsmn02_.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmp2qsmn02_.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ is_odd = sum % 2 == 1\n  table.sort(array, function(a, b)\n    if is_odd then\n\
    \      return a < b\n    else\n      return a > b\n    end\n  end)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpndjguq6r.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpndjguq6r.lua:12: in function 'candidate'\\n\\t/tmp/tmpndjguq6r.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpso8jxcs9.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpso8jxcs9.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpyrewxbc_.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpyrewxbc_.lua:12: in function 'candidate'\\n\\t/tmp/tmpyrewxbc_.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpy67zawm4.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpy67zawm4.lua:12: in function 'candidate'\\n\\t/tmp/tmpy67zawm4.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5pk8y9mf.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp5pk8y9mf.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local odd = {}\n    local even = {}\n  \
    \  for i, v in ipairs(array) do\n        if v % 2 == 0 then\n            table.insert(even,\
    \ v)\n        else\n            table.insert(odd, v)\n        end\n    end\n \
    \   table.sort(odd)\n    table.sort(even, function(a, b) return a > b end)\n \
    \   local result = {}\n    local odd_index = 1\n    local even_index = 1\n   \
    \ for i, v in ipairs(array) do\n        if v % 2 == 0 then\n            result[i]\
    \ = even[even_index]\n            even_index = even_index + 1\n        else\n\
    \            result[i] = odd[odd_index]\n            odd_index = odd_index + 1\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4pgw2ad1.lua:43:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 1, 0, 3, 5}\\nstack traceback:\\\
    n\\t/tmp/tmp4pgw2ad1.lua:43: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local sort_func = sum % 2 == 0 and function(a, b) return a > b end or function(a,\
    \ b) return a < b end\n    table.sort(array, sort_func)\n    return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpofsiazna.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpofsiazna.lua:12: in function 'candidate'\\n\\t/tmp/tmpofsiazna.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppc8vvncn.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmppc8vvncn.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = 0\n    for i = 1, #array do\n\
    \        sum = sum + array[i]\n    end\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwwy5p245.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\\nactual: {0, 1, 2, 3, 4, 5, 6}\\nstack traceback:\\\
    n\\t/tmp/tmpwwy5p245.lua:30: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ is_odd = sum % 2 == 1\n  local function compare(a, b)\n    if is_odd then\n\
    \      return a < b\n    else\n      return a > b\n    end\n  end\n  table.sort(array,\
    \ compare)\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp6gtydie_.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp6gtydie_.lua:12: in function 'candidate'\\n\\t/tmp/tmp6gtydie_.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    local function compare(a, b)\n        if\
    \ is_odd then\n            return a < b\n        else\n            return a >\
    \ b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpyiew4yao.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpyiew4yao.lua:12: in function 'candidate'\\n\\t/tmp/tmpyiew4yao.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function sort(array, start, finish)\n\
    \    if start >= finish then\n      return\n    end\n    local pivot = array[start]\n\
    \    local i = start\n    local j = finish\n    while i < j do\n      while i\
    \ < j and array[j] >= pivot do\n        j = j - 1\n      end\n      array[i] =\
    \ array[j]\n      while i < j and array[i] <= pivot do\n        i = i + 1\n  \
    \    end\n      array[j] = array[i]\n    end\n    array[i] = pivot\n    sort(array,\
    \ start, i - 1)\n    sort(array, i + 1, finish)\n  end\n  if #array == 0 then\n\
    \    return array\n  end\n  if #array == 1 then\n    return array\n  end\n  local\
    \ sum = array[1] + array[#array]\n  if sum % 2 == 0 then\n    sort(array, 1, #array)\n\
    \  else\n    sort(array, 1, #array)\n    local i = 1\n    local j = #array\n \
    \   while i < j do\n      local temp = array[i]\n      array[i] = array[j]\n \
    \     array[j] = temp\n      i = i + 1\n      j = j - 1\n    end\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmvf2bd1j.lua:62:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmpmvf2bd1j.lua:62: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.002 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function sort(a, b)\n    if #array %\
    \ 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n  end\n\
    \  table.sort(array, sort)\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_fq00yb_.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmp_fq00yb_.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local order = sum % 2 == 0 and -1 or 1\n    table.sort(array, function(a,\
    \ b) return a < b end)\n    return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp6m5bkew1.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp6m5bkew1.lua:12: in function 'candidate'\\n\\t/tmp/tmp6m5bkew1.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if #array\
    \ % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n \
    \ end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmttutz_p.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmpmttutz_p.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpc5k0r4iq.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpc5k0r4iq.lua:12: in function 'candidate'\\n\\t/tmp/tmpc5k0r4iq.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  table.sort(array,\
    \ function(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n   \
    \   return a < b\n    end\n  end)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpec62oqie.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpec62oqie.lua:12: in function 'candidate'\\n\\t/tmp/tmpec62oqie.lua:26:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ is_odd = sum % 2 == 1\n  table.sort(array, function(a, b)\n    if is_odd then\n\
    \      return a < b\n    else\n      return a > b\n    end\n  end)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpr9eejhw6.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpr9eejhw6.lua:12: in function 'candidate'\\n\\t/tmp/tmpr9eejhw6.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2243a_x0.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp2243a_x0.lua:12: in function 'candidate'\\n\\t/tmp/tmp2243a_x0.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_even = sum % 2 == 0\n    local function compare(a, b)\n        if\
    \ is_even then\n            return a > b\n        else\n            return a <\
    \ b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqy2uqadg.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpqy2uqadg.lua:12: in function 'candidate'\\n\\t/tmp/tmpqy2uqadg.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  if\
    \ sum % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpocctjxdf.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpocctjxdf.lua:12: in function 'candidate'\\n\\t/tmp/tmpocctjxdf.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzgx4kijh.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpzgx4kijh.lua:12: in function 'candidate'\\n\\t/tmp/tmpzgx4kijh.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    local is_odd = sum % 2\
    \ == 1\n    local compare = function(a, b)\n        if is_odd then\n         \
    \   return a < b\n        else\n            return a > b\n        end\n    end\n\
    \    table.sort(array, compare)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz74_0_7z.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpz74_0_7z.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function sort(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ sort)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpf9hifjew.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpf9hifjew.lua:12: in function 'candidate'\\n\\t/tmp/tmpf9hifjew.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    local function compare(a, b)\n        if\
    \ is_odd then\n            return a < b\n        else\n            return a >\
    \ b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpyzqr4dkk.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpyzqr4dkk.lua:12: in function 'candidate'\\n\\t/tmp/tmpyzqr4dkk.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        local\
    \ sum = a + b\n        if sum % 2 == 0 then\n            return a > b\n      \
    \  else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj71v9zt9.lua:29:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpj71v9zt9.lua:29: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function sort(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ sort)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplh7s15sf.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmplh7s15sf.lua:12: in function 'candidate'\\n\\t/tmp/tmplh7s15sf.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function sort_array_helper(array,\
    \ left, right)\n        if left >= right then\n            return\n        end\n\
    \        local pivot = array[left]\n        local i = left\n        local j =\
    \ right\n        while i < j do\n            while i < j and array[j] >= pivot\
    \ do\n                j = j - 1\n            end\n            array[i] = array[j]\n\
    \            while i < j and array[i] <= pivot do\n                i = i + 1\n\
    \            end\n            array[j] = array[i]\n        end\n        array[i]\
    \ = pivot\n        sort_array_helper(array, left, i - 1)\n        sort_array_helper(array,\
    \ i + 1, right)\n    end\n    if #array == 0 or #array == 1 then\n        return\
    \ array\n    end\n    local sum = array[1] + array[#array]\n    if sum % 2 ==\
    \ 0 then\n        sort_array_helper(array, 1, #array)\n    else\n        sort_array_helper(array,\
    \ 1, #array)\n        local i = 1\n        local j = #array\n        while i <\
    \ j do\n            array[i], array[j] = array[j], array[i]\n            i = i\
    \ + 1\n            j = j - 1\n        end\n    end\n    return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsw35f0jx.lua:57:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmpsw35f0jx.lua:57: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpl7vvwphb.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpl7vvwphb.lua:12: in function 'candidate'\\n\\t/tmp/tmpl7vvwphb.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp06mcr6ed.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp06mcr6ed.lua:12: in function 'candidate'\\n\\t/tmp/tmp06mcr6ed.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    local function compare(a, b)\n        if\
    \ is_odd then\n            return a < b\n        else\n            return a >\
    \ b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpj3v6zksu.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpj3v6zksu.lua:12: in function 'candidate'\\n\\t/tmp/tmpj3v6zksu.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdtabg7xo.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpdtabg7xo.lua:12: in function 'candidate'\\n\\t/tmp/tmpdtabg7xo.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    table.sort(array, function(a, b)\n      \
    \  if is_odd then\n            return a < b\n        else\n            return\
    \ a > b\n        end\n    end)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp35lkx35d.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp35lkx35d.lua:12: in function 'candidate'\\n\\t/tmp/tmp35lkx35d.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpm7nf8zb7.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpm7nf8zb7.lua:12: in function 'candidate'\\n\\t/tmp/tmpm7nf8zb7.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbzdlujx0.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpbzdlujx0.lua:12: in function 'candidate'\\n\\t/tmp/tmpbzdlujx0.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnhc5ma2o.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpnhc5ma2o.lua:12: in function 'candidate'\\n\\t/tmp/tmpnhc5ma2o.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  if #array == 0 then return array end\n  local\
    \ sum = array[1] + array[#array]\n  local is_odd = sum % 2 == 1\n  table.sort(array,\
    \ function(a, b)\n    if is_odd then\n      return a < b\n    else\n      return\
    \ a > b\n    end\n  end)\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp919vziyy.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp919vziyy.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.002 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function odd_even(a, b)\n        if\
    \ a % 2 == 0 and b % 2 == 0 then\n            return a > b\n        elseif a %\
    \ 2 == 1 and b % 2 == 1 then\n            return a < b\n        elseif a % 2 ==\
    \ 0 and b % 2 == 1 then\n            return true\n        else\n            return\
    \ false\n        end\n    end\n    table.sort(array, odd_even)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppfnfuadn.lua:32:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 1, 3, 5}\\nstack traceback:\\\
    n\\t/tmp/tmppfnfuadn.lua:32: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 ~= 0\n    table.sort(array, function(a, b)\n      \
    \  if is_odd then\n            return a < b\n        else\n            return\
    \ a > b\n        end\n    end)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpizakyipu.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpizakyipu.lua:12: in function 'candidate'\\n\\t/tmp/tmpizakyipu.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  if #array == 0 then return array end\n  local\
    \ sum = array[1] + array[#array]\n  local is_odd = sum % 2 == 1\n  table.sort(array,\
    \ function(a, b)\n    if is_odd then\n      return a < b\n    else\n      return\
    \ a > b\n    end\n  end)\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplr3coe3a.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmplr3coe3a.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    if sum % 2 == 0 then\n\
    \        table.sort(array, function(a, b) return a > b end)\n    else\n      \
    \  table.sort(array, function(a, b) return a < b end)\n    end\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpciwxzqe1.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpciwxzqe1.lua:12: in function 'candidate'\\n\\t/tmp/tmpciwxzqe1.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  if\
    \ sum % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqvk4b8io.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpqvk4b8io.lua:12: in function 'candidate'\\n\\t/tmp/tmpqvk4b8io.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (#array % 2 == 0) then\n            return a > b\n        else\n           \
    \ return a < b\n        end\n    end\n    table.sort(array, compare)\n    return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgm7gfoan.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmpgm7gfoan.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpv22a0upl.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpv22a0upl.lua:12: in function 'candidate'\\n\\t/tmp/tmpv22a0upl.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqzqf6yuk.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpqzqf6yuk.lua:12: in function 'candidate'\\n\\t/tmp/tmpqzqf6yuk.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function odd_even(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, odd_even)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7ncqs2ie.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp7ncqs2ie.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function sort(a, b)\n    if #array %\
    \ 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n  end\n\
    \  table.sort(array, sort)\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj1tdh5xf.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmpj1tdh5xf.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvrxdyc52.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpvrxdyc52.lua:12: in function 'candidate'\\n\\t/tmp/tmpvrxdyc52.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnrlakdy_.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpnrlakdy_.lua:12: in function 'candidate'\\n\\t/tmp/tmpnrlakdy_.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ is_odd = sum % 2 == 1\n  local function compare(a, b)\n    if is_odd then\n\
    \      return a < b\n    else\n      return a > b\n    end\n  end\n  table.sort(array,\
    \ compare)\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpy8ppqx7g.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpy8ppqx7g.lua:12: in function 'candidate'\\n\\t/tmp/tmpy8ppqx7g.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function odd_even(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, odd_even)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3wyxhp2v.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp3wyxhp2v.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk9qbb3qc.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpk9qbb3qc.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzq4hcp6x.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpzq4hcp6x.lua:12: in function 'candidate'\\n\\t/tmp/tmpzq4hcp6x.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ #array % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbwq2gn58.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmpbwq2gn58.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprzaz3wgt.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmprzaz3wgt.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpphtp0bpc.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpphtp0bpc.lua:12: in function 'candidate'\\n\\t/tmp/tmpphtp0bpc.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkhstgopg.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpkhstgopg.lua:12: in function 'candidate'\\n\\t/tmp/tmpkhstgopg.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = 0\n    for i = 1, #array do\n\
    \        sum = sum + array[i]\n    end\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp41l5l01r.lua:30:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\\nactual: {0, 1, 2, 3, 4, 5, 6}\\nstack traceback:\\\
    n\\t/tmp/tmp41l5l01r.lua:30: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9xgusmgk.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp9xgusmgk.lua:12: in function 'candidate'\\n\\t/tmp/tmp9xgusmgk.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ is_odd = sum % 2 == 1\n  table.sort(array, function(a, b)\n    if is_odd then\n\
    \      return a < b\n    else\n      return a > b\n    end\n  end)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdd3z68ck.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpdd3z68ck.lua:12: in function 'candidate'\\n\\t/tmp/tmpdd3z68ck.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpin1xm7rk.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpin1xm7rk.lua:12: in function 'candidate'\\n\\t/tmp/tmpin1xm7rk.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmo2g6hxz.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpmo2g6hxz.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    local function compare(a, b)\n        if\
    \ is_odd then\n            return a < b\n        else\n            return a >\
    \ b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo57j9g9e.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpo57j9g9e.lua:12: in function 'candidate'\\n\\t/tmp/tmpo57j9g9e.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfwpa7p40.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpfwpa7p40.lua:12: in function 'candidate'\\n\\t/tmp/tmpfwpa7p40.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo_drluzl.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpo_drluzl.lua:12: in function 'candidate'\\n\\t/tmp/tmpo_drluzl.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphi8nolps.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmphi8nolps.lua:12: in function 'candidate'\\n\\t/tmp/tmphi8nolps.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpghsi42df.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpghsi42df.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ #array % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3_3tsh98.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmp3_3tsh98.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpous4fq1f.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpous4fq1f.lua:12: in function 'candidate'\\n\\t/tmp/tmpous4fq1f.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp8jpm2jeq.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp8jpm2jeq.lua:12: in function 'candidate'\\n\\t/tmp/tmp8jpm2jeq.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ is_odd = sum % 2 == 1\n  table.sort(array, function(a, b)\n    if is_odd then\n\
    \      return a < b\n    else\n      return a > b\n    end\n  end)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnl8mmmhl.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpnl8mmmhl.lua:12: in function 'candidate'\\n\\t/tmp/tmpnl8mmmhl.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpznclcfbx.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpznclcfbx.lua:12: in function 'candidate'\\n\\t/tmp/tmpznclcfbx.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    local function compare(a, b)\n        if\
    \ is_odd then\n            return a < b\n        else\n            return a >\
    \ b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmph8yfpsv4.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmph8yfpsv4.lua:12: in function 'candidate'\\n\\t/tmp/tmph8yfpsv4.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfokw4rma.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpfokw4rma.lua:12: in function 'candidate'\\n\\t/tmp/tmpfokw4rma.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    if sum % 2 == 0 then\n\
    \        table.sort(array, function(a, b) return a > b end)\n    else\n      \
    \  table.sort(array, function(a, b) return a < b end)\n    end\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function sort(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, sort)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpyg2hxm8r.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpyg2hxm8r.lua:12: in function 'candidate'\\n\\t/tmp/tmpyg2hxm8r.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function sort(a, b)\n        if #array\
    \ % 2 == 0 then\n            return a > b\n        else\n            return a\
    \ < b\n        end\n    end\n    table.sort(array, sort)\n    return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp140mca8v.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmp140mca8v.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe63mnvs5.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpe63mnvs5.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.002 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    local sum\
    \ = a + b\n    if sum % 2 == 0 then\n      return a > b\n    else\n      return\
    \ a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1kuath6k.lua:29:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp1kuath6k.lua:29: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4qxqgpr5.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp4qxqgpr5.lua:12: in function 'candidate'\\n\\t/tmp/tmp4qxqgpr5.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ is_odd = sum % 2 == 1\n  local function compare(a, b)\n    if is_odd then\n\
    \      return a < b\n    else\n      return a > b\n    end\n  end\n  table.sort(array,\
    \ compare)\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpw7rfl0ne.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpw7rfl0ne.lua:12: in function 'candidate'\\n\\t/tmp/tmpw7rfl0ne.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7hfj6en4.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp7hfj6en4.lua:12: in function 'candidate'\\n\\t/tmp/tmp7hfj6en4.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ #array % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptmi_gcwq.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmptmi_gcwq.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjpshn7zq.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpjpshn7zq.lua:12: in function 'candidate'\\n\\t/tmp/tmpjpshn7zq.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgk1a6f98.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpgk1a6f98.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuzhfg45o.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpuzhfg45o.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    if sum % 2 == 0 then\n\
    \        table.sort(array, function(a, b) return a > b end)\n    else\n      \
    \  table.sort(array, function(a, b) return a < b end)\n    end\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  if\
    \ sum % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7w1kvauf.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp7w1kvauf.lua:12: in function 'candidate'\\n\\t/tmp/tmp7w1kvauf.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvjuj0nff.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpvjuj0nff.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if #array\
    \ % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n \
    \ end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkt58pjcy.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmpkt58pjcy.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4d03jgkw.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp4d03jgkw.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    table.sort(array, function(a, b)\n      \
    \  if is_odd then\n            return a < b\n        else\n            return\
    \ a > b\n        end\n    end)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqyhwipp9.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpqyhwipp9.lua:12: in function 'candidate'\\n\\t/tmp/tmpqyhwipp9.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpa1_ckj58.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpa1_ckj58.lua:12: in function 'candidate'\\n\\t/tmp/tmpa1_ckj58.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    local compare = function(a, b)\n        if\
    \ is_odd then\n            return a < b\n        else\n            return a >\
    \ b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp5rsw1cgh.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp5rsw1cgh.lua:12: in function 'candidate'\\n\\t/tmp/tmp5rsw1cgh.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ #array % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp22pa4bvm.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {5, 4, 3, 2, 1, 0}\\nstack traceback:\\\
    n\\t/tmp/tmp22pa4bvm.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpneuwxudf.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmpneuwxudf.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2otr3ilw.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp2otr3ilw.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ function compare(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n\
    \      return a < b\n    end\n  end\n  table.sort(array, compare)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7vxc0zk1.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp7vxc0zk1.lua:12: in function 'candidate'\\n\\t/tmp/tmp7vxc0zk1.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp89vwaqxs.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp89vwaqxs.lua:12: in function 'candidate'\\n\\t/tmp/tmp89vwaqxs.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function cmp(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ cmp)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkk8__s14.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpkk8__s14.lua:12: in function 'candidate'\\n\\t/tmp/tmpkk8__s14.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ is_odd = sum % 2 ~= 0\n  table.sort(array, function(a, b)\n    if is_odd then\n\
    \      return a < b\n    else\n      return a > b\n    end\n  end)\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpk74qzxnx.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpk74qzxnx.lua:12: in function 'candidate'\\n\\t/tmp/tmpk74qzxnx.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbzrthgkw.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpbzrthgkw.lua:12: in function 'candidate'\\n\\t/tmp/tmpbzrthgkw.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local function compare(a, b)\n    if (a +\
    \ b) % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(array, compare)\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3qtukiwl.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp3qtukiwl.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n  local sum = array[1] + array[#array]\n  local\
    \ is_odd = sum % 2 == 1\n  local function compare(a, b)\n    if is_odd then\n\
    \      return a < b\n    else\n      return a > b\n    end\n  end\n  table.sort(array,\
    \ compare)\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbwfsxi65.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpbwfsxi65.lua:12: in function 'candidate'\\n\\t/tmp/tmpbwfsxi65.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzp11oj9q.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpzp11oj9q.lua:12: in function 'candidate'\\n\\t/tmp/tmpzp11oj9q.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxreupo4z.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpxreupo4z.lua:12: in function 'candidate'\\n\\t/tmp/tmpxreupo4z.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function compare(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbcjvaw0k.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpbcjvaw0k.lua:12: in function 'candidate'\\n\\t/tmp/tmpbcjvaw0k.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local function cmp(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ cmp)\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpyv9fkatj.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpyv9fkatj.lua:12: in function 'candidate'\\n\\t/tmp/tmpyv9fkatj.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfq0ibzj7.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpfq0ibzj7.lua:12: in function 'candidate'\\n\\t/tmp/tmpfq0ibzj7.lua:24:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local function compare(a, b)\n        if\
    \ (a + b) % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp01egvqmn.lua:28:\
    \ expected: {0, 1, 2, 3, 4, 5}\\nactual: {4, 2, 0, 5, 3, 1}\\nstack traceback:\\\
    n\\t/tmp/tmp01egvqmn.lua:28: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    local sum = array[1] + array[#array]\n \
    \   local is_odd = sum % 2 == 1\n    table.sort(array, function(a, b)\n      \
    \  if is_odd then\n            return a < b\n        else\n            return\
    \ a > b\n        end\n    end)\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpz2oqj4ql.lua:12:\
    \ attempt to perform arithmetic on field '?' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpz2oqj4ql.lua:12: in function 'candidate'\\n\\t/tmp/tmpz2oqj4ql.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- * sort_array([]) => []\n\
    -- * sort_array([5]) => [5]\n-- * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n-- * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    local function sort_array(array)\n    if #array == 0 then\n        return array\n\
    \    end\n    local sum = array[1] + array[#array]\n    local function compare(a,\
    \ b)\n        if sum % 2 == 0 then\n            return a > b\n        else\n \
    \           return a < b\n        end\n    end\n    table.sort(array, compare)\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
