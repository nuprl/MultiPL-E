name: HumanEval_16_count_distinct_characters
language: lua
results:
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7dekfv09.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp7dekfv09.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd4j6epy6.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpd4j6epy6.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp221j0acw.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp221j0acw.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch('.') do\n     \
    \   characters[character:lower()] = true\n    end\n    return #characters\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbq3uhm0u.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbq3uhm0u.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  local char_set = {}\n  for i = 1, #string do\n    local\
    \ char = string:sub(i, i)\n    if not char_set[char] then\n      count = count\
    \ + 1\n      char_set[char] = true\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4nau_9mz.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp4nau_9mz.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('%a') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg6c7qd9f.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpg6c7qd9f.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch('.') do\n     \
    \   characters[character:lower()] = true\n    end\n    return #characters\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppir_96y_.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmppir_96y_.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdayvgtev.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdayvgtev.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  local characters = {}\n  for i = 1, #string do\n    local\
    \ character = string:sub(i, i)\n    if not characters[character] then\n      count\
    \ = count + 1\n      characters[character] = true\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2f17t47l.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp2f17t47l.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local set = {}\n  for c in string:gmatch('.') do\n    set[c:lower()] = true\n\
    \  end\n  return #set\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjjsb8n92.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpjjsb8n92.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for char in string:gmatch('.') do\n    chars[char:lower()]\
    \ = true\n  end\n  return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0bz3v6fb.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0bz3v6fb.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local character = string:sub(i, i)\n        if not characters[character]\
    \ then\n            count = count + 1\n            characters[character] = true\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4w4yye3v.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp4w4yye3v.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return table.length(chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwhusxlz1.lua:11:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwhusxlz1.lua:11:\
    \ in function 'candidate'\\n\\t/tmp/tmpwhusxlz1.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for char in string:lower():gmatch('.')\
    \ do\n        if not seen[char] then\n            count = count + 1\n        \
    \    seen[char] = true\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return table.length(chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvar5ivzf.lua:11:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpvar5ivzf.lua:11:\
    \ in function 'candidate'\\n\\t/tmp/tmpvar5ivzf.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqy2b2hbe.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpqy2b2hbe.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    local count = 0\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            characters[char] = true\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_kbqlqw9.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp_kbqlqw9.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp373tlxg9.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp373tlxg9.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx4t94dl5.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpx4t94dl5.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for c in string:gmatch('.') do\n        chars[c:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbgq71aic.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbgq71aic.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for c in string:gmatch('.') do\n        chars[c:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5wiwg5zf.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5wiwg5zf.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local c = string:sub(i, i)\n        if not characters[c] then\n      \
    \      count = count + 1\n            characters[c] = true\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv6hj9873.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpv6hj9873.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzicf4snr.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpzicf4snr.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr938ys80.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpr938ys80.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1fe7vsch.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp1fe7vsch.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch('.') do\n     \
    \   characters[character:lower()] = true\n    end\n    return #characters\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpma8qrpy8.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpma8qrpy8.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local character\
    \ = string:sub(i, i)\n        if not characters[character] then\n            characters[character]\
    \ = true\n        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfpm0fdf6.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpfpm0fdf6.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    for i = 1, #string do\n      \
    \  local char = string:sub(i, i)\n        if not chars[char] then\n          \
    \  chars[char] = true\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkeyinb73.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpkeyinb73.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    for i = 1, #string do\n      \
    \  local char = string:sub(i, i)\n        if not chars[char] then\n          \
    \  chars[char] = true\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5mvc6dw4.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp5mvc6dw4.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_map = {}\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        char_map[c] = true\n    end\n    return #char_map\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7sfwqh5p.lua:19:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp7sfwqh5p.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_63ep_1u.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_63ep_1u.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, string.len(string)\
    \ do\n        local character = string.sub(string, i, i)\n        if not characters[character]\
    \ then\n            count = count + 1\n            characters[character] = true\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprh_tj_ap.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmprh_tj_ap.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local c = string:sub(i, i)\n        if not characters[c] then\n      \
    \      count = count + 1\n            characters[c] = true\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvvvp1bs3.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpvvvp1bs3.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp05dkjm5e.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp05dkjm5e.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp170py01.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpp170py01.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for char in string:lower():gmatch('.')\
    \ do\n        if not seen[char] then\n            count = count + 1\n        \
    \    seen[char] = true\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpofurmzxe.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpofurmzxe.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp17b56502.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp17b56502.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n\
    \    if not chars[char] then\n      chars[char] = true\n    end\n  end\n  return\
    \ #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb5wfleyh.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpb5wfleyh.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2t1y2ckg.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp2t1y2ckg.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        chars[string:sub(i,\
    \ i):lower()] = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfz0kqoki.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpfz0kqoki.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8690f2zd.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8690f2zd.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  local chars = {}\n  for char in string:gmatch('.') do\n\
    \    if not chars[char:lower()] then\n      count = count + 1\n      chars[char:lower()]\
    \ = true\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for c in string:gmatch('.') do\n        chars[c:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4bpzdq62.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4bpzdq62.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppfqusffr.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmppfqusffr.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if not chars[c] then\n            chars[c] = true\n        end\n\
    \    end\n    return table.length(chars)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpum_rjn0a.lua:14:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpum_rjn0a.lua:14:\
    \ in function 'candidate'\\n\\t/tmp/tmpum_rjn0a.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptx01vi28.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmptx01vi28.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp46ydkcbg.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp46ydkcbg.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2kl_onim.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2kl_onim.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch('.') do\n     \
    \   characters[character:lower()] = true\n    end\n    return table.length(characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmps9diigfc.lua:11:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmps9diigfc.lua:11:\
    \ in function 'candidate'\\n\\t/tmp/tmps9diigfc.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmm8ybt5t.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpmm8ybt5t.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for c in string:gmatch('.') do\n        chars[c:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp65zlsyxo.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp65zlsyxo.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch('.') do\n     \
    \   characters[character:lower()] = true\n    end\n    return #characters\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp04wp2199.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp04wp2199.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local char_set = {}\n    for i = 1, #string do\n   \
    \     local char = string:sub(i, i)\n        if not char_set[char] then\n    \
    \        count = count + 1\n            char_set[char] = true\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpov23kx0x.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpov23kx0x.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for char in string:gmatch('.') do\n    chars[char:lower()]\
    \ = true\n  end\n  return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph_hrocwu.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmph_hrocwu.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuufyvubx.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpuufyvubx.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    for i = 1, #string do\n      \
    \  local char = string:sub(i, i)\n        if not chars[char] then\n          \
    \  chars[char] = true\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfm0wx85h.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpfm0wx85h.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9qf0wcsc.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp9qf0wcsc.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return table.length(chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpt3xro8i_.lua:11:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpt3xro8i_.lua:11:\
    \ in function 'candidate'\\n\\t/tmp/tmpt3xro8i_.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8run3mbj.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp8run3mbj.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6zbr9yk9.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6zbr9yk9.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local character = string:sub(i, i)\n        if not characters[character]\
    \ then\n            count = count + 1\n            characters[character] = true\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpovmmtwpd.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpovmmtwpd.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpox6ixss2.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpox6ixss2.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for char in string:gmatch('.') do\n    chars[char:lower()]\
    \ = true\n  end\n  return table.length(chars)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprzzub2j9.lua:11:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprzzub2j9.lua:11:\
    \ in function 'candidate'\\n\\t/tmp/tmprzzub2j9.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt87aabf7.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpt87aabf7.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for c in string:gmatch('%w') do\n        chars[c:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6tgp_n2v.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6tgp_n2v.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgckdan8d.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpgckdan8d.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo2g8anoi.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpo2g8anoi.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppy1zmg26.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmppy1zmg26.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local character\
    \ = string:sub(i, i)\n        characters[character:lower()] = true\n    end\n\
    \    return #characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb63afubs.lua:19:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpb63afubs.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for i = 1, #string do\n       \
    \ local char = string:sub(i, i)\n        if not seen[char] then\n            count\
    \ = count + 1\n            seen[char] = true\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ljq8ard.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp5ljq8ard.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    for i = 1, #string do\n      \
    \  local char = string:sub(i, i)\n        if not chars[char] then\n          \
    \  chars[char] = true\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph7wmb4nn.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmph7wmb4nn.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n\
    \    if not chars[char] then\n      chars[char] = true\n    end\n  end\n  return\
    \ #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2y75kkzb.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2y75kkzb.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7jwgw6i6.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp7jwgw6i6.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for char in string:lower():gmatch('.')\
    \ do\n        if not seen[char] then\n            count = count + 1\n        \
    \    seen[char] = true\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgwe83gx6.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpgwe83gx6.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9adqemmn.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9adqemmn.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for c in string:gmatch('.') do\n        characters[c:lower()]\
    \ = true\n    end\n    return #characters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe1lat0wz.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpe1lat0wz.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch('.') do\n     \
    \   characters[character:lower()] = true\n    end\n    return #characters\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuux0s2hc.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpuux0s2hc.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local character\
    \ = string:sub(i, i)\n        characters[character:lower()] = true\n    end\n\
    \    return #characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8zmwexba.lua:19:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8zmwexba.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct_characters = {}\n    for character in string:gmatch('.') do\n\
    \        distinct_characters[character:lower()] = true\n    end\n    return #distinct_characters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpib2s4hh5.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpib2s4hh5.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for i = 1, #string do\n       \
    \ local char = string:sub(i, i)\n        if not seen[char] then\n            count\
    \ = count + 1\n            seen[char] = true\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp19xh0oiy.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp19xh0oiy.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n\
    \    if not chars[char] then\n      chars[char] = true\n    end\n  end\n  return\
    \ #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptszazarw.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmptszazarw.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  local count = 0\n  for i = 1, #string do\n    local\
    \ character = string:sub(i, i)\n    if not characters[character] then\n      count\
    \ = count + 1\n      characters[character] = true\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzita8adm.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpzita8adm.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpydxaxlh1.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpydxaxlh1.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch('.') do\n     \
    \   characters[character:lower()] = true\n    end\n    return #characters\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyt1epk2r.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpyt1epk2r.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_set = {}\n    for char in string:gmatch('.') do\n        char_set[char:lower()]\
    \ = true\n    end\n    return #char_set\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj_9qdsh0.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpj_9qdsh0.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for character in string:gmatch('.') do\n    characters[character:lower()]\
    \ = true\n  end\n  return #characters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkod72tyc.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkod72tyc.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpitf0d_59.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpitf0d_59.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwugr5h8n.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwugr5h8n.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfj8a3aw6.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpfj8a3aw6.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for char in string:lower():gmatch('.')\
    \ do\n        if not seen[char] then\n            count = count + 1\n        \
    \    seen[char] = true\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp81ne8ms.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpp81ne8ms.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    local count = 0\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            characters[char] = true\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuxum6xj_.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpuxum6xj_.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local set = {}\n    for i = 1, #string do\n        set[string.lower(string:sub(i,\
    \ i))] = true\n    end\n    return #set\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeq9ppe1h.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpeq9ppe1h.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for char in string:gmatch('.') do\n    chars[char:lower()]\
    \ = true\n  end\n  return table.length(chars)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpc_dq6_ft.lua:11:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpc_dq6_ft.lua:11:\
    \ in function 'candidate'\\n\\t/tmp/tmpc_dq6_ft.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local character = string:sub(i, i)\n        if not characters[character]\
    \ then\n            count = count + 1\n            characters[character] = true\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb2uzqkrx.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpb2uzqkrx.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch('.') do\n     \
    \   characters[character:lower()] = true\n    end\n    return count_table_keys(characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfr3ddojv.lua:11:\
    \ attempt to call global 'count_table_keys' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpfr3ddojv.lua:11: in function 'candidate'\\n\\t/tmp/tmpfr3ddojv.lua:17:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_set = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        char_set[char] = true\n    end\n    return #char_set\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyuu60fwz.lua:19:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpyuu60fwz.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9eihs986.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9eihs986.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp_q2o_11.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpp_q2o_11.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for i = 1, #string do\n    local char = string:sub(i,\
    \ i)\n    if not characters[char] then\n      characters[char] = true\n    end\n\
    \  end\n  return #characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4gv3y7gm.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4gv3y7gm.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk_w3lvkh.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpk_w3lvkh.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return table.length(chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpoq3kguls.lua:14:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpoq3kguls.lua:14:\
    \ in function 'candidate'\\n\\t/tmp/tmpoq3kguls.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    for char in string:gmatch('.')\
    \ do\n        if not chars[char:lower()] then\n            count = count + 1\n\
    \            chars[char:lower()] = true\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ujqy3jx.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3ujqy3jx.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpppl81gg7.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpppl81gg7.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local character = string:sub(i, i)\n        if not characters[character]\
    \ then\n            count = count + 1\n            characters[character] = true\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgl8mizdd.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpgl8mizdd.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local char_set = {}\n    for i = 1, #string do\n   \
    \     local char = string:sub(i, i)\n        if not char_set[char] then\n    \
    \        count = count + 1\n            char_set[char] = true\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_3ghbg33.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp_3ghbg33.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        characters[char:lower()] = true\n    end\n    return #characters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppge32cqp.lua:19:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmppge32cqp.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd1k4e0sb.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpd1k4e0sb.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmvulvzah.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpmvulvzah.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for char in string:lower():gmatch('.')\
    \ do\n        if not seen[char] then\n            count = count + 1\n        \
    \    seen[char] = true\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_set = {}\n    for char in string:gmatch('.') do\n        char_set[char:lower()]\
    \ = true\n    end\n    return table.length(char_set)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp6v4sg5jw.lua:11:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp6v4sg5jw.lua:11:\
    \ in function 'candidate'\\n\\t/tmp/tmp6v4sg5jw.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphj1ai8ue.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmphj1ai8ue.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        characters[c:lower()] = true\n    end\n    return table.length(characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpuwl7301n.lua:12:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuwl7301n.lua:12:\
    \ in function 'candidate'\\n\\t/tmp/tmpuwl7301n.lua:18: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for i = 1, #string do\n       \
    \ local char = string:sub(i, i)\n        if not seen[char] then\n            count\
    \ = count + 1\n            seen[char] = true\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2hsl5f9c.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp2hsl5f9c.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    for i = 1, #string do\n      \
    \  local char = string:sub(i, i)\n        if not chars[char] then\n          \
    \  chars[char] = true\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw68aypht.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpw68aypht.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return table.length(chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpym9hgtf_.lua:11:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpym9hgtf_.lua:11:\
    \ in function 'candidate'\\n\\t/tmp/tmpym9hgtf_.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local c = string:sub(i, i)\n        if not characters[c] then\n      \
    \      count = count + 1\n            characters[c] = true\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa9mfjzd8.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpa9mfjzd8.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for character in string:gmatch('.') do\n    characters[character:lower()]\
    \ = true\n  end\n  return #characters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu5uhxhld.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpu5uhxhld.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp761ut12w.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp761ut12w.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch('.') do\n     \
    \   characters[character:lower()] = true\n    end\n    return #characters\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2j79q5yq.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2j79q5yq.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcrg0memy.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpcrg0memy.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local char_set = {}\n    for i = 1, #string do\n   \
    \     local char = string:sub(i, i)\n        if not char_set[char] then\n    \
    \        count = count + 1\n            char_set[char] = true\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw63gf7ld.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpw63gf7ld.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        chars[char:lower()] = true\n    end\n    return #chars\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn921o00j.lua:19:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpn921o00j.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppencc_ai.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmppencc_ai.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for i = 1, #string do\n    characters[string:sub(i,\
    \ i):lower()] = true\n  end\n  return #characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8thgjqbn.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8thgjqbn.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpep72jw2q.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpep72jw2q.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9sm3ii_d.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9sm3ii_d.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    for i = 1, #string do\n      \
    \  local char = string:sub(i, i)\n        if not chars[char] then\n          \
    \  chars[char] = true\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1zql_o_6.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp1zql_o_6.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for char in string:gmatch('.') do\n    chars[char:lower()]\
    \ = true\n  end\n  return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_bb59nfs.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_bb59nfs.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for c in string:gmatch('.') do\n        characters[c:lower()]\
    \ = true\n    end\n    return #characters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprw54eaix.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmprw54eaix.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph11g327j.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmph11g327j.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa8puu33b.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpa8puu33b.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_set = {}\n    local count = 0\n    for i = 1, #string do\n   \
    \     local char = string:sub(i, i)\n        if not char_set[char] then\n    \
    \        char_set[char] = true\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn0lgdt1u.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpn0lgdt1u.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5tp5mzs2.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5tp5mzs2.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n\
    \    chars[char:lower()] = true\n  end\n  return #chars\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9azbf9lq.lua:19:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9azbf9lq.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn46s14u7.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpn46s14u7.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsmgrxt38.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpsmgrxt38.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local character\
    \ = string:sub(i, i)\n        if not characters[character] then\n            characters[character]\
    \ = true\n        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwwdhjzv3.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwwdhjzv3.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbfy54dla.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbfy54dla.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for char in string:lower():gmatch('.')\
    \ do\n        if not seen[char] then\n            count = count + 1\n        \
    \    seen[char] = true\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local char_map = {}\n    for i = 1, #string do\n   \
    \     local char = string:sub(i, i)\n        if not char_map[char] then\n    \
    \        count = count + 1\n            char_map[char] = true\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe2g9nwwr.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpe2g9nwwr.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        characters[char:lower()] = true\n    end\n    return #characters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnaed9vo3.lua:19:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnaed9vo3.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, string.len(string) do\n        local\
    \ char = string.sub(string, i, i)\n        if not characters[char] then\n    \
    \        characters[char] = true\n        end\n    end\n    return table.getn(characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5t5hzbly.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5t5hzbly.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local distinct_characters = {}\n    for character in string:gmatch('.') do\n\
    \        distinct_characters[character:lower()] = true\n    end\n    return table.length(distinct_characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprfr7mvyg.lua:11:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprfr7mvyg.lua:11:\
    \ in function 'candidate'\\n\\t/tmp/tmprfr7mvyg.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb436xxxv.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpb436xxxv.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local character\
    \ = string:sub(i, i)\n        characters[character:lower()] = true\n    end\n\
    \    return #characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_q_ob8cy.lua:19:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_q_ob8cy.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5be2hxsv.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5be2hxsv.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgtopsmik.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpgtopsmik.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzhgfqg94.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpzhgfqg94.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local character = string:sub(i, i)\n        if not characters[character]\
    \ then\n            count = count + 1\n            characters[character] = true\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprc54nogg.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmprc54nogg.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, string.len(string) do\n        local\
    \ character = string.sub(string, i, i)\n        if not characters[character] then\n\
    \            characters[character] = true\n        end\n    end\n    return table.length(characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmph4niditi.lua:14:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmph4niditi.lua:14:\
    \ in function 'candidate'\\n\\t/tmp/tmph4niditi.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6xy5mu3w.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6xy5mu3w.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    local count = 0\n    for i = 1, #string do\n      \
    \  local char = string:sub(i, i)\n        if not chars[char] then\n          \
    \  chars[char] = true\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr5v3bqbx.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpr5v3bqbx.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if not chars[c] then\n            chars[c] = true\n        end\n\
    \    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb995ii0n.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpb995ii0n.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6lp2hdbh.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6lp2hdbh.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe7nm0lla.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpe7nm0lla.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for char in string:lower():gmatch('.')\
    \ do\n        if not seen[char] then\n            count = count + 1\n        \
    \    seen[char] = true\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    for i = 1, #string do\n      \
    \  local c = string:sub(i, i)\n        if not chars[c] then\n            chars[c]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbjtialgv.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpbjtialgv.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return table.length(chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnqkuieju.lua:11:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpnqkuieju.lua:11:\
    \ in function 'candidate'\\n\\t/tmp/tmpnqkuieju.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfz06zhhp.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpfz06zhhp.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    for i = 1, #string do\n      \
    \  local char = string:sub(i, i)\n        if not chars[char] then\n          \
    \  chars[char] = true\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwijy7vlh.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpwijy7vlh.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local char_set = {}\n    for i = 1, #string do\n   \
    \     local char = string:sub(i, i)\n        if not char_set[char] then\n    \
    \        count = count + 1\n            char_set[char] = true\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgu1ujtas.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpgu1ujtas.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local c = string:sub(i, i)\n        if not characters[c] then\n      \
    \      count = count + 1\n            characters[c] = true\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprcjgwd9p.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmprcjgwd9p.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  local chars = {}\n  for char in string:gmatch('.') do\n\
    \    if not chars[char:lower()] then\n      count = count + 1\n      chars[char:lower()]\
    \ = true\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw9ep7bu8.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpw9ep7bu8.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        chars[char:lower()] = true\n    end\n    return #chars\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpus3kj53l.lua:19:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpus3kj53l.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphn_m4oag.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmphn_m4oag.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for char in string:lower():gmatch('.')\
    \ do\n        if not seen[char] then\n            count = count + 1\n        \
    \    seen[char] = true\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for char in string:gmatch('.') do\n    chars[char:lower()]\
    \ = true\n  end\n  return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaxa7sk69.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpaxa7sk69.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for c in string:gmatch('.') do\n    chars[c:lower()] =\
    \ true\n  end\n  return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcnz5bg4d.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpcnz5bg4d.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdb65i5im.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdb65i5im.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_set = {}\n    for char in string:gmatch('.') do\n        char_set[char:lower()]\
    \ = true\n    end\n    return #char_set\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0sy60nky.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0sy60nky.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local char_set = {}\n    for char in string:gmatch('.') do\n        char_set[char:lower()]\
    \ = true\n    end\n    return table.length(char_set)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmps5fiob2v.lua:11:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmps5fiob2v.lua:11:\
    \ in function 'candidate'\\n\\t/tmp/tmps5fiob2v.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    local count = 0\n    for i = 1, #string do\n      \
    \  local char = string:sub(i, i)\n        if not chars[char] then\n          \
    \  chars[char] = true\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjw_69vn5.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpjw_69vn5.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n\
    \    chars[char:lower()] = true\n  end\n  return #chars\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl5ty4rs1.lua:19:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpl5ty4rs1.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk1nh7nxt.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpk1nh7nxt.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2l216umw.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmp2l216umw.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local character = string:sub(i, i)\n        if not characters[character]\
    \ then\n            count = count + 1\n            characters[character] = true\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprdlzdoo3.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmprdlzdoo3.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return table.length(chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpyd0jtbn9.lua:11:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpyd0jtbn9.lua:11:\
    \ in function 'candidate'\\n\\t/tmp/tmpyd0jtbn9.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7qphsph3.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp7qphsph3.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqt_950y2.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpqt_950y2.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local character\
    \ = string:sub(i, i)\n        if not characters[character] then\n            characters[character]\
    \ = true\n        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptasd8vli.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmptasd8vli.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphrxumkpv.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmphrxumkpv.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local seen = {}\n    for char in string:gmatch('.') do\n        seen[char:lower()]\
    \ = true\n    end\n    return #seen\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnjihbrh5.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnjihbrh5.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpurgv23ws.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpurgv23ws.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local character\
    \ = string:sub(i, i)\n        if not characters[character] then\n            characters[character]\
    \ = true\n        end\n    end\n    return #characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo5z1d62t.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpo5z1d62t.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    for i = 1, #string do\n      \
    \  local char = string:sub(i, i)\n        if not chars[char] then\n          \
    \  chars[char] = true\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeybfdw82.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpeybfdw82.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not chars[char] then\n            chars[char] = true\n      \
    \  end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv55bcli7.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpv55bcli7.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    for i = 1, #string do\n      \
    \  local char = string:sub(i, i)\n        if not chars[char] then\n          \
    \  chars[char] = true\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpamjychp_.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpamjychp_.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return table.length(characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9jb_8pqm.lua:14:\
    \ attempt to call field 'length' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9jb_8pqm.lua:14:\
    \ in function 'candidate'\\n\\t/tmp/tmp9jb_8pqm.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkj1wtvxj.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkj1wtvxj.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        characters[c:lower()] = true\n    end\n    return #characters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgbdhraf5.lua:19:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpgbdhraf5.lua:19: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local characters = {}\n    for i = 1, #string do\n \
    \       local char = string:sub(i, i)\n        if not characters[char] then\n\
    \            count = count + 1\n            characters[char] = true\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx_ffm4re.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpx_ffm4re.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for char in string:lower():gmatch('.')\
    \ do\n        if not seen[char] then\n            count = count + 1\n        \
    \    seen[char] = true\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn32gpfy4.lua:18:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmpn32gpfy4.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, string.len(string) do\n        local\
    \ char = string.sub(string, i, i)\n        if not characters[char] then\n    \
    \        characters[char] = true\n        end\n    end\n    return table.getn(characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_pf3e8f7.lua:21:\
    \ expected: 5, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_pf3e8f7.lua:21: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n\
    -- >>> count_distinct_characters('Jerry')\n-- 4\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local char_set = {}\n    for i = 1, #string do\n   \
    \     local char = string:sub(i, i)\n        if not char_set[char] then\n    \
    \        count = count + 1\n            char_set[char] = true\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzxi_78yt.lua:24:\
    \ expected: 5, actual: 9\\nstack traceback:\\n\\t/tmp/tmpzxi_78yt.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
