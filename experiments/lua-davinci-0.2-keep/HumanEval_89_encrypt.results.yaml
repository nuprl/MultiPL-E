name: HumanEval_89_encrypt
language: lua
results:
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal new_alphabet = string.sub(alphabet, 3) .. string.sub(alphabet, 1, 2)\n\
    \tlocal new_s = ''\n\tfor i = 1, #s do\n\t\tlocal c = string.sub(s, i, i)\n\t\t\
    local index = string.find(alphabet, c)\n\t\tif index then\n\t\t\tnew_s = new_s\
    \ .. string.sub(new_alphabet, index, index)\n\t\telse\n\t\t\tnew_s = new_s ..\
    \ c\n\t\tend\n\tend\n\treturn new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbj320nqs.lua:29:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmpbj320nqs.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \  local encrypted = {}\n  local s = string.lower(s)\n  for i = 1, #s do\n   \
    \ local letter = s:sub(i,i)\n    local index = 0\n    for j = 1, #alphabet do\n\
    \      if letter == alphabet[j] then\n        index = j\n      end\n    end\n\
    \    if index == 0 then\n      table.insert(encrypted, letter)\n    else\n   \
    \   local new_index = index + (2 * 2)\n      if new_index > #alphabet then\n \
    \       new_index = new_index - #alphabet\n      end\n      table.insert(encrypted,\
    \ alphabet[new_index])\n    end\n  end\n  return table.concat(encrypted)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tlocal newIndex = index +\
    \ (2 * 2)\n\t\t\tif newIndex > #alphabet then\n\t\t\t\tnewIndex = newIndex - #alphabet\n\
    \t\t\tend\n\t\t\tencrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\t\
    \telse\n\t\t\tencrypted = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            result = result .. alphabet:sub(index,\
    \ index)\n        else\n            result = result .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            encrypted\
    \ = encrypted .. alphabet:sub((index + 2) % 26 + 1, (index + 2) % 26 + 1)\n  \
    \      else\n            encrypted = encrypted .. c\n        end\n    end\n  \
    \  return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaoijp986.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmpaoijp986.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            result\
    \ = result .. alphabet:sub((index + 2) % #alphabet + 1, (index + 2) % #alphabet\
    \ + 1)\n        else\n            result = result .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3899l6f3.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmp3899l6f3.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = (index + (2 * 2)) % #alphabet\n            result = result .. alphabet:sub(newIndex,\
    \ newIndex)\n        else\n            result = result .. c\n        end\n   \
    \ end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        encrypted = encrypted .. alphabet:sub(index\
    \ + 2, index + 2)\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptpi3g9au.lua:24:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmptpi3g9au.lua:24:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ (2 * 2)\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local new_alphabet = string.sub(alphabet, 3) .. string.sub(alphabet, 1, 2)\n\
    \  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s, i, i)\n \
    \   local index = string.find(alphabet, c)\n    if index then\n      new_s = new_s\
    \ .. string.sub(new_alphabet, index, index)\n    else\n      new_s = new_s ..\
    \ c\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp48l5_okw.lua:29:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmp48l5_okw.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            result\
    \ = result .. alphabet:sub(newIndex, newIndex)\n        else\n            result\
    \ = result .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tlocal newIndex = index +\
    \ 2 * 2\n\t\t\tif newIndex > #alphabet then\n\t\t\t\tnewIndex = newIndex - #alphabet\n\
    \t\t\tend\n\t\t\tencrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\t\
    \telse\n\t\t\tencrypted = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       encrypted = encrypted .. alphabet:sub((index + 2) % 26 + 1, (index + 2)\
    \ % 26 + 1)\n        else\n            encrypted = encrypted .. char\n       \
    \ end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnmmdbysb.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmpnmmdbysb.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            result\
    \ = result .. alphabet:sub(newIndex, newIndex)\n        else\n            result\
    \ = result .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    if index then\n      local newIndex\
    \ = index + 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex\
    \ - #alphabet\n      end\n      encrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n    else\n      encrypted = encrypted .. char\n    end\n  end\n \
    \ return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = (index + 2 * 2) % #alphabet\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tindex = index + 2 * 2\n\t\
    \t\tif index > #alphabet then\n\t\t\t\tindex = index - #alphabet\n\t\t\tend\n\t\
    \t\tencrypted = encrypted .. alphabet:sub(index,index)\n\t\telse\n\t\t\tencrypted\
    \ = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tindex = index + 2 * 2\n\t\
    \t\tif index > #alphabet then\n\t\t\t\tindex = index - #alphabet\n\t\t\tend\n\t\
    \t\tencrypted = encrypted .. alphabet:sub(index, index)\n\t\telse\n\t\t\tencrypted\
    \ = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal char = s:sub(i, i)\n\t\t\
    local index = alphabet:find(char)\n\t\tif index then\n\t\t\tlocal newIndex = index\
    \ + (2 * 2)\n\t\t\tif newIndex > #alphabet then\n\t\t\t\tnewIndex = newIndex -\
    \ #alphabet\n\t\t\tend\n\t\t\tencrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n\t\telse\n\t\t\tencrypted = encrypted .. char\n\t\tend\n\tend\n\t\
    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      index = index + 2 * 2\n \
    \     if index > #alphabet then\n        index = index - #alphabet\n      end\n\
    \      encrypted = encrypted .. alphabet:sub(index, index)\n    else\n      encrypted\
    \ = encrypted .. c\n    end\n  end\n  return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    if index then\n      local newIndex\
    \ = index + 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex\
    \ - #alphabet\n      end\n      encrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n    else\n      encrypted = encrypted .. char\n    end\n  end\n \
    \ return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            result = result .. alphabet:sub(index,\
    \ index)\n        else\n            result = result .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    if index then\n      local newIndex\
    \ = index + 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex\
    \ - #alphabet\n      end\n      encrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n    else\n      encrypted = encrypted .. char\n    end\n  end\n \
    \ return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    local newIndex = index + (2 * 2)\n \
    \   if newIndex > #alphabet then\n      newIndex = newIndex - #alphabet\n    end\n\
    \    encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n  end\n  return\
    \ encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            result\
    \ = result .. alphabet:sub(newIndex, newIndex)\n        else\n            result\
    \ = result .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    local newIndex = index + 2 * 2\n    if newIndex\
    \ > #alphabet then\n      newIndex = newIndex - #alphabet\n    end\n    encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    if index then\n      local newIndex\
    \ = index + (2 * 2)\n      if newIndex > #alphabet then\n        newIndex = newIndex\
    \ - #alphabet\n      end\n      encrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n    else\n      encrypted = encrypted .. char\n    end\n  end\n \
    \ return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      encrypted = encrypted ..\
    \ alphabet:sub((index + 2) % 26 + 1, (index + 2) % 26 + 1)\n    else\n      encrypted\
    \ = encrypted .. c\n    end\n  end\n  return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg58h0uu0.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmpg58h0uu0.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            encrypted\
    \ = encrypted .. alphabet:sub((index + 2) % 26 + 1, (index + 2) % 26 + 1)\n  \
    \      else\n            encrypted = encrypted .. c\n        end\n    end\n  \
    \  return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpipoil1vi.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmpipoil1vi.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local result = ''\n  for i = 1, #s do\n \
    \   local c = s:sub(i, i)\n    local n = c:byte()\n    if n >= 97 and n <= 122\
    \ then\n      n = n + 2 * 2\n      if n > 122 then\n        n = n - 26\n     \
    \ end\n    end\n    result = result .. string.char(n)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + 4\n            if newIndex > #alphabet then\n\
    \                newIndex = newIndex - #alphabet\n            end\n          \
    \  encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n \
    \           encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local new_alphabet = string.sub(alphabet, 3) .. string.sub(alphabet, 1, 2)\n\
    \    local new_s = ''\n    for i = 1, #s do\n        local c = string.sub(s, i,\
    \ i)\n        local index = string.find(alphabet, c)\n        if index then\n\
    \            new_s = new_s .. string.sub(new_alphabet, index, index)\n       \
    \ else\n            new_s = new_s .. c\n        end\n    end\n    return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp14ik4m7o.lua:29:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmp14ik4m7o.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tlocal newIndex = index +\
    \ 2 * 2\n\t\t\tif newIndex > #alphabet then\n\t\t\t\tnewIndex = newIndex - #alphabet\n\
    \t\t\tend\n\t\t\tc = alphabet:sub(newIndex, newIndex)\n\t\tend\n\t\tencrypted\
    \ = encrypted .. c\n\tend\n\treturn encrypted\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            encrypted\
    \ = encrypted .. alphabet:sub((index + 2) % 26 + 1, (index + 2) % 26 + 1)\n  \
    \      else\n            encrypted = encrypted .. c\n        end\n    end\n  \
    \  return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3tde1rrd.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmp3tde1rrd.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal result = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tresult = result .. alphabet:sub((index\
    \ + 2) % 26 + 1, (index + 2) % 26 + 1)\n\t\telse\n\t\t\tresult = result .. c\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwlvhue8u.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmpwlvhue8u.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    if index then\n      local newIndex\
    \ = index + (2 * 2)\n      if newIndex > #alphabet then\n        newIndex = newIndex\
    \ - #alphabet\n      end\n      encrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n    else\n      encrypted = encrypted .. char\n    end\n  end\n \
    \ return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local index = string.find(alphabet,\
    \ s:sub(i, i))\n        if index then\n            encrypted = encrypted .. alphabet:sub((index\
    \ + 4) % 26 + 1, (index + 4) % 26 + 1)\n        else\n            encrypted =\
    \ encrypted .. s:sub(i, i)\n        end\n    end\n    return encrypted\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj0czwlv5.lua:27:\
    \ expected: \"lm\"\\nactual: \"mn\"\\nstack traceback:\\n\\t/tmp/tmpj0czwlv5.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      encrypted = encrypted ..\
    \ alphabet:sub((index + 2) % 26 + 1, (index + 2) % 26 + 1)\n    else\n      encrypted\
    \ = encrypted .. c\n    end\n  end\n  return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2d4moct0.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmp2d4moct0.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      index = index + 2 * 2\n \
    \     if index > #alphabet then\n        index = index - #alphabet\n      end\n\
    \      encrypted = encrypted .. alphabet:sub(index, index)\n    else\n      encrypted\
    \ = encrypted .. c\n    end\n  end\n  return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal letter = s:sub(i, i)\n\t\
    \tlocal index = alphabet:find(letter)\n\t\tlocal newIndex = index + 2 * 2\n\t\t\
    if newIndex > #alphabet then\n\t\t\tnewIndex = newIndex - #alphabet\n\t\tend\n\
    \t\tencrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\tend\n\treturn\
    \ encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \tlocal s_table = {}\n\tlocal s_encrypted = {}\n\tlocal s_encrypted_string = ''\n\
    \tfor i = 1, #s do\n\t\ts_table[i] = string.sub(s, i, i)\n\tend\n\tfor i = 1,\
    \ #s_table do\n\t\tfor j = 1, #alphabet do\n\t\t\tif s_table[i] == alphabet[j]\
    \ then\n\t\t\t\ts_encrypted[i] = alphabet[j + 2]\n\t\t\tend\n\t\tend\n\tend\n\t\
    for i = 1, #s_encrypted do\n\t\ts_encrypted_string = s_encrypted_string .. s_encrypted[i]\n\
    \tend\n\treturn s_encrypted_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp938m5txe.lua:34:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmp938m5txe.lua:34:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local new_alphabet = 'cdefghijklmnopqrstuvwxyzab'\n  local new_string = ''\n\
    \  for i = 1, #s do\n    local char = s:sub(i, i)\n    local index = alphabet:find(char)\n\
    \    if index then\n      new_string = new_string .. new_alphabet:sub(index, index)\n\
    \    else\n      new_string = new_string .. char\n    end\n  end\n  return new_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5izgrb3a.lua:29:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmp5izgrb3a.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + (2 * 2)\n            if newIndex > #alphabet then\n     \
    \           newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + (2 * 2)\n            if newIndex > #alphabet\
    \ then\n                newIndex = newIndex - #alphabet\n            end\n   \
    \         encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n\
    \            encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = (index + (2 * 2)) % 26\n            encrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal new_alphabet = 'cdefghijklmnopqrstuvwxyzab'\n\tlocal new_string = ''\n\
    \tfor i = 1, #s do\n\t\tlocal letter = s:sub(i, i)\n\t\tlocal index = alphabet:find(letter)\n\
    \t\tif index then\n\t\t\tnew_string = new_string .. new_alphabet:sub(index, index)\n\
    \t\telse\n\t\t\tnew_string = new_string .. letter\n\t\tend\n\tend\n\treturn new_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpne55hlog.lua:29:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmpne55hlog.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local new_string = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local new_index = index + 4\n            if new_index > #alphabet then\n\
    \                new_index = new_index - #alphabet\n            end\n        \
    \    new_string = new_string .. alphabet:sub(new_index, new_index)\n        else\n\
    \            new_string = new_string .. char\n        end\n    end\n    return\
    \ new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + (2 * 2)\n            if newIndex > #alphabet\
    \ then\n                newIndex = newIndex - #alphabet\n            end\n   \
    \         encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n\
    \            encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local a = {}\n    for i = 1, #s do\n  \
    \      a[i] = string.char(string.byte(s, i) + 2 * 2)\n    end\n    return table.concat(a)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpweby_zo7.lua:25:\
    \ expected: \"jeiajeaijeiak\"\\nactual: \"jei{je{ijei{k\"\\nstack traceback:\\\
    n\\t/tmp/tmpweby_zo7.lua:25: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local a = {}\n    for i = 1, #s do\n  \
    \      local c = s:sub(i,i)\n        local b = string.byte(c)\n        if b >=\
    \ 97 and b <= 122 then\n            b = b + 2\n            if b > 122 then\n \
    \               b = b - 26\n            end\n        elseif b >= 65 and b <= 90\
    \ then\n            b = b + 2\n            if b > 90 then\n                b =\
    \ b - 26\n            end\n        end\n        a[#a+1] = string.char(b)\n   \
    \ end\n    return table.concat(a)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiowi7czo.lua:34:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmpiowi7czo.lua:34:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local s = s:lower()\n    local encrypted = ''\n    for i = 1, #s do\n   \
    \     local c = s:sub(i, i)\n        local index = alphabet:find(c)\n        if\
    \ index then\n            local newIndex = (index + 2 * 2) % #alphabet\n     \
    \       encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n\
    \            encrypted = encrypted .. c\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 4\n            if index > #alphabet then\n                index =\
    \ index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        local newIndex = index + 2 *\
    \ 2\n        if newIndex > #alphabet then\n            newIndex = newIndex - #alphabet\n\
    \        end\n        encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    local n = c:byte()\n    if n >= 97 and n <= 122 then\n\
    \      n = n + 4\n      if n > 122 then\n        n = n - 26\n      end\n    end\n\
    \    t[i] = string.char(n)\n  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  -- TODO: Implement\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbi3vldkv.lua:17:\
    \ expected: \"lm\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpbi3vldkv.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i,i)\n\
    \        local index = 0\n        for j = 1, #alphabet do\n            if c ==\
    \ alphabet[j] then\n                index = j\n                break\n       \
    \     end\n        end\n        if index == 0 then\n            encrypted = encrypted\
    \ .. c\n        else\n            local newIndex = index + (2 * 2)\n         \
    \   if newIndex > #alphabet then\n                newIndex = newIndex - #alphabet\n\
    \            end\n            encrypted = encrypted .. alphabet[newIndex]\n  \
    \      end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  return s:gsub('.', function(c)\n    local\
    \ c = c:byte()\n    if c >= 97 and c <= 122 then\n      return string.char((c\
    \ - 97 + 2 * 2) % 26 + 97)\n    elseif c >= 65 and c <= 90 then\n      return\
    \ string.char((c - 65 + 2 * 2) % 26 + 65)\n    else\n      return c\n    end\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      encrypted = encrypted ..\
    \ alphabet:sub((index + 2 * 2) % #alphabet + 1, (index + 2 * 2) % #alphabet +\
    \ 1)\n    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmj01rpnt.lua:28:\
    \ expected: \"lm\"\\nactual: \"mn\"\\nstack traceback:\\n\\t/tmp/tmpmj01rpnt.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local new_index = index + 4\n            if new_index > #alphabet then\n\
    \                new_index = new_index - #alphabet\n            end\n        \
    \    encrypted = encrypted .. alphabet:sub(new_index, new_index)\n        else\n\
    \            encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = (index + 2 * 2) % #alphabet\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            result\
    \ = result .. alphabet:sub(newIndex, newIndex)\n        else\n            result\
    \ = result .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            result\
    \ = result .. alphabet:sub((index + 2) % 26 + 1, (index + 2) % 26 + 1)\n     \
    \   else\n            result = result .. c\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxdlep83d.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmpxdlep83d.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tindex = index + 2 * 2\n\t\
    \t\tif index > #alphabet then\n\t\t\t\tindex = index - #alphabet\n\t\t\tend\n\t\
    \t\tencrypted = encrypted .. alphabet:sub(index,index)\n\t\telse\n\t\t\tencrypted\
    \ = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ 4\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       index = index + 2 * 2\n            if index > #alphabet then\n       \
    \         index = index - #alphabet\n            end\n            encrypted =\
    \ encrypted .. alphabet:sub(index, index)\n        else\n            encrypted\
    \ = encrypted .. char\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local encrypted = \"\"\n    for i = 1, #s do\n        local c = s:sub(i,i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,index)\n\
    \        else\n            encrypted = encrypted .. c\n        end\n    end\n\
    \    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = (index + 4) % 26\n            encrypted = encrypted ..\
    \ alphabet:sub(newIndex, newIndex)\n        else\n            encrypted = encrypted\
    \ .. char\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal s = s:lower()\n\tlocal t = {}\n\tlocal\
    \ e = {}\n\tlocal a = {}\n\tlocal b = {}\n\tlocal c = {}\n\tlocal d = {}\n\tlocal\
    \ f = {}\n\tlocal g = {}\n\tlocal h = {}\n\tlocal i = {}\n\tlocal j = {}\n\tlocal\
    \ k = {}\n\tlocal l = {}\n\tlocal m = {}\n\tlocal n = {}\n\tlocal o = {}\n\tlocal\
    \ p = {}\n\tlocal q = {}\n\tlocal r = {}\n\tlocal u = {}\n\tlocal v = {}\n\tlocal\
    \ w = {}\n\tlocal x = {}\n\tlocal y = {}\n\tlocal z = {}\n\tlocal space = {}\n\
    \tlocal exclamation = {}\n\tlocal question = {}\n\tlocal period = {}\n\tlocal\
    \ comma = {}\n\tlocal apostrophe = {}\n\tlocal colon = {}\n\tlocal semicolon =\
    \ {}\n\tlocal dash = {}\n\tlocal underscore = {}\n\tlocal left_paren = {}\n\t\
    local right_paren = {}\n\tlocal left_bracket = {}\n\tlocal right_bracket = {}\n\
    \tlocal left_brace = {}\n\tlocal right_brace = {}\n\tlocal at = {}\n\tlocal pound\
    \ = {}\n\tlocal dollar = {}\n\tlocal percent = {}\n\tlocal caret = {}\n\tlocal\
    \ ampersand = {}\n\tlocal asterisk = {}\n\tlocal plus = {}\n\tlocal equal = {}\n\
    \tlocal backslash = {}\n\tlocal bar = {}\n\tlocal tilde = {}\n\tlocal less_than\
    \ = {}\n\tlocal greater_than = {}\n\tlocal number_sign = {}\n\tlocal double_quote\
    \ = {}\n\tlocal single_quote = {}\n\tlocal backtick = {}\n\tlocal forward_slash\
    \ = {}\n\tlocal backspace = {}\n\tlocal tab = {}\n\tlocal newline = {}\n\tlocal\
    \ return_key = {}\n\tlocal escape = {}\n\tlocal delete = {}\n\tlocal insert =\
    \ {}\n\tlocal home = {}\n\tlocal end_key = {}\n\tlocal page_up = {}\n\tlocal page_down\
    \ = {}\n\tlocal up_arrow = {}\n\tlocal down_arrow = {}\n\tlocal left_arrow = {}\n\
    \tlocal right\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp90di5noz.lua:101: 'end' expected (to close 'function' at\
    \ line 10) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local new_alphabet = ''\n  local new_string = ''\n  for i = 1, #alphabet do\n\
    \    new_alphabet = new_alphabet .. alphabet:sub(i + 2, i + 2)\n  end\n  for i\
    \ = 1, #s do\n    local c = s:sub(i, i)\n    local index = alphabet:find(c)\n\
    \    new_string = new_string .. new_alphabet:sub(index, index)\n  end\n  return\
    \ new_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb2le5qc_.lua:28:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmpb2le5qc_.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n\
    \                newIndex = newIndex - #alphabet\n            end\n          \
    \  encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n \
    \           encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + (2 * 2)\n            if newIndex > #alphabet\
    \ then\n                newIndex = newIndex - #alphabet\n            end\n   \
    \         encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n\
    \            encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local newAlphabet = 'cdefghijklmnopqrstuvwxyzab'\n    local result = ''\n\
    \    for i = 1, #s do\n        local c = s:sub(i, i)\n        local index = alphabet:find(c)\n\
    \        if index then\n            result = result .. newAlphabet:sub(index,\
    \ index)\n        else\n            result = result .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjp7rqjui.lua:29:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmpjp7rqjui.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local new_alphabet = 'cdefghijklmnopqrstuvwxyzab'\n    local new_string =\
    \ ''\n    for i = 1, #s do\n        local letter = s:sub(i, i)\n        local\
    \ index = alphabet:find(letter)\n        if index then\n            new_string\
    \ = new_string .. new_alphabet:sub(index, index)\n        else\n            new_string\
    \ = new_string .. letter\n        end\n    end\n    return new_string\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4n5qts1k.lua:29:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmp4n5qts1k.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + (2 * 2)\n            if newIndex > #alphabet then\n     \
    \           newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + (2 * 2)\n            if newIndex > #alphabet\
    \ then\n                newIndex = newIndex - #alphabet\n            end\n   \
    \         encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n\
    \            encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local new_alphabet = string.sub(alphabet, 3) .. string.sub(alphabet, 1, 2)\n\
    \    local result = ''\n    for i = 1, #s do\n        local char = string.sub(s,\
    \ i, i)\n        local index = string.find(alphabet, char)\n        if index then\n\
    \            result = result .. string.sub(new_alphabet, index, index)\n     \
    \   else\n            result = result .. char\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0c00ws5b.lua:29:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmp0c00ws5b.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       encrypted = encrypted .. alphabet:sub((index + 2) % #alphabet + 1, (index\
    \ + 2) % #alphabet + 1)\n        else\n            encrypted = encrypted .. char\n\
    \        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmper69av2m.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmper69av2m.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    if index then\n      index = index +\
    \ 2 * 2\n      if index > #alphabet then\n        index = index - #alphabet\n\
    \      end\n      encrypted = encrypted .. alphabet:sub(index, index)\n    else\n\
    \      encrypted = encrypted .. char\n    end\n  end\n  return encrypted\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tencrypted = encrypted ..\
    \ alphabet:sub((index + 2) % #alphabet + 1, (index + 2) % #alphabet + 1)\n\t\t\
    else\n\t\t\tencrypted = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxu8u5qkr.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmpxu8u5qkr.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            result\
    \ = result .. alphabet:sub((index + 2) % 26 + 1, (index + 2) % 26 + 1)\n     \
    \   else\n            result = result .. c\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph9ja6vho.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmph9ja6vho.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = (index +\
    \ 2 * 2) % #alphabet\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tindex = index + 2 * 2\n\t\
    \t\tif index > #alphabet then\n\t\t\t\tindex = index - #alphabet\n\t\t\tend\n\t\
    \t\tencrypted = encrypted .. alphabet:sub(index,index)\n\t\telse\n\t\t\tencrypted\
    \ = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            result = result .. alphabet:sub(index,\
    \ index)\n        else\n            result = result .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n\
    \                newIndex = newIndex - #alphabet\n            end\n          \
    \  encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n \
    \           encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            result = result .. alphabet:sub(index,\
    \ index)\n        else\n            result = result .. c\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local new_alphabet = string.sub(alphabet, 3) .. string.sub(alphabet, 1, 2)\n\
    \    local new_s = ''\n    for i = 1, #s do\n        local c = string.sub(s, i,\
    \ i)\n        local index = string.find(alphabet, c)\n        if index then\n\
    \            new_s = new_s .. string.sub(new_alphabet, index, index)\n       \
    \ else\n            new_s = new_s .. c\n        end\n    end\n    return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpma82khi_.lua:29:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmpma82khi_.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      encrypted = encrypted ..\
    \ alphabet:sub((index + 2 * 2) % 26 + 1, (index + 2 * 2) % 26 + 1)\n    else\n\
    \      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmm5nfhkw.lua:28:\
    \ expected: \"lm\"\\nactual: \"mn\"\\nstack traceback:\\n\\t/tmp/tmpmm5nfhkw.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal char = s:sub(i, i)\n\t\t\
    local index = alphabet:find(char)\n\t\tif index then\n\t\t\tindex = index + 2\
    \ * 2\n\t\t\tif index > #alphabet then\n\t\t\t\tindex = index - #alphabet\n\t\t\
    \tend\n\t\t\tencrypted = encrypted .. alphabet:sub(index, index)\n\t\telse\n\t\
    \t\tencrypted = encrypted .. char\n\t\tend\n\tend\n\treturn encrypted\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n\
    \                newIndex = newIndex - #alphabet\n            end\n          \
    \  encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n \
    \           encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = (index + 2 * 2) % #alphabet\n            encrypted = encrypted ..\
    \ alphabet:sub(newIndex, newIndex)\n        else\n            encrypted = encrypted\
    \ .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n\
    \                newIndex = newIndex - #alphabet\n            end\n          \
    \  encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n \
    \           encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local newString = ''\n    for i = 1, #s do\n        local c = s:sub(i,i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            newString\
    \ = newString .. alphabet:sub(newIndex, newIndex)\n        else\n            newString\
    \ = newString .. c\n        end\n    end\n    return newString\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    if index then\n      local newIndex\
    \ = index + 4\n      if newIndex > #alphabet then\n        newIndex = newIndex\
    \ - #alphabet\n      end\n      encrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n    else\n      encrypted = encrypted .. char\n    end\n  end\n \
    \ return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    if index then\n      local newIndex\
    \ = index + (2 * 2)\n      if newIndex > #alphabet then\n        newIndex = newIndex\
    \ - #alphabet\n      end\n      encrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n    else\n      encrypted = encrypted .. char\n    end\n  end\n \
    \ return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n\
    \                newIndex = newIndex - #alphabet\n            end\n          \
    \  encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n \
    \           encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local result = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      result = result .. alphabet:sub(newIndex, newIndex)\n    else\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local newAlphabet = string.sub(alphabet, 3) .. string.sub(alphabet, 1, 2)\n\
    \    local newString = ''\n    for i = 1, #s do\n        local c = string.sub(s,\
    \ i, i)\n        local index = string.find(alphabet, c)\n        if index then\n\
    \            newString = newString .. string.sub(newAlphabet, index, index)\n\
    \        else\n            newString = newString .. c\n        end\n    end\n\
    \    return newString\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp45k5tjqd.lua:29:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmp45k5tjqd.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n\
    \                newIndex = newIndex - #alphabet\n            end\n          \
    \  encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n \
    \           encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tlocal newIndex = index +\
    \ 2 * 2\n\t\t\tif newIndex > #alphabet then\n\t\t\t\tnewIndex = newIndex - #alphabet\n\
    \t\t\tend\n\t\t\tencrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\t\
    \telse\n\t\t\tencrypted = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tlocal newIndex = index + (2 * 2)\n\t\tif newIndex\
    \ > #alphabet then\n\t\t\tnewIndex = newIndex - #alphabet\n\t\tend\n\t\tencrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n\tend\n\treturn encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tindex = index + 2 * 2\n\t\
    \t\tif index > #alphabet then\n\t\t\t\tindex = index - #alphabet\n\t\t\tend\n\t\
    \t\tencrypted = encrypted .. alphabet:sub(index,index)\n\t\telse\n\t\t\tencrypted\
    \ = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + (2 * 2)\n            if newIndex > #alphabet\
    \ then\n                newIndex = newIndex - #alphabet\n            end\n   \
    \         encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n\
    \            encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tindex = index + 2 * 2\n\t\
    \t\tif index > #alphabet then\n\t\t\t\tindex = index - #alphabet\n\t\t\tend\n\t\
    \t\tencrypted = encrypted .. alphabet:sub(index,index)\n\t\telse\n\t\t\tencrypted\
    \ = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            encrypted\
    \ = encrypted .. alphabet:sub((index + (2 * 2)) % 26 + 1, (index + (2 * 2)) %\
    \ 26 + 1)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp3cq7vpu.lua:28:\
    \ expected: \"lm\"\\nactual: \"mn\"\\nstack traceback:\\n\\t/tmp/tmpp3cq7vpu.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    local newIndex = index + 2 * 2\n   \
    \ if newIndex > #alphabet then\n      newIndex = newIndex - #alphabet\n    end\n\
    \    encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n  end\n  return\
    \ encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal new_alphabet = string.sub(alphabet, 3) .. string.sub(alphabet, 1, 2)\n\
    \tlocal new_s = ''\n\tfor i = 1, #s do\n\t\tlocal c = string.sub(s, i, i)\n\t\t\
    local index = string.find(alphabet, c)\n\t\tif index then\n\t\t\tnew_s = new_s\
    \ .. string.sub(new_alphabet, index, index)\n\t\telse\n\t\t\tnew_s = new_s ..\
    \ c\n\t\tend\n\tend\n\treturn new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcoa3dp_o.lua:29:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmpcoa3dp_o.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + (2 * 2)\n            if newIndex > #alphabet then\n     \
    \           newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    -- TODO: Implement this function\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjlq8lrsb.lua:17:\
    \ expected: \"lm\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpjlq8lrsb.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            encrypted\
    \ = encrypted .. alphabet:sub((index + 2) % #alphabet + 1, (index + 2) % #alphabet\
    \ + 1)\n        else\n            encrypted = encrypted .. c\n        end\n  \
    \  end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbaorhfas.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmpbaorhfas.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal char = s:sub(i, i)\n\t\t\
    local index = alphabet:find(char)\n\t\tif index then\n\t\t\tlocal newIndex = index\
    \ + 2 * 2\n\t\t\tif newIndex > #alphabet then\n\t\t\t\tnewIndex = newIndex - #alphabet\n\
    \t\t\tend\n\t\t\tencrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\t\
    \telse\n\t\t\tencrypted = encrypted .. char\n\t\tend\n\tend\n\treturn encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tlocal newIndex = index +\
    \ 2 * 2\n\t\t\tif newIndex > #alphabet then\n\t\t\t\tnewIndex = newIndex - #alphabet\n\
    \t\t\tend\n\t\t\tencrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\t\
    \telse\n\t\t\tencrypted = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            encrypted\
    \ = encrypted .. alphabet:sub((index + 2) % #alphabet + 1, (index + 2) % #alphabet\
    \ + 1)\n        else\n            encrypted = encrypted .. c\n        end\n  \
    \  end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp96a8y155.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmp96a8y155.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = (index + 2 * 2) % #alphabet\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tindex = index + 2 * 2\n\t\
    \t\tif index > #alphabet then\n\t\t\t\tindex = index - #alphabet\n\t\t\tend\n\t\
    \t\tencrypted = encrypted .. alphabet:sub(index,index)\n\t\telse\n\t\t\tencrypted\
    \ = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            encrypted\
    \ = encrypted .. alphabet:sub((index + 4) % 26 + 1, (index + 4) % 26 + 1)\n  \
    \      else\n            encrypted = encrypted .. c\n        end\n    end\n  \
    \  return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplkc8ex0u.lua:28:\
    \ expected: \"lm\"\\nactual: \"mn\"\\nstack traceback:\\n\\t/tmp/tmplkc8ex0u.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      encrypted = encrypted ..\
    \ alphabet:sub((index + (2 * 2)) % 26 + 1, (index + (2 * 2)) % 26 + 1)\n    else\n\
    \      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph_2gg2sv.lua:28:\
    \ expected: \"lm\"\\nactual: \"mn\"\\nstack traceback:\\n\\t/tmp/tmph_2gg2sv.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local t = {}\n    for i = 1, #s do\n  \
    \      local c = s:sub(i, i)\n        local n = string.byte(c)\n        if n >=\
    \ 97 and n <= 122 then\n            n = n + 2\n            if n > 122 then\n \
    \               n = n - 26\n            end\n        elseif n >= 65 and n <= 90\
    \ then\n            n = n + 2\n            if n > 90 then\n                n =\
    \ n - 26\n            end\n        end\n        t[i] = string.char(n)\n    end\n\
    \    return table.concat(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6lypemqw.lua:34:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmp6lypemqw.lua:34:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal char = s:sub(i, i)\n\t\t\
    local index = alphabet:find(char)\n\t\tif index then\n\t\t\tindex = index + 2\
    \ * 2\n\t\t\tif index > #alphabet then\n\t\t\t\tindex = index - #alphabet\n\t\t\
    \tend\n\t\t\tencrypted = encrypted .. alphabet:sub(index, index)\n\t\telse\n\t\
    \t\tencrypted = encrypted .. char\n\t\tend\n\tend\n\treturn encrypted\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local result = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ (2 * 2)\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      result = result .. alphabet:sub(newIndex, newIndex)\n    else\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local index = string.find(alphabet,\
    \ s:sub(i, i))\n    if index then\n      encrypted = encrypted .. alphabet:sub((index\
    \ + 2 * 2) % 26 + 1, (index + 2 * 2) % 26 + 1)\n    else\n      encrypted = encrypted\
    \ .. s:sub(i, i)\n    end\n  end\n  return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4ngnlc9f.lua:27:\
    \ expected: \"lm\"\\nactual: \"mn\"\\nstack traceback:\\n\\t/tmp/tmp4ngnlc9f.lua:27:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + (2 * 2)\n            if newIndex > #alphabet\
    \ then\n                newIndex = newIndex - #alphabet\n            end\n   \
    \         encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n\
    \            encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + (2 * 2)\n            if newIndex > #alphabet then\n     \
    \           newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local t = {}\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    local n = c:byte()\n    if n >= 97 and n <= 122 then\n\
    \      n = n + 4\n      if n > 122 then\n        n = n - 26\n      end\n    end\n\
    \    t[i] = string.char(n)\n  end\n  return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local newAlphabet = 'cdefghijklmnopqrstuvwxyzab'\n    local newString = ''\n\
    \    for i = 1, #s do\n        local c = s:sub(i,i)\n        local index = alphabet:find(c)\n\
    \        newString = newString .. newAlphabet:sub(index,index)\n    end\n    return\
    \ newString\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphge3l7ne.lua:25:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmphge3l7ne.lua:25:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = (index + 2 * 2) % #alphabet\n            encrypted = encrypted ..\
    \ alphabet:sub(newIndex, newIndex)\n        else\n            encrypted = encrypted\
    \ .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local index = string.find(alphabet,\
    \ s:sub(i, i))\n        if index then\n            encrypted = encrypted .. alphabet:sub((index\
    \ + 2 * 2) % #alphabet, (index + 2 * 2) % #alphabet)\n        else\n         \
    \   encrypted = encrypted .. s:sub(i, i)\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = index +\
    \ 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n\
    \                newIndex = newIndex - #alphabet\n            end\n          \
    \  encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n \
    \           encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      encrypted = encrypted ..\
    \ alphabet:sub((index + 2) % 26 + 1, (index + 2) % 26 + 1)\n    else\n      encrypted\
    \ = encrypted .. c\n    end\n  end\n  return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3_uxvam4.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmp3_uxvam4.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal char = s:sub(i, i)\n\t\t\
    local index = alphabet:find(char)\n\t\tif index then\n\t\t\tlocal newIndex = index\
    \ + (2 * 2)\n\t\t\tif newIndex > #alphabet then\n\t\t\t\tnewIndex = newIndex -\
    \ #alphabet\n\t\t\tend\n\t\t\tencrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n\t\telse\n\t\t\tencrypted = encrypted .. char\n\t\tend\n\tend\n\t\
    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local new_alphabet = string.sub(alphabet, 3) .. string.sub(alphabet, 1, 2)\n\
    \    local new_s = ''\n    for i = 1, #s do\n        local c = string.sub(s, i,\
    \ i)\n        local index = string.find(alphabet, c)\n        if index then\n\
    \            new_s = new_s .. string.sub(new_alphabet, index, index)\n       \
    \ else\n            new_s = new_s .. c\n        end\n    end\n    return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeh6zwq9p.lua:29:\
    \ expected: \"lm\"\\nactual: \"jk\"\\nstack traceback:\\n\\t/tmp/tmpeh6zwq9p.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = (index + (2 * 2)) % #alphabet\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. char\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      local newIndex = (index +\
    \ 2 * 2) % #alphabet\n      encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\
    \    else\n      encrypted = encrypted .. c\n    end\n  end\n  return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    if index then\n      local newIndex\
    \ = index + 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex\
    \ - #alphabet\n      end\n      encrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n    else\n      encrypted = encrypted .. char\n    end\n  end\n \
    \ return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = (index + 2 * 2) % 26\n            encrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    -- TODO: Implement this function\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmiruexop.lua:17:\
    \ expected: \"lm\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpmiruexop.lua:17:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    local newIndex = index + 2 * 2\n   \
    \ if newIndex > #alphabet then\n      newIndex = newIndex - #alphabet\n    end\n\
    \    encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n  end\n  return\
    \ encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n\
    \                newIndex = newIndex - #alphabet\n            end\n          \
    \  encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n \
    \           encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local result = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n    local\
    \ index = alphabet:find(char)\n    if index then\n      local newIndex = index\
    \ + 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex - #alphabet\n\
    \      end\n      result = result .. alphabet:sub(newIndex, newIndex)\n    else\n\
    \      result = result .. char\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            result\
    \ = result .. alphabet:sub(newIndex, newIndex)\n        else\n            result\
    \ = result .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       local newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n\
    \                newIndex = newIndex - #alphabet\n            end\n          \
    \  encrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n \
    \           encrypted = encrypted .. char\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ new_index = index + 2 * 2\n            if new_index > #alphabet then\n     \
    \           new_index = new_index - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(new_index, new_index)\n        else\n          \
    \  encrypted = encrypted .. c\n        end\n    end\n    return encrypted\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tlocal newIndex = index +\
    \ 2 * 2\n\t\t\tif newIndex > #alphabet then\n\t\t\t\tnewIndex = newIndex - #alphabet\n\
    \t\t\tend\n\t\t\tencrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\t\
    \telse\n\t\t\tencrypted = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal char = s:sub(i, i)\n\t\t\
    local index = alphabet:find(char)\n\t\tif index then\n\t\t\tindex = index + 2\
    \ * 2\n\t\t\tif index > #alphabet then\n\t\t\t\tindex = index - #alphabet\n\t\t\
    \tend\n\t\t\tencrypted = encrypted .. alphabet:sub(index, index)\n\t\telse\n\t\
    \t\tencrypted = encrypted .. char\n\t\tend\n\tend\n\treturn encrypted\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + (2 * 2)\n            if newIndex > #alphabet then\n     \
    \           newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            index\
    \ = index + 2 * 2\n            if index > #alphabet then\n                index\
    \ = index - #alphabet\n            end\n            encrypted = encrypted .. alphabet:sub(index,\
    \ index)\n        else\n            encrypted = encrypted .. c\n        end\n\
    \    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local letter = s:sub(i,i)\n\
    \        local index = table.indexOf(alphabet, letter)\n        if index then\n\
    \            local newIndex = index + (2 * 2)\n            if newIndex > #alphabet\
    \ then\n                newIndex = newIndex - #alphabet\n            end\n   \
    \         encrypted = encrypted .. alphabet[newIndex]\n        else\n        \
    \    encrypted = encrypted .. letter\n        end\n    end\n    return encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpegzlso35.lua:15:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpegzlso35.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpegzlso35.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            encrypted\
    \ = encrypted .. alphabet:sub(newIndex, newIndex)\n        else\n            encrypted\
    \ = encrypted .. c\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tlocal newIndex = index +\
    \ 2 * 2\n\t\t\tif newIndex > #alphabet then\n\t\t\t\tnewIndex = newIndex - #alphabet\n\
    \t\t\tend\n\t\t\tencrypted = encrypted .. alphabet:sub(newIndex, newIndex)\n\t\
    \telse\n\t\t\tencrypted = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n\tlocal alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \tlocal encrypted = ''\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tlocal\
    \ index = alphabet:find(c)\n\t\tif index then\n\t\t\tencrypted = encrypted ..\
    \ alphabet:sub((index + 2) % #alphabet + 1, (index + 2) % #alphabet + 1)\n\t\t\
    else\n\t\t\tencrypted = encrypted .. c\n\t\tend\n\tend\n\treturn encrypted\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
    \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ko0loez.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmp8ko0loez.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            encrypted\
    \ = encrypted .. alphabet:sub((index + 2 * 2) % #alphabet + 1, (index + 2 * 2)\
    \ % #alphabet + 1)\n        else\n            encrypted = encrypted .. c\n   \
    \     end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwcda96_j.lua:28:\
    \ expected: \"lm\"\\nactual: \"mn\"\\nstack traceback:\\n\\t/tmp/tmpwcda96_j.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       encrypted = encrypted .. alphabet:sub((index + 2 * 2) % #alphabet + 1,\
    \ (index + 2 * 2) % #alphabet + 1)\n        else\n            encrypted = encrypted\
    \ .. char\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptv3smo_f.lua:28:\
    \ expected: \"lm\"\\nactual: \"mn\"\\nstack traceback:\\n\\t/tmp/tmptv3smo_f.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local encrypted = ''\n    for i = 1, #s do\n        local char = s:sub(i,\
    \ i)\n        local index = alphabet:find(char)\n        if index then\n     \
    \       index = index + 2 * 2\n            if index > #alphabet then\n       \
    \         index = index - #alphabet\n            end\n            encrypted =\
    \ encrypted .. alphabet:sub(index, index)\n        else\n            encrypted\
    \ = encrypted .. char\n        end\n    end\n    return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local t = {}\n    for i = 1, #s do\n  \
    \      local c = s:sub(i, i)\n        local n = c:byte()\n        if n >= 97 and\
    \ n <= 122 then\n            n = n + 4\n            if n > 122 then\n        \
    \        n = n - 26\n            end\n        elseif n >= 65 and n <= 90 then\n\
    \            n = n + 4\n            if n > 90 then\n                n = n - 26\n\
    \            end\n        end\n        t[#t + 1] = string.char(n)\n    end\n \
    \   return table.concat(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local letter = s:sub(i, i)\n\
    \    local index = alphabet:find(letter)\n    if index then\n      local newIndex\
    \ = index + 2 * 2\n      if newIndex > #alphabet then\n        newIndex = newIndex\
    \ - #alphabet\n      end\n      encrypted = encrypted .. alphabet:sub(newIndex,\
    \ newIndex)\n    else\n      encrypted = encrypted .. letter\n    end\n  end\n\
    \  return encrypted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = encrypt\n    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
    \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
    \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n  \
    \  lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + (2 * 2)\n            if newIndex > #alphabet then\n     \
    \           newIndex = newIndex - #alphabet\n            end\n            result\
    \ = result .. alphabet:sub(newIndex, newIndex)\n        else\n            result\
    \ = result .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local char = s:sub(i, i)\n  \
    \  local index = alphabet:find(char)\n    encrypted = encrypted .. alphabet:sub(index\
    \ + 4, index + 4)\n  end\n  return encrypted\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0h5sqea5.lua:28:\
    \ expected: \"jeiajeaijeiak\"\\nactual: \"jeijeijeik\"\\nstack traceback:\\n\\\
    t/tmp/tmp0h5sqea5.lua:28: in function \\'test_humaneval\\'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local result = ''\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        if index then\n            local\
    \ newIndex = index + 2 * 2\n            if newIndex > #alphabet then\n       \
    \         newIndex = newIndex - #alphabet\n            end\n            result\
    \ = result .. alphabet:sub(newIndex, newIndex)\n        else\n            result\
    \ = result .. c\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Create a function encrypt that takes a string as an argument and\n\
    -- returns a string encrypted with the alphabet being rotated. \n-- The alphabet\
    \ should be rotated in a manner such that the letters \n-- shift down by two multiplied\
    \ to two places.\n-- For example:\n-- encrypt('hi') returns 'lm'\n-- encrypt('asdfghjkl')\
    \ returns 'ewhjklnop'\n-- encrypt('gf') returns 'kj'\n-- encrypt('et') returns\
    \ 'ix'\nlocal function encrypt(s)\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local encrypted = ''\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    local\
    \ index = alphabet:find(c)\n    if index then\n      encrypted = encrypted ..\
    \ alphabet:sub((index + 2) % 26 + 1, (index + 2) % 26 + 1)\n    else\n      encrypted\
    \ = encrypted .. c\n    end\n  end\n  return encrypted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = encrypt\n    lu.assertEquals(candidate('hi'),\
    \ 'lm')\n    lu.assertEquals(candidate('asdfghjkl'), 'ewhjklnop')\n    lu.assertEquals(candidate('gf'),\
    \ 'kj')\n    lu.assertEquals(candidate('et'), 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'),\
    \ 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'), 'lippsqcjvmirh')\n\
    \    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
    \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
    \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6_6qylak.lua:28:\
    \ expected: \"lm\"\\nactual: \"kl\"\\nstack traceback:\\n\\t/tmp/tmp6_6qylak.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
