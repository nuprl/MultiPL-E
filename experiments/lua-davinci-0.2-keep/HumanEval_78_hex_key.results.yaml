name: HumanEval_78_hex_key
language: lua
results:
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {\n        ['2'] = true,\n        ['3'] = true,\n        ['5']\
    \ = true,\n        ['7'] = true,\n        ['B'] = true,\n        ['D'] = true,\n\
    \    }\n    local count = 0\n    for i = 1, #num do\n        if primes[num:sub(i,\
    \ i)] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_3dme1va.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp_3dme1va.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"\
    ] = 3, [\"4\"] = 4, [\"5\"] = 5,\n        [\"6\"] = 6, [\"7\"] = 7, [\"8\"] =\
    \ 8, [\"9\"] = 9, [\"A\"] = 10, [\"B\"] = 11,\n        [\"C\"] = 12, [\"D\"] =\
    \ 13, [\"E\"] = 14, [\"F\"] = 15\n    }\n    return hex_key[num]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgmuj5gls.lua:29:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpgmuj5gls.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp20zybfs2.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp20zybfs2.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx_ilar4h.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpx_ilar4h.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjg502v4y.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpjg502v4y.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph6uefn_t.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmph6uefn_t.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_digits = {\n        ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3,\
    \ ['4'] = 4,\n        ['5'] = 5, ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9,\n\
    \        ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15\n\
    \    }\n    local count = 0\n    for i = 1, #num do\n        local digit = num:sub(i,\
    \ i)\n        if hex_digits[digit] == 2 or hex_digits[digit] == 3 or hex_digits[digit]\
    \ == 5 or hex_digits[digit] == 7 or hex_digits[digit] == 11 or hex_digits[digit]\
    \ == 13 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptfhtwppk.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmptfhtwppk.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0jegqzkg.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp0jegqzkg.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"\
    ] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n   \
    \     [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"\
    ] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   local n = 0\n    for i = 1, #num do\n        n = n * 16 + hex[num:sub(i, i)]\n\
    \    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2ji3z940.lua:46:\
    \ expected: 1, actual: 171\\nstack traceback:\\n\\t/tmp/tmp2ji3z940.lua:46: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"\
    ] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n   \
    \     [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"\
    ] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   local primes = {\n        [2] = true,\n        [3] = true,\n        [5] =\
    \ true,\n        [7] = true,\n        [11] = true,\n        [13] = true\n    }\n\
    \    local count = 0\n    for i = 1, #num do\n        if primes[hex[num:sub(i,\
    \ i)]] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex_digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    local\
    \ hex_digits_map = {}\n    for i, v in ipairs(hex_digits) do\n        hex_digits_map[v]\
    \ = i\n    end\n    local function is_prime(n)\n        for _, v in ipairs(primes)\
    \ do\n            if n == v then\n                return true\n            end\n\
    \        end\n        return false\n    end\n    local function count_primes(num)\n\
    \        local count = 0\n        for i = 1, #num do\n            local digit\
    \ = num:sub(i, i)\n            if is_prime(hex_digits_map[digit]) then\n     \
    \           count = count + 1\n            end\n        end\n        return count\n\
    \    end\n    return count_primes(num)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpij7k7qpo.lua:49:\
    \ expected: 2, actual: 1\\nstack traceback:\\n\\t/tmp/tmpij7k7qpo.lua:49: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpokw9buen.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpokw9buen.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex_digits = {\n        ['0']\
    \ = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4,\n        ['5'] = 5, ['6'] =\
    \ 6, ['7'] = 7, ['8'] = 8, ['9'] = 9,\n        ['A'] = 10, ['B'] = 11, ['C'] =\
    \ 12, ['D'] = 13, ['E'] = 14, ['F'] = 15\n    }\n    local count = 0\n    for\
    \ i = 1, #num do\n        if hex_digits[num:sub(i, i)] == primes[hex_digits[num:sub(i,\
    \ i)]] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprmb0v2b9.lua:36:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmprmb0v2b9.lua:36: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy2clh6xc.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpy2clh6xc.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9ifobs9z.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp9ifobs9z.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [0] = true,\n    [1] = true,\n    [2] = true,\n    [3]\
    \ = true,\n    [4] = true,\n    [5] = true,\n    [6] = true,\n    [7] = true,\n\
    \    [8] = true,\n    [9] = true,\n    [\"A\"] = true,\n    [\"B\"] = true,\n\
    \    [\"C\"] = true,\n    [\"D\"] = true,\n    [\"E\"] = true,\n    [\"F\"] =\
    \ true\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpir8fqvuk.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpir8fqvuk.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpatndkrgp.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpatndkrgp.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {\n        [0] = false,\n        [1] = false,\n        [2]\
    \ = true,\n        [3] = true,\n        [4] = false,\n        [5] = true,\n  \
    \      [6] = false,\n        [7] = true,\n        [8] = false,\n        [9] =\
    \ false,\n        [10] = false,\n        [11] = true,\n        [12] = false,\n\
    \        [13] = true,\n        [14] = false,\n        [15] = false,\n    }\n \
    \   local hex = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2'] = 2,\n\
    \        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6'] = 6,\n\
    \        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A'] = 10,\n\
    \        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n        ['E']\
    \ = 14,\n        ['F'] = 15,\n    }\n    local count = 0\n    for i = 1, #num\
    \ do\n        if primes[hex[num:sub(i, i)]] then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw6tdcipg.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpw6tdcipg.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {\n        [2] = true,\n        [3] = true,\n        [5] =\
    \ true,\n        [7] = true,\n        [11] = true,\n        [13] = true,\n   \
    \ }\n    local count = 0\n    for i = 1, #num do\n        local digit = tonumber(num:sub(i,\
    \ i), 16)\n        if primes[digit] then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_digits = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    local hex_primes = {\n      \
    \  [2] = true,\n        [3] = true,\n        [5] = true,\n        [7] = true,\n\
    \        [11] = true,\n        [13] = true,\n    }\n    local count = 0\n    for\
    \ i = 1, #num do\n        if hex_primes[hex_digits[num:sub(i, i)]] then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr7x7hmi5.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpr7x7hmi5.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n    [\"\
    3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"7\"] =\
    \ 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"] = 11,\n\
    \    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"] = 15\n \
    \ }\n  return key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk55l96rt.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpk55l96rt.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgndjvpzc.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpgndjvpzc.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex = {'0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    local count\
    \ = 0\n    for i = 1, #num do\n        for j = 1, #hex do\n            if num:sub(i,\
    \ i) == hex[j] then\n                for k = 1, #primes do\n                 \
    \   if j == primes[k] then\n                        count = count + 1\n      \
    \              end\n                end\n            end\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnsxqvall.lua:39:\
    \ expected: 2, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnsxqvall.lua:39: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdgvdxgni.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpdgvdxgni.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl3lbb24h.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpl3lbb24h.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp106rx94w.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp106rx94w.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvfclbken.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpvfclbken.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt3pnaig1.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpt3pnaig1.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex = {0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    local hex_key = {}\n    for i = 1, #hex\
    \ do\n        hex_key[hex[i]] = primes[i]\n    end\n    return hex_key\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpohxefbwt.lua:30:\
    \ expected: 1, actual: {0=2, 3, 5, 7, 11, 13}\\nstack traceback:\\n\\t/tmp/tmpohxefbwt.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex = {0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    local hex_key = {}\n    for i = 1, #hex\
    \ do\n        hex_key[hex[i]] = primes[i]\n    end\n    return hex_key\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpailbaust.lua:30:\
    \ expected: 1, actual: {0=2, 3, 5, 7, 11, 13}\\nstack traceback:\\n\\t/tmp/tmpailbaust.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl2uc8ycj.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpl2uc8ycj.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex_digits = {0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    local hex_keys = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    local\
    \ hex_dict = {}\n    for i = 1, #hex_digits do\n        hex_dict[hex_keys[i]]\
    \ = hex_digits[i]\n    end\n    local count = 0\n    for i = 1, #num do\n    \
    \    for j = 1, #primes do\n            if hex_dict[num:sub(i, i)] == primes[j]\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex_digits = {0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    local hex_digits_str = {'0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n\
    \    local hex_digits_map = {}\n    for i = 1, #hex_digits do\n        hex_digits_map[hex_digits_str[i]]\
    \ = hex_digits[i]\n    end\n    local count = 0\n    for i = 1, #num do\n    \
    \    local digit = hex_digits_map[num:sub(i, i)]\n        for j = 1, #primes do\n\
    \            if digit == primes[j] then\n                count = count + 1\n \
    \               break\n            end\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphl47xar8.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmphl47xar8.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv64b48cn.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpv64b48cn.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo0f4p4pt.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpo0f4p4pt.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz_gui3xe.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpz_gui3xe.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppeh9rl56.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmppeh9rl56.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp39i23q6g.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp39i23q6g.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_digits = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    local primes = {\n        [2]\
    \ = true,\n        [3] = true,\n        [5] = true,\n        [7] = true,\n   \
    \     [11] = true,\n        [13] = true,\n    }\n    local count = 0\n    for\
    \ i = 1, #num do\n        if primes[hex_digits[num:sub(i, i)]] then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2uur8w_t.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp2uur8w_t.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkbangian.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpkbangian.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_primes = {\n        ['2'] = true,\n        ['3'] = true,\n    \
    \    ['5'] = true,\n        ['7'] = true,\n        ['B'] = true,\n        ['D']\
    \ = true,\n    }\n    local count = 0\n    for i = 1, #num do\n        if hex_primes[num:sub(i,\
    \ i)] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {[2]=true,[3]=true,[5]=true,[7]=true,[11]=true,[13]=true}\n\
    \  local count = 0\n  for i = 1, #num do\n    local n = tonumber(num:sub(i,i),\
    \ 16)\n    if primes[n] then count = count + 1 end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local t = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2'] = 2,\n\
    \        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6'] = 6,\n\
    \        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A'] = 10,\n\
    \        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n        ['E']\
    \ = 14,\n        ['F'] = 15,\n    }\n    local res = 0\n    for i = 1, #num do\n\
    \        res = res * 16 + t[num:sub(i, i)]\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfmglz19a.lua:46:\
    \ expected: 1, actual: 171\\nstack traceback:\\n\\t/tmp/tmpfmglz19a.lua:46: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_digits = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    local primes = {\n        [2]\
    \ = true,\n        [3] = true,\n        [5] = true,\n        [7] = true,\n   \
    \     [11] = true,\n        [13] = true,\n    }\n    local count = 0\n    for\
    \ i = 1, #num do\n        if primes[hex_digits[num:sub(i, i)]] then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_primes = {\n        [\"2\"] = true,\n        [\"3\"] = true,\n\
    \        [\"5\"] = true,\n        [\"7\"] = true,\n        [\"B\"] = true,\n \
    \       [\"D\"] = true,\n    }\n    local count = 0\n    for i = 1, #num do\n\
    \        if hex_primes[num:sub(i, i)] then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxcvdpddn.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpxcvdpddn.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9goku6f9.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp9goku6f9.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7oq1prkd.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp7oq1prkd.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = true,\n        ['1'] = true,\n       \
    \ ['2'] = true,\n        ['3'] = true,\n        ['4'] = true,\n        ['5'] =\
    \ true,\n        ['6'] = true,\n        ['7'] = true,\n        ['8'] = true,\n\
    \        ['9'] = true,\n        ['A'] = true,\n        ['B'] = true,\n       \
    \ ['C'] = true,\n        ['D'] = true,\n        ['E'] = true,\n        ['F'] =\
    \ true,\n    }\n    local count = 0\n    for i = 1, #num do\n        if hex_key[num:sub(i,\
    \ i)] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkp8ofbry.lua:48:\
    \ expected: 1, actual: 2\\nstack traceback:\\n\\t/tmp/tmpkp8ofbry.lua:48: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjduhx16p.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpjduhx16p.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15\n    }\n    return hex_key[num]\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqv3p0cnk.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpqv3p0cnk.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7htuh77d.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp7htuh77d.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjfagtz5i.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpjfagtz5i.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex = {0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    local hex_key = {}\n    for i = 1, #hex\
    \ do\n        hex_key[string.format(\"%X\", hex[i])] = primes[i]\n    end\n  \
    \  return hex_key\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpprvt3dph.lua:30:\
    \ expected: 1, actual: {\"0\"=2, \"1\"=3, \"2\"=5, \"3\"=7, \"4\"=11, \"5\"=13}\\\
    nstack traceback:\\n\\t/tmp/tmpprvt3dph.lua:30: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpikshaozw.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpikshaozw.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvwaik5a4.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpvwaik5a4.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {\n        ['2'] = true,\n        ['3'] = true,\n        ['5']\
    \ = true,\n        ['7'] = true,\n        ['B'] = true,\n        ['D'] = true,\n\
    \    }\n    local count = 0\n    for i = 1, #num do\n        if primes[num:sub(i,\
    \ i)] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmply_bpyl8.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmply_bpyl8.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp688_uz6.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpp688_uz6.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplra6jixb.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmplra6jixb.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex_digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    local\
    \ hex_to_dec = {}\n    for i, v in ipairs(hex_digits) do\n        hex_to_dec[v]\
    \ = i\n    end\n    local count = 0\n    for i = 1, #num do\n        local digit\
    \ = num:sub(i, i)\n        for _, v in ipairs(primes) do\n            if v ==\
    \ hex_to_dec[digit] then\n                count = count + 1\n            end\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv4zg5t16.lua:40:\
    \ expected: 2, actual: 1\\nstack traceback:\\n\\t/tmp/tmpv4zg5t16.lua:40: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt9fzvnk_.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpt9fzvnk_.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw3jimzkp.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpw3jimzkp.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {\n        ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4']\
    \ = 4,\n        ['5'] = 5, ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9,\n     \
    \   ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15\n \
    \   }\n    local primes = {2, 3, 5, 7, 11, 13}\n    local count = 0\n    for i\
    \ = 1, #num do\n        for j = 1, #primes do\n            if hex[num:sub(i, i)]\
    \ == primes[j] then\n                count = count + 1\n            end\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local t = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"]\
    \ = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n   \
    \     [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"\
    ] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15,\n    }\n\
    \    return t[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcj3gs7jv.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpcj3gs7jv.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3,\
    \ [\"4\"] = 4, [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9,\n\
    \    [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"E\"] = 14, [\"\
    F\"] = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpivm0l6at.lua:28:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpivm0l6at.lua:28: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa15uowxt.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpa15uowxt.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {\n    ['2'] = true,\n    ['3'] = true,\n    ['5'] = true,\n\
    \    ['7'] = true,\n    ['B'] = true,\n    ['D'] = true\n  }\n  local count =\
    \ 0\n  for i = 1, #num do\n    if primes[num:sub(i, i)] then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp35nox4e1.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp35nox4e1.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"\
    ] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n   \
    \     [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"\
    ] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   local primes = {\n        [2] = true,\n        [3] = true,\n        [5] =\
    \ true,\n        [7] = true,\n        [11] = true,\n        [13] = true\n    }\n\
    \    local count = 0\n    for i = 1, #num do\n        if primes[hex[num:sub(i,\
    \ i)]] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoo2kkm1j.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpoo2kkm1j.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplx25jlsq.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmplx25jlsq.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {\n    ['2'] = true,\n    ['3'] = true,\n    ['5'] = true,\n\
    \    ['7'] = true,\n    ['B'] = true,\n    ['D'] = true\n  }\n  local count =\
    \ 0\n  for i = 1, #num do\n    if primes[num:sub(i, i)] then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local primes = {2, 3, 5, 7, 11, 13}\n  local hex = {A = 10, B = 11, C = 12,\
    \ D = 13, E = 14, F = 15}\n  local count = 0\n  for i = 1, #num do\n    local\
    \ n = tonumber(num:sub(i, i)) or hex[num:sub(i, i)]\n    for j = 1, #primes do\n\
    \      if n == primes[j] then\n        count = count + 1\n        break\n    \
    \  end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyvpndc6h.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpyvpndc6h.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5btm558y.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp5btm558y.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0hjfsyw6.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp0hjfsyw6.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxjeb7uqb.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpxjeb7uqb.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"\
    ] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n   \
    \     [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"\
    ] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   local count = 0\n    for i = 1, #num do\n        local n = hex[num:sub(i,\
    \ i)]\n        if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyi_xxcbv.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpyi_xxcbv.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp01knj3jw.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp01knj3jw.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"\
    ] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n   \
    \     [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"\
    ] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   local primes = {\n        [2] = true,\n        [3] = true,\n        [5] =\
    \ true,\n        [7] = true,\n        [11] = true,\n        [13] = true\n    }\n\
    \    local count = 0\n    for i = 1, #num do\n        if primes[hex[num:sub(i,\
    \ i)]] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7fjq9ceu.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp7fjq9ceu.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_primes = {\n        [\"2\"] = true,\n        [\"3\"] = true,\n\
    \        [\"5\"] = true,\n        [\"7\"] = true,\n        [\"B\"] = true,\n \
    \       [\"D\"] = true,\n    }\n    local count = 0\n    for i = 1, #num do\n\
    \        if hex_primes[num:sub(i, i)] then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"\
    ] = 3, [\"4\"] = 4, [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"\
    ] = 9,\n        [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"E\"\
    ] = 14, [\"F\"] = 15\n    }\n    return hex_key[num]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpupv_zq4n.lua:28:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpupv_zq4n.lua:28: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr3tap_6h.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpr3tap_6h.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmz68sbl8.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpmz68sbl8.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmping3p7vd.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmping3p7vd.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {\n        ['2'] = true,\n        ['3'] = true,\n        ['5']\
    \ = true,\n        ['7'] = true,\n        ['B'] = true,\n        ['D'] = true,\n\
    \    }\n    local count = 0\n    for i = 1, #num do\n        if primes[num:sub(i,\
    \ i)] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {\n        [2] = true,\n        [3] = true,\n        [5] =\
    \ true,\n        [7] = true,\n        [11] = true,\n        [13] = true,\n   \
    \ }\n    local count = 0\n    for i = 1, #num do\n        local c = num:sub(i,\
    \ i)\n        local n = tonumber(c, 16)\n        if primes[n] then\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex = {A = 10, B = 11, C =\
    \ 12, D = 13, E = 14, F = 15}\n    local count = 0\n    for i = 1, #num do\n \
    \       local n = tonumber(num:sub(i, i)) or hex[num:sub(i, i)]\n        for j\
    \ = 1, #primes do\n            if n == primes[j] then\n                count =\
    \ count + 1\n                break\n            end\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdl0esoue.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpdl0esoue.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg2l4x9m2.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpg2l4x9m2.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"\
    ] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n   \
    \     [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"\
    ] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   local primes = {2, 3, 5, 7, 11, 13}\n    local count = 0\n    for i = 1, #num\
    \ do\n        if hex[num:sub(i, i)] % 2 ~= 0 and hex[num:sub(i, i)] % 3 ~= 0 and\
    \ hex[num:sub(i, i)] % 5 ~= 0 and hex[num:sub(i, i)] % 7 ~= 0 and hex[num:sub(i,\
    \ i)] % 11 ~= 0 and hex[num:sub(i, i)] % 13 ~= 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcw8uvajn.lua:49:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpcw8uvajn.lua:49: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa0cvr8vd.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpa0cvr8vd.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk656s_7s.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpk656s_7s.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex_digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    local\
    \ hex_prime_key = {}\n    for i = 1, #hex_digits do\n        hex_prime_key[hex_digits[i]]\
    \ = false\n    end\n    for i = 1, #primes do\n        hex_prime_key[tostring(primes[i])]\
    \ = true\n    end\n    hex_prime_key['A'] = true\n    hex_prime_key['B'] = true\n\
    \    hex_prime_key['D'] = true\n    return hex_prime_key\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqp38i1v5.lua:36:\
    \ expected: 1, actual: {\\n    \"0\"=false,\\n    \"1\"=false,\\n    \"11\"=true,\\\
    n    \"13\"=true,\\n    \"2\"=true,\\n    \"3\"=true,\\n    \"4\"=false,\\n  \
    \  \"5\"=true,\\n    \"6\"=false,\\n    \"7\"=true,\\n    \"8\"=false,\\n    \"\
    9\"=false,\\n    A=true,\\n    B=true,\\n    C=false,\\n    D=true,\\n    E=false,\\\
    n    F=false\\n}\\nstack traceback:\\n\\t/tmp/tmpqp38i1v5.lua:36: in function\
    \ \\'test_humaneval\\'\\n\\nRan 1 tests in 0.003 seconds, 0 successes, 1 failure\\\
    n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmnl32var.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpmnl32var.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp15q0wlmd.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp15q0wlmd.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {\n        [0] = false,\n        [1] = false,\n        [2]\
    \ = true,\n        [3] = true,\n        [4] = false,\n        [5] = true,\n  \
    \      [6] = false,\n        [7] = true,\n        [8] = false,\n        [9] =\
    \ false,\n        [10] = false,\n        [11] = true,\n        [12] = false,\n\
    \        [13] = true,\n        [14] = false,\n        [15] = false,\n    }\n \
    \   local count = 0\n    for i = 1, #num do\n        local c = string.sub(num,\
    \ i, i)\n        if c == 'A' then\n            if primes[10] then\n          \
    \      count = count + 1\n            end\n        elseif c == 'B' then\n    \
    \        if primes[11] then\n                count = count + 1\n            end\n\
    \        elseif c == 'C' then\n            if primes[12] then\n              \
    \  count = count + 1\n            end\n        elseif c == 'D' then\n        \
    \    if primes[13] then\n                count = count + 1\n            end\n\
    \        elseif c == 'E' then\n            if primes[14] then\n              \
    \  count = count + 1\n            end\n        elseif c == 'F' then\n        \
    \    if primes[15] then\n                count = count + 1\n            end\n\
    \        else\n            if primes[tonumber(c)] then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex = {A = 10, B = 11, C =\
    \ 12, D = 13, E = 14, F = 15}\n    local count = 0\n    for i = 1, #num do\n \
    \       local n = tonumber(num:sub(i, i)) or hex[num:sub(i, i)]\n        for _,\
    \ v in ipairs(primes) do\n            if v == n then\n                count =\
    \ count + 1\n                break\n            end\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_oxh6u9r.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp_oxh6u9r.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg65q7jzs.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpg65q7jzs.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8zt9t871.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp8zt9t871.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpckusuo8k.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpckusuo8k.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {\n        [0] = false,\n        [1] = false,\n        [2]\
    \ = true,\n        [3] = true,\n        [4] = false,\n        [5] = true,\n  \
    \      [6] = false,\n        [7] = true,\n        [8] = false,\n        [9] =\
    \ false,\n        [10] = false,\n        [11] = true,\n        [12] = false,\n\
    \        [13] = true,\n        [14] = false,\n        [15] = false,\n    }\n \
    \   local count = 0\n    for i = 1, #num do\n        local c = string.sub(num,\
    \ i, i)\n        local n = tonumber(c, 16)\n        if primes[n] then\n      \
    \      count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiorwkoqf.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpiorwkoqf.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_primes = {\n        ['2'] = true,\n        ['3'] = true,\n    \
    \    ['5'] = true,\n        ['7'] = true,\n        ['B'] = true,\n        ['D']\
    \ = true,\n    }\n    local count = 0\n    for i = 1, #num do\n        if hex_primes[num:sub(i,\
    \ i)] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb_hjdaky.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpb_hjdaky.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp64xex307.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp64xex307.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptdfcuoje.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmptdfcuoje.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8pqxcerf.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp8pqxcerf.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    ['0'] = 0,\n    ['1'] = 1,\n    ['2'] = 2,\n    ['3']\
    \ = 3,\n    ['4'] = 4,\n    ['5'] = 5,\n    ['6'] = 6,\n    ['7'] = 7,\n    ['8']\
    \ = 8,\n    ['9'] = 9,\n    ['A'] = 10,\n    ['B'] = 11,\n    ['C'] = 12,\n  \
    \  ['D'] = 13,\n    ['E'] = 14,\n    ['F'] = 15\n  }\n  return hex_key[num]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp00lv7umj.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp00lv7umj.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_primes = {\n        ['2'] = true,\n        ['3'] = true,\n    \
    \    ['5'] = true,\n        ['7'] = true,\n        ['B'] = true,\n        ['D']\
    \ = true,\n    }\n    local count = 0\n    for i = 1, #num do\n        if hex_primes[num:sub(i,\
    \ i)] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex_digits = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    local\
    \ hex_primes = {}\n    for i, v in ipairs(hex_digits) do\n        if primes[i]\
    \ then\n            hex_primes[v] = true\n        end\n    end\n    local count\
    \ = 0\n    for i = 1, #num do\n        if hex_primes[num:sub(i, i)] then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphmsbzvjp.lua:38:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmphmsbzvjp.lua:38: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2xtw7hlf.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp2xtw7hlf.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3,\
    \ [\"4\"] = 4,\n    [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"\
    ] = 9,\n    [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"E\"] =\
    \ 14, [\"F\"] = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfvhi4f2l.lua:29:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpfvhi4f2l.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0n8acbtq.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp0n8acbtq.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkjk761_9.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpkjk761_9.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {\n        ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4']\
    \ = 4, ['5'] = 5,\n        ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9, ['A'] =\
    \ 10, ['B'] = 11,\n        ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F'] = 15\n  \
    \  }\n    local count = 0\n    for i = 1, #num do\n        if hex[num:sub(i, i)]\
    \ == 2 or hex[num:sub(i, i)] == 3 or\n            hex[num:sub(i, i)] == 5 or hex[num:sub(i,\
    \ i)] == 7 or\n            hex[num:sub(i, i)] == 11 or hex[num:sub(i, i)] == 13\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq6vuwcrz.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpq6vuwcrz.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex_digits = {0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    local hex_digits_str = {'0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n\
    \    local hex_digits_str_upper = {'0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    local count = 0\n    for i = 1, #num\
    \ do\n        for j = 1, #hex_digits_str do\n            if num:sub(i, i) == hex_digits_str[j]\
    \ then\n                for k = 1, #primes do\n                    if hex_digits[j]\
    \ == primes[k] then\n                        count = count + 1\n             \
    \       end\n                end\n            end\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_ox5dn6t.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp_ox5dn6t.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = true,\n    [\"1\"] = true,\n    [\"2\"] =\
    \ true,\n    [\"3\"] = true,\n    [\"4\"] = true,\n    [\"5\"] = true,\n    [\"\
    6\"] = true,\n    [\"7\"] = true,\n    [\"8\"] = true,\n    [\"9\"] = true,\n\
    \    [\"A\"] = true,\n    [\"B\"] = true,\n    [\"C\"] = true,\n    [\"D\"] =\
    \ true,\n    [\"E\"] = true,\n    [\"F\"] = true\n  }\n  return hex_key[num]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu3b5vdjq.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpu3b5vdjq.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo0iy7v66.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpo0iy7v66.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdo8w7k2p.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpdo8w7k2p.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpudiuet3p.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpudiuet3p.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1b610isa.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp1b610isa.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3,\
    \ [\"4\"] = 4,\n    [\"5\"] = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"\
    ] = 9,\n    [\"A\"] = 10, [\"B\"] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"E\"] =\
    \ 14, [\"F\"] = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6kctigoy.lua:29:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp6kctigoy.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp99sd2thg.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp99sd2thg.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6daxpodq.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp6daxpodq.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \tlocal hex_key = {\n\t\t[\"0\"] = 0,\n\t\t[\"1\"] = 1,\n\t\t[\"2\"] = 2,\n\t\t\
    [\"3\"] = 3,\n\t\t[\"4\"] = 4,\n\t\t[\"5\"] = 5,\n\t\t[\"6\"] = 6,\n\t\t[\"7\"\
    ] = 7,\n\t\t[\"8\"] = 8,\n\t\t[\"9\"] = 9,\n\t\t[\"A\"] = 10,\n\t\t[\"B\"] = 11,\n\
    \t\t[\"C\"] = 12,\n\t\t[\"D\"] = 13,\n\t\t[\"E\"] = 14,\n\t\t[\"F\"] = 15\n\t\
    }\n\treturn hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvik5845b.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpvik5845b.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_keys = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15\n    }\n    return hex_keys[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjfge0z9p.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpjfge0z9p.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxpystjr1.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpxpystjr1.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex = {A = 10, B = 11, C =\
    \ 12, D = 13, E = 14, F = 15}\n    local count = 0\n    for i = 1, #num do\n \
    \       local n = tonumber(num:sub(i, i)) or hex[num:sub(i, i)]\n        for j\
    \ = 1, #primes do\n            if n == primes[j] then\n                count =\
    \ count + 1\n                break\n            end\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdpj0ea6t.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpdpj0ea6t.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    ['0'] = 0,\n    ['1'] = 1,\n    ['2'] = 2,\n    ['3']\
    \ = 3,\n    ['4'] = 4,\n    ['5'] = 5,\n    ['6'] = 6,\n    ['7'] = 7,\n    ['8']\
    \ = 8,\n    ['9'] = 9,\n    ['A'] = 10,\n    ['B'] = 11,\n    ['C'] = 12,\n  \
    \  ['D'] = 13,\n    ['E'] = 14,\n    ['F'] = 15\n  }\n  return hex_key[num]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpld4oii6y.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpld4oii6y.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = true,\n        [\"1\"] = true,\n   \
    \     [\"2\"] = true,\n        [\"3\"] = true,\n        [\"4\"] = true,\n    \
    \    [\"5\"] = true,\n        [\"6\"] = true,\n        [\"7\"] = true,\n     \
    \   [\"8\"] = true,\n        [\"9\"] = true,\n        [\"A\"] = true,\n      \
    \  [\"B\"] = true,\n        [\"C\"] = true,\n        [\"D\"] = true,\n       \
    \ [\"E\"] = true,\n        [\"F\"] = true,\n    }\n    if hex_key[num] then\n\
    \        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp__jc2v5w.lua:45:\
    \ expected: 1, actual: false\\nstack traceback:\\n\\t/tmp/tmp__jc2v5w.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyv2a3vx5.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpyv2a3vx5.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc64jjhdt.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpc64jjhdt.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2lj1h71f.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp2lj1h71f.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn92ntl6e.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpn92ntl6e.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"\
    ] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n   \
    \     [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"\
    ] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   local primes = {\n        [2] = true,\n        [3] = true,\n        [5] =\
    \ true,\n        [7] = true,\n        [11] = true,\n        [13] = true\n    }\n\
    \    local count = 0\n    for i = 1, #num do\n        if primes[hex[num:sub(i,\
    \ i)]] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpctkl334g.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpctkl334g.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuq_b1rxj.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpuq_b1rxj.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpixtxd6wv.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpixtxd6wv.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = true,\n    [\"1\"] = true,\n    [\"2\"] =\
    \ true,\n    [\"3\"] = true,\n    [\"4\"] = true,\n    [\"5\"] = true,\n    [\"\
    6\"] = true,\n    [\"7\"] = true,\n    [\"8\"] = true,\n    [\"9\"] = true,\n\
    \    [\"A\"] = true,\n    [\"B\"] = true,\n    [\"C\"] = true,\n    [\"D\"] =\
    \ true,\n    [\"E\"] = true,\n    [\"F\"] = true\n  }\n  return hex_key[num]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd6nwhx1b.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpd6nwhx1b.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpovdehmwg.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpovdehmwg.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpukmf5fo7.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpukmf5fo7.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpksx22wzz.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpksx22wzz.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9quasfkj.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp9quasfkj.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n    [\"\
    3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"7\"] =\
    \ 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"] = 11,\n\
    \    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"] = 15\n \
    \ }\n  local count = 0\n  for i = 1, #num do\n    local n = hex[num:sub(i, i)]\n\
    \    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 then\n    \
    \  count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu0nb1bn1.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpu0nb1bn1.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpynx4nmb8.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpynx4nmb8.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex_digits = {0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    local hex_digits_str = {'0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n\
    \    local hex_digits_map = {}\n    for i = 1, #hex_digits do\n        hex_digits_map[hex_digits_str[i]]\
    \ = hex_digits[i]\n    end\n    local count = 0\n    for i = 1, #num do\n    \
    \    local digit = num:sub(i, i)\n        if hex_digits_map[digit] then\n    \
    \        for j = 1, #primes do\n                if hex_digits_map[digit] == primes[j]\
    \ then\n                    count = count + 1\n                end\n         \
    \   end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppod30tv_.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmppod30tv_.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbljx_s55.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpbljx_s55.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptd77zmvp.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmptd77zmvp.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = true,\n        [\"1\"] = true,\n   \
    \     [\"2\"] = true,\n        [\"3\"] = true,\n        [\"4\"] = true,\n    \
    \    [\"5\"] = true,\n        [\"6\"] = true,\n        [\"7\"] = true,\n     \
    \   [\"8\"] = true,\n        [\"9\"] = true,\n        [\"A\"] = true,\n      \
    \  [\"B\"] = true,\n        [\"C\"] = true,\n        [\"D\"] = true,\n       \
    \ [\"E\"] = true,\n        [\"F\"] = true,\n    }\n    return hex_key[num]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp74zj22dn.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp74zj22dn.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgfoncgra.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpgfoncgra.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local t = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"]\
    \ = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n   \
    \     [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"\
    ] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15,\n    }\n\
    \    return t[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb_o4_yrc.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpb_o4_yrc.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_elfeajf.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp_elfeajf.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex = {0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    local hex_key = {}\n    for i = 1, #hex\
    \ do\n        hex_key[string.format(\"%X\", hex[i])] = primes[i]\n    end\n  \
    \  return hex_key\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm7u3fpmw.lua:30:\
    \ expected: 1, actual: {\"0\"=2, \"1\"=3, \"2\"=5, \"3\"=7, \"4\"=11, \"5\"=13}\\\
    nstack traceback:\\n\\t/tmp/tmpm7u3fpmw.lua:30: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_keys = {\n        [\"0\"] = true,\n        [\"1\"] = true,\n  \
    \      [\"2\"] = true,\n        [\"3\"] = true,\n        [\"4\"] = true,\n   \
    \     [\"5\"] = true,\n        [\"6\"] = true,\n        [\"7\"] = true,\n    \
    \    [\"8\"] = true,\n        [\"9\"] = true,\n        [\"A\"] = true,\n     \
    \   [\"B\"] = true,\n        [\"C\"] = true,\n        [\"D\"] = true,\n      \
    \  [\"E\"] = true,\n        [\"F\"] = true\n    }\n    return hex_keys[num]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsl1f0xoj.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpsl1f0xoj.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp940jdjnx.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp940jdjnx.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5wd3i4e4.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp5wd3i4e4.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3e1zyz7o.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp3e1zyz7o.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyzdzfezq.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpyzdzfezq.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2'] = 2,\n\
    \        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6'] = 6,\n\
    \        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A'] = 10,\n\
    \        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n        ['E']\
    \ = 14,\n        ['F'] = 15,\n    }\n    local count = 0\n    for i = 1, #num\
    \ do\n        if hex[num:sub(i, i)] == 2 or hex[num:sub(i, i)] == 3 or hex[num:sub(i,\
    \ i)] == 5 or hex[num:sub(i, i)] == 7 or hex[num:sub(i, i)] == 11 or hex[num:sub(i,\
    \ i)] == 13 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    ['0'] = 0,\n    ['1'] = 1,\n    ['2'] = 2,\n    ['3']\
    \ = 3,\n    ['4'] = 4,\n    ['5'] = 5,\n    ['6'] = 6,\n    ['7'] = 7,\n    ['8']\
    \ = 8,\n    ['9'] = 9,\n    ['A'] = 10,\n    ['B'] = 11,\n    ['C'] = 12,\n  \
    \  ['D'] = 13,\n    ['E'] = 14,\n    ['F'] = 15\n  }\n  return hex_key[num]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpir3ll37z.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpir3ll37z.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphbq0mpvd.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmphbq0mpvd.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    [\"0\"] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n \
    \   [\"3\"] = 3,\n    [\"4\"] = 4,\n    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"\
    7\"] = 7,\n    [\"8\"] = 8,\n    [\"9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"]\
    \ = 11,\n    [\"C\"] = 12,\n    [\"D\"] = 13,\n    [\"E\"] = 14,\n    [\"F\"]\
    \ = 15\n  }\n  return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0gd7zam3.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp0gd7zam3.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5tguk1pb.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp5tguk1pb.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {\n        [0] = false,\n        [1] = false,\n        [2]\
    \ = true,\n        [3] = true,\n        [4] = false,\n        [5] = true,\n  \
    \      [6] = false,\n        [7] = true,\n        [8] = false,\n        [9] =\
    \ false,\n        [10] = false,\n        [11] = true,\n        [12] = false,\n\
    \        [13] = true,\n        [14] = false,\n        [15] = false,\n    }\n \
    \   local hex_to_dec = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n       \
    \ [\"2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] =\
    \ 5,\n        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n     \
    \   [\"9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"\
    ] = 12,\n        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15,\n\
    \    }\n    local count = 0\n    for i = 1, #num do\n        local c = num:sub(i,\
    \ i)\n        if primes[hex_to_dec[c]] then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_primes = {\n        [\"2\"] = true,\n        [\"3\"] = true,\n\
    \        [\"5\"] = true,\n        [\"7\"] = true,\n        [\"B\"] = true,\n \
    \       [\"D\"] = true,\n    }\n    local count = 0\n    for i = 1, #num do\n\
    \        if hex_primes[num:sub(i, i)] then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex_digits = {0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    local hex_digits_str = {\"0\"\
    , \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\"\
    , \"C\", \"D\", \"E\", \"F\"}\n    local hex_digits_str_upper = {\"0\", \"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\"\
    , \"D\", \"E\", \"F\"}\n    local hex_digits_str_lower = {\"0\", \"1\", \"2\"\
    , \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\"}\n    local hex_digits_str_all = {\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"\
    F\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"}\n    local hex_digits_str_all_upper\
    \ = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    local hex_digits_str_all_lower =\
    \ {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\"}\n    local hex_digits_str_all_upper_lower\
    \ = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"a\", \"b\", \"c\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b'lua: /tmp/tmp4v6pk225.lua:26: unfinished string near \\'\"c\\'\\n'"
  exit_code: 1
  status: SyntaxError
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_primes = {\n        [\"2\"] = true,\n        [\"3\"] = true,\n\
    \        [\"5\"] = true,\n        [\"7\"] = true,\n        [\"B\"] = true,\n \
    \       [\"D\"] = true,\n    }\n    local count = 0\n    for i = 1, #num do\n\
    \        if hex_primes[num:sub(i, i)] then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = true,\n        [\"1\"] = true,\n   \
    \     [\"2\"] = true,\n        [\"3\"] = true,\n        [\"4\"] = true,\n    \
    \    [\"5\"] = true,\n        [\"6\"] = true,\n        [\"7\"] = true,\n     \
    \   [\"8\"] = true,\n        [\"9\"] = true,\n        [\"A\"] = true,\n      \
    \  [\"B\"] = true,\n        [\"C\"] = true,\n        [\"D\"] = true,\n       \
    \ [\"E\"] = true,\n        [\"F\"] = true,\n    }\n    return hex_key[num]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2xo0seq7.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp2xo0seq7.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex = {0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    local hex_key = {}\n    for i = 1, #hex\
    \ do\n        hex_key[string.format(\"%X\", hex[i])] = primes[i]\n    end\n  \
    \  return hex_key\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpba4tlktm.lua:30:\
    \ expected: 1, actual: {\"0\"=2, \"1\"=3, \"2\"=5, \"3\"=7, \"4\"=11, \"5\"=13}\\\
    nstack traceback:\\n\\t/tmp/tmpba4tlktm.lua:30: in function \\'test_humaneval\\\
    '\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo12yr9tk.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpo12yr9tk.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6sob0w9y.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp6sob0w9y.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"2\"\
    ] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n   \
    \     [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"9\"\
    ] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   local primes = {\n        [2] = true,\n        [3] = true,\n        [5] =\
    \ true,\n        [7] = true,\n        [11] = true,\n        [13] = true\n    }\n\
    \    local count = 0\n    for i = 1, #num do\n        if primes[hex[num:sub(i,\
    \ i)]] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfq67bsqx.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpfq67bsqx.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsrnwdbad.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpsrnwdbad.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex = {\n        [\"0\"] = true,\n        [\"1\"] = true,\n       \
    \ [\"2\"] = true,\n        [\"3\"] = true,\n        [\"4\"] = true,\n        [\"\
    5\"] = true,\n        [\"6\"] = true,\n        [\"7\"] = true,\n        [\"8\"\
    ] = true,\n        [\"9\"] = true,\n        [\"A\"] = true,\n        [\"B\"] =\
    \ true,\n        [\"C\"] = true,\n        [\"D\"] = true,\n        [\"E\"] = true,\n\
    \        [\"F\"] = true\n    }\n    local primes = {\n        [\"2\"] = true,\n\
    \        [\"3\"] = true,\n        [\"5\"] = true,\n        [\"7\"] = true,\n \
    \       [\"B\"] = true,\n        [\"D\"] = true\n    }\n    local count = 0\n\
    \    for i = 1, #num do\n        if hex[num:sub(i, i)] and primes[num:sub(i, i)]\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \  local hex_key = {\n    ['0'] = 0,\n    ['1'] = 1,\n    ['2'] = 2,\n    ['3']\
    \ = 3,\n    ['4'] = 4,\n    ['5'] = 5,\n    ['6'] = 6,\n    ['7'] = 7,\n    ['8']\
    \ = 8,\n    ['9'] = 9,\n    ['A'] = 10,\n    ['B'] = 11,\n    ['C'] = 12,\n  \
    \  ['D'] = 13,\n    ['E'] = 14,\n    ['F'] = 15\n  }\n  return hex_key[num]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg6g3fbfv.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpg6g3fbfv.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_primes = {\n        [\"2\"] = true,\n        [\"3\"] = true,\n\
    \        [\"5\"] = true,\n        [\"7\"] = true,\n        [\"B\"] = true,\n \
    \       [\"D\"] = true,\n    }\n    local count = 0\n    for i = 1, #num do\n\
    \        if hex_primes[num:sub(i, i)] then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex = {A = 10, B = 11, C =\
    \ 12, D = 13, E = 14, F = 15}\n    local count = 0\n    for i = 1, #num do\n \
    \       local n = tonumber(num:sub(i, i)) or hex[num:sub(i, i)]\n        if primes[n]\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi96vx4rt.lua:33:\
    \ expected: 1, actual: 0\\nstack traceback:\\n\\t/tmp/tmpi96vx4rt.lua:33: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_q8nlknl.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmp_q8nlknl.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcymi93fx.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpcymi93fx.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = true,\n        [\"1\"] = true,\n   \
    \     [\"2\"] = true,\n        [\"3\"] = true,\n        [\"4\"] = true,\n    \
    \    [\"5\"] = true,\n        [\"6\"] = true,\n        [\"7\"] = true,\n     \
    \   [\"8\"] = true,\n        [\"9\"] = true,\n        [\"A\"] = true,\n      \
    \  [\"B\"] = true,\n        [\"C\"] = true,\n        [\"D\"] = true,\n       \
    \ [\"E\"] = true,\n        [\"F\"] = true,\n    }\n    return hex_key[num]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvcv7muw_.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpvcv7muw_.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local hex_digits = {\n        ['0']\
    \ = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4, ['5'] = 5, ['6'] = 6, ['7']\
    \ = 7,\n        ['8'] = 8, ['9'] = 9, ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D']\
    \ = 13, ['E'] = 14, ['F'] = 15\n    }\n    local count = 0\n    for i = 1, #num\
    \ do\n        local digit = hex_digits[num:sub(i, i)]\n        for j = 1, #primes\
    \ do\n            if digit == primes[j] then\n                count = count +\
    \ 1\n                break\n            end\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        ['0'] = 0,\n        ['1'] = 1,\n        ['2']\
    \ = 2,\n        ['3'] = 3,\n        ['4'] = 4,\n        ['5'] = 5,\n        ['6']\
    \ = 6,\n        ['7'] = 7,\n        ['8'] = 8,\n        ['9'] = 9,\n        ['A']\
    \ = 10,\n        ['B'] = 11,\n        ['C'] = 12,\n        ['D'] = 13,\n     \
    \   ['E'] = 14,\n        ['F'] = 15,\n    }\n    return hex_key[num]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjqtg3w7p.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmpjqtg3w7p.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- For num = \"AB\" the output should be\
    \ 1.\n-- For num = \"1077E\" the output should be 2.\n-- For num = \"ABED1A33\"\
    \ the output should be 4.\n-- For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n-- For num = \"2020\" the output should be 2.\nlocal function hex_key(num)\n\
    \    local hex_key = {\n        [\"0\"] = 0,\n        [\"1\"] = 1,\n        [\"\
    2\"] = 2,\n        [\"3\"] = 3,\n        [\"4\"] = 4,\n        [\"5\"] = 5,\n\
    \        [\"6\"] = 6,\n        [\"7\"] = 7,\n        [\"8\"] = 8,\n        [\"\
    9\"] = 9,\n        [\"A\"] = 10,\n        [\"B\"] = 11,\n        [\"C\"] = 12,\n\
    \        [\"D\"] = 13,\n        [\"E\"] = 14,\n        [\"F\"] = 15\n    }\n \
    \   return hex_key[num]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptsg7co95.lua:42:\
    \ expected: 1, actual: nil\\nstack traceback:\\n\\t/tmp/tmptsg7co95.lua:42: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
