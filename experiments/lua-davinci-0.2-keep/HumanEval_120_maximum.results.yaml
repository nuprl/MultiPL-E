name: HumanEval_120_maximum
language: lua
results:
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n           \
    \ if arr[j] < pivot then\n                i = i + 1\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r] =\
    \ arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l <= r then\n            local p = partition(arr, l, r)\n\
    \            if p == k then\n                return\n            elseif p < k\
    \ then\n                quickSelect(arr, p + 1, r, k)\n            else\n    \
    \            quickSelect(arr, l, p - 1, k)\n            end\n        end\n   \
    \ end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    local res = {}\n    for\
    \ i = #arr - k + 1, #arr do\n        res[#res + 1] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4vbewwqh.lua:57:\
    \ expected: {-13, -8, 0, 0, 3, 5, 15}\\nactual: {-13, -8, 0, 3, 5, 15, 0}\\nstack\
    \ traceback:\\n\\t/tmp/tmp4vbewwqh.lua:57: in function 'test_humaneval'\\n\\nRan\
    \ 1 tests in 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local index = partition(arr, l, r)\n\
    \        if index == k then\n            return arr[index]\n        elseif index\
    \ > k then\n            return quickSelect(arr, l, index - 1, k)\n        else\n\
    \            return quickSelect(arr, index + 1, r, k)\n        end\n    end\n\
    \    local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ index = partition(arr, l, r)\n            quickSort(arr, l, index - 1)\n   \
    \         quickSort(arr, index + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkcwi80yp.lua:65:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpkcwi80yp.lua:65:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then return {math.max(unpack(arr))}\
    \ end\n    if k == n then return arr end\n    local function partition(arr, l,\
    \ r)\n        local i, j = l, r\n        local pivot = arr[l]\n        while i\
    \ < j do\n            while i < j and arr[j] <= pivot do j = j - 1 end\n     \
    \       arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do i = i\
    \ + 1 end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then return arr[l] end\n        local i = partition(arr, l, r)\n\
    \        if i == k then return arr[i] end\n        if i > k then return quickSelect(arr,\
    \ l, i - 1, k) end\n        return quickSelect(arr, i + 1, r, k)\n    end\n  \
    \  local function sort(arr, l, r)\n        if l >= r then return end\n       \
    \ local i = partition(arr, l, r)\n        sort(arr, l, i - 1)\n        sort(arr,\
    \ i + 1, r)\n    end\n    local pivot = quickSelect(arr, 1, n, k)\n    local res\
    \ = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    sort(res, 1, #res)\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz5uy51m7.lua:61:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpz5uy51m7.lua:61:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local p = partition(arr, l, r)\n   \
    \     if p == k then\n            return arr[p]\n        elseif p > k then\n \
    \           return quickSelect(arr, l, p - 1, k)\n        else\n            return\
    \ quickSelect(arr, p + 1, r, k)\n        end\n    end\n    local n = #arr\n  \
    \  if n == 0 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ 1, k do\n        res[i] = quickSelect(arr, 1, n, i)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9a65459f.lua:61:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp9a65459f.lua:61:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ heap = {}\n    local function push(x)\n        heap[#heap + 1] = x\n       \
    \ local i = #heap\n        while i > 1 do\n            local p = math.floor(i\
    \ / 2)\n            if heap[p] < heap[i] then\n                heap[p], heap[i]\
    \ = heap[i], heap[p]\n                i = p\n            else\n              \
    \  break\n            end\n        end\n    end\n    local function pop()\n  \
    \      local ret = heap[1]\n        heap[1] = heap[#heap]\n        heap[#heap]\
    \ = nil\n        local i = 1\n        while i * 2 <= #heap do\n            local\
    \ l = i * 2\n            local r = i * 2 + 1\n            local j = l\n      \
    \      if r <= #heap and heap[r] > heap[l] then\n                j = r\n     \
    \       end\n            if heap[i] < heap[j] then\n                heap[i], heap[j]\
    \ = heap[j], heap[i]\n                i = j\n            else\n              \
    \  break\n            end\n        end\n        return ret\n    end\n    for i\
    \ = 1, k do\n        push(arr[i])\n    end\n    for i = k + 1, n do\n        if\
    \ arr[i] > heap[1] then\n            pop()\n            push(arr[i])\n       \
    \ end\n    end\n    local ret = {}\n    for i = 1, k do\n        ret[i] = pop()\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr6tdz__p.lua:83:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpr6tdz__p.lua:83:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ partition(l, r)\n        local i, j = l, r\n        local pivot = arr[l]\n \
    \       while i < j do\n            while i < j and arr[j] <= pivot do j = j -\
    \ 1 end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do i = i + 1 end\n            arr[j] = arr[i]\n        end\n        arr[i] =\
    \ pivot\n        return i\n    end\n    local l, r = 1, n\n    while true do\n\
    \        local p = partition(l, r)\n        if p == k then\n            break\n\
    \        elseif p < k then\n            l = p + 1\n        else\n            r\
    \ = p - 1\n        end\n    end\n    local res = {}\n    for i = 1, k do\n   \
    \     res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjsyn43do.lua:54:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpjsyn43do.lua:54:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n           \
    \ if arr[j] < pivot then\n                i = i + 1\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r] =\
    \ arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l <= r then\n            local p = partition(arr, l, r)\n\
    \            if p == k then\n                return\n            elseif p < k\
    \ then\n                quickSelect(arr, p + 1, r, k)\n            else\n    \
    \            quickSelect(arr, l, p - 1, k)\n            end\n        end\n   \
    \ end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    return arr\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp0og5prj.lua:49:\
    \ expected: {4, 4}\\nactual: {-4, 4, 4}\\nstack traceback:\\n\\t/tmp/tmpp0og5prj.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    local heap\
    \ = require(\"algorithms.data_structures.heap\").new(res)\n    for i = k + 1,\
    \ n do\n        if arr[i] > heap:top() then\n            heap:pop()\n        \
    \    heap:push(arr[i])\n        end\n    end\n    return heap:to_array()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuz3nquxv.lua:38:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpuz3nquxv.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    local function heap_push(heap, val)\n\
    \        local n = #heap + 1\n        heap[n] = val\n        while n > 1 do\n\
    \            local p = math.floor(n / 2)\n            if heap[p] < heap[n] then\n\
    \                heap[p], heap[n] = heap[n], heap[p]\n                n = p\n\
    \            else\n                break\n            end\n        end\n    end\n\
    \    local function heap_pop(heap)\n        local n = #heap\n        heap[1],\
    \ heap[n] = heap[n], heap[1]\n        local val = heap[n]\n        heap[n] = nil\n\
    \        n = 1\n        while n < #heap do\n            local l = n * 2\n    \
    \        local r = l + 1\n            if l > #heap then\n                break\n\
    \            elseif r > #heap then\n                if heap[n] < heap[l] then\n\
    \                    heap[n], heap[l] = heap[l], heap[n]\n                end\n\
    \                break\n            else\n                if heap[l] > heap[r]\
    \ then\n                    if heap[n] < heap[l] then\n                      \
    \  heap[n], heap[l] = heap[l], heap[n]\n                        n = l\n      \
    \              else\n                        break\n                    end\n\
    \                else\n                    if heap[n] < heap[r] then\n       \
    \                 heap[n], heap[r] = heap[r], heap[n]\n                      \
    \  n = r\n                    else\n                        break\n          \
    \          end\n                end\n            end\n        end\n        return\
    \ val\n    end\n    for _, v in ipairs(arr) do\n        heap_push(heap, v)\n \
    \       if #heap > k then\n            heap_pop(heap)\n        end\n    end\n\
    \    local res = {}\n    for i = #heap, 1, -1 do\n        res[#res + 1] = heap_pop(heap)\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpad7tvfat.lua:83:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpad7tvfat.lua:83:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    for i = 1, #arr do\n        if i <=\
    \ k then\n            table.insert(heap, arr[i])\n        else\n            local\
    \ min = heap[1]\n            if arr[i] > min then\n                heap[1] = arr[i]\n\
    \                local j = 1\n                while true do\n                \
    \    local l = j * 2\n                    local r = l + 1\n                  \
    \  if l > k then\n                        break\n                    elseif r\
    \ > k then\n                        if heap[l] < heap[j] then\n              \
    \              heap[j], heap[l] = heap[l], heap[j]\n                        end\n\
    \                        break\n                    else\n                   \
    \     local m = heap[l]\n                        if heap[r] < m then\n       \
    \                     m = heap[r]\n                            l = r\n       \
    \                 end\n                        if heap[j] > m then\n         \
    \                   heap[j], heap[l] = heap[l], heap[j]\n                    \
    \        j = l\n                        else\n                            break\n\
    \                        end\n                    end\n                end\n \
    \           end\n        end\n    end\n    for i = k, 2, -1 do\n        heap[1],\
    \ heap[i] = heap[i], heap[1]\n        local j = 1\n        while true do\n   \
    \         local l = j * 2\n            local r = l + 1\n            if l >= i\
    \ then\n                break\n            elseif r >= i then\n              \
    \  if heap[l] < heap[j] then\n                    heap[j], heap[l] = heap[l],\
    \ heap[j]\n                end\n                break\n            else\n    \
    \            local m = heap[l]\n                if heap[r] < m then\n        \
    \            m = heap[r]\n                    l = r\n                end\n   \
    \             if heap[j] > m then\n                    heap[j], heap[l] = heap[l],\
    \ heap[j]\n                    j = l\n                else\n                 \
    \   break\n                end\n            end\n        end\n    end\n    return\
    \ heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq9p5853_.lua:87:\
    \ expected: {-4, -3, 5}\\nactual: {5, -4, -3}\\nstack traceback:\\n\\t/tmp/tmpq9p5853_.lua:87:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local heap\
    \ = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k,\
    \ 1, -1 do\n        local j = i\n        while j * 2 <= k do\n            local\
    \ l = j * 2\n            local r = l + 1\n            if r <= k and heap[r] >\
    \ heap[l] then\n                l = r\n            end\n            if heap[j]\
    \ < heap[l] then\n                heap[j], heap[l] = heap[l], heap[j]\n      \
    \          j = l\n            else\n                break\n            end\n \
    \       end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            local j = 1\n            while j *\
    \ 2 <= k do\n                local l = j * 2\n                local r = l + 1\n\
    \                if r <= k and heap[r] > heap[l] then\n                    l =\
    \ r\n                end\n                if heap[j] < heap[l] then\n        \
    \            heap[j], heap[l] = heap[l], heap[j]\n                    j = l\n\
    \                else\n                    break\n                end\n      \
    \      end\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa5wclp9h.lua:66:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpa5wclp9h.lua:66:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l < r then\n        \
    \    local pivot = partition(arr, l, r)\n            if pivot == k then\n    \
    \            return\n            elseif pivot > k then\n                quickSelect(arr,\
    \ l, pivot - 1, k)\n            else\n                quickSelect(arr, pivot +\
    \ 1, r, k)\n            end\n        end\n    end\n    quickSelect(arr, 1, #arr,\
    \ #arr - k + 1)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n     \
    \   res[#res + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn759gg15.lua:57:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpn759gg15.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local i = partition(arr, l, r)\n   \
    \     if i == k then\n            return arr[i]\n        elseif i > k then\n \
    \           return quickSelect(arr, l, i - 1, k)\n        else\n            return\
    \ quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local i = partition(arr, l, r)\n \
    \           quickSort(arr, l, i - 1)\n            quickSort(arr, i + 1, r)\n \
    \       end\n    end\n    local n = #arr\n    local res = {}\n    for i = 1, k\
    \ do\n        res[i] = quickSelect(arr, 1, n, i)\n    end\n    quickSort(res,\
    \ 1, k)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7o7hjj37.lua:66:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp7o7hjj37.lua:66:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then return {math.max(unpack(arr))}\
    \ end\n    if k == n then return arr end\n    local res = {}\n    for i = 1, k\
    \ do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1,\
    \ n do\n        if arr[i] > res[1] then\n            res[1] = arr[i]\n       \
    \     table.sort(res)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe3p_jtkl.lua:39:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpe3p_jtkl.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n           \
    \ if arr[j] > pivot then\n                i = i + 1\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r] =\
    \ arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p > k then\n            return quickSelect(arr, l, p\
    \ - 1, k)\n        else\n            return quickSelect(arr, p + 1, r, k)\n  \
    \      end\n    end\n    local function merge(arr1, arr2)\n        local i, j,\
    \ k = 1, 1, 1\n        local m, n = #arr1, #arr2\n        local arr = {}\n   \
    \     while i <= m and j <= n do\n            if arr1[i] > arr2[j] then\n    \
    \            arr[k] = arr1[i]\n                i = i + 1\n            else\n \
    \               arr[k] = arr2[j]\n                j = j + 1\n            end\n\
    \            k = k + 1\n        end\n        while i <= m do\n            arr[k]\
    \ = arr1[i]\n            i = i + 1\n            k = k + 1\n        end\n     \
    \   while j <= n do\n            arr[k] = arr2[j]\n            j = j + 1\n   \
    \         k = k + 1\n        end\n        return arr\n    end\n    local function\
    \ mergeSort(arr, l, r)\n        if l == r then\n            return {arr[l]}\n\
    \        end\n        local m = math.floor((l + r) / 2)\n        local arr1 =\
    \ mergeSort(arr, l, m)\n        local arr2 = mergeSort(arr, m + 1, r)\n      \
    \  return merge(arr\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpqe15xugl.lua:76: ')' expected (to close '(' at line 75)\
    \ near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickSelect(arr, l, r,\
    \ k)\n        if l == r then\n            return arr[l]\n        end\n       \
    \ local pivot = partition(arr, l, r)\n        if pivot == k then\n           \
    \ return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    return quickSelect(arr, 1, #arr, #arr -\
    \ k + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw28bh76f.lua:48:\
    \ expected: {-4, -3, 5}\\nactual: 5\\nstack traceback:\\n\\t/tmp/tmpw28bh76f.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgxaw0kwg.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpgxaw0kwg.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmpgxaw0kwg.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, lo, hi)\n        local pivot = arr[hi]\n        local\
    \ i = lo\n        for j = lo, hi - 1 do\n            if arr[j] > pivot then\n\
    \                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n\
    \            end\n        end\n        arr[i], arr[hi] = arr[hi], arr[i]\n   \
    \     return i\n    end\n    local function quickselect(arr, lo, hi, k)\n    \
    \    if lo == hi then return arr[lo] end\n        local p = partition(arr, lo,\
    \ hi)\n        if p == k then return arr[p] end\n        if p > k then\n     \
    \       return quickselect(arr, lo, p - 1, k)\n        else\n            return\
    \ quickselect(arr, p + 1, hi, k)\n        end\n    end\n    local function sort(arr,\
    \ lo, hi)\n        if lo >= hi then return end\n        local p = partition(arr,\
    \ lo, hi)\n        sort(arr, lo, p - 1)\n        sort(arr, p + 1, hi)\n    end\n\
    \    local pivot = quickselect(arr, 1, n, k)\n    local i = 1\n    while i <=\
    \ n and arr[i] >= pivot do\n        i = i + 1\n    end\n    sort(arr, 1, i - 1)\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplc4sa793.lua:69:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmplc4sa793.lua:69:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(l, r)\n  \
    \      local i, j = l, r\n        local v = arr[l]\n        while i < j do\n \
    \           while i < j and arr[j] <= v do\n                j = j - 1\n      \
    \      end\n            arr[i] = arr[j]\n            while i < j and arr[i] >=\
    \ v do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = v\n        return i\n    end\n    local function\
    \ quickSelect(l, r)\n        if l == r then\n            return\n        end\n\
    \        local i = partition(l, r)\n        if i == k then\n            return\n\
    \        elseif i > k then\n            quickSelect(l, i - 1)\n        else\n\
    \            quickSelect(i + 1, r)\n        end\n    end\n    quickSelect(1, n)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3yqjkxo1.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp3yqjkxo1.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function sort(left, right)\n        if left\
    \ < right then\n            local mid = partition(left, right)\n            if\
    \ mid == k - 1 then\n                return\n            elseif mid > k - 1 then\n\
    \                sort(left, mid - 1)\n            else\n                sort(mid\
    \ + 1, right)\n            end\n        end\n    end\n    sort(1, n)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptivs11r0.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmptivs11r0.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if len == 0 then\n        return\
    \ {}\n    end\n    if k == 0 then\n        return {}\n    end\n    if k >= len\
    \ then\n        table.sort(arr)\n        return arr\n    end\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n           \
    \ if arr[j] > pivot then\n                i = i + 1\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r] =\
    \ arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local pivot = partition(arr, l, r)\n        if pivot == k then\n     \
    \       return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, #arr, k)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwufv3do2.lua:49:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpwufv3do2.lua:49:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, left, right, k)\n        if left == right then\n          \
    \  return arr[left]\n        end\n        local mid = partition(arr, left, right)\n\
    \        if mid == k then\n            return arr[mid]\n        elseif mid < k\
    \ then\n            return quickSelect(arr, mid + 1, right, k)\n        else\n\
    \            return quickSelect(arr, left, mid - 1, k)\n        end\n    end\n\
    \    local function quickSort(arr, left, right)\n        if left < right then\n\
    \            local mid = partition(arr, left, right)\n            quickSort(arr,\
    \ left, mid - 1)\n            quickSort(arr, mid + 1, right)\n        end\n  \
    \  end\n    quickSort(arr, 1, n)\n    local res = {}\n    for i = 1, k do\n  \
    \      res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpghgyow23.lua:77:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpghgyow23.lua:77:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickselect(arr, l, r,\
    \ k)\n        if l == r then\n            return arr[l]\n        end\n       \
    \ local pivot = partition(arr, l, r)\n        if pivot == k then\n           \
    \ return arr[pivot]\n        elseif pivot > k then\n            return quickselect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickselect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    return quickselect(arr, 1, #arr, k)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpakbib58s.lua:48:\
    \ expected: {-4, -3, 5}\\nactual: -4\\nstack traceback:\\n\\t/tmp/tmpakbib58s.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p > k then\n            return quickSelect(arr, l, p\
    \ - 1, k)\n        else\n            return quickSelect(arr, p + 1, r, k)\n  \
    \      end\n    end\n    local function quickSort(arr, l, r)\n        if l < r\
    \ then\n            local p = partition(arr, l, r)\n            quickSort(arr,\
    \ l, p - 1)\n            quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, n)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz1wd829g.lua:61:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpz1wd829g.lua:61:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, left, right)\n        if left\
    \ < right then\n            local pivot = partition(arr, left, right)\n      \
    \      quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot + 1,\
    \ right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6hdrhptv.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp6hdrhptv.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickSelect(arr, l, r,\
    \ k)\n        if l == r then\n            return arr[l]\n        end\n       \
    \ local pos = partition(arr, l, r)\n        if pos == k then\n            return\
    \ arr[pos]\n        elseif pos < k then\n            return quickSelect(arr, pos\
    \ + 1, r, k)\n        else\n            return quickSelect(arr, l, pos - 1, k)\n\
    \        end\n    end\n    local function quickSort(arr, l, r)\n        if l <\
    \ r then\n            local pos = partition(arr, l, r)\n            quickSort(arr,\
    \ l, pos - 1)\n            quickSort(arr, pos + 1, r)\n        end\n    end\n\
    \    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpegf92g83.lua:60:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpegf92g83.lua:60:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local heap\
    \ = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k,\
    \ 1, -1 do\n        local j = i\n        while j * 2 <= k do\n            local\
    \ t = j * 2\n            if t + 1 <= k and heap[t + 1] > heap[t] then\n      \
    \          t = t + 1\n            end\n            if heap[j] < heap[t] then\n\
    \                heap[j], heap[t] = heap[t], heap[j]\n                j = t\n\
    \            else\n                break\n            end\n        end\n    end\n\
    \    for i = k + 1, n do\n        if arr[i] > heap[1] then\n            heap[1]\
    \ = arr[i]\n            local j = 1\n            while j * 2 <= k do\n       \
    \         local t = j * 2\n                if t + 1 <= k and heap[t + 1] > heap[t]\
    \ then\n                    t = t + 1\n                end\n                if\
    \ heap[j] < heap[t] then\n                    heap[j], heap[t] = heap[t], heap[j]\n\
    \                    j = t\n                else\n                    break\n\
    \                end\n            end\n        end\n    end\n    return heap\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1llzmmk2.lua:64:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmp1llzmmk2.lua:64:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k >= n then return arr end\n    local function partition(arr, l, r)\n      \
    \  local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n  \
    \          if arr[j] > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \                i = i + 1\n            end\n        end\n        arr[i], arr[r]\
    \ = arr[r], arr[i]\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        if l == r then return arr[l] end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then return arr[p] end\n        if p > k then return\
    \ quickselect(arr, l, p - 1, k) end\n        return quickselect(arr, p + 1, r,\
    \ k)\n    end\n    return quickselect(arr, 1, n, n - k + 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp92qonhs9.lua:45:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmp92qonhs9.lua:45:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ m = partition(arr, l, r)\n            quickSort(arr, l, m - 1)\n           \
    \ quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplfzca6bl.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmplfzca6bl.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local i = partition(arr, l, r)\n   \
    \     if i == k then\n            return arr[i]\n        elseif i > k then\n \
    \           return quickSelect(arr, l, i - 1, k)\n        else\n            return\
    \ quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local i = partition(arr, l, r)\n \
    \           quickSort(arr, l, i - 1)\n            quickSort(arr, i + 1, r)\n \
    \       end\n    end\n    local n = #arr\n    if n <= k then\n        quickSort(arr,\
    \ 1, n)\n        return arr\n    end\n    local pivot = quickSelect(arr, 1, n,\
    \ k)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n\
    \            res[#res + 1] = arr[i]\n        end\n    end\n    quickSort(res,\
    \ 1, #res)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi5oeegpj.lua:73:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpi5oeegpj.lua:73:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    if\
    \ k == n then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 1, -1 do\n        local j = i\n        while j * 2 <= k do\n          \
    \  local t = j * 2\n            if t + 1 <= k and heap[t + 1] > heap[t] then\n\
    \                t = t + 1\n            end\n            if heap[j] < heap[t]\
    \ then\n                heap[j], heap[t] = heap[t], heap[j]\n                j\
    \ = t\n            else\n                break\n            end\n        end\n\
    \    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n        \
    \    heap[1] = arr[i]\n            local j = 1\n            while j * 2 <= k do\n\
    \                local t = j * 2\n                if t + 1 <= k and heap[t + 1]\
    \ > heap[t] then\n                    t = t + 1\n                end\n       \
    \         if heap[j] < heap[t] then\n                    heap[j], heap[t] = heap[t],\
    \ heap[j]\n                    j = t\n                else\n                 \
    \   break\n                end\n            end\n        end\n    end\n    table.sort(heap)\n\
    \    return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7pska8os.lua:78:\
    \ expected: {4, 4}\\nactual: {-4, 4}\\nstack traceback:\\n\\t/tmp/tmp7pska8os.lua:78:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpl84g6tl8.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpl84g6tl8.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmpl84g6tl8.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left + 1\n        local j\
    \ = right\n        while true do\n            while i <= j and arr[i] <= pivot\
    \ do\n                i = i + 1\n            end\n            while i <= j and\
    \ arr[j] >= pivot do\n                j = j - 1\n            end\n           \
    \ if i > j then\n                break\n            end\n            arr[i], arr[j]\
    \ = arr[j], arr[i]\n        end\n        arr[left], arr[j] = arr[j], arr[left]\n\
    \        return j\n    end\n    local function quickselect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickselect(arr, left, pivot - 1, k)\n        else\n            return quickselect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    quickselect(arr, 1, len, len\
    \ - k + 1)\n    table.sort(arr, len - k + 1, len)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpy7xfyuhf.lua:55:\
    \ bad argument #2 to 'sort' (function expected, got number)\\nstack traceback:\\\
    n\\t/tmp/tmpy7xfyuhf.lua:55: in function 'candidate'\\n\\t/tmp/tmpy7xfyuhf.lua:63:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, left, right, k)\n        if left == right then return arr[left]\
    \ end\n        local pivot = partition(arr, left, right)\n        if pivot ==\
    \ k then return arr[pivot] end\n        if pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    local pivot = quickSelect(arr,\
    \ 1, n, k)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >= pivot\
    \ then\n            res[#res + 1] = arr[i]\n        end\n    end\n    quickSort(res,\
    \ 1, #res)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd4slvg3p.lua:69:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpd4slvg3p.lua:69:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, left, right)\n        if left\
    \ < right then\n            local pivot = partition(arr, left, right)\n      \
    \      quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot + 1,\
    \ right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbiz4quvd.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpbiz4quvd.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot - 1)\n   \
    \         quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyzmvuumz.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpyzmvuumz.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n <= k then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, n do\n  \
    \      if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp60qc0ftq.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp60qc0ftq.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmp60qc0ftq.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local p =\
    \ arr[l]\n        local i = l + 1\n        for j = l + 1, r do\n            if\
    \ arr[j] > p then\n                arr[i], arr[j] = arr[j], arr[i]\n         \
    \       i = i + 1\n            end\n        end\n        arr[l], arr[i - 1] =\
    \ arr[i - 1], arr[l]\n        return i - 1\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p > k then\n            return quickselect(arr, l, p\
    \ - 1, k)\n        else\n            return quickselect(arr, p + 1, r, k)\n  \
    \      end\n    end\n    local function sort(arr, l, r)\n        if l >= r then\n\
    \            return\n        end\n        local p = partition(arr, l, r)\n   \
    \     sort(arr, l, p - 1)\n        sort(arr, p + 1, r)\n    end\n    local n =\
    \ #arr\n    if k == n then\n        sort(arr, 1, n)\n        return arr\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = quickselect(arr, 1,\
    \ n, i)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf9kco2ik.lua:65:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpf9kco2ik.lua:65:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local heap = {}\n    for i = 1, k do\n     \
    \   heap[i] = arr[i]\n    end\n    table.sort(heap)\n    for i = k + 1, len do\n\
    \        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            table.sort(heap)\n\
    \        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptluu5g88.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmptluu5g88.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmptluu5g88.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ p = partition(arr, l, r)\n            quickSort(arr, l, p - 1)\n           \
    \ quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcdoy8ba1.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpcdoy8ba1.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n           \
    \ if arr[j] > pivot then\n                i = i + 1\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r] =\
    \ arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p < k then\n            return quickSelect(arr, p + 1,\
    \ r, k)\n        else\n            return quickSelect(arr, l, p - 1, k)\n    \
    \    end\n    end\n    local function maxHeapify(arr, i, n)\n        local l =\
    \ 2 * i\n        local r = 2 * i + 1\n        local largest = i\n        if l\
    \ <= n and arr[l] > arr[largest] then\n            largest = l\n        end\n\
    \        if r <= n and arr[r] > arr[largest] then\n            largest = r\n \
    \       end\n        if largest ~= i then\n            arr[i], arr[largest] =\
    \ arr[largest], arr[i]\n            maxHeapify(arr, largest, n)\n        end\n\
    \    end\n    local function buildMaxHeap(arr, n)\n        for i = math.floor(n\
    \ / 2), 1, -1 do\n            maxHeapify(arr, i, n)\n        end\n    end\n  \
    \  local function heapSort(arr, n)\n        buildMaxHeap(arr, n)\n        for\
    \ i = n, 2, -1 do\n            arr[1], arr[i] = arr[i], arr[1]\n            maxHeapify(arr,\
    \ 1, i - 1)\n        end\n    end\n    local function heapSelect(arr, k)\n   \
    \     local n = #arr\n        buildMaxHeap(arr, k)\n       \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpe5piqe2j.lua:90: 'end' expected (to close 'function' at\
    \ line 69) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l >= r then\n       \
    \     return\n        end\n        local m = partition(arr, l, r)\n        if\
    \ m == k then\n            return\n        elseif m < k then\n            quickSelect(arr,\
    \ m + 1, r, k)\n        else\n            quickSelect(arr, l, m - 1, k)\n    \
    \    end\n    end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    return arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwjd071y5.lua:54:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpwjd071y5.lua:54:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, left, right, k)\n        if left == right then\n          \
    \  return arr[left]\n        end\n        local pivot = partition(arr, left, right)\n\
    \        if pivot == k then\n            return arr[pivot]\n        elseif pivot\
    \ > k then\n            return quickSelect(arr, left, pivot - 1, k)\n        else\n\
    \            return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n\
    \    quickSelect(arr, 1, n, n - k + 1)\n    local res = {}\n    for i = n - k\
    \ + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5_o7elbz.lua:70:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp5_o7elbz.lua:70:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == k then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local function partition(l, r)\n        local\
    \ i, j = l, r\n        local pivot = arr[i]\n        while i < j do\n        \
    \    while i < j and arr[j] <= pivot do\n                j = j - 1\n         \
    \   end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local l,\
    \ r = 1, n\n    while l <= r do\n        local m = partition(l, r)\n        if\
    \ m == k then\n            break\n        elseif m < k then\n            l = m\
    \ + 1\n        else\n            r = m - 1\n        end\n    end\n    table.sort(arr,\
    \ 1, k)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdct6w6fj.lua:49:\
    \ bad argument #2 to 'sort' (function expected, got number)\\nstack traceback:\\\
    n\\t/tmp/tmpdct6w6fj.lua:49: in function 'candidate'\\n\\t/tmp/tmpdct6w6fj.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    for i =\
    \ k + 1, n do\n        local j = 1\n        while j <= k and res[j] > arr[i] do\n\
    \            j = j + 1\n        end\n        if j <= k then\n            for l\
    \ = k, j + 1, -1 do\n                res[l] = res[l - 1]\n            end\n  \
    \          res[j] = arr[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6jucmdc5.lua:51:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmp6jucmdc5.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ swap(arr, i, j)\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n     \
    \           swap(arr, i, j)\n                i = i + 1\n            end\n    \
    \    end\n        swap(arr, i, r)\n        return i\n    end\n    local function\
    \ quickselect(arr, l, r, k)\n        if l == r then return arr[l] end\n      \
    \  local p = partition(arr, l, r)\n        if p == k then return arr[p] end\n\
    \        if p > k then return quickselect(arr, l, p - 1, k) end\n        return\
    \ quickselect(arr, p + 1, r, k)\n    end\n    local function sort(arr, l, r)\n\
    \        if l >= r then return end\n        local p = partition(arr, l, r)\n \
    \       sort(arr, l, p - 1)\n        sort(arr, p + 1, r)\n    end\n    local pivot\
    \ = quickselect(arr, 1, n, k)\n    local res = {}\n    for i = 1, n do\n     \
    \   if arr[i] >= pivot then\n            res[#res + 1] = arr[i]\n        end\n\
    \    end\n    sort(res, 1, #res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsb_zyols.lua:63:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpsb_zyols.lua:63:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        local j = 1\n        while j <= k and res[j]\
    \ < arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          table.insert(res, j, arr[i])\n            table.remove(res)\n     \
    \   end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaq3ypnag.lua:42:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpaq3ypnag.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    for i = 1, #arr do\n        if i <=\
    \ k then\n            table.insert(heap, arr[i])\n        else\n            local\
    \ min = math.min(table.unpack(heap))\n            if arr[i] > min then\n     \
    \           for j = 1, #heap do\n                    if heap[j] == min then\n\
    \                        heap[j] = arr[i]\n                        break\n   \
    \                 end\n                end\n            end\n        end\n   \
    \ end\n    table.sort(heap)\n    return heap\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9byhupbc.lua:22:\
    \ attempt to call field 'unpack' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9byhupbc.lua:22:\
    \ in function 'candidate'\\n\\t/tmp/tmp9byhupbc.lua:41: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot - 1)\n   \
    \         quickSort(arr, pivot + 1, r)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu4xm0spx.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpu4xm0spx.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function swap(arr, i, j)\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l + 1\n        for j = l + 1, r do\n            if arr[j] < pivot\
    \ then\n                swap(arr, i, j)\n                i = i + 1\n         \
    \   end\n        end\n        swap(arr, l, i - 1)\n        return i - 1\n    end\n\
    \    local function quickSelect(arr, l, r, k)\n        if l == r then return arr[l]\
    \ end\n        local p = partition(arr, l, r)\n        if p == k then return arr[p]\
    \ end\n        if p > k then\n            return quickSelect(arr, l, p - 1, k)\n\
    \        else\n            return quickSelect(arr, p + 1, r, k)\n        end\n\
    \    end\n    local pivot = quickSelect(arr, 1, n, k)\n    local res = {}\n  \
    \  for i = 1, n do\n        if arr[i] >= pivot then\n            res[#res + 1]\
    \ = arr[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeo4fn_sj.lua:67:\
    \ expected: {-4, -3, 5}\\nactual: {5}\\nstack traceback:\\n\\t/tmp/tmpeo4fn_sj.lua:67:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(l, r)\n  \
    \      local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quick_select(l,\
    \ r, k)\n        if l == r then\n            return\n        end\n        local\
    \ i = partition(l, r)\n        if i == k then\n            return\n        elseif\
    \ i > k then\n            quick_select(l, i - 1, k)\n        else\n          \
    \  quick_select(i + 1, r, k)\n        end\n    end\n    quick_select(1, n, k)\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpknuyv7e8.lua:50:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpknuyv7e8.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    local i = 1\n    while i\
    \ <= k do\n        local max = arr[i]\n        local max_i = i\n        for j\
    \ = i + 1, len do\n            if arr[j] > max then\n                max = arr[j]\n\
    \                max_i = j\n            end\n        end\n        res[i] = max\n\
    \        arr[max_i] = arr[i]\n        i = i + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvueuy3m0.lua:46:\
    \ expected: {2, 20, 123}\\nactual: {123, 20, 2}\\nstack traceback:\\n\\t/tmp/tmpvueuy3m0.lua:46:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then return arr[l] end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then\n            return arr[i]\n        elseif i >\
    \ k then\n            return quickSelect(arr, l, i - 1, k)\n        else\n   \
    \         return quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local\
    \ function quickSort(arr, l, r)\n        if l < r then\n            local i =\
    \ partition(arr, l, r)\n            quickSort(arr, l, i - 1)\n            quickSort(arr,\
    \ i + 1, r)\n        end\n    end\n    local pivot = quickSelect(arr, 1, n, k)\n\
    \    local res = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n  \
    \          res[#res + 1] = arr[i]\n        end\n    end\n    quickSort(res, 1,\
    \ #res)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz9wfjj12.lua:78:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpz9wfjj12.lua:78:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    local function swap(arr, i, j)\n\
    \        arr[i], arr[j] = arr[j], arr[i]\n    end\n    local function partition(arr,\
    \ l, r)\n        local pivot = arr[r]\n        local i = l\n        for j = l,\
    \ r - 1 do\n            if arr[j] > pivot then\n                swap(arr, i, j)\n\
    \                i = i + 1\n            end\n        end\n        swap(arr, i,\
    \ r)\n        return i\n    end\n    local function quickSelect(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ pivot = partition(arr, l, r)\n        if pivot == k then\n            return\
    \ arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, len, k)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmcx4rit3.lua:57:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpmcx4rit3.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return\n        end\n        local\
    \ p = partition(arr, l, r)\n        if p == k then\n            return\n     \
    \   elseif p < k then\n            quickSelect(arr, p + 1, r, k)\n        else\n\
    \            quickSelect(arr, l, p - 1, k)\n        end\n    end\n    quickSelect(arr,\
    \ 1, n, k)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzm70ei9e.lua:50:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpzm70ei9e.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ if i < j then\n                arr[i] = arr[j]\n                i = i + 1\n\
    \            end\n            while i < j and arr[i] >= pivot do\n           \
    \     i = i + 1\n            end\n            if i < j then\n                arr[j]\
    \ = arr[i]\n                j = j - 1\n            end\n        end\n        arr[i]\
    \ = pivot\n        return i\n    end\n    local function quickselect(arr, l, r,\
    \ k)\n        if l == r then return arr[l] end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return arr[p]\n        elseif p >\
    \ k then\n            return quickselect(arr, l, p - 1, k)\n        else\n   \
    \         return quickselect(arr, p + 1, r, k)\n        end\n    end\n    local\
    \ res = {}\n    local max = quickselect(arr, 1, n, k)\n    for i = 1, n do\n \
    \       if arr[i] >= max then\n            res[#res + 1] = arr[i]\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmeld8sg1.lua:76:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpmeld8sg1.lua:76:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, left, right)\n        if left\
    \ < right then\n            local pivot = partition(arr, left, right)\n      \
    \      quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot + 1,\
    \ right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpntnvsajj.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpntnvsajj.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    for i = 1, k do\n        heap[i] =\
    \ arr[i]\n    end\n    for i = k, 2, -1 do\n        if heap[i] < heap[i // 2]\
    \ then\n            heap[i], heap[i // 2] = heap[i // 2], heap[i]\n        end\n\
    \    end\n    for i = k + 1, #arr do\n        if arr[i] > heap[1] then\n     \
    \       heap[1] = arr[i]\n            for j = 1, k, 2 do\n                if heap[j]\
    \ > heap[j + 1] then\n                    heap[j], heap[j + 1] = heap[j + 1],\
    \ heap[j]\n                end\n            end\n        end\n    end\n    return\
    \ heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp9kdl_n03.lua:22: unexpected symbol near '/'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if len == 0 then\n        return\
    \ {}\n    end\n    if k == 0 then\n        return {}\n    end\n    if k >= len\
    \ then\n        table.sort(arr)\n        return arr\n    end\n    local res =\
    \ {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    for i = 1, #arr do\n        if i <=\
    \ k then\n            table.insert(heap, arr[i])\n        else\n            local\
    \ min = heap[1]\n            if arr[i] > min then\n                heap[1] = arr[i]\n\
    \                local j = 1\n                while j * 2 <= k do\n          \
    \          local l = j * 2\n                    local r = j * 2 + 1\n        \
    \            if r <= k then\n                        if heap[l] < heap[r] then\n\
    \                            if heap[j] > heap[r] then\n                     \
    \           heap[j], heap[r] = heap[r], heap[j]\n                            \
    \    j = r\n                            else\n                               \
    \ break\n                            end\n                        else\n     \
    \                       if heap[j] > heap[l] then\n                          \
    \      heap[j], heap[l] = heap[l], heap[j]\n                                j\
    \ = l\n                            else\n                                break\n\
    \                            end\n                        end\n              \
    \      else\n                        if heap[j] > heap[l] then\n             \
    \               heap[j], heap[l] = heap[l], heap[j]\n                        \
    \    j = l\n                        else\n                            break\n\
    \                        end\n                    end\n                end\n \
    \           end\n        end\n    end\n    for i = k, 2, -1 do\n        heap[1],\
    \ heap[i] = heap[i], heap[1]\n        local j = 1\n        while j * 2 <= i -\
    \ 1 do\n            local l = j * 2\n            local r = j * 2 + 1\n       \
    \     if r <= i - 1 then\n                if heap[l] < heap[r] then\n        \
    \            if heap[j] > heap[r] then\n                        heap[j], heap[r]\
    \ = heap[r], heap[j]\n                        j = r\n                    else\n\
    \                        break\n                    end\n                else\n\
    \                    if heap[j] > heap[l] then\n                        heap[j],\
    \ heap[l] = heap[l], heap[j]\n                        j = l\n                \
    \    else\n                        break\n                    end\n          \
    \      end\n            else\n                if heap[j] > heap[l] then\n    \
    \                heap[j], heap[l] =\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpj9k90up2.lua:82: unexpected symbol near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, left, right)\n        if left\
    \ < right then\n            local pivot = partition(arr, left, right)\n      \
    \      quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot + 1,\
    \ right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjt14yv79.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpjt14yv79.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    local function heapify(arr, i)\n \
    \       local l = i * 2\n        local r = i * 2 + 1\n        local largest =\
    \ i\n        if l <= #arr and arr[l] > arr[largest] then\n            largest\
    \ = l\n        end\n        if r <= #arr and arr[r] > arr[largest] then\n    \
    \        largest = r\n        end\n        if largest ~= i then\n            arr[i],\
    \ arr[largest] = arr[largest], arr[i]\n            heapify(arr, largest)\n   \
    \     end\n    end\n    local function build_heap(arr)\n        for i = math.floor(#arr\
    \ / 2), 1, -1 do\n            heapify(arr, i)\n        end\n    end\n    local\
    \ function heap_sort(arr)\n        build_heap(arr)\n        for i = #arr, 2, -1\
    \ do\n            arr[1], arr[i] = arr[i], arr[1]\n            table.remove(arr)\n\
    \            heapify(arr, 1)\n        end\n    end\n    for i = 1, #arr do\n \
    \       table.insert(heap, arr[i])\n        heap_sort(heap)\n        if #heap\
    \ > k then\n            table.remove(heap, 1)\n        end\n    end\n    return\
    \ heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgpj58n6h.lua:59:\
    \ expected: {-4, -3, 5}\\nactual: {-4}\\nstack traceback:\\n\\t/tmp/tmpgpj58n6h.lua:59:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l + 1\n\
    \        local j = r\n        while true do\n            while i <= r and arr[i]\
    \ > pivot do i = i + 1 end\n            while j >= l + 1 and arr[j] < pivot do\
    \ j = j - 1 end\n            if i >= j then break end\n            arr[i], arr[j]\
    \ = arr[j], arr[i]\n            i = i + 1\n            j = j - 1\n        end\n\
    \        arr[l], arr[j] = arr[j], arr[l]\n        return j\n    end\n    local\
    \ function quickSelect(arr, l, r, k)\n        local p = partition(arr, l, r)\n\
    \        if p == k then return end\n        if p > k then\n            quickSelect(arr,\
    \ l, p - 1, k)\n        else\n            quickSelect(arr, p + 1, r, k)\n    \
    \    end\n    end\n    quickSelect(arr, 1, n, k)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxgh1bncb.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpxgh1bncb.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        local j = 1\n        while j <= k and arr[i]\
    \ > res[j] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          table.insert(res, j, arr[i])\n            table.remove(res, k + 1)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdb4v9qgq.lua:51:\
    \ expected: {4, 4}\\nactual: {-4, 4}\\nstack traceback:\\n\\t/tmp/tmpdb4v9qgq.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4apn217o.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp4apn217o.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmp4apn217o.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        local j = 1\n        while j <= k do\n            if arr[i] > res[j]\
    \ then\n                table.remove(res, j)\n                table.insert(res,\
    \ j, arr[i])\n                break\n            end\n            j = j + 1\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqg6pb0cq.lua:48:\
    \ expected: {0, 1, 2, 20}\\nactual: {2, 0, 1, 20}\\nstack traceback:\\n\\t/tmp/tmpqg6pb0cq.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    local function heap_push(heap, val)\n\
    \        local i = #heap + 1\n        heap[i] = val\n        while i > 1 do\n\
    \            local j = math.floor(i / 2)\n            if heap[j] < heap[i] then\n\
    \                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n\
    \            else\n                break\n            end\n        end\n    end\n\
    \    local function heap_pop(heap)\n        local val = heap[1]\n        heap[1]\
    \ = heap[#heap]\n        heap[#heap] = nil\n        local i = 1\n        while\
    \ i * 2 <= #heap do\n            local j = i * 2\n            if j + 1 <= #heap\
    \ and heap[j] < heap[j + 1] then\n                j = j + 1\n            end\n\
    \            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j],\
    \ heap[i]\n                i = j\n            else\n                break\n  \
    \          end\n        end\n        return val\n    end\n    for i = 1, #arr\
    \ do\n        if #heap < k then\n            heap_push(heap, arr[i])\n       \
    \ elseif arr[i] > heap[1] then\n            heap_pop(heap)\n            heap_push(heap,\
    \ arr[i])\n        end\n    end\n    local res = {}\n    for i = 1, #heap do\n\
    \        res[i] = heap_pop(heap)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp15ehgpke.lua:68:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp15ehgpke.lua:68:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 1, -1 do\n        local j = i\n        while j * 2 <= k do\n          \
    \  local l = j * 2\n            local r = l + 1\n            if r <= k and heap[r]\
    \ > heap[l] then\n                l = r\n            end\n            if heap[j]\
    \ < heap[l] then\n                heap[j], heap[l] = heap[l], heap[j]\n      \
    \          j = l\n            else\n                break\n            end\n \
    \       end\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1] then\n\
    \            heap[1] = arr[i]\n            local j = 1\n            while j *\
    \ 2 <= k do\n                local l = j * 2\n                local r = l + 1\n\
    \                if r <= k and heap[r] > heap[l] then\n                    l =\
    \ r\n                end\n                if heap[j] < heap[l] then\n        \
    \            heap[j], heap[l] = heap[l], heap[j]\n                    j = l\n\
    \                else\n                    break\n                end\n      \
    \      end\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp46rah8gs.lua:74:\
    \ expected: {-4, -3, 5}\\nactual: {5, -4, -3}\\nstack traceback:\\n\\t/tmp/tmp46rah8gs.lua:74:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ p = partition(arr, l, r)\n            quickSort(arr, l, p - 1)\n           \
    \ quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpov2xddsl.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpov2xddsl.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp5jc5ml_m.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmp5jc5ml_m.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmp5jc5ml_m.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local i = partition(arr, l, r)\n   \
    \     if i == k then\n            return arr[i]\n        elseif i > k then\n \
    \           return quickSelect(arr, l, i - 1, k)\n        else\n            return\
    \ quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local function quickSelect2(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local i = partition(arr, l, r)\n        if i == k then\n            return\
    \ arr[i]\n        elseif i > k then\n            return quickSelect2(arr, l, i\
    \ - 1, k)\n        else\n            return quickSelect2(arr, i + 1, r, k - i\
    \ - 1)\n        end\n    end\n    local function quickSelect3(arr, l, r, k)\n\
    \        if l == r then\n            return arr[l]\n        end\n        local\
    \ i = partition(arr, l, r)\n        if i == k then\n            return arr[i]\n\
    \        elseif i > k then\n            return quickSelect3(arr, l, i - 1, k)\n\
    \        else\n            return quickSelect3(arr, i + 1, r, k)\n        end\n\
    \    end\n    local function quickSelect4(arr, l, r, k)\n        if l == r then\n\
    \            return arr[l]\n        end\n        local i = partition(arr, l, r)\n\
    \        if i\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp3_ulsrj5.lua:79: 'then' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quick_sort(arr, l, r)\n        if l < r then\n            local\
    \ m = partition(arr, l, r)\n            quick_sort(arr, l, m - 1)\n          \
    \  quick_sort(arr, m + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9w_zyxs6.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp9w_zyxs6.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    quickSelect(arr, 1, len, len\
    \ - k + 1)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkbg5qqio.lua:60:\
    \ expected: {4, 4}\\nactual: {4, 4, -4}\\nstack traceback:\\n\\t/tmp/tmpkbg5qqio.lua:60:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l + 1\n        local j = r\n        while true do\n\
    \            while i <= r and arr[i] >= pivot do\n                i = i + 1\n\
    \            end\n            while j >= l + 1 and arr[j] <= pivot do\n      \
    \          j = j - 1\n            end\n            if i >= j then\n          \
    \      break\n            end\n            arr[i], arr[j] = arr[j], arr[i]\n \
    \       end\n        arr[l], arr[j] = arr[j], arr[l]\n        return j\n    end\n\
    \    local function quickselect(arr, l, r, k)\n        if l == r then\n      \
    \      return arr[l]\n        end\n        local j = partition(arr, l, r)\n  \
    \      if j == k then\n            return arr[j]\n        elseif j > k then\n\
    \            return quickselect(arr, l, j - 1, k)\n        else\n            return\
    \ quickselect(arr, j + 1, r, k)\n        end\n    end\n    local function quicksort(arr,\
    \ l, r)\n        if l >= r then\n            return\n        end\n        local\
    \ j = partition(arr, l, r)\n        quicksort(arr, l, j - 1)\n        quicksort(arr,\
    \ j + 1, r)\n    end\n    local n = #arr\n    local kth = quickselect(arr, 1,\
    \ n, n - k + 1)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >=\
    \ kth then\n            res[#res + 1] = arr[i]\n        end\n    end\n    quicksort(res,\
    \ 1, #res)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpravut2ce.lua:72:\
    \ expected: {-4, -3, 5}\\nactual: {5}\\nstack traceback:\\n\\t/tmp/tmpravut2ce.lua:72:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickSelect(arr, l, r,\
    \ k)\n        if l == r then\n            return arr[l]\n        end\n       \
    \ local p = partition(arr, l, r)\n        if p == k then\n            return arr[p]\n\
    \        elseif p > k then\n            return quickSelect(arr, l, p - 1, k)\n\
    \        else\n            return quickSelect(arr, p + 1, r, k)\n        end\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l < r then\n   \
    \         local p = partition(arr, l, r)\n            quickSort(arr, l, p - 1)\n\
    \            quickSort(arr, p + 1, r)\n        end\n    end\n    local n = #arr\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = quickSelect(arr, 1,\
    \ n, i)\n    end\n    quickSort(res, 1, k)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqg1s8la7.lua:61:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpqg1s8la7.lua:61:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    for i = 1, #arr do\n        if i <=\
    \ k then\n            heap[i] = arr[i]\n        else\n            table.sort(heap)\n\
    \            if arr[i] > heap[1] then\n                heap[1] = arr[i]\n    \
    \        end\n        end\n    end\n    table.sort(heap)\n    return heap\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwgsh7nq5.lua:23:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpwgsh7nq5.lua:23:\
    \ in function 'candidate'\\n\\t/tmp/tmpwgsh7nq5.lua:45: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function swap(arr, i, j)\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[l]\n     \
    \   local i = l\n        for j = l + 1, r do\n            if arr[j] < pivot then\n\
    \                i = i + 1\n                swap(arr, i, j)\n            end\n\
    \        end\n        swap(arr, l, i)\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then return arr[l] end\n      \
    \  local pivot = partition(arr, l, r)\n        if pivot == k then\n          \
    \  return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local max = quickSelect(arr, 1, n, n - k\
    \ + 1)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >= max then\n\
    \            res[#res + 1] = arr[i]\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n\
    \                i = i + 1\n            end\n            arr[j] = arr[i]\n   \
    \     end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, left, right, k)\n        if left == right then return arr[left]\
    \ end\n        local pivot = partition(arr, left, right)\n        if pivot ==\
    \ k then return arr[pivot] end\n        if pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    local res = {}\n    for i =\
    \ 1, k do\n        res[i] = quickSelect(arr, 1, n, i)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnw3ilpia.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpnw3ilpia.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then\n            return arr[i]\n        elseif i >\
    \ k then\n            return quickSelect(arr, l, i - 1, k)\n        else\n   \
    \         return quickSelect(arr, i + 1, r, k)\n        end\n    end\n    quickSelect(arr,\
    \ 1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1, n do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1utisaq5.lua:59:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp1utisaq5.lua:59:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ i = partition(arr, l, r)\n            quickSort(arr, l, i - 1)\n           \
    \ quickSort(arr, i + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw_s6_qtq.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpw_s6_qtq.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quick_sort(arr, l, r)\n        if l < r then\n            local\
    \ m = partition(arr, l, r)\n            quick_sort(arr, l, m - 1)\n          \
    \  quick_sort(arr, m + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8vuqtp2a.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp8vuqtp2a.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, left, right, k)\n        if\
    \ left == right then\n            return arr[left]\n        end\n        local\
    \ pivot = partition(arr, left, right)\n        if pivot == k then\n          \
    \  return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ left, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot\
    \ + 1, right, k)\n        end\n    end\n    quickSelect(arr, 1, #arr, #arr - k\
    \ + 1)\n    local res = {}\n    for i = #arr - k + 1, #arr do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnf893un2.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpnf893un2.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function helper(arr, l, r, k)\n        if l == r then return arr[l] end\n  \
    \      local i, j = l, r\n        local pivot = arr[l]\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        if i - l + 1 == k then\n\
    \            return pivot\n        elseif i - l + 1 > k then\n            return\
    \ helper(arr, l, i - 1, k)\n        else\n            return helper(arr, i + 1,\
    \ r, k - (i - l + 1))\n        end\n    end\n    local pivot = helper(arr, 1,\
    \ n, k)\n    local res = {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n\
    \            res[#res + 1] = arr[i]\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpacp2alxc.lua:65:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpacp2alxc.lua:65:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local i = partition(arr, l, r)\n        if i == k then\n            return\
    \ arr[i]\n        elseif i > k then\n            return quickSelect(arr, l, i\
    \ - 1, k)\n        else\n            return quickSelect(arr, i + 1, r, k)\n  \
    \      end\n    end\n    quickSelect(arr, 1, n, k)\n    return arr\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp59yp__lx.lua:50:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp59yp__lx.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, l, r)\n        if l >= r then\n            return\n\
    \        end\n        local mid = partition(arr, l, r)\n        quickSort(arr,\
    \ l, mid - 1)\n        quickSort(arr, mid + 1, r)\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplg3z0guf.lua:53:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmplg3z0guf.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        local j = 1\n        while j <= k and res[j]\
    \ < arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          for l = k, j + 1, -1 do\n                res[l] = res[l - 1]\n    \
    \        end\n            res[j] = arr[i]\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaql5ejth.lua:44:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpaql5ejth.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    for i = k +\
    \ 1, n do\n        local j = 1\n        while j <= k and res[j] < arr[i] do\n\
    \            j = j + 1\n        end\n        if j <= k then\n            for l\
    \ = k, j + 1, -1 do\n                res[l] = res[l - 1]\n            end\n  \
    \          res[j] = arr[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf70ud13x.lua:43:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpf70ud13x.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    for i = 1, k do\n        heap[i] =\
    \ arr[i]\n    end\n    for i = k, 2, -1 do\n        if heap[i] < heap[i >> 1]\
    \ then\n            heap[i], heap[i >> 1] = heap[i >> 1], heap[i]\n        end\n\
    \    end\n    for i = k + 1, #arr do\n        if arr[i] > heap[1] then\n     \
    \       heap[1] = arr[i]\n            for j = 1, k >> 1 do\n                if\
    \ heap[j] > heap[j << 1] and heap[j] > heap[j << 1 | 1] then\n               \
    \     break\n                elseif heap[j << 1] > heap[j << 1 | 1] then\n   \
    \                 heap[j], heap[j << 1] = heap[j << 1], heap[j]\n            \
    \        j = j << 1\n                else\n                    heap[j], heap[j\
    \ << 1 | 1] = heap[j << 1 | 1], heap[j]\n                    j = j << 1 | 1\n\
    \                end\n            end\n        end\n    end\n    for i = k, 2,\
    \ -1 do\n        heap[i], heap[i >> 1] = heap[i >> 1], heap[i]\n    end\n    return\
    \ heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpviwb0ms8.lua:22: unexpected symbol near '>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[r]\n        local i\
    \ = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n     \
    \           arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n     \
    \       end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n        return\
    \ i\n    end\n    local function quick_select(arr, l, r, k)\n        if l == r\
    \ then return arr[l] end\n        local p = partition(arr, l, r)\n        if p\
    \ == k then return arr[p] end\n        if p > k then\n            return quick_select(arr,\
    \ l, p - 1, k)\n        else\n            return quick_select(arr, p + 1, r, k)\n\
    \        end\n    end\n    local max = quick_select(arr, 1, n, k)\n    local res\
    \ = {}\n    for i = 1, n do\n        if arr[i] >= max then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2_hosu97.lua:64:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp2_hosu97.lua:64:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 1, -1 do\n        local j = i\n        while j <= k do\n            local\
    \ l = j * 2\n            local r = l + 1\n            if l <= k and heap[l] <\
    \ heap[j] then\n                heap[l], heap[j] = heap[j], heap[l]\n        \
    \        j = l\n            elseif r <= k and heap[r] < heap[j] then\n       \
    \         heap[r], heap[j] = heap[j], heap[r]\n                j = r\n       \
    \     else\n                break\n            end\n        end\n    end\n   \
    \ for i = k + 1, n do\n        if arr[i] > heap[1] then\n            heap[1] =\
    \ arr[i]\n            local j = 1\n            while j <= k do\n             \
    \   local l = j * 2\n                local r = l + 1\n                if l <=\
    \ k and heap[l] < heap[j] then\n                    heap[l], heap[j] = heap[j],\
    \ heap[l]\n                    j = l\n                elseif r <= k and heap[r]\
    \ < heap[j] then\n                    heap[r], heap[j] = heap[j], heap[r]\n  \
    \                  j = r\n                else\n                    break\n  \
    \              end\n            end\n        end\n    end\n    return heap\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwmaw093e.lua:77:\
    \ expected: {2, 20, 123}\\nactual: {2, 123, 20}\\nstack traceback:\\n\\t/tmp/tmpwmaw093e.lua:77:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        local j = 1\n        while j <= k and res[j]\
    \ < arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          for l = k, j + 1, -1 do\n                res[l] = res[l - 1]\n    \
    \        end\n            res[j] = arr[i]\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmply5up4nt.lua:44:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmply5up4nt.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    if\
    \ k >= n then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        local j = 1\n        while j <= k and res[j]\
    \ < arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          for m = k, j + 1, -1 do\n                res[m] = res[m - 1]\n    \
    \        end\n            res[j] = arr[i]\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvxvbaqxz.lua:57:\
    \ expected: {4, 4}\\nactual: {-4, 4}\\nstack traceback:\\n\\t/tmp/tmpvxvbaqxz.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if len == 0 then\n        return\
    \ {}\n    end\n    if k == 0 then\n        return {}\n    end\n    if k == len\
    \ then\n        return arr\n    end\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[l]\n        local i = l\n        local j = r\n    \
    \    while i < j do\n            while i < j and arr[j] <= pivot do\n        \
    \        j = j - 1\n            end\n            arr[i] = arr[j]\n           \
    \ while i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n\
    \            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, l, r, k)\n        if l == r\
    \ then\n            return arr[l]\n        end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    local res = {}\n    for i = 1, k do\n        res[i] = quickSelect(arr,\
    \ 1, len, i)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2nw0v3zy.lua:67:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmp2nw0v3zy.lua:67:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, low, high)\n        local\
    \ pivot = arr[high]\n        local i = low - 1\n        for j = low, high - 1\
    \ do\n            if arr[j] > pivot then\n                i = i + 1\n        \
    \        arr[i], arr[j] = arr[j], arr[i]\n            end\n        end\n     \
    \   arr[i + 1], arr[high] = arr[high], arr[i + 1]\n        return i + 1\n    end\n\
    \    local function quickSort(arr, low, high)\n        if low < high then\n  \
    \          local p = partition(arr, low, high)\n            quickSort(arr, low,\
    \ p - 1)\n            quickSort(arr, p + 1, high)\n        end\n    end\n    quickSort(arr,\
    \ 1, #arr)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8_e32ekc.lua:47:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp8_e32ekc.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpar4rkub_.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpar4rkub_.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmpar4rkub_.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quick_select(arr, l, r,\
    \ k)\n        if l == r then\n            return arr[l]\n        end\n       \
    \ local pivot = partition(arr, l, r)\n        if pivot == k then\n           \
    \ return arr[pivot]\n        elseif pivot > k then\n            return quick_select(arr,\
    \ l, pivot - 1, k)\n        else\n            return quick_select(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    return quick_select(arr, 1, #arr, k)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsbu1o15w.lua:48:\
    \ expected: {-4, -3, 5}\\nactual: -4\\nstack traceback:\\n\\t/tmp/tmpsbu1o15w.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quick_select(arr, l, r,\
    \ k)\n        if l == r then\n            return arr[l]\n        end\n       \
    \ local i = partition(arr, l, r)\n        if i == k then\n            return arr[i]\n\
    \        elseif i > k then\n            return quick_select(arr, l, i - 1, k)\n\
    \        else\n            return quick_select(arr, i + 1, r, k)\n        end\n\
    \    end\n    local function quick_sort(arr, l, r)\n        if l >= r then\n \
    \           return\n        end\n        local i = partition(arr, l, r)\n    \
    \    quick_sort(arr, l, i - 1)\n        quick_sort(arr, i + 1, r)\n    end\n \
    \   quick_sort(arr, 1, #arr)\n    return arr\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjdgaqppu.lua:57:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpjdgaqppu.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local i = partition(arr, l, r)\n   \
    \     if i == k then\n            return arr[i]\n        elseif i > k then\n \
    \           return quickSelect(arr, l, i - 1, k)\n        else\n            return\
    \ quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local i = partition(arr, l, r)\n \
    \           quickSort(arr, l, i - 1)\n            quickSort(arr, i + 1, r)\n \
    \       end\n    end\n    local n = #arr\n    local res = {}\n    for i = 1, k\
    \ do\n        res[i] = quickSelect(arr, 1, n, i)\n    end\n    quickSort(res,\
    \ 1, k)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd5xlh6au.lua:66:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpd5xlh6au.lua:66:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(l, r)\n  \
    \      local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(l,\
    \ r, k)\n        if l < r then\n            local p = partition(l, r)\n      \
    \      if p == k then\n                return\n            elseif p < k then\n\
    \                quickSelect(p + 1, r, k)\n            else\n                quickSelect(l,\
    \ p - 1, k)\n            end\n        end\n    end\n    quickSelect(1, n, n -\
    \ k + 1)\n    local res = {}\n    for i = n - k + 1, n do\n        res[#res +\
    \ 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn2dr5j2n.lua:53:\
    \ expected: {-4, -3, 5}\\nactual: {5, -4, -3}\\nstack traceback:\\n\\t/tmp/tmpn2dr5j2n.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ p = partition(arr, l, r)\n            quickSort(arr, l, p - 1)\n           \
    \ quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf4h1q_ok.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpf4h1q_ok.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    for i = k +\
    \ 1, n do\n        local j = 1\n        while j <= k and res[j] > arr[i] do\n\
    \            j = j + 1\n        end\n        if j <= k then\n            for l\
    \ = k, j + 1, -1 do\n                res[l] = res[l - 1]\n            end\n  \
    \          res[j] = arr[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpenvyx4eg.lua:43:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpenvyx4eg.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function quickselect(l, r)\n\
    \        local i, j = l, r\n        local pivot = arr[l]\n        while i < j\
    \ do\n            while i < j and arr[j] <= pivot do\n                j = j -\
    \ 1\n            end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        if i == k then\n     \
    \       return\n        elseif i > k then\n            quickselect(l, i - 1)\n\
    \        else\n            quickselect(i + 1, r)\n        end\n    end\n    quickselect(1,\
    \ n)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdtik4o6m.lua:57:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpdtik4o6m.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickSelect(arr, l, r,\
    \ k)\n        if l == r then\n            return arr[l]\n        end\n       \
    \ local p = partition(arr, l, r)\n        if p == k then\n            return arr[p]\n\
    \        elseif p > k then\n            return quickSelect(arr, l, p - 1, k)\n\
    \        else\n            return quickSelect(arr, p + 1, r, k)\n        end\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l < r then\n   \
    \         local p = partition(arr, l, r)\n            quickSort(arr, l, p - 1)\n\
    \            quickSort(arr, p + 1, r)\n        end\n    end\n    local n = #arr\n\
    \    quickSort(arr, 1, n)\n    return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq7qml7c8.lua:57:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpq7qml7c8.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    local function partition(arr, left,\
    \ right)\n        local pivot = arr[left]\n        local i = left\n        local\
    \ j = right\n        while i < j do\n            while i < j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            arr[i] = arr[j]\n\
    \            while i < j and arr[i] >= pivot do\n                i = i + 1\n \
    \           end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n\
    \        return i\n    end\n    local function quickSelect(arr, left, right, k)\n\
    \        if left == right then\n            return arr[left]\n        end\n  \
    \      local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return arr[pivot]\n        elseif pivot > k then\n            return\
    \ quickSelect(arr, left, pivot - 1, k)\n        else\n            return quickSelect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    local function quickSort(arr,\
    \ left, right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    quickSelect(arr, 1, len, len -\
    \ k + 1)\n    quickSort(arr, len - k + 1, len)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzm56ovl5.lua:63:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpzm56ovl5.lua:63:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ m = partition(arr, l, r)\n            quickSort(arr, l, m - 1)\n           \
    \ quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8_8x4ufq.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp8_8x4ufq.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, left, right)\n        if left\
    \ < right then\n            local mid = partition(arr, left, right)\n        \
    \    quickSort(arr, left, mid - 1)\n            quickSort(arr, mid + 1, right)\n\
    \        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp35qr1gwh.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp35qr1gwh.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l >= r then return end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return\n        elseif p > k then\n\
    \            quickSelect(arr, l, p - 1, k)\n        else\n            quickSelect(arr,\
    \ p + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7q5sme52.lua:64:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp7q5sme52.lua:64:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if len == 0 then\n        return\
    \ {}\n    end\n    if k == 0 then\n        return {}\n    end\n    if k == len\
    \ then\n        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, left, right)\n  \
    \      if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, len)\n    local res\
    \ = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res, arr[i])\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt9ih5awt.lua:62:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpt9ih5awt.lua:62:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(arr, l, r)\n\
    \        local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local i = partition(arr, l, r)\n        if i == k then\n            return\
    \ arr[i]\n        elseif i > k then\n            return quickselect(arr, l, i\
    \ - 1, k)\n        else\n            return quickselect(arr, i + 1, r, k)\n  \
    \      end\n    end\n    quickselect(arr, 1, n, k)\n    return arr\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8lr7nbny.lua:50:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp8lr7nbny.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqx4_o0_g.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpqx4_o0_g.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmpqx4_o0_g.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    local function heapify(i)\n      \
    \  local l = i * 2\n        local r = i * 2 + 1\n        local smallest = i\n\
    \        if l <= #heap and heap[l] < heap[smallest] then\n            smallest\
    \ = l\n        end\n        if r <= #heap and heap[r] < heap[smallest] then\n\
    \            smallest = r\n        end\n        if smallest ~= i then\n      \
    \      heap[i], heap[smallest] = heap[smallest], heap[i]\n            heapify(smallest)\n\
    \        end\n    end\n    local function insert(x)\n        heap[#heap + 1] =\
    \ x\n        local i = #heap\n        while i > 1 and heap[i] < heap[i // 2] do\n\
    \            heap[i], heap[i // 2] = heap[i // 2], heap[i]\n            i = i\
    \ // 2\n        end\n    end\n    local function pop()\n        local x = heap[1]\n\
    \        heap[1] = heap[#heap]\n        heap[#heap] = nil\n        heapify(1)\n\
    \        return x\n    end\n    for i = 1, #arr do\n        if #heap < k then\n\
    \            insert(arr[i])\n        elseif arr[i] > heap[1] then\n          \
    \  pop()\n            insert(arr[i])\n        end\n    end\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = pop()\n    end\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp8dgvhv7q.lua:36: unexpected symbol near '/'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == 0 then\n        return {}\n\
    \    elseif k == len then\n        return arr\n    end\n    local res = {}\n \
    \   for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n \
    \   for i = k + 1, len do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpofg08ns5.lua:40:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpofg08ns5.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpeu1l1cia.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpeu1l1cia.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmpeu1l1cia.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    for i = 1, k do\n        heap[i] =\
    \ arr[i]\n    end\n    for i = k, 1, -1 do\n        heapify(heap, i, k)\n    end\n\
    \    for i = k + 1, #arr do\n        if arr[i] > heap[1] then\n            heap[1]\
    \ = arr[i]\n            heapify(heap, 1, k)\n        end\n    end\n    return\
    \ heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpp9bkr9nu.lua:22:\
    \ attempt to call global 'heapify' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpp9bkr9nu.lua:22:\
    \ in function 'candidate'\\n\\t/tmp/tmpp9bkr9nu.lua:36: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ m = partition(arr, l, r)\n            quickSort(arr, l, m - 1)\n           \
    \ quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpskhunhns.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpskhunhns.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l + 1\n\
    \        local j = r\n        while true do\n            while i <= r and arr[i]\
    \ >= pivot do i = i + 1 end\n            while j >= l + 1 and arr[j] <= pivot\
    \ do j = j - 1 end\n            if i >= j then break end\n            arr[i],\
    \ arr[j] = arr[j], arr[i]\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n\
    \        return j\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then return arr[l] end\n        local j = partition(arr, l, r)\n\
    \        if j == k then return arr[j] end\n        if j > k then return quickSelect(arr,\
    \ l, j - 1, k) end\n        return quickSelect(arr, j + 1, r, k)\n    end\n  \
    \  local function quickSelect2(arr, l, r, k)\n        if l == r then return arr[l]\
    \ end\n        local pivot = arr[l]\n        local i = l + 1\n        local j\
    \ = r\n        while true do\n            while i <= r and arr[i] >= pivot do\
    \ i = i + 1 end\n            while j >= l + 1 and arr[j] <= pivot do j = j - 1\
    \ end\n            if i >= j then break end\n            arr[i], arr[j] = arr[j],\
    \ arr[i]\n        end\n        arr[l], arr[j] = arr[j], arr[l]\n        if j ==\
    \ k then return arr[j] end\n        if j > k then return quickSelect2(arr, l,\
    \ j - 1, k) end\n        return quickSelect2(arr, j + 1, r, k)\n    end\n    local\
    \ function quickSelect3(arr, l, r, k)\n        if l == r then return arr[l] end\n\
    \        local pivot = arr[\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpo2jmcgmb.lua:60: ']' expected near '='\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local heap\
    \ = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i = k,\
    \ 1, -1 do\n        heapify(heap, i, k)\n    end\n    for i = k + 1, n do\n  \
    \      if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            heapify(heap,\
    \ 1, k)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx4zlhh0_.lua:40:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpx4zlhh0_.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n           \
    \ if arr[j] > pivot then\n                i = i + 1\n                arr[i], arr[j]\
    \ = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r] =\
    \ arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local p = partition(arr, l, r)\n \
    \           quickSort(arr, l, p - 1)\n            quickSort(arr, p + 1, r)\n \
    \       end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for\
    \ i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprmki50sa.lua:47:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmprmki50sa.lua:47:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, left, right)\n        if left < right\
    \ then\n            local mid = partition(arr, left, right)\n            quickSort(arr,\
    \ left, mid - 1)\n            quickSort(arr, mid + 1, right)\n        end\n  \
    \  end\n    quickSort(arr, 1, #arr)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcsk967tm.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpcsk967tm.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    local res = {}\n    for i = 1, k\
    \ do\n        res[i] = arr[i]\n    end\n    for i = k + 1, len do\n        local\
    \ j = 1\n        while j <= k and res[j] < arr[i] do\n            j = j + 1\n\
    \        end\n        if j <= k then\n            for l = k, j + 1, -1 do\n  \
    \              res[l] = res[l - 1]\n            end\n            res[j] = arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7_u6ty7v.lua:40:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmp7_u6ty7v.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(l, r)\n  \
    \      local pivot = arr[l]\n        local i, j = l, r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local l, r = 1, n\n    while l <= r do\n        local m = partition(l, r)\n\
    \        if m == k then\n            break\n        elseif m < k then\n      \
    \      l = m + 1\n        else\n            r = m - 1\n        end\n    end\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpykhbivcv.lua:55:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpykhbivcv.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    if\
    \ k == n then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 1, -1 do\n        local j = i * 2\n        while j <= k do\n          \
    \  if j < k and heap[j] < heap[j + 1] then\n                j = j + 1\n      \
    \      end\n            if heap[i] >= heap[j] then\n                break\n  \
    \          end\n            heap[i], heap[j] = heap[j], heap[i]\n            i\
    \ = j\n            j = i * 2\n        end\n    end\n    for i = k + 1, n do\n\
    \        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            local\
    \ j = 1\n            local k = j * 2\n            while k <= k do\n          \
    \      if k < k and heap[k] < heap[k + 1] then\n                    k = k + 1\n\
    \                end\n                if heap[j] >= heap[k] then\n           \
    \         break\n                end\n                heap[j], heap[k] = heap[k],\
    \ heap[j]\n                j = k\n                k = j * 2\n            end\n\
    \        end\n    end\n    table.sort(heap)\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi37q_2g0.lua:77:\
    \ expected: {4, 4}\\nactual: {-4, 4}\\nstack traceback:\\n\\t/tmp/tmpi37q_2g0.lua:77:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, left, right, k)\n        if left == right then\n          \
    \  return arr[left]\n        end\n        local pivot = partition(arr, left, right)\n\
    \        if pivot == k then\n            return arr[pivot]\n        elseif pivot\
    \ > k then\n            return quickSelect(arr, left, pivot - 1, k)\n        else\n\
    \            return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n\
    \    local pivot = quickSelect(arr, 1, n, k)\n    local res = {}\n    for i =\
    \ 1, n do\n        if arr[i] >= pivot then\n            res[#res + 1] = arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz4f6y2rm.lua:72:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpz4f6y2rm.lua:72:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ m = partition(arr, l, r)\n            quickSort(arr, l, m - 1)\n           \
    \ quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd5dkazeu.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpd5dkazeu.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmmbn8tys.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpmmbn8tys.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmpmmbn8tys.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  local max = -math.huge\n        local idx = 0\n        for j = 1, len do\n\
    \            if arr[j] > max then\n                max = arr[j]\n            \
    \    idx = j\n            end\n        end\n        res[i] = max\n        arr[idx]\
    \ = -math.huge\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi0hgnqjw.lua:44:\
    \ expected: {2, 20, 123}\\nactual: {123, 20, 2}\\nstack traceback:\\n\\t/tmp/tmpi0hgnqjw.lua:44:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local pivot = partition(arr, l, r)\n\
    \        if pivot == k then\n            return arr[pivot]\n        elseif pivot\
    \ > k then\n            return quickSelect(arr, l, pivot - 1, k)\n        else\n\
    \            return quickSelect(arr, pivot + 1, r, k)\n        end\n    end\n\
    \    local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ pivot = partition(arr, l, r)\n            quickSort(arr, l, pivot - 1)\n   \
    \         quickSort(arr, pivot + 1, r)\n        end\n    end\n    local n = #arr\n\
    \    quickSelect(arr, 1, n, n - k + 1)\n    quickSort(arr, n - k + 1, n)\n   \
    \ return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm_le66xf.lua:63:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpm_le66xf.lua:63:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    local function push(x)\n        local\
    \ i = #heap + 1\n        heap[i] = x\n        while i > 1 do\n            local\
    \ j = math.floor(i / 2)\n            if heap[j] < heap[i] then\n             \
    \   heap[i], heap[j] = heap[j], heap[i]\n                i = j\n            else\n\
    \                break\n            end\n        end\n    end\n    local function\
    \ pop()\n        local i = 1\n        local x = heap[i]\n        heap[i] = heap[#heap]\n\
    \        heap[#heap] = nil\n        while i < #heap do\n            local j =\
    \ i * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n      \
    \          j = j + 1\n            end\n            if heap[i] < heap[j] then\n\
    \                heap[i], heap[j] = heap[j], heap[i]\n                i = j\n\
    \            else\n                break\n            end\n        end\n     \
    \   return x\n    end\n    for i = 1, #arr do\n        if #heap < k then\n   \
    \         push(arr[i])\n        elseif arr[i] > heap[1] then\n            pop()\n\
    \            push(arr[i])\n        end\n    end\n    local res = {}\n    for i\
    \ = 1, k do\n        res[i] = pop()\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcf04a9w1.lua:68:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpcf04a9w1.lua:68:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ p = partition(arr, l, r)\n            quickSort(arr, l, p - 1)\n           \
    \ quickSort(arr, p + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu2sn89hm.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpu2sn89hm.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ partition(arr, left, right)\n        local pivot = arr[left]\n        local\
    \ i = left\n        local j = right\n        while i < j do\n            while\
    \ i < j and arr[j] <= pivot do\n                j = j - 1\n            end\n \
    \           if i < j then\n                arr[i] = arr[j]\n                i\
    \ = i + 1\n            end\n            while i < j and arr[i] >= pivot do\n \
    \               i = i + 1\n            end\n            if i < j then\n      \
    \          arr[j] = arr[i]\n                j = j - 1\n            end\n     \
    \   end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickselect(arr, left, right, k)\n        if left == right then return arr[left]\
    \ end\n        local pivot = partition(arr, left, right)\n        if pivot ==\
    \ k then return arr[pivot] end\n        if pivot > k then\n            return\
    \ quickselect(arr, left, pivot - 1, k)\n        else\n            return quickselect(arr,\
    \ pivot + 1, right, k)\n        end\n    end\n    quickselect(arr, 1, n, n - k\
    \ + 1)\n    local res = {}\n    for i = n - k + 1, n do\n        res[#res + 1]\
    \ = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps7ce4boy.lua:65:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmps7ce4boy.lua:65:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local i = partition(arr, l, r)\n   \
    \     if i == k then\n            return arr[i]\n        elseif i > k then\n \
    \           return quickSelect(arr, l, i - 1, k)\n        else\n            return\
    \ quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local i = partition(arr, l, r)\n \
    \           quickSort(arr, l, i - 1)\n            quickSort(arr, i + 1, r)\n \
    \       end\n    end\n    local n = #arr\n    if n == k then\n        return arr\n\
    \    end\n    local pivot = quickSelect(arr, 1, n, n - k + 1)\n    local res =\
    \ {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    quickSort(res, 1, #res)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8jl12lux.lua:72:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmp8jl12lux.lua:72:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    local res = {}\n    for i = 1, k\
    \ do\n        local max = arr[i]\n        local idx = i\n        for j = i + 1,\
    \ len do\n            if arr[j] > max then\n                max = arr[j]\n   \
    \             idx = j\n            end\n        end\n        res[i] = max\n  \
    \      arr[idx] = arr[i]\n        arr[i] = max\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpctp85ayc.lua:38:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpctp85ayc.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function swap(i, j)\n       \
    \ arr[i], arr[j] = arr[j], arr[i]\n    end\n    local function partition(l, r)\n\
    \        local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                swap(i, j)\n            \
    \    i = i + 1\n            end\n        end\n        swap(i, r)\n        return\
    \ i\n    end\n    local function quickSelect(l, r, k)\n        if l == r then\n\
    \            return\n        end\n        local p = partition(l, r)\n        if\
    \ p == k then\n            return\n        elseif p < k then\n            quickSelect(p\
    \ + 1, r, k)\n        else\n            quickSelect(l, p - 1, k)\n        end\n\
    \    end\n    quickSelect(1, n, k)\n    local res = {}\n    for i = 1, k do\n\
    \        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ptkvpv6.lua:57:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp6ptkvpv6.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l + 1\n        local j = r\n        while true do\n            while i <=\
    \ r and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       while j >= l + 1 and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i >= j then\n                break\n         \
    \   end\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n        arr[l],\
    \ arr[j] = arr[j], arr[l]\n        return j\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local j = partition(arr, l, r)\n        if j == k then\n            return\
    \ arr[j]\n        elseif j > k then\n            return quickSelect(arr, l, j\
    \ - 1, k)\n        else\n            return quickSelect(arr, j + 1, r, k)\n  \
    \      end\n    end\n    local function quickSelect2(arr, l, r, k)\n        if\
    \ l == r then\n            return arr[l]\n        end\n        local j = partition(arr,\
    \ l, r)\n        if j == k then\n            return arr[j]\n        elseif j >\
    \ k then\n            return quickSelect2(arr, l, j - 1, k)\n        else\n  \
    \          return quickSelect2(arr, j + 1, r, k - j)\n        end\n    end\n \
    \   local function quickSelect3(arr, l, r, k)\n        if l == r then\n      \
    \      return arr[l]\n        end\n        local j = partition(arr, l, r)\n  \
    \      if j == k then\n           \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmph94wii2e.lua:98: 'end' expected (to close 'if' at line\
    \ 79) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == 0 then\n        return {}\n\
    \    elseif k == len then\n        return arr\n    end\n    local function partition(arr,\
    \ left, right)\n        local pivot = arr[left]\n        local i = left\n    \
    \    local j = right\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ left, right, k)\n        if left == right then\n            return arr[left]\n\
    \        end\n        local pivot = partition(arr, left, right)\n        if pivot\
    \ == k then\n            return arr[pivot]\n        elseif pivot > k then\n  \
    \          return quickSelect(arr, left, pivot - 1, k)\n        else\n       \
    \     return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n   \
    \ quickSelect(arr, 1, len, len - k + 1)\n    local res = {}\n    for i = 1, k\
    \ do\n        res[i] = arr[len - k + i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0zk120_v.lua:64:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmp0zk120_v.lua:64:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then return end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then return end\n        if i > k then\n          \
    \  quickSelect(arr, l, i - 1, k)\n        else\n            quickSelect(arr, i\
    \ + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n  \
    \  local res = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5z4m71fj.lua:67:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp5z4m71fj.lua:67:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, left, right)\n        if left\
    \ < right then\n            local pivot = partition(arr, left, right)\n      \
    \      quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot + 1,\
    \ right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbkifshgy.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpbkifshgy.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function swap(arr, i, j)\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[r]\n     \
    \   local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n\
    \                swap(arr, i, j)\n                i = i + 1\n            end\n\
    \        end\n        swap(arr, i, r)\n        return i\n    end\n    local function\
    \ quickselect(arr, l, r, k)\n        if l == r then return arr[l] end\n      \
    \  local pivot = partition(arr, l, r)\n        if pivot == k then\n          \
    \  return arr[pivot]\n        elseif pivot > k then\n            return quickselect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickselect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n  \
    \      res[i] = quickselect(arr, 1, n, i)\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzctew7iq.lua:65:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpzctew7iq.lua:65:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, left, right, k)\n        if\
    \ left == right then\n            return arr[left]\n        end\n        local\
    \ pivot = partition(arr, left, right)\n        if pivot == k then\n          \
    \  return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ left, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot\
    \ + 1, right, k)\n        end\n    end\n    local function quickSort(arr, left,\
    \ right)\n        if left < right then\n            local pivot = partition(arr,\
    \ left, right)\n            quickSort(arr, left, pivot - 1)\n            quickSort(arr,\
    \ pivot + 1, right)\n        end\n    end\n    local function merge(arr1, arr2)\n\
    \        local res = {}\n        local i, j = 1, 1\n        while i <= #arr1 and\
    \ j <= #arr2 do\n            if arr1[i] > arr2[j] then\n                table.insert(res,\
    \ arr1[i])\n                i = i + 1\n            else\n                table.insert(res,\
    \ arr2[j])\n                j = j + 1\n            end\n        end\n        while\
    \ i <= #arr1 do\n            table.insert(res, arr1[i])\n            i = i + 1\n\
    \        end\n        while j <= #arr2 do\n            table.insert(res, arr2[j])\n\
    \            j = j + 1\n        end\n        return res\n    end\n    local function\
    \ mergeSort(arr, left, right)\n        if left < right then\n            local\
    \ mid = math.floor((left + right\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmphcuwspfr.lua:79: ')' expected (to close '(' at line 78)\
    \ near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    if\
    \ k == n then\n        table.sort(arr)\n        return arr\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then return arr[l] end\n        local i = partition(arr,\
    \ l, r)\n        if i == k then\n            return arr[i]\n        elseif i >\
    \ k then\n            return quickSelect(arr, l, i - 1, k)\n        else\n   \
    \         return quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local\
    \ pivot = quickSelect(arr, 1, n, k)\n    local res = {}\n    for i = 1, n do\n\
    \        if arr[i] >= pivot then\n            res[#res + 1] = arr[i]\n       \
    \ end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzprzcv4b.lua:77:\
    \ expected: {2, 20, 123}\\nactual: {123, 20, 2}\\nstack traceback:\\n\\t/tmp/tmpzprzcv4b.lua:77:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i < j then\n                arr[i] = arr[j]\n\
    \                i = i + 1\n            end\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            if i <\
    \ j then\n                arr[j] = arr[i]\n                j = j - 1\n       \
    \     end\n        end\n        arr[i] = pivot\n        return i\n    end\n  \
    \  local function quick_sort(arr, l, r)\n        if l < r then\n            local\
    \ i = partition(arr, l, r)\n            quick_sort(arr, l, i - 1)\n          \
    \  quick_sort(arr, i + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf3ayz7zk.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpf3ayz7zk.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then return arr[l] end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then\n            return arr[p]\n        elseif p >\
    \ k then\n            return quickSelect(arr, l, p - 1, k)\n        else\n   \
    \         return quickSelect(arr, p + 1, r, k)\n        end\n    end\n    local\
    \ function binarySearch(arr, l, r, target)\n        while l <= r do\n        \
    \    local m = math.floor((l + r) / 2)\n            if arr[m] == target then\n\
    \                return m\n            elseif arr[m] < target then\n         \
    \       l = m + 1\n            else\n                r = m - 1\n            end\n\
    \        end\n        return l\n    end\n    local res = {}\n    local i = 1\n\
    \    while i <= k do\n        local max = quickSelect(arr, 1, n, n - i + 1)\n\
    \        local j = binarySearch(res, 1, i - 1, max)\n        table.insert(res,\
    \ j, max)\n        i = i + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8m9514m5.lua:85:\
    \ expected: {4, 4}\\nactual: {-4, 4}\\nstack traceback:\\n\\t/tmp/tmp8m9514m5.lua:85:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ m = partition(arr, l, r)\n            quickSort(arr, l, m - 1)\n           \
    \ quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe3nek9dg.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpe3nek9dg.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(l, r)\n  \
    \      local pivot = arr[l]\n        local i, j = l, r\n        while i < j do\n\
    \            while i < j and arr[j] < pivot do\n                j = j - 1\n  \
    \          end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local l, r = 1, n\n    while l <= r do\n        local m = partition(l, r)\n\
    \        if m == k then\n            break\n        elseif m < k then\n      \
    \      l = m + 1\n        else\n            r = m - 1\n        end\n    end\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjga9nw83.lua:51:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpjga9nw83.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        if arr[i] > res[1] then\n            res[1]\
    \ = arr[i]\n            table.sort(res)\n        end\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left + 1\n        local j = right\n   \
    \     while true do\n            while i <= j and arr[i] >= pivot do\n       \
    \         i = i + 1\n            end\n            while i <= j and arr[j] <= pivot\
    \ do\n                j = j - 1\n            end\n            if i >= j then\n\
    \                break\n            end\n            arr[i], arr[j] = arr[j],\
    \ arr[i]\n        end\n        arr[left], arr[j] = arr[j], arr[left]\n       \
    \ return j\n    end\n    local function quickselect(arr, left, right, k)\n   \
    \     local pivot = partition(arr, left, right)\n        if pivot == k then\n\
    \            return\n        elseif pivot > k then\n            quickselect(arr,\
    \ left, pivot - 1, k)\n        else\n            quickselect(arr, pivot + 1, right,\
    \ k)\n        end\n    end\n    quickselect(arr, 1, #arr, #arr - k + 1)\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwbxao3ku.lua:53:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpwbxao3ku.lua:53:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ heap = {}\n    local function push(x)\n        table.insert(heap, x)\n     \
    \   local i = #heap\n        while i > 1 do\n            local p = math.floor(i\
    \ / 2)\n            if heap[p] < heap[i] then\n                heap[p], heap[i]\
    \ = heap[i], heap[p]\n                i = p\n            else\n              \
    \  break\n            end\n        end\n    end\n    local function pop()\n  \
    \      local x = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n\
    \        local i = 1\n        while i * 2 <= #heap do\n            local l = i\
    \ * 2\n            local r = i * 2 + 1\n            local j = l\n            if\
    \ r <= #heap and heap[r] > heap[l] then\n                j = r\n            end\n\
    \            if heap[i] < heap[j] then\n                heap[i], heap[j] = heap[j],\
    \ heap[i]\n                i = j\n            else\n                break\n  \
    \          end\n        end\n        return x\n    end\n    for i = 1, k do\n\
    \        push(arr[i])\n    end\n    for i = k + 1, n do\n        if arr[i] > heap[1]\
    \ then\n            pop()\n            push(arr[i])\n        end\n    end\n  \
    \  local res = {}\n    for i = 1, k do\n        table.insert(res, 1, pop())\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzc8lu9rt.lua:84:\
    \ expected: {4, 4}\\nactual: {-4, 4}\\nstack traceback:\\n\\t/tmp/tmpzc8lu9rt.lua:84:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    for i = 1, #arr do\n        if i <=\
    \ k then\n            table.insert(heap, arr[i])\n        else\n            local\
    \ min = heap[1]\n            if arr[i] > min then\n                heap[1] = arr[i]\n\
    \                local j = 1\n                while j * 2 <= k do\n          \
    \          local l = j * 2\n                    local r = j * 2 + 1\n        \
    \            if r <= k then\n                        if heap[l] < heap[r] then\n\
    \                            if heap[l] < heap[j] then\n                     \
    \           heap[j], heap[l] = heap[l], heap[j]\n                            \
    \    j = l\n                            else\n                               \
    \ break\n                            end\n                        else\n     \
    \                       if heap[r] < heap[j] then\n                          \
    \      heap[j], heap[r] = heap[r], heap[j]\n                                j\
    \ = r\n                            else\n                                break\n\
    \                            end\n                        end\n              \
    \      else\n                        if heap[l] < heap[j] then\n             \
    \               heap[j], heap[l] = heap[l], heap[j]\n                        \
    \    j = l\n                        else\n                            break\n\
    \                        end\n                    end\n                end\n \
    \           end\n        end\n    end\n    table.sort(heap)\n    return heap\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjuht4ddq.lua:65:\
    \ expected: {4, 4}\\nactual: {-4, 4}\\nstack traceback:\\n\\t/tmp/tmpjuht4ddq.lua:65:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        local j = 1\n        while j <= k and res[j]\
    \ < arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          table.insert(res, j, arr[i])\n            table.remove(res, k + 1)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdwpaoj7h.lua:51:\
    \ expected: {4, 4}\\nactual: {-4, 4}\\nstack traceback:\\n\\t/tmp/tmpdwpaoj7h.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, lo, hi)\n        local pivot\
    \ = arr[hi]\n        local i = lo\n        for j = lo, hi - 1 do\n           \
    \ if arr[j] > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n  \
    \              i = i + 1\n            end\n        end\n        arr[i], arr[hi]\
    \ = arr[hi], arr[i]\n        return i\n    end\n    local function quick_select(arr,\
    \ lo, hi, k)\n        if lo < hi then\n            local p = partition(arr, lo,\
    \ hi)\n            if p == k then\n                return\n            elseif\
    \ p < k then\n                quick_select(arr, p + 1, hi, k)\n            else\n\
    \                quick_select(arr, lo, p - 1, k)\n            end\n        end\n\
    \    end\n    quick_select(arr, 1, #arr, #arr - k + 1)\n    return arr\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp89spnjs.lua:48:\
    \ expected: {-4, -3, 5}\\nactual: {5, -4, -3}\\nstack traceback:\\n\\t/tmp/tmpp89spnjs.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickSelect(arr, l, r,\
    \ k)\n        if l == r then\n            return arr[l]\n        end\n       \
    \ local p = partition(arr, l, r)\n        if p == k then\n            return arr[p]\n\
    \        elseif p > k then\n            return quickSelect(arr, l, p - 1, k)\n\
    \        else\n            return quickSelect(arr, p + 1, r, k)\n        end\n\
    \    end\n    local function quickSort(arr, l, r)\n        if l < r then\n   \
    \         local p = partition(arr, l, r)\n            quickSort(arr, l, p - 1)\n\
    \            quickSort(arr, p + 1, r)\n        end\n    end\n    local n = #arr\n\
    \    if k == n then\n        quickSort(arr, 1, n)\n    else\n        quickSelect(arr,\
    \ 1, n, n - k + 1)\n        quickSort(arr, n - k + 1, n)\n    end\n    return\
    \ arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgu6mjmkp.lua:62:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpgu6mjmkp.lua:62:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            if i < j then\n                arr[i]\
    \ = arr[j]\n                i = i + 1\n            end\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       if i < j then\n                arr[j] = arr[i]\n                j = j\
    \ - 1\n            end\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSort(arr, left, right)\n        if left < right\
    \ then\n            local pivot = partition(arr, left, right)\n            quickSort(arr,\
    \ left, pivot - 1)\n            quickSort(arr, pivot + 1, right)\n        end\n\
    \    end\n    quickSort(arr, 1, #arr)\n    local result = {}\n    for i = 1, k\
    \ do\n        result[i] = arr[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpid05g9vg.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpid05g9vg.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    table.sort(res)\n\
    \    for i = k + 1, n do\n        local j = 1\n        while j <= k and res[j]\
    \ < arr[i] do\n            j = j + 1\n        end\n        if j <= k then\n  \
    \          table.insert(res, j, arr[i])\n            table.remove(res)\n     \
    \   end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnhake9j5.lua:42:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpnhake9j5.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quick_select(arr,\
    \ l, r, k)\n        if l == r then return end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then return end\n        if p > k then\n          \
    \  quick_select(arr, l, p - 1, k)\n        else\n            quick_select(arr,\
    \ p + 1, r, k)\n        end\n    end\n    quick_select(arr, 1, n, n - k + 1)\n\
    \    local res = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfuzqkald.lua:67:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpfuzqkald.lua:67:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local function partition(left, right)\n    \
    \    local pivot = arr[left]\n        local i, j = left, right\n        while\
    \ i < j do\n            while i < j and arr[j] <= pivot do\n                j\
    \ = j - 1\n            end\n            arr[i] = arr[j]\n            while i <\
    \ j and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return i\n\
    \    end\n    local function quickSelect(left, right, k)\n        if left == right\
    \ then\n            return\n        end\n        local pivot = partition(left,\
    \ right)\n        if pivot == k then\n            return\n        elseif pivot\
    \ < k then\n            quickSelect(pivot + 1, right, k)\n        else\n     \
    \       quickSelect(left, pivot - 1, k)\n        end\n    end\n    quickSelect(1,\
    \ len, k)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppg_saf_8.lua:65:\
    \ expected: {2, 20, 123}\\nactual: {123, 20, 2}\\nstack traceback:\\n\\t/tmp/tmppg_saf_8.lua:65:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quick_sort(arr, l, r)\n        if l < r then\n            local\
    \ m = partition(arr, l, r)\n            quick_sort(arr, l, m - 1)\n          \
    \  quick_sort(arr, m + 1, r)\n        end\n    end\n    quick_sort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9qkr5q26.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp9qkr5q26.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(l, r)\n  \
    \      local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quick_select(l,\
    \ r, k)\n        if l == r then\n            return\n        end\n        local\
    \ i = partition(l, r)\n        if i == k then\n            return\n        elseif\
    \ i > k then\n            quick_select(l, i - 1, k)\n        else\n          \
    \  quick_select(i + 1, r, k)\n        end\n    end\n    quick_select(1, n, k)\n\
    \    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk56bwrwr.lua:50:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpk56bwrwr.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 1, -1 do\n        heapify(heap, i, k)\n    end\n    for i = k + 1, n do\n\
    \        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            heapify(heap,\
    \ 1, k)\n        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmkyk7kde.lua:34:\
    \ attempt to call global 'heapify' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmkyk7kde.lua:34:\
    \ in function 'candidate'\\n\\t/tmp/tmpmkyk7kde.lua:48: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l + 1\n        local j = r\n        while true do\n            while i <=\
    \ r and arr[i] >= pivot do\n                i = i + 1\n            end\n     \
    \       while j >= l + 1 and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            if i >= j then\n                break\n         \
    \   end\n            arr[i], arr[j] = arr[j], arr[i]\n        end\n        arr[l],\
    \ arr[j] = arr[j], arr[l]\n        return j\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local pivot = partition(arr, l, r)\n        if pivot == k then\n     \
    \       return arr[pivot]\n        elseif pivot > k then\n            return quickselect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickselect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    quickselect(arr, 1, n, n - k + 1)\n    local\
    \ res = {}\n    for i = 1, k do\n        res[i] = arr[n - k + i]\n    end\n  \
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpteb1o6nk.lua:72:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpteb1o6nk.lua:72:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then return arr[l] end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    quickSelect(arr, 1, n, n - k + 1)\n    local res = {}\n    for i\
    \ = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt59qwzxp.lua:68:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpt59qwzxp.lua:68:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then return end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then return end\n        if p > k then\n          \
    \  quickSelect(arr, l, p - 1, k)\n        else\n            quickSelect(arr, p\
    \ + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n  \
    \  local res = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyw5mkb6q.lua:67:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpyw5mkb6q.lua:67:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpl72_fp2a.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpl72_fp2a.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmpl72_fp2a.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if len == 0 then\n        return\
    \ {}\n    end\n    if k == 0 then\n        return {}\n    end\n    if k == len\
    \ then\n        return arr\n    end\n    local function partition(arr, left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quickSort(arr, left, right)\n    \
    \    if left < right then\n            local pivot = partition(arr, left, right)\n\
    \            quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot\
    \ + 1, right)\n        end\n    end\n    quickSort(arr, 1, len)\n    local res\
    \ = {}\n    for i = len, len - k + 1, -1 do\n        table.insert(res, arr[i])\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp84rzf8gp.lua:68:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmp84rzf8gp.lua:68:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSelect(arr, left, right, k)\n        if\
    \ left >= right then\n            return\n        end\n        local pivot = partition(arr,\
    \ left, right)\n        if pivot == k then\n            return\n        elseif\
    \ pivot > k then\n            quickSelect(arr, left, pivot - 1, k)\n        else\n\
    \            quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n   \
    \ quickSelect(arr, 1, #arr, #arr - k + 1)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp052x7cqs.lua:54:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp052x7cqs.lua:54:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if len == k then\n        return\
    \ arr\n    end\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n\
    \    end\n    table.sort(res)\n    for i = k + 1, len do\n        local j = 1\n\
    \        while j <= k do\n            if arr[i] > res[j] then\n              \
    \  table.remove(res, j)\n                table.insert(res, j, arr[i])\n      \
    \          break\n            end\n            j = j + 1\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_ubv_kb_.lua:43:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmp_ubv_kb_.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, left, right)\n        if left\
    \ < right then\n            local pivot = partition(arr, left, right)\n      \
    \      quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot + 1,\
    \ right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp16s156qy.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp16s156qy.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n           \
    \ if arr[j] >= pivot then\n                i = i + 1\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r]\
    \ = arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l <= r then\n            local p = partition(arr, l, r)\n\
    \            if p == k then\n                return\n            elseif p < k\
    \ then\n                quickSelect(arr, p + 1, r, k)\n            else\n    \
    \            quickSelect(arr, l, p - 1, k)\n            end\n        end\n   \
    \ end\n    quickSelect(arr, 1, #arr, #arr - k + 1)\n    return arr\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpco6xy2ik.lua:48:\
    \ expected: {-4, -3, 5}\\nactual: {5, -4, -3}\\nstack traceback:\\n\\t/tmp/tmpco6xy2ik.lua:48:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] < pivot do\n            \
    \    j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, left, right)\n        if left\
    \ < right then\n            local pivot = partition(arr, left, right)\n      \
    \      quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot + 1,\
    \ right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo9dxt91j.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpo9dxt91j.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l >= r then return end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then return end\n        if p > k then\n          \
    \  quickSelect(arr, l, p - 1, k)\n        else\n            quickSelect(arr, p\
    \ + 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, n, n - k + 1)\n  \
    \  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0inoy9zi.lua:55:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmp0inoy9zi.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, left, right)\n        local\
    \ pivot = arr[left]\n        local i = left\n        local j = right\n       \
    \ while i < j do\n            while i < j and arr[j] <= pivot do\n           \
    \     j = j - 1\n            end\n            arr[i] = arr[j]\n            while\
    \ i < j and arr[i] >= pivot do\n                i = i + 1\n            end\n \
    \           arr[j] = arr[i]\n        end\n        arr[i] = pivot\n        return\
    \ i\n    end\n    local function quickSort(arr, left, right)\n        if left\
    \ < right then\n            local pivot = partition(arr, left, right)\n      \
    \      quickSort(arr, left, pivot - 1)\n            quickSort(arr, pivot + 1,\
    \ right)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res = {}\n\
    \    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8uilr7_y.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmp8uilr7_y.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    local function partition(arr, l,\
    \ r)\n        local pivot = arr[l]\n        local i = l\n        local j = r\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            arr[i] = arr[j]\n       \
    \     while i < j and arr[i] >= pivot do\n                i = i + 1\n        \
    \    end\n            arr[j] = arr[i]\n        end\n        arr[i] = pivot\n \
    \       return i\n    end\n    local function quickSort(arr, l, r)\n        if\
    \ l < r then\n            local pivot = partition(arr, l, r)\n            quickSort(arr,\
    \ l, pivot - 1)\n            quickSort(arr, pivot + 1, r)\n        end\n    end\n\
    \    quickSort(arr, 1, len)\n    local res = {}\n    for i = len, len - k + 1,\
    \ -1 do\n        res[#res + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3t9524mj.lua:54:\
    \ expected: {4, 4}\\nactual: {-4, 4}\\nstack traceback:\\n\\t/tmp/tmp3t9524mj.lua:54:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSort(arr, l, r)\n        if l < r then\n            local\
    \ m = partition(arr, l, r)\n            quickSort(arr, l, m - 1)\n           \
    \ quickSort(arr, m + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n\
    \    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd6tw3zur.lua:52:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpd6tw3zur.lua:52:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickSelect(arr, l, r, k)\n        if l == r then\n       \
    \     return arr[l]\n        end\n        local i = partition(arr, l, r)\n   \
    \     if i == k then\n            return arr[i]\n        elseif i > k then\n \
    \           return quickSelect(arr, l, i - 1, k)\n        else\n            return\
    \ quickSelect(arr, i + 1, r, k)\n        end\n    end\n    local function quickSort(arr,\
    \ l, r)\n        if l < r then\n            local i = partition(arr, l, r)\n \
    \           quickSort(arr, l, i - 1)\n            quickSort(arr, i + 1, r)\n \
    \       end\n    end\n    local n = #arr\n    local t = {}\n    for i = 1, k do\n\
    \        t[i] = quickSelect(arr, 1, n, i)\n    end\n    quickSort(t, 1, k)\n \
    \   return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprky38ogz.lua:66:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmprky38ogz.lua:66:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local heap = {}\n    local function push(x)\n        table.insert(heap,\
    \ x)\n        local i = #heap\n        while i > 1 do\n            local j = math.floor(i\
    \ / 2)\n            if heap[j] < heap[i] then\n                heap[i], heap[j]\
    \ = heap[j], heap[i]\n                i = j\n            else\n              \
    \  break\n            end\n        end\n    end\n    local function pop()\n  \
    \      local ret = heap[1]\n        heap[1] = heap[#heap]\n        table.remove(heap)\n\
    \        local i = 1\n        while i * 2 <= #heap do\n            local j = i\
    \ * 2\n            if j + 1 <= #heap and heap[j + 1] > heap[j] then\n        \
    \        j = j + 1\n            end\n            if heap[i] < heap[j] then\n \
    \               heap[i], heap[j] = heap[j], heap[i]\n                i = j\n \
    \           else\n                break\n            end\n        end\n      \
    \  return ret\n    end\n    for _, x in ipairs(arr) do\n        if #heap < k then\n\
    \            push(x)\n        elseif x > heap[1] then\n            pop()\n   \
    \         push(x)\n        end\n    end\n    local ret = {}\n    while #heap >\
    \ 0 do\n        table.insert(ret, 1, pop())\n    end\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi62oh9h9.lua:69:\
    \ expected: {4, 4}\\nactual: {-4, 4}\\nstack traceback:\\n\\t/tmp/tmpi62oh9h9.lua:69:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(left, right)\n\
    \        local pivot = arr[left]\n        local i = left\n        local j = right\n\
    \        while i < j do\n            while i < j and arr[j] <= pivot do\n    \
    \            j = j - 1\n            end\n            if i < j then\n         \
    \       arr[i] = arr[j]\n                i = i + 1\n            end\n        \
    \    while i < j and arr[i] >= pivot do\n                i = i + 1\n         \
    \   end\n            if i < j then\n                arr[j] = arr[i]\n        \
    \        j = j - 1\n            end\n        end\n        arr[i] = pivot\n   \
    \     return i\n    end\n    local function quick_sort(left, right)\n        if\
    \ left < right then\n            local pivot = partition(left, right)\n      \
    \      quick_sort(left, pivot - 1)\n            quick_sort(pivot + 1, right)\n\
    \        end\n    end\n    quick_sort(1, n)\n    local res = {}\n    for i = 1,\
    \ k do\n        res[i] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpws_w6pvx.lua:59:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpws_w6pvx.lua:59:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function swap(arr, i, j)\n        arr[i], arr[j] = arr[j], arr[i]\n    end\n\
    \    local function partition(arr, l, r)\n        local pivot = arr[r]\n     \
    \   local i = l\n        for j = l, r - 1 do\n            if arr[j] > pivot then\n\
    \                swap(arr, i, j)\n                i = i + 1\n            end\n\
    \        end\n        swap(arr, i, r)\n        return i\n    end\n    local function\
    \ quickSelect(arr, l, r, k)\n        if l == r then return arr[l] end\n      \
    \  local pivot = partition(arr, l, r)\n        if pivot == k then\n          \
    \  return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    local res = {}\n    for i = 1, k do\n  \
    \      res[i] = quickSelect(arr, 1, n, i)\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpenrn05w1.lua:65:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpenrn05w1.lua:65:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[l]\n        local i = l\n        local j = r\n        while i < j do\n\
    \            while i < j and arr[j] < pivot do\n                j = j - 1\n  \
    \          end\n            if i < j then\n                arr[i] = arr[j]\n \
    \               i = i + 1\n            end\n            while i < j and arr[i]\
    \ > pivot do\n                i = i + 1\n            end\n            if i < j\
    \ then\n                arr[j] = arr[i]\n                j = j - 1\n         \
    \   end\n        end\n        arr[i] = pivot\n        return i\n    end\n    local\
    \ function quickSort(arr, l, r)\n        if l < r then\n            local m =\
    \ partition(arr, l, r)\n            quickSort(arr, l, m - 1)\n            quickSort(arr,\
    \ m + 1, r)\n        end\n    end\n    quickSort(arr, 1, #arr)\n    local res\
    \ = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvrmwscdp.lua:58:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpvrmwscdp.lua:58:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function maxHeapify(arr, i, n)\n        local l = 2 * i\n        local r = 2\
    \ * i + 1\n        local largest = i\n        if l <= n and arr[l] > arr[largest]\
    \ then\n            largest = l\n        end\n        if r <= n and arr[r] > arr[largest]\
    \ then\n            largest = r\n        end\n        if largest ~= i then\n \
    \           arr[i], arr[largest] = arr[largest], arr[i]\n            maxHeapify(arr,\
    \ largest, n)\n        end\n    end\n    local function buildMaxHeap(arr, n)\n\
    \        for i = math.floor(n / 2), 1, -1 do\n            maxHeapify(arr, i, n)\n\
    \        end\n    end\n    local function heapSort(arr, n)\n        buildMaxHeap(arr,\
    \ n)\n        for i = n, 2, -1 do\n            arr[1], arr[i] = arr[i], arr[1]\n\
    \            maxHeapify(arr, 1, i - 1)\n        end\n    end\n    heapSort(arr,\
    \ n)\n    local res = {}\n    for i = 1, k do\n        res[i] = arr[i]\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp358i3c1w.lua:68:\
    \ expected: {4, 4}\\nactual: {-4, 4}\\nstack traceback:\\n\\t/tmp/tmp358i3c1w.lua:68:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzlw83182.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpzlw83182.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmpzlw83182.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg2jm26c9.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpg2jm26c9.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmpg2jm26c9.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local res = {}\n    for i = 1, k do\n      \
    \  res[i] = arr[i]\n    end\n    table.sort(res)\n    for i = k + 1, len do\n\
    \        if arr[i] > res[1] then\n            res[1] = arr[i]\n            table.sort(res)\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpoe0qt48n.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpoe0qt48n.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmpoe0qt48n.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k == len then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local function partition(arr, l, r)\n      \
    \  local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n  \
    \          if arr[j] > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n\
    \                i = i + 1\n            end\n        end\n        arr[i], arr[r]\
    \ = arr[r], arr[i]\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local pivot = partition(arr, l, r)\n        if pivot == k then\n     \
    \       return arr[pivot]\n        elseif pivot > k then\n            return quickSelect(arr,\
    \ l, pivot - 1, k)\n        else\n            return quickSelect(arr, pivot +\
    \ 1, r, k)\n        end\n    end\n    quickSelect(arr, 1, len, k)\n    table.sort(arr,\
    \ 1, k)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpz28sjag2.lua:48:\
    \ bad argument #2 to 'sort' (function expected, got number)\\nstack traceback:\\\
    n\\t/tmp/tmpz28sjag2.lua:48: in function 'candidate'\\n\\t/tmp/tmpz28sjag2.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l - 1\n        for j = l, r - 1 do\n           \
    \ if arr[j] >= pivot then\n                i = i + 1\n                arr[i],\
    \ arr[j] = arr[j], arr[i]\n            end\n        end\n        arr[i + 1], arr[r]\
    \ = arr[r], arr[i + 1]\n        return i + 1\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then\n            return arr[l]\n        end\n \
    \       local p = partition(arr, l, r)\n        if p == k then\n            return\
    \ arr[p]\n        elseif p > k then\n            return quickSelect(arr, l, p\
    \ - 1, k)\n        else\n            return quickSelect(arr, p + 1, r, k)\n  \
    \      end\n    end\n    local n = #arr\n    if k > n then\n        k = n\n  \
    \  end\n    local res = {}\n    for i = 1, k do\n        res[i] = quickSelect(arr,\
    \ 1, n, i)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc2nnv9bl.lua:56:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpc2nnv9bl.lua:56:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == k then\n        return arr\n\
    \    end\n    local function partition(arr, l, r)\n        local pivot = arr[r]\n\
    \        local i = l\n        for j = l, r - 1 do\n            if arr[j] < pivot\
    \ then\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i\
    \ + 1\n            end\n        end\n        arr[i], arr[r] = arr[r], arr[i]\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then\n            return arr[l]\n        end\n        local i\
    \ = partition(arr, l, r)\n        if i == k then\n            return arr[i]\n\
    \        elseif i > k then\n            return quickSelect(arr, l, i - 1, k)\n\
    \        else\n            return quickSelect(arr, i + 1, r, k)\n        end\n\
    \    end\n    local function sort(arr, l, r)\n        if l >= r then\n       \
    \     return\n        end\n        local i = partition(arr, l, r)\n        sort(arr,\
    \ l, i - 1)\n        sort(arr, i + 1, r)\n    end\n    quickSelect(arr, 1, n,\
    \ n - k + 1)\n    sort(arr, 1, n - k)\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc60q296e.lua:62:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpc60q296e.lua:62:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(l, r)\n  \
    \      local pivot = arr[l]\n        local i, j = l, r\n        while i < j do\n\
    \            while i < j and arr[j] <= pivot do\n                j = j - 1\n \
    \           end\n            arr[i] = arr[j]\n            while i < j and arr[i]\
    \ >= pivot do\n                i = i + 1\n            end\n            arr[j]\
    \ = arr[i]\n        end\n        arr[i] = pivot\n        return i\n    end\n \
    \   local function quickselect(l, r, k)\n        local i = partition(l, r)\n \
    \       if i == k then\n            return\n        elseif i < k then\n      \
    \      quickselect(i + 1, r, k)\n        else\n            quickselect(l, i -\
    \ 1, k)\n        end\n    end\n    quickselect(1, n, n - k + 1)\n    local res\
    \ = {}\n    for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpggiiblrr.lua:55:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpggiiblrr.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local p =\
    \ arr[l]\n        local i = l\n        for j = l + 1, r do\n            if arr[j]\
    \ > p then\n                i = i + 1\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n            end\n        end\n        arr[l], arr[i] = arr[i], arr[l]\n\
    \        return i\n    end\n    local function quickSelect(arr, l, r, k)\n   \
    \     if l == r then\n            return arr[l]\n        end\n        local p\
    \ = partition(arr, l, r)\n        if p == k then\n            return arr[p]\n\
    \        elseif p > k then\n            return quickSelect(arr, l, p - 1, k)\n\
    \        else\n            return quickSelect(arr, p + 1, r, k)\n        end\n\
    \    end\n    local function findK(arr, k)\n        local n = #arr\n        if\
    \ n == k then\n            return arr\n        end\n        local res = {}\n \
    \       for i = 1, k do\n            res[i] = quickSelect(arr, 1, n, i)\n    \
    \    end\n        return res\n    end\n    return findK(arr, k)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp38yvwf5n.lua:59:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmp38yvwf5n.lua:59:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n    end\n    for i\
    \ = k, 1, -1 do\n        local j = i\n        while j <= k do\n            local\
    \ l = j * 2\n            local r = l + 1\n            if l <= k and heap[l] <\
    \ heap[j] then\n                heap[l], heap[j] = heap[j], heap[l]\n        \
    \        j = l\n            elseif r <= k and heap[r] < heap[j] then\n       \
    \         heap[r], heap[j] = heap[j], heap[r]\n                j = r\n       \
    \     else\n                break\n            end\n        end\n    end\n   \
    \ for i = k + 1, n do\n        if arr[i] > heap[1] then\n            heap[1] =\
    \ arr[i]\n            local j = 1\n            while j <= k do\n             \
    \   local l = j * 2\n                local r = l + 1\n                if l <=\
    \ k and heap[l] < heap[j] then\n                    heap[l], heap[j] = heap[j],\
    \ heap[l]\n                    j = l\n                elseif r <= k and heap[r]\
    \ < heap[j] then\n                    heap[r], heap[j] = heap[j], heap[r]\n  \
    \                  j = r\n                else\n                    break\n  \
    \              end\n            end\n        end\n    end\n    return heap\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjy5vwmqv.lua:77:\
    \ expected: {2, 20, 123}\\nactual: {2, 123, 20}\\nstack traceback:\\n\\t/tmp/tmpjy5vwmqv.lua:77:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == k then\n        table.sort(arr)\n\
    \        return arr\n    end\n    local heap = {}\n    for i = 1, k do\n     \
    \   heap[i] = arr[i]\n    end\n    table.sort(heap)\n    for i = k + 1, n do\n\
    \        if arr[i] > heap[1] then\n            heap[1] = arr[i]\n            table.sort(heap)\n\
    \        end\n    end\n    return heap\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmq3u50e0.lua:28:\
    \ attempt to compare nil with number\\nstack traceback:\\n\\t/tmp/tmpmq3u50e0.lua:28:\
    \ in function 'candidate'\\n\\t/tmp/tmpmq3u50e0.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ max = {}\n    for i = 1, k do\n        max[i] = arr[i]\n    end\n    for i =\
    \ k + 1, n do\n        local j = 1\n        while j <= k and arr[i] > max[j] do\n\
    \            j = j + 1\n        end\n        if j <= k then\n            for l\
    \ = k, j + 1, -1 do\n                max[l] = max[l - 1]\n            end\n  \
    \          max[j] = arr[i]\n        end\n    end\n    return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpier20ysj.lua:51:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpier20ysj.lua:51:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickSelect(arr,\
    \ l, r, k)\n        if l == r then return arr[l] end\n        local pivot = partition(arr,\
    \ l, r)\n        if pivot == k then\n            return arr[pivot]\n        elseif\
    \ pivot > k then\n            return quickSelect(arr, l, pivot - 1, k)\n     \
    \   else\n            return quickSelect(arr, pivot + 1, r, k)\n        end\n\
    \    end\n    local pivot = quickSelect(arr, 1, n, n - k + 1)\n    local res =\
    \ {}\n    for i = 1, n do\n        if arr[i] >= pivot then\n            res[#res\
    \ + 1] = arr[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpana3n1mn.lua:70:\
    \ expected: {-4, -3, 5}\\nactual: {5}\\nstack traceback:\\n\\t/tmp/tmpana3n1mn.lua:70:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, left, right)\n        local pivot = arr[left]\n    \
    \    local i = left\n        local j = right\n        while i < j do\n       \
    \     while i < j and arr[j] <= pivot do\n                j = j - 1\n        \
    \    end\n            arr[i] = arr[j]\n            while i < j and arr[i] >= pivot\
    \ do\n                i = i + 1\n            end\n            arr[j] = arr[i]\n\
    \        end\n        arr[i] = pivot\n        return i\n    end\n    local function\
    \ quickSelect(arr, left, right, k)\n        if left == right then\n          \
    \  return arr[left]\n        end\n        local pivot = partition(arr, left, right)\n\
    \        if pivot == k then\n            return arr[pivot]\n        elseif pivot\
    \ > k then\n            return quickSelect(arr, left, pivot - 1, k)\n        else\n\
    \            return quickSelect(arr, pivot + 1, right, k)\n        end\n    end\n\
    \    local pivot = quickSelect(arr, 1, n, k)\n    local res = {}\n    for i =\
    \ 1, n do\n        if arr[i] >= pivot then\n            res[#res + 1] = arr[i]\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnu9708u_.lua:72:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpnu9708u_.lua:72:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    local function partition(l, r)\n  \
    \      local pivot = arr[r]\n        local i = l\n        for j = l, r - 1 do\n\
    \            if arr[j] > pivot then\n                arr[i], arr[j] = arr[j],\
    \ arr[i]\n                i = i + 1\n            end\n        end\n        arr[i],\
    \ arr[r] = arr[r], arr[i]\n        return i\n    end\n    local function quickselect(l,\
    \ r, k)\n        if l == r then\n            return\n        end\n        local\
    \ p = partition(l, r)\n        if p == k then\n            return\n        elseif\
    \ p < k then\n            quickselect(p + 1, r, k)\n        else\n           \
    \ quickselect(l, p - 1, k)\n        end\n    end\n    quickselect(1, n, k)\n \
    \   return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbw6nll6s.lua:50:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpbw6nll6s.lua:50:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k == 1 then\n        local max = arr[1]\n\
    \        for i = 2, n do\n            if arr[i] > max then\n                max\
    \ = arr[i]\n            end\n        end\n        return {max}\n    end\n    local\
    \ function partition(arr, l, r)\n        local pivot = arr[l]\n        local i\
    \ = l\n        local j = r\n        while i < j do\n            while i < j and\
    \ arr[j] <= pivot do\n                j = j - 1\n            end\n           \
    \ arr[i] = arr[j]\n            while i < j and arr[i] >= pivot do\n          \
    \      i = i + 1\n            end\n            arr[j] = arr[i]\n        end\n\
    \        arr[i] = pivot\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        local p = partition(arr, l, r)\n        if p == k then\n \
    \           return\n        elseif p > k then\n            quickselect(arr, l,\
    \ p - 1, k)\n        else\n            quickselect(arr, p + 1, r, k)\n       \
    \ end\n    end\n    quickselect(arr, 1, n, n - k + 1)\n    local res = {}\n  \
    \  for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu9695vdc.lua:67:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmpu9695vdc.lua:67:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quick_select(arr,\
    \ l, r, k)\n        if l == r then return arr[l] end\n        local p = partition(arr,\
    \ l, r)\n        if p == k then return arr[p] end\n        if p > k then\n   \
    \         return quick_select(arr, l, p - 1, k)\n        else\n            return\
    \ quick_select(arr, p + 1, r, k)\n        end\n    end\n    quick_select(arr,\
    \ 1, n, n - k + 1)\n    local res = {}\n    for i = n - k + 1, n do\n        res[#res\
    \ + 1] = arr[i]\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxfsvhp5k.lua:59:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpxfsvhp5k.lua:59:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local len = #arr\n    if k > len then\n        return arr\n\
    \    end\n    local heap = {}\n    for i = 1, k do\n        heap[i] = arr[i]\n\
    \    end\n    for i = k, len do\n        local min = heap[1]\n        if arr[i]\
    \ > min then\n            heap[1] = arr[i]\n            local j = 1\n        \
    \    while true do\n                local l = j * 2\n                local r =\
    \ l + 1\n                if l > k then\n                    break\n          \
    \      end\n                local min = heap[l]\n                local min_i =\
    \ l\n                if r <= k and heap[r] < min then\n                    min\
    \ = heap[r]\n                    min_i = r\n                end\n            \
    \    if heap[j] > min then\n                    heap[j], heap[min_i] = heap[min_i],\
    \ heap[j]\n                    j = min_i\n                else\n             \
    \       break\n                end\n            end\n        end\n    end\n  \
    \  return heap\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjs2gn1fm.lua:57:\
    \ expected: {-4, -3, 5}\\nactual: {-4, 5, 5}\\nstack traceback:\\n\\t/tmp/tmpjs2gn1fm.lua:57:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local n = #arr\n    if n == 0 then return {} end\n    if\
    \ k == 0 then return {} end\n    if k >= n then return arr end\n    local function\
    \ partition(arr, l, r)\n        local pivot = arr[l]\n        local i = l\n  \
    \      local j = r\n        while i < j do\n            while i < j and arr[j]\
    \ <= pivot do\n                j = j - 1\n            end\n            arr[i]\
    \ = arr[j]\n            while i < j and arr[i] >= pivot do\n                i\
    \ = i + 1\n            end\n            arr[j] = arr[i]\n        end\n       \
    \ arr[i] = pivot\n        return i\n    end\n    local function quickselect(arr,\
    \ l, r, k)\n        local p = partition(arr, l, r)\n        if p == k then\n \
    \           return\n        elseif p > k then\n            quickselect(arr, l,\
    \ p - 1, k)\n        else\n            quickselect(arr, p + 1, r, k)\n       \
    \ end\n    end\n    quickselect(arr, 1, n, n - k + 1)\n    local res = {}\n  \
    \  for i = n - k + 1, n do\n        res[#res + 1] = arr[i]\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi_69j3k0.lua:59:\
    \ expected: {-4, -3, 5}\\nactual: {-3, -4, 5}\\nstack traceback:\\n\\t/tmp/tmpi_69j3k0.lua:59:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ Input: arr = [-3, -4, 5], k = 3\n-- Output: [-4, -3, 5]\n-- Example 2:\n-- Input:\
    \ arr = [4, -4, 4], k = 2\n-- Output: [4, 4]\n-- Example 3:\n-- Input: arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1\n-- Output: [2]\n-- Note:\n-- 1. The length of the\
    \ array will be in the range of [1, 1000].\n-- 2. The elements in the array will\
    \ be in the range of [-1000, 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function\
    \ maximum(arr, k)\n    local function partition(arr, l, r)\n        local pivot\
    \ = arr[r]\n        local i = l\n        for j = l, r - 1 do\n            if arr[j]\
    \ > pivot then\n                arr[i], arr[j] = arr[j], arr[i]\n            \
    \    i = i + 1\n            end\n        end\n        arr[i], arr[r] = arr[r],\
    \ arr[i]\n        return i\n    end\n    local function quickselect(arr, l, r,\
    \ k)\n        if l == r then\n            return arr[l]\n        end\n       \
    \ local p = partition(arr, l, r)\n        if p == k then\n            return arr[p]\n\
    \        elseif p > k then\n            return quickselect(arr, l, p - 1, k)\n\
    \        else\n            return quickselect(arr, p + 1, r, k)\n        end\n\
    \    end\n    local function sort(arr, k)\n        local n = #arr\n        for\
    \ i = 1, k do\n            quickselect(arr, i, n, i)\n        end\n    end\n \
    \   sort(arr, k)\n    return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptta25g36.lua:55:\
    \ expected: {-4, -3, 5}\\nactual: {5, -3, -4}\\nstack traceback:\\n\\t/tmp/tmptta25g36.lua:55:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
