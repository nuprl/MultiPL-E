name: HumanEval_118_get_closest_vowel
language: lua
results:
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    if table.indexOf(vowels, word:sub(i, i)) ~= -1 then\n\
    \      last_vowel = word:sub(i, i)\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3ishz1b0.lua:15:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3ishz1b0.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmp3ishz1b0.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  for i = #word,\
    \ 1, -1 do\n    if table.indexOf(vowels, word:sub(i, i)) ~= -1 then\n      result\
    \ = word:sub(i, i)\n      break\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp45tjvrwj.lua:15:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp45tjvrwj.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmp45tjvrwj.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    if last_vowel == '' then\n      for _, v in ipairs(vowels)\
    \ do\n        if word:sub(i, i) == v then\n          last_vowel = v\n        \
    \  break\n        end\n      end\n    else\n      for _, v in ipairs(vowels) do\n\
    \        if word:sub(i, i) == v then\n          return last_vowel\n        end\n\
    \      end\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp48ee8d3b.lua:37:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmp48ee8d3b.lua:37:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ last_consonant = ''\n    local last_vowel = ''\n    for i = #word, 1, -1 do\n\
    \        local char = word:sub(i, i)\n        if not table.contains(vowels, char)\
    \ then\n            last_consonant = char\n        else\n            last_vowel\
    \ = char\n            break\n        end\n    end\n    if last_consonant ~= ''\
    \ and last_vowel ~= '' then\n        result = last_vowel\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgm5v0n10.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgm5v0n10.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmpgm5v0n10.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  local last_consonant\
    \ = ''\n  local last_vowel = ''\n  for i = #word, 1, -1 do\n    local char = word:sub(i,\
    \ i)\n    if not table.contains(vowels, char) then\n      last_consonant = char\n\
    \    else\n      last_vowel = char\n      break\n    end\n  end\n  if last_consonant\
    \ ~= '' and last_vowel ~= '' then\n    result = last_vowel\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4nyuo1us.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4nyuo1us.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmp4nyuo1us.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ last_consonant = ''\n    local last_vowel = ''\n    for i = 1, #word do\n  \
    \      local letter = word:sub(i, i)\n        if table.indexOf(vowels, letter)\
    \ then\n            last_vowel = letter\n        else\n            last_consonant\
    \ = letter\n        end\n        if last_consonant ~= '' and last_vowel ~= ''\
    \ then\n            result = last_vowel\n            break\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfwq291bn.lua:18:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpfwq291bn.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmpfwq291bn.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ last_consonant then\n            for _, vowel in ipairs(vowels) do\n       \
    \         if char == vowel then\n                    return char\n           \
    \     end\n            end\n        else\n            for _, vowel in ipairs(vowels)\
    \ do\n                if char == vowel then\n                    last_consonant\
    \ = nil\n                    break\n                else\n                   \
    \ last_consonant = char\n                end\n            end\n        end\n \
    \   end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp498nbwt8.lua:41:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmp498nbwt8.lua:41:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  local index\
    \ = #word\n  while index > 0 do\n    local char = word:sub(index, index)\n   \
    \ if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n\
    \      result = char\n      break\n    end\n    index = index - 1\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8pl0ywez.lua:31:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmp8pl0ywez.lua:31:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if not\
    \ table.contains(vowels, c) then\n            last_consonant = i\n        elseif\
    \ last_consonant then\n            return c\n        end\n    end\n    return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpi9svk6gf.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpi9svk6gf.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpi9svk6gf.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local prev_vowel = ''\n   \
    \ local prev_consonant = ''\n    for i = #word, 1, -1 do\n        local c = word:sub(i,\
    \ i)\n        if table.index_of(vowels, c) ~= nil then\n            prev_vowel\
    \ = c\n        else\n            if prev_vowel ~= '' then\n                return\
    \ prev_vowel\n            end\n            prev_consonant = c\n        end\n \
    \   end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpj_4hkky7.lua:17:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpj_4hkky7.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpj_4hkky7.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if table.indexof(vowels,\
    \ char) then\n            last_vowel = char\n            break\n        end\n\
    \    end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpsla5jvys.lua:16:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpsla5jvys.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpsla5jvys.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local vowel_index = 0\n    local consonant_index = 0\n \
    \   local closest_vowel = ''\n    for i = #word, 1, -1 do\n        if table.contains(vowels,\
    \ word:sub(i, i)) then\n            vowel_index = i\n            break\n     \
    \   end\n    end\n    for i = vowel_index, 1, -1 do\n        if table.contains(consonants,\
    \ word:sub(i, i)) then\n            consonant_index = i\n            break\n \
    \       end\n    end\n    if vowel_index > 0 and consonant_index > 0 then\n  \
    \      closest_vowel = word:sub(vowel_index, vowel_index)\n    end\n    return\
    \ closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp6ipp_1qk.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp6ipp_1qk.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmp6ipp_1qk.lua:38: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfgcc9qt1.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpfgcc9qt1.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpfgcc9qt1.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  local index\
    \ = #word\n  while index > 0 do\n    local char = word:sub(index, index)\n   \
    \ if char:find('[aeiou]') then\n      result = char\n      break\n    end\n  \
    \  index = index - 1\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn6kn0_g_.lua:31:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpn6kn0_g_.lua:31:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local letter = word:sub(i, i)\n        if table.contains(vowels,\
    \ letter) then\n            last_vowel = letter\n            break\n        end\n\
    \    end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4ftb78on.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4ftb78on.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp4ftb78on.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_pos = 0\n    local\
    \ consonant_pos = 0\n    for i = #word, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if table.contains(vowels, char) then\n            vowel_pos = i\n\
    \        else\n            consonant_pos = i\n            break\n        end\n\
    \    end\n    if vowel_pos > consonant_pos then\n        return word:sub(vowel_pos,\
    \ vowel_pos)\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzczcwl3l.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzczcwl3l.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpzczcwl3l.lua:33: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = nil\n  for i\
    \ = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if last_vowel then\n\
    \      if not table.contains(vowels, char) then\n        return last_vowel\n \
    \     end\n    else\n      if table.contains(vowels, char) then\n        last_vowel\
    \ = char\n      end\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpei1lwg2p.lua:21:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpei1lwg2p.lua:21:\
    \ in function 'candidate'\\n\\t/tmp/tmpei1lwg2p.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if last_vowel\
    \ ~= '' and not table.contains(vowels, c) then\n            return last_vowel\n\
    \        end\n        if table.contains(vowels, c) then\n            last_vowel\
    \ = c\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpq_x6s6ay.lua:19:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpq_x6s6ay.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpq_x6s6ay.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_index = 0\n   \
    \ local word_length = #word\n    local closest_vowel = ''\n    for i = word_length,\
    \ 1, -1 do\n        if table.contains(vowels, word:sub(i, i)) then\n         \
    \   vowel_index = i\n            break\n        end\n    end\n    if vowel_index\
    \ == 0 then\n        return ''\n    end\n    for i = vowel_index, 1, -1 do\n \
    \       if not table.contains(vowels, word:sub(i, i)) then\n            closest_vowel\
    \ = word:sub(vowel_index, vowel_index)\n            break\n        end\n    end\n\
    \    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpu372w42m.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpu372w42m.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpu372w42m.lua:37: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    if table.indexOf(vowels, word:sub(i, i)) > 0 then\n \
    \     last_vowel = word:sub(i, i)\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpep2wnsjt.lua:15:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpep2wnsjt.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpep2wnsjt.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_index = 0\n  local\
    \ word_length = #word\n  for i = word_length, 1, -1 do\n    if table.indexof(vowels,\
    \ word:sub(i, i)) ~= nil then\n      vowel_index = i\n      break\n    end\n \
    \ end\n  if vowel_index == 0 then\n    return ''\n  end\n  for i = vowel_index,\
    \ 1, -1 do\n    if table.indexof(vowels, word:sub(i, i)) == nil then\n      return\
    \ word:sub(vowel_index, vowel_index)\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnaedd2ik.lua:16:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpnaedd2ik.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpnaedd2ik.lua:35: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if last_vowel ~= ''\
    \ and not table.contains(vowels, char) then\n      return last_vowel\n    end\n\
    \    if table.contains(vowels, char) then\n      last_vowel = char\n    end\n\
    \  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp00m32sgh.lua:19:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp00m32sgh.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmp00m32sgh.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ last_consonant = ''\n    local last_vowel = ''\n    for i = #word, 1, -1 do\n\
    \        local char = word:sub(i, i)\n        if table.contains(vowels, char)\
    \ then\n            last_vowel = char\n        else\n            if last_vowel\
    \ ~= '' then\n                return last_vowel\n            end\n           \
    \ last_consonant = char\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpa_5xu2f3.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpa_5xu2f3.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmpa_5xu2f3.lua:33: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = ''\n\
    \    local last_vowel = ''\n    for i = 1, #word do\n        local c = word:sub(i,\
    \ i)\n        if not table.contains(vowels, c) then\n            last_consonant\
    \ = c\n        else\n            last_vowel = c\n        end\n    end\n    return\
    \ last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpk74_d3ja.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpk74_d3ja.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpk74_d3ja.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    local word_length = #word\n    for i =\
    \ word_length, 1, -1 do\n        local char = word:sub(i, i)\n        if table.indexof(vowels,\
    \ char) then\n            closest_vowel = char\n            closest_vowel_index\
    \ = i\n            break\n        end\n    end\n    if closest_vowel_index ==\
    \ 0 then\n        return ''\n    end\n    for i = closest_vowel_index - 1, 1,\
    \ -1 do\n        local char = word:sub(i, i)\n        if not table.indexof(vowels,\
    \ char) then\n            return closest_vowel\n        end\n    end\n    return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmokv0ohs.lua:18:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmokv0ohs.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmpmokv0ohs.lua:39: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local index\
    \ = 0\n  for i = #word, 1, -1 do\n    for j = 1, #vowels do\n      if word:sub(i,\
    \ i) == vowels[j] then\n        index = i\n        break\n      end\n    end\n\
    \    if index ~= 0 then\n      break\n    end\n  end\n  if index == 0 then\n \
    \   return ''\n  end\n  for i = index, 1, -1 do\n    for j = 1, #vowels do\n \
    \     if word:sub(i, i) == vowels[j] then\n        index = i\n        break\n\
    \      end\n    end\n    if index ~= 0 then\n      break\n    end\n  end\n  return\
    \ word:sub(index, index)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4t0jzkox.lua:48:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmp4t0jzkox.lua:48:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if table.indexof(vowels,\
    \ char) then\n            last_vowel = char\n            break\n        end\n\
    \    end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprojhvje1.lua:16:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprojhvje1.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmprojhvje1.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest = ''\n  local closest_index\
    \ = -1\n  for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if char\
    \ == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n  \
    \    closest = char\n      closest_index = i\n      break\n    end\n  end\n  for\
    \ i = closest_index - 1, 1, -1 do\n    local char = word:sub(i, i)\n    if char\
    \ == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n  \
    \    return closest\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp20gokper.lua:36:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmp20gokper.lua:36:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local word_len = #word\n  local\
    \ vowel_idx = 0\n  local vowel_dist = word_len\n  for i = 1, word_len do\n   \
    \ local c = word:sub(i, i)\n    for j = 1, #vowels do\n      if c == vowels[j]\
    \ then\n        local dist = word_len - i\n        if dist < vowel_dist then\n\
    \          vowel_dist = dist\n          vowel_idx = i\n        end\n      end\n\
    \    end\n  end\n  if vowel_idx == 0 then\n    return ''\n  end\n  local vowel\
    \ = word:sub(vowel_idx, vowel_idx)\n  local prev_c = word:sub(vowel_idx - 1, vowel_idx\
    \ - 1)\n  local next_c = word:sub(vowel_idx + 1, vowel_idx + 1)\n  for i = 1,\
    \ #vowels do\n    if prev_c == vowels[i] or next_c == vowels[i] then\n      return\
    \ ''\n    end\n  end\n  return vowel\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4iir5kx2.lua:48:\
    \ expected: \"\"\\nactual: \"e\"\\nstack traceback:\\n\\t/tmp/tmp4iir5kx2.lua:48:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if not\
    \ table.contains(vowels, c) then\n            last_consonant = i\n        elseif\
    \ last_consonant then\n            return c\n        end\n    end\n    return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpe5ydrfff.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpe5ydrfff.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpe5ydrfff.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local letter = word:sub(i, i)\n        if table.index_of(vowels,\
    \ letter) ~= -1 then\n            last_vowel = letter\n            break\n   \
    \     end\n    end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbzwnndd3.lua:16:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpbzwnndd3.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpbzwnndd3.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local c = word:sub(i, i)\n    if last_vowel == '' then\n\
    \      for _, v in ipairs(vowels) do\n        if c == v then\n          last_vowel\
    \ = c\n          break\n        end\n      end\n    else\n      for _, v in ipairs(vowels)\
    \ do\n        if c == v then\n          return last_vowel\n        end\n     \
    \ end\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi38tg_83.lua:38:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmpi38tg_83.lua:38:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local closest_vowel =\
    \ \"\"\n  local closest_vowel_index = 0\n  local word_length = string.len(word)\n\
    \  for i = word_length, 1, -1 do\n    local char = string.sub(word, i, i)\n  \
    \  if not table.contains(vowels, char) then\n      for j = i, 1, -1 do\n     \
    \   local char = string.sub(word, j, j)\n        if table.contains(vowels, char)\
    \ then\n          closest_vowel = char\n          closest_vowel_index = j\n  \
    \        break\n        end\n      end\n      break\n    end\n  end\n  if closest_vowel_index\
    \ > 0 then\n    for i = closest_vowel_index, word_length do\n      local char\
    \ = string.sub(word, i, i)\n      if not table.contains(vowels, char) then\n \
    \       return closest_vowel\n      end\n    end\n  end\n  return \"\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9rqa03zm.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9rqa03zm.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmp9rqa03zm.lua:44: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_index = -1\n    for i = #word, 1, -1 do\n        local letter\
    \ = word:sub(i, i)\n        if table.contains(vowels, letter) then\n         \
    \   closest_vowel = letter\n            closest_index = i\n            break\n\
    \        end\n    end\n    if closest_index == -1 then\n        return ''\n  \
    \  end\n    for i = closest_index - 1, 1, -1 do\n        local letter = word:sub(i,\
    \ i)\n        if not table.contains(vowels, letter) then\n            return closest_vowel\n\
    \        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp6bboj70z.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp6bboj70z.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp6bboj70z.lua:38: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- your code here\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ last_consonant = ''\n    local closest_vowel = ''\n    for i = #word, 1, -1\
    \ do\n        local char = word:sub(i, i)\n        if not table.contains(vowels,\
    \ char) then\n            last_consonant = char\n        else\n            if\
    \ last_consonant ~= '' then\n                closest_vowel = char\n          \
    \      break\n            end\n        end\n    end\n    return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpsd9_w1_c.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpsd9_w1_c.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmpsd9_w1_c.lua:33: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local word_len = word:len()\n \
    \ local closest_vowel = ''\n  local closest_vowel_index = 0\n  for i = 1, word_len\
    \ do\n    local char = word:sub(i, i)\n    if table.contains(vowels, char) then\n\
    \      local prev_char = word:sub(i - 1, i - 1)\n      local next_char = word:sub(i\
    \ + 1, i + 1)\n      if prev_char and not table.contains(vowels, prev_char) and\n\
    \         next_char and not table.contains(vowels, next_char) then\n        if\
    \ closest_vowel_index == 0 or i < closest_vowel_index then\n          closest_vowel\
    \ = char\n          closest_vowel_index = i\n        end\n      end\n    end\n\
    \  end\n  return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmph821hasz.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmph821hasz.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmph821hasz.lua:36: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if table.indexof(vowels,\
    \ word:sub(i, i)) then\n            closest_vowel = word:sub(i, i)\n         \
    \   closest_vowel_index = i\n            break\n        end\n    end\n    if closest_vowel_index\
    \ == 0 then\n        return ''\n    end\n    for i = closest_vowel_index - 1,\
    \ 1, -1 do\n        if not table.indexof(vowels, word:sub(i, i)) then\n      \
    \      return closest_vowel\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpp6yxymni.lua:16:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpp6yxymni.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpp6yxymni.lua:36: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local c = word:sub(i, i)\n    if table.contains(vowels,\
    \ c) then\n      last_vowel = c\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpz9zh1aum.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpz9zh1aum.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpz9zh1aum.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local closest_vowel = \"\"\n    local\
    \ closest_index = 0\n    for i = #word, 1, -1 do\n        if string.find(vowels,\
    \ word:sub(i, i)) then\n            if closest_index == 0 then\n             \
    \   closest_index = i\n            else\n                if i + 1 == closest_index\
    \ then\n                    return word:sub(i, i)\n                end\n     \
    \       end\n        else\n            if closest_index ~= 0 then\n          \
    \      closest_vowel = word:sub(closest_index, closest_index)\n              \
    \  closest_index = 0\n            end\n        end\n    end\n    return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp76bdpbz6.lua:37:\
    \ expected: \"u\"\\nactual: \"o\"\\nstack traceback:\\n\\t/tmp/tmp76bdpbz6.lua:37:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if not table.contains(vowels,\
    \ c) then\n            return last_vowel\n        end\n        last_vowel = c\n\
    \    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpakrtpyes.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpakrtpyes.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpakrtpyes.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local last_vowel = \"\
    \"\n  local last_consonant = \"\"\n  for i = #word, 1, -1 do\n    local letter\
    \ = word:sub(i, i)\n    if table.contains(vowels, letter) then\n      last_vowel\
    \ = letter\n    else\n      last_consonant = letter\n    end\n    if last_vowel\
    \ ~= \"\" and last_consonant ~= \"\" then\n      return last_vowel\n    end\n\
    \  end\n  return \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpa_5kxzgb.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpa_5kxzgb.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpa_5kxzgb.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if not\
    \ closest_vowel_index then\n            for j = 1, #vowels do\n              \
    \  if word:sub(i, i) == vowels[j] then\n                    closest_vowel = word:sub(i,\
    \ i)\n                    closest_vowel_index = i\n                end\n     \
    \       end\n        else\n            if word:sub(i, i) ~= closest_vowel then\n\
    \                return closest_vowel\n            end\n        end\n    end\n\
    \    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmft2ek1n.lua:35:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmpmft2ek1n.lua:35:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.contains(vowels,\
    \ char) then\n      last_vowel = char\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_cagbeia.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_cagbeia.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp_cagbeia.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if not\
    \ table.contains(vowels, c) then\n            last_consonant = i\n        elseif\
    \ last_consonant then\n            return c\n        end\n    end\n    return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwbkh9nfi.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwbkh9nfi.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpwbkh9nfi.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz5mdhnf5.lua:18:\
    \ expected: \"u\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpz5mdhnf5.lua:18:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpp3s3h_6g.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpp3s3h_6g.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpp3s3h_6g.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local pos = 0\n    for i =\
    \ #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n   \
    \         pos = i\n            break\n        end\n    end\n    if pos == 0 then\n\
    \        return ''\n    end\n    for i = pos, 1, -1 do\n        if not table.indexof(vowels,\
    \ word:sub(i, i)) then\n            return word:sub(i + 1, i + 1)\n        end\n\
    \    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpef3lxno4.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpef3lxno4.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpef3lxno4.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ last_vowel_index = 0\n    for i = #word, 1, -1 do\n        local c = word:sub(i,\
    \ i)\n        if table.indexOf(vowels, c) > 0 then\n            last_vowel_index\
    \ = i\n            break\n        end\n    end\n    for i = last_vowel_index -\
    \ 1, 1, -1 do\n        local c = word:sub(i, i)\n        if table.indexOf(vowels,\
    \ c) > 0 then\n            result = c\n            break\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpivu7rsei.lua:17:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpivu7rsei.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpivu7rsei.lua:35: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    if table.indexOf(vowels, word:sub(i, i)) then\n     \
    \ last_vowel = word:sub(i, i)\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdem8w_xf.lua:15:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdem8w_xf.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpdem8w_xf.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local last_vowel\
    \ = \"\"\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n \
    \       if last_vowel ~= \"\" and not table.contains(vowels, char) then\n    \
    \        return last_vowel\n        end\n        if table.contains(vowels, char)\
    \ then\n            last_vowel = char\n        end\n    end\n    return \"\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnnx1ps4n.lua:19:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpnnx1ps4n.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpnnx1ps4n.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local index\
    \ = #word\n  local vowel = ''\n  while index > 0 do\n    if not vowels[word:sub(index,\
    \ index)] then\n      vowel = word:sub(index + 1, index + 1)\n      if vowels[vowel]\
    \ then\n        return vowel\n      end\n    end\n    index = index - 1\n  end\n\
    \  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5y0ztjrs.lua:31:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmp5y0ztjrs.lua:31:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest_vowel = ''\n  local\
    \ closest_vowel_index = -1\n  for i = #word, 1, -1 do\n    local char = word:sub(i,\
    \ i)\n    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char\
    \ == 'u' then\n      closest_vowel = char\n      closest_vowel_index = i\n   \
    \   break\n    end\n  end\n  for i = closest_vowel_index - 1, 1, -1 do\n    local\
    \ char = word:sub(i, i)\n    if char == 'a' or char == 'e' or char == 'i' or char\
    \ == 'o' or char == 'u' then\n      return ''\n    end\n  end\n  return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv6gdmiup.lua:35:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmpv6gdmiup.lua:35:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local index = #word\n    while\
    \ index > 0 do\n        local char = word:sub(index, index)\n        if char ==\
    \ 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n     \
    \       return char\n        end\n        index = index - 1\n    end\n    return\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpubqmmg3f.lua:29:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpubqmmg3f.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_consonant = ''\n  local\
    \ last_vowel = ''\n  for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n\
    \    if not table.contains(vowels, char) then\n      last_consonant = char\n \
    \   else\n      last_vowel = char\n      break\n    end\n  end\n  if last_consonant\
    \ == '' or last_vowel == '' then\n    return ''\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpcn0afxt6.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpcn0afxt6.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpcn0afxt6.lua:33: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n  local closest_vowel = ''\n  local closest_vowel_index\
    \ = 0\n  local closest_consonant_index = 0\n  local closest_consonant = ''\n \
    \ local closest_consonant_index_2 = 0\n  local closest_consonant_2 = ''\n  for\
    \ i = 1, #word do\n    for j = 1, #vowels do\n      if word:sub(i, i) == vowels[j]\
    \ then\n        closest_vowel = word:sub(i, i)\n        closest_vowel_index =\
    \ i\n      end\n    end\n  end\n  for i = closest_vowel_index, 1, -1 do\n    for\
    \ j = 1, #consonants do\n      if word:sub(i, i) == consonants[j] then\n     \
    \   closest_consonant = word:sub(i, i)\n        closest_consonant_index = i\n\
    \        break\n      end\n    end\n    if closest_consonant ~= '' then\n    \
    \  break\n    end\n  end\n  for i = closest_vowel_index, #word do\n    for j =\
    \ 1, #consonants do\n      if word:sub(i, i) == consonants[j] then\n        closest_consonant_2\
    \ = word:sub(i, i)\n        closest_consonant_index_2 = i\n        break\n   \
    \   end\n    end\n    if closest_consonant_2 ~= '' then\n      break\n    end\n\
    \  end\n  if closest_consonant_index == 0 or closest_consonant_index_2 == 0 then\n\
    \    return ''\n  elseif closest_consonant_index_2 - closest_vowel_index < closest\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp2il290xr.lua:56: 'then' expected near 'lu'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest_vowel = ''\n  local\
    \ closest_vowel_index = -1\n  for i = #word, 1, -1 do\n    if not table.contains(vowels,\
    \ word:sub(i, i)) then\n      for j = #word, i, -1 do\n        if table.contains(vowels,\
    \ word:sub(j, j)) then\n          if j > closest_vowel_index then\n          \
    \  closest_vowel = word:sub(j, j)\n            closest_vowel_index = j\n     \
    \     end\n        end\n      end\n    end\n  end\n  return closest_vowel\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpr_f9mdbt.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpr_f9mdbt.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpr_f9mdbt.lua:33: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest_vowel = ''\n  local\
    \ closest_vowel_distance = 0\n  for i = #word, 1, -1 do\n    local char = word:sub(i,\
    \ i)\n    if closest_vowel_distance == 0 then\n      for _, vowel in ipairs(vowels)\
    \ do\n        if char == vowel then\n          closest_vowel = char\n        \
    \  closest_vowel_distance = #word - i\n        end\n      end\n    else\n    \
    \  for _, vowel in ipairs(vowels) do\n        if char == vowel then\n        \
    \  local distance = #word - i\n          if distance < closest_vowel_distance\
    \ then\n            closest_vowel = char\n            closest_vowel_distance =\
    \ distance\n          end\n        end\n      end\n    end\n  end\n  return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp80uvb39m.lua:44:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmp80uvb39m.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if table.contains(vowels,\
    \ word:sub(i, i)) then\n            closest_vowel = word:sub(i, i)\n         \
    \   closest_vowel_index = i\n            break\n        end\n    end\n    if closest_vowel_index\
    \ == 0 then\n        return ''\n    end\n    for i = closest_vowel_index - 1,\
    \ 1, -1 do\n        if not table.contains(vowels, word:sub(i, i)) then\n     \
    \       return closest_vowel\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_6elsp_7.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_6elsp_7.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp_6elsp_7.lua:36: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local index = #word\n  while index\
    \ > 0 do\n    if vowels[word:sub(index, index)] then\n      if index == #word\
    \ then\n        return ''\n      elseif not vowels[word:sub(index + 1, index +\
    \ 1)] then\n        return word:sub(index, index)\n      end\n    end\n    index\
    \ = index - 1\n  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzsrropth.lua:30:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmpzsrropth.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  local result = \"\"\n\
    \  local index = 0\n  for i = #word, 1, -1 do\n    if (word:sub(i, i) == \"a\"\
    \ or word:sub(i, i) == \"e\" or word:sub(i, i) == \"i\" or word:sub(i, i) == \"\
    o\" or word:sub(i, i) == \"u\") then\n      index = i\n      break\n    end\n\
    \  end\n  for i = index, 1, -1 do\n    if (word:sub(i, i) ~= \"a\" and word:sub(i,\
    \ i) ~= \"e\" and word:sub(i, i) ~= \"i\" and word:sub(i, i) ~= \"o\" and word:sub(i,\
    \ i) ~= \"u\") then\n      result = word:sub(i + 1, i + 1)\n      break\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_9uq925y.lua:37:\
    \ expected: \"\"\\nactual: \"i\"\\nstack traceback:\\n\\t/tmp/tmp_9uq925y.lua:37:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_index = 0\n  for i\
    \ = #word, 1, -1 do\n    for j = 1, #vowels do\n      if word:sub(i, i) == vowels[j]\
    \ then\n        vowel_index = i\n        break\n      end\n    end\n    if vowel_index\
    \ > 0 then\n      break\n    end\n  end\n  if vowel_index == 0 then\n    return\
    \ ''\n  end\n  local prev_char = word:sub(vowel_index - 1, vowel_index - 1)\n\
    \  local next_char = word:sub(vowel_index + 1, vowel_index + 1)\n  for i = 1,\
    \ #vowels do\n    if prev_char == vowels[i] or next_char == vowels[i] then\n \
    \     return ''\n    end\n  end\n  return word:sub(vowel_index, vowel_index)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg5h78sdw.lua:44:\
    \ expected: \"\"\\nactual: \"e\"\\nstack traceback:\\n\\t/tmp/tmpg5h78sdw.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local prev_char = ''\n  local prev_vowel\
    \ = ''\n  for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if char\
    \ == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n  \
    \    prev_vowel = char\n    elseif prev_vowel ~= '' then\n      return prev_vowel\n\
    \    end\n    prev_char = char\n  end\n  return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk578vm7j.lua:34:\
    \ expected: \"\"\\nactual: \"i\"\\nstack traceback:\\n\\t/tmp/tmpk578vm7j.lua:34:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ last_consonant = ''\n    local last_vowel = ''\n    for i = 1, #word do\n  \
    \      local c = word:sub(i, i)\n        if not table.contains(vowels, c) then\n\
    \            last_consonant = c\n        else\n            if last_consonant ~=\
    \ '' then\n                result = c\n                break\n            end\n\
    \            last_vowel = c\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2u01ay7_.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp2u01ay7_.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmp2u01ay7_.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i,\
    \ i)) then\n            if last_vowel ~= word:sub(i, i) then\n               \
    \ return word:sub(i, i)\n            end\n        end\n    end\n    return ''\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpj4wjmuev.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpj4wjmuev.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpj4wjmuev.lua:33: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    for\
    \ i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if char ==\
    \ 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n     \
    \       result = char\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwbqf68kg.lua:29:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpwbqf68kg.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if table.indexof(vowels,\
    \ c) then\n            last_vowel = c\n            break\n        end\n    end\n\
    \    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp59tha6nc.lua:16:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp59tha6nc.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp59tha6nc.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_distance = math.huge\n    local word_len = #word\n    for i\
    \ = 1, word_len do\n        local letter = word:sub(i, i)\n        if table.contains(vowels,\
    \ letter) then\n            local distance = word_len - i\n            if distance\
    \ < closest_distance then\n                closest_distance = distance\n     \
    \           closest_vowel = letter\n            end\n        end\n    end\n  \
    \  return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdtk2c7kg.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdtk2c7kg.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmpdtk2c7kg.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {a = true, e = true, i = true, o = true, u = true, y = true}\n\
    \  local last_consonant = nil\n  for i = #word, 1, -1 do\n    local c = word:sub(i,\
    \ i)\n    if vowels[c] then\n      if last_consonant then\n        return c\n\
    \      end\n    else\n      last_consonant = c\n    end\n  end\n  return \"\"\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpttncem__.lua:32:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpttncem__.lua:32:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if table.indexof(vowels,\
    \ c) then\n            last_vowel = c\n            break\n        end\n    end\n\
    \    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpj_q_cdpp.lua:16:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpj_q_cdpp.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpj_q_cdpp.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    local result = \"\"\n    local vowel_index = 0\n    local consonant_index\
    \ = 0\n    local vowel_found = false\n    for i = #word, 1, -1 do\n        if\
    \ not vowel_found then\n            if vowels:find(word:sub(i, i)) then\n    \
    \            vowel_index = i\n                vowel_found = true\n           \
    \ end\n        else\n            if consonants:find(word:sub(i, i)) then\n   \
    \             consonant_index = i\n                break\n            end\n  \
    \      end\n    end\n    if vowel_found and consonant_index ~= 0 then\n      \
    \  result = word:sub(vowel_index, vowel_index)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi8_7q_q0.lua:44:\
    \ expected: \"\"\\nactual: \"i\"\\nstack traceback:\\n\\t/tmp/tmpi8_7q_q0.lua:44:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ last_consonant = ''\n    local last_vowel = ''\n    for i = 1, #word do\n  \
    \      local char = word:sub(i, i)\n        if table.contains(vowels, char) then\n\
    \            last_vowel = char\n        else\n            last_consonant = char\n\
    \        end\n        if last_consonant ~= '' and last_vowel ~= '' then\n    \
    \        result = last_vowel\n            break\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3vtsh8sf.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3vtsh8sf.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmp3vtsh8sf.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = ''\n\
    \    local closest_vowel = ''\n    for i = #word, 1, -1 do\n        local char\
    \ = word:sub(i, i)\n        if not table.contains(vowels, char) then\n       \
    \     last_consonant = char\n        else\n            if last_consonant ~= ''\
    \ then\n                closest_vowel = char\n                break\n        \
    \    end\n        end\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_hr6up8l.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_hr6up8l.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp_hr6up8l.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if word:sub(i,\
    \ i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i)\
    \ == 'o' or word:sub(i, i) == 'u' then\n            closest_vowel = word:sub(i,\
    \ i)\n            closest_vowel_index = i\n            break\n        end\n  \
    \  end\n    for i = closest_vowel_index, 1, -1 do\n        if word:sub(i, i) ~=\
    \ 'a' and word:sub(i, i) ~= 'e' and word:sub(i, i) ~= 'i' and word:sub(i, i) ~=\
    \ 'o' and word:sub(i, i) ~= 'u' then\n            return closest_vowel\n     \
    \   end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsiqjon6g.lua:37:\
    \ expected: \"\"\\nactual: \"i\"\\nstack traceback:\\n\\t/tmp/tmpsiqjon6g.lua:37:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxfqnkoqc.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxfqnkoqc.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpxfqnkoqc.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if last_consonant\
    \ and table.contains(vowels, c) then\n            return c\n        end\n    \
    \    if not table.contains(vowels, c) then\n            last_consonant = c\n \
    \       end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgsihfp6f.lua:19:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgsihfp6f.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpgsihfp6f.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local word_len = #word\n  local\
    \ closest_vowel = ''\n  local closest_vowel_index = 0\n  for i = word_len, 1,\
    \ -1 do\n    local char = word:sub(i, i)\n    if char:find('[aeiou]') then\n \
    \     closest_vowel = char\n      closest_vowel_index = i\n      break\n    end\n\
    \  end\n  if closest_vowel_index == 0 then\n    return ''\n  end\n  for i = closest_vowel_index\
    \ - 1, 1, -1 do\n    local char = word:sub(i, i)\n    if char:find('[^aeiou]')\
    \ then\n      return closest_vowel\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphjgo4bsj.lua:43:\
    \ expected: \"\"\\nactual: \"i\"\\nstack traceback:\\n\\t/tmp/tmphjgo4bsj.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    if last_vowel == '' then\n        return ''\n    end\n    local closest_vowel\
    \ = ''\n    local closest_distance = math.huge\n    for i = #word, 1, -1 do\n\
    \        if table.indexof(vowels, word:sub(i, i)) then\n            if i - 1 >\
    \ 0 and not table.indexof(vowels, word:sub(i - 1, i - 1)) then\n             \
    \   if closest_distance > #word - i then\n                    closest_distance\
    \ = #word - i\n                    closest_vowel = word:sub(i, i)\n          \
    \      end\n            end\n        end\n    end\n    return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbsqxo5uq.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpbsqxo5uq.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpbsqxo5uq.lua:41: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.index_of(vowels,\
    \ char) then\n      last_vowel = char\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpabvc9fwx.lua:16:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpabvc9fwx.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpabvc9fwx.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    if table.index_of(vowels, word:sub(i, i)) then\n    \
    \  last_vowel = word:sub(i, i)\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpar4hm2c6.lua:15:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpar4hm2c6.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpar4hm2c6.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.indexOf(vowels, word:sub(i, i)) ~=\
    \ -1 then\n            last_vowel = word:sub(i, i)\n            break\n      \
    \  end\n    end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwpvba9v3.lua:15:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwpvba9v3.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpwpvba9v3.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    local word_length = #word\n    for i =\
    \ word_length, 1, -1 do\n        local char = word:sub(i, i)\n        if char\
    \ == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n  \
    \          closest_vowel = char\n            closest_vowel_index = i\n       \
    \     break\n        end\n    end\n    if closest_vowel_index == 0 then\n    \
    \    return ''\n    end\n    for i = closest_vowel_index - 1, 1, -1 do\n     \
    \   local char = word:sub(i, i)\n        if char == 'a' or char == 'e' or char\
    \ == 'i' or char == 'o' or char == 'u' then\n            return ''\n        end\n\
    \    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8w6k_j5_.lua:39:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmp8w6k_j5_.lua:39:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local c = word:sub(i, i)\n    if table.index_of(vowels,\
    \ c) then\n      last_vowel = c\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphxqkw_kl.lua:16:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphxqkw_kl.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmphxqkw_kl.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if table.contains(vowels,\
    \ word:sub(i, i)) then\n            closest_vowel = word:sub(i, i)\n         \
    \   closest_vowel_index = i\n            break\n        end\n    end\n    if closest_vowel_index\
    \ == 1 then\n        return ''\n    end\n    for i = closest_vowel_index - 1,\
    \ 1, -1 do\n        if not table.contains(vowels, word:sub(i, i)) then\n     \
    \       return closest_vowel\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphq7x45x7.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphq7x45x7.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmphq7x45x7.lua:36: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local closest = ''\n    local closest_index = 0\n    local\
    \ word_length = #word\n    for i = 1, word_length do\n        local current_letter\
    \ = word:sub(i, i)\n        if table.contains(vowels, current_letter) then\n \
    \           if i > 1 and i < word_length then\n                local previous_letter\
    \ = word:sub(i - 1, i - 1)\n                local next_letter = word:sub(i + 1,\
    \ i + 1)\n                if table.contains(consonants, previous_letter) and table.contains(consonants,\
    \ next_letter) then\n                    if i > closest_index then\n         \
    \               closest = current_letter\n                        closest_index\
    \ = i\n                    end\n                end\n            end\n       \
    \ end\n    end\n    return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpahtes3sf.lua:19:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpahtes3sf.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpahtes3sf.lua:38: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local word_len = word:len()\n \
    \ local last_vowel = ''\n  local last_consonant = ''\n  for i = 1, word_len do\n\
    \    local char = word:sub(i, i)\n    if table.contains(vowels, char) then\n \
    \     last_vowel = char\n    else\n      last_consonant = char\n    end\n    if\
    \ last_vowel ~= '' and last_consonant ~= '' then\n      return last_vowel\n  \
    \  end\n  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjymaiq7k.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjymaiq7k.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmpjymaiq7k.lua:33: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.index_of(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3hx4b5wh.lua:15:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3hx4b5wh.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmp3hx4b5wh.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_consonant = nil\n  local\
    \ last_vowel = nil\n  for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n\
    \    if last_consonant and last_vowel then\n      return last_vowel\n    end\n\
    \    if last_consonant and not last_vowel and table.indexof(vowels, char) then\n\
    \      last_vowel = char\n    end\n    if not last_consonant and not table.indexof(vowels,\
    \ char) then\n      last_consonant = char\n    end\n  end\n  return ''\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvwfmrbi3.lua:23:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpvwfmrbi3.lua:23:\
    \ in function 'candidate'\\n\\t/tmp/tmpvwfmrbi3.lua:33: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ not table.contains(vowels, char) then\n            last_consonant = i\n    \
    \    elseif last_consonant then\n            return char\n        end\n    end\n\
    \    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpm89mcvg2.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpm89mcvg2.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpm89mcvg2.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal last_vowel = ''\n\tlocal last_consonant\
    \ = ''\n\tfor i = #word, 1, -1 do\n\t\tlocal char = word:sub(i, i)\n\t\tif table.contains(vowels,\
    \ char) then\n\t\t\tlast_vowel = char\n\t\telse\n\t\t\tif last_vowel ~= '' then\n\
    \t\t\t\treturn last_vowel\n\t\t\tend\n\t\t\tlast_consonant = char\n\t\tend\n\t\
    end\n\treturn ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp0uxx5mnc.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp0uxx5mnc.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp0uxx5mnc.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    if not table.contains(vowels, word:sub(i, i)) then\n\
    \      if last_vowel ~= '' then\n        return last_vowel\n      end\n    else\n\
    \      last_vowel = word:sub(i, i)\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp87fwzd5j.lua:15:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp87fwzd5j.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmp87fwzd5j.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if last_vowel\
    \ ~= '' and not table.contains(vowels, char) then\n            return last_vowel\n\
    \        end\n        if table.contains(vowels, char) then\n            last_vowel\
    \ = char\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpymic86z0.lua:19:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpymic86z0.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmpymic86z0.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3wwa4czi.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3wwa4czi.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmp3wwa4czi.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local c = word:sub(i, i)\n    if table.indexOf(vowels,\
    \ c) then\n      last_vowel = c\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzcg6ixg8.lua:16:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzcg6ixg8.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpzcg6ixg8.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- your code here\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local\
    \ closest_distance = 0\n    local distance = 0\n    local last_consonant = ''\n\
    \    local last_vowel = ''\n    for i = 1, #word do\n        local char = word:sub(i,\
    \ i)\n        if last_consonant ~= '' and last_vowel ~= '' then\n            distance\
    \ = i - last_consonant\n            if distance < closest_distance or closest_distance\
    \ == 0 then\n                closest_distance = distance\n                closest_vowel\
    \ = last_vowel\n            end\n        end\n        if is_in_table(char, vowels)\
    \ then\n            last_vowel = char\n        elseif is_in_table(char, consonants)\
    \ then\n            last_consonant = i\n        end\n    end\n    return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp08p6ipnj.lua:29:\
    \ attempt to call global 'is_in_table' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp08p6ipnj.lua:29:\
    \ in function 'candidate'\\n\\t/tmp/tmp08p6ipnj.lua:41: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ distance = 0\n    for i = #word, 1, -1 do\n        if not table.contains(vowels,\
    \ word:sub(i, i)) then\n            for j = i - 1, 1, -1 do\n                if\
    \ table.contains(vowels, word:sub(j, j)) then\n                    if i - j <\
    \ distance or distance == 0 then\n                        distance = i - j\n \
    \                       result = word:sub(j, j)\n                    end\n   \
    \                 break\n                end\n            end\n        end\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp6gbr2p7g.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp6gbr2p7g.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp6gbr2p7g.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ not table.contains(vowels, char) then\n            last_consonant = i\n    \
    \    elseif last_consonant then\n            return char\n        end\n    end\n\
    \    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwpd2y7tq.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwpd2y7tq.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpwpd2y7tq.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n \
    \ local consonants = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\",\
    \ \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"}\n  local word_table = {}\n  local word_table_vowels = {}\n  local\
    \ word_table_consonants = {}\n  local word_table_vowels_index = {}\n  local word_table_consonants_index\
    \ = {}\n  local word_table_vowels_index_consonants = {}\n  local word_table_consonants_index_vowels\
    \ = {}\n  local word_table_vowels_index_consonants_index = {}\n  local word_table_consonants_index_vowels_index\
    \ = {}\n  local word_table_vowels_index_consonants_index_vowels = {}\n  local\
    \ word_table_consonants_index_vowels_index_consonants = {}\n  local word_table_vowels_index_consonants_index_vowels_index\
    \ = {}\n  local word_table_consonants_index_vowels_index_consonants_index = {}\n\
    \  local word_table_vowels_index_consonants_index_vowels_index_consonants = {}\n\
    \  local word_table_consonants_index_vowels_index_consonants_index_vowels = {}\n\
    \  local word_table_vowels_index_consonants_index_vowels_index_consonants_index\
    \ = {}\n  local word_table_consonants_index_vowels_index_consonants_index_vowels_index\
    \ = {}\n  local word_table_vowels_index_consonants_index_vowels_index_consonants_index_vowels\
    \ = {}\n  local word_table_consonants_index_vowels_index_cons\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpahduztoi.lua:53: 'end' expected (to close 'function' at\
    \ line 11) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_distance = 0\n    for i = #word, 1, -1 do\n        local char\
    \ = word:sub(i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char\
    \ == 'o' or char == 'u' then\n            closest_vowel = char\n            closest_distance\
    \ = #word - i\n            break\n        end\n    end\n    for i = #word, 1,\
    \ -1 do\n        local char = word:sub(i, i)\n        if char == 'a' or char ==\
    \ 'e' or char == 'i' or char == 'o' or char == 'u' then\n            if #word\
    \ - i < closest_distance then\n                closest_vowel = char\n        \
    \        closest_distance = #word - i\n            end\n        end\n    end\n\
    \    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp26n6eexe.lua:40:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmp26n6eexe.lua:40:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local prev_vowel = ''\n   \
    \ local prev_consonant = ''\n    for i = #word, 1, -1 do\n        local char =\
    \ word:sub(i, i)\n        if table.indexof(vowels, char) then\n            prev_vowel\
    \ = char\n        else\n            if prev_vowel ~= '' then\n               \
    \ return prev_vowel\n            end\n            prev_consonant = char\n    \
    \    end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpuwxx054p.lua:17:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuwxx054p.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpuwxx054p.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ last_consonant = ''\n    local last_vowel = ''\n    for i = 1, #word do\n  \
    \      local char = word:sub(i, i)\n        if table.contains(vowels, char) then\n\
    \            last_vowel = char\n        else\n            last_consonant = char\n\
    \        end\n        if last_consonant ~= '' and last_vowel ~= '' then\n    \
    \        result = last_vowel\n            break\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplt5yj1zi.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplt5yj1zi.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmplt5yj1zi.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local consonants = {'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'}\n  local result = ''\n  local vowel_index = 0\n  local consonant_index\
    \ = 0\n  for i = #word, 1, -1 do\n    if table.contains(vowels, word:sub(i, i))\
    \ then\n      vowel_index = i\n      break\n    end\n  end\n  for i = vowel_index,\
    \ 1, -1 do\n    if table.contains(consonants, word:sub(i, i)) then\n      consonant_index\
    \ = i\n      break\n    end\n  end\n  if vowel_index > 0 and consonant_index >\
    \ 0 then\n    result = word:sub(vowel_index, vowel_index)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpen90d9pq.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpen90d9pq.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmpen90d9pq.lua:38: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n  local vowel = ''\n  local consonant = ''\n\
    \  local closest_vowel = ''\n  local closest_distance = 0\n  local distance =\
    \ 0\n  for i = #word, 1, -1 do\n    for j = 1, #vowels do\n      if word:sub(i,\
    \ i) == vowels[j] then\n        vowel = vowels[j]\n        break\n      end\n\
    \    end\n    if vowel ~= '' then\n      for j = 1, #consonants do\n        if\
    \ word:sub(i - 1, i - 1) == consonants[j] then\n          consonant = consonants[j]\n\
    \          break\n        end\n      end\n      if consonant ~= '' then\n    \
    \    distance = i - 1\n        if closest_distance == 0 then\n          closest_distance\
    \ = distance\n          closest_vowel = vowel\n        elseif distance < closest_distance\
    \ then\n          closest_distance = distance\n          closest_vowel = vowel\n\
    \        end\n      end\n    end\n  end\n  return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe2o_rwvd.lua:52:\
    \ expected: \"u\"\\nactual: \"o\"\\nstack traceback:\\n\\t/tmp/tmpe2o_rwvd.lua:52:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- your code here\n    local vowels = \"aeiouAEIOU\"\n    local consonants\
    \ = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    local closest_vowel =\
    \ \"\"\n    local closest_distance = 0\n    for i = 1, #word do\n        local\
    \ char = word:sub(i, i)\n        if vowels:find(char) then\n            for j\
    \ = i, #word do\n                local char2 = word:sub(j, j)\n              \
    \  if consonants:find(char2) then\n                    local distance = j - i\n\
    \                    if distance > closest_distance then\n                   \
    \     closest_distance = distance\n                        closest_vowel = char\n\
    \                    end\n                    break\n                end\n   \
    \         end\n        end\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph8yne1mk.lua:39:\
    \ expected: \"u\"\\nactual: \"o\"\\nstack traceback:\\n\\t/tmp/tmph8yne1mk.lua:39:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local closest_vowel = \"\"\n    local\
    \ closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if vowels:find(word:sub(i,\
    \ i)) then\n            closest_vowel = word:sub(i, i)\n            closest_vowel_index\
    \ = i\n            break\n        end\n    end\n    for i = closest_vowel_index\
    \ - 1, 1, -1 do\n        if not vowels:find(word:sub(i, i)) then\n           \
    \ return closest_vowel\n        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgvgk9tbg.lua:37:\
    \ expected: \"\"\\nactual: \"i\"\\nstack traceback:\\n\\t/tmp/tmpgvgk9tbg.lua:37:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = -1\n    for i = #word, 1, -1 do\n        local\
    \ char = word:sub(i, i)\n        if table.contains(vowels, char) then\n      \
    \      closest_vowel = char\n            closest_vowel_index = i\n           \
    \ break\n        end\n    end\n    if closest_vowel_index == -1 then\n       \
    \ return ''\n    end\n    for i = closest_vowel_index - 1, 1, -1 do\n        local\
    \ char = word:sub(i, i)\n        if not table.contains(vowels, char) then\n  \
    \          return closest_vowel\n        end\n    end\n    return ''\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpu4dwkbb3.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpu4dwkbb3.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpu4dwkbb3.lua:38: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_distance = 0\n    for i = 1, #word do\n        local\
    \ char = word:sub(i, i)\n        if table.contains(vowels, char) then\n      \
    \      local distance = #word - i\n            if closest_vowel_distance == 0\
    \ or distance < closest_vowel_distance then\n                closest_vowel = char\n\
    \                closest_vowel_distance = distance\n            end\n        end\n\
    \    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1t_7c8mw.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1t_7c8mw.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp1t_7c8mw.lua:31: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if last_vowel ~= '' then\n            if not\
    \ table.contains(vowels, word:sub(i, i)) then\n                return last_vowel\n\
    \            end\n        else\n            if table.contains(vowels, word:sub(i,\
    \ i)) then\n                last_vowel = word:sub(i, i)\n            end\n   \
    \     end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_3ko3_5_.lua:20:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_3ko3_5_.lua:20:\
    \ in function 'candidate'\\n\\t/tmp/tmp_3ko3_5_.lua:31: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  local last_consonant\
    \ = ''\n  local last_vowel = ''\n  for i = #word, 1, -1 do\n    local c = word:sub(i,\
    \ i)\n    if last_consonant ~= '' and last_vowel ~= '' then\n      return last_vowel\n\
    \    end\n    if table.index_of(vowels, c) > 0 then\n      last_vowel = c\n  \
    \  else\n      last_consonant = c\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwjuf8aoh.lua:21:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwjuf8aoh.lua:21:\
    \ in function 'candidate'\\n\\t/tmp/tmpwjuf8aoh.lua:33: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_consonant = 0\n  for\
    \ i = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if not table.contains(vowels,\
    \ char) then\n      last_consonant = i\n    else\n      if last_consonant ~= 0\
    \ then\n        return char\n      end\n    end\n  end\n  return ''\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpe8anuzx9.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpe8anuzx9.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpe8anuzx9.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_consonant = ''\n  local\
    \ last_vowel = ''\n  for i = #word, 1, -1 do\n    local letter = word:sub(i, i)\n\
    \    if last_consonant ~= '' and last_vowel ~= '' then\n      return last_vowel\n\
    \    end\n    if table.contains(vowels, letter) then\n      last_vowel = letter\n\
    \    else\n      last_consonant = letter\n    end\n  end\n  return ''\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpsk4i_wkx.lua:20:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpsk4i_wkx.lua:20:\
    \ in function 'candidate'\\n\\t/tmp/tmpsk4i_wkx.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal consonants = {'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'}\n\tlocal closest_vowel = ''\n\tlocal closest_vowel_index = 0\n\tlocal\
    \ closest_consonant_index = 0\n\tfor i = 1, #word do\n\t\tlocal char = word:sub(i,\
    \ i)\n\t\tif table.contains(vowels, char) then\n\t\t\tclosest_vowel = char\n\t\
    \t\tclosest_vowel_index = i\n\t\tend\n\t\tif table.contains(consonants, char)\
    \ then\n\t\t\tclosest_consonant_index = i\n\t\tend\n\t\tif closest_vowel_index\
    \ > closest_consonant_index then\n\t\t\treturn closest_vowel\n\t\tend\n\tend\n\
    \treturn ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp38d9t2ha.lua:19:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp38d9t2ha.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmp38d9t2ha.lua:36: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local index = #word\n  while index\
    \ > 0 do\n    if not table.contains(vowels, word:sub(index, index)) then\n   \
    \   local next_index = index + 1\n      if next_index <= #word and table.contains(vowels,\
    \ word:sub(next_index, next_index)) then\n        return word:sub(next_index,\
    \ next_index)\n      end\n    end\n    index = index - 1\n  end\n  return ''\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpr93geggu.lua:15:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpr93geggu.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpr93geggu.lua:29: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local len = #word\n    local\
    \ last_consonant = len\n    for i = len, 1, -1 do\n        local c = word:sub(i,\
    \ i)\n        if not table.contains(vowels, c) then\n            last_consonant\
    \ = i\n        else\n            break\n        end\n    end\n    if last_consonant\
    \ == len then\n        return ''\n    end\n    for i = last_consonant - 1, 1,\
    \ -1 do\n        local c = word:sub(i, i)\n        if table.contains(vowels, c)\
    \ then\n            return c\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpv7xsdn4r.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpv7xsdn4r.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpv7xsdn4r.lua:38: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if last_vowel == ''\
    \ then\n      for _, v in ipairs(vowels) do\n        if char == v then\n     \
    \     last_vowel = char\n          break\n        end\n      end\n    else\n \
    \     for _, v in ipairs(vowels) do\n        if char == v then\n          return\
    \ last_vowel\n        end\n      end\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph1tziyuk.lua:38:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmph1tziyuk.lua:38:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest_vowel\
    \ = ''\n  local closest_vowel_index = 0\n  for i = #word, 1, -1 do\n    if word:sub(i,\
    \ i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i)\
    \ == 'o' or word:sub(i, i) == 'u' then\n      if closest_vowel_index == 0 then\n\
    \        closest_vowel = word:sub(i, i)\n        closest_vowel_index = i\n   \
    \   end\n    else\n      if closest_vowel_index ~= 0 then\n        return closest_vowel\n\
    \      end\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph03vepqo.lua:38:\
    \ expected: \"\"\\nactual: \"i\"\\nstack traceback:\\n\\t/tmp/tmph03vepqo.lua:38:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest_vowel = ''\n  local\
    \ closest_distance = math.huge\n  for i = 1, #word do\n    local char = word:sub(i,\
    \ i)\n    if char:find('[aeiou]') then\n      local distance = #word - i\n   \
    \   if distance < closest_distance then\n        closest_distance = distance\n\
    \        closest_vowel = char\n      end\n    end\n  end\n  return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzq1yec9c.lua:33:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpzq1yec9c.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local c = word:sub(i, i)\n    if table.index_of(vowels,\
    \ c) > 0 then\n      last_vowel = c\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnl0sgs9c.lua:16:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpnl0sgs9c.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpnl0sgs9c.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local result = ''\n    local index = 0\n    for i = #word,\
    \ 1, -1 do\n        if table.indexOf(consonants, word:sub(i, i)) ~= -1 then\n\
    \            index = i\n            break\n        end\n    end\n    for i = index,\
    \ #word do\n        if table.indexOf(vowels, word:sub(i, i)) ~= -1 then\n    \
    \        result = word:sub(i, i)\n            break\n        end\n    end\n  \
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpw28mm33s.lua:17:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpw28mm33s.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpw28mm33s.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if word:sub(i,\
    \ i) == 'a' or word:sub(i, i) == 'e' or word:sub(i, i) == 'i' or word:sub(i, i)\
    \ == 'o' or word:sub(i, i) == 'u' then\n            closest_vowel = word:sub(i,\
    \ i)\n            closest_vowel_index = i\n            break\n        end\n  \
    \  end\n    if closest_vowel_index == 0 then\n        return ''\n    end\n   \
    \ for i = closest_vowel_index, 1, -1 do\n        if word:sub(i, i) ~= 'a' and\
    \ word:sub(i, i) ~= 'e' and word:sub(i, i) ~= 'i' and word:sub(i, i) ~= 'o' and\
    \ word:sub(i, i) ~= 'u' then\n            return closest_vowel\n        end\n\
    \    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpytus__62.lua:40:\
    \ expected: \"\"\\nactual: \"i\"\\nstack traceback:\\n\\t/tmp/tmpytus__62.lua:40:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest_vowel = ''\n  local\
    \ closest_vowel_distance = 0\n  for i = #word, 1, -1 do\n    local char = word:sub(i,\
    \ i)\n    if table.contains(vowels, char) then\n      closest_vowel = char\n \
    \     closest_vowel_distance = #word - i\n      break\n    end\n  end\n  for i\
    \ = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.contains(vowels,\
    \ char) then\n      if #word - i < closest_vowel_distance then\n        closest_vowel\
    \ = char\n        closest_vowel_distance = #word - i\n      end\n    end\n  end\n\
    \  return closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_mlu442a.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_mlu442a.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp_mlu442a.lua:38: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmph6qwxcrc.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmph6qwxcrc.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmph6qwxcrc.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = ''\n\
    \    local last_vowel = ''\n    for i = #word, 1, -1 do\n        local char =\
    \ word:sub(i, i)\n        if not table.contains(vowels, char) then\n         \
    \   last_consonant = char\n        else\n            last_vowel = char\n     \
    \       break\n        end\n    end\n    return last_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzyddgwop.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzyddgwop.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpzyddgwop.lua:30: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_consonant_index = 0\n    for i = 1, #word do\n      \
    \  local char = word:sub(i, i)\n        if table.contains(vowels, char) then\n\
    \            closest_vowel = char\n            closest_vowel_index = i\n     \
    \   elseif table.contains(consonants, char) then\n            if closest_vowel_index\
    \ > closest_consonant_index then\n                return closest_vowel\n     \
    \       end\n            closest_consonant_index = i\n        end\n    end\n \
    \   return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppi__1nko.lua:19:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppi__1nko.lua:19:\
    \ in function 'candidate'\\n\\t/tmp/tmppi__1nko.lua:35: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = nil\n  \
    \  for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if last_vowel\
    \ then\n            if not table.contains(vowels, c) then\n                return\
    \ last_vowel\n            end\n        else\n            if table.contains(vowels,\
    \ c) then\n                last_vowel = c\n            end\n        end\n    end\n\
    \    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpu2vaung1.lua:21:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpu2vaung1.lua:21:\
    \ in function 'candidate'\\n\\t/tmp/tmpu2vaung1.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if table.index_of(vowels,\
    \ char) then\n            last_vowel = char\n            break\n        end\n\
    \    end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpajhyhbk5.lua:16:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpajhyhbk5.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpajhyhbk5.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpcuo0zw9r.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpcuo0zw9r.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpcuo0zw9r.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n \
    \ local closest_vowel = \"\"\n  local closest_distance = 0\n  for i = 1, #word\
    \ do\n    for j = 1, #vowels do\n      if word[i] == vowels[j] then\n        local\
    \ distance = #word - i\n        if distance > closest_distance then\n        \
    \  closest_distance = distance\n          closest_vowel = word[i]\n        end\n\
    \      end\n    end\n  end\n  return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7998ov4z.lua:33:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmp7998ov4z.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_index = 0\n  local\
    \ word_length = #word\n  for i = word_length, 1, -1 do\n    if i == word_length\
    \ then\n      if vowels[word:sub(i, i)] then\n        vowel_index = i\n      end\n\
    \    else\n      if vowels[word:sub(i, i)] and not vowels[word:sub(i + 1, i +\
    \ 1)] then\n        vowel_index = i\n        break\n      end\n    end\n  end\n\
    \  return vowel_index > 0 and word:sub(vowel_index, vowel_index) or ''\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaenka3nw.lua:33:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmpaenka3nw.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local closest_vowel = \"\"\n    local\
    \ closest_vowel_distance = 0\n    for i = #word, 1, -1 do\n        local char\
    \ = word:sub(i, i)\n        if vowels:find(char) then\n            closest_vowel\
    \ = char\n            closest_vowel_distance = #word - i\n            break\n\
    \        end\n    end\n    for i = #word, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if vowels:find(char) then\n            if #word - i < closest_vowel_distance\
    \ then\n                closest_vowel = char\n                closest_vowel_distance\
    \ = #word - i\n            end\n        end\n    end\n    return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkpnyzyec.lua:40:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpkpnyzyec.lua:40:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  local last_consonant\
    \ = ''\n  local last_vowel = ''\n  for i = 1, #word do\n    local char = word:sub(i,\
    \ i)\n    if table.contains(vowels, char) then\n      last_vowel = char\n    else\n\
    \      last_consonant = char\n    end\n    if last_consonant ~= '' and last_vowel\
    \ ~= '' then\n      result = last_vowel\n      break\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpj7siulkk.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpj7siulkk.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmpj7siulkk.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_set = {}\n   \
    \ for i = 1, #vowels do\n        vowels_set[vowels[i]] = true\n    end\n    local\
    \ last_vowel = ''\n    for i = #word, 1, -1 do\n        if vowels_set[word:sub(i,\
    \ i)] then\n            last_vowel = word:sub(i, i)\n            break\n     \
    \   end\n    end\n    for i = #word, 1, -1 do\n        if vowels_set[word:sub(i,\
    \ i)] then\n            if last_vowel ~= word:sub(i, i) then\n               \
    \ return word:sub(i, i)\n            end\n        end\n    end\n    return ''\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe5j3xdi0.lua:37:\
    \ expected: \"u\"\\nactual: \"o\"\\nstack traceback:\\n\\t/tmp/tmpe5j3xdi0.lua:37:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ last_vowel_index = 0\n    for i = #word, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if table.indexOf(vowels, char) > 0 then\n            last_vowel_index\
    \ = i\n            break\n        end\n    end\n    for i = last_vowel_index,\
    \ 1, -1 do\n        local char = word:sub(i, i)\n        if table.indexOf(vowels,\
    \ char) > 0 then\n            result = char\n            break\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmr2km8_t.lua:17:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmr2km8_t.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpmr2km8_t.lua:35: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local res = ''\n    for i =\
    \ #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n   \
    \         res = word:sub(i, i)\n            break\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9l74rnyc.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp9l74rnyc.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmp9l74rnyc.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest = ''\n  local closest_index\
    \ = 0\n  for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.indexof(vowels,\
    \ char) then\n      closest = char\n      closest_index = i\n      break\n   \
    \ end\n  end\n  for i = closest_index - 1, 1, -1 do\n    local char = word:sub(i,\
    \ i)\n    if table.indexof(vowels, char) then\n      return ''\n    end\n  end\n\
    \  return closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpl0rnp636.lua:17:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpl0rnp636.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpl0rnp636.lua:35: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    for\
    \ i = #word, 1, -1 do\n        if table.indexOf(vowels, word:sub(i, i)) ~= -1\
    \ then\n            result = word:sub(i, i)\n            break\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpb_crn9sy.lua:15:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpb_crn9sy.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpb_crn9sy.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  local index\
    \ = #word\n  local prev_is_vowel = false\n  while index > 0 do\n    local char\
    \ = word:sub(index, index)\n    if not prev_is_vowel then\n      for _,v in ipairs(vowels)\
    \ do\n        if char == v then\n          result = char\n          break\n  \
    \      end\n      end\n    else\n      if result ~= '' then\n        break\n \
    \     end\n    end\n    prev_is_vowel = false\n    for _,v in ipairs(vowels) do\n\
    \      if char == v then\n        prev_is_vowel = true\n        break\n      end\n\
    \    end\n    index = index - 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp30nuct_j.lua:47:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmp30nuct_j.lua:47:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnx2v8onp.lua:18:\
    \ expected: \"u\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpnx2v8onp.lua:18:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_consonant = 0\n  for\
    \ i = #word, 1, -1 do\n    if not table.contains(vowels, word:sub(i, i)) then\n\
    \      last_consonant = i\n      break\n    end\n  end\n  if last_consonant ==\
    \ 0 then return '' end\n  for i = last_consonant, 1, -1 do\n    if table.contains(vowels,\
    \ word:sub(i, i)) then\n      return word:sub(i, i)\n    end\n  end\n  return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvoestrr2.lua:15:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpvoestrr2.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpvoestrr2.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  return word:gsub(\".*([aeiouAEIOU]).*([^aeiouAEIOU]).*\", \"%1\")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5awhg031.lua:20:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmp5awhg031.lua:20:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpis8l1rad.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpis8l1rad.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpis8l1rad.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ last_consonant then\n            for _, v in ipairs(vowels) do\n           \
    \     if char == v then\n                    return char\n                end\n\
    \            end\n        else\n            for _, v in ipairs(vowels) do\n  \
    \              if char == v then\n                    last_consonant = nil\n \
    \                   break\n                else\n                    last_consonant\
    \ = char\n                end\n            end\n        end\n    end\n    return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprx5vwuzn.lua:41:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmprx5vwuzn.lua:41:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.contains(vowels,\
    \ char) then\n      last_vowel = char\n      break\n    end\n  end\n  if last_vowel\
    \ == '' then return '' end\n  local last_consonant = ''\n  for i = #word, 1, -1\
    \ do\n    local char = word:sub(i, i)\n    if not table.contains(vowels, char)\
    \ then\n      last_consonant = char\n      break\n    end\n  end\n  if last_consonant\
    \ == '' then return '' end\n  local closest_vowel = ''\n  local closest_distance\
    \ = #word\n  for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if\
    \ table.contains(vowels, char) then\n      local distance = #word - i\n      if\
    \ distance < closest_distance then\n        closest_vowel = char\n        closest_distance\
    \ = distance\n      end\n    end\n  end\n  return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplzuvpyxr.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplzuvpyxr.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmplzuvpyxr.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        local\
    \ char = word:sub(i, i)\n        if table.index_of(vowels, char) ~= -1 then\n\
    \            closest_vowel = char\n            closest_vowel_index = i\n     \
    \       break\n        end\n    end\n    for i = closest_vowel_index - 1, 1, -1\
    \ do\n        local char = word:sub(i, i)\n        if table.index_of(vowels, char)\
    \ == -1 then\n            return closest_vowel\n        end\n    end\n    return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_auvkooq.lua:17:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_auvkooq.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp_auvkooq.lua:35: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_positions = {}\n  for\
    \ i = 1, #word do\n    for j = 1, #vowels do\n      if word:sub(i, i) == vowels[j]\
    \ then\n        vowel_positions[#vowel_positions + 1] = i\n      end\n    end\n\
    \  end\n  local closest_vowel = ''\n  local closest_vowel_distance = #word\n \
    \ for i = 1, #vowel_positions do\n    local vowel_position = vowel_positions[i]\n\
    \    local distance = #word - vowel_position\n    if distance < closest_vowel_distance\
    \ then\n      closest_vowel_distance = distance\n      closest_vowel = word:sub(vowel_position,\
    \ vowel_position)\n    end\n  end\n  return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt9z274l2.lua:39:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpt9z274l2.lua:39:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel_index = 0\n\
    \    for i = #word, 1, -1 do\n        if table.index_of(vowels, word:sub(i, i))\
    \ ~= -1 then\n            last_vowel_index = i\n            break\n        end\n\
    \    end\n    if last_vowel_index == 0 then\n        return ''\n    end\n    local\
    \ last_consonant_index = 0\n    for i = last_vowel_index - 1, 1, -1 do\n     \
    \   if table.index_of(vowels, word:sub(i, i)) == -1 then\n            last_consonant_index\
    \ = i\n            break\n        end\n    end\n    if last_consonant_index ==\
    \ 0 then\n        return ''\n    end\n    return word:sub(last_vowel_index, last_vowel_index)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_hkjscos.lua:15:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_hkjscos.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmp_hkjscos.lua:39: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  local distance\
    \ = 0\n  for i = 1, #word do\n    if word:sub(i, i) == 'a' or word:sub(i, i) ==\
    \ 'e' or word:sub(i, i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i) == 'u'\
    \ then\n      if i > 1 and i < #word then\n        if word:sub(i - 1, i - 1) ~=\
    \ 'a' and word:sub(i - 1, i - 1) ~= 'e' and word:sub(i - 1, i - 1) ~= 'i' and\
    \ word:sub(i - 1, i - 1) ~= 'o' and word:sub(i - 1, i - 1) ~= 'u' and word:sub(i\
    \ + 1, i + 1) ~= 'a' and word:sub(i + 1, i + 1) ~= 'e' and word:sub(i + 1, i +\
    \ 1) ~= 'i' and word:sub(i + 1, i + 1) ~= 'o' and word:sub(i + 1, i + 1) ~= 'u'\
    \ then\n          if distance == 0 then\n            distance = i\n          \
    \  result = word:sub(i, i)\n          elseif i < distance then\n            distance\
    \ = i\n            result = word:sub(i, i)\n          end\n        end\n     \
    \ end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqn_f85e4.lua:36:\
    \ expected: \"u\"\\nactual: \"o\"\\nstack traceback:\\n\\t/tmp/tmpqn_f85e4.lua:36:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = ''\n\
    \    local closest_vowel = ''\n    for i = #word, 1, -1 do\n        local letter\
    \ = word:sub(i, i)\n        if not table.contains(vowels, letter) then\n     \
    \       last_consonant = letter\n        else\n            if last_consonant ~=\
    \ '' then\n                closest_vowel = letter\n                break\n   \
    \         end\n        end\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpldml1v15.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpldml1v15.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpldml1v15.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.index_of(vowels, word:sub(i, i)) ~=\
    \ -1 then\n            last_vowel = word:sub(i, i)\n            break\n      \
    \  end\n    end\n    for i = #word, 1, -1 do\n        if table.index_of(vowels,\
    \ word:sub(i, i)) == -1 then\n            if last_vowel ~= '' then\n         \
    \       return last_vowel\n            end\n        else\n            last_vowel\
    \ = word:sub(i, i)\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_434t1ep.lua:15:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_434t1ep.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmp_434t1ep.lua:35: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest = ''\n  local closest_index\
    \ = -1\n  for i = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.contains(vowels,\
    \ char) then\n      closest = char\n      closest_index = i\n      break\n   \
    \ end\n  end\n  if closest_index == -1 then return '' end\n  for i = closest_index\
    \ - 1, 1, -1 do\n    local char = word:sub(i, i)\n    if not table.contains(vowels,\
    \ char) then\n      return closest\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpf2bgbdys.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpf2bgbdys.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpf2bgbdys.lua:36: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local word_len = #word\n    local vowel_index = 0\n    local\
    \ consonant_index = 0\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_consonant_index = 0\n    for i = 1, word_len do\n   \
    \     local letter = word:sub(i, i)\n        if table.contains(vowels, letter)\
    \ then\n            vowel_index = i\n            for j = i, word_len do\n    \
    \            local letter = word:sub(j, j)\n                if table.contains(consonants,\
    \ letter) then\n                    consonant_index = j\n                    if\
    \ consonant_index - vowel_index > 1 then\n                        if closest_vowel_index\
    \ == 0 then\n                            closest_vowel = letter\n            \
    \                closest_vowel_index = vowel_index\n                         \
    \   closest_consonant_index = consonant_index\n                        elseif\
    \ consonant_index - vowel_index < closest_consonant_index - closest_vowel_index\
    \ then\n                            closest_vowel = letter\n                 \
    \           closest_vowel_index = vowel_index\n                            closest_consonant_index\
    \ = consonant_index\n                        end\n                    end\n  \
    \              end\n            end\n        end\n    end\n    return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprxp02tz1.lua:22:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprxp02tz1.lua:22:\
    \ in function 'candidate'\\n\\t/tmp/tmprxp02tz1.lua:49: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    local word_length = #word\n    for i =\
    \ 1, word_length do\n        local letter = word:sub(i, i)\n        if table.contains(vowels,\
    \ letter) then\n            if i > closest_vowel_index then\n                closest_vowel\
    \ = letter\n                closest_vowel_index = i\n            end\n       \
    \ end\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmhbc9bf4.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpmhbc9bf4.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmpmhbc9bf4.lua:31: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if not\
    \ table.contains(vowels, word:sub(i, i)) then\n            for j = i - 1, 1, -1\
    \ do\n                if table.contains(vowels, word:sub(j, j)) then\n       \
    \             if j > closest_vowel_index then\n                        closest_vowel\
    \ = word:sub(j, j)\n                        closest_vowel_index = j\n        \
    \            end\n                    break\n                end\n           \
    \ end\n        end\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdp7coxn6.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdp7coxn6.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpdp7coxn6.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- body\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local consonants = {'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'}\n  local word_len = #word\n  local vowel_index = 0\n  local\
    \ consonant_index = 0\n  local closest_vowel = ''\n  local closest_vowel_index\
    \ = 0\n  local closest_consonant_index = 0\n  local closest_distance = 0\n  for\
    \ i = 1, word_len do\n    local char = word:sub(i, i)\n    if table.contains(vowels,\
    \ char) then\n      vowel_index = i\n      for j = i, word_len do\n        local\
    \ char = word:sub(j, j)\n        if table.contains(consonants, char) then\n  \
    \        consonant_index = j\n          if closest_vowel_index == 0 then\n   \
    \         closest_vowel_index = vowel_index\n            closest_consonant_index\
    \ = consonant_index\n            closest_vowel = word:sub(vowel_index, vowel_index)\n\
    \            closest_distance = consonant_index - vowel_index\n          else\n\
    \            if consonant_index - vowel_index < closest_distance then\n      \
    \        closest_vowel_index = vowel_index\n              closest_consonant_index\
    \ = consonant_index\n              closest_vowel = word:sub(vowel_index, vowel_index)\n\
    \              closest_distance = consonant_index - vowel_index\n            end\n\
    \          end\n        end\n      end\n    end\n  end\n  return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpsm52_4x6.lua:24:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpsm52_4x6.lua:24:\
    \ in function 'candidate'\\n\\t/tmp/tmpsm52_4x6.lua:53: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = ''\n\
    \    local last_vowel = ''\n    for i = #word, 1, -1 do\n        local char =\
    \ word:sub(i, i)\n        if table.contains(vowels, char) then\n            last_vowel\
    \ = char\n        else\n            if last_vowel ~= '' then\n               \
    \ return last_vowel\n            end\n            last_consonant = char\n    \
    \    end\n    end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpq_uii2_x.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpq_uii2_x.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpq_uii2_x.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local letter = word:sub(i, i)\n        if\
    \ not table.contains(vowels, letter) then\n            last_consonant = i\n  \
    \      elseif last_consonant then\n            return letter\n        end\n  \
    \  end\n    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1kouvcjb.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp1kouvcjb.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp1kouvcjb.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local result = \"\"\n    for i = #word,\
    \ 1, -1 do\n        if vowels:find(word:sub(i, i)) then\n            result =\
    \ word:sub(i, i)\n            break\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsein3ei8.lua:28:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpsein3ei8.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local consonants = {'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'}\n  local closest_vowel = \"\"\n  local closest_vowel_index = 0\n \
    \ local closest_consonant_index = 0\n  local closest_consonant = \"\"\n  local\
    \ closest_consonant_index_2 = 0\n  local closest_consonant_2 = \"\"\n  for i =\
    \ 1, #word do\n    for j = 1, #vowels do\n      if word:sub(i, i) == vowels[j]\
    \ then\n        closest_vowel = word:sub(i, i)\n        closest_vowel_index =\
    \ i\n      end\n    end\n  end\n  for i = closest_vowel_index, #word do\n    for\
    \ j = 1, #consonants do\n      if word:sub(i, i) == consonants[j] then\n     \
    \   closest_consonant = word:sub(i, i)\n        closest_consonant_index = i\n\
    \      end\n    end\n  end\n  for i = closest_vowel_index, 1, -1 do\n    for j\
    \ = 1, #consonants do\n      if word:sub(i, i) == consonants[j] then\n       \
    \ closest_consonant_2 = word:sub(i, i)\n        closest_consonant_index_2 = i\n\
    \      end\n    end\n  end\n  if closest_consonant_index - closest_vowel_index\
    \ < closest_vowel_index - closest_consonant_index_2 then\n    return closest_vowel\n\
    \  else\n    return \"\"\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps8q60gm2.lua:55:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmps8q60gm2.lua:55:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  -- your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'}\n  local word_table = {}\n  local closest_vowel\
    \ = ''\n  local closest_vowel_index = 0\n  local closest_consonant_index = 0\n\
    \  local closest_consonant = ''\n  local closest_consonant_index_2 = 0\n  local\
    \ closest_consonant_2 = ''\n  for i = 1, #word do\n    word_table[i] = word:sub(i,\
    \ i)\n  end\n  for i = #word_table, 1, -1 do\n    for j = 1, #vowels do\n    \
    \  if word_table[i] == vowels[j] then\n        closest_vowel = word_table[i]\n\
    \        closest_vowel_index = i\n        break\n      end\n    end\n    if closest_vowel\
    \ ~= '' then\n      break\n    end\n  end\n  for i = closest_vowel_index, 1, -1\
    \ do\n    for j = 1, #consonants do\n      if word_table[i] == consonants[j] then\n\
    \        closest_consonant = word_table[i]\n        closest_consonant_index =\
    \ i\n        break\n      end\n    end\n    if closest_consonant ~= '' then\n\
    \      break\n    end\n  end\n  for i = closest_consonant_index, 1, -1 do\n  \
    \  for j = 1, #consonants do\n      if word_table[i] == consonants[j] then\n \
    \       closest_consonant_2 = word_table[i]\n        closest_consonant_index_2\
    \ = i\n        break\n      end\n    end\n    if closest_consonant_2 ~= '' then\n\
    \      break\n    end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpu26zgfsv.lua:80: 'end' expected (to close 'for' at line\
    \ 49) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  for i = #word,\
    \ 1, -1 do\n    if table.indexOf(vowels, word:sub(i, i)) then\n      result =\
    \ word:sub(i, i)\n      break\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo0v46d7g.lua:15:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpo0v46d7g.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpo0v46d7g.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local c = word:sub(i, i)\n    if table.contains(vowels,\
    \ c) then\n      last_vowel = c\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptt2pheng.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmptt2pheng.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmptt2pheng.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = ''\n\
    \    local closest_vowel = ''\n    for i = #word, 1, -1 do\n        local char\
    \ = word:sub(i, i)\n        if not table.contains(vowels, char) then\n       \
    \     last_consonant = char\n        else\n            if last_consonant ~= ''\
    \ then\n                closest_vowel = char\n                break\n        \
    \    end\n        end\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdt1400sn.lua:17:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdt1400sn.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmpdt1400sn.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local c = word:sub(i, i)\n    if c:match('[aeiou]') then\n\
    \      last_vowel = c\n      break\n    end\n  end\n  return last_vowel\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppstmnxkm.lua:29:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmppstmnxkm.lua:29:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphwrkzxw8.lua:18:\
    \ expected: \"u\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmphwrkzxw8.lua:18:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if last_vowel\
    \ == '' then\n            for _, v in ipairs(vowels) do\n                if char\
    \ == v then\n                    last_vowel = char\n                    break\n\
    \                end\n            end\n        else\n            for _, v in ipairs(vowels)\
    \ do\n                if char == v then\n                    return last_vowel\n\
    \                end\n            end\n        end\n    end\n    return ''\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8lwj9jz1.lua:38:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmp8lwj9jz1.lua:38:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local c = word:sub(i, i)\n    if c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u' then\n      last_vowel = c\n      break\n\
    \    end\n  end\n  for i = #word, 1, -1 do\n    local c = word:sub(i, i)\n   \
    \ if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      if c\
    \ ~= last_vowel then\n        return c\n      end\n    else\n      last_vowel\
    \ = ''\n    end\n  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbapnwt77.lua:39:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpbapnwt77.lua:39:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_index = 0\n    for i = #word, 1, -1 do\n        if not\
    \ table.contains(vowels, word:sub(i, i)) then\n            for j = i, 1, -1 do\n\
    \                if table.contains(vowels, word:sub(j, j)) then\n            \
    \        if closest_vowel_index == 0 then\n                        closest_vowel_index\
    \ = j\n                        closest_vowel = word:sub(j, j)\n              \
    \      elseif j > closest_vowel_index then\n                        closest_vowel_index\
    \ = j\n                        closest_vowel = word:sub(j, j)\n              \
    \      end\n                end\n            end\n        end\n    end\n    return\
    \ closest_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4yzambuz.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp4yzambuz.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp4yzambuz.lua:36: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if not\
    \ table.contains(vowels, c) then\n            last_consonant = i\n        elseif\
    \ last_consonant then\n            return c\n        end\n    end\n    return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdxg3f4p5.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdxg3f4p5.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpdxg3f4p5.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local letter = word:sub(i, i)\n    if table.contains(vowels,\
    \ letter) then\n      last_vowel = letter\n      break\n    end\n  end\n  return\
    \ last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7z5aszto.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7z5aszto.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp7z5aszto.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if table.indexof(vowels,\
    \ char) then\n            last_vowel = char\n            break\n        end\n\
    \    end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqfsto65f.lua:16:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpqfsto65f.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpqfsto65f.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if table.contains(vowels,\
    \ c) then\n            last_vowel = c\n            break\n        end\n    end\n\
    \    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkfi52isl.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkfi52isl.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpkfi52isl.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    -- your code here\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    local closest_vowel = \"\"\n  \
    \  local closest_vowel_index = -1\n    local closest_consonant_index = -1\n  \
    \  for i = 1, #word do\n        if closest_vowel_index ~= -1 and closest_consonant_index\
    \ ~= -1 then\n            break\n        end\n        if closest_vowel_index ==\
    \ -1 then\n            for j = 1, #vowels do\n                if word:sub(i, i)\
    \ == vowels[j] then\n                    closest_vowel_index = i\n           \
    \         closest_vowel = word:sub(i, i)\n                    break\n        \
    \        end\n            end\n        end\n        if closest_consonant_index\
    \ == -1 then\n            for j = 1, #consonants do\n                if word:sub(i,\
    \ i) == consonants[j] then\n                    closest_consonant_index = i\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    if closest_vowel_index == -1 or closest_consonant_index == -1 then\n\
    \        return \"\"\n    end\n    if closest_vowel_index > closest_consonant_index\
    \ then\n        return \"\"\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdtgvcw0a.lua:52:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmpdtgvcw0a.lua:52:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local result = ''\n    local index = #word\n    while index\
    \ > 0 do\n        local char = word:sub(index, index)\n        if char == 'a'\
    \ or char == 'e' or char == 'i' or char == 'o' or char == 'u' then\n         \
    \   result = char\n            break\n        end\n        index = index - 1\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbz35s_gg.lua:32:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpbz35s_gg.lua:32:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n    local last_consonant = 0\n    local closest_vowel = \"\"\n    local closest_vowel_distance\
    \ = 0\n    for i = 1, #word do\n        local char = word:sub(i, i)\n        if\
    \ consonants:find(char) then\n            last_consonant = i\n        elseif vowels:find(char)\
    \ then\n            if closest_vowel_distance == 0 or i - last_consonant < closest_vowel_distance\
    \ then\n                closest_vowel = char\n                closest_vowel_distance\
    \ = i - last_consonant\n            end\n        end\n    end\n    return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkq4pi8kh.lua:34:\
    \ expected: \"u\"\\nactual: \"o\"\\nstack traceback:\\n\\t/tmp/tmpkq4pi8kh.lua:34:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal result = ''\n\tfor i = #word,\
    \ 1, -1 do\n\t\tif not table.contains(vowels, word:sub(i, i)) then\n\t\t\tfor\
    \ j = i - 1, 1, -1 do\n\t\t\t\tif table.contains(vowels, word:sub(j, j)) then\n\
    \t\t\t\t\tresult = word:sub(j, j)\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\
    \t\tbreak\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdu6ynnbx.lua:15:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdu6ynnbx.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpdu6ynnbx.lua:31: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local last_vowel = \"\"\n    for i = #word,\
    \ 1, -1 do\n        if string.find(vowels, word:sub(i, i)) then\n            last_vowel\
    \ = word:sub(i, i)\n            break\n        end\n    end\n    return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgxmn03g6.lua:28:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpgxmn03g6.lua:28:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local result = ''\n  local last_consonant\
    \ = ''\n  local last_vowel = ''\n  for i = #word, 1, -1 do\n    local char = word:sub(i,\
    \ i)\n    if not table.contains(vowels, char) then\n      last_consonant = char\n\
    \    else\n      last_vowel = char\n      break\n    end\n  end\n  if last_consonant\
    \ ~= '' and last_vowel ~= '' then\n    result = last_vowel\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzcj_c17s.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzcj_c17s.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmpzcj_c17s.lua:34: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if table.contains(vowels,\
    \ c) then\n            last_vowel = c\n            break\n        end\n    end\n\
    \    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgf1kj126.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpgf1kj126.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpgf1kj126.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    local\
    \ index = #word\n    while index > 0 do\n        local char = word:sub(index,\
    \ index)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o'\
    \ or char == 'u' then\n            result = char\n            break\n        end\n\
    \        index = index - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8fk23zit.lua:31:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmp8fk23zit.lua:31:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local closest_vowel = ''\n    local closest_vowel_index\
    \ = 0\n    local closest_consonant_index = 0\n    for i = 1, #word do\n      \
    \  for j = 1, #vowels do\n            if word:sub(i, i) == vowels[j] then\n  \
    \              closest_vowel = word:sub(i, i)\n                closest_vowel_index\
    \ = i\n                break\n            end\n        end\n        for j = 1,\
    \ #consonants do\n            if word:sub(i, i) == consonants[j] then\n      \
    \          closest_consonant_index = i\n                break\n            end\n\
    \        end\n        if closest_vowel_index > closest_consonant_index then\n\
    \            return closest_vowel\n        end\n    end\n    return ''\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphek4_ysp.lua:41:\
    \ expected: \"u\"\\nactual: \"o\"\\nstack traceback:\\n\\t/tmp/tmphek4_ysp.lua:41:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel_index = 0\n\
    \    for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i))\
    \ then\n            last_vowel_index = i\n            break\n        end\n   \
    \ end\n    if last_vowel_index == 0 then\n        return ''\n    end\n    local\
    \ closest_vowel_index = 0\n    for i = last_vowel_index, 1, -1 do\n        if\
    \ table.indexof(vowels, word:sub(i, i)) then\n            closest_vowel_index\
    \ = i\n        else\n            break\n        end\n    end\n    return word:sub(closest_vowel_index,\
    \ closest_vowel_index)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfhqlt7ew.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpfhqlt7ew.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpfhqlt7ew.lua:37: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_index = 0\n    for i = #word, 1, -1 do\n        if table.contains(vowels,\
    \ word:sub(i, i)) then\n            closest_vowel = word:sub(i, i)\n         \
    \   closest_index = i\n            break\n        end\n    end\n    if closest_index\
    \ == 1 then\n        return ''\n    end\n    for i = closest_index - 1, 1, -1\
    \ do\n        if not table.contains(vowels, word:sub(i, i)) then\n           \
    \ return closest_vowel\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphv19zvri.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphv19zvri.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmphv19zvri.lua:36: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest_vowel = ''\n  local\
    \ closest_vowel_index = 0\n  for i = #word, 1, -1 do\n    if table.indexof(vowels,\
    \ word:sub(i, i)) then\n      closest_vowel = word:sub(i, i)\n      closest_vowel_index\
    \ = i\n      break\n    end\n  end\n  if closest_vowel_index == 0 then\n    return\
    \ ''\n  end\n  for i = closest_vowel_index - 1, 1, -1 do\n    if not table.indexof(vowels,\
    \ word:sub(i, i)) then\n      return closest_vowel\n    end\n  end\n  return ''\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdlyfonau.lua:16:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdlyfonau.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpdlyfonau.lua:36: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\n        ['a'] = true,\n        ['e'] = true,\n        ['i']\
    \ = true,\n        ['o'] = true,\n        ['u'] = true,\n        ['A'] = true,\n\
    \        ['E'] = true,\n        ['I'] = true,\n        ['O'] = true,\n       \
    \ ['U'] = true,\n    }\n    local closest_vowel = ''\n    local closest_distance\
    \ = 0\n    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n    \
    \    if vowels[char] then\n            closest_vowel = char\n            closest_distance\
    \ = #word - i\n            break\n        end\n    end\n    for i = #word, 1,\
    \ -1 do\n        local char = word:sub(i, i)\n        if vowels[char] then\n \
    \           local distance = #word - i\n            if distance < closest_distance\
    \ then\n                closest_vowel = char\n                closest_distance\
    \ = distance\n            end\n        end\n    end\n    return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsxlkf0xz.lua:52:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpsxlkf0xz.lua:52:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if not\
    \ table.contains(vowels, c) then\n            last_consonant = i\n        elseif\
    \ last_consonant then\n            return c\n        end\n    end\n    return\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7j41vw6s.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7j41vw6s.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp7j41vw6s.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {a = true, e = true, i = true, o = true, u = true, y = true}\n\
    \  local last_consonant = nil\n  for i = #word, 1, -1 do\n    local letter = word:sub(i,\
    \ i)\n    if not vowels[letter:lower()] then\n      last_consonant = i\n    elseif\
    \ last_consonant then\n      return word:sub(i, i)\n    end\n  end\n  return \"\
    \"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpycdsl40e.lua:30:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpycdsl40e.lua:30:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = \"aeiouAEIOU\"\n    local last_consonant = 0\n    for i =\
    \ #word, 1, -1 do\n        if not vowels:find(word:sub(i, i)) then\n         \
    \   last_consonant = i\n            break\n        end\n    end\n    for i = last_consonant,\
    \ 1, -1 do\n        if vowels:find(word:sub(i, i)) then\n            return word:sub(i,\
    \ i)\n        end\n    end\n    return \"\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc3xy_flt.lua:33:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpc3xy_flt.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    local closest_vowel\
    \ = \"\"\n    local closest_vowel_index = 0\n    local word_length = #word\n \
    \   for i = word_length, 1, -1 do\n        local letter = word:sub(i, i)\n   \
    \     if table.contains(vowels, letter) then\n            closest_vowel = letter\n\
    \            closest_vowel_index = i\n            break\n        end\n    end\n\
    \    if closest_vowel_index == 0 then\n        return \"\"\n    end\n    for i\
    \ = closest_vowel_index, word_length do\n        local letter = word:sub(i, i)\n\
    \        if not table.contains(vowels, letter) then\n            return closest_vowel\n\
    \        end\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppqpzwq2f.lua:18:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppqpzwq2f.lua:18:\
    \ in function 'candidate'\\n\\t/tmp/tmppqpzwq2f.lua:39: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.indexof(vowels,\
    \ char) then\n      last_vowel = char\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2acp5fiz.lua:16:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp2acp5fiz.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp2acp5fiz.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local consonants = {'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'}\n    local word_length = #word\n    local closest_vowel = ''\n\
    \    for i = word_length, 1, -1 do\n        local char = word:sub(i, i)\n    \
    \    if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u'\
    \ then\n            closest_vowel = char\n            break\n        end\n   \
    \ end\n    if closest_vowel == '' then\n        return ''\n    end\n    local\
    \ closest_vowel_index = word:find(closest_vowel)\n    for i = closest_vowel_index,\
    \ 1, -1 do\n        local char = word:sub(i, i)\n        if char == 'b' or char\
    \ == 'c' or char == 'd' or char == 'f' or char == 'g' or char == 'h' or char ==\
    \ 'j' or char == 'k' or char == 'l' or char == 'm' or char == 'n' or char == 'p'\
    \ or char == 'q' or char == 'r' or char == 's' or char == 't' or char == 'v' or\
    \ char == 'w' or char == 'x' or char == 'y' or char == 'z' then\n            return\
    \ closest_vowel\n        end\n    end\n    return ''\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7myvkrp9.lua:43:\
    \ expected: \"\"\\nactual: \"i\"\\nstack traceback:\\n\\t/tmp/tmp7myvkrp9.lua:43:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        if table.indexof(vowels, word:sub(i, i)) then\n\
    \            last_vowel = word:sub(i, i)\n            break\n        end\n   \
    \ end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpclcl5uq6.lua:15:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpclcl5uq6.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpclcl5uq6.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local word_len = #word\n  \
    \  local closest_vowel = ''\n    local closest_vowel_idx = 0\n    for i = word_len,\
    \ 1, -1 do\n        local char = word:sub(i, i)\n        if char == 'a' or char\
    \ == 'e' or char == 'i' or char == 'o' or char == 'u' then\n            closest_vowel\
    \ = char\n            closest_vowel_idx = i\n            break\n        end\n\
    \    end\n    for i = closest_vowel_idx, 1, -1 do\n        local char = word:sub(i,\
    \ i)\n        if char ~= 'a' and char ~= 'e' and char ~= 'i' and char ~= 'o' and\
    \ char ~= 'u' then\n            return closest_vowel\n        end\n    end\n \
    \   return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdk8pcogp.lua:40:\
    \ expected: \"\"\\nactual: \"i\"\\nstack traceback:\\n\\t/tmp/tmpdk8pcogp.lua:40:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest_vowel = ''\n\
    \    local closest_vowel_distance = 0\n    local distance = 0\n    for i = #word,\
    \ 1, -1 do\n        if word:sub(i, i) == 'a' or word:sub(i, i) == 'e' or word:sub(i,\
    \ i) == 'i' or word:sub(i, i) == 'o' or word:sub(i, i) == 'u' then\n         \
    \   distance = #word - i\n            if distance > closest_vowel_distance then\n\
    \                closest_vowel = word:sub(i, i)\n                closest_vowel_distance\
    \ = distance\n            end\n        end\n    end\n    return closest_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeagyfy1j.lua:31:\
    \ expected: \"u\"\\nactual: \"o\"\\nstack traceback:\\n\\t/tmp/tmpeagyfy1j.lua:31:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if table.index_of(vowels,\
    \ char) then\n            last_vowel = char\n            break\n        end\n\
    \    end\n    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdai3z09w.lua:16:\
    \ attempt to call field 'index_of' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpdai3z09w.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpdai3z09w.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local closest = ''\n  local closest_dist\
    \ = math.huge\n  for i = 1, #word do\n    local c = word:sub(i, i)\n    if c:find('[aeiou]')\
    \ then\n      local dist = #word - i\n      if dist < closest_dist then\n    \
    \    closest = c\n        closest_dist = dist\n      end\n    end\n  end\n  return\
    \ closest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm3u5wm9c.lua:33:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmpm3u5wm9c.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local last_vowel = ''\n  for i\
    \ = #word, 1, -1 do\n    local char = word:sub(i, i)\n    if table.contains(vowels,\
    \ char) then\n      last_vowel = char\n      break\n    end\n  end\n  return last_vowel\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpz3thn7j_.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpz3thn7j_.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmpz3thn7j_.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local consonants = {'b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z'}\n  local word_len = word:len()\n  local vowel_pos = 0\n  local consonant_pos\
    \ = 0\n  local closest_vowel = ''\n  local closest_vowel_pos = 0\n  local closest_consonant_pos\
    \ = 0\n  local closest_distance = 0\n  for i = 1, word_len do\n    local char\
    \ = word:sub(i, i)\n    for j = 1, #vowels do\n      if char == vowels[j] then\n\
    \        vowel_pos = i\n        break\n      end\n    end\n    for j = 1, #consonants\
    \ do\n      if char == consonants[j] then\n        consonant_pos = i\n       \
    \ break\n      end\n    end\n    if vowel_pos > 0 and consonant_pos > 0 then\n\
    \      local distance = consonant_pos - vowel_pos\n      if distance > 0 and (closest_distance\
    \ == 0 or distance < closest_distance) then\n        closest_vowel = char\n  \
    \      closest_vowel_pos = vowel_pos\n        closest_consonant_pos = consonant_pos\n\
    \        closest_distance = distance\n      end\n    end\n    vowel_pos = 0\n\
    \    consonant_pos = 0\n  end\n  return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0b2wy0av.lua:53:\
    \ expected: \"u\"\\nactual: \"\"\\nstack traceback:\\n\\t/tmp/tmp0b2wy0av.lua:53:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local closest = ''\n    local\
    \ closest_distance = math.huge\n    for i = 1, #word do\n        local c = word:sub(i,\
    \ i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \            local distance = #word - i\n            if distance < closest_distance\
    \ then\n                closest = c\n                closest_distance = distance\n\
    \            end\n        end\n    end\n    return closest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp39250nrx.lua:33:\
    \ expected: \"\"\\nactual: \"a\"\\nstack traceback:\\n\\t/tmp/tmp39250nrx.lua:33:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_vowel = ''\n   \
    \ for i = #word, 1, -1 do\n        local c = word:sub(i, i)\n        if table.indexOf(vowels,\
    \ c) then\n            last_vowel = c\n            break\n        end\n    end\n\
    \    return last_vowel\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplg0446cb.lua:16:\
    \ attempt to call field 'indexOf' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplg0446cb.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmplg0446cb.lua:27: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = ''\n\
    \    local last_vowel = ''\n    for i = #word, 1, -1 do\n        local c = word:sub(i,\
    \ i)\n        if table.indexof(vowels, c) then\n            last_vowel = c\n \
    \       else\n            if last_vowel ~= '' then\n                return last_vowel\n\
    \            end\n            last_consonant = c\n        end\n    end\n    return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp857ojt6h.lua:17:\
    \ attempt to call field 'indexof' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp857ojt6h.lua:17:\
    \ in function 'candidate'\\n\\t/tmp/tmp857ojt6h.lua:32: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n-- get_closest_vowel(\"FULL\") ==> \"U\"\n-- get_closest_vowel(\"\
    quick\") ==> \"\"\n-- get_closest_vowel(\"ab\") ==> \"\"\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local last_consonant = nil\n\
    \    for i = #word, 1, -1 do\n        local char = word:sub(i, i)\n        if\
    \ not table.contains(vowels, char) then\n            last_consonant = i\n    \
    \    elseif last_consonant then\n            return char\n        end\n    end\n\
    \    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7chv3bch.lua:16:\
    \ attempt to call field 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7chv3bch.lua:16:\
    \ in function 'candidate'\\n\\t/tmp/tmp7chv3bch.lua:28: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
