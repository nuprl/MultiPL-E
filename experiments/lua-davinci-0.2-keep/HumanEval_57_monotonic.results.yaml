name: HumanEval_57_monotonic
language: lua
results:
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local n = #l\n    if n < 2 then\n        return true\n    end\n    local\
    \ inc = l[2] > l[1]\n    for i = 3, n do\n        if inc and l[i] < l[i - 1] then\n\
    \            return false\n        elseif not inc and l[i] > l[i - 1] then\n \
    \           return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = 0\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n  \
    \  if d == 0 then\n      -- no change\n    elseif d > 0 then\n      if direction\
    \ < 0 then\n        return false\n      end\n      direction = 1\n    else\n \
    \     if direction > 0 then\n        return false\n      end\n      direction\
    \ = -1\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local diff = l[i] -\
    \ l[i - 1]\n        if direction == nil then\n            direction = diff\n \
    \       elseif direction * diff < 0 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            return false\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif d * direction < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplmyc2zjh.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmplmyc2zjh.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local n = #l\n    if n < 2 then\n        return true\n    end\n    local\
    \ inc = l[2] > l[1]\n    for i = 3, n do\n        if inc ~= (l[i] > l[i - 1])\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local diff = l[i] -\
    \ l[i - 1]\n        if direction == nil then\n            direction = diff\n \
    \       elseif direction * diff < 0 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- ignore\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if inc and l[i]\
    \ > l[i + 1] then\n            return false\n        elseif not inc and l[i] <\
    \ l[i + 1] then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif direction * d <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif direction * d <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if increasing\
    \ and l[i] > l[i + 1] then\n            return false\n        elseif not increasing\
    \ and l[i] < l[i + 1] then\n            return false\n        end\n    end\n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  if #l < 2 then return true end\n  local sign = l[2] - l[1]\n  for i = 3, #l\
    \ do\n    if sign * (l[i] - l[i - 1]) < 0 then return false end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ d * direction < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local d = l[2] - l[1]\n    for i = 3, #l do\n        if d * (l[i] - l[i -\
    \ 1]) < 0 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- ignore\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif d * direction < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = l[2] - l[1]\n    for i = 2, #l - 1 do\n        if l[i +\
    \ 1] - l[i] ~= direction then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo2w64r2k.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpo2w64r2k.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- ignore\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif d * direction <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \tlocal direction = 0\n\tfor i = 2, #l do\n\t\tlocal d = l[i] - l[i - 1]\n\t\t\
    if direction == 0 then\n\t\t\tdirection = d\n\t\telseif direction * d < 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc, dec = true, true\n    for i = 2, #l do\n        if l[i] < l[i\
    \ - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n  \
    \          dec = false\n        end\n    end\n    return inc or dec\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif direction * d <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = 0\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n  \
    \  if direction == 0 then\n      direction = d\n    elseif direction * d < 0 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if d == 0 then\n            -- do nothing\n        elseif direction\
    \ == nil then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local last = l[1]\n    local increasing = true\n    for i = 2, #l do\n  \
    \      if l[i] < last then\n            increasing = false\n            break\n\
    \        end\n        last = l[i]\n    end\n    if increasing then\n        return\
    \ true\n    end\n    last = l[1]\n    for i = 2, #l do\n        if l[i] > last\
    \ then\n            return false\n        end\n        last = l[i]\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif direction * d <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = 0\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n  \
    \  if d == 0 then\n      return false\n    elseif direction == 0 then\n      direction\
    \ = d\n    elseif direction * d < 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkard3u5_.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpkard3u5_.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d > 0 then\n            if direction == -1 then\n           \
    \     return false\n            end\n            direction = 1\n        elseif\
    \ d < 0 then\n            if direction == 1 then\n                return false\n\
    \            end\n            direction = -1\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if increasing\
    \ and l[i] > l[i + 1] then\n            return false\n        elseif not increasing\
    \ and l[i] < l[i + 1] then\n            return false\n        end\n    end\n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local prev = l[1]\n    local increasing = nil\n    for _, v in ipairs(l)\
    \ do\n        if increasing == nil then\n            if v > prev then\n      \
    \          increasing = true\n            elseif v < prev then\n             \
    \   increasing = false\n            end\n        elseif increasing then\n    \
    \        if v < prev then\n                return false\n            end\n   \
    \     else\n            if v > prev then\n                return false\n     \
    \       end\n        end\n        prev = v\n    end\n    return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local d = l[2] - l[1]\n  for i = 2, #l - 1 do\n    if d * (l[i + 1] - l[i])\
    \ < 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local prev = l[1]\n    local inc = nil\n    for i = 2, #l do\n        if\
    \ l[i] ~= prev then\n            if inc == nil then\n                inc = l[i]\
    \ > prev\n            elseif inc ~= (l[i] > prev) then\n                return\
    \ false\n            end\n        end\n        prev = l[i]\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- do nothing\n        elseif d > 0\
    \ then\n            if direction == 0 then\n                direction = 1\n  \
    \          elseif direction == -1 then\n                return false\n       \
    \     end\n        else\n            if direction == 0 then\n                direction\
    \ = -1\n            elseif direction == 1 then\n                return false\n\
    \            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- do nothing\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        inc\
    \ = inc and l[i] >= l[i - 1]\n        dec = dec and l[i] <= l[i - 1]\n    end\n\
    \    return inc or dec\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = 0\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n  \
    \  if d == 0 then\n      -- do nothing\n    elseif direction == 0 then\n     \
    \ direction = d\n    elseif direction * d < 0 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local d = l[2] - l[1]\n    for i = 3, #l do\n        if l[i] - l[i - 1] ~=\
    \ d then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq0bdbcvn.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpq0bdbcvn.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- do nothing\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif d * direction < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif direction * d <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ d * direction < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if direction == 0 then\n            direction = d\n        elseif\
    \ d * direction < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            increasing = false\n        elseif\
    \ l[i] > l[i - 1] then\n            decreasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc, dec = true, true\n    for i = 2, #l do\n        if l[i] < l[i\
    \ - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n  \
    \          dec = false\n        end\n    end\n    return inc or dec\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = l[1] <= l[2]\n  for i = 2, #l - 1 do\n    if l[i] <= l[i + 1] ~=\
    \ inc then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptka5q7c_.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmptka5q7c_.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local d = l[2] - l[1]\n    for i = 3, #l do\n        if l[i] - l[i - 1] ~=\
    \ d then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppjhkppuw.lua:21:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmppjhkppuw.lua:21:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- ignore\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] > l[i - 1] then\n            decreasing = false\n        elseif\
    \ l[i] < l[i - 1] then\n            increasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    if #l < 2 then\n        return true\n    end\n    local inc = l[2] > l[1]\n\
    \    for i = 3, #l do\n        if l[i] > l[i - 1] ~= inc then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            increasing = false\n        elseif\
    \ l[i] > l[i - 1] then\n            decreasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = l[1] <= l[2]\n    for i = 2, #l - 1 do\n        if inc then\n\
    \            if l[i] > l[i + 1] then\n                return false\n         \
    \   end\n        else\n            if l[i] < l[i + 1] then\n                return\
    \ false\n            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local increasing = l[1] <= l[2]\n  for i = 2, #l - 1 do\n    if increasing\
    \ and l[i] > l[i + 1] then\n      return false\n    elseif not increasing and\
    \ l[i] < l[i + 1] then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if direction == 0 then\n            direction = d\n        elseif\
    \ d * direction < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- do nothing\n        elseif d > 0\
    \ then\n            if direction < 0 then\n                return false\n    \
    \        else\n                direction = 1\n            end\n        else\n\
    \            if direction > 0 then\n                return false\n           \
    \ else\n                direction = -1\n            end\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- do nothing\n        elseif d > 0\
    \ then\n            if direction == 0 then\n                direction = 1\n  \
    \          elseif direction == -1 then\n                return false\n       \
    \     end\n        else\n            if direction == 0 then\n                direction\
    \ = -1\n            elseif direction == 1 then\n                return false\n\
    \            end\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc, dec = true, true\n  for i = 2, #l do\n    if l[i] < l[i - 1] then\
    \ inc = false end\n    if l[i] > l[i - 1] then dec = false end\n  end\n  return\
    \ inc or dec\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local increasing = l[1] < l[2]\n  for i = 2, #l - 1 do\n    if l[i] == l[i\
    \ + 1] then\n      return false\n    end\n    if increasing and l[i] > l[i + 1]\
    \ then\n      return false\n    end\n    if not increasing and l[i] < l[i + 1]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplwdmn5qk.lua:31:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmplwdmn5qk.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local incr = true\n    local decr = true\n    for i = 2, #l do\n        if\
    \ l[i] > l[i - 1] then\n            decr = false\n        elseif l[i] < l[i -\
    \ 1] then\n            incr = false\n        end\n    end\n    return incr or\
    \ decr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if l[i] < l[i\
    \ + 1] ~= inc then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if direction == 0 then\n            direction = d\n        elseif\
    \ d * direction < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- do nothing\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] > l[i\
    \ - 1] then\n      dec = false\n    elseif l[i] < l[i - 1] then\n      inc = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local d = l[2] - l[1]\n  for i = 3, #l do\n    if d * (l[i] - l[i - 1]) < 0\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ d * direction < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif direction * d <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if d == 0 then\n      -- ignore\n    elseif direction == nil then\n     \
    \ direction = d\n    elseif direction * d < 0 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- ignore\n        elseif d > 0 then\n\
    \            if direction < 0 then\n                return false\n           \
    \ end\n            direction = 1\n        else\n            if direction > 0 then\n\
    \                return false\n            end\n            direction = -1\n \
    \       end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if direction == 0 then\n            direction = d\n        elseif\
    \ d * direction < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    if #l < 2 then\n        return true\n    end\n    local inc = l[2] - l[1]\
    \ > 0\n    for i = 2, #l - 1 do\n        if (l[i + 1] - l[i]) > 0 ~= inc then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if direction == 0 then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local last = l[1]\n    local increasing = true\n    for i = 2, #l do\n  \
    \      if l[i] < last then\n            increasing = false\n            break\n\
    \        end\n        last = l[i]\n    end\n    if increasing then\n        return\
    \ true\n    end\n    last = l[1]\n    for i = 2, #l do\n        if l[i] > last\
    \ then\n            return false\n        end\n        last = l[i]\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc, dec = true, true\n    for i = 2, #l do\n        if l[i] < l[i\
    \ - 1] then\n            inc = false\n        elseif l[i] > l[i - 1] then\n  \
    \          dec = false\n        end\n    end\n    return inc or dec\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local prev = l[1]\n    local inc = nil\n    for i = 2, #l do\n        if\
    \ l[i] ~= prev then\n            if inc == nil then\n                inc = l[i]\
    \ > prev\n            elseif inc ~= (l[i] > prev) then\n                return\
    \ false\n            end\n        end\n        prev = l[i]\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local n = #l\n  if n < 2 then return true end\n  local inc = l[2] > l[1]\n\
    \  for i = 3, n do\n    if inc ~= (l[i] > l[i-1]) then return false end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif direction * d <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local n = #l\n    if n < 2 then\n        return true\n    end\n    local\
    \ inc = l[2] > l[1]\n    for i = 3, n do\n        if l[i] > l[i - 1] ~= inc then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local d = l[2] - l[1]\n  for i = 3, #l do\n    if (l[i] - l[i - 1]) * d < 0\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- ignore\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif d * direction <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            increasing = false\n        elseif\
    \ l[i] > l[i - 1] then\n            decreasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- do nothing\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local increasing = true\n  local decreasing = true\n  for i = 2, #l do\n  \
    \  if l[i] < l[i - 1] then\n      increasing = false\n    elseif l[i] > l[i -\
    \ 1] then\n      decreasing = false\n    end\n  end\n  return increasing or decreasing\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local n = #l\n  if n < 2 then return true end\n  local inc = l[2] > l[1]\n\
    \  for i = 3, n do\n    if inc ~= (l[i] > l[i-1]) then return false end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            increasing = false\n        elseif\
    \ l[i] > l[i - 1] then\n            decreasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local last = l[1]\n    local increasing = true\n    for _, v in ipairs(l)\
    \ do\n        if v < last then\n            increasing = false\n            break\n\
    \        end\n        last = v\n    end\n    if increasing then\n        return\
    \ true\n    end\n    last = l[1]\n    for _, v in ipairs(l) do\n        if v >\
    \ last then\n            return false\n        end\n        last = v\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if inc and l[i]\
    \ > l[i + 1] then\n            return false\n        elseif not inc and l[i] <\
    \ l[i + 1] then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- ignore\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif d * direction < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if inc and l[i]\
    \ > l[i + 1] then\n            return false\n        elseif not inc and l[i] <\
    \ l[i + 1] then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local n = #l\n    if n < 2 then\n        return true\n    end\n    local\
    \ inc = l[2] > l[1]\n    for i = 3, n do\n        if inc and l[i] < l[i - 1] then\n\
    \            return false\n        elseif not inc and l[i] > l[i - 1] then\n \
    \           return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- ignore\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if direction == 0 then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = 0\n    local dec = 0\n    for i = 1, #l - 1 do\n        if l[i]\
    \ < l[i + 1] then\n            inc = inc + 1\n        elseif l[i] > l[i + 1] then\n\
    \            dec = dec + 1\n        end\n    end\n    return inc == #l - 1 or\
    \ dec == #l - 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5muekkx5.lua:28:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp5muekkx5.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] > l[i - 1] then\n            dec = false\n        elseif l[i] < l[i - 1]\
    \ then\n            inc = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local n = #l\n    if n < 2 then\n        return true\n    end\n    local\
    \ d = l[2] - l[1]\n    for i = 3, n do\n        if (l[i] - l[i - 1]) * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif direction * d <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = l[2] - l[1]\n    for i = 2, #l - 1 do\n        if direction\
    \ * (l[i + 1] - l[i]) < 0 then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            increasing = false\n        elseif\
    \ l[i] > l[i - 1] then\n            decreasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if l[i] < l[i\
    \ + 1] ~= inc then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            increasing = false\n        elseif\
    \ l[i] > l[i - 1] then\n            decreasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            increasing = false\n        elseif\
    \ l[i] > l[i - 1] then\n            decreasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif direction * d <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            increasing = false\n        elseif\
    \ l[i] > l[i - 1] then\n            decreasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if l[i] < l[i\
    \ + 1] ~= inc then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            return false\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1_fy9gtj.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp1_fy9gtj.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local n = #l\n    if n < 2 then\n        return true\n    end\n    local\
    \ inc = l[2] > l[1]\n    for i = 3, n do\n        if inc ~= (l[i] > l[i - 1])\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            increasing = false\n        elseif\
    \ l[i] > l[i - 1] then\n            decreasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif d * direction <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local n = #l\n  if n < 2 then return true end\n  local inc = l[2] > l[1]\n\
    \  for i = 3, n do\n    if inc and l[i] < l[i-1] then return false end\n    if\
    \ not inc and l[i] > l[i-1] then return false end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            return false\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgi3uur6f.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpgi3uur6f.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- ignore\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif direction * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            return false\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif d * direction < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjb3fd_bh.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpjb3fd_bh.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local n = #l\n  if n < 2 then return true end\n  local d = l[2] - l[1]\n  for\
    \ i = 3, n do\n    if d * (l[i] - l[i-1]) < 0 then return false end\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if direction == 0 then\n            direction = d\n        elseif\
    \ d * direction < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local inc = true\n  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i\
    \ - 1] then\n      inc = false\n    elseif l[i] > l[i - 1] then\n      dec = false\n\
    \    end\n  end\n  return inc or dec\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ d * direction < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = 0\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n  \
    \  if d == 0 then\n      -- do nothing\n    elseif direction == 0 then\n     \
    \ direction = d\n    elseif direction * d < 0 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local d = l[2] - l[1]\n    for i = 3, #l do\n        if (l[i] - l[i - 1])\
    \ * d < 0 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local n = #l\n  if n < 2 then return true end\n  local inc = l[2] > l[1]\n\
    \  for i = 3, n do\n    if inc ~= (l[i] > l[i-1]) then return false end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] < l[i - 1] then\n            increasing = false\n        elseif\
    \ l[i] > l[i - 1] then\n            decreasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = nil\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n\
    \    if direction == nil then\n      direction = d\n    elseif direction * d <\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if l[i] < l[i\
    \ + 1] ~= inc then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local d = l[2] - l[1]\n    for i = 3, #l do\n        if (l[i] - l[i - 1])\
    \ * d < 0 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if direction == 0 then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local direction = 0\n  for i = 2, #l do\n    local d = l[i] - l[i - 1]\n  \
    \  if direction == 0 then\n      direction = d\n    elseif direction * d < 0 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local increasing = true\n  local decreasing = true\n  for i = 2, #l do\n  \
    \  if l[i] < l[i - 1] then\n      increasing = false\n    elseif l[i] > l[i -\
    \ 1] then\n      decreasing = false\n    end\n  end\n  return increasing or decreasing\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \  local d = l[2] - l[1]\n  for i = 3, #l do\n    if (l[i] - l[i - 1]) * d < 0\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = true\n    local dec = true\n    for i = 2, #l do\n        if\
    \ l[i] < l[i - 1] then\n            inc = false\n        elseif l[i] > l[i - 1]\
    \ then\n            dec = false\n        end\n    end\n    return inc or dec\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = l[1] <= l[2]\n    for i = 2, #l - 1 do\n        if inc and l[i]\
    \ > l[i + 1] then\n            return false\n        elseif not inc and l[i] <\
    \ l[i + 1] then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local inc = l[1] < l[2]\n    for i = 2, #l - 1 do\n        if inc and l[i]\
    \ > l[i + 1] then\n            return false\n        elseif not inc and l[i] <\
    \ l[i + 1] then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ d * direction < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local direction = 0\n    for i = 2, #l do\n        local d = l[i] - l[i -\
    \ 1]\n        if d == 0 then\n            -- no change\n        elseif direction\
    \ == 0 then\n            direction = d\n        elseif d * direction < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic([1, 2, 4, 20])\n-- True\n-- >>> monotonic([1, 20, 4, 10])\n--\
    \ False\n-- >>> monotonic([4, 1, 0, -10])\n-- True\nlocal function monotonic(l)\n\
    \    local n = #l\n    if n < 2 then\n        return true\n    end\n    local\
    \ d = l[2] - l[1]\n    for i = 3, n do\n        if d * (l[i] - l[i - 1]) < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
