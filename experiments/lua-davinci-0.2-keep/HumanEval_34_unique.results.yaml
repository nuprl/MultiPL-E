name: HumanEval_34_unique
language: lua
results:
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           r[#r + 1] = v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpq9njsq43.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpq9njsq43.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpq9njsq43.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp895qw5tu.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp895qw5tu.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    u[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(u) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7ebd73yn.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7ebd73yn.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp7ebd73yn.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local res = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(res, v)\n            seen[v] = true\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcbmekyx_.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {5, 3, 2, 9, 0, 123}\\nstack traceback:\\\
    n\\t/tmp/tmpcbmekyx_.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           r[#r + 1] = v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplkxevj4u.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplkxevj4u.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmplkxevj4u.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3txcxzyw.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3txcxzyw.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp3txcxzyw.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        if not u[v] then\n           \
    \ u[v] = true\n            table.insert(u, v)\n        end\n    end\n    return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_3ywh8kz.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp_3ywh8kz.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd6g2l8wl.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpd6g2l8wl.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpehfd49g5.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpehfd49g5.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpehfd49g5.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpoh20j45d.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpoh20j45d.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpoh20j45d.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           r[#r + 1] = v\n        end\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwqv2t31z.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwqv2t31z.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpwqv2t31z.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpl9jw6t6m.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpl9jw6t6m.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpl9jw6t6m.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      r[#r\
    \ + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbyc9yz9f.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpbyc9yz9f.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpbyc9yz9f.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpekyp4gju.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpekyp4gju.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpekyp4gju.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ ret = {}\n    for _, v in ipairs(l) do\n        if not contains(ret, v) then\n\
    \            table.insert(ret, v)\n        end\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjesl1asy.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjesl1asy.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpjesl1asy.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpw4lf2dqh.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpw4lf2dqh.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpw4lf2dqh.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp667ancp4.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp667ancp4.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp667ancp4.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzmtutu15.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpzmtutu15.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3r1a_sft.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3r1a_sft.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp3r1a_sft.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpi7fcsbo3.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpi7fcsbo3.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpi7fcsbo3.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpug0vf_vd.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpug0vf_vd.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpug0vf_vd.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqgoa3hp_.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpqgoa3hp_.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpqgoa3hp_.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbogziymj.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpbogziymj.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk19y4fg_.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpk19y4fg_.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq5fm0l74.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpq5fm0l74.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphh0tqofi.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphh0tqofi.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmphh0tqofi.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpveu4s4ej.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpveu4s4ej.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpc1ahbqx0.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpc1ahbqx0.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpc1ahbqx0.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp96z822nm.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp96z822nm.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpa932tjh1.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpa932tjh1.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpa932tjh1.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    r[v] = true\n  end\n  local r2 = {}\n\
    \  for k, _ in pairs(r) do\n    table.insert(r2, k)\n  end\n  table.sort(r2)\n\
    \  return r2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ set = {}\n    for _, v in ipairs(l) do\n        set[v] = true\n    end\n   \
    \ local result = {}\n    for k, _ in pairs(set) do\n        table.insert(result,\
    \ k)\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfs7tp5wm.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpfs7tp5wm.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjmczpdnt.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpjmczpdnt.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpjmczpdnt.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpebf74_hg.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpebf74_hg.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpebf74_hg.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5b77nty_.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp5b77nty_.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp48o8whnf.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp48o8whnf.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp48o8whnf.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppaft3ruv.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppaft3ruv.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmppaft3ruv.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3itia9x0.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3itia9x0.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp3itia9x0.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvbawhyi5.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpvbawhyi5.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpvbawhyi5.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph4783el_.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmph4783el_.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ table.insert(r, v)\n            r[v] = true\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4lrmg9vp.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp4lrmg9vp.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgh650fv6.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpgh650fv6.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo_vy_wzz.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpo_vy_wzz.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpo_vy_wzz.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpaz_uy41b.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpaz_uy41b.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpaz_uy41b.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      r[#r + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppxe6iuy_.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmppxe6iuy_.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local out = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(out, v)\n            seen[v] = true\n\
    \        end\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx08fiam5.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {5, 3, 2, 9, 0, 123}\\nstack traceback:\\\
    n\\t/tmp/tmpx08fiam5.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps89z_xgw.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmps89z_xgw.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxn52eqs9.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpxn52eqs9.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprgvk_450.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprgvk_450.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmprgvk_450.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp8b92o9g.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpp8b92o9g.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5abpvmt5.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp5abpvmt5.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7x4r7jdl.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp7x4r7jdl.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3e55y5x1.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp3e55y5x1.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp3e55y5x1.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      r[#r + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9dwkttmp.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp9dwkttmp.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpc7wn28i3.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpc7wn28i3.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpc7wn28i3.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplhh52e7o.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmplhh52e7o.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ ret = {}\n    for _, v in ipairs(l) do\n        if not contains(ret, v) then\n\
    \            table.insert(ret, v)\n        end\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxi5x7dab.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxi5x7dab.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpxi5x7dab.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_qmz1kwf.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_qmz1kwf.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp_qmz1kwf.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpetpkktkn.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpetpkktkn.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_vk0ykuf.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp_vk0ykuf.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkuzpa4_6.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpkuzpa4_6.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkz_d9_tw.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkz_d9_tw.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpkz_d9_tw.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdtsgm96c.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpdtsgm96c.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local res = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(res, v)\n            seen[v] = true\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk14mopfm.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {5, 3, 2, 9, 0, 123}\\nstack traceback:\\\
    n\\t/tmp/tmpk14mopfm.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(result, v)\n            seen[v] = true\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp98z0y10h.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {5, 3, 2, 9, 0, 123}\\nstack traceback:\\\
    n\\t/tmp/tmp98z0y10h.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn88di1ra.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpn88di1ra.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      r[#r + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprmrbg9ji.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmprmrbg9ji.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(s) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp57msd0tm.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp57msd0tm.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppu94w78c.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppu94w78c.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmppu94w78c.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnmbbt2jy.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpnmbbt2jy.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpnmbbt2jy.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        u[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(u) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp5y68_0b2.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp5y68_0b2.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp5y68_0b2.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1jx4sp5g.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp1jx4sp5g.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpe_4rzool.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpe_4rzool.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpe_4rzool.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        if not u[v] then\n           \
    \ u[v] = true\n            table.insert(u, v)\n        end\n    end\n    return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbuv6qju7.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpbuv6qju7.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphl9mj6lx.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmphl9mj6lx.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx85xbdyo.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpx85xbdyo.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ seen = {}\n    local result = {}\n    for _, v in ipairs(l) do\n        if not\
    \ seen[v] then\n            table.insert(result, v)\n            seen[v] = true\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe0e495xy.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {5, 3, 2, 9, 0, 123}\\nstack traceback:\\\
    n\\t/tmp/tmpe0e495xy.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj3ydyscx.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpj3ydyscx.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppxc2uze7.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppxc2uze7.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmppxc2uze7.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwi5xnr3d.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpwi5xnr3d.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      r[#r + 1] = v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy79lhsff.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpy79lhsff.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppowiq67w.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmppowiq67w.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmppowiq67w.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl_05t0ar.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpl_05t0ar.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ res = {}\n  local seen = {}\n  for _, v in ipairs(l) do\n    if not seen[v]\
    \ then\n      res[#res + 1] = v\n      seen[v] = true\n    end\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj8e81zpb.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {5, 3, 2, 9, 0, 123}\\nstack traceback:\\\
    n\\t/tmp/tmpj8e81zpb.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not res[v] then\n      res[v] =\
    \ true\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpje8evbyh.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpje8evbyh.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphu2ooc1a.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphu2ooc1a.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmphu2ooc1a.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(s) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpx2ivkzzc.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpx2ivkzzc.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpx2ivkzzc.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(s) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ seen = {}\n  local result = {}\n  for _, v in ipairs(l) do\n    if not seen[v]\
    \ then\n      table.insert(result, v)\n      seen[v] = true\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkx2qs64l.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {5, 3, 2, 9, 0, 123}\\nstack traceback:\\\
    n\\t/tmp/tmpkx2qs64l.lua:19: in function 'test_humaneval'\\n\\nRan 1 tests in\
    \ 0.001 seconds, 0 successes, 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwnair636.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpwnair636.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprc_xbgj3.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprc_xbgj3.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmprc_xbgj3.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        r[v] = true\n    end\n    local\
    \ r2 = {}\n    for k, _ in pairs(r) do\n        table.insert(r2, k)\n    end\n\
    \    table.sort(r2)\n    return r2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpe0dsjflx.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpe0dsjflx.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpe0dsjflx.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp01hjoog5.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp01hjoog5.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp01hjoog5.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsd52bma2.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpsd52bma2.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw9wtikf6.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpw9wtikf6.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpi07zw54e.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpi07zw54e.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpi07zw54e.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        if not t[v] then\n           \
    \ t[v] = true\n            table.insert(t, v)\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp00kdi5p7.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp00kdi5p7.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiv4pfr4h.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpiv4pfr4h.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3c6l8djh.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp3c6l8djh.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.003 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2d7j6y0b.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp2d7j6y0b.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt8o3l3c2.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpt8o3l3c2.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgevjok48.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpgevjok48.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl418zjej.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpl418zjej.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwt6qmz95.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpwt6qmz95.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzbh6v2wl.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzbh6v2wl.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpzbh6v2wl.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwomeqjhk.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpwomeqjhk.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwfx9cd3z.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpwfx9cd3z.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpwfx9cd3z.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprz4l89ya.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmprz4l89ya.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ s = {}\n  for _, v in ipairs(l) do\n    s[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(s) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplbny85mu.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplbny85mu.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmplbny85mu.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkka5cdv0.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkka5cdv0.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpkka5cdv0.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  return keys(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpciefzwdh.lua:9:\
    \ attempt to call global 'keys' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpciefzwdh.lua:9:\
    \ in function 'candidate'\\n\\t/tmp/tmpciefzwdh.lua:15: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvbe_lx8q.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpvbe_lx8q.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    if not t[v] then\n      t[v] = true\n\
    \      table.insert(t, v)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsrr68fmu.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpsrr68fmu.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7gi3ittd.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp7gi3ittd.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7fgwpi5j.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7fgwpi5j.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp7fgwpi5j.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdw9ypfcm.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpdw9ypfcm.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpm6mhe9ph.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpm6mhe9ph.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpm6mhe9ph.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7s6ptlcd.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp7s6ptlcd.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp7s6ptlcd.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplklfq178.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplklfq178.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmplklfq178.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpe1gw_70o.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpe1gw_70o.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpe1gw_70o.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaqobb_1c.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpaqobb_1c.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n\tlocal\
    \ r = {}\n\tfor _, v in ipairs(l) do\n\t\tif not contains(r, v) then\n\t\t\ttable.insert(r,\
    \ v)\n\t\tend\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpuz9q9vgw.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuz9q9vgw.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpuz9q9vgw.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ u = {}\n    for _, v in ipairs(l) do\n        u[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(u) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(s) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpm8evyymf.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpm8evyymf.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpm8evyymf.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjq82mgn0.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpjq82mgn0.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmph16a5aq6.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmph16a5aq6.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmph16a5aq6.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkk669o9d.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpkk669o9d.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpkk669o9d.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpspqsx7y8.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpspqsx7y8.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphsto6wbr.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmphsto6wbr.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmphsto6wbr.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2h_grv8q.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp2h_grv8q.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp2h_grv8q.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(s) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzcq8g64h.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpzcq8g64h.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpzcq8g64h.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not contains(r, v) then\n      table.insert(r,\
    \ v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnnmza9pk.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpnnmza9pk.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpnnmza9pk.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5apd_j9f.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp5apd_j9f.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzbrqpjnk.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpzbrqpjnk.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not contains(r, v) then\n \
    \           table.insert(r, v)\n        end\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_jhmotle.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp_jhmotle.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmp_jhmotle.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprd9_z8vv.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmprd9_z8vv.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp89zf_lbc.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp89zf_lbc.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw4ikyc84.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpw4ikyc84.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphtigcnk5.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmphtigcnk5.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo2aj860q.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpo2aj860q.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1yxdzzm7.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp1yxdzzm7.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4q6ij4l_.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp4q6ij4l_.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa17nqyc_.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpa17nqyc_.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ r = {}\n  for _, v in ipairs(l) do\n    if not r[v] then\n      r[v] = true\n\
    \      table.insert(r, v)\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoprg4d5q.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpoprg4d5q.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ s = {}\n    for _, v in ipairs(l) do\n        s[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(s) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvn2m3rc4.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpvn2m3rc4.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ t = {}\n  for _, v in ipairs(l) do\n    t[v] = true\n  end\n  local r = {}\n\
    \  for k, _ in pairs(t) do\n    table.insert(r, k)\n  end\n  table.sort(r)\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ res = {}\n    for _, v in ipairs(l) do\n        if not contains(res, v) then\n\
    \            table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo880wfuy.lua:7:\
    \ attempt to call global 'contains' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpo880wfuy.lua:7:\
    \ in function 'candidate'\\n\\t/tmp/tmpo880wfuy.lua:17: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9at5qmax.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmp9at5qmax.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not res[v] then\n      res[v] =\
    \ true\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa_ewl9kk.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpa_ewl9kk.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ t = {}\n    for _, v in ipairs(l) do\n        t[v] = true\n    end\n    local\
    \ r = {}\n    for k, _ in pairs(t) do\n        table.insert(r, k)\n    end\n \
    \   table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return sorted unique elements in a list\n-- >>> unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n-- [0, 2, 3, 5, 9, 123]\nlocal function unique(l)\n    local\
    \ r = {}\n    for _, v in ipairs(l) do\n        if not r[v] then\n           \
    \ r[v] = true\n            table.insert(r, v)\n        end\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdr5xfwsw.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\\nactual: {0=true, 5, 3, true, 9, true, 0, 123,\
    \ 9=true, 123=true}\\nstack traceback:\\n\\t/tmp/tmpdr5xfwsw.lua:18: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
