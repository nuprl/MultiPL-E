name: HumanEval_128_prod_signs
language: lua
results:
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + math.abs(v)\n    else\n      prod = prod * 0\n\
    \    end\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeay_0qlc.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpeay_0qlc.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiwbs8bkx.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmpiwbs8bkx.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp473dkq3n.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmp473dkq3n.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprciqurju.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmprciqurju.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = arr[i] / math.abs(arr[i])\n\
    \    prod = prod * sign\n    sum = sum + math.abs(arr[i])\n  end\n  return sum\
    \ * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6vem7ino.lua:24:\
    \ expected: 0, actual: #NaN\\nstack traceback:\\n\\t/tmp/tmp6vem7ino.lua:24: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr)\
    \ do\n    sum = sum + math.abs(v)\n    if v > 0 then prod = prod * 1\n    elseif\
    \ v < 0 then prod = prod * -1\n    end\n  end\n  return sum * prod\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnucakauq.lua:26:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnucakauq.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod = 1\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        if v > 0 then\n            prod = prod * 1\n\
    \            sum = sum + v\n        elseif v < 0 then\n            prod = prod\
    \ * -1\n            sum = sum + -v\n        end\n    end\n    return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjmlb2mjb.lua:29:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjmlb2mjb.lua:29: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v <\
    \ 0 then\n            prod = prod * -1\n        elseif v > 0 then\n          \
    \  prod = prod * 1\n        else\n            prod = prod * 0\n        end\n \
    \       sum = sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpejpxv4a7.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpejpxv4a7.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptipo4aal.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmptipo4aal.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp11xpgl1m.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp11xpgl1m.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwku8ejzs.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwku8ejzs.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3fwkzllo.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3fwkzllo.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpho_hl5ew.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpho_hl5ew.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp01o50umt.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp01o50umt.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp99f12ol6.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp99f12ol6.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkhmwhtoi.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkhmwhtoi.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    else\n      prod = 0\n    end\n  end\n  return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbdacle_7.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpbdacle_7.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v ==\
    \ 0 then\n            prod = 0\n        elseif v > 0 then\n            prod =\
    \ prod * 1\n        else\n            prod = prod * -1\n        end\n        sum\
    \ = sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaoxio38m.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpaoxio38m.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for i, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + math.abs(v)\n\
    \        else\n            prod = prod * 0\n        end\n    end\n    return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp94f39oe0.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp94f39oe0.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if\
    \ n > 0 then\n      prod = prod * 1\n    elseif n < 0 then\n      prod = prod\
    \ * -1\n    else\n      prod = prod * 0\n    end\n    sum = sum + math.abs(n)\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptx_373sa.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmptx_373sa.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxb605vd2.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpxb605vd2.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3zlrp0vw.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3zlrp0vw.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\
    \ prod = prod * 1\n        elseif v < 0 then prod = prod * -1\n        end\n \
    \   end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgv2chxud.lua:26:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpgv2chxud.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + math.abs(v)\n\
    \        else\n            prod = prod * 0\n        end\n    end\n    if sum ==\
    \ 0 then\n        return nil\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for i = 1, #arr do\n        local n = arr[i]\n\
    \        if n > 0 then\n            prod = prod * 1\n        elseif n < 0 then\n\
    \            prod = prod * -1\n        else\n            prod = prod * 0\n   \
    \     end\n        sum = sum + math.abs(n)\n    end\n    return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7mkqp94a.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp7mkqp94a.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    else\n      prod = 0\n    end\n  end\n  return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuxuefjze.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpuxuefjze.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        local num = arr[i]\n\
    \        if num == 0 then\n            prod = 0\n        elseif num > 0 then\n\
    \            sum = sum + num\n        else\n            sum = sum - num\n    \
    \        prod = prod * -1\n        end\n    end\n    return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf675dmdo.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpf675dmdo.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk0y68qcr.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpk0y68qcr.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        prod = prod\
    \ * math.sign(v)\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpb5efkdqr.lua:15:\
    \ attempt to call field 'sign' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpb5efkdqr.lua:15:\
    \ in function 'candidate'\\n\\t/tmp/tmpb5efkdqr.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    else\n      prod = 0\n    end\n  end\n  return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9fmspmif.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9fmspmif.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        prod = prod\
    \ * (v == 0 and 1 or v / math.abs(v))\n    end\n    return sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2h14zlg_.lua:24:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp2h14zlg_.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl1auf23s.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpl1auf23s.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwuqee0rv.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpwuqee0rv.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + -v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf8xftdll.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpf8xftdll.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + -v\n     \
    \   else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgwrrpxrq.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpgwrrpxrq.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum, prod = 0, 1\n    for _, v in ipairs(arr)\
    \ do\n        local sign = v > 0 and 1 or v < 0 and -1 or 0\n        sum = sum\
    \ + math.abs(v)\n        prod = prod * sign\n    end\n    return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmkiz876y.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpmkiz876y.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        local sign = math.sign(arr[i])\n\
    \        if sign == 0 then\n            return nil\n        end\n        sum =\
    \ sum + math.abs(arr[i])\n        prod = prod * sign\n    end\n    return sum\
    \ * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpt8yaiins.lua:13:\
    \ attempt to call field 'sign' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpt8yaiins.lua:13:\
    \ in function 'candidate'\\n\\t/tmp/tmpt8yaiins.lua:26: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphj735jkx.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmphj735jkx.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        local sign = arr[i]\
    \ > 0 and 1 or arr[i] < 0 and -1 or 0\n        sum = sum + math.abs(arr[i])\n\
    \        prod = prod * sign\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppdhn4evg.lua:26:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmppdhn4evg.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v ==\
    \ 0 then\n            prod = 0\n        else\n            sum = sum + math.abs(v)\n\
    \            prod = prod * (v / math.abs(v))\n        end\n    end\n    return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6766ez_v.lua:29:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6766ez_v.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\
    \ prod = prod * 1\n        elseif v < 0 then prod = prod * -1\n        end\n \
    \   end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpagmd3su2.lua:26:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpagmd3su2.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum, prod = 0, 1\n    for _, v in ipairs(arr)\
    \ do\n        sum = sum + math.abs(v)\n        prod = prod * (v == 0 and 1 or\
    \ v / math.abs(v))\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbvd9kc0f.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpbvd9kc0f.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod = 1\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        prod = prod * (v > 0 and 1 or v < 0 and -1 or\
    \ 0)\n        sum = sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\
    \ prod = prod * 1\n        elseif v < 0 then prod = prod * -1\n        end\n \
    \   end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaemh6yyk.lua:26:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpaemh6yyk.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v ==\
    \ 0 then\n            prod = 0\n        elseif v > 0 then\n            prod =\
    \ prod * 1\n        else\n            prod = prod * -1\n        end\n        sum\
    \ = sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9urpd7cl.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp9urpd7cl.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg3ap2vla.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpg3ap2vla.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgjbfx7rt.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpgjbfx7rt.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    else\n      prod = 0\n    end\n  end\n  return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3g7agxjz.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3g7agxjz.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2a1z53vh.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2a1z53vh.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnb5fak04.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnb5fak04.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprixwwjwi.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmprixwwjwi.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpemx7909x.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpemx7909x.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v < 0 then\n            prod = prod * -1\n       \
    \ elseif v > 0 then\n            prod = prod * 1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8isdb0ub.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8isdb0ub.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        local sign = arr[i]\
    \ > 0 and 1 or arr[i] < 0 and -1 or 0\n        sum = sum + math.abs(arr[i])\n\
    \        prod = prod * sign\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpve6hhivy.lua:26:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpve6hhivy.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        prod = prod * (v > 0 and 1 or v < 0 and -1 or 0)\n  \
    \  end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnaa2b9gt.lua:25:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnaa2b9gt.lua:25: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + -v\n     \
    \   else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo9_hhxqw.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpo9_hhxqw.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnneuwhh_.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnneuwhh_.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3d47jj6q.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3d47jj6q.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpid9ctnm5.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpid9ctnm5.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0biz1kmm.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0biz1kmm.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    if sum == 0 then\n\
    \        return nil\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwxjl6nl0.lua:32:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmpwxjl6nl0.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0hohw9r1.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0hohw9r1.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa9a1ixbj.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpa9a1ixbj.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    else\n      prod = 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp32_yucf7.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp32_yucf7.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        prod = prod\
    \ * (v == 0 and 1 or v / math.abs(v))\n    end\n    return sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpblg3wwvo.lua:24:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpblg3wwvo.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyi861j8l.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpyi861j8l.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + -v\n     \
    \   else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1r71ybdg.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp1r71ybdg.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt8zmmh6b.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpt8zmmh6b.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp92el5ika.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp92el5ika.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1qc13qzh.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp1qc13qzh.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        prod = prod\
    \ * (v == 0 and 1 or v / math.abs(v))\n    end\n    return sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd6o9g2ho.lua:24:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpd6o9g2ho.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    else\n      prod = 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpproe98l9.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpproe98l9.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvxm7c_9i.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmpvxm7c_9i.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\
    \ prod = prod * 1\n        elseif v < 0 then prod = prod * -1\n        end\n \
    \   end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6zwx8f0x.lua:26:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp6zwx8f0x.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v < 0 then\
    \ prod = prod * -1 end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw2sma6qb.lua:24:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpw2sma6qb.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v < 0 then\
    \ prod = prod * -1 end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0uw63qni.lua:24:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp0uw63qni.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppjw8as6s.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmppjw8as6s.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        if v < 0 then\n            prod = prod * -1\n\
    \        elseif v == 0 then\n            prod = 0\n        end\n        sum =\
    \ sum + math.abs(v)\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphejadyqp.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmphejadyqp.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        if arr[i] > 0 then\n\
    \            sum = sum + arr[i]\n        elseif arr[i] < 0 then\n            sum\
    \ = sum - arr[i]\n            prod = prod * -1\n        else\n            prod\
    \ = 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqpthfu1i.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpqpthfu1i.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for i = 1, #arr do\n        local n = arr[i]\n\
    \        if n > 0 then\n            prod = prod * 1\n        elseif n < 0 then\n\
    \            prod = prod * -1\n        else\n            prod = prod * 0\n   \
    \     end\n        sum = sum + math.abs(n)\n    end\n    return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnw6sypn1.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnw6sypn1.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvoztnd5r.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmpvoztnd5r.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        local sign = arr[i]\
    \ > 0 and 1 or arr[i] < 0 and -1 or 0\n        sum = sum + math.abs(arr[i])\n\
    \        prod = prod * sign\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd4hbs1du.lua:26:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpd4hbs1du.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpymcltw0p.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpymcltw0p.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod = 1\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        if v > 0 then\n            prod = prod * 1\n\
    \            sum = sum + v\n        elseif v < 0 then\n            prod = prod\
    \ * -1\n            sum = sum + -v\n        end\n    end\n    return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk5d6ym4l.lua:29:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpk5d6ym4l.lua:29: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    if sum == 0 then\n\
    \        return nil\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7uhvnhcs.lua:32:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmp7uhvnhcs.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpem2e2saz.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpem2e2saz.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\
    \ prod = prod * 1\n        elseif v < 0 then prod = prod * -1\n        end\n \
    \   end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc8m0x52x.lua:26:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpc8m0x52x.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        prod = prod * math.sign(v)\n    end\n    return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpuo4yluc3.lua:14:\
    \ attempt to call field 'sign' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpuo4yluc3.lua:14:\
    \ in function 'candidate'\\n\\t/tmp/tmpuo4yluc3.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnhdpskqg.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnhdpskqg.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps3ruvr_g.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmps3ruvr_g.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + -v\n     \
    \   else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk6l2w8gy.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpk6l2w8gy.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph3u_j2_3.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmph3u_j2_3.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpju9dplbh.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpju9dplbh.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjo2jwj7h.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpjo2jwj7h.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        prod =\
    \ prod * (v > 0 and 1 or (v < 0 and -1 or 0))\n        sum = sum + math.abs(v)\n\
    \    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5awameoj.lua:25:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5awameoj.lua:25: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp452wgcfz.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmp452wgcfz.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ not arr then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ i = 1, #arr do\n        local n = arr[i]\n        if n == 0 then\n         \
    \   prod = 0\n            break\n        elseif n > 0 then\n            prod =\
    \ prod * 1\n        else\n            prod = prod * -1\n        end\n        sum\
    \ = sum + math.abs(n)\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6a9gj38p.lua:34:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp6a9gj38p.lua:34: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\
    \ prod = prod * 1\n        elseif v < 0 then prod = prod * -1\n        end\n \
    \   end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgt7qzwwo.lua:26:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpgt7qzwwo.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        if v == 0 then\n            prod = 0\n     \
    \       break\n        elseif v > 0 then\n            sum = sum + v\n        else\n\
    \            sum = sum - v\n            prod = prod * -1\n        end\n    end\n\
    \    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp160f3veq.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp160f3veq.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcv0lxues.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmpcv0lxues.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp71yydfd3.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp71yydfd3.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        prod =\
    \ prod * (v >= 0 and 1 or -1)\n        sum = sum + math.abs(v)\n    end\n    return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcxnh4wh0.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpcxnh4wh0.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp36m184kz.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp36m184kz.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum, prod = 0, 1\n    for _, v in ipairs(arr) do\n        if v == 0 then\n \
    \           prod = 0\n        elseif v > 0 then\n            sum = sum + v\n \
    \       else\n            sum = sum - v\n            prod = prod * -1\n      \
    \  end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpage6vxo8.lua:30:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpage6vxo8.lua:30: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprnrn7j2x.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmprnrn7j2x.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpt0g__azz.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpt0g__azz.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8wdqsc0c.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmp8wdqsc0c.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp30poltdo.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmp30poltdo.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq728tfnt.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpq728tfnt.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpecy1s_fu.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpecy1s_fu.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc_b5mb4j.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpc_b5mb4j.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnq2w0u1_.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnq2w0u1_.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for i, v in ipairs(arr) do\n        if v ==\
    \ 0 then\n            prod = 0\n        else\n            sum = sum + math.abs(v)\n\
    \            prod = prod * (v / math.abs(v))\n        end\n    end\n    return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprnbrj1hq.lua:29:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmprnbrj1hq.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        prod = prod\
    \ * (v == 0 and 1 or v / math.abs(v))\n    end\n    return sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphwft0ag2.lua:24:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmphwft0ag2.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod = 1\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        if v > 0 then\n            prod = prod * 1\n\
    \            sum = sum + v\n        elseif v < 0 then\n            prod = prod\
    \ * -1\n            sum = sum + math.abs(v)\n        else\n            prod =\
    \ prod * 0\n        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v < 0 then\n            prod = prod * -1\n       \
    \ elseif v > 0 then\n            prod = prod * 1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc4z475is.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpc4z475is.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8wswmxq9.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8wswmxq9.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptus2yrec.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmptus2yrec.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmkc194tp.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmpmkc194tp.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1oyoza8i.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp1oyoza8i.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        prod = prod\
    \ * (v == 0 and 1 or v / math.abs(v))\n    end\n    return sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp03re8li0.lua:24:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp03re8li0.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        if v < 0 then\n            prod = prod * -1\n\
    \        elseif v == 0 then\n            prod = 0\n        end\n        sum =\
    \ sum + math.abs(v)\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        prod = prod * (v < 0 and -1 or v > 0 and 1 or 0)\n  \
    \  end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq5_lgvr6.lua:25:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpq5_lgvr6.lua:25: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v <\
    \ 0 then\n            prod = prod * -1\n        elseif v == 0 then\n         \
    \   prod = 0\n        end\n        sum = sum + math.abs(v)\n    end\n    return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpldpri13w.lua:29:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpldpri13w.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3dwu3azc.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3dwu3azc.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpksqcao6j.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpksqcao6j.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnr2d22_e.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpnr2d22_e.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkyf25qef.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkyf25qef.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        local sign\
    \ = v > 0 and 1 or v < 0 and -1 or 0\n        sum = sum + math.abs(v)\n      \
    \  prod = prod * sign\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2vvzrhup.lua:26:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2vvzrhup.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        prod = prod\
    \ * (v == 0 and 1 or v / math.abs(v))\n    end\n    return sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj1ikgk7k.lua:24:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpj1ikgk7k.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5sztlfdi.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp5sztlfdi.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    else\n      prod = 0\n    end\n  end\n  return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz6pnaveq.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpz6pnaveq.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v == 0 then\n\
    \      prod = 0\n    else\n      prod = prod * (v / math.abs(v))\n      sum =\
    \ sum + math.abs(v)\n    end\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkvxvjch2.lua:29:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkvxvjch2.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpiawdcy50.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpiawdcy50.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v < 0 then\n\
    \      prod = prod * -1\n    elseif v == 0 then\n      prod = 0\n    end\n   \
    \ sum = sum + math.abs(v)\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy9qrh2xa.lua:29:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpy9qrh2xa.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp58yw937.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpp58yw937.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        local sign\
    \ = v > 0 and 1 or v < 0 and -1 or 0\n        sum = sum + math.abs(v)\n      \
    \  prod = prod * sign\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3adv3kr8.lua:26:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp3adv3kr8.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp75huy1gz.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp75huy1gz.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl_xhv5xm.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpl_xhv5xm.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptycs1t35.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmptycs1t35.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphylsifpv.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmphylsifpv.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \    if v > 0 then\n      prod = prod * 1\n    elseif v < 0 then\n      prod =\
    \ prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqqz0ui4q.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpqqz0ui4q.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for i = 1, #arr do\n        local n = arr[i]\n\
    \        if n == 0 then\n            prod = 0\n        elseif n > 0 then\n   \
    \         sum = sum + n\n        else\n            sum = sum - n\n           \
    \ prod = prod * -1\n        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2zv88nsb.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2zv88nsb.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp87_ua1je.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp87_ua1je.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    else\n      prod = 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsn5628nq.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpsn5628nq.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        local sign\
    \ = v > 0 and 1 or v < 0 and -1 or 0\n        prod = prod * sign\n        sum\
    \ = sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp218xgnff.lua:26:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp218xgnff.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v ==\
    \ 0 then\n            prod = 0\n        elseif v > 0 then\n            prod =\
    \ prod * 1\n        else\n            prod = prod * -1\n        end\n        sum\
    \ = sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsu73bom0.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpsu73bom0.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi_9lig17.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpi_9lig17.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for i = 1, #arr do\n    local num = arr[i]\n  \
    \  if num > 0 then\n      prod = prod * 1\n    elseif num < 0 then\n      prod\
    \ = prod * -1\n    else\n      prod = prod * 0\n    end\n    sum = sum + math.abs(num)\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdffu6r8y.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdffu6r8y.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum, prod = 0, 1\n    for _, v in ipairs(arr)\
    \ do\n        local sign = math.sign(v)\n        sum = sum + math.abs(v)\n   \
    \     prod = prod * sign\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpt9oqzy70.lua:13:\
    \ attempt to call field 'sign' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpt9oqzy70.lua:13:\
    \ in function 'candidate'\\n\\t/tmp/tmpt9oqzy70.lua:23: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        local sign\
    \ = v > 0 and 1 or v < 0 and -1 or 0\n        sum = sum + math.abs(v)\n      \
    \  prod = prod * sign\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprheewom6.lua:26:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmprheewom6.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        prod = prod * (v == 0 and 1 or v / math.abs(v))\n   \
    \ end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5of60myv.lua:23:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmp5of60myv.lua:23: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v == 0 then\n\
    \      prod = 0\n    else\n      prod = prod * (v / math.abs(v))\n      sum =\
    \ sum + math.abs(v)\n    end\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2qa2d_6y.lua:29:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp2qa2d_6y.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpudtrd_v8.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpudtrd_v8.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\
    \ prod = prod * 1\n        elseif v < 0 then prod = prod * -1\n        end\n \
    \   end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpolnkrnia.lua:26:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpolnkrnia.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp24nsyx_q.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmp24nsyx_q.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for i, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + math.abs(v)\n\
    \        else\n            prod = prod * 0\n        end\n    end\n    return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgkqdaazd.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpgkqdaazd.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + math.abs(v)\n    else\n      prod = prod * 0\n\
    \    end\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcylyf4dg.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpcylyf4dg.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + math.abs(v)\n\
    \        else\n            prod = prod * 0\n        end\n    end\n    if sum ==\
    \ 0 then\n        return nil\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        prod = prod\
    \ * (v == 0 and 1 or v / math.abs(v))\n    end\n    return sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu6gmgdms.lua:24:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpu6gmgdms.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + v\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe5j_lenl.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmpe5j_lenl.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local prod = 1\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        if v > 0 then\n            prod = prod * 1\n\
    \            sum = sum + v\n        elseif v < 0 then\n            prod = prod\
    \ * -1\n            sum = sum + v\n        else\n            prod = prod * 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw_bq1x_b.lua:30:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmpw_bq1x_b.lua:30: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr47lmbuc.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpr47lmbuc.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for i = 1, #arr do\n    local sign = arr[i] > 0\
    \ and 1 or arr[i] < 0 and -1 or 0\n    sum = sum + math.abs(arr[i])\n    prod\
    \ = prod * sign\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyr9t_rbd.lua:26:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpyr9t_rbd.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfmu70fqh.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmpfmu70fqh.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxacma19k.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpxacma19k.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    else\n      prod = 0\n    end\n  end\n  return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp45cdnhb9.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp45cdnhb9.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl4fiembw.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpl4fiembw.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + v\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps5bboxkt.lua:29:\
    \ expected: -9, actual: -1\\nstack traceback:\\n\\t/tmp/tmps5bboxkt.lua:29: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuwvrup3_.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpuwvrup3_.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\
    \ prod = prod * 1\n        elseif v < 0 then prod = prod * -1\n        end\n \
    \   end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpthevt77q.lua:26:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpthevt77q.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe4a695qg.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpe4a695qg.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        local sign\
    \ = v > 0 and 1 or v < 0 and -1 or 0\n        prod = prod * sign\n        sum\
    \ = sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkwc29569.lua:26:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpkwc29569.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp48y0_647.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp48y0_647.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + -v\n     \
    \   else\n            prod = prod * 0\n        end\n    end\n    return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4hzeafhx.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp4hzeafhx.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps9uaiafv.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmps9uaiafv.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        local sign\
    \ = v > 0 and 1 or v < 0 and -1 or 0\n        prod = prod * sign\n        sum\
    \ = sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdyno1shm.lua:26:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdyno1shm.lua:26: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v ==\
    \ 0 then\n            prod = 0\n        elseif v > 0 then\n            prod =\
    \ prod * 1\n        else\n            prod = prod * -1\n        end\n        sum\
    \ = sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0ewd1rgq.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp0ewd1rgq.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdn21r8tr.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpdn21r8tr.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    else\n      prod = 0\n    end\n  end\n  return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8zn2febc.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp8zn2febc.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for i = 1, #arr do\n        if arr[i] > 0 then\n\
    \            prod = prod * 1\n            sum = sum + arr[i]\n        elseif arr[i]\
    \ < 0 then\n            prod = prod * -1\n            sum = sum + arr[i] * -1\n\
    \        else\n            prod = prod * 0\n        end\n    end\n    return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpngor5zyd.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpngor5zyd.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvc53jccq.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpvc53jccq.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum, prod = 0, 1\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            sum = sum + v\n        elseif v < 0 then\n\
    \            sum = sum - v\n            prod = prod * -1\n        end\n    end\n\
    \    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfw5jezzd.lua:27:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpfw5jezzd.lua:27: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for i, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptasyetru.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmptasyetru.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmks21s8c.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpmks21s8c.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_let3ull.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp_let3ull.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp964kj_t8.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp964kj_t8.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1bqct97r.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmp1bqct97r.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        prod = prod\
    \ * (v == 0 and 1 or v / math.abs(v))\n    end\n    return sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjuczuodm.lua:24:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpjuczuodm.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      prod =\
    \ prod * -1\n    else\n      prod = 0\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphrpt577p.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmphrpt577p.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd67zk3q0.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpd67zk3q0.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpti6b3k6g.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpti6b3k6g.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv2qwks7d.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpv2qwks7d.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n            sum = sum + v\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n            sum = sum + math.abs(v)\n\
    \        else\n            prod = prod * 0\n        end\n    end\n    return sum\
    \ * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfqwbeqdk.lua:32:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmpfqwbeqdk.lua:32: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        if v > 0 then\n            sum = sum + v\n \
    \       elseif v < 0 then\n            sum = sum - v\n            prod = prod\
    \ * -1\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppi1lq_ls.lua:28:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmppi1lq_ls.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n        elseif v < 0 then\n            sum\
    \ = sum - v\n            prod = prod * -1\n        else\n            prod = 0\n\
    \        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps7a91o1q.lua:31:\
    \ expected: nil, actual: 0\\nstack traceback:\\n\\t/tmp/tmps7a91o1q.lua:31: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You are given an array arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the array, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs([1, 2, 2, -4]) == -9\n-- >>> prod_signs([0, 1])\
    \ == 0\n-- >>> prod_signs([]) == None\nlocal function prod_signs(arr)\n    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        prod = prod\
    \ * (v == 0 and 1 or v / math.abs(v))\n    end\n    return sum * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnthtw73w.lua:24:\
    \ expected: 0, actual: 1\\nstack traceback:\\n\\t/tmp/tmpnthtw73w.lua:24: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
