name: HumanEval_159_eat
language: lua
prompt: "-- You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n-- but now you need to eat more carrots to complete the day's meals.\n\
  -- you should return an array of [ total number of eaten carrots after your meals,\n\
  -- the number of carrots left after your meals ]\n-- if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n-- Example:\n\
  -- * eat(5, 6, 10) -> [11, 4]\n-- * eat(4, 8, 9) -> [12, 1]\n-- * eat(1, 10, 10)\
  \ -> [11, 0]\n-- * eat(2, 11, 5) -> [7, 0]\n-- Variables:\n-- @number : integer\n\
  -- the number of carrots that you have eaten.\n-- @need : integer\n-- the number\
  \ of carrots that you need to eat.\n-- @remaining : integer\n-- the number of remaining\
  \ carrots thet exist in stock\n-- Constrain:\n-- * 0 <= number <= 1000\n-- * 0 <=\
  \ need <= 1000\n-- * 0 <= remaining <= 1000\n-- Have fun :)\nlocal function eat(number,\
  \ need, remaining)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = eat\n\
  \    lu.assertEquals(candidate(5, 6, 10), {11, 4})\n    lu.assertEquals(candidate(4,\
  \ 8, 9), {12, 1})\n    lu.assertEquals(candidate(1, 10, 10), {11, 0})\n    lu.assertEquals(candidate(2,\
  \ 11, 5), {7, 0})\n    lu.assertEquals(candidate(4, 5, 7), {9, 2})\n    lu.assertEquals(candidate(4,\
  \ 5, 1), {5, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- your code here\n  return {number + need, remaining - need}\nend",
  "  -- your code here\n  local total = number + need\n  if total > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  -- your code here\n  if number + need <= remaining then\n    return {number\
    \ + need, remaining - (number + need)}\n  else\n    return {remaining + number,\
    \ 0}\n  end\nend", "  -- your code here\n  local total = number + remaining\n\
    \  if total < need then\n    return {total, 0}\n  else\n    return {need, total\
    \ - need}\n  end\nend", "  local total = number + remaining\n  if total >= need\
    \ then\n    return {need, total - need}\n  else\n    return {total, 0}\n  end\n\
    end", "  local total = number + need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\nend",
  "  -- your code here\n  return {number + need, remaining - need}\nend", "    --\
    \ Your code here\n    return {number + math.min(need, remaining), math.max(remaining\
    \ - need, 0)}\nend", "  local total = number + need\n  if total > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  local eaten = number + need\n  if eaten > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {eaten, remaining - eaten}\n  end\nend",
  "  -- your code here\n  local total = number + need\n  if total > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  -- your code here\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend", "  -- your code here\nend", "  -- your code here\n  return {number\
    \ + need, remaining - need}\nend", "  -- your code here\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend", "  -- your code here\n  return {number +\
    \ need, remaining - need}\nend", "  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend", "  local total = number + remaining\n  if total >= need then\n \
    \   return { need, total - need }\n  else\n    return { total, 0 }\n  end\nend",
  "  -- your code here\n  local total = number + need\n  if total > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  local total = number + need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\nend",
  "    local eaten = number + math.min(need, remaining)\n    return {eaten, math.max(0,\
    \ remaining - need)}\nend", "    local total = number + need\n    if total > remaining\
    \ then\n        return {remaining, 0}\n    else\n        return {total, remaining\
    \ - total}\n    end\nend", "  -- your code here\n  local total = number + need\n\
    \  if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend", "  -- your code here\n  if number + need <=\
    \ remaining then\n    return {number + need, remaining - (number + need)}\n  else\n\
    \    return {number + remaining, 0}\n  end\nend", "  local total = number + remaining\n\
    \  if total >= need then\n    return {need, total - need}\n  else\n    return\
    \ {total, 0}\n  end\nend", "  local eaten = number + need\n  if eaten > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {eaten, remaining - eaten}\n\
    \  end\nend", "  -- your code here\n  if number + need <= remaining then\n   \
    \ return {number + need, remaining - (number + need)}\n  else\n    return {number\
    \ + remaining, 0}\n  end\nend", "  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend", "  local eaten = number + need\n  local\
    \ left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return {eaten,\
    \ left}\nend", "  local total = number + need\n  if total > remaining then\n \
    \   return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  -- your code here\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend", "  return {number + need, remaining - need}\nend", "    -- your\
    \ code here\n    local total = number + remaining\n    if total >= need then\n\
    \        return {need, total - need}\n    else\n        return {total, 0}\n  \
    \  end\nend", "  if number + need > remaining then\n    return {remaining, 0}\n\
    \  else\n    return {number + need, remaining - (number + need)}\n  end\nend",
  "  -- your code here\n  local total = number + need\n  if total > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  -- your code here\n  return {number + need, remaining - need}\nend",
  "    -- your code here\n    local total = number + need\n    if total > remaining\
    \ then\n        return {remaining, 0}\n    else\n        return {total, remaining\
    \ - total}\n    end\nend", "  -- your code here\n  local total = number + remaining\n\
    \  if total < need then\n    return {total, 0}\n  else\n    return {need, total\
    \ - need}\n  end\nend", "  -- your code here\n  local total = number + need\n\
    \  local left = remaining - need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, left}\n  end\nend", "  -- your code here\n  if\
    \ remaining >= need then\n    return number + need, remaining - need\n  else\n\
    \    return number + remaining, 0\n  end\nend", "    if number + need > remaining\
    \ then\n        return {remaining, 0}\n    else\n        return {number + need,\
    \ remaining - (number + need)}\n    end\nend", "    -- your code here\n    if\
    \ number + need <= remaining then\n        return {number + need, remaining -\
    \ (number + need)}\n    else\n        return {number + remaining, 0}\n    end\n\
    end", "  -- your code here\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend", "  -- your code here\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend", "  local result = {}\n  local eaten = number + need\n  local left\
    \ = remaining - need\n  if left < 0 then\n    eaten = eaten + left\n    left =\
    \ 0\n  end\n  result[1] = eaten\n  result[2] = left\n  return result\nend", " \
    \ local total = number + need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, remaining - total}\n  end\nend", "  -- your code\
    \ here\n  local total = number + need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\nend",
  "  -- your code here\n  return {number + need, remaining - need}\nend", "  local\
    \ total = number + need\n  if total > remaining then\n    return {remaining, 0}\n\
    \  else\n    return {total, remaining - total}\n  end\nend", "  local result =\
    \ {}\n  if remaining < need then\n    result[1] = number + remaining\n    result[2]\
    \ = 0\n  else\n    result[1] = number + need\n    result[2] = remaining - need\n\
    \  end\n  return result\nend", "  -- your code here\n  return {number + need,\
    \ remaining - need}\nend", "  -- your code here\n  local total = number + remaining\n\
    \  if total >= need then\n    return {need, total - need}\n  else\n    return\
    \ {total, 0}\n  end\nend", "  -- your code here\n  if number + need <= remaining\
    \ then\n    return {number + need, remaining - (number + need)}\n  else\n    return\
    \ {number + remaining, 0}\n  end\nend", "  -- your code here\n  local total =\
    \ number + need\n  local left = remaining - need\n  if left < 0 then\n    return\
    \ {total, 0}\n  else\n    return {total, left}\n  end\nend", "  return {number\
    \ + math.min(need, remaining), math.max(remaining - need, 0)}\nend", "  -- your\
    \ code here\n  local total = number + need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\nend",
  "    -- your code here\n    local total = number + need\n    if total > remaining\
    \ then\n        return {remaining, 0}\n    else\n        return {total, remaining\
    \ - total}\n    end\nend", "    local total = number + remaining\n    local left\
    \ = total - need\n    if left < 0 then\n        left = 0\n    end\n    return\
    \ {total, left}\nend", "  -- your code here\n  local total = number + need\n \
    \ if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend", "  local total = number + need\n  local left\
    \ = remaining - need\n  if total > remaining then\n    total = remaining\n   \
    \ left = 0\n  end\n  return {total, left}\nend", "  local total = number + remaining\n\
    \  if total >= need then\n    return {need, total - need}\n  else\n    return\
    \ {total, 0}\n  end\nend", "  local total = number + remaining\n  if total >=\
    \ need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend", "  if number + need <= remaining then\n    return {number + need,\
    \ remaining - (number + need)}\n  else\n    return {number + remaining, 0}\n \
    \ end\nend", "  -- your code here\n  if number + need <= remaining then\n    return\
    \ {number + need, remaining - (number + need)}\n  else\n    return {remaining\
    \ + number, 0}\n  end\nend", "  -- your code here\n  local total = number + remaining\n\
    \  local left = total - need\n  if left < 0 then\n    left = 0\n  end\n  return\
    \ {need + number, left}\nend", "  -- your code here\n  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend", "  -- your code here\n  return {number\
    \ + need, remaining - need}\nend", "  if number + need <= remaining then\n   \
    \ return {number + need, remaining - (number + need)}\n  else\n    return {remaining\
    \ + number, 0}\n  end\nend", "  local total = number + remaining\n  if total >=\
    \ need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend", "  local total = number + need\n  if total > remaining then\n  \
    \  return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  -- your code here\n  local total = number + need\n  local left = remaining\
    \ - need\n  if left < 0 then\n    total = total + left\n    left = 0\n  end\n\
    \  return {total, left}\nend", "  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend", "  -- your code here\n  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend", "  -- your code here\n  local total = number + remaining\n  local\
    \ left = total - need\n  if left < 0 then\n    return {total, 0}\n  else\n   \
    \ return {need, left}\n  end\nend", "  -- your code here\n  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend", "  -- your code here\n  local\
    \ total = number + need\n  if total > remaining then\n    return {remaining, 0}\n\
    \  else\n    return {total, remaining - total}\n  end\nend", "  local total =\
    \ number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend", "  -- your code here\n  local\
    \ total = number + need\n  local left = remaining - need\n  if left < 0 then\n\
    \    left = 0\n  end\n  return {total, left}\nend", "  -- your code here\n  local\
    \ total = number + remaining\n  local left = total - need\n  if left < 0 then\n\
    \    return {total, 0}\n  else\n    return {need, left}\n  end\nend", "  local\
    \ eaten = number + need\n  local left = remaining - need\n  if left < 0 then\n\
    \    left = 0\n  end\n  return {eaten, left}\nend", "  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend", "  -- your code here\n  return {number +\
    \ need, remaining - need}\nend", "  -- your code here\n  local total = number\
    \ + need\n  local left = remaining - need\n  if total > remaining then\n    total\
    \ = remaining\n    left = 0\n  end\n  return {total, left}\nend", "  -- your code\
    \ here\n  local total = number + need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\nend",
  "    if number + need <= remaining then\n        return {number + need, remaining\
    \ - (number + need)}\n    else\n        return {remaining + number, 0}\n    end\n\
    end", "  local total = number + need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\nend",
  "  -- your code here\n  local total = number + need\n  local left = remaining -\
    \ need\n  if left < 0 then\n    return {total, 0}\n  else\n    return {total,\
    \ left}\n  end\nend", "    -- your code here\n    local total = number + need\n\
    \    if total > remaining then\n        return {remaining, 0}\n    else\n    \
    \    return {total, remaining - total}\n    end\nend", "  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend", "  -- your code here\n  local\
    \ total = number + remaining\n  if total >= need then\n    return {need, total\
    \ - need}\n  else\n    return {total, 0}\n  end\nend", "    return {number + math.min(need,\
    \ remaining), math.max(remaining - need, 0)}\nend", "  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend", "    local total = number + remaining\n \
    \   if total >= need then\n        return {need, total - need}\n    else\n   \
    \     return {total, 0}\n    end\nend", "  return {number + math.min(need, remaining),\
    \ math.max(remaining - need, 0)}\nend", "  -- your code here\n  local total =\
    \ number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend", "  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend", "  -- your code here\n  local total\
    \ = number + remaining\n  local left = total - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {need, left}\nend", "  -- your code here\n  local total\
    \ = number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend", "  if number + need > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {number + need, remaining\
    \ - (number + need)}\n  end\nend", "  local total = number + remaining\n  if total\
    \ < need then\n    return {total, 0}\n  else\n    return {need, total - need}\n\
    \  end\nend", "  -- your code here\n  return {number + need, remaining - need}\n\
    end", "  -- your code here\n  if number + need <= remaining then\n    return {number\
    \ + need, remaining - (number + need)}\n  else\n    return {number + remaining,\
    \ 0}\n  end\nend", "  -- your code here\n  local total = number + remaining\n\
    \  if total < need then\n    return {total, 0}\n  else\n    return {need, total\
    \ - need}\n  end\nend", "  -- your code here\n  local total = number + need\n\
    \  if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend", "  -- your code here\n  local total = number\
    \ + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n   \
    \ return {total, remaining - total}\n  end\nend", "  if number + need > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {number + need, remaining\
    \ - (number + need)}\n  end\nend", "  -- your code here\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend", "  -- your code here\n  return {number +\
    \ need, remaining - need}\nend", "  -- your code here\n  local total = number\
    \ + need\n  local left = remaining - need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, left}\n  end\nend", "  return {number\
    \ + math.min(need, remaining), math.max(remaining - need, 0)}\nend", "  local\
    \ total = number + need\n  if total > remaining then\n    return {remaining, 0}\n\
    \  else\n    return {total, remaining - total}\n  end\nend", "  -- your code here\n\
    \  local total = number + need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, remaining - total}\n  end\nend", "  local total\
    \ = number + remaining\n  if total >= need then\n    return {need, total - need}\n\
    \  else\n    return {total, 0}\n  end\nend", "  -- your code here\n  local total\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {total, left}\nend", "  -- your code here\n  local total\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {total, left}\nend", "  -- your code here\n  local total\
    \ = number + remaining\n  if total >= need then\n    return {need, total - need}\n\
    \  else\n    return {total, 0}\n  end\nend", "  -- your code here\n  local total\
    \ = number + need\n  local left = remaining - need\n  if left < 0 then\n    left\
    \ = 0\n  end\n  return {total, left}\nend", "  -- your code here\n  local total\
    \ = number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend", "  -- your code here\n  local\
    \ total = number + need\n  local left = remaining - need\n  if left < 0 then\n\
    \    total = total + left\n    left = 0\n  end\n  return {total, left}\nend",
  "  local total = number + need\n  local left = remaining - need\n  if left < 0 then\n\
    \    left = 0\n  end\n  return {total, left}\nend", "  -- your code here\n  local\
    \ total = number + need\n  if total > remaining then\n    return {remaining, 0}\n\
    \  else\n    return {total, remaining - total}\n  end\nend", "  -- your code here\n\
    \  local total = number + need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, remaining - total}\n  end\nend", "  local total\
    \ = number + remaining\n  if total >= need then\n    return {need, total - need}\n\
    \  else\n    return {total, 0}\n  end\nend", "  local total = number + remaining\n\
    \  if total >= need then\n    return {need, total - need}\n  else\n    return\
    \ {total, 0}\n  end\nend", "  -- your code here\n  local total = number + remaining\n\
    \  if total > need then\n    return {need, total - need}\n  else\n    return {total,\
    \ 0}\n  end\nend", "  local total = number + need\n  if total > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "    local total = number + remaining\n    if total < need then\n      \
    \  return {total, 0}\n    else\n        return {need, total - need}\n    end\n\
    end", "    local total = number + remaining\n    if total >= need then\n     \
    \   return {need, total - need}\n    else\n        return {total, 0}\n    end\n\
    end", "  -- your code here\n  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend", "  -- your code here\n  local total = number + need\n  if total\
    \ > remaining then\n    return {remaining, 0}\n  else\n    return {total, remaining\
    \ - total}\n  end\nend", "  local total = number + remaining\n  if total >= need\
    \ then\n    return {need, total - need}\n  else\n    return {total, 0}\n  end\n\
    end", "  local total = number + remaining\n  if total >= need then\n    return\
    \ {need, total - need}\n  else\n    return {total, 0}\n  end\nend", "  -- your\
    \ code here\n  local total = number + need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\nend",
  "  -- your code here\n  local total = number + remaining\n  if total >= need then\n\
    \    return {need, total - need}\n  else\n    return {total, 0}\n  end\nend",
  "  -- your code here\nend", "  local total = number + need\n  if total > remaining\
    \ then\n    return {remaining, 0}\n  else\n    return {total, remaining - total}\n\
    \  end\nend", "  -- your code here\n  return {number + need, remaining - need}\n\
    end", "  local total = number + remaining\n  local left = total - need\n  if left\
    \ < 0 then\n    return {total, 0}\n  else\n    return {need, left}\n  end\nend",
  "  local total = number + remaining\n  local left = total - need\n  if left < 0\
    \ then\n    return {total, 0}\n  else\n    return {total, left}\n  end\nend",
  "  -- your code here\n  return {number + need, remaining - need}\nend", "  local\
    \ total = number + remaining\n  if total < need then\n    return {total, 0}\n\
    \  else\n    return {need, total - need}\n  end\nend", "  -- your code here\n\
    \  local total = number + need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, remaining - total}\n  end\nend", "  -- your code\
    \ here\n  local total = number + remaining\n  if total >= need then\n    return\
    \ {need, total - need}\n  else\n    return {total, 0}\n  end\nend", "  local total\
    \ = number + need\n  if total > remaining then\n    return {remaining, 0}\n  else\n\
    \    return {total, remaining - total}\n  end\nend", "  local total = number +\
    \ remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend", "  -- your code here\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend", "  if number + need > remaining then\n  \
    \  return {remaining, 0}\n  else\n    return {number + need, remaining - (number\
    \ + need)}\n  end\nend", "    local total = number + remaining\n    if total >=\
    \ need then\n        return {need, total - need}\n    else\n        return {total,\
    \ 0}\n    end\nend", "    local total = number + need\n    if total > remaining\
    \ then\n        return {remaining, 0}\n    else\n        return {total, remaining\
    \ - total}\n    end\nend", "  -- your code here\n  local total = number + need\n\
    \  if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend", "  -- your code here\n  local total = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n\
    \  end\n  return {total, left}\nend", "  -- your code here\n  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n\
    \  end\n  return {eaten, left}\nend", "  -- your code here\n  local total = number\
    \ + remaining\n  local left = total - need\n  if left < 0 then\n    left = 0\n\
    \  end\n  return {total, left}\nend", "  -- your code here\n  local total = number\
    \ + remaining\n  if total >= need then\n    return {need, total - need}\n  else\n\
    \    return {total, 0}\n  end\nend", "    local eaten = number + need\n    local\
    \ left = remaining - need\n    if left < 0 then\n        eaten = eaten + left\n\
    \        left = 0\n    end\n    return {eaten, left}\nend", "  -- your code here\n\
    \  local total = number + need\n  local left = remaining - need\n  if left < 0\
    \ then\n    left = 0\n  end\n  return {total, left}\nend", "  if number + need\
    \ > remaining then\n    return {remaining, 0}\n  else\n    return {number + need,\
    \ remaining - (number + need)}\n  end\nend", "  -- your code here\n  if number\
    \ + need <= remaining then\n    return {number + need, remaining - number - need}\n\
    \  else\n    return {number + remaining, 0}\n  end\nend", "  -- your code here\n\
    \  local total = number + need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, remaining - total}\n  end\nend", "  -- your code\
    \ here\n  if number + need <= remaining then\n    return {number + need, remaining\
    \ - (number + need)}\n  else\n    return {number + remaining, 0}\n  end\nend",
  "  -- your code here\n  local total = number + need\n  if total > remaining then\n\
    \    return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  local total = number + remaining\n  if total >= need then\n    return\
    \ {need, total - need}\n  else\n    return {total, 0}\n  end\nend", "  local total\
    \ = number + need\n  local left = remaining - total\n  if left < 0 then\n    total\
    \ = total + left\n    left = 0\n  end\n  return {total, left}\nend", "  local\
    \ total = number + need\n  local left = remaining - need\n  if left < 0 then\n\
    \    left = 0\n  end\n  return {total, left}\nend", "    local total = number\
    \ + remaining\n    if total >= need then\n        return {need, total - need}\n\
    \    else\n        return {total, 0}\n    end\nend", "  local total = number +\
    \ need\n  if total > remaining then\n    return {remaining, 0}\n  else\n    return\
    \ {total, remaining - total}\n  end\nend", "  local eaten = number + need\n  local\
    \ left = remaining - need\n  if left < 0 then\n    left = 0\n  end\n  return {eaten,\
    \ left}\nend", "  if number + need <= remaining then\n    return {number + need,\
    \ remaining - (number + need)}\n  else\n    return {number + remaining, 0}\n \
    \ end\nend", "  local total = number + need\n  if total > remaining then\n   \
    \ return {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\n\
    end", "  local total = number + need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\nend",
  "  if number + need <= remaining then\n    return {number + need, remaining - (number\
    \ + need)}\n  else\n    return {number + remaining, 0}\n  end\nend", "  -- your\
    \ code here\n  local total = number + remaining\n  if total >= need then\n   \
    \ return {need, total - need}\n  else\n    return {total, 0}\n  end\nend", " \
    \ local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend", "    local total\
    \ = number + remaining\n    if total >= need then\n        return {need, total\
    \ - need}\n    else\n        return {total, 0}\n    end\nend", "  -- your code\
    \ here\n  local total = number + need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\nend",
  "  local total = number + need\n  if total > remaining then\n    return {remaining,\
    \ 0}\n  else\n    return {total, remaining - total}\n  end\nend", "    return\
    \ {number + math.min(need, remaining), math.max(remaining - need, 0)}\nend", " \
    \ -- your code here\nend", "  local total = number + remaining\n  if total >=\
    \ need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend", "  -- your code here\n  local total = number + need\n  if total\
    \ > remaining then\n    return {remaining, 0}\n  else\n    return {total, remaining\
    \ - total}\n  end\nend", "  -- your code here\n  local total = number + need\n\
    \  if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend", "    -- your code here\n    local total = number\
    \ + remaining\n    if total >= need then\n        return {need, total - need}\n\
    \    else\n        return {total, 0}\n    end\nend", "  -- your code here\n  local\
    \ total = number + need\n  if total > remaining then\n    return {remaining, 0}\n\
    \  else\n    return {total, remaining - total}\n  end\nend", "  -- your code here\n\
    \  if number + need <= remaining then\n    return {number + need, remaining -\
    \ (number + need)}\n  else\n    return {remaining + number, 0}\n  end\nend", " \
    \ -- your code here\n  if number + need <= remaining then\n    return {number\
    \ + need, remaining - (number + need)}\n  else\n    return {remaining + number,\
    \ 0}\n  end\nend", "  -- your code here\n  local total = number + remaining\n\
    \  if total < need then\n    return {total, 0}\n  else\n    return {need, total\
    \ - need}\n  end\nend", "  -- your code here\n  return {number + need, remaining\
    \ - need}\nend", "  -- your code here\n  local total = number + need\n  if total\
    \ > remaining then\n    return {remaining, 0}\n  else\n    return {total, remaining\
    \ - total}\n  end\nend", "  -- your code here\n  local total = number + need\n\
    \  if total > remaining then\n    return {remaining, 0}\n  else\n    return {total,\
    \ remaining - total}\n  end\nend", "  local total = number + remaining\n  if total\
    \ >= need then\n    return {need, total - need}\n  else\n    return {total, 0}\n\
    \  end\nend", "  -- your code here\n  local total = number + need\n  local left\
    \ = remaining - need\n  if total > remaining then\n    return {remaining, 0}\n\
    \  else\n    return {total, left}\n  end\nend", "  -- your code here\n  local\
    \ total = number + remaining\n  if total >= need then\n    return {need, total\
    \ - need}\n  else\n    return {total, 0}\n  end\nend", "  local eaten = number\
    \ + need\n  local left = remaining - need\n  if left < 0 then\n    left = 0\n\
    \  end\n  return {eaten, left}\nend", "    -- your code here\n    local total\
    \ = number + remaining\n    if total >= need then\n        return {need, total\
    \ - need}\n    else\n        return {total, 0}\n    end\nend", "  -- your code\
    \ here\n  local total = number + remaining\n  if total >= need then\n    return\
    \ {need, total - need}\n  else\n    return {total, 0}\n  end\nend", "  -- your\
    \ code here\n  local total = number + need\n  if total > remaining then\n    return\
    \ {remaining, 0}\n  else\n    return {total, remaining - total}\n  end\nend",
  "  -- your code here\n  local total = number + remaining\n  if total >= need then\n\
    \    return {need, total - need}\n  else\n    return {total, 0}\n  end\nend",
  "    local total = number + remaining\n    if total >= need then\n        return\
    \ { need, total - need }\n    else\n        return { total, 0 }\n    end\nend",
  "  local total = number + remaining\n  if total >= need then\n    return {need,\
    \ total - need}\n  else\n    return {total, 0}\n  end\nend", "  -- Your code here\n\
    \  local total = number + need\n  local left = remaining - need\n  if left < 0\
    \ then\n    left = 0\n  end\n  return {total, left}\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
