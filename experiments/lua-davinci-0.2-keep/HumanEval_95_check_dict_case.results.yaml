name: HumanEval_95_check_dict_case
language: lua
results:
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if string.lower(k)\
    \ == k then\n                is_lower = true\n            elseif string.upper(k)\
    \ == k then\n                is_upper = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv4ajtb8k.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpv4ajtb8k.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if (dict == nil) then\n        return\
    \ false\n    end\n    if (next(dict) == nil) then\n        return false\n    end\n\
    \    local is_lower = false\n    local is_upper = false\n    for k,v in pairs(dict)\
    \ do\n        if (type(k) == \"string\") then\n            if (k == string.lower(k))\
    \ then\n                is_lower = true\n            elseif (k == string.upper(k))\
    \ then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    if (is_lower and is_upper) then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptysywk3d.lua:43:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmptysywk3d.lua:43:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo_kaqfr7.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpo_kaqfr7.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if lower_case then\n  \
    \          lower_case = string.lower(key) == key\n        end\n        if upper_case\
    \ then\n            upper_case = string.upper(key) == key\n        end\n    end\n\
    \    return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmzegdjqo.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpmzegdjqo.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if dict == nil or next(dict) == nil\
    \ then\n        return false\n    end\n    local is_lower = false\n    local is_upper\
    \ = false\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k:lower() == k then\n                is_lower = true\n       \
    \     elseif k:upper() == k then\n                is_upper = true\n          \
    \  else\n                return false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return is_lower ~= is_upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsso6muo5.lua:37:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpsso6muo5.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if type(dict) ~= \"table\" then\n  \
    \      return false\n    end\n    if #dict == 0 then\n        return false\n \
    \   end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        if k == string.lower(k) then\n            is_lower\
    \ = true\n        elseif k == string.upper(k) then\n            is_upper = true\n\
    \        else\n            return false\n        end\n    end\n    return is_lower\
    \ ~= is_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwlxmt4i6.lua:37:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwlxmt4i6.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if lower and k ~= k:lower() then\n            lower = false\n\
    \        end\n        if upper and k ~= k:upper() then\n            upper = false\n\
    \        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppriyaake.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmppriyaake.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0emb7v3z.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp0emb7v3z.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    -- TODO: Implement this function.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpns0fw2w3.lua:17:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmpns0fw2w3.lua:17:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if string.lower(k) ~= k then\n            lower = false\n    \
    \    end\n        if string.upper(k) ~= k then\n            upper = false\n  \
    \      end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj0qe_4al.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpj0qe_4al.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi5e2_trp.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpi5e2_trp.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2pb3kah8.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp2pb3kah8.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if string.lower(k)\
    \ == k then\n                is_lower = true\n            elseif string.upper(k)\
    \ == k then\n                is_upper = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7oncgwqg.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7oncgwqg.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local upper = true\n    local lower = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if k ~= string.upper(k) then\n            upper = false\n    \
    \    end\n        if k ~= string.lower(k) then\n            lower = false\n  \
    \      end\n    end\n    return upper or lower\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpabsinnbk.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpabsinnbk.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower, upper = true, true\n  for\
    \ k, v in pairs(dict) do\n    if type(k) ~= \"string\" then\n      return false\n\
    \    end\n    if lower and k ~= k:lower() then\n      lower = false\n    end\n\
    \    if upper and k ~= k:upper() then\n      upper = false\n    end\n  end\n \
    \ return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj1cqdusn.lua:31:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpj1cqdusn.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxsepqsq_.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpxsepqsq_.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if lower and k ~= k:lower() then\n            lower = false\n\
    \        end\n        if upper and k ~= k:upper() then\n            upper = false\n\
    \        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphufe5bz2.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmphufe5bz2.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if key:lower() ~= key then\n\
    \            lower_case = false\n        end\n        if key:upper() ~= key then\n\
    \            upper_case = false\n        end\n    end\n    return lower_case or\
    \ upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw93uvsyn.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpw93uvsyn.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6szbxewo.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp6szbxewo.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            lower_case = lower_case and (k == string.lower(k))\n            upper_case\
    \ = upper_case and (k == string.upper(k))\n        else\n            return false\n\
    \        end\n    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpccmcxipz.lua:29:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpccmcxipz.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if k ==\
    \ string.lower(k) then\n                is_lower = true\n            elseif k\
    \ == string.upper(k) then\n                is_upper = true\n            else\n\
    \                return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvwzuqepw.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpvwzuqepw.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_keys = 0\n    local upper_keys\
    \ = 0\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k == string.lower(k) then\n                lower_keys = lower_keys\
    \ + 1\n            elseif k == string.upper(k) then\n                upper_keys\
    \ = upper_keys + 1\n            end\n        end\n    end\n    return lower_keys\
    \ > 0 and upper_keys == 0 or lower_keys == 0 and upper_keys > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg74gxbn3.lua:30:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpg74gxbn3.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if string.lower(k) ~= k then\n            lower = false\n    \
    \    end\n        if string.upper(k) ~= k then\n            upper = false\n  \
    \      end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqbyn2wtk.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpqbyn2wtk.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5ll7n3v_.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp5ll7n3v_.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    local is_lower = false\n    local is_upper = false\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == \"string\" then\n            if k:match(\"^%l+$\"\
    ) then\n                is_lower = true\n            elseif k:match(\"^%u+$\"\
    ) then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcgctgf96.lua:34:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpcgctgf96.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj_woqwee.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpj_woqwee.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    if not next(dict) then return false end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpq2h7e8s9.lua:26: 'end' expected (to close 'function' at\
    \ line 10) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower_case then\n         \
    \   lower_case = k == string.lower(k)\n        end\n        if upper_case then\n\
    \            upper_case = k == string.upper(k)\n        end\n    end\n    return\
    \ lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvxj_9swq.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpvxj_9swq.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower = true\n  local upper = true\n\
    \  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" then\n      return\
    \ false\n    end\n    if lower and k ~= k:lower() then\n      lower = false\n\
    \    end\n    if upper and k ~= k:upper() then\n      upper = false\n    end\n\
    \  end\n  return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl_6v2_7u.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpl_6v2_7u.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if k:lower()\
    \ == k then\n                is_lower = true\n            elseif k:upper() ==\
    \ k then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_2srp1ju.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp_2srp1ju.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local upper = true\n    local lower\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k:match(\"%u\") then\n                lower = false\n        \
    \    else\n                upper = false\n            end\n        else\n    \
    \        return false\n        end\n    end\n    return upper or lower\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmwpfnrdl.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpmwpfnrdl.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local lower_case = true\n    local upper_case = true\n    for k,\
    \ v in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        if lower_case and k ~= string.lower(k) then\n  \
    \          lower_case = false\n        end\n        if upper_case and k ~= string.upper(k)\
    \ then\n            upper_case = false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxkvv0v7d.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpxkvv0v7d.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower = true\n  local upper = true\n\
    \  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" then\n      return\
    \ false\n    end\n    if k ~= k:lower() then\n      lower = false\n    end\n \
    \   if k ~= k:upper() then\n      upper = false\n    end\n  end\n  return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppyia7hvt.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmppyia7hvt.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if string.lower(k)\
    \ == k then\n                is_lower = true\n            elseif string.upper(k)\
    \ == k then\n                is_upper = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe6gmmmqp.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpe6gmmmqp.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if type(dict) ~= \"table\" then\n  \
    \      return false\n    end\n    if #dict == 0 then\n        return false\n \
    \   end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if string.lower(k) ~= k then\n            lower = false\n    \
    \    end\n        if string.upper(k) ~= k then\n            upper = false\n  \
    \      end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnubsgsq8.lua:36:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpnubsgsq8.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if k ~= string.lower(k) then\n            lower = false\n    \
    \    end\n        if k ~= string.upper(k) then\n            upper = false\n  \
    \      end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw_lx6p87.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpw_lx6p87.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local is_lower = true\n    local is_upper = true\n    for k, v in\
    \ pairs(dict) do\n        if type(k) ~= \"string\" then\n            return false\n\
    \        end\n        if is_lower and k ~= k:lower() then\n            is_lower\
    \ = false\n        end\n        if is_upper and k ~= k:upper() then\n        \
    \    is_upper = false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd0lssw8g.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpd0lssw8g.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if dict == nil or next(dict) == nil\
    \ then\n        return false\n    end\n    local is_lower = false\n    local is_upper\
    \ = false\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k:lower() == k then\n                is_lower = true\n       \
    \     elseif k:upper() == k then\n                is_upper = true\n          \
    \  else\n                return false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return is_lower or is_upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp14hx3rpj.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp14hx3rpj.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    local is_lower = true\n    local is_upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then return false end\n        if k:lower()\
    \ ~= k then is_lower = false end\n        if k:upper() ~= k then is_upper = false\
    \ end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxeeeufd2.lua:27:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpxeeeufd2.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k:lower() ~= k then\n     \
    \       lower = false\n        end\n        if k:upper() ~= k then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpil85a0p4.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpil85a0p4.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if next(dict) == nil then\n        return\
    \ false\n    end\n    local lower = true\n    local upper = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        if k ~= string.lower(k) then\n            lower\
    \ = false\n        end\n        if k ~= string.upper(k) then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6z5d7slj.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp6z5d7slj.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if not string.match(k, \"^%l+$\"\
    ) then\n            lower = false\n        end\n        if not string.match(k,\
    \ \"^%u+$\") then\n            upper = false\n        end\n    end\n    return\
    \ lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprzhp5cyc.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmprzhp5cyc.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if key:lower() ~= key then\n\
    \            lower_case = false\n        end\n        if key:upper() ~= key then\n\
    \            upper_case = false\n        end\n    end\n    return lower_case or\
    \ upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqt47scjy.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpqt47scjy.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if k:lower()\
    \ == k then\n                is_lower = true\n            elseif k:upper() ==\
    \ k then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd2hbuhey.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpd2hbuhey.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpowe50j0i.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpowe50j0i.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k:lower() ~= k then\n     \
    \       lower = false\n        end\n        if k:upper() ~= k then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_nhtrlcj.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp_nhtrlcj.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if string.lower(k) ~= k then\n                lower_case = false\n\
    \            end\n            if string.upper(k) ~= k then\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp46cowcr3.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp46cowcr3.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k:lower() ~= k then\n                lower_case = false\n    \
    \        end\n            if k:upper() ~= k then\n                upper_case =\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxi7f_xmd.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpxi7f_xmd.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_count = 0\n    local upper_count\
    \ = 0\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k == string.lower(k) then\n                lower_count = lower_count\
    \ + 1\n            elseif k == string.upper(k) then\n                upper_count\
    \ = upper_count + 1\n            end\n        end\n    end\n    if lower_count\
    \ == 0 and upper_count == 0 then\n        return false\n    elseif lower_count\
    \ > 0 and upper_count == 0 then\n        return true\n    elseif lower_count ==\
    \ 0 and upper_count > 0 then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph67kntct.lua:38:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmph67kntct.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  -- your code here\n  local lower = true\n\
    \  local upper = true\n  for k,v in pairs(dict) do\n    if type(k) == \"string\"\
    \ then\n      if k:lower() ~= k then\n        lower = false\n      end\n     \
    \ if k:upper() ~= k then\n        upper = false\n      end\n    else\n      return\
    \ false\n    end\n  end\n  if lower or upper then\n    return true\n  else\n \
    \   return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzi_5c00y.lua:38:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpzi_5c00y.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local is_lower = false\n    local is_upper\
    \ = false\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k == string.lower(k) then\n                is_lower = true\n \
    \           elseif k == string.upper(k) then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2vns96s4.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp2vns96s4.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    -- TODO: Implement this function.\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6az7699b.lua:17:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp6az7699b.lua:17:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower = true\n  local upper = true\n\
    \  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" then\n      return\
    \ false\n    end\n    if lower and k ~= k:lower() then\n      lower = false\n\
    \    end\n    if upper and k ~= k:upper() then\n      upper = false\n    end\n\
    \  end\n  return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp109ybxhm.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp109ybxhm.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    if next(dict) == nil then return false end\n    local is_lower = true\n \
    \   local is_upper = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= \"string\" then return false end\n        if k ~= string.lower(k) then is_lower\
    \ = false end\n        if k ~= string.upper(k) then is_upper = false end\n   \
    \ end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppdn6x7bb.lua:28:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmppdn6x7bb.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k:lower() ~= k then\n     \
    \       lower = false\n        end\n        if k:upper() ~= k then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp03dsd_y_.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp03dsd_y_.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if lower and string.lower(key)\
    \ ~= key then\n            lower = false\n        end\n        if upper and string.upper(key)\
    \ ~= key then\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr9zg472c.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpr9zg472c.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    -- your code here\n    local count =\
    \ 0\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n \
    \           if k == string.lower(k) then\n                count = count + 1\n\
    \            end\n        end\n    end\n    if count == #dict then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx9hgkmlx.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpx9hgkmlx.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if string.lower(k)\
    \ == k then\n                is_lower = true\n            elseif string.upper(k)\
    \ == k then\n                is_upper = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplat9_b97.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmplat9_b97.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if k:lower()\
    \ == k then\n                is_lower = true\n            elseif k:upper() ==\
    \ k then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuqdfsdfu.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpuqdfsdfu.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local is_lower = true\n    local is_upper = true\n    for k, v in\
    \ pairs(dict) do\n        if type(k) ~= \"string\" then\n            return false\n\
    \        end\n        if is_lower then\n            is_lower = is_lower and k\
    \ == string.lower(k)\n        end\n        if is_upper then\n            is_upper\
    \ = is_upper and k == string.upper(k)\n        end\n    end\n    return is_lower\
    \ or is_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgi0j84_a.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpgi0j84_a.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k ~= string.lower(k) then\n                lower_case = false\n\
    \            end\n            if k ~= string.upper(k) then\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy377bv3c.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpy377bv3c.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower_case = true\n    local upper_case = true\n    for k,\
    \ v in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        if k ~= string.lower(k) then\n            lower_case\
    \ = false\n        end\n        if k ~= string.upper(k) then\n            upper_case\
    \ = false\n        end\n    end\n    return lower_case or upper_case\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpctamoivb.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpctamoivb.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcuw77a16.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpcuw77a16.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower_count = 0\n  local upper_count\
    \ = 0\n  for k, v in pairs(dict) do\n    if type(k) == \"string\" then\n     \
    \ if k == string.lower(k) then\n        lower_count = lower_count + 1\n      elseif\
    \ k == string.upper(k) then\n        upper_count = upper_count + 1\n      end\n\
    \    end\n  end\n  if lower_count == 0 and upper_count == 0 then\n    return false\n\
    \  elseif lower_count == 0 and upper_count > 0 then\n    return true\n  elseif\
    \ lower_count > 0 and upper_count == 0 then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphlnoayhl.lua:38:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmphlnoayhl.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if k ==\
    \ string.lower(k) then\n                is_lower = true\n            elseif k\
    \ == string.upper(k) then\n                is_upper = true\n            else\n\
    \                return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpihqahh9k.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpihqahh9k.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k ~= string.lower(k) then\n                lower_case = false\n\
    \            end\n            if k ~= string.upper(k) then\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy_pdv90_.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpy_pdv90_.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    if next(dict) == nil then return false end\n    local is_upper = nil\n  \
    \  for k, v in pairs(dict) do\n        if is_upper == nil then\n            is_upper\
    \ = string.upper(k) == k\n        else\n            if is_upper ~= (string.upper(k)\
    \ == k) then\n                return false\n            end\n        end\n   \
    \ end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz7br12r9.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpz7br12r9.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower_case and string.upper(k)\
    \ == k then\n            lower_case = false\n        end\n        if upper_case\
    \ and string.lower(k) == k then\n            upper_case = false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx75o0z4w.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpx75o0z4w.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if string.find(k, \"[A-Z]\") then\n                lower_case = false\n\
    \            elseif string.find(k, \"[a-z]\") then\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk1bp7h7m.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpk1bp7h7m.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local is_lower = true\n    local is_upper = true\n    for k, v in\
    \ pairs(dict) do\n        if type(k) ~= \"string\" then\n            return false\n\
    \        end\n        if is_lower and not k:lower() == k then\n            is_lower\
    \ = false\n        end\n        if is_upper and not k:upper() == k then\n    \
    \        is_upper = false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjtrxmwhf.lua:34:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjtrxmwhf.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower_case = true\n  local upper_case\
    \ = true\n  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" then\n  \
    \    return false\n    end\n    if lower_case then\n      lower_case = lower_case\
    \ and k == string.lower(k)\n    end\n    if upper_case then\n      upper_case\
    \ = upper_case and k == string.upper(k)\n    end\n  end\n  return lower_case or\
    \ upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnp7ya172.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpnp7ya172.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpac5ywsy1.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpac5ywsy1.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower, upper = true, true\n  \
    \  for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n       \
    \     return false\n        end\n        if k ~= k:lower() then\n            lower\
    \ = false\n        end\n        if k ~= k:upper() then\n            upper = false\n\
    \        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwnw2b907.lua:31:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpwnw2b907.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local upper = true\n    local lower = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if string.lower(k) ~= k then\n            lower = false\n    \
    \    end\n        if string.upper(k) ~= k then\n            upper = false\n  \
    \      end\n    end\n    return upper or lower\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp88pgd23i.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp88pgd23i.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if k:lower()\
    \ == k then\n                is_lower = true\n            elseif k:upper() ==\
    \ k then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7e4b37j1.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp7e4b37j1.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if k ==\
    \ string.lower(k) then\n                is_lower = true\n            elseif k\
    \ == string.upper(k) then\n                is_upper = true\n            else\n\
    \                return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpme0kmo3l.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpme0kmo3l.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if type(dict) ~= \"table\" then\n  \
    \      return false\n    end\n    if #dict == 0 then\n        return false\n \
    \   end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if k:lower() ~= k then\n            lower = false\n        end\n\
    \        if k:upper() ~= k then\n            upper = false\n        end\n    end\n\
    \    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcai7dvms.lua:36:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpcai7dvms.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgap8umug.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpgap8umug.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    if next(dict) == nil then return false end\n    local lower_case = true\n\
    \    local upper_case = true\n    for k, v in pairs(dict) do\n        if type(k)\
    \ ~= \"string\" then return false end\n        if k ~= string.lower(k) then lower_case\
    \ = false end\n        if k ~= string.upper(k) then upper_case = false end\n \
    \   end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6tt_l0c3.lua:28:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp6tt_l0c3.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    if not next(dict) then\n        return false\n    end\n    local\
    \ lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n     \
    \   if type(k) ~= \"string\" then\n            return false\n        end\n   \
    \     if k:lower() ~= k then\n            lower = false\n        end\n       \
    \ if k:upper() ~= k then\n            upper = false\n        end\n    end\n  \
    \  return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4qxn_pz9.lua:38:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp4qxn_pz9.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if not dict then return false end\n  if\
    \ next(dict) == nil then return false end\n  local is_lower = true\n  local is_upper\
    \ = true\n  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" then return\
    \ false end\n    if is_lower and string.lower(k) ~= k then is_lower = false end\n\
    \    if is_upper and string.upper(k) ~= k then is_upper = false end\n  end\n \
    \ return is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3thvqch2.lua:28:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp3thvqch2.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if (dict == nil) then\n        return\
    \ false\n    end\n    if (next(dict) == nil) then\n        return false\n    end\n\
    \    local lower = true\n    local upper = true\n    for k, v in pairs(dict) do\n\
    \        if (type(k) ~= \"string\") then\n            return false\n        end\n\
    \        if (lower and (k ~= string.lower(k))) then\n            lower = false\n\
    \        end\n        if (upper and (k ~= string.upper(k))) then\n           \
    \ upper = false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgq8d61z7.lua:38:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpgq8d61z7.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if dict == nil or next(dict) == nil\
    \ then\n        return false\n    end\n    local is_lower = false\n    local is_upper\
    \ = false\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k:lower() == k then\n                is_lower = true\n       \
    \     elseif k:upper() == k then\n                is_upper = true\n          \
    \  else\n                return false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return is_lower ~= is_upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaxnfgfrl.lua:37:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpaxnfgfrl.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local all_lower = true\n    local all_upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k ~= k:lower() then\n                all_lower = false\n     \
    \       end\n            if k ~= k:upper() then\n                all_upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return all_lower or all_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpekn9u3ct.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpekn9u3ct.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local all_lower = true\n    local all_upper = true\n    for k, v\
    \ in pairs(dict) do\n        if not (type(k) == \"string\") then\n           \
    \ return false\n        end\n        if not (k == string.lower(k)) then\n    \
    \        all_lower = false\n        end\n        if not (k == string.upper(k))\
    \ then\n            all_upper = false\n        end\n    end\n    return all_lower\
    \ or all_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8pa42jtc.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp8pa42jtc.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local is_upper = false\n    local is_lower = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if string.upper(k)\
    \ == k then\n                is_upper = true\n            elseif string.lower(k)\
    \ == k then\n                is_lower = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_upper ~= is_lower\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k ~= string.lower(k) then\n                lower_case = false\n\
    \            end\n            if k ~= string.upper(k) then\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp43qtaww9.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp43qtaww9.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplsycblvy.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmplsycblvy.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    if not next(dict) then return false end\n    local is_lower = true\n    local\
    \ is_upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\"\
    \ then return false end\n        if is_lower and k ~= k:lower() then is_lower\
    \ = false end\n        if is_upper and k ~= k:upper() then is_upper = false end\n\
    \    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoxwpvw54.lua:28:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpoxwpvw54.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if k ==\
    \ string.lower(k) then\n                is_lower = true\n            elseif k\
    \ == string.upper(k) then\n                is_upper = true\n            else\n\
    \                return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7svmeznx.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7svmeznx.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if next(dict) == nil then\n        return\
    \ false\n    end\n    local is_lower = false\n    local is_upper = false\n   \
    \ for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n        \
    \    if k == string.lower(k) then\n                is_lower = true\n         \
    \   elseif k == string.upper(k) then\n                is_upper = true\n      \
    \      else\n                return false\n            end\n        else\n   \
    \         return false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5cdr6qmy.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp5cdr6qmy.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = true\n    local is_upper = true\n    for k, v in\
    \ pairs(dict) do\n        if type(k) ~= \"string\" then\n            return false\n\
    \        end\n        if k:lower() ~= k then\n            is_lower = false\n \
    \       end\n        if k:upper() ~= k then\n            is_upper = false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcv87641x.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpcv87641x.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvxbazxt9.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpvxbazxt9.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9swep4vb.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp9swep4vb.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if next(dict) == nil then\n        return\
    \ false\n    end\n    local lower = true\n    local upper = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        if k ~= string.lower(k) then\n            lower\
    \ = false\n        end\n        if k ~= string.upper(k) then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplzzpq3l3.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmplzzpq3l3.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if k ~= string.lower(k) then\n            lower = false\n    \
    \    end\n        if k ~= string.upper(k) then\n            upper = false\n  \
    \      end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0gbjo87a.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp0gbjo87a.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if not dict then return false end\n  local\
    \ is_lower = true\n  local is_upper = true\n  for k,v in pairs(dict) do\n    if\
    \ type(k) ~= \"string\" then return false end\n    if k:lower() ~= k then is_lower\
    \ = false end\n    if k:upper() ~= k then is_upper = false end\n  end\n  return\
    \ is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfmt1bvdq.lua:27:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpfmt1bvdq.lua:27:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= string.lower(k)\
    \ then\n            lower = false\n        end\n        if upper and k ~= string.upper(k)\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbmp7eanf.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpbmp7eanf.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= string.lower(k)\
    \ then\n            lower = false\n        end\n        if upper and k ~= string.upper(k)\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpemzoy1vt.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpemzoy1vt.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= string.lower(k)\
    \ then\n            lower = false\n        end\n        if upper and k ~= string.upper(k)\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnmkhj_xn.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpnmkhj_xn.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    if not next(dict) then return false end\n    local is_lower = nil\n    for\
    \ k,v in pairs(dict) do\n        if type(k) ~= \"string\" then return false end\n\
    \        if is_lower == nil then\n            is_lower = k == k:lower()\n    \
    \    else\n            if is_lower and k ~= k:lower() then return false end\n\
    \            if not is_lower and k ~= k:upper() then return false end\n      \
    \  end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp25d6md9v.lua:31:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp25d6md9v.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if #dict == 0 then\n    return false\n\
    \  end\n  local lower = true\n  local upper = true\n  for k, v in pairs(dict)\
    \ do\n    if type(k) ~= \"string\" then\n      return false\n    end\n    if k\
    \ ~= string.lower(k) then\n      lower = false\n    end\n    if k ~= string.upper(k)\
    \ then\n      upper = false\n    end\n  end\n  return lower or upper\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp83q8wgoj.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp83q8wgoj.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if k ==\
    \ string.lower(k) then\n                is_lower = true\n            elseif k\
    \ == string.upper(k) then\n                is_upper = true\n            else\n\
    \                return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpegvez5ps.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpegvez5ps.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    if not next(dict) then return false end\n    local is_lower = false\n   \
    \ local is_upper = false\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ \"string\" then\n            if k:lower() == k then\n                is_lower\
    \ = true\n            elseif k:upper() == k then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6gpry7gf.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp6gpry7gf.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower = true\n  local upper = true\n\
    \  for k,v in pairs(dict) do\n    if type(k) == \"string\" then\n      if k ~=\
    \ string.lower(k) then\n        lower = false\n      end\n      if k ~= string.upper(k)\
    \ then\n        upper = false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvypgs_a9.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpvypgs_a9.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if k ~= string.lower(k) then\n            lower = false\n    \
    \    end\n        if k ~= string.upper(k) then\n            upper = false\n  \
    \      end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpskz_d4x5.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpskz_d4x5.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk_kz3bx4.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpk_kz3bx4.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if string.lower(key) ~=\
    \ key then\n            lower_case = false\n        end\n        if string.upper(key)\
    \ ~= key then\n            upper_case = false\n        end\n    end\n    return\
    \ lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5fik8_e4.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp5fik8_e4.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if k ~= string.lower(k) then\n            lower = false\n    \
    \    end\n        if k ~= string.upper(k) then\n            upper = false\n  \
    \      end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppzofvcf4.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmppzofvcf4.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= string.lower(k)\
    \ then\n            lower = false\n        end\n        if upper and k ~= string.upper(k)\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpin_4noe5.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpin_4noe5.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  -- your code here\n  local lower = true\n\
    \  local upper = true\n  for key, value in pairs(dict) do\n    if type(key) ==\
    \ \"string\" then\n      if key:match(\"%u\") then\n        lower = false\n  \
    \    else\n        upper = false\n      end\n    else\n      return false\n  \
    \  end\n  end\n  return lower or upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy378xwxt.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpy378xwxt.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwdawl70k.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpwdawl70k.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = true\n    local is_upper = true\n    for k, v in\
    \ pairs(dict) do\n        if type(k) ~= \"string\" then\n            return false\n\
    \        end\n        if k ~= string.lower(k) then\n            is_lower = false\n\
    \        end\n        if k ~= string.upper(k) then\n            is_upper = false\n\
    \        end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpum25i5wk.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpum25i5wk.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if k:lower()\
    \ == k then\n                is_lower = true\n            elseif k:upper() ==\
    \ k then\n                is_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0jqdx9xs.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp0jqdx9xs.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if type(dict) ~= \"table\" then\n  \
    \      return false\n    end\n    if #dict == 0 then\n        return false\n \
    \   end\n    local lower_case = true\n    local upper_case = true\n    for k,\
    \ v in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        if k:lower() ~= k then\n            lower_case =\
    \ false\n        end\n        if k:upper() ~= k then\n            upper_case =\
    \ false\n        end\n    end\n    return lower_case or upper_case\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcx181hnu.lua:36:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpcx181hnu.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if key:match(\"%u\") then\n\
    \            lower_case = false\n        end\n        if key:match(\"%l\") then\n\
    \            upper_case = false\n        end\n    end\n    return lower_case or\
    \ upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8h3dm_e5.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp8h3dm_e5.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and not k:lower() ==\
    \ k then\n            lower = false\n        end\n        if upper and not k:upper()\
    \ == k then\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0my502o7.lua:31:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp0my502o7.lua:31:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if k:match(\"%u\") then\n            lower = false\n        end\n\
    \        if k:match(\"%l\") then\n            upper = false\n        end\n   \
    \ end\n    return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpygzbuqrx.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpygzbuqrx.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if not string.match(k, \"^%l+$\") then\n                lower_case\
    \ = false\n            end\n            if not string.match(k, \"^%u+$\") then\n\
    \                upper_case = false\n            end\n        else\n         \
    \   return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp937ac2sc.lua:37:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp937ac2sc.lua:37:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1djcmfdt.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp1djcmfdt.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if dict == nil or next(dict) == nil\
    \ then\n        return false\n    end\n    local upper = true\n    local lower\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k:match(\"%u\") then\n    \
    \        lower = false\n        end\n        if k:match(\"%l\") then\n       \
    \     upper = false\n        end\n    end\n    return upper or lower\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpovdk2_nr.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpovdk2_nr.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if string.lower(key) ~=\
    \ key then\n            lower_case = false\n        end\n        if string.upper(key)\
    \ ~= key then\n            upper_case = false\n        end\n    end\n    return\
    \ lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp64b47ewi.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp64b47ewi.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if next(dict) == nil then\n        return\
    \ false\n    end\n    local lower_case = true\n    local upper_case = true\n \
    \   for k, v in pairs(dict) do\n        if not string.match(k, \"^%l+$\") then\n\
    \            lower_case = false\n        end\n        if not string.match(k, \"\
    ^%u+$\") then\n            upper_case = false\n        end\n    end\n    return\
    \ lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local upper = true\n    local lower\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k:match(\"%u\") then\n                lower = false\n        \
    \    else\n                upper = false\n            end\n        else\n    \
    \        return false\n        end\n    end\n    return upper or lower\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3pfpr7hq.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp3pfpr7hq.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4m372fak.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp4m372fak.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if key:lower() ~= key then\n\
    \            lower_case = false\n        end\n        if key:upper() ~= key then\n\
    \            upper_case = false\n        end\n    end\n    return lower_case or\
    \ upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1d9xtwb7.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp1d9xtwb7.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then return false end\n\
    \    local is_lower = false\n    local is_upper = false\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == \"string\" then\n            if string.lower(k) ==\
    \ k then\n                is_lower = true\n            elseif string.upper(k)\
    \ == k then\n                is_upper = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4keln8hw.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp4keln8hw.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if next(dict) == nil then\n        return\
    \ false\n    end\n    local lower = true\n    local upper = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        if k ~= string.lower(k) then\n            lower\
    \ = false\n        end\n        if k ~= string.upper(k) then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2sxrsl6t.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp2sxrsl6t.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if next(dict) == nil then\n        return\
    \ false\n    end\n    local lower = true\n    local upper = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        if k ~= string.lower(k) then\n            lower\
    \ = false\n        end\n        if k ~= string.upper(k) then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0559nrof.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp0559nrof.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if lower_case and string.lower(key)\
    \ ~= key then\n            lower_case = false\n        end\n        if upper_case\
    \ and string.upper(key) ~= key then\n            upper_case = false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3o760fzo.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp3o760fzo.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    if not next(dict) then return false end\n    local is_lower = false\n   \
    \ local is_upper = false\n    for k,v in pairs(dict) do\n        if type(k) ==\
    \ \"string\" then\n            if k:lower() == k then\n                is_lower\
    \ = true\n            elseif k:upper() == k then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr9001abl.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpr9001abl.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case_keys = true\n    local\
    \ upper_case_keys = true\n    for key, value in pairs(dict) do\n        if type(key)\
    \ ~= \"string\" then\n            return false\n        end\n        if lower_case_keys\
    \ and key ~= string.lower(key) then\n            lower_case_keys = false\n   \
    \     end\n        if upper_case_keys and key ~= string.upper(key) then\n    \
    \        upper_case_keys = false\n        end\n    end\n    return lower_case_keys\
    \ or upper_case_keys\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgk4p1gi1.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpgk4p1gi1.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local is_lower = true\n    local is_upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if not string.match(k, \"%l+\") then\n                is_lower =\
    \ false\n            end\n            if not string.match(k, \"%u+\") then\n \
    \               is_upper = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwecg123a.lua:34:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpwecg123a.lua:34:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local is_lower = nil\n  for k, v in pairs(dict)\
    \ do\n    if type(k) == \"string\" then\n      if is_lower == nil then\n     \
    \   is_lower = k == string.lower(k)\n      else\n        if is_lower ~= (k ==\
    \ string.lower(k)) then\n          return false\n        end\n      end\n    else\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp75kod8k_.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp75kod8k_.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if string.lower(k)\
    \ == k then\n                is_lower = true\n            elseif string.upper(k)\
    \ == k then\n                is_upper = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp30xg5uom.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp30xg5uom.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local all_lower = true\n    local all_upper = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        all_lower = all_lower and k == string.lower(k)\n\
    \        all_upper = all_upper and k == string.upper(k)\n    end\n    return all_lower\
    \ or all_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk2ezuvkf.lua:29:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpk2ezuvkf.lua:29:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9bbmeiea.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp9bbmeiea.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbp74tvur.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpbp74tvur.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower = true\n  local upper = true\n\
    \  for k,v in pairs(dict) do\n    if type(k) ~= \"string\" then\n      return\
    \ false\n    end\n    if lower and k ~= k:lower() then\n      lower = false\n\
    \    end\n    if upper and k ~= k:upper() then\n      upper = false\n    end\n\
    \  end\n  return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9av0phj3.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp9av0phj3.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2mebnznf.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp2mebnznf.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k ~= string.lower(k) then\n                lower_case = false\n\
    \            end\n            if k ~= string.upper(k) then\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmpatoxzj.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpmpatoxzj.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7ikkz3p2.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp7ikkz3p2.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = true\n    local is_upper = true\n    for k, v in\
    \ pairs(dict) do\n        if not string.match(k, \"^%l+$\") then\n           \
    \ is_lower = false\n        end\n        if not string.match(k, \"^%u+$\") then\n\
    \            is_upper = false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps_goe3e2.lua:30:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmps_goe3e2.lua:30:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k:lower() ~= k then\n                lower_case = false\n    \
    \        end\n            if k:upper() ~= k then\n                upper_case =\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4xqjnkqg.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp4xqjnkqg.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    if not next(dict) then return false end\n    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\"\
    \ then return false end\n        if k:match(\"%u\") then lower = false end\n \
    \       if k:match(\"%l\") then upper = false end\n    end\n    return lower or\
    \ upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkne75b9v.lua:28:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpkne75b9v.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if lower and not string.match(k, \"^%l+$\") then\n           \
    \ lower = false\n        end\n        if upper and not string.match(k, \"^%u+$\"\
    ) then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpak0g2i2i.lua:39:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpak0g2i2i.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    -- code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9fxd5buq.lua:17:\
    \ expected: true, actual: nil\\nstack traceback:\\n\\t/tmp/tmp9fxd5buq.lua:17:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxy4khcd2.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpxy4khcd2.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= string.lower(k)\
    \ then\n            lower = false\n        end\n        if upper and k ~= string.upper(k)\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_gjedcs6.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp_gjedcs6.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if string.lower(k)\
    \ == k then\n                is_lower = true\n            elseif string.upper(k)\
    \ == k then\n                is_upper = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpseehwa00.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpseehwa00.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k:lower() ~= k then\n                lower_case = false\n    \
    \        end\n            if k:upper() ~= k then\n                upper_case =\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjy4vjx_2.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjy4vjx_2.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if not string.match(k, \"^%l+$\") then\n            lower = false\n\
    \        end\n        if not string.match(k, \"^%u+$\") then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptyzkdo68.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmptyzkdo68.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k,v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower_case and string.upper(k)\
    \ == k then\n            lower_case = false\n        end\n        if upper_case\
    \ and string.lower(k) == k then\n            upper_case = false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkwpxs27p.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpkwpxs27p.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if key ~= string.lower(key)\
    \ then\n            lower_case = false\n        end\n        if key ~= string.upper(key)\
    \ then\n            upper_case = false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpssi1t68r.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpssi1t68r.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if string.lower(k) ~= k then\n            lower = false\n    \
    \    end\n        if string.upper(k) ~= k then\n            upper = false\n  \
    \      end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa1eyapen.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpa1eyapen.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if k ==\
    \ string.lower(k) then\n                is_lower = true\n            elseif k\
    \ == string.upper(k) then\n                is_upper = true\n            else\n\
    \                return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpquy3r4t8.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpquy3r4t8.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and string.lower(k) ~=\
    \ k then\n            lower = false\n        end\n        if upper and string.upper(k)\
    \ ~= k then\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp63ohwnzb.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp63ohwnzb.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  if table.getn(dict) == 0 then\n    return\
    \ false\n  end\n  local lower_case = true\n  local upper_case = true\n  for k,\
    \ v in pairs(dict) do\n    if type(k) ~= \"string\" then\n      return false\n\
    \    end\n    if string.lower(k) ~= k then\n      lower_case = false\n    end\n\
    \    if string.upper(k) ~= k then\n      upper_case = false\n    end\n  end\n\
    \  return lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4lm_y9zw.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp4lm_y9zw.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local is_lower = true\n    local is_upper = true\n    for k, v in\
    \ pairs(dict) do\n        if type(k) ~= \"string\" then\n            return false\n\
    \        end\n        if is_lower and k ~= k:lower() then\n            is_lower\
    \ = false\n        end\n        if is_upper and k ~= k:upper() then\n        \
    \    is_upper = false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp38y9u9uv.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp38y9u9uv.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower = true\n  local upper = true\n\
    \  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" then\n      return\
    \ false\n    end\n    if lower and k ~= k:lower() then\n      lower = false\n\
    \    end\n    if upper and k ~= k:upper() then\n      upper = false\n    end\n\
    \  end\n  return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy_lfprb3.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpy_lfprb3.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if dict == nil or #dict == 0 then\n\
    \        return false\n    end\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower_case and not k:match(\"\
    ^%l+$\") then\n            lower_case = false\n        end\n        if upper_case\
    \ and not k:match(\"^%u+$\") then\n            upper_case = false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgp_x146m.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpgp_x146m.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for key,\
    \ value in pairs(dict) do\n        if type(key) == \"string\" then\n         \
    \   if string.lower(key) == key then\n                is_lower = true\n      \
    \      elseif string.upper(key) == key then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph6lupso0.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmph6lupso0.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and not string.match(k,\
    \ \"^%l+$\") then\n            lower = false\n        end\n        if upper and\
    \ not string.match(k, \"^%u+$\") then\n            upper = false\n        end\n\
    \    end\n    return lower or upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjct7y3yr.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjct7y3yr.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= string.lower(k)\
    \ then\n            lower = false\n        end\n        if upper and k ~= string.upper(k)\
    \ then\n            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjhp_y19v.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpjhp_y19v.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k:match(\"%u\") then\n                lower_case = false\n   \
    \         else\n                upper_case = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeih4s7ms.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpeih4s7ms.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmux0eri5.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpmux0eri5.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if string.lower(k)\
    \ == k then\n                is_lower = true\n            elseif string.upper(k)\
    \ == k then\n                is_upper = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8ghebudr.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp8ghebudr.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    -- check if the dictionary is empty\n\
    \    if (next(dict) == nil) then\n        return false\n    end\n    -- check\
    \ if all keys are in lower case\n    local lower_case = true\n    for k, v in\
    \ pairs(dict) do\n        if (not string.match(k, \"%l+\")) then\n           \
    \ lower_case = false\n            break\n        end\n    end\n    -- check if\
    \ all keys are in upper case\n    local upper_case = true\n    for k, v in pairs(dict)\
    \ do\n        if (not string.match(k, \"%u+\")) then\n            upper_case =\
    \ false\n            break\n        end\n    end\n    return lower_case or upper_case\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0itp01_j.lua:40:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp0itp01_j.lua:40:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if lower and k ~= k:lower() then\n            lower = false\n\
    \        end\n        if upper and k ~= k:upper() then\n            upper = false\n\
    \        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqum6t0om.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpqum6t0om.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower = true\n  local upper = true\n\
    \  for k,v in pairs(dict) do\n    if type(k) ~= \"string\" then\n      return\
    \ false\n    end\n    if lower and string.lower(k) ~= k then\n      lower = false\n\
    \    end\n    if upper and string.upper(k) ~= k then\n      upper = false\n  \
    \  end\n  end\n  return lower or upper\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqqbft9hg.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpqqbft9hg.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if string.lower(k) ~= k then\n                lower_case = false\n\
    \            end\n            if string.upper(k) ~= k then\n                upper_case\
    \ = false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_axkay3x.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp_axkay3x.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if dict == nil or next(dict) == nil\
    \ then\n        return false\n    end\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and string.match(k, \"\
    %u\") then\n            lower = false\n        end\n        if upper and string.match(k,\
    \ \"%l\") then\n            upper = false\n        end\n    end\n    return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4dr98eez.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp4dr98eez.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    if not next(dict) then return false end\n    local is_lower = false\n   \
    \ local is_upper = false\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ \"string\" then\n            if k:lower() == k then\n                is_lower\
    \ = true\n            elseif k:upper() == k then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj36yqd11.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpj36yqd11.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if string.lower(k)\
    \ == k then\n                is_lower = true\n            elseif string.upper(k)\
    \ == k then\n                is_upper = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcq33rooe.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpcq33rooe.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower_case and string.upper(k)\
    \ == k then\n            lower_case = false\n        end\n        if upper_case\
    \ and string.lower(k) == k then\n            upper_case = false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqnagysvz.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpqnagysvz.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = 0\n    local upper = 0\n\
    \    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n     \
    \       if k == string.lower(k) then\n                lower = lower + 1\n    \
    \        elseif k == string.upper(k) then\n                upper = upper + 1\n\
    \            end\n        end\n    end\n    if lower == 0 and upper == 0 then\n\
    \        return false\n    elseif lower == 0 and upper ~= 0 then\n        return\
    \ true\n    elseif lower ~= 0 and upper == 0 then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3v7lgz_o.lua:38:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp3v7lgz_o.lua:38:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) ~= \"string\" then\n            return false\n      \
    \  end\n        if lower and k ~= string.lower(k) then\n            lower = false\n\
    \        end\n        if upper and k ~= string.upper(k) then\n            upper\
    \ = false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpndjv2o4e.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpndjv2o4e.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local is_lower = false\n    local is_upper\
    \ = false\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k == string.lower(k) then\n                is_lower = true\n \
    \           elseif k == string.upper(k) then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr8or8gmq.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpr8or8gmq.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local is_lower = true\n    local is_upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k:lower() ~= k then\n                is_lower = false\n      \
    \      end\n            if k:upper() ~= k then\n                is_upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return is_lower or is_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpz7qqd155.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpz7qqd155.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local all_lower = true\n    local all_upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k:lower() ~= k then\n                all_lower = false\n     \
    \       end\n            if k:upper() ~= k then\n                all_upper = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return all_lower or all_upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgut9pju1.lua:33:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpgut9pju1.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if type(dict) ~= \"table\" then\n  \
    \      return false\n    end\n    local is_upper = false\n    local is_lower =\
    \ false\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k == string.upper(k) then\n                is_upper = true\n \
    \           elseif k == string.lower(k) then\n                is_lower = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_upper ~= is_lower\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9s81g0nz.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp9s81g0nz.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    if not next(dict) then return false end\n    local lower = true\n    local\
    \ upper = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\"\
    \ then return false end\n        if lower and k ~= k:lower() then lower = false\
    \ end\n        if upper and k ~= k:upper() then upper = false end\n    end\n \
    \   return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppkbryrul.lua:28:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmppkbryrul.lua:28:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if lower_case and string.lower(key)\
    \ ~= key then\n            lower_case = false\n        end\n        if upper_case\
    \ and string.upper(key) ~= key then\n            upper_case = false\n        end\n\
    \    end\n    return lower_case or upper_case\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpurcf009p.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpurcf009p.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if dict == nil or next(dict) == nil\
    \ then\n        return false\n    end\n    local is_lower = false\n    local is_upper\
    \ = false\n    for k, v in pairs(dict) do\n        if type(k) == \"string\" then\n\
    \            if k:lower() == k then\n                is_lower = true\n       \
    \     elseif k:upper() == k then\n                is_upper = true\n          \
    \  else\n                return false\n            end\n        else\n       \
    \     return false\n        end\n    end\n    return is_lower or is_upper\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_t93057t.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp_t93057t.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n\tlocal lower = true\n\tlocal upper = true\n\
    \tfor k, v in pairs(dict) do\n\t\tif type(k) ~= \"string\" then\n\t\t\treturn\
    \ false\n\t\tend\n\t\tif k:lower() ~= k then\n\t\t\tlower = false\n\t\tend\n\t\
    \tif k:upper() ~= k then\n\t\t\tupper = false\n\t\tend\n\tend\n\treturn lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppudmyeih.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmppudmyeih.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower = true\n  local upper = true\n\
    \  for k, v in pairs(dict) do\n    if type(k) ~= \"string\" then\n      return\
    \ false\n    end\n    if k ~= k:lower() then\n      lower = false\n    end\n \
    \   if k ~= k:upper() then\n      upper = false\n    end\n  end\n  return lower\
    \ or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp35olf1x0.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp35olf1x0.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if k ==\
    \ string.lower(k) then\n                is_lower = true\n            elseif k\
    \ == string.upper(k) then\n                is_upper = true\n            else\n\
    \                return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu92i9fgu.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpu92i9fgu.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if k ~= k:lower() then\n     \
    \       lower = false\n        end\n        if k ~= k:upper() then\n         \
    \   upper = false\n        end\n    end\n    return lower or upper\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr28op_kx.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpr28op_kx.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for key, value in\
    \ pairs(dict) do\n        if type(key) ~= \"string\" then\n            return\
    \ false\n        end\n        if key:lower() ~= key then\n            lower =\
    \ false\n        end\n        if key:upper() ~= key then\n            upper =\
    \ false\n        end\n    end\n    return lower or upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq3h5kv01.lua:33:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpq3h5kv01.lua:33:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local lower_case = true\n    local upper_case = true\n    for k,\
    \ v in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        if lower_case and k ~= k:lower() then\n        \
    \    lower_case = false\n        end\n        if upper_case and k ~= k:upper()\
    \ then\n            upper_case = false\n        end\n    end\n    return lower_case\
    \ or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgwuemt_6.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpgwuemt_6.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then\n        return false\n\
    \    end\n    local lower_case = true\n    local upper_case = true\n    for k,\
    \ v in pairs(dict) do\n        if type(k) ~= \"string\" then\n            return\
    \ false\n        end\n        if lower_case and string.upper(k) == k then\n  \
    \          lower_case = false\n        end\n        if upper_case and string.lower(k)\
    \ == k then\n            upper_case = false\n        end\n    end\n    return\
    \ lower_case or upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxctjjs71.lua:36:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpxctjjs71.lua:36:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if not dict then return false end\n\
    \    if not next(dict) then return false end\n    local is_lower = false\n   \
    \ local is_upper = false\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ \"string\" then\n            if k:lower() == k then\n                is_lower\
    \ = true\n            elseif k:upper() == k then\n                is_upper = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_lower or is_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9y1ia0iz.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp9y1ia0iz.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then\n        return false\n\
    \    end\n    local is_lower = false\n    local is_upper = false\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == \"string\" then\n            if string.lower(k)\
    \ == k then\n                is_lower = true\n            elseif string.upper(k)\
    \ == k then\n                is_upper = true\n            else\n             \
    \   return false\n            end\n        else\n            return false\n  \
    \      end\n    end\n    return is_lower or is_upper\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwnk96y_7.lua:35:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpwnk96y_7.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if #dict == 0 then return false end\n\
    \    local upper = true\n    local lower = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) ~= \"string\" then return false end\n        if k:lower()\
    \ ~= k then lower = false end\n        if k:upper() ~= k then upper = false end\n\
    \    end\n    return upper or lower\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaqv347sr.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpaqv347sr.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower = true\n    local upper\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n\
    \            return false\n        end\n        if lower and k ~= k:lower() then\n\
    \            lower = false\n        end\n        if upper and k ~= k:upper() then\n\
    \            upper = false\n        end\n    end\n    return lower or upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpllwec_6x.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpllwec_6x.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    local lower_case = true\n    local upper_case\
    \ = true\n    for key, value in pairs(dict) do\n        if type(key) ~= \"string\"\
    \ then\n            return false\n        end\n        if key:lower() ~= key then\n\
    \            lower_case = false\n        end\n        if key:upper() ~= key then\n\
    \            upper_case = false\n        end\n    end\n    return lower_case or\
    \ upper_case\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqvu8xnbv.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpqvu8xnbv.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  local lower = true\n  local upper = true\n\
    \  for k,v in pairs(dict) do\n    if type(k) ~= \"string\" then\n      return\
    \ false\n    end\n    if lower and k ~= k:lower() then\n      lower = false\n\
    \    end\n    if upper and k ~= k:upper() then\n      upper = false\n    end\n\
    \  end\n  return lower or upper\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa15kr1o1.lua:32:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpa15kr1o1.lua:32:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n    if next(dict) == nil then\n        return\
    \ false\n    end\n    local all_lower = true\n    local all_upper = true\n   \
    \ for k, v in pairs(dict) do\n        if type(k) ~= \"string\" then\n        \
    \    return false\n        end\n        if k ~= string.lower(k) then\n       \
    \     all_lower = false\n        end\n        if k ~= string.upper(k) then\n \
    \           all_upper = false\n        end\n    end\n    return all_lower or all_upper\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7n_k52xw.lua:35:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmp7n_k52xw.lua:35:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- check_dict_case({\"\
    a\":\"apple\", \"b\":\"banana\"}) should return True.\n-- check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n-- check_dict_case({\"\
    a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n-- check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n\
    -- check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
    local function check_dict_case(dict)\n  -- your code here\n  local keys = {}\n\
    \  local lower = true\n  local upper = true\n  for k,v in pairs(dict) do\n   \
    \ keys[#keys+1] = k\n  end\n  if #keys == 0 then\n    return false\n  end\n  for\
    \ i,v in ipairs(keys) do\n    if v ~= string.lower(v) then\n      lower = false\n\
    \    end\n    if v ~= string.upper(v) then\n      upper = false\n    end\n  end\n\
    \  if lower or upper then\n    return true\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn_s0vqg8.lua:41:\
    \ expected: false, actual: true\\nstack traceback:\\n\\t/tmp/tmpn_s0vqg8.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
