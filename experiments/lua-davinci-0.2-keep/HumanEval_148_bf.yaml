name: HumanEval_148_bf
language: lua
prompt: "-- There are eight planets in our solar system: the closerst to the Sun \n\
  -- is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n-- Uranus,\
  \ Neptune.\n-- Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n-- The function should return a tuple containing all planets whose\
  \ orbits are \n-- located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n-- the proximity to the sun. \n-- The function should return an empty\
  \ tuple if planet1 or planet2\n-- are not correct planet names. \n-- Examples\n\
  -- bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n-- bf(\"Earth\", \"\
  Mercury\") ==> (\"Venus\")\n-- bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\"\
  , \"Mars\", \"Jupiter\", \"Saturn\")\nlocal function bf(planet1, planet2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = bf\n\
  \    lu.assertEquals(candidate('Jupiter', 'Neptune'), {'Saturn', 'Uranus'})\n  \
  \  lu.assertEquals(candidate('Earth', 'Mercury'), {'Venus'})\n    lu.assertEquals(candidate('Mercury',\
  \ 'Uranus'), {'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'})\n    lu.assertEquals(candidate('Neptune',\
  \ 'Venus'), {'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'})\n    lu.assertEquals(candidate('Earth',\
  \ 'Earth'), {})\n    lu.assertEquals(candidate('Mars', 'Earth'), {})\n    lu.assertEquals(candidate('Jupiter',\
  \ 'Makemake'), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1 = 0\n  local p2 =\
    \ 0\n  for i = 1, #planets do\n    if planets[i] == planet1 then\n      p1 = i\n\
    \    end\n    if planets[i] == planet2 then\n      p2 = i\n    end\n  end\n  if\
    \ p1 == 0 or p2 == 0 then\n    return {}\n  end\n  local result = {}\n  if p1\
    \ < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(result, planets[i])\n\
    \    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(result, planets[i])\n\
    \    end\n  end\n  return result\nend", "  local planets = {\n    \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \n  }\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1\
    \ then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then return {} end\n  local res = {}\n  for i = math.min(p1, p2) + 1,\
    \ math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n  end\n  return\
    \ res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.indexOf(planets,\
    \ planet1), table.indexOf(planets, planet2)\n  if p1 == -1 or p2 == -1 then return\
    \ {} end\n  local min, max = math.min(p1, p2), math.max(p1, p2)\n  local res =\
    \ {}\n  for i = min + 1, max - 1 do\n    table.insert(res, planets[i])\n  end\n\
    \  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.indexOf(planets,\
    \ planet1), table.indexOf(planets, planet2)\n  if p1 == -1 or p2 == -1 then return\
    \ {} end\n  local result = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2)\
    \ - 1 do\n    table.insert(result, planets[i])\n  end\n  return result\nend",
  "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n\
    \  end\n  if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  if p1\
    \ < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n  end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local\
    \ p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n  if p1\
    \ and p2 then\n    local t = {}\n    for i = math.min(p1, p2) + 1, math.max(p1,\
    \ p2) - 1 do\n      table.insert(t, planets[i])\n    end\n    return unpack(t)\n\
    \  end\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if p1 and p2 then\n    local t = {}\n\
    \    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n      table.insert(t,\
    \ planets[i])\n    end\n    return unpack(t)\n  end\nend", "  local planets =\
    \ {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if not p1 or not p2 then return {} end\n  local res = {}\n  if p1\
    \ < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n  end\n  return res\nend", "  local planets = {\n    Mercury = 1,\n\
    \    Venus = 2,\n    Earth = 3,\n    Mars = 4,\n    Jupiter = 5,\n    Saturn =\
    \ 6,\n    Uranus = 7,\n    Neptune = 8\n  }\n  local p1, p2 = planets[planet1],\
    \ planets[planet2]\n  if not p1 or not p2 then return {} end\n  local res = {}\n\
    \  for k, v in pairs(planets) do\n    if (p1 < p2 and p1 < v and v < p2) or (p1\
    \ > p2 and p1 > v and v > p2) then\n      table.insert(res, k)\n    end\n  end\n\
    \  return res\nend", "  local planets = {\n    \"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  }\n  local p1,\
    \ p2 = table.find(planets, planet1), table.find(planets, planet2)\n  if not p1\
    \ or not p2 then return {} end\n  local res = {}\n  for i = math.min(p1, p2) +\
    \ 1, math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n  end\n  return\
    \ res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if p1 and p2 then\n    local t = {}\n\
    \    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n      table.insert(t,\
    \ planets[i])\n    end\n    return table.unpack(t)\n  end\nend", "  local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  local t = {}\n  for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(t, planets[i])\n  end\n \
    \ return t\nend", "  local planets = {\n    \"Mercury\",\n    \"Venus\",\n   \
    \ \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\"\
    ,\n    \"Neptune\"\n  }\n  local p1 = 0\n  local p2 = 0\n  for i, planet in ipairs(planets)\
    \ do\n    if planet == planet1 then\n      p1 = i\n    end\n    if planet == planet2\
    \ then\n      p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return\
    \ {}\n  end\n  local result = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 -\
    \ 1 do\n      table.insert(result, planets[i])\n    end\n  else\n    for i = p2\
    \ + 1, p1 - 1 do\n      table.insert(result, planets[i])\n    end\n  end\n  return\
    \ result\nend", "    local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local index1, index2\
    \ = 0, 0\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n \
    \           index1 = i\n        end\n        if v == planet2 then\n          \
    \  index2 = i\n        end\n    end\n    if index1 == 0 or index2 == 0 then\n\
    \        return {}\n    end\n    if index1 > index2 then\n        index1, index2\
    \ = index2, index1\n    end\n    local res = {}\n    for i = index1 + 1, index2\
    \ - 1 do\n        table.insert(res, planets[i])\n    end\n    return res\nend",
  "    local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1 = nil\n    local p2 = nil\n\
    \    for i, v in ipairs(planets) do\n        if v == planet1 then\n          \
    \  p1 = i\n        end\n        if v == planet2 then\n            p2 = i\n   \
    \     end\n    end\n    if p1 == nil or p2 == nil then\n        return {}\n  \
    \  end\n    if p1 > p2 then\n        p1, p2 = p2, p1\n    end\n    local res =\
    \ {}\n    for i = p1 + 1, p2 - 1 do\n        table.insert(res, planets[i])\n \
    \   end\n    return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local\
    \ p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n  if not\
    \ p1 or not p2 then return {} end\n  local res = {}\n  for i = math.min(p1, p2)\
    \ + 1, math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n  end\n  return\
    \ res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if p1 and p2 then\n    local res =\
    \ {}\n    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n    return unpack(res)\n  end\nend", "  local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local p1 = table.indexof(planets, planet1)\n  local\
    \ p2 = table.indexof(planets, planet2)\n  if p1 == nil or p2 == nil then\n   \
    \ return {}\n  end\n  if p1 > p2 then\n    p1, p2 = p2, p1\n  end\n  return table.slice(planets,\
    \ p1 + 1, p2)\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if p1 and p2 then\n    local t = {}\n\
    \    if p1 < p2 then\n      for i = p1 + 1, p2 - 1 do\n        table.insert(t,\
    \ planets[i])\n      end\n    else\n      for i = p2 + 1, p1 - 1 do\n        table.insert(t,\
    \ planets[i])\n      end\n    end\n    return table.unpack(t)\n  end\nend", " \
    \ local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n\
    \  end\n  if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  for i\
    \ = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\n\
    end", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1),\
    \ table.find(planets, planet2)\n  if not p1 or not p2 then return {} end\n  local\
    \ res = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend", "  local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1\
    \ then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then return {} end\n  local res = {}\n  if p1 < p2 then\n    for i =\
    \ p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n    end\n  else\n  \
    \  for i = p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n    end\n \
    \ end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n\
    \    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return\
    \ {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1\
    \ + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend",
  "  local planets = {\n    Mercury = 1,\n    Venus = 2,\n    Earth = 3,\n    Mars\
    \ = 4,\n    Jupiter = 5,\n    Saturn = 6,\n    Uranus = 7,\n    Neptune = 8\n\
    \  }\n  local p1 = planets[planet1]\n  local p2 = planets[planet2]\n  if not p1\
    \ or not p2 then return {} end\n  local res = {}\n  for k, v in pairs(planets)\
    \ do\n    if (p1 < p2 and v > p1 and v < p2) or (p1 > p2 and v < p1 and v > p2)\
    \ then\n      table.insert(res, k)\n    end\n  end\n  return res\nend", "  local\
    \ planets = {\n    Mercury = 1,\n    Venus = 2,\n    Earth = 3,\n    Mars = 4,\n\
    \    Jupiter = 5,\n    Saturn = 6,\n    Uranus = 7,\n    Neptune = 8\n  }\n  local\
    \ p1 = planets[planet1]\n  local p2 = planets[planet2]\n  if not p1 or not p2\
    \ then return {} end\n  local result = {}\n  for k, v in pairs(planets) do\n \
    \   if (p1 < p2 and v > p1 and v < p2) or (p1 > p2 and v < p1 and v > p2) then\n\
    \      table.insert(result, k)\n    end\n  end\n  table.sort(result, function(a,\
    \ b) return planets[a] < planets[b] end)\n  return result\nend", "  local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if not p1 or not p2 then return {} end\n  local res = {}\n  for\
    \ i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = table.find(planets, planet1), table.find(planets, planet2)\n  if not p1 or\
    \ not p2 then return {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  return table.slice(planets,\
    \ p1 + 1, p2)\nend", "    local planets = {\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2\
    \ = 0, 0\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n \
    \           p1 = i\n        end\n        if v == planet2 then\n            p2\
    \ = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n\
    \    end\n    local t = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 -\
    \ 1 do\n            table.insert(t, planets[i])\n        end\n    else\n     \
    \   for i = p2 + 1, p1 - 1 do\n            table.insert(t, planets[i])\n     \
    \   end\n    end\n    return t\nend", "    local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n   \
    \ local i1, i2 = 0, 0\n    for i, v in ipairs(planets) do\n        if v == planet1\
    \ then\n            i1 = i\n        end\n        if v == planet2 then\n      \
    \      i2 = i\n        end\n    end\n    if i1 == 0 or i2 == 0 then\n        return\
    \ {}\n    end\n    local result = {}\n    if i1 < i2 then\n        for i = i1\
    \ + 1, i2 - 1 do\n            table.insert(result, planets[i])\n        end\n\
    \    else\n        for i = i2 + 1, i1 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    end\n    return result\nend", "  local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then p1, p2 = p2, p1\
    \ end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local planet1_index\
    \ = 0\n  local planet2_index = 0\n  for i, planet in ipairs(planets) do\n    if\
    \ planet == planet1 then\n      planet1_index = i\n    end\n    if planet == planet2\
    \ then\n      planet2_index = i\n    end\n  end\n  if planet1_index == 0 or planet2_index\
    \ == 0 then\n    return {}\n  end\n  local result = {}\n  if planet1_index < planet2_index\
    \ then\n    for i = planet1_index + 1, planet2_index - 1 do\n      table.insert(result,\
    \ planets[i])\n    end\n  else\n    for i = planet2_index + 1, planet1_index -\
    \ 1 do\n      table.insert(result, planets[i])\n    end\n  end\n  return result\n\
    end", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1),\
    \ table.find(planets, planet2)\n  if p1 and p2 then\n    local res = {}\n    for\
    \ i = math.min(p1, p2), math.max(p1, p2) do\n      table.insert(res, planets[i])\n\
    \    end\n    return table.unpack(res)\n  end\nend", "  local planets = {\n  \
    \  \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\"\
    ,\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n  }\n  local p1, p2 = 0,\
    \ 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n\
    \    end\n    if v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0\
    \ or p2 == 0 then\n    return {}\n  end\n  local res = {}\n  if p1 < p2 then\n\
    \    for i = p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n    end\n\
    \  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n  end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local\
    \ planet1_index = table.indexOf(planets, planet1)\n  local planet2_index = table.indexOf(planets,\
    \ planet2)\n  if planet1_index == -1 or planet2_index == -1 then return {} end\n\
    \  local start_index = math.min(planet1_index, planet2_index)\n  local end_index\
    \ = math.max(planet1_index, planet2_index)\n  local result = {}\n  for i = start_index\
    \ + 1, end_index - 1 do\n    table.insert(result, planets[i])\n  end\n  return\
    \ result\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.indexOf(planets,\
    \ planet1), table.indexOf(planets, planet2)\n  if p1 == -1 or p2 == -1 then return\
    \ {} end\n  local t = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1\
    \ do\n    table.insert(t, planets[i])\n  end\n  return t\nend", "  local planets\
    \ = {\n    Mercury = 1,\n    Venus = 2,\n    Earth = 3,\n    Mars = 4,\n    Jupiter\
    \ = 5,\n    Saturn = 6,\n    Uranus = 7,\n    Neptune = 8\n  }\n  local p1 = planets[planet1]\n\
    \  local p2 = planets[planet2]\n  if not p1 or not p2 then return {} end\n  local\
    \ res = {}\n  if p1 < p2 then\n    for k, v in pairs(planets) do\n      if v >\
    \ p1 and v < p2 then\n        table.insert(res, k)\n      end\n    end\n  else\n\
    \    for k, v in pairs(planets) do\n      if v > p2 and v < p1 then\n        table.insert(res,\
    \ k)\n      end\n    end\n  end\n  return res\nend", "    local planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n    local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n    if not p1 or not p2 then return {} end\n    local res = {}\n \
    \   for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n        table.insert(res,\
    \ planets[i])\n    end\n    return res\nend", "  local planets = {\n    \"Mercury\"\
    ,\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\"\
    ,\n    \"Uranus\",\n    \"Neptune\"\n  }\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if not p1 or not p2 then return {}\
    \ end\n  local t = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n\
    \    table.insert(t, planets[i])\n  end\n  return t\nend", "  local planets =\
    \ {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n  local p1, p2 = table.indexof(planets, planet1), table.indexof(planets,\
    \ planet2)\n  if p1 and p2 then\n    local t = {}\n    if p1 < p2 then\n     \
    \ for i = p1+1, p2-1 do\n        table.insert(t, planets[i])\n      end\n    else\n\
    \      for i = p2+1, p1-1 do\n        table.insert(t, planets[i])\n      end\n\
    \    end\n    return unpack(t)\n  end\nend", "\tlocal planets = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n\tlocal p1 = 0\n\tlocal p2 = 0\n\tfor i, v in ipairs(planets) do\n\t\tif v\
    \ == planet1 then\n\t\t\tp1 = i\n\t\tend\n\t\tif v == planet2 then\n\t\t\tp2 =\
    \ i\n\t\tend\n\tend\n\tif p1 == 0 or p2 == 0 then\n\t\treturn {}\n\tend\n\tlocal\
    \ t = {}\n\tif p1 < p2 then\n\t\tfor i = p1 + 1, p2 - 1 do\n\t\t\ttable.insert(t,\
    \ planets[i])\n\t\tend\n\telse\n\t\tfor i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(t,\
    \ planets[i])\n\t\tend\n\tend\n\treturn t\nend", "  local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = table.indexOf(planets, planet1), table.indexOf(planets, planet2)\n\
    \  if p1 == -1 or p2 == -1 then return {} end\n  local start, finish = math.min(p1,\
    \ p2), math.max(p1, p2)\n  local result = {}\n  for i = start + 1, finish do\n\
    \    table.insert(result, planets[i])\n  end\n  return result\nend", "    local\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local t = {}\n    if p1 < p2\
    \ then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(t, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(t,\
    \ planets[i])\n        end\n    end\n    return t\nend", "  local planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if not p1 or not p2 then return {} end\n  local res = {}\n  for\
    \ i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = table.find(planets, planet1), table.find(planets, planet2)\n  if p1 and p2\
    \ then\n    local t = {}\n    for i = math.min(p1, p2) + 1, math.max(p1, p2) -\
    \ 1 do\n      table.insert(t, planets[i])\n    end\n    return unpack(t)\n  end\n\
    end", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n\
    \  end\n  if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  if p1\
    \ > p2 then\n    for i = p2, p1 do\n      table.insert(res, planets[i])\n    end\n\
    \  else\n    for i = p1, p2 do\n      table.insert(res, planets[i])\n    end\n\
    \  end\n  return res\nend", "    local planets = {\n        \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    }\n\
    \    local p1, p2 = 0, 0\n    for i, v in ipairs(planets) do\n        if v ==\
    \ planet1 then\n            p1 = i\n        end\n        if v == planet2 then\n\
    \            p2 = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n  \
    \      return {}\n    end\n    local res = {}\n    if p1 < p2 then\n        for\
    \ i = p1 + 1, p2 - 1 do\n            table.insert(res, planets[i])\n        end\n\
    \    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    end\n    return res\nend", "  local planets = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\
    \  if not p1 or not p2 then return {} end\n  local res = {}\n  for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n  end\n\
    \  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1 = table.indexof(planets,\
    \ planet1)\n  local p2 = table.indexof(planets, planet2)\n  if p1 == nil or p2\
    \ == nil then return {} end\n  if p1 > p2 then\n    p1, p2 = p2, p1\n  end\n \
    \ return table.slice(planets, p1+1, p2)\nend", "    local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets) do\n        if v ==\
    \ planet1 then\n            p1 = i\n        end\n        if v == planet2 then\n\
    \            p2 = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n  \
    \      return {}\n    end\n    local t = {}\n    if p1 < p2 then\n        for\
    \ i = p1 + 1, p2 - 1 do\n            table.insert(t, planets[i])\n        end\n\
    \    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(t, planets[i])\n\
    \        end\n    end\n    return t\nend", "  local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1 = nil\n  local p2 = nil\n  for i, v in ipairs(planets) do\n    if\
    \ v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n      p2\
    \ = i\n    end\n  end\n  if p1 == nil or p2 == nil then\n    return {}\n  end\n\
    \  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend", "  local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\
    \  if p1 and p2 then\n    if p1 > p2 then\n      p1, p2 = p2, p1\n    end\n  \
    \  return table.slice(planets, p1 + 1, p2)\n  end\n  return {}\nend", "  local\
    \ planets = {\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"\n  }\n  local p1, p2\n  for i, p in ipairs(planets)\
    \ do\n    if p == planet1 then p1 = i end\n    if p == planet2 then p2 = i end\n\
    \  end\n  if not p1 or not p2 then return {} end\n  local res = {}\n  for i =\
    \ math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1 = table.indexof(planets,\
    \ planet1)\n  local p2 = table.indexof(planets, planet2)\n  if p1 == nil or p2\
    \ == nil then return {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  return table.slice(planets,\
    \ p1 + 1, p2)\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0,\
    \ 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n \
    \   if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return\
    \ {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1\
    \ + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend",
  "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1),\
    \ table.find(planets, planet2)\n  if not p1 or not p2 then return {} end\n  local\
    \ res = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend", "  local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1\
    \ then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then return {} end\n  local p = {}\n  for i = math.min(p1, p2), math.max(p1,\
    \ p2) do\n    table.insert(p, planets[i])\n  end\n  return p\nend", "    local\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local result = {}\n    if p1\
    \ < p2 then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(result,\
    \ planets[i])\n        end\n    else\n        for i = p2 + 1, p1 - 1 do\n    \
    \        table.insert(result, planets[i])\n        end\n    end\n    return result\n\
    end", "    local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2 = 0, 0\n    for i, v\
    \ in ipairs(planets) do\n        if v == planet1 then\n            p1 = i\n  \
    \      end\n        if v == planet2 then\n            p2 = i\n        end\n  \
    \  end\n    if p1 == 0 or p2 == 0 then\n        return {}\n    end\n    local\
    \ res = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 - 1 do\n         \
    \   table.insert(res, planets[i])\n        end\n    else\n        for i = p2 +\
    \ 1, p1 - 1 do\n            table.insert(res, planets[i])\n        end\n    end\n\
    \    return res\nend", "    local planets = {\n        \"Mercury\",\n        \"\
    Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n      \
    \  \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local p1,\
    \ p2 = table.find(planets, planet1), table.find(planets, planet2)\n    if p1 and\
    \ p2 then\n        local t = {}\n        for i = math.min(p1, p2) + 1, math.max(p1,\
    \ p2) - 1 do\n            table.insert(t, planets[i])\n        end\n        return\
    \ t\n    end\n    return {}\nend", "  local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local\
    \ p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then p1\
    \ = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0\
    \ then return {} end\n  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1,\
    \ p2 - 1 do\n      table.insert(res, planets[i])\n    end\n  else\n    for i =\
    \ p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n    end\n  end\n  return\
    \ res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if not p1 or not p2 then return {}\
    \ end\n  local result = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) -\
    \ 1 do\n    table.insert(result, planets[i])\n  end\n  return result\nend", " \
    \   local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n    if p1 and p2 then\n        local\
    \ t = {}\n        if p1 < p2 then\n            for i = p1 + 1, p2 - 1 do\n   \
    \             table.insert(t, planets[i])\n            end\n        else\n   \
    \         for i = p2 + 1, p1 - 1 do\n                table.insert(t, planets[i])\n\
    \            end\n        end\n        return table.unpack(t)\n    end\n    return\
    \ ()\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.indexof(planets,\
    \ planet1), table.indexof(planets, planet2)\n  if p1 == nil or p2 == nil then\
    \ return {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  return table.slice(planets,\
    \ p1 + 1, p2)\nend", "  local planets = {\n    \"Mercury\",\n    \"Venus\",\n\
    \    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\"\
    ,\n    \"Neptune\"\n  }\n  local p1, p2 = table.indexOf(planets, planet1), table.indexOf(planets,\
    \ planet2)\n  if p1 == -1 or p2 == -1 then return {} end\n  if p1 > p2 then p1,\
    \ p2 = p2, p1 end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend", "  local planets = {\n    \"Mercury\"\
    ,\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\"\
    ,\n    \"Uranus\",\n    \"Neptune\"\n  }\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if not p1 or not p2 then return {}\
    \ end\n  local res = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1\
    \ do\n    table.insert(res, planets[i])\n  end\n  return res\nend", "  local planets\
    \ = {\n    Mercury = 1,\n    Venus = 2,\n    Earth = 3,\n    Mars = 4,\n    Jupiter\
    \ = 5,\n    Saturn = 6,\n    Uranus = 7,\n    Neptune = 8\n  }\n  local p1 = planets[planet1]\n\
    \  local p2 = planets[planet2]\n  if not p1 or not p2 then return {} end\n  local\
    \ res = {}\n  for k, v in pairs(planets) do\n    if (p1 < p2 and v > p1 and v\
    \ < p2) or (p1 > p2 and v < p1 and v > p2) then\n      table.insert(res, k)\n\
    \    end\n  end\n  table.sort(res, function(a, b) return planets[a] < planets[b]\
    \ end)\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = table.find(planets, planet1), table.find(planets, planet2)\n  if p1 and p2\
    \ then\n    local t = {}\n    for i = math.min(p1, p2) + 1, math.max(p1, p2) -\
    \ 1 do\n      table.insert(t, planets[i])\n    end\n    return unpack(t)\n  end\n\
    end", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n\
    \  end\n  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then p1, p2 =\
    \ p2, p1 end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend", "    local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    local planet1_idx, planet2_idx\n    for i, planet in ipairs(planets) do\n\
    \        if planet == planet1 then\n            planet1_idx = i\n        end\n\
    \        if planet == planet2 then\n            planet2_idx = i\n        end\n\
    \    end\n    if planet1_idx == nil or planet2_idx == nil then\n        return\
    \ {}\n    end\n    local start_idx = math.min(planet1_idx, planet2_idx)\n    local\
    \ end_idx = math.max(planet1_idx, planet2_idx)\n    local result = {}\n    for\
    \ i = start_idx + 1, end_idx - 1 do\n        table.insert(result, planets[i])\n\
    \    end\n    return result\nend", "  local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local\
    \ p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n  if p1\
    \ and p2 then\n    local t = {}\n    for i = math.min(p1, p2) + 1, math.max(p1,\
    \ p2) - 1 do\n      table.insert(t, planets[i])\n    end\n    return table.unpack(t)\n\
    \  end\nend", "    local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2 = 0, 0\n\
    \    for i = 1, #planets do\n        if planets[i] == planet1 then\n         \
    \   p1 = i\n        end\n        if planets[i] == planet2 then\n            p2\
    \ = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n\
    \    end\n    local res = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2\
    \ - 1 do\n            table.insert(res, planets[i])\n        end\n    else\n \
    \       for i = p2 + 1, p1 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    end\n    return res\nend", "  local planets = {\n    \"Mercury\"\
    ,\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\"\
    ,\n    \"Uranus\",\n    \"Neptune\"\n  }\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if p1 and p2 then\n    local res =\
    \ {}\n    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n    return unpack(res)\n  end\nend", "  local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if p1 and p2 then\n    local t = {}\n    for i = p1, p2 do\n   \
    \   table.insert(t, planets[i])\n    end\n    return table.unpack(t)\n  end\n\
    \  return ()\nend", "    local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2 =\
    \ 0, 0\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n   \
    \         p1 = i\n        end\n        if v == planet2 then\n            p2 =\
    \ i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n\
    \    end\n    local t = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 -\
    \ 1 do\n            table.insert(t, planets[i])\n        end\n    else\n     \
    \   for i = p2 + 1, p1 - 1 do\n            table.insert(t, planets[i])\n     \
    \   end\n    end\n    return t\nend", "    local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n   \
    \ local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\
    \    if not p1 or not p2 then return {} end\n    local res = {}\n    for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n        table.insert(res, planets[i])\n  \
    \  end\n    return res\nend", "    local planets = {\n        \"Mercury\",\n \
    \       \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local\
    \ p1 = nil\n    local p2 = nil\n    for i, v in ipairs(planets) do\n        if\
    \ v == planet1 then\n            p1 = i\n        end\n        if v == planet2\
    \ then\n            p2 = i\n        end\n    end\n    if p1 == nil or p2 == nil\
    \ then\n        return {}\n    end\n    if p1 > p2 then\n        local tmp = p1\n\
    \        p1 = p2\n        p2 = tmp\n    end\n    local res = {}\n    for i = p1\
    \ + 1, p2 - 1 do\n        table.insert(res, planets[i])\n    end\n    return res\n\
    end", "    local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n    if not p1 or not p2 then return\
    \ {} end\n    local res = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2\
    \ - 1 do\n            table.insert(res, planets[i])\n        end\n    else\n \
    \       for i = p2 + 1, p1 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    end\n    return res\nend", "  local planets = {\n    Mercury\
    \ = 1,\n    Venus = 2,\n    Earth = 3,\n    Mars = 4,\n    Jupiter = 5,\n    Saturn\
    \ = 6,\n    Uranus = 7,\n    Neptune = 8\n  }\n  if not planets[planet1] or not\
    \ planets[planet2] then return {} end\n  local start, finish = planets[planet1],\
    \ planets[planet2]\n  if start > finish then start, finish = finish, start end\n\
    \  local res = {}\n  for k, v in pairs(planets) do\n    if v > start and v < finish\
    \ then\n      table.insert(res, k)\n    end\n  end\n  return res\nend", "  local\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n\
    \  end\n  if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  for i\
    \ = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local start,\
    \ finish = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then start\
    \ = i end\n    if v == planet2 then finish = i end\n  end\n  if start == 0 or\
    \ finish == 0 then return {} end\n  if start > finish then start, finish = finish,\
    \ start end\n  local res = {}\n  for i = start + 1, finish - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend", "    local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\
    \    if p1 and p2 then\n        local t = {}\n        for i = math.min(p1, p2)\
    \ + 1, math.max(p1, p2) - 1 do\n            table.insert(t, planets[i])\n    \
    \    end\n        return table.unpack(t)\n    end\nend", "\tlocal planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n\tlocal p1, p2 = 0, 0\n\tfor i,v in ipairs(planets) do\n\t\tif\
    \ v == planet1 then p1 = i end\n\t\tif v == planet2 then p2 = i end\n\tend\n\t\
    if p1 == 0 or p2 == 0 then return {} end\n\tif p1 > p2 then p1, p2 = p2, p1 end\n\
    \tlocal res = {}\n\tfor i = p1+1, p2-1 do\n\t\ttable.insert(res, planets[i])\n\
    \tend\n\treturn res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = table.indexOf(planets, planet1), table.indexOf(planets, planet2)\n  if p1\
    \ == -1 or p2 == -1 then return {} end\n  local t = {}\n  for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(t, planets[i])\n  end\n \
    \ return t\nend", "  local planets = {\n    Mercury = 1,\n    Venus = 2,\n   \
    \ Earth = 3,\n    Mars = 4,\n    Jupiter = 5,\n    Saturn = 6,\n    Uranus = 7,\n\
    \    Neptune = 8\n  }\n  local p1 = planets[planet1]\n  local p2 = planets[planet2]\n\
    \  if not p1 or not p2 then return {} end\n  local result = {}\n  if p1 < p2 then\n\
    \    for k, v in pairs(planets) do\n      if v > p1 and v < p2 then\n        table.insert(result,\
    \ k)\n      end\n    end\n  else\n    for k, v in pairs(planets) do\n      if\
    \ v > p2 and v < p1 then\n        table.insert(result, k)\n      end\n    end\n\
    \  end\n  return result\nend", "  local planets = {\n    Mercury = 1,\n    Venus\
    \ = 2,\n    Earth = 3,\n    Mars = 4,\n    Jupiter = 5,\n    Saturn = 6,\n   \
    \ Uranus = 7,\n    Neptune = 8\n  }\n  local p1 = planets[planet1]\n  local p2\
    \ = planets[planet2]\n  if not p1 or not p2 then return {} end\n  local res =\
    \ {}\n  for k, v in pairs(planets) do\n    if (p1 < p2 and v > p1 and v < p2)\
    \ or (p1 > p2 and v < p1 and v > p2) then\n      table.insert(res, k)\n    end\n\
    \  end\n  return res\nend", "    local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1 =\
    \ 0\n    local p2 = 0\n    for i, v in ipairs(planets) do\n        if v == planet1\
    \ then\n            p1 = i\n        end\n        if v == planet2 then\n      \
    \      p2 = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return\
    \ {}\n    end\n    local res = {}\n    if p1 < p2 then\n        for i = p1 + 1,\
    \ p2 - 1 do\n            table.insert(res, planets[i])\n        end\n    else\n\
    \        for i = p2 + 1, p1 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    end\n    return res\nend", "  local planets = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1\
    \ then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then return {} end\n  local res = {}\n  for i = math.min(p1, p2) + 1,\
    \ math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n  end\n  return\
    \ res\nend", "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n\
    \        \"Earth\",\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\"\
    ,\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local function get_index(planet)\n\
    \        for i, v in ipairs(planets) do\n            if v == planet then\n   \
    \             return i\n            end\n        end\n        return nil\n   \
    \ end\n    local function get_planets(p1, p2)\n        local p1_index = get_index(p1)\n\
    \        local p2_index = get_index(p2)\n        if p1_index == nil or p2_index\
    \ == nil then\n            return {}\n        end\n        local start_index =\
    \ math.min(p1_index, p2_index)\n        local end_index = math.max(p1_index, p2_index)\n\
    \        local result = {}\n        for i = start_index + 1, end_index - 1 do\n\
    \            table.insert(result, planets[i])\n        end\n        return result\n\
    \    end\n    return get_planets(planet1, planet2)\nend", "  local planets = {\n\
    \    Mercury = 1,\n    Venus = 2,\n    Earth = 3,\n    Mars = 4,\n    Jupiter\
    \ = 5,\n    Saturn = 6,\n    Uranus = 7,\n    Neptune = 8\n  }\n  local p1 = planets[planet1]\n\
    \  local p2 = planets[planet2]\n  if not p1 or not p2 then return {} end\n  local\
    \ res = {}\n  for k, v in pairs(planets) do\n    if (p1 < p2 and v > p1 and v\
    \ < p2) or (p1 > p2 and v < p1 and v > p2) then\n      table.insert(res, k)\n\
    \    end\n  end\n  table.sort(res, function(a, b) return planets[a] < planets[b]\
    \ end)\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = table.index_of(planets, planet1), table.index_of(planets, planet2)\n  if p1\
    \ == nil or p2 == nil then return {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n\
    \  return table.slice(planets, p1 + 1, p2)\nend", "  local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\
    \  if p1 and p2 then\n    local t = {}\n    for i = p1 + 1, p2 - 1 do\n      table.insert(t,\
    \ planets[i])\n    end\n    return table.unpack(t)\n  end\nend", "  local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local p1 = 0\n  local p2 = 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n\
    \      p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n \
    \ end\n  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = p1 - 1, p2, -1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend", "  local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1\
    \ then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then return {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res\
    \ = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n\
    \  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if not p1 or not p2 then return {}\
    \ end\n  local t = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n\
    \    table.insert(t, planets[i])\n  end\n  return t\nend", "  local planets =\
    \ {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if\
    \ v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n \
    \ if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  if p1 < p2 then\n\
    \    for i = p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n    end\n\
    \  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n  end\n  return res\nend", "    local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n   \
    \ local p1, p2 = 0, 0\n    for i, v in ipairs(planets) do\n        if v == planet1\
    \ then\n            p1 = i\n        end\n        if v == planet2 then\n      \
    \      p2 = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return\
    \ {}\n    end\n    local res = {}\n    if p1 < p2 then\n        for i = p1 + 1,\
    \ p2 - 1 do\n            table.insert(res, planets[i])\n        end\n    else\n\
    \        for i = p2 + 1, p1 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    end\n    return res\nend", "    local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\
    \    if not p1 or not p2 then return {} end\n    local res = {}\n    for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n        table.insert(res, planets[i])\n  \
    \  end\n    return res\nend", "    local planets = {\n        \"Mercury\",\n \
    \       \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    }\n    local\
    \ function get_index(planet)\n        for i, p in ipairs(planets) do\n       \
    \     if p == planet then\n                return i\n            end\n       \
    \ end\n        return nil\n    end\n    local p1_index = get_index(planet1)\n\
    \    local p2_index = get_index(planet2)\n    if p1_index == nil or p2_index ==\
    \ nil then\n        return {}\n    end\n    local start = math.min(p1_index, p2_index)\n\
    \    local stop = math.max(p1_index, p2_index)\n    local result = {}\n    for\
    \ i = start + 1, stop - 1 do\n        table.insert(result, planets[i])\n    end\n\
    \    return result\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = table.indexOf(planets, planet1), table.indexOf(planets, planet2)\n  if p1\
    \ == -1 or p2 == -1 then return {} end\n  local res = {}\n  if p1 < p2 then\n\
    \    for i = p1 + 1, p2 do\n      table.insert(res, planets[i])\n    end\n  else\n\
    \    for i = p1 - 1, p2, -1 do\n      table.insert(res, planets[i])\n    end\n\
    \  end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = table.find(planets, planet1), table.find(planets, planet2)\n  if not p1 or\
    \ not p2 then return {} end\n  local res = {}\n  for i = math.min(p1, p2) + 1,\
    \ math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n  end\n  return\
    \ res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.indexOf(planets,\
    \ planet1), table.indexOf(planets, planet2)\n  if p1 == nil or p2 == nil then\
    \ return {} end\n  local res = {}\n  for i = math.min(p1, p2) + 1, math.max(p1,\
    \ p2) - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend", " \
    \ local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n\
    \  end\n  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then p1, p2 =\
    \ p2, p1 end\n  return table.pack(table.unpack(planets, p1 + 1, p2 - 1))\nend",
  "    local planets = {\n        \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n    }\n    local p1, p2 = table.indexOf(planets,\
    \ planet1), table.indexOf(planets, planet2)\n    if p1 == -1 or p2 == -1 then\
    \ return {} end\n    local result = {}\n    for i = math.min(p1, p2) + 1, math.max(p1,\
    \ p2) - 1 do\n        table.insert(result, planets[i])\n    end\n    return result\n\
    end", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1),\
    \ table.find(planets, planet2)\n  if not p1 or not p2 then return {} end\n  local\
    \ res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend", "  local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1\
    \ then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then return {} end\n  local res = {}\n  if p1 > p2 then\n    for i =\
    \ p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n    end\n  else\n  \
    \  for i = p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n    end\n \
    \ end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n\
    \    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return\
    \ {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1\
    \ + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend",
  "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1 = table.indexof(planets, planet1)\n\
    \  local p2 = table.indexof(planets, planet2)\n  if p1 == nil or p2 == nil then\
    \ return {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  return table.slice(planets,\
    \ p1 + 1, p2)\nend", "  local planets = {'Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'}\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if not p1 or not p2 then return {}\
    \ end\n  local res = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1\
    \ do\n    table.insert(res, planets[i])\n  end\n  return res\nend", "  local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local p1 = table.indexof(planets, planet1)\n  local\
    \ p2 = table.indexof(planets, planet2)\n  if p1 == nil or p2 == nil then return\
    \ {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  return table.slice(planets,\
    \ p1 + 1, p2)\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0,\
    \ 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n \
    \   if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return\
    \ {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1\
    \ + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend",
  "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1),\
    \ table.find(planets, planet2)\n  if not p1 or not p2 then return {} end\n  local\
    \ res = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend", "  local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\
    \  if p1 == nil or p2 == nil then return {} end\n  local res = {}\n  for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n  end\n\
    \  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if p1 and p2 then\n    local t = {}\n\
    \    for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n      table.insert(t,\
    \ planets[i])\n    end\n    return unpack(t)\n  end\nend", "  local planets =\
    \ {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if not p1 or not p2 then return {} end\n  if p1 > p2 then p1, p2\
    \ = p2, p1 end\n  return table.slice(planets, p1 + 1, p2)\nend", "  local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local index1, index2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then\n      index1 = i\n    end\n    if v == planet2\
    \ then\n      index2 = i\n    end\n  end\n  if index1 == 0 or index2 == 0 then\n\
    \    return {}\n  end\n  local result = {}\n  if index1 < index2 then\n    for\
    \ i = index1 + 1, index2 - 1 do\n      table.insert(result, planets[i])\n    end\n\
    \  else\n    for i = index2 + 1, index1 - 1 do\n      table.insert(result, planets[i])\n\
    \    end\n  end\n  return result\nend", "  local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local\
    \ p1, p2 = table.indexOf(planets, planet1), table.indexOf(planets, planet2)\n\
    \  if p1 == -1 or p2 == -1 then return {} end\n  local min, max = math.min(p1,\
    \ p2), math.max(p1, p2)\n  local res = {}\n  for i = min + 1, max - 1 do\n   \
    \ table.insert(res, planets[i])\n  end\n  return res\nend", "    local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local t = {}\n    if p1 < p2\
    \ then\n        for i = p1 + 1, p2 - 1 do\n            table.insert(t, planets[i])\n\
    \        end\n    else\n        for i = p2 + 1, p1 - 1 do\n            table.insert(t,\
    \ planets[i])\n        end\n    end\n    return t\nend", "  local planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if\
    \ v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n \
    \ if p1 == 0 or p2 == 0 then return {} end\n  local t = {}\n  for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(t, planets[i])\n  end\n \
    \ return t\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local i1, i2 = 0, 0\n \
    \ for i = 1, #planets do\n    if planets[i] == planet1 then i1 = i end\n    if\
    \ planets[i] == planet2 then i2 = i end\n  end\n  if i1 == 0 or i2 == 0 then return\
    \ {} end\n  if i1 > i2 then i1, i2 = i2, i1 end\n  local res = {}\n  for i = i1\
    \ + 1, i2 - 1 do\n    res[#res + 1] = planets[i]\n  end\n  return res\nend", " \
    \ local planets = {\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"\
    Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n\
    \  }\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1\
    \ then\n      p1 = i\n    end\n    if v == planet2 then\n      p2 = i\n    end\n\
    \  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n  end\n  local res = {}\n\
    \  for i = math.min(p1, p2), math.max(p1, p2) do\n    if i ~= p1 and i ~= p2 then\n\
    \      table.insert(res, planets[i])\n    end\n  end\n  return res\nend", "  local\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.indexOf(planets, planet1),\
    \ table.indexOf(planets, planet2)\n  if p1 == -1 or p2 == -1 then return {} end\n\
    \  local start, finish = math.min(p1, p2), math.max(p1, p2)\n  local result =\
    \ {}\n  for i = start + 1, finish do\n    table.insert(result, planets[i])\n \
    \ end\n  return result\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = table.find(planets, planet1), table.find(planets, planet2)\n  if not p1 or\
    \ not p2 then return {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  return table.slice(planets,\
    \ p1 + 1, p2)\nend", "  local planets = {\n    Mercury = 1,\n    Venus = 2,\n\
    \    Earth = 3,\n    Mars = 4,\n    Jupiter = 5,\n    Saturn = 6,\n    Uranus\
    \ = 7,\n    Neptune = 8\n  }\n  local p1 = planets[planet1]\n  local p2 = planets[planet2]\n\
    \  if p1 == nil or p2 == nil then\n    return {}\n  end\n  local result = {}\n\
    \  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n      for k, v in pairs(planets)\
    \ do\n        if v == i then\n          table.insert(result, k)\n        end\n\
    \      end\n    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      for k, v in\
    \ pairs(planets) do\n        if v == i then\n          table.insert(result, k)\n\
    \        end\n      end\n    end\n  end\n  return result\nend", "  local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local i1, i2 = 0, 0\n  for i, planet in ipairs(planets)\
    \ do\n    if planet == planet1 then i1 = i end\n    if planet == planet2 then\
    \ i2 = i end\n  end\n  if i1 == 0 or i2 == 0 then return {} end\n  local res =\
    \ {}\n  for i = math.min(i1, i2) + 1, math.max(i1, i2) - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend", "  local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = table.indexof(planets, planet1), table.indexof(planets, planet2)\n\
    \  if p1 and p2 then\n    local t = {}\n    for i = math.min(p1, p2) + 1, math.max(p1,\
    \ p2) - 1 do\n      table.insert(t, planets[i])\n    end\n    return table.unpack(t)\n\
    \  end\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n \
    \ for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n    if\
    \ v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return {}\
    \ end\n  if p1 > p2 then\n    p1, p2 = p2, p1\n  end\n  local res = {}\n  for\
    \ i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\n\
    end", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i = 1, #planets\
    \ do\n    if planets[i] == planet1 then p1 = i end\n    if planets[i] == planet2\
    \ then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return {} end\n  local\
    \ res = {}\n  for i = p1 + 1, p2 - 1 do\n    res[#res + 1] = planets[i]\n  end\n\
    \  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if not p1 or not p2 then return {}\
    \ end\n  local t = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n\
    \    table.insert(t, planets[i])\n  end\n  return t\nend", "  local planets =\
    \ {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n  local p1, p2\n  for i, v in ipairs(planets) do\n    if v ==\
    \ planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n  if not\
    \ p1 or not p2 then return {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local\
    \ res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n \
    \ end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n\
    \    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return\
    \ {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1\
    \ + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend",
  "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1),\
    \ table.find(planets, planet2)\n  if not p1 or not p2 then return {} end\n  local\
    \ res = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend", "  local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1\
    \ then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then return {} end\n  local res = {}\n  if p1 < p2 then\n    for i =\
    \ p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n    end\n  else\n  \
    \  for i = p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n    end\n \
    \ end\n  return res\nend", "    local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2\
    \ = table.indexOf(planets, planet1), table.indexOf(planets, planet2)\n    if p1\
    \ == -1 or p2 == -1 then return {} end\n    local res = {}\n    for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n        table.insert(res, planets[i])\n  \
    \  end\n    return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n\
    \    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return\
    \ {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1\
    \ + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend",
  "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1),\
    \ table.find(planets, planet2)\n  if p1 and p2 then\n    local res = {}\n    for\
    \ i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n    return unpack(res)\n  end\nend", "  local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\
    \  if not p1 or not p2 then return {} end\n  local res = {}\n  for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n  end\n\
    \  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\n  for\
    \ i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n    if v ==\
    \ planet2 then p2 = i end\n  end\n  if not p1 or not p2 then return {} end\n \
    \ local t = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(t,\
    \ planets[i])\n    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(t,\
    \ planets[i])\n    end\n  end\n  return t\nend", "  local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1\
    \ then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then return {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res\
    \ = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n\
    \  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if not p1 or not p2 then return {}\
    \ end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  return table.slice(planets, p1\
    \ + 1, p2)\nend", "  local planets = {\n    Mercury = 1,\n    Venus = 2,\n   \
    \ Earth = 3,\n    Mars = 4,\n    Jupiter = 5,\n    Saturn = 6,\n    Uranus = 7,\n\
    \    Neptune = 8\n  }\n  local p1 = planets[planet1]\n  local p2 = planets[planet2]\n\
    \  if not p1 or not p2 then return {} end\n  local t = {}\n  for k, v in pairs(planets)\
    \ do\n    if (p1 < p2 and v > p1 and v < p2) or (p1 > p2 and v < p1 and v > p2)\
    \ then\n      table.insert(t, k)\n    end\n  end\n  table.sort(t, function(a,\
    \ b)\n    return planets[a] < planets[b]\n  end)\n  return t\nend", "  local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local p1, p2\n  for i, v in ipairs(planets) do\n   \
    \ if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if not p1 or not p2 then return {} end\n  local res = {}\n  for i = p1 + 1,\
    \ p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend", " \
    \ local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.indexOf(planets, planet1),\
    \ table.indexOf(planets, planet2)\n  if p1 == -1 or p2 == -1 then return {} end\n\
    \  local start, finish = math.min(p1, p2), math.max(p1, p2)\n  local res = {}\n\
    \  for i = start + 1, finish do\n    table.insert(res, planets[i])\n  end\n  return\
    \ res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n \
    \ for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n    if\
    \ v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return {}\
    \ end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1 +\
    \ 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend",
  "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1),\
    \ table.find(planets, planet2)\n  if p1 and p2 then\n    local res = {}\n    for\
    \ i = p1, p2 do\n      table.insert(res, planets[i])\n    end\n    return res\n\
    \  end\n  return {}\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = table.indexOf(planets, planet1), table.indexOf(planets, planet2)\n  if p1\
    \ == nil or p2 == nil then return {} end\n  local t = {}\n  local min, max = math.min(p1,\
    \ p2), math.max(p1, p2)\n  for i = min + 1, max - 1 do\n    table.insert(t, planets[i])\n\
    \  end\n  return t\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = table.find(planets, planet1), table.find(planets, planet2)\n  if not p1 or\
    \ not p2 then return {} end\n  local res = {}\n  for i = math.min(p1, p2) + 1,\
    \ math.max(p1, p2) - 1 do\n    table.insert(res, planets[i])\n  end\n  return\
    \ res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n \
    \ for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n    if\
    \ v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return {}\
    \ end\n  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n  \
    \    table.insert(res, planets[i])\n    end\n  else\n    for i = p2 + 1, p1 -\
    \ 1 do\n      table.insert(res, planets[i])\n    end\n  end\n  return res\nend",
  "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n\
    \  end\n  if p1 == 0 or p2 == 0 then return {} end\n  local t = {}\n  for i =\
    \ p1, p2 do\n    table.insert(t, planets[i])\n  end\n  return t\nend", "  local\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.indexof(planets, planet1),\
    \ table.indexof(planets, planet2)\n  if p1 == nil or p2 == nil then return {}\
    \ end\n  local t = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n\
    \    table.insert(t, planets[i])\n  end\n  return t\nend", "  local planets =\
    \ {\n    Mercury = 1,\n    Venus = 2,\n    Earth = 3,\n    Mars = 4,\n    Jupiter\
    \ = 5,\n    Saturn = 6,\n    Uranus = 7,\n    Neptune = 8\n  }\n  local p1 = planets[planet1]\n\
    \  local p2 = planets[planet2]\n  if not p1 or not p2 then return {} end\n  local\
    \ result = {}\n  for k, v in pairs(planets) do\n    if (p1 < p2 and p1 < v and\
    \ v < p2) or (p1 > p2 and p1 > v and v > p2) then\n      table.insert(result,\
    \ k)\n    end\n  end\n  return result\nend", "  local planets = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local first, last = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1\
    \ then first = i end\n    if v == planet2 then last = i end\n  end\n  if first\
    \ == 0 or last == 0 then return {} end\n  if first > last then first, last = last,\
    \ first end\n  local res = {}\n  for i = first + 1, last - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend", "    local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n    local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\
    \    if not p1 or not p2 then return {} end\n    local res = {}\n    for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n        table.insert(res, planets[i])\n  \
    \  end\n    return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = table.find(planets, planet1), table.find(planets, planet2)\n  if not p1 or\
    \ not p2 then return {} end\n  local t = {}\n  for i = math.min(p1, p2) + 1, math.max(p1,\
    \ p2) - 1 do\n    table.insert(t, planets[i])\n  end\n  return t\nend", "  local\
    \ planets = {\n    Mercury = 1,\n    Venus = 2,\n    Earth = 3,\n    Mars = 4,\n\
    \    Jupiter = 5,\n    Saturn = 6,\n    Uranus = 7,\n    Neptune = 8\n  }\n  local\
    \ p1 = planets[planet1]\n  local p2 = planets[planet2]\n  if p1 == nil or p2 ==\
    \ nil then\n    return {}\n  end\n  local result = {}\n  for k, v in pairs(planets)\
    \ do\n    if p1 < p2 then\n      if v > p1 and v < p2 then\n        table.insert(result,\
    \ k)\n      end\n    else\n      if v < p1 and v > p2 then\n        table.insert(result,\
    \ k)\n      end\n    end\n  end\n  return result\nend", "  local planets = {\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if\
    \ v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n \
    \ if p1 == 0 or p2 == 0 then return {} end\n  local t = {}\n  for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(t, planets[i])\n  end\n \
    \ return t\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local i1, i2 = 0, 0\n \
    \ for i, v in ipairs(planets) do\n    if v == planet1 then i1 = i end\n    if\
    \ v == planet2 then i2 = i end\n  end\n  if i1 == 0 or i2 == 0 then return {}\
    \ end\n  if i1 > i2 then i1, i2 = i2, i1 end\n  local res = {}\n  for i = i1 +\
    \ 1, i2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend",
  "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n\
    \  end\n  if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then p1, p2 =\
    \ p2, p1 end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend", "  local planets = {\n    \"Mercury\"\
    ,\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\"\
    ,\n    \"Uranus\",\n    \"Neptune\"\n  }\n  local p1, p2 = 0, 0\n  for i, v in\
    \ ipairs(planets) do\n    if v == planet1 then\n      p1 = i\n    end\n    if\
    \ v == planet2 then\n      p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n\
    \    return {}\n  end\n  local t = {}\n  if p1 < p2 then\n    for i = p1 + 1,\
    \ p2 - 1 do\n      table.insert(t, planets[i])\n    end\n  else\n    for i = p2\
    \ + 1, p1 - 1 do\n      table.insert(t, planets[i])\n    end\n  end\n  return\
    \ t\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if not p1 or not p2 then return {}\
    \ end\n  local result = {}\n  for i = math.min(p1, p2) + 1, math.max(p1, p2) -\
    \ 1 do\n    table.insert(result, planets[i])\n  end\n  return result\nend", " \
    \   local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n    local pos1, pos2 = 0, 0\n    for i,\
    \ v in ipairs(planets) do\n        if v == planet1 then\n            pos1 = i\n\
    \        end\n        if v == planet2 then\n            pos2 = i\n        end\n\
    \    end\n    if pos1 == 0 or pos2 == 0 then\n        return {}\n    end\n   \
    \ local res = {}\n    if pos1 < pos2 then\n        for i = pos1 + 1, pos2 - 1\
    \ do\n            table.insert(res, planets[i])\n        end\n    else\n     \
    \   for i = pos2 + 1, pos1 - 1 do\n            table.insert(res, planets[i])\n\
    \        end\n    end\n    return res\nend", "  local planets = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1\
    \ then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then return {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res\
    \ = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n\
    \  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets,\
    \ planet1), table.find(planets, planet2)\n  if p1 and p2 then\n    local t = {}\n\
    \    for i = p1 + 1, p2 - 1 do\n      table.insert(t, planets[i])\n    end\n \
    \   return table.unpack(t)\n  end\nend", "  local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local\
    \ p1, p2 = table.indexOf(planets, planet1), table.indexOf(planets, planet2)\n\
    \  if p1 == -1 or p2 == -1 then return {} end\n  if p1 > p2 then p1, p2 = p2,\
    \ p1 end\n  return table.slice(planets, p1 + 1, p2)\nend", "  local planets =\
    \ {\n    Mercury = 1,\n    Venus = 2,\n    Earth = 3,\n    Mars = 4,\n    Jupiter\
    \ = 5,\n    Saturn = 6,\n    Uranus = 7,\n    Neptune = 8\n  }\n  local p1 = planets[planet1]\n\
    \  local p2 = planets[planet2]\n  if p1 == nil or p2 == nil then\n    return {}\n\
    \  end\n  local res = {}\n  for k, v in pairs(planets) do\n    if v > p1 and v\
    \ < p2 then\n      table.insert(res, k)\n    end\n  end\n  return res\nend", " \
    \ local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local i1, i2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then i1 = i end\n    if v == planet2 then i2 = i end\n\
    \  end\n  if i1 == 0 or i2 == 0 then return {} end\n  if i1 > i2 then i1, i2 =\
    \ i2, i1 end\n  return table.move(planets, i1 + 1, i2 - 1, 1, {})\nend", "  local\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1), table.find(planets,\
    \ planet2)\n  if not p1 or not p2 then return {} end\n  local result = {}\n  for\
    \ i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(result,\
    \ planets[i])\n  end\n  return result\nend", "  local planets = {\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = table.indexof(planets, planet1), table.indexof(planets, planet2)\n\
    \  if p1 == nil or p2 == nil then return {} end\n  if p1 > p2 then p1, p2 = p2,\
    \ p1 end\n  return table.slice(planets, p1 + 1, p2)\nend", "  local planets =\
    \ {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if\
    \ v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n \
    \ if p1 == 0 or p2 == 0 then return {} end\n  if p1 > p2 then\n    p1, p2 = p2,\
    \ p1\n  end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend", "  local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local planet1_index, planet2_index = 0, 0\n  for i, planet in ipairs(planets)\
    \ do\n    if planet == planet1 then planet1_index = i end\n    if planet == planet2\
    \ then planet2_index = i end\n  end\n  if planet1_index == 0 or planet2_index\
    \ == 0 then return {} end\n  local result = {}\n  for i = planet1_index + 1, planet2_index\
    \ - 1 do\n    table.insert(result, planets[i])\n  end\n  return result\nend",
  "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local i1, i2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then i1 = i end\n    if v == planet2 then i2 = i end\n\
    \  end\n  if i1 == 0 or i2 == 0 then return {} end\n  local res = {}\n  for i\
    \ = math.min(i1, i2) + 1, math.max(i1, i2) - 1 do\n    table.insert(res, planets[i])\n\
    \  end\n  return res\nend", "  local planets = {\n    Mercury = 1,\n    Venus\
    \ = 2,\n    Earth = 3,\n    Mars = 4,\n    Jupiter = 5,\n    Saturn = 6,\n   \
    \ Uranus = 7,\n    Neptune = 8\n  }\n  local p1 = planets[planet1]\n  local p2\
    \ = planets[planet2]\n  if not p1 or not p2 then return {} end\n  local res =\
    \ {}\n  for k, v in pairs(planets) do\n    if p1 < p2 then\n      if v > p1 and\
    \ v < p2 then table.insert(res, k) end\n    else\n      if v < p1 and v > p2 then\
    \ table.insert(res, k) end\n    end\n  end\n  return res\nend", "    local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n    local p1, p2 = 0, 0\n    for i, v in ipairs(planets)\
    \ do\n        if v == planet1 then\n            p1 = i\n        end\n        if\
    \ v == planet2 then\n            p2 = i\n        end\n    end\n    if p1 == 0\
    \ or p2 == 0 then\n        return {}\n    end\n    local t = {}\n    for i = p1\
    \ + 1, p2 - 1 do\n        table.insert(t, planets[i])\n    end\n    return t\n\
    end", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1),\
    \ table.find(planets, planet2)\n  if p1 and p2 then\n    local t = {}\n    for\
    \ i = p1, p2 do\n      table.insert(t, planets[i])\n    end\n    return table.unpack(t)\n\
    \  end\n  return ()\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n\
    \    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return\
    \ {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1\
    \ + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend",
  "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n\
    \  end\n  if p1 == 0 or p2 == 0 then return {} end\n  local t = {}\n  if p1 <\
    \ p2 then\n    for i = p1 + 1, p2 - 1 do\n      table.insert(t, planets[i])\n\
    \    end\n  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(t, planets[i])\n\
    \    end\n  end\n  return t\nend", "  local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local\
    \ p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then p1\
    \ = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0\
    \ then return {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res = {}\n\
    \  for i = p1 + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return\
    \ res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n \
    \ for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n    if\
    \ v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return {}\
    \ end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1 +\
    \ 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend",
  "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = table.find(planets, planet1),\
    \ table.find(planets, planet2)\n  if p1 and p2 then\n    local t = {}\n    for\
    \ i = math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n      table.insert(t, planets[i])\n\
    \    end\n    return table.unpack(t)\n  end\nend", "\tlocal planets = {\n\t\t\"\
    Mercury\",\n\t\t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\
    \t\"Saturn\",\n\t\t\"Uranus\",\n\t\t\"Neptune\"\n\t}\n\tlocal p1, p2 = 0, 0\n\t\
    for i, v in ipairs(planets) do\n\t\tif v == planet1 then\n\t\t\tp1 = i\n\t\tend\n\
    \t\tif v == planet2 then\n\t\t\tp2 = i\n\t\tend\n\tend\n\tif p1 == 0 or p2 ==\
    \ 0 then\n\t\treturn {}\n\tend\n\tlocal t = {}\n\tif p1 < p2 then\n\t\tfor i =\
    \ p1 + 1, p2 - 1 do\n\t\t\ttable.insert(t, planets[i])\n\t\tend\n\telse\n\t\t\
    for i = p2 + 1, p1 - 1 do\n\t\t\ttable.insert(t, planets[i])\n\t\tend\n\tend\n\
    \treturn t\nend", "  local planets = {\n    Mercury = 1, Venus = 2, Earth = 3,\
    \ Mars = 4, Jupiter = 5, Saturn = 6, Uranus = 7, Neptune = 8\n  }\n  local p1\
    \ = planets[planet1]\n  local p2 = planets[planet2]\n  if not p1 or not p2 then\
    \ return {} end\n  local result = {}\n  for k, v in pairs(planets) do\n    if\
    \ (p1 < p2 and v > p1 and v < p2) or (p1 > p2 and v < p1 and v > p2) then\n  \
    \    table.insert(result, k)\n    end\n  end\n  table.sort(result, function(a,\
    \ b) return planets[a] < planets[b] end)\n  return result\nend", "  local planets\
    \ = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if p1 == 0 or p2 == 0 then return {} end\n  local res = {}\n  if p1 < p2 then\n\
    \    for i = p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n    end\n\
    \  else\n    for i = p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n\
    \    end\n  end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local\
    \ p1, p2 = table.indexof(planets, planet1), table.indexof(planets, planet2)\n\
    \  if p1 and p2 then\n    if p1 > p2 then\n      p1, p2 = p2, p1\n    end\n  \
    \  return table.sub(planets, p1 + 1, p2 - 1)\n  end\nend", "  local planets =\
    \ {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"}\n  local p1 = 0\n  local p2 = 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then\n      p1 = i\n    end\n    if v == planet2 then\n\
    \      p2 = i\n    end\n  end\n  if p1 == 0 or p2 == 0 then\n    return {}\n \
    \ end\n  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 do\n      table.insert(res,\
    \ planets[i])\n    end\n  else\n    for i = p1 - 1, p2, -1 do\n      table.insert(res,\
    \ planets[i])\n    end\n  end\n  return res\nend", "  local planets = {\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\
    \  if p1 == nil or p2 == nil then return {} end\n  local t = {}\n  for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(t, planets[i])\n  end\n \
    \ return t\nend", "    local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2 =\
    \ table.find(planets, planet1), table.find(planets, planet2)\n    if not p1 or\
    \ not p2 then return {} end\n    local res = {}\n    for i = math.min(p1, p2)\
    \ + 1, math.max(p1, p2) - 1 do\n        table.insert(res, planets[i])\n    end\n\
    \    return res\nend", "  local planets = {\n    Mercury = 1,\n    Venus = 2,\n\
    \    Earth = 3,\n    Mars = 4,\n    Jupiter = 5,\n    Saturn = 6,\n    Uranus\
    \ = 7,\n    Neptune = 8\n  }\n  local p1 = planets[planet1]\n  local p2 = planets[planet2]\n\
    \  if not p1 or not p2 then return {} end\n  local res = {}\n  for k, v in pairs(planets)\
    \ do\n    if v > p1 and v < p2 then\n      table.insert(res, k)\n    end\n  end\n\
    \  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0,\
    \ 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n \
    \   if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return\
    \ {} end\n  local res = {}\n  if p1 < p2 then\n    for i = p1 + 1, p2 - 1 do\n\
    \      table.insert(res, planets[i])\n    end\n  else\n    for i = p2 + 1, p1\
    \ - 1 do\n      table.insert(res, planets[i])\n    end\n  end\n  return res\n\
    end", "\tlocal planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"}\n\tlocal p1, p2 = table.indexof(planets,\
    \ planet1), table.indexof(planets, planet2)\n\tif p1 == nil or p2 == nil then\
    \ return {} end\n\tif p1 > p2 then p1, p2 = p2, p1 end\n\treturn table.slice(planets,\
    \ p1 + 1, p2)\nend", "    local planets = {\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2\
    \ = 0, 0\n    for i, v in ipairs(planets) do\n        if v == planet1 then\n \
    \           p1 = i\n        end\n        if v == planet2 then\n            p2\
    \ = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return {}\n\
    \    end\n    local t = {}\n    if p1 < p2 then\n        for i = p1 + 1, p2 -\
    \ 1 do\n            table.insert(t, planets[i])\n        end\n    else\n     \
    \   for i = p2 + 1, p1 - 1 do\n            table.insert(t, planets[i])\n     \
    \   end\n    end\n    return t\nend", "    local planets = {\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n   \
    \ local p1, p2 = 0, 0\n    for i, v in ipairs(planets) do\n        if v == planet1\
    \ then\n            p1 = i\n        end\n        if v == planet2 then\n      \
    \      p2 = i\n        end\n    end\n    if p1 == 0 or p2 == 0 then\n        return\
    \ {}\n    end\n    local t = {}\n    if p1 < p2 then\n        for i = p1 + 1,\
    \ p2 - 1 do\n            table.insert(t, planets[i])\n        end\n    else\n\
    \        for i = p2 + 1, p1 - 1 do\n            table.insert(t, planets[i])\n\
    \        end\n    end\n    return t\nend", "  local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1\
    \ then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or\
    \ p2 == 0 then return {} end\n  local res = {}\n  if p1 < p2 then\n    for i =\
    \ p1 + 1, p2 - 1 do\n      table.insert(res, planets[i])\n    end\n  else\n  \
    \  for i = p2 + 1, p1 - 1 do\n      table.insert(res, planets[i])\n    end\n \
    \ end\n  return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = 0, 0\n  for i, v in ipairs(planets) do\n    if v == planet1 then p1 = i end\n\
    \    if v == planet2 then p2 = i end\n  end\n  if p1 == 0 or p2 == 0 then return\
    \ {} end\n  if p1 > p2 then p1, p2 = p2, p1 end\n  local res = {}\n  for i = p1\
    \ + 1, p2 - 1 do\n    table.insert(res, planets[i])\n  end\n  return res\nend",
  "    local planets = {\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\"\
    ,\n        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\"\n    }\n    local start, finish = 0, 0\n    for i, planet\
    \ in ipairs(planets) do\n        if planet == planet1 then\n            start\
    \ = i\n        end\n        if planet == planet2 then\n            finish = i\n\
    \        end\n    end\n    if start == 0 or finish == 0 then\n        return {}\n\
    \    end\n    if start > finish then\n        start, finish = finish, start\n\
    \    end\n    local result = {}\n    for i = start + 1, finish - 1 do\n      \
    \  table.insert(result, planets[i])\n    end\n    return result\nend", "  local\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n  local p1, p2\n  for i, v in ipairs(planets) do\n\
    \    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n  end\n\
    \  if not p1 or not p2 then return {} end\n  if p1 > p2 then\n    p1, p2 = p2,\
    \ p1\n  end\n  local res = {}\n  for i = p1 + 1, p2 - 1 do\n    table.insert(res,\
    \ planets[i])\n  end\n  return res\nend", "  local planets = {\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    }\n  local p1, p2 = table.find(planets, planet1), table.find(planets, planet2)\n\
    \  if not p1 or not p2 then return {} end\n  local result = {}\n  for i = math.min(p1,\
    \ p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(result, planets[i])\n  end\n\
    \  return result\nend", "  local planets = {\n    Mercury = 1,\n    Venus = 2,\n\
    \    Earth = 3,\n    Mars = 4,\n    Jupiter = 5,\n    Saturn = 6,\n    Uranus\
    \ = 7,\n    Neptune = 8\n  }\n  local p1 = planets[planet1]\n  local p2 = planets[planet2]\n\
    \  if not p1 or not p2 then return {} end\n  local res = {}\n  for k, v in pairs(planets)\
    \ do\n    if (p1 < p2 and v > p1 and v < p2) or (p1 > p2 and v < p1 and v > p2)\
    \ then\n      table.insert(res, k)\n    end\n  end\n  return res\nend", "  local\
    \ planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"}\n  local p1, p2 = 0, 0\n  for i, v in ipairs(planets)\
    \ do\n    if v == planet1 then p1 = i end\n    if v == planet2 then p2 = i end\n\
    \  end\n  if p1 == 0 or p2 == 0 then return {} end\n  local t = {}\n  for i =\
    \ math.min(p1, p2) + 1, math.max(p1, p2) - 1 do\n    table.insert(t, planets[i])\n\
    \  end\n  return t\nend", "    local planets = {\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    local p1, p2\
    \ = table.find(planets, planet1), table.find(planets, planet2)\n    if not p1\
    \ or not p2 then return {} end\n    local res = {}\n    for i = math.min(p1, p2)\
    \ + 1, math.max(p1, p2) - 1 do\n        table.insert(res, planets[i])\n    end\n\
    \    return res\nend", "  local planets = {\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n  local p1, p2\
    \ = table.find(planets, planet1), table.find(planets, planet2)\n  if p1 and p2\
    \ then\n    local res = {}\n    for i = p1, p2 do\n      table.insert(res, planets[i])\n\
    \    end\n    return res\n  end\n  return {}\nend", "  local planets = {\n   \
    \ Mercury = 1,\n    Venus = 2,\n    Earth = 3,\n    Mars = 4,\n    Jupiter = 5,\n\
    \    Saturn = 6,\n    Uranus = 7,\n    Neptune = 8\n  }\n  local p1, p2 = planets[planet1],\
    \ planets[planet2]\n  if not p1 or not p2 then return {} end\n  local res = {}\n\
    \  for k, v in pairs(planets) do\n    if p1 < p2 then\n      if v > p1 and v <\
    \ p2 then\n        table.insert(res, k)\n      end\n    else\n      if v < p1\
    \ and v > p2 then\n        table.insert(res, k)\n      end\n    end\n  end\n \
    \ return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
