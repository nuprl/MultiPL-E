name: HumanEval_90_next_smallest
language: lua
prompt: "-- You are given a list of integers.\n-- Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n-- Return None if there is\
  \ no such element.\n-- next_smallest([1, 2, 3, 4, 5]) == 2\n-- next_smallest([5,\
  \ 1, 4, 3, 2]) == 2\n-- next_smallest([]) == None\n-- next_smallest([1, 1]) == None\n\
  local function next_smallest(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
  \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
  \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
  \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local min = math.huge\n    local min2 = math.huge\n    for _, v\
    \ in ipairs(lst) do\n        if v < min then\n            min2 = min\n       \
    \     min = v\n        elseif v < min2 then\n            min2 = v\n        end\n\
    \    end\n    return min2 == math.huge and nil or min2\nend", "  local min, min2\n\
    \  for _, v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n\
    \      min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n\
    \  end\n  return min2\nend", "    local min, min2 = math.huge, math.huge\n   \
    \ for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2 == math.huge and nil or min2\nend", "  local\
    \ min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min\
    \ then\n      min2 = min\n      min = v\n    elseif v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local\
    \ min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min\
    \ then\n      min2 = min\n      min = v\n    elseif v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local\
    \ min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n  \
    \    min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2\nend", "  if #lst < 2 then return nil end\n\
    \  local min, min2 = lst[1], lst[2]\n  for i = 3, #lst do\n    if lst[i] < min\
    \ then\n      min2 = min\n      min = lst[i]\n    elseif lst[i] < min2 then\n\
    \      min2 = lst[i]\n    end\n  end\n  return min2\nend", "    local min, min2\
    \ = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n\
    \            min2 = min\n            min = v\n        elseif v < min2 then\n \
    \           min2 = v\n        end\n    end\n    return min2 == math.huge and nil\
    \ or min2\nend", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2\
    \ then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or\
    \ min2\nend", "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min\
    \ or v < min then\n      min2 = min\n      min = v\n    elseif not min2 or v <\
    \ min2 then\n      min2 = v\n    end\n  end\n  return min2\nend", "    if #lst\
    \ < 2 then\n        return nil\n    end\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v ~= min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    end\n    return\
    \ min2\nend", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2\
    \ then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or\
    \ min2\nend", "    local min = math.min(unpack(lst))\n    local min2 = min\n \
    \   for _, v in ipairs(lst) do\n        if v > min and v < min2 then\n       \
    \     min2 = v\n        end\n    end\n    return min2 == min and nil or min2\n\
    end", "  local min = math.min(unpack(lst))\n  local min2 = min\n  for _, v in\
    \ ipairs(lst) do\n    if v > min and v < min2 then\n      min2 = v\n    end\n\
    \  end\n  if min2 == min then\n    return nil\n  end\n  return min2\nend", " \
    \ local min = math.min(unpack(lst))\n  local min2 = math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v > min and v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "    local min = math.min(unpack(lst))\n\
    \    local min2 = min\n    for _, v in ipairs(lst) do\n        if v > min and\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    return min2 ==\
    \ min and nil or min2\nend", "  local min, second_min = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      second_min = min\n \
    \     min = v\n    elseif v < second_min then\n      second_min = v\n    end\n\
    \  end\n  return second_min == math.huge and nil or second_min\nend", "    if\
    \ #lst < 2 then\n        return nil\n    end\n    local min = math.min(unpack(lst))\n\
    \    local min2 = min\n    for _, v in ipairs(lst) do\n        if v > min and\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    if min2 == min\
    \ then\n        return nil\n    end\n    return min2\nend", "    local min, min2\
    \ = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n\
    \            min2 = min\n            min = v\n        elseif v < min2 then\n \
    \           min2 = v\n        end\n    end\n    return min2 == math.huge and nil\
    \ or min2\nend", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2\
    \ then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or\
    \ min2\nend", "  local smallest = math.huge\n  local second_smallest = math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < smallest then\n      second_smallest\
    \ = smallest\n      smallest = v\n    elseif v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest == math.huge and nil or second_smallest\n\
    end", "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v <\
    \ min then\n      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  if #lst < 2 then return nil end\n  local\
    \ min = math.min(unpack(lst))\n  local min2 = min\n  for _, v in ipairs(lst) do\n\
    \    if v > min and v < min2 then min2 = v end\n  end\n  return min2 == min and\
    \ nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst) do\n    if\
    \ not min or v < min then\n      min2 = min\n      min = v\n    elseif not min2\
    \ or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend", "  local\
    \ min = math.huge\n  local next_min = math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      next_min = min\n      min = v\n    elseif v < next_min\
    \ then\n      next_min = v\n    end\n  end\n  return next_min ~= math.huge and\
    \ next_min or nil\nend", "    local min, min2\n    for _, v in ipairs(lst) do\n\
    \        if not min or v < min then\n            min2 = min\n            min =\
    \ v\n        elseif not min2 or v < min2 then\n            min2 = v\n        end\n\
    \    end\n    return min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "  local min = math.min(unpack(lst))\n  local min_idx\n  for i, v in ipairs(lst)\
    \ do\n    if v == min then\n      min_idx = i\n      break\n    end\n  end\n \
    \ table.remove(lst, min_idx)\n  return math.min(unpack(lst))\nend", "  local min,\
    \ min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n      min2\
    \ = min\n      min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n\
    \    end\n  end\n  return min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "    local min, min2\n    for _, v in ipairs(lst)\
    \ do\n        if not min or v < min then\n            min2 = min\n           \
    \ min = v\n        elseif not min2 or v < min2 then\n            min2 = v\n  \
    \      end\n    end\n    return min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, second_min = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      second_min = min\n \
    \     min = v\n    elseif v < second_min then\n      second_min = v\n    end\n\
    \  end\n  return second_min == math.huge and nil or second_min\nend", "  local\
    \ min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min\
    \ then\n      min2 = min\n      min = v\n    elseif v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local\
    \ min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n  \
    \    min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n  \
    \      if v < min then\n            min2 = min\n            min = v\n        elseif\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    return min2 ==\
    \ math.huge and nil or min2\nend", "    local min, min2 = math.huge, math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2 == math.huge and nil or min2\nend", "  local\
    \ min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n  \
    \    min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2\nend", "  local min = math.huge\n  local\
    \ min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2\
    \ = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2 == math.huge and nil or min2\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min = math.min(unpack(lst))\n\
    \  local min2 = min\n  for _, v in ipairs(lst) do\n    if v > min and v < min2\
    \ then\n      min2 = v\n    end\n  end\n  return min2 == min and nil or min2\n\
    end", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\n\
    end", "  if #lst < 2 then return nil end\n  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min = math.min(unpack(lst))\n \
    \ local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v > min and v <\
    \ min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and nil\
    \ or min2\nend", "  local min, min2\n  for _, v in ipairs(lst) do\n    if not\
    \ min or v < min then\n      min2 = min\n      min = v\n    elseif not min2 or\
    \ v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend", "    local\
    \ min, min2\n    for _, v in ipairs(lst) do\n        if not min or v < min then\n\
    \            min2 = min\n            min = v\n        elseif not min2 or v < min2\
    \ then\n            min2 = v\n        end\n    end\n    return min2\nend", " \
    \ local min = math.huge\n  local min2 = math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\n\
    end", "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v <\
    \ min then\n      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n\
    \      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n     \
    \ min2 = v\n    end\n  end\n  return min2\nend", "    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end", "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2 == math.huge and nil or min2\nend", "  local min, min2\n  for _,\
    \ v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n    \
    \  min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2\nend", "  local min, min2 = math.huge, math.huge\n  for _, v in\
    \ ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n    elseif\
    \ v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and\
    \ nil or min2\nend", "  local min, min2 = math.huge, math.huge\n  for _, v in\
    \ ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n    elseif\
    \ v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and\
    \ nil or min2\nend", "  local min, min2 = math.huge, math.huge\n  for _, v in\
    \ ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n    elseif\
    \ v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and\
    \ nil or min2\nend", "  local min = math.huge\n  local min2 = math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n\
    \    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge\
    \ and nil or min2\nend", "    if #lst < 2 then\n        return nil\n    end\n\
    \    local min, min2 = lst[1], lst[2]\n    if min > min2 then\n        min, min2\
    \ = min2, min\n    end\n    for i = 3, #lst do\n        local n = lst[i]\n   \
    \     if n < min then\n            min2 = min\n            min = n\n        elseif\
    \ n < min2 then\n            min2 = n\n        end\n    end\n    return min2\n\
    end", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\n\
    end", "  local min = math.huge\n  local min2 = math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2\
    \ then\n      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or\
    \ min2\nend", "  local min, second_min\n  for _, v in ipairs(lst) do\n    if not\
    \ min or v < min then\n      second_min = min\n      min = v\n    elseif not second_min\
    \ or v < second_min then\n      second_min = v\n    end\n  end\n  return second_min\n\
    end", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\n\
    end", "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v <\
    \ min then\n      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2\nend", "  local min = math.huge\n\
    \  local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      min2 = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local min\
    \ = math.huge\n  local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if\
    \ v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n  \
    \    min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\nend",
  "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n\
    \      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n     \
    \ min2 = v\n    end\n  end\n  return min2\nend", "    if #lst < 2 then\n     \
    \   return nil\n    end\n    local min = math.min(unpack(lst))\n    local min2\
    \ = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n        if v ~= min\
    \ and v < min2 then\n            min2 = v\n        end\n    end\n    if min2 ==\
    \ math.max(unpack(lst)) then\n        return nil\n    end\n    return min2\nend",
  "  local smallest, second_smallest\n  for _, v in ipairs(lst) do\n    if not smallest\
    \ or v < smallest then\n      second_smallest = smallest\n      smallest = v\n\
    \    elseif not second_smallest or v < second_smallest then\n      second_smallest\
    \ = v\n    end\n  end\n  return second_smallest\nend", "    local min, min2 =\
    \ math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n\
    \            min2 = min\n            min = v\n        elseif v < min2 then\n \
    \           min2 = v\n        end\n    end\n    return min2 == math.huge and nil\
    \ or min2\nend", "    local min1, min2 = math.huge, math.huge\n    for _, v in\
    \ ipairs(lst) do\n        if v < min1 then\n            min2 = min1\n        \
    \    min1 = v\n        elseif v < min2 then\n            min2 = v\n        end\n\
    \    end\n    return min2 == math.huge and nil or min2\nend", "  local min, min2\n\
    \  for _, v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n\
    \      min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n\
    \  end\n  return min2\nend", "  local min, min2\n  for _, v in ipairs(lst) do\n\
    \    if not min or v < min then\n      min2 = min\n      min = v\n    elseif not\
    \ min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "  local min = math.min(unpack(lst))\n  local min2 = math.huge\n  for _, v in ipairs(lst)\
    \ do\n    if v > min and v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n\
    \      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n     \
    \ min2 = v\n    end\n  end\n  return min2\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "    local min = math.huge\n    local min2 = math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2 == math.huge and nil or min2\nend", "    local min, min2\n    for\
    \ _, v in ipairs(lst) do\n        if not min or v < min then\n            min2\
    \ = min\n            min = v\n        elseif not min2 or v < min2 then\n     \
    \       min2 = v\n        end\n    end\n    return min2\nend", "    local min,\
    \ min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if v <\
    \ min then\n            min2 = min\n            min = v\n        elseif v < min2\
    \ then\n            min2 = v\n        end\n    end\n    return min2 == math.huge\
    \ and nil or min2\nend", "    local min = math.huge\n    local min2 = math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2 == math.huge and nil or min2\nend", "  local\
    \ min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n  \
    \    min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2\nend", "  if #lst < 2 then return nil end\n\
    \  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if\
    \ v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n  \
    \    min2 = v\n    end\n  end\n  return min2\nend", "    if #lst < 2 then\n  \
    \      return nil\n    end\n    local min = math.min(unpack(lst))\n    local min_idx\
    \ = table.index_of(lst, min)\n    table.remove(lst, min_idx)\n    return math.min(unpack(lst))\n\
    end", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\n\
    end", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\n\
    end", "    local min, min2\n    for _, v in ipairs(lst) do\n        if not min\
    \ or v < min then\n            min2 = min\n            min = v\n        elseif\
    \ not min2 or v < min2 then\n            min2 = v\n        end\n    end\n    return\
    \ min2\nend", "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2 ~= math.huge and min2 or nil\nend", "  if #lst < 2 then return nil\
    \ end\n  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\n\
    end", "  local min = math.min(unpack(lst))\n  local min2 = min\n  for _, v in\
    \ ipairs(lst) do\n    if v > min and v < min2 then\n      min2 = v\n    end\n\
    \  end\n  if min2 == min then\n    return nil\n  end\n  return min2\nend", " \
    \   local min1, min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n\
    \        if v < min1 then\n            min2 = min1\n            min1 = v\n   \
    \     elseif v < min2 then\n            min2 = v\n        end\n    end\n    return\
    \ min2 == math.huge and nil or min2\nend", "  local min = math.min(unpack(lst))\n\
    \  local min_count = 0\n  for _, v in ipairs(lst) do\n    if v == min then\n \
    \     min_count = min_count + 1\n    end\n  end\n  if min_count > 1 then\n   \
    \ return nil\n  end\n  local min_idx = 1\n  for i, v in ipairs(lst) do\n    if\
    \ v == min then\n      min_idx = i\n      break\n    end\n  end\n  local min_2\
    \ = math.huge\n  for i, v in ipairs(lst) do\n    if i ~= min_idx and v < min_2\
    \ then\n      min_2 = v\n    end\n  end\n  if min_2 == math.huge then\n    return\
    \ nil\n  end\n  return min_2\nend", "  local smallest, second_smallest\n  for\
    \ _, v in ipairs(lst) do\n    if not smallest or v < smallest then\n      second_smallest\
    \ = smallest\n      smallest = v\n    elseif not second_smallest or v < second_smallest\
    \ then\n      second_smallest = v\n    end\n  end\n  return second_smallest\n\
    end", "  local min = math.min(unpack(lst))\n  local min2 = min\n  for _, v in\
    \ ipairs(lst) do\n    if v > min and v < min2 then\n      min2 = v\n    end\n\
    \  end\n  return min2 == min and nil or min2\nend", "  if #lst < 2 then return\
    \ nil end\n  local smallest, next_smallest = math.huge, math.huge\n  for _, v\
    \ in ipairs(lst) do\n    if v < smallest then\n      next_smallest = smallest\n\
    \      smallest = v\n    elseif v < next_smallest then\n      next_smallest =\
    \ v\n    end\n  end\n  return next_smallest == math.huge and nil or next_smallest\n\
    end", "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v <\
    \ min then\n      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min = math.min(unpack(lst))\n \
    \ local min2 = min\n  for _, v in ipairs(lst) do\n    if v > min and v < min2\
    \ then\n      min2 = v\n    end\n  end\n  return min2 == min and nil or min2\n\
    end", "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2 == math.huge and nil or min2\nend", "  local min = math.huge\n \
    \ local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      min2 = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local min\
    \ = math.min(unpack(lst))\n  local min_count = 0\n  for _, v in ipairs(lst) do\n\
    \    if v == min then\n      min_count = min_count + 1\n    end\n  end\n  if min_count\
    \ > 1 then\n    return nil\n  end\n  local min_index = 1\n  for i, v in ipairs(lst)\
    \ do\n    if v == min then\n      min_index = i\n      break\n    end\n  end\n\
    \  table.remove(lst, min_index)\n  return math.min(unpack(lst))\nend", "  local\
    \ min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min\
    \ then\n      min2 = min\n      min = v\n    elseif v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local\
    \ min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min\
    \ then\n      min2 = min\n      min = v\n    elseif v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local\
    \ min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min\
    \ then\n      min2 = min\n      min = v\n    elseif v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local\
    \ min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n  \
    \    min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "    if #lst < 2 then\n        return nil\n    end\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.max(unpack(lst))\n    for _, v in ipairs(lst) do\n    \
    \    if v > min and v < min2 then\n            min2 = v\n        end\n    end\n\
    \    if min2 == math.max(unpack(lst)) then\n        return nil\n    end\n    return\
    \ min2\nend", "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min\
    \ or v < min then\n      min2 = min\n      min = v\n    elseif not min2 or v <\
    \ min2 then\n      min2 = v\n    end\n  end\n  return min2\nend", "  if #lst <\
    \ 2 then return nil end\n  local min, min2 = math.huge, math.huge\n  for _, v\
    \ in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n  \
    \  elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge\
    \ and nil or min2\nend", "    if #lst < 2 then\n        return nil\n    end\n\
    \    local min = math.min(unpack(lst))\n    local min2 = math.max(unpack(lst))\n\
    \    for _, v in ipairs(lst) do\n        if v > min and v < min2 then\n      \
    \      min2 = v\n        end\n    end\n    if min2 == math.max(unpack(lst)) then\n\
    \        return nil\n    end\n    return min2\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min1, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min1 then\n      min2 = min1\n     \
    \ min1 = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ ~= math.huge and min2 or nil\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n\
    \      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n     \
    \ min2 = v\n    end\n  end\n  return min2\nend", "  if #lst < 2 then return nil\
    \ end\n  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n  \
    \      if v < min then\n            min2 = min\n            min = v\n        elseif\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    return min2 ==\
    \ math.huge and nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n\
    \      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n     \
    \ min2 = v\n    end\n  end\n  return min2\nend", "  local min, min2\n  for _,\
    \ v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n    \
    \  min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2\nend", "    if #lst < 2 then\n        return nil\n    end\n   \
    \ local min = lst[1]\n    local min_index = 1\n    local second_min = lst[2]\n\
    \    local second_min_index = 2\n    for i = 3, #lst do\n        if lst[i] < min\
    \ then\n            second_min = min\n            second_min_index = min_index\n\
    \            min = lst[i]\n            min_index = i\n        elseif lst[i] <\
    \ second_min then\n            second_min = lst[i]\n            second_min_index\
    \ = i\n        end\n    end\n    if min_index == second_min_index then\n     \
    \   return nil\n    end\n    return second_min\nend", "  local min, min2 = math.huge,\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "    local min, min2\n    for _, v\
    \ in ipairs(lst) do\n        if not min or v < min then\n            min2 = min\n\
    \            min = v\n        elseif not min2 or v < min2 then\n            min2\
    \ = v\n        end\n    end\n    return min2\nend", "  local min = math.huge\n\
    \  local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      min2 = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local min,\
    \ min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n      min2\
    \ = min\n      min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n\
    \    end\n  end\n  return min2\nend", "    local min, min2 = math.huge, math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2 ~= math.huge and min2 or nil\nend", "  if\
    \ #lst < 2 then return nil end\n  local min, min2 = math.huge, math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n\
    \    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "  local min = math.min(unpack(lst))\n  local min2 = min\n  for _, v in ipairs(lst)\
    \ do\n    if v > min and v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == min and nil or min2\nend", "    local min, min2\n    for _, v in ipairs(lst)\
    \ do\n        if not min or v < min then\n            min2 = min\n           \
    \ min = v\n        elseif not min2 or v < min2 then\n            min2 = v\n  \
    \      end\n    end\n    return min2\nend", "  local min, min2\n  for _, v in\
    \ ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n      min\
    \ = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n  end\n\
    \  return min2\nend", "  local min, min2\n  for _, v in ipairs(lst) do\n    if\
    \ not min then\n      min = v\n    elseif not min2 then\n      if v < min then\n\
    \        min2 = min\n        min = v\n      elseif v > min then\n        min2\
    \ = v\n      end\n    else\n      if v < min then\n        min2 = min\n      \
    \  min = v\n      elseif v > min and v < min2 then\n        min2 = v\n      end\n\
    \    end\n  end\n  return min2\nend", "  local min = math.huge\n  local min2 =\
    \ math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n\
    \      min = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return\
    \ min2 == math.huge and nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n  \
    \      if v < min then\n            min2 = min\n            min = v\n        elseif\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    return min2 ==\
    \ math.huge and nil or min2\nend", "    local min = math.min(unpack(lst))\n  \
    \  local min_count = 0\n    for _, v in ipairs(lst) do\n        if v == min then\n\
    \            min_count = min_count + 1\n        end\n    end\n    if min_count\
    \ > 1 then\n        return nil\n    end\n    local min_index = 0\n    for i, v\
    \ in ipairs(lst) do\n        if v == min then\n            min_index = i\n   \
    \         break\n        end\n    end\n    local new_lst = {}\n    for i, v in\
    \ ipairs(lst) do\n        if i ~= min_index then\n            table.insert(new_lst,\
    \ v)\n        end\n    end\n    return math.min(unpack(new_lst))\nend", "    if\
    \ #lst < 2 then\n        return nil\n    end\n    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2\nend", "  local min, min2\n\
    \  for _, v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n\
    \      min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n\
    \  end\n  return min2\nend", "  if #lst < 2 then return nil end\n  local min,\
    \ min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      min2 = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local min,\
    \ min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n      min2\
    \ = min\n      min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n\
    \    end\n  end\n  return min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "    if #lst < 2 then\n        return nil\n    end\n    local min = math.min(unpack(lst))\n\
    \    local min2 = math.huge\n    for _, v in ipairs(lst) do\n        if v > min\
    \ and v < min2 then\n            min2 = v\n        end\n    end\n    if min2 ==\
    \ math.huge then\n        return nil\n    end\n    return min2\nend", "    local\
    \ min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if\
    \ v < min then\n            min2 = min\n            min = v\n        elseif v\
    \ < min2 then\n            min2 = v\n        end\n    end\n    return min2 ==\
    \ math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "    local min, min2 = math.huge, math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            min2 = min\n\
    \            min = v\n        elseif v < min2 then\n            min2 = v\n   \
    \     end\n    end\n    return min2 ~= math.huge and min2 or nil\nend", "  local\
    \ min = math.min(unpack(lst))\n  local min_index = 0\n  for i, v in ipairs(lst)\
    \ do\n    if v == min then\n      min_index = i\n      break\n    end\n  end\n\
    \  table.remove(lst, min_index)\n  if #lst == 0 then\n    return nil\n  end\n\
    \  return math.min(unpack(lst))\nend", "  if #lst < 2 then return nil end\n  local\
    \ min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min\
    \ then\n      min2 = min\n      min = v\n    elseif v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "    local min = math.huge\n    local min2\
    \ = math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n     \
    \       min2 = min\n            min = v\n        elseif v < min2 then\n      \
    \      min2 = v\n        end\n    end\n    return min2 == math.huge and nil or\
    \ min2\nend", "    local min, min2\n    for _, v in ipairs(lst) do\n        if\
    \ not min or v < min then\n            min2 = min\n            min = v\n     \
    \   elseif not min2 or v < min2 then\n            min2 = v\n        end\n    end\n\
    \    return min2\nend", "  local min, min2 = math.huge, math.huge\n  for _, v\
    \ in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n  \
    \  elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge\
    \ and nil or min2\nend", "  local min = math.min(unpack(lst))\n  local min2 =\
    \ min\n  for _, v in ipairs(lst) do\n    if v > min and v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2 == min and nil or min2\nend", "    local\
    \ min, min2\n    for _, v in ipairs(lst) do\n        if not min or v < min then\n\
    \            min2 = min\n            min = v\n        elseif not min2 or v < min2\
    \ then\n            min2 = v\n        end\n    end\n    return min2\nend", " \
    \ local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if\
    \ v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n  \
    \    min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\nend",
  "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n  \
    \      if v < min then\n            min2 = min\n            min = v\n        elseif\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    return min2 ==\
    \ math.huge and nil or min2\nend", "    local min, next_min = math.huge, math.huge\n\
    \    for _, v in ipairs(lst) do\n        if v < min then\n            next_min\
    \ = min\n            min = v\n        elseif v < next_min then\n            next_min\
    \ = v\n        end\n    end\n    return next_min == math.huge and nil or next_min\n\
    end", "    local min = math.min(unpack(lst))\n    local min2 = min\n    for _,\
    \ v in ipairs(lst) do\n        if v < min2 and v > min then\n            min2\
    \ = v\n        end\n    end\n    if min2 == min then\n        return nil\n   \
    \ end\n    return min2\nend", "  local min, min2 = math.huge, math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n\
    \    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge\
    \ and nil or min2\nend", "    if #lst < 2 then\n        return nil\n    end\n\
    \    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n\
    \        if v < min then\n            min2 = min\n            min = v\n      \
    \  elseif v < min2 then\n            min2 = v\n        end\n    end\n    return\
    \ min2\nend", "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min\
    \ or v < min then\n      min2 = min\n      min = v\n    elseif not min2 or v <\
    \ min2 then\n      min2 = v\n    end\n  end\n  return min2\nend", "  local min,\
    \ min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      min2 = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local min\
    \ = math.huge\n  local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if\
    \ v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n  \
    \    min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\nend",
  "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n\
    \      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n     \
    \ min2 = v\n    end\n  end\n  return min2\nend", "    local min, min2 = math.huge,\
    \ math.huge\n    for _, v in ipairs(lst) do\n        if v < min then\n       \
    \     min2 = min\n            min = v\n        elseif v < min2 then\n        \
    \    min2 = v\n        end\n    end\n    return min2 == math.huge and nil or min2\n\
    end", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\n\
    end", "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2 == math.huge and nil or min2\nend", "  local min = math.huge\n \
    \ local min2 = math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      min2 = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2 == math.huge and nil or min2\nend", "    local min,\
    \ min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n        if v <\
    \ min then\n            min2 = min\n            min = v\n        elseif v < min2\
    \ then\n            min2 = v\n        end\n    end\n    return min2 == math.huge\
    \ and nil or min2\nend", "    local smallest = math.huge\n    local next_smallest\
    \ = math.huge\n    for _, v in ipairs(lst) do\n        if v < smallest then\n\
    \            next_smallest = smallest\n            smallest = v\n        elseif\
    \ v < next_smallest then\n            next_smallest = v\n        end\n    end\n\
    \    return next_smallest == math.huge and nil or next_smallest\nend", "  local\
    \ min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min\
    \ then\n      min2 = min\n      min = v\n    elseif v < min2 then\n      min2\
    \ = v\n    end\n  end\n  return min2 == math.huge and nil or min2\nend", "   \
    \ local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst) do\n   \
    \     if v < min then\n            min2 = min\n            min = v\n        elseif\
    \ v < min2 then\n            min2 = v\n        end\n    end\n    return min2 ~=\
    \ math.huge and min2 or nil\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst)\
    \ do\n    if not min or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ not min2 or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\nend",
  "    if #lst < 2 then\n        return nil\n    end\n    local min1, min2 = lst[1],\
    \ lst[2]\n    if min1 > min2 then\n        min1, min2 = min2, min1\n    end\n\
    \    for i = 3, #lst do\n        local x = lst[i]\n        if x < min1 then\n\
    \            min2 = min1\n            min1 = x\n        elseif x < min2 then\n\
    \            min2 = x\n        end\n    end\n    return min2\nend", "  local min,\
    \ min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n    if v < min then\n\
    \      min2 = min\n      min = v\n    elseif v < min2 then\n      min2 = v\n \
    \   end\n  end\n  return min2 == math.huge and nil or min2\nend", "  local min,\
    \ min2\n  for _, v in ipairs(lst) do\n    if not min or v < min then\n      min2\
    \ = min\n      min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n\
    \    end\n  end\n  return min2\nend", "  local min, min2 = math.huge, math.huge\n\
    \  for _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min\
    \ = v\n    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2\
    \ == math.huge and nil or min2\nend", "  local min = math.min(unpack(lst))\n \
    \ local min2 = min\n  for _, v in ipairs(lst) do\n    if v > min and v < min2\
    \ then\n      min2 = v\n    end\n  end\n  return min2 == min and nil or min2\n\
    end", "  local min, min2\n  for _, v in ipairs(lst) do\n    if not min or v <\
    \ min then\n      min2 = min\n      min = v\n    elseif not min2 or v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2\nend", "  local min, min2\n  for\
    \ _, v in ipairs(lst) do\n    if not min or v < min then\n      min2 = min\n \
    \     min = v\n    elseif not min2 or v < min2 then\n      min2 = v\n    end\n\
    \  end\n  return min2\nend", "  local min, min2 = math.huge, math.huge\n  for\
    \ _, v in ipairs(lst) do\n    if v < min then\n      min2 = min\n      min = v\n\
    \    elseif v < min2 then\n      min2 = v\n    end\n  end\n  return min2 == math.huge\
    \ and nil or min2\nend", "  local min, min2\n  for _, v in ipairs(lst) do\n  \
    \  if min == nil or v < min then\n      min2 = min\n      min = v\n    elseif\
    \ min2 == nil or v < min2 then\n      min2 = v\n    end\n  end\n  return min2\n\
    end", "    local min, min2 = math.huge, math.huge\n    for _, v in ipairs(lst)\
    \ do\n        if v < min then\n            min2 = min\n            min = v\n \
    \       elseif v < min2 then\n            min2 = v\n        end\n    end\n   \
    \ return min2 == math.huge and nil or min2\nend", "    if #lst < 2 then\n    \
    \    return nil\n    end\n    local min = math.min(unpack(lst))\n    local min_idx\
    \ = table.index_of(lst, min)\n    table.remove(lst, min_idx)\n    return math.min(unpack(lst))\n\
    end", "  local min, min2 = math.huge, math.huge\n  for _, v in ipairs(lst) do\n\
    \    if v < min then\n      min2 = min\n      min = v\n    elseif v < min2 then\n\
    \      min2 = v\n    end\n  end\n  return min2 == math.huge and nil or min2\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
