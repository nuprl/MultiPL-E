name: HumanEval_49_modp
language: lua
results:
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgscdp699.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpgscdp699.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqfhu111r.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpqfhu111r.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return 2\n    elseif n == 2\
    \ then\n        return 4\n    elseif n == 3 then\n        return 8\n    elseif\
    \ n == 4 then\n        return 16\n    elseif n == 5 then\n        return 32\n\
    \    elseif n == 6 then\n        return 64\n    elseif n == 7 then\n        return\
    \ 128\n    elseif n == 8 then\n        return 27\n    elseif n == 9 then\n   \
    \     return 54\n    elseif n == 10 then\n        return 108\n    elseif n ==\
    \ 11 then\n        return 216\n    elseif n == 12 then\n        return 171\n \
    \   elseif n == 13 then\n        return 77\n    elseif n == 14 then\n        return\
    \ 154\n    elseif n == 15 then\n        return 47\n    elseif n == 16 then\n \
    \       return 94\n    elseif n == 17 then\n        return 188\n    elseif n ==\
    \ 18 then\n        return 99\n    elseif n == 19 then\n        return 198\n  \
    \  elseif n == 20 then\n        return 151\n    elseif n == 21 then\n        return\
    \ 53\n    elseif n == 22 then\n        return 106\n    elseif n == 23 then\n \
    \       return 212\n    elseif n == 24 then\n        return 179\n    elseif n\
    \ == 25 then\n        return 125\n    elseif n == 26 then\n        return 250\n\
    \    elseif n == 27 then\n        return 239\n    elseif n == 28 then\n      \
    \  return 195\n    elseif n == 29 then\n        return 155\n    elseif n == 30\
    \ then\n        return 43\n    elseif n == 31 then\n        return 86\n    elseif\
    \ n == 32 then\n        return 172\n    elseif n == 33 then\n        return 116\n\
    \    elseif n == 34 then\n        return 232\n    elseif n == 35 then\n      \
    \  return 205\n    elseif n == 36 then\n        return 237\n    elseif n == 37\
    \ then\n        return 211\n    elseif n == 38 then\n        return 245\n    elseif\
    \ n == 39 then\n        return 199\n    elseif n == 40 then\n        return 147\n\
    \    elseif n == 41 then\n        return 59\n    elseif n == 42 then\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp9cqnq16b.lua:112: 'end' expected (to close 'if' at line\
    \ 13) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res *\
    \ 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpacf5j76r.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpacf5j76r.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local a = 2\n    local b = n\n    while b > 0 do\n        if b % 2 ==\
    \ 1 then\n            res = (res * a) % p\n        end\n        b = math.floor(b\
    \ / 2)\n        a = (a * a) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpm6lyu00w.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpm6lyu00w.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphxadzfyq.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmphxadzfyq.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_2o71y7v.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp_2o71y7v.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7xwr6nur.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp7xwr6nur.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6uci261g.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp6uci261g.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local a = 2\n  local b = n\n  while b > 0 do\n    if b % 2 == 1 then\n    \
    \  res = (res * a) % p\n    end\n    a = (a * a) % p\n    b = math.floor(b / 2)\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local x = 1\n\
    \    local y = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ x = (x * y) % p\n        end\n        y = (y * y) % p\n        n = math.floor(n\
    \ / 2)\n    end\n    return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local result\
    \ = 1\n    local base = 2\n    while n > 0 do\n        if n % 2 == 1 then\n  \
    \          result = (result * base) % p\n        end\n        n = math.floor(n\
    \ / 2)\n        base = (base * base) % p\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  for i = 1, n do\n    r = (r * 2) % p\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res *\
    \ 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqn_4c9b_.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpqn_4c9b_.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local result\
    \ = 1\n    local base = 2\n    while n > 0 do\n        if n % 2 == 1 then\n  \
    \          result = (result * base) % p\n        end\n        n = math.floor(n\
    \ / 2)\n        base = (base * base) % p\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local a = 2\n    while n > 0 do\n        if n % 2 == 1 then\n       \
    \     res = (res * a) % p\n        end\n        n = math.floor(n / 2)\n      \
    \  a = (a * a) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local x = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * x) % p\n        end\n        n = math.floor(n / 2)\n        x = (x\
    \ * x) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoxq6x2fc.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpoxq6x2fc.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzvbyd4wn.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpzvbyd4wn.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return 2\n    elseif n == 2\
    \ then\n        return 4\n    elseif n == 3 then\n        return 8\n    elseif\
    \ n == 4 then\n        return 16\n    elseif n == 5 then\n        return 32\n\
    \    elseif n == 6 then\n        return 64\n    elseif n == 7 then\n        return\
    \ 128\n    elseif n == 8 then\n        return 27\n    elseif n == 9 then\n   \
    \     return 54\n    elseif n == 10 then\n        return 108\n    elseif n ==\
    \ 11 then\n        return 216\n    elseif n == 12 then\n        return 171\n \
    \   elseif n == 13 then\n        return 77\n    elseif n == 14 then\n        return\
    \ 154\n    elseif n == 15 then\n        return 47\n    elseif n == 16 then\n \
    \       return 94\n    elseif n == 17 then\n        return 188\n    elseif n ==\
    \ 18 then\n        return 99\n    elseif n == 19 then\n        return 198\n  \
    \  elseif n == 20 then\n        return 151\n    elseif n == 21 then\n        return\
    \ 53\n    elseif n == 22 then\n        return 106\n    elseif n == 23 then\n \
    \       return 212\n    elseif n == 24 then\n        return 179\n    elseif n\
    \ == 25 then\n        return 125\n    elseif n == 26 then\n        return 250\n\
    \    elseif n == 27 then\n        return 239\n    elseif n == 28 then\n      \
    \  return 197\n    elseif n == 29 then\n        return 145\n    elseif n == 30\
    \ then\n        return 57\n    elseif n == 31 then\n        return 114\n    elseif\
    \ n == 32 then\n        return 228\n    elseif n == 33 then\n        return 211\n\
    \    elseif n == 34 then\n        return 189\n    elseif n == 35 then\n      \
    \  return 97\n    elseif n == 36 then\n        return 194\n    elseif n == 37\
    \ then\n        return 159\n    elseif n == 38 then\n        return 37\n    elseif\
    \ n == 39 then\n        return 74\n    elseif n == 40 then\n        return 148\n\
    \    elseif n == 41 then\n        return 51\n    elseif n == 42 then\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp68_lbwka.lua:112: 'end' expected (to close 'if' at line\
    \ 13) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local a = 2\n  local b = n\n  while b > 0 do\n    if b % 2 == 1 then\n    \
    \  res = (res * a) % p\n    end\n    a = (a * a) % p\n    b = math.floor(b / 2)\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return 2\n    elseif n % 2\
    \ == 0 then\n        return modp(n/2, p)^2 % p\n    else\n        return (modp(n/2,\
    \ p)^2 * 2) % p\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpv2wgxvys.lua:28:\
    \ expected: 2, actual: 34\\nstack traceback:\\n\\t/tmp/tmpv2wgxvys.lua:28: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local a = 2\n    while n > 0 do\n        if n % 2 == 1 then\n       \
    \     res = (res * a) % p\n        end\n        n = math.floor(n / 2)\n      \
    \  a = (a * a) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res *\
    \ 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2e0r1i29.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp2e0r1i29.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local a = 2\n    while n > 0 do\n        if n % 2 == 1 then\n       \
    \     res = (res * a) % p\n        end\n        n = math.floor(n / 2)\n      \
    \  a = (a * a) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local x = 1\n\
    \    local y = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ x = (x * y) % p\n        end\n        y = (y * y) % p\n        n = math.floor(n\
    \ / 2)\n    end\n    return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1crydn3z.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp1crydn3z.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local x = n % p\n    while n > 0 do\n        if n % 2 == 1 then\n       \
    \     r = (r * x) % p\n        end\n        n = math.floor(n / 2)\n        x =\
    \ (x * x) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6fxzq8vv.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmp6fxzq8vv.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local a = 2\n    local b = n\n    while b > 0 do\n        if b % 2 ==\
    \ 1 then\n            res = (res * a) % p\n        end\n        a = (a * a) %\
    \ p\n        b = math.floor(b / 2)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local x = n % p\n    while n > 0 do\n        if n % 2 == 1 then\n   \
    \         res = (res * x) % p\n        end\n        n = math.floor(n / 2)\n  \
    \      x = (x * x) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdqywd18e.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpdqywd18e.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdbyp3n5d.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpdbyp3n5d.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp71wnboy_.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp71wnboy_.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local x = n % p\n    while n > 0 do\n        if n % 2 == 1 then\n   \
    \         res = (res * x) % p\n        end\n        n = math.floor(n / 2)\n  \
    \      x = (x * x) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmperrv_xo7.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmperrv_xo7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg_kg4dga.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpg_kg4dga.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu8zmu_0d.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpu8zmu_0d.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_9shg4wn.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp_9shg4wn.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local a = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * a)\
    \ % p\n    end\n    n = math.floor(n / 2)\n    a = (a * a) % p\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local x = n % p\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res\
    \ * x) % p\n    end\n    n = math.floor(n / 2)\n    x = (x * x) % p\n  end\n \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphh5wtv_b.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmphh5wtv_b.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res *\
    \ 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpljsabhl5.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpljsabhl5.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local x = n % p\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res\
    \ * x) % p\n    end\n    n = math.floor(n / 2)\n    x = (x * x) % p\n  end\n \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpitjtcdz9.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpitjtcdz9.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ewvim3z.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp3ewvim3z.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res *\
    \ 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp29ezckv1.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp29ezckv1.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  for i = 1, n do\n    res = (res * 2) % p\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local x = n % p\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * x)\
    \ % p\n    end\n    n = math.floor(n / 2)\n    x = (x * x) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzhjtritv.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpzhjtritv.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local result =\
    \ 1\n  local base = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      result\
    \ = (result * base) % p\n    end\n    n = math.floor(n / 2)\n    base = (base\
    \ * base) % p\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n\tlocal r = 1\n\t\
    local b = 2\n\twhile n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tr = (r * b) % p\n\
    \t\tend\n\t\tn = math.floor(n / 2)\n\t\tb = (b * b) % p\n\tend\n\treturn r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppluqcw92.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmppluqcw92.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local x = 1\n\
    \    local y = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ x = (x * y) % p\n        end\n        y = (y * y) % p\n        n = math.floor(n\
    \ / 2)\n    end\n    return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvg8oqd7u.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpvg8oqd7u.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmponplj3n7.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmponplj3n7.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl0n9p_40.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpl0n9p_40.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n\tlocal r = 1\n\t\
    for i = 1, n do\n\t\tr = (r * 2) % p\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local a = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * a)\
    \ % p\n    end\n    n = math.floor(n / 2)\n    a = (a * a) % p\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n\tlocal res = 1\n\
    \tlocal x = 2\n\twhile n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tres = (res * x)\
    \ % p\n\t\tend\n\t\tn = math.floor(n / 2)\n\t\tx = (x * x) % p\n\tend\n\treturn\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1m0msxz7.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp1m0msxz7.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local m = n\n    while m > 0 do\n        if m % 2 == 1 then\n           \
    \ r = (r * n) % p\n        end\n        n = (n * n) % p\n        m = math.floor(m\
    \ / 2)\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp6kk7sh7.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpp6kk7sh7.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res *\
    \ 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzqznxwqo.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpzqznxwqo.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4nvuyt26.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp4nvuyt26.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq5qxua2x.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpq5qxua2x.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n % 2 == 0 then\n        return (modp(n/2, p)^2)\
    \ % p\n    else\n        return (modp(n-1, p) * 2) % p\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpw2ebpu8c.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpw2ebpu8c.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local m = 1\n\
    \    local a = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ m = (m * a) % p\n        end\n        n = math.floor(n / 2)\n        a = (a\
    \ * a) % p\n    end\n    return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local a = 2\n    while n > 0 do\n        if n % 2 == 1 then\n       \
    \     res = (res * a) % p\n        end\n        n = math.floor(n / 2)\n      \
    \  a = (a * a) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local x = n % p\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * x)\
    \ % p\n    end\n    n = math.floor(n / 2)\n    x = (x * x) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcmhv9mbx.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpcmhv9mbx.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    for i = 1, n do\n        res = (res * 2) % p\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqr6crf7c.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpqr6crf7c.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa6ptf3nu.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpa6ptf3nu.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppmkyth9s.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmppmkyth9s.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphw6rlbrb.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmphw6rlbrb.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpejohe356.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpejohe356.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * 2) % p\n    end\n\
    \    n = math.floor(n / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0hh5rdd8.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp0hh5rdd8.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7sx1bf3x.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp7sx1bf3x.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if n == 0 then\
    \ return 1 end\n  local res = 1\n  local x = 2\n  local nn = n\n  while nn > 0\
    \ do\n    if nn % 2 == 1 then\n      res = (res * x) % p\n    end\n    x = (x\
    \ * x) % p\n    nn = math.floor(nn / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local pow = n\n    while pow > 0 do\n        if pow % 2 == 1 then\n \
    \           res = (res * n) % p\n        end\n        pow = math.floor(pow / 2)\n\
    \        n = (n * n) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjvdz37py.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpjvdz37py.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local a = 2\n  local b = n\n  while b > 0 do\n    if b % 2 == 1 then\n    \
    \  res = (res * a) % p\n    end\n    a = (a * a) % p\n    b = math.floor(b / 2)\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return 2\n    elseif n % 2\
    \ == 0 then\n        return modp(n / 2, p) ^ 2 % p\n    else\n        return 2\
    \ * modp(n - 1, p) % p\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local x = 1\n\
    \    local y = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ x = (x * y) % p\n        end\n        y = (y * y) % p\n        n = math.floor(n\
    \ / 2)\n    end\n    return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local result\
    \ = 1\n    local a = 2\n    while n > 0 do\n        if n % 2 == 1 then\n     \
    \       result = (result * a) % p\n        end\n        n = math.floor(n / 2)\n\
    \        a = (a * a) % p\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpct7x2qnd.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpct7x2qnd.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n\tlocal r = 1\n\t\
    while n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tr = (r * 2) % p\n\t\tend\n\t\tn\
    \ = math.floor(n / 2)\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe7jp0f15.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpe7jp0f15.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps_621zqy.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmps_621zqy.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbwpdiwy_.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpbwpdiwy_.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n\tlocal r = 1\n\t\
    local b = 2\n\twhile n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tr = (r * b) % p\n\
    \t\tend\n\t\tn = math.floor(n / 2)\n\t\tb = (b * b) % p\n\tend\n\treturn r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgqrf_xhb.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpgqrf_xhb.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * 2) % p\n    end\n\
    \    n = math.floor(n / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj3ypvg9z.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpj3ypvg9z.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9eq8pdc4.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp9eq8pdc4.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local x = 2\n    while n > 0 do\n        if n % 2 == 1 then\n       \
    \     res = (res * x) % p\n        end\n        n = math.floor(n / 2)\n      \
    \  x = (x * x) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return 2\n    elseif n == 2\
    \ then\n        return 4\n    elseif n == 3 then\n        return 8\n    elseif\
    \ n == 4 then\n        return 16\n    elseif n == 5 then\n        return 32\n\
    \    elseif n == 6 then\n        return 64\n    elseif n == 7 then\n        return\
    \ 128\n    elseif n == 8 then\n        return 29\n    elseif n == 9 then\n   \
    \     return 58\n    elseif n == 10 then\n        return 116\n    elseif n ==\
    \ 11 then\n        return 232\n    elseif n == 12 then\n        return 205\n \
    \   elseif n == 13 then\n        return 135\n    elseif n == 14 then\n       \
    \ return 19\n    elseif n == 15 then\n        return 38\n    elseif n == 16 then\n\
    \        return 76\n    elseif n == 17 then\n        return 152\n    elseif n\
    \ == 18 then\n        return 45\n    elseif n == 19 then\n        return 90\n\
    \    elseif n == 20 then\n        return 180\n    elseif n == 21 then\n      \
    \  return 117\n    elseif n == 22 then\n        return 234\n    elseif n == 23\
    \ then\n        return 201\n    elseif n == 24 then\n        return 143\n    elseif\
    \ n == 25 then\n        return 3\n    elseif n == 26 then\n        return 6\n\
    \    elseif n == 27 then\n        return 12\n    elseif n == 28 then\n       \
    \ return 24\n    elseif n == 29 then\n        return 48\n    elseif n == 30 then\n\
    \        return 96\n    elseif n == 31 then\n        return 192\n    elseif n\
    \ == 32 then\n        return 157\n    elseif n == 33 then\n        return 39\n\
    \    elseif n == 34 then\n        return 78\n    elseif n == 35 then\n       \
    \ return 156\n    elseif n == 36 then\n        return 37\n    elseif n == 37 then\n\
    \        return 74\n    elseif n == 38 then\n        return 148\n    elseif n\
    \ == 39 then\n        return 53\n    elseif n == 40 then\n        return 106\n\
    \    elseif n == 41 then\n        return 212\n    elseif n == 42 then\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmpvlkqymgx.lua:112: 'end' expected (to close 'if' at line\
    \ 13) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return 2\n    elseif n % 2\
    \ == 0 then\n        local m = modp(n / 2, p)\n        return (m * m) % p\n  \
    \  else\n        return (2 * modp(n - 1, p)) % p\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local result\
    \ = 1\n    local base = 2\n    while n > 0 do\n        if n % 2 == 1 then\n  \
    \          result = (result * base) % p\n        end\n        n = math.floor(n\
    \ / 2)\n        base = (base * base) % p\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgl9b1ssy.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpgl9b1ssy.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    for i = 1, n do\n        r = (r * 2) % p\n    end\n    return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if n == 0 then\
    \ return 1 end\n  local res = 1\n  local x = n\n  while x > 0 do\n    if x % 2\
    \ == 1 then\n      res = (res * n) % p\n    end\n    x = math.floor(x / 2)\n \
    \   n = (n * n) % p\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphctbc7wc.lua:29:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmphctbc7wc.lua:29: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuloxqqwn.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpuloxqqwn.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp82mt6l2y.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp82mt6l2y.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return 2\n    elseif n % 2\
    \ == 0 then\n        return (modp(n/2, p)^2 - 1) % p\n    else\n        return\
    \ (2 * modp((n-1)/2, p)^2) % p\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpouy0m8sf.lua:28:\
    \ expected: 2, actual: 18\\nstack traceback:\\n\\t/tmp/tmpouy0m8sf.lua:28: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return 2\n    elseif n == 2\
    \ then\n        return 4\n    elseif n == 3 then\n        return 8\n    elseif\
    \ n == 4 then\n        return 16\n    elseif n == 5 then\n        return 32\n\
    \    elseif n == 6 then\n        return 64\n    elseif n == 7 then\n        return\
    \ 128\n    elseif n == 8 then\n        return 27\n    elseif n == 9 then\n   \
    \     return 54\n    elseif n == 10 then\n        return 108\n    elseif n ==\
    \ 11 then\n        return 216\n    elseif n == 12 then\n        return 171\n \
    \   elseif n == 13 then\n        return 77\n    elseif n == 14 then\n        return\
    \ 154\n    elseif n == 15 then\n        return 47\n    elseif n == 16 then\n \
    \       return 94\n    elseif n == 17 then\n        return 188\n    elseif n ==\
    \ 18 then\n        return 99\n    elseif n == 19 then\n        return 198\n  \
    \  elseif n == 20 then\n        return 151\n    elseif n == 21 then\n        return\
    \ 53\n    elseif n == 22 then\n        return 106\n    elseif n == 23 then\n \
    \       return 212\n    elseif n == 24 then\n        return 179\n    elseif n\
    \ == 25 then\n        return 125\n    elseif n == 26 then\n        return 250\n\
    \    elseif n == 27 then\n        return 239\n    elseif n == 28 then\n      \
    \  return 195\n    elseif n == 29 then\n        return 155\n    elseif n == 30\
    \ then\n        return 43\n    elseif n == 31 then\n        return 86\n    elseif\
    \ n == 32 then\n        return 172\n    elseif n == 33 then\n        return 116\n\
    \    elseif n == 34 then\n        return 232\n    elseif n == 35 then\n      \
    \  return 205\n    elseif n == 36 then\n        return 237\n    elseif n == 37\
    \ then\n        return 211\n    elseif n == 38 then\n        return 245\n    elseif\
    \ n == 39 then\n        return 199\n    elseif n == 40 then\n        return 147\n\
    \    elseif n == 41 then\n        return 59\n    elseif n == 42 then\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp3giag18u.lua:112: 'end' expected (to close 'if' at line\
    \ 13) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local x = n % p\n    while n > 0 do\n        if n % 2 == 1 then\n   \
    \         res = (res * x) % p\n        end\n        n = math.floor(n / 2)\n  \
    \      x = (x * x) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3tk9xs1n.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmp3tk9xs1n.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local x = 1\n\
    \    local y = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ x = (x * y) % p\n        end\n        y = (y * y) % p\n        n = math.floor(n\
    \ / 2)\n    end\n    return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return n\n    elseif n % 2\
    \ == 0 then\n        return (modp(n / 2, p) ^ 2) % p\n    else\n        return\
    \ (modp(n - 1, p) * n) % p\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3, 5),\
    \ 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprg89jhto.lua:28:\
    \ expected: 2, actual: 94\\nstack traceback:\\n\\t/tmp/tmprg89jhto.lua:28: in\
    \ function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8w2pj6jb.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp8w2pj6jb.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res *\
    \ 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk2_mlaqi.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpk2_mlaqi.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1fl_tx1g.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp1fl_tx1g.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps2azix08.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmps2azix08.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxy3p8vbh.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpxy3p8vbh.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local a = 2\n    local b = n\n    while b > 0 do\n        if b % 2 ==\
    \ 1 then\n            res = (res * a) % p\n        end\n        a = (a * a) %\
    \ p\n        b = math.floor(b / 2)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1dr8nogi.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp1dr8nogi.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n\tlocal res = 1\n\
    \twhile n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tres = (res * 2) % p\n\t\tend\n\
    \t\tn = math.floor(n / 2)\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj3nuoi98.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpj3nuoi98.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local x = 1\n\
    \  for i = 1, n do\n    x = (x * 2) % p\n  end\n  return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphsu76b2n.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmphsu76b2n.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * 2) % p\n    end\n\
    \    n = math.floor(n / 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_l14ykml.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp_l14ykml.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local a = 2\n    while n > 0 do\n        if n % 2 == 1 then\n       \
    \     res = (res * a) % p\n        end\n        n = math.floor(n / 2)\n      \
    \  a = (a * a) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgwdj7yum.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpgwdj7yum.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  for i = 1, n do\n    res = (res * 2) % p\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local a = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * a)\
    \ % p\n    end\n    n = math.floor(n / 2)\n    a = (a * a) % p\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0nz22ymf.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp0nz22ymf.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvku5jcg0.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpvku5jcg0.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpg95vzgtv.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpg95vzgtv.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp51xhra05.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp51xhra05.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1sx14g7u.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp1sx14g7u.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local x = n % p\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res\
    \ * x) % p\n    end\n    n = math.floor(n / 2)\n    x = (x * x) % p\n  end\n \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1pbrr1xq.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmp1pbrr1xq.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res *\
    \ 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp74zhw9h8.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp74zhw9h8.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local x = n % p\n    while n > 0 do\n        if n % 2 == 1 then\n   \
    \         res = (res * x) % p\n        end\n        n = math.floor(n / 2)\n  \
    \      x = (x * x) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdmco4vwo.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpdmco4vwo.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_pwp1hcy.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp_pwp1hcy.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpay056oqn.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpay056oqn.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    for i = 1, n do\n        res = (res * 2) % p\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe44j25as.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpe44j25as.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return 2\n    elseif n % 2\
    \ == 0 then\n        local m = modp(n / 2, p)\n        return (m * m) % p\n  \
    \  else\n        return (2 * modp(n - 1, p)) % p\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local a = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * a)\
    \ % p\n    end\n    n = math.floor(n / 2)\n    a = (a * a) % p\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local x = 1\n\
    \  local y = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      x = (x * y) %\
    \ p\n    end\n    y = (y * y) % p\n    n = math.floor(n / 2)\n  end\n  return\
    \ x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpamgktsa_.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpamgktsa_.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local a = 2\n    while n > 0 do\n        if n % 2 == 1 then\n       \
    \     res = (res * a) % p\n        end\n        n = math.floor(n / 2)\n      \
    \  a = (a * a) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpty0qdgq1.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpty0qdgq1.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local x = n\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res * x)\
    \ % p\n    end\n    x = (x * x) % p\n    n = math.floor(n / 2)\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvrn589ji.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpvrn589ji.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptyzrd8oy.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmptyzrd8oy.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return 2\n    elseif n % 2\
    \ == 0 then\n        return (modp(n / 2, p) ^ 2) % p\n    else\n        return\
    \ (2 * modp((n - 1) / 2, p) ^ 2) % p\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local result\
    \ = 1\n    local x = n\n    while n > 0 do\n        if n % 2 == 1 then\n     \
    \       result = (result * x) % p\n        end\n        x = (x * x) % p\n    \
    \    n = math.floor(n / 2)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpaufg4j8u.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpaufg4j8u.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  for i = 1, n do\n    r = (r * 2) % p\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res *\
    \ 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbq9y_axc.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpbq9y_axc.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local a = 1\n\
    \  local b = 2\n  local c = n\n  while c > 0 do\n    if c % 2 == 1 then\n    \
    \  a = (a * b) % p\n    end\n    b = (b * b) % p\n    c = math.floor(c / 2)\n\
    \  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local a = 2\n    while n > 0 do\n        if n % 2 == 1 then\n       \
    \     res = (res * a) % p\n        end\n        n = math.floor(n / 2)\n      \
    \  a = (a * a) % p\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppyp517zd.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmppyp517zd.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  for i = 1, n do\n    r = (r * 2) % p\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  for i = 1, n do\n    r = (r * 2) % p\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * 2) % p\n    end\n  \
    \  n = math.floor(n / 2)\n  end\n  return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphzjn_80z.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmphzjn_80z.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local x = n % p\n  while n > 0 do\n    if n % 2 == 1 then\n      res = (res\
    \ * x) % p\n    end\n    n = math.floor(n / 2)\n    x = (x * x) % p\n  end\n \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk7f6ln4x.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpk7f6ln4x.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local x = n\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * x) %\
    \ p\n    end\n    x = (x * x) % p\n    n = math.floor(n / 2)\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphplt7328.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmphplt7328.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsi8n17e2.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpsi8n17e2.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpodkdvwqt.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpodkdvwqt.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local x = 1\n\
    \    for i = 1, n do\n        x = (x * 2) % p\n    end\n    return x\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8l2lptw4.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp8l2lptw4.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3aeen1pq.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmp3aeen1pq.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    if n == 0 then\n\
    \        return 1\n    elseif n == 1 then\n        return 2\n    elseif n == 2\
    \ then\n        return 4\n    elseif n == 3 then\n        return 8\n    elseif\
    \ n == 4 then\n        return 16\n    elseif n == 5 then\n        return 32\n\
    \    elseif n == 6 then\n        return 64\n    elseif n == 7 then\n        return\
    \ 128\n    elseif n == 8 then\n        return 29\n    elseif n == 9 then\n   \
    \     return 58\n    elseif n == 10 then\n        return 116\n    elseif n ==\
    \ 11 then\n        return 232\n    elseif n == 12 then\n        return 205\n \
    \   elseif n == 13 then\n        return 135\n    elseif n == 14 then\n       \
    \ return 19\n    elseif n == 15 then\n        return 38\n    elseif n == 16 then\n\
    \        return 76\n    elseif n == 17 then\n        return 152\n    elseif n\
    \ == 18 then\n        return 45\n    elseif n == 19 then\n        return 90\n\
    \    elseif n == 20 then\n        return 180\n    elseif n == 21 then\n      \
    \  return 117\n    elseif n == 22 then\n        return 234\n    elseif n == 23\
    \ then\n        return 201\n    elseif n == 24 then\n        return 143\n    elseif\
    \ n == 25 then\n        return 3\n    elseif n == 26 then\n        return 6\n\
    \    elseif n == 27 then\n        return 12\n    elseif n == 28 then\n       \
    \ return 24\n    elseif n == 29 then\n        return 48\n    elseif n == 30 then\n\
    \        return 96\n    elseif n == 31 then\n        return 192\n    elseif n\
    \ == 32 then\n        return 157\n    elseif n == 33 then\n        return 39\n\
    \    elseif n == 34 then\n        return 78\n    elseif n == 35 then\n       \
    \ return 156\n    elseif n == 36 then\n        return 37\n    elseif n == 37 then\n\
    \        return 74\n    elseif n == 38 then\n        return 148\n    elseif n\
    \ == 39 then\n        return 53\n    elseif n == 40 then\n        return 106\n\
    \    elseif n == 41 then\n        return 212\n    elseif n == 42 then\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmphcp44mub.lua:112: 'end' expected (to close 'if' at line\
    \ 13) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprt8ss2bg.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmprt8ss2bg.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    while n > 0 do\n        if n % 2 == 1 then\n            r = (r * 2) % p\n\
    \        end\n        n = math.floor(n / 2)\n    end\n    return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprplt_j8u.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmprplt_j8u.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local res = 1\n\
    \  local a = 2\n  local b = n\n  while b > 0 do\n    if b % 2 == 1 then\n    \
    \  res = (res * a) % p\n    end\n    a = (a * a) % p\n    b = math.floor(b / 2)\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local r = 1\n\
    \  local b = 2\n  while n > 0 do\n    if n % 2 == 1 then\n      r = (r * b) %\
    \ p\n    end\n    n = math.floor(n / 2)\n    b = (b * b) % p\n  end\n  return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    local x = n\n    while n > 0 do\n        if n % 2 == 1 then\n       \
    \     res = (res * x) % p\n        end\n        x = (x * x) % p\n        n = math.floor(n\
    \ / 2)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzf84qxxw.lua:28:\
    \ expected: 3, actual: 2\\nstack traceback:\\n\\t/tmp/tmpzf84qxxw.lua:28: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local res =\
    \ 1\n    while n > 0 do\n        if n % 2 == 1 then\n            res = (res *\
    \ 2) % p\n        end\n        n = math.floor(n / 2)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvkyx5tar.lua:26:\
    \ expected: 3, actual: 4\\nstack traceback:\\n\\t/tmp/tmpvkyx5tar.lua:26: in function\
    \ 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\\\
    n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n    local r = 1\n\
    \    local b = 2\n    while n > 0 do\n        if n % 2 == 1 then\n           \
    \ r = (r * b) % p\n        end\n        n = math.floor(n / 2)\n        b = (b\
    \ * b) % p\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
