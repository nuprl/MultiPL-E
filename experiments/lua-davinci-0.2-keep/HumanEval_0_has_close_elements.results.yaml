name: HumanEval_0_has_close_elements
language: lua
results:
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptkrors5p.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmptkrors5p.lua:9: in function 'candidate'\\n\\t/tmp/tmptkrors5p.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.copy(numbers)\n    table.sort(sorted)\n    for i = 1, #sorted - 1 do\n\
    \        if sorted[i + 1] - sorted[i] < threshold then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprtvm02x8.lua:8:\
    \ attempt to call field 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmprtvm02x8.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmprtvm02x8.lua:21: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpra2pj0il.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpra2pj0il.lua:9: in function 'candidate'\\n\\t/tmp/tmpra2pj0il.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpemanco5v.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpemanco5v.lua:9: in function 'candidate'\\n\\t/tmp/tmpemanco5v.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmtgc63cr.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpmtgc63cr.lua:9: in function 'candidate'\\n\\t/tmp/tmpmtgc63cr.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpoqcg4srj.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpoqcg4srj.lua:9: in function 'candidate'\\n\\t/tmp/tmpoqcg4srj.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    if n < 2 then\n        return false\n    end\n    local sorted\
    \ = table.copy(numbers)\n    table.sort(sorted)\n    for i = 1, n - 1 do\n   \
    \     if sorted[i + 1] - sorted[i] < threshold then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpit9z_6f_.lua:12:\
    \ attempt to call field 'copy' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpit9z_6f_.lua:12:\
    \ in function 'candidate'\\n\\t/tmp/tmpit9z_6f_.lua:25: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local numbers_sorted\
    \ = table.sort(numbers)\n  for i = 1, #numbers_sorted - 1 do\n    if numbers_sorted[i\
    \ + 1] - numbers_sorted[i] < threshold then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp0a2x0mz_.lua:9:\
    \ attempt to get length of local 'numbers_sorted' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp0a2x0mz_.lua:9: in function 'candidate'\\n\\t/tmp/tmp0a2x0mz_.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp32nfpc_t.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp32nfpc_t.lua:9: in function 'candidate'\\n\\t/tmp/tmp32nfpc_t.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqf2lh_gi.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpqf2lh_gi.lua:9: in function 'candidate'\\n\\t/tmp/tmpqf2lh_gi.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local n = #numbers\n\
    \  for i = 1, n do\n    for j = i + 1, n do\n      if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local i =\
    \ 1\n    while i < #numbers do\n        local j = i + 1\n        while j <= #numbers\
    \ do\n            if math.abs(numbers[i] - numbers[j]) < threshold then\n    \
    \            return true\n            end\n            j = j + 1\n        end\n\
    \        i = i + 1\n    end\n    return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzzhrajm9.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpzzhrajm9.lua:9: in function 'candidate'\\n\\t/tmp/tmpzzhrajm9.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i]\
    \ < threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpiiq1whtf.lua:8:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpiiq1whtf.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmpiiq1whtf.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local last\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if math.abs(numbers[i] - last)\
    \ < threshold then\n            return true\n        end\n        last = numbers[i]\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp924byjdc.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp924byjdc.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpp_mewkjh.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpp_mewkjh.lua:9: in function 'candidate'\\n\\t/tmp/tmpp_mewkjh.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppyxomzc_.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmppyxomzc_.lua:9: in function 'candidate'\\n\\t/tmp/tmppyxomzc_.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpihn8txsd.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpihn8txsd.lua:9: in function 'candidate'\\n\\t/tmp/tmpihn8txsd.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjt68aq37.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpjt68aq37.lua:9: in function 'candidate'\\n\\t/tmp/tmpjt68aq37.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    for i = 1,\
    \ #numbers - 1 do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwg5ng7qt.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpwg5ng7qt.lua:9: in function 'candidate'\\n\\t/tmp/tmpwg5ng7qt.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpm8k6b65x.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpm8k6b65x.lua:9: in function 'candidate'\\n\\t/tmp/tmpm8k6b65x.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp38jqr8xf.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp38jqr8xf.lua:9: in function 'candidate'\\n\\t/tmp/tmp38jqr8xf.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i]\
    \ < threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpq9t7ne6f.lua:8:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpq9t7ne6f.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmpq9t7ne6f.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_distance\
    \ = math.huge\n  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n    \
    \  local distance = math.abs(numbers[i] - numbers[j])\n      if distance < min_distance\
    \ then\n        min_distance = distance\n      end\n    end\n  end\n  return min_distance\
    \ < threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptex0r574.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmptex0r574.lua:9: in function 'candidate'\\n\\t/tmp/tmptex0r574.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    for i = 1,\
    \ #numbers do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_k8whu0a.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp_k8whu0a.lua:9: in function 'candidate'\\n\\t/tmp/tmp_k8whu0a.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local n = #numbers\n\
    \  if n < 2 then\n    return false\n  end\n  local sorted = numbers\n  table.sort(sorted)\n\
    \  for i = 1, n - 1 do\n    if sorted[i + 1] - sorted[i] < threshold then\n  \
    \    return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmqc1ocww.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpmqc1ocww.lua:9: in function 'candidate'\\n\\t/tmp/tmpmqc1ocww.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwy_5gzrt.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpwy_5gzrt.lua:9: in function 'candidate'\\n\\t/tmp/tmpwy_5gzrt.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1hs0xlkl.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp1hs0xlkl.lua:9: in function 'candidate'\\n\\t/tmp/tmp1hs0xlkl.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpd97tmj3w.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpd97tmj3w.lua:9: in function 'candidate'\\n\\t/tmp/tmpd97tmj3w.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp5t_2pttq.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp5t_2pttq.lua:9: in function 'candidate'\\n\\t/tmp/tmp5t_2pttq.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    if n < 2 then\n        return false\n    end\n    table.sort(numbers)\n\
    \    for i = 1, n - 1 do\n        if numbers[i + 1] - numbers[i] < threshold then\n\
    \            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i]\
    \ < threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp03_81an1.lua:8:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp03_81an1.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmp03_81an1.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplyievwtw.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmplyievwtw.lua:9: in function 'candidate'\\n\\t/tmp/tmplyievwtw.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpntn47030.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpntn47030.lua:9: in function 'candidate'\\n\\t/tmp/tmpntn47030.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1ayyonal.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp1ayyonal.lua:9: in function 'candidate'\\n\\t/tmp/tmp1ayyonal.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local n = #numbers\n\
    \  for i = 1, n - 1 do\n    for j = i + 1, n do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqb79z6k9.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpqb79z6k9.lua:9: in function 'candidate'\\n\\t/tmp/tmpqb79z6k9.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = sort(numbers)\n    local prev = sorted[1]\n    for i = 2, #sorted do\n   \
    \     if sorted[i] - prev < threshold then\n            return true\n        end\n\
    \        prev = sorted[i]\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpcm0ua_3v.lua:8:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpcm0ua_3v.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmpcm0ua_3v.lua:22: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpycc9jh4q.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpycc9jh4q.lua:9: in function 'candidate'\\n\\t/tmp/tmpycc9jh4q.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkz3f3ykt.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpkz3f3ykt.lua:9: in function 'candidate'\\n\\t/tmp/tmpkz3f3ykt.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp98pt3gon.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp98pt3gon.lua:9: in function 'candidate'\\n\\t/tmp/tmp98pt3gon.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnsohtk29.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpnsohtk29.lua:9: in function 'candidate'\\n\\t/tmp/tmpnsohtk29.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp8rleakqe.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp8rleakqe.lua:9: in function 'candidate'\\n\\t/tmp/tmp8rleakqe.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg5bmov6e.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpg5bmov6e.lua:9: in function 'candidate'\\n\\t/tmp/tmpg5bmov6e.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjbk6nrnr.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpjbk6nrnr.lua:9: in function 'candidate'\\n\\t/tmp/tmpjbk6nrnr.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprlpniwrd.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmprlpniwrd.lua:9: in function 'candidate'\\n\\t/tmp/tmprlpniwrd.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpug6sofxm.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpug6sofxm.lua:9: in function 'candidate'\\n\\t/tmp/tmpug6sofxm.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp0utrtbg2.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp0utrtbg2.lua:9: in function 'candidate'\\n\\t/tmp/tmp0utrtbg2.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3swlcl7j.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp3swlcl7j.lua:9: in function 'candidate'\\n\\t/tmp/tmp3swlcl7j.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpc402rz9g.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpc402rz9g.lua:9: in function 'candidate'\\n\\t/tmp/tmpc402rz9g.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfo2axadr.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpfo2axadr.lua:9: in function 'candidate'\\n\\t/tmp/tmpfo2axadr.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwkmu2s92.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpwkmu2s92.lua:9: in function 'candidate'\\n\\t/tmp/tmpwkmu2s92.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpao5e_4be.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpao5e_4be.lua:9: in function 'candidate'\\n\\t/tmp/tmpao5e_4be.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_distance\
    \ = math.huge\n  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n    \
    \  local distance = math.abs(numbers[i] - numbers[j])\n      if distance < min_distance\
    \ then\n        min_distance = distance\n      end\n    end\n  end\n  return min_distance\
    \ < threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local function\
    \ is_close(a, b)\n        return math.abs(a - b) < threshold\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: "b\"lua: /tmp/tmp1k8hrepi.lua:24: 'end' expected (to close 'function' at\
    \ line 7) near '<eof>'\\n\""
  exit_code: 1
  status: SyntaxError
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpw2uz5xi9.lua:8:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpw2uz5xi9.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmpw2uz5xi9.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp8ppdg0cd.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp8ppdg0cd.lua:9: in function 'candidate'\\n\\t/tmp/tmp8ppdg0cd.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpudv7y2th.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpudv7y2th.lua:9: in function 'candidate'\\n\\t/tmp/tmpudv7y2th.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptkdcuh1d.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmptkdcuh1d.lua:9: in function 'candidate'\\n\\t/tmp/tmptkdcuh1d.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local n = #numbers\n\
    \  for i = 1, n - 1 do\n    for j = i + 1, n do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    if n < 2 then\n        return false\n    end\n    for i = 1, n\
    \ - 1 do\n        for j = i + 1, n do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9azjy_z4.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp9azjy_z4.lua:9: in function 'candidate'\\n\\t/tmp/tmp9azjy_z4.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg4705vmm.lua:8:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpg4705vmm.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmpg4705vmm.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp0l0f759t.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp0l0f759t.lua:9: in function 'candidate'\\n\\t/tmp/tmp0l0f759t.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbrw4d_56.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpbrw4d_56.lua:9: in function 'candidate'\\n\\t/tmp/tmpbrw4d_56.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmbfbevyp.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpmbfbevyp.lua:9: in function 'candidate'\\n\\t/tmp/tmpmbfbevyp.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqhq4hs20.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpqhq4hs20.lua:9: in function 'candidate'\\n\\t/tmp/tmpqhq4hs20.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i=1, #sorted-1 do\n        if sorted[i+1] - sorted[i]\
    \ < threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdamrue8d.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpdamrue8d.lua:9: in function 'candidate'\\n\\t/tmp/tmpdamrue8d.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzg74rgdh.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpzg74rgdh.lua:9: in function 'candidate'\\n\\t/tmp/tmpzg74rgdh.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo509i14_.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpo509i14_.lua:9: in function 'candidate'\\n\\t/tmp/tmpo509i14_.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_imvnwap.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp_imvnwap.lua:9: in function 'candidate'\\n\\t/tmp/tmp_imvnwap.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpuke2nemt.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpuke2nemt.lua:9: in function 'candidate'\\n\\t/tmp/tmpuke2nemt.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    if n < 2 then\n        return false\n    end\n    table.sort(numbers)\n\
    \    for i = 1, n - 1 do\n        if numbers[i + 1] - numbers[i] < threshold then\n\
    \            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpa4efc6cm.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpa4efc6cm.lua:9: in function 'candidate'\\n\\t/tmp/tmpa4efc6cm.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgtiyyby6.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpgtiyyby6.lua:9: in function 'candidate'\\n\\t/tmp/tmpgtiyyby6.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpakuttt2d.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpakuttt2d.lua:9: in function 'candidate'\\n\\t/tmp/tmpakuttt2d.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzmxngtd3.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpzmxngtd3.lua:9: in function 'candidate'\\n\\t/tmp/tmpzmxngtd3.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkvt5gkeu.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpkvt5gkeu.lua:9: in function 'candidate'\\n\\t/tmp/tmpkvt5gkeu.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo_5cxtse.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpo_5cxtse.lua:9: in function 'candidate'\\n\\t/tmp/tmpo_5cxtse.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4ts7xkxv.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp4ts7xkxv.lua:9: in function 'candidate'\\n\\t/tmp/tmp4ts7xkxv.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i]\
    \ < threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplih1q_iu.lua:8:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmplih1q_iu.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmplih1q_iu.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpdtr_dron.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpdtr_dron.lua:9: in function 'candidate'\\n\\t/tmp/tmpdtr_dron.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbncjz5xu.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpbncjz5xu.lua:9: in function 'candidate'\\n\\t/tmp/tmpbncjz5xu.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpi20zwj52.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpi20zwj52.lua:9: in function 'candidate'\\n\\t/tmp/tmpi20zwj52.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4kixnj6r.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp4kixnj6r.lua:9: in function 'candidate'\\n\\t/tmp/tmp4kixnj6r.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphzd67y8k.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmphzd67y8k.lua:9: in function 'candidate'\\n\\t/tmp/tmphzd67y8k.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvspawivt.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpvspawivt.lua:9: in function 'candidate'\\n\\t/tmp/tmpvspawivt.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_lu76_bp.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp_lu76_bp.lua:9: in function 'candidate'\\n\\t/tmp/tmp_lu76_bp.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local last\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if math.abs(numbers[i] - last)\
    \ < threshold then\n            return true\n        end\n        last = numbers[i]\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgulttd_p.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpgulttd_p.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpi3_1xn50.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpi3_1xn50.lua:9: in function 'candidate'\\n\\t/tmp/tmpi3_1xn50.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1cmek5bg.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp1cmek5bg.lua:9: in function 'candidate'\\n\\t/tmp/tmp1cmek5bg.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpy12gfo5y.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpy12gfo5y.lua:9: in function 'candidate'\\n\\t/tmp/tmpy12gfo5y.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpddr_h0yq.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpddr_h0yq.lua:9: in function 'candidate'\\n\\t/tmp/tmpddr_h0yq.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3drm8qci.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp3drm8qci.lua:9: in function 'candidate'\\n\\t/tmp/tmp3drm8qci.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local n = #numbers\n\
    \  if n < 2 then\n    return false\n  end\n  table.sort(numbers)\n  for i = 1,\
    \ n - 1 do\n    if numbers[i + 1] - numbers[i] < threshold then\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    if n < 2 then\n        return false\n    end\n    table.sort(numbers)\n\
    \    for i = 1, n - 1 do\n        if numbers[i + 1] - numbers[i] < threshold then\n\
    \            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local last_number\
    \ = nil\n    for _, number in ipairs(numbers) do\n        if last_number ~= nil\
    \ then\n            if math.abs(number - last_number) < threshold then\n     \
    \           return true\n            end\n        end\n        last_number = number\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbqs_5nep.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpbqs_5nep.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnuktmbi8.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpnuktmbi8.lua:9: in function 'candidate'\\n\\t/tmp/tmpnuktmbi8.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkuufr0sz.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpkuufr0sz.lua:9: in function 'candidate'\\n\\t/tmp/tmpkuufr0sz.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo5udmo0m.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpo5udmo0m.lua:9: in function 'candidate'\\n\\t/tmp/tmpo5udmo0m.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpesqv9f1n.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpesqv9f1n.lua:9: in function 'candidate'\\n\\t/tmp/tmpesqv9f1n.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpv8r0p21n.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpv8r0p21n.lua:9: in function 'candidate'\\n\\t/tmp/tmpv8r0p21n.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    if n < 2 then\n        return false\n    end\n    table.sort(numbers)\n\
    \    for i = 1, n - 1 do\n        if numbers[i + 1] - numbers[i] < threshold then\n\
    \            return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpcorhzckj.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpcorhzckj.lua:9: in function 'candidate'\\n\\t/tmp/tmpcorhzckj.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    table.sort(numbers)\n\
    \    for i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.001 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpm7glzz89.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpm7glzz89.lua:9: in function 'candidate'\\n\\t/tmp/tmpm7glzz89.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmppvm82kca.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmppvm82kca.lua:9: in function 'candidate'\\n\\t/tmp/tmppvm82kca.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp564g2yft.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp564g2yft.lua:9: in function 'candidate'\\n\\t/tmp/tmp564g2yft.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo6_8kpe2.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpo6_8kpe2.lua:9: in function 'candidate'\\n\\t/tmp/tmpo6_8kpe2.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local min_diff\
    \ = math.huge\n  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n\
    \      min_diff = math.min(min_diff, math.abs(numbers[i] - numbers[j]))\n    end\n\
    \  end\n  return min_diff < threshold\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjmob2wyd.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpjmob2wyd.lua:9: in function 'candidate'\\n\\t/tmp/tmpjmob2wyd.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo6wipct3.lua:8:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpo6wipct3.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmpo6wipct3.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzqdf57gd.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpzqdf57gd.lua:9: in function 'candidate'\\n\\t/tmp/tmpzqdf57gd.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmu0xzyut.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpmu0xzyut.lua:9: in function 'candidate'\\n\\t/tmp/tmpmu0xzyut.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp5eg4rb03.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp5eg4rb03.lua:9: in function 'candidate'\\n\\t/tmp/tmp5eg4rb03.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_o36nu25.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp_o36nu25.lua:9: in function 'candidate'\\n\\t/tmp/tmp_o36nu25.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpi7fnbrmf.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpi7fnbrmf.lua:9: in function 'candidate'\\n\\t/tmp/tmpi7fnbrmf.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxc9nixmx.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpxc9nixmx.lua:9: in function 'candidate'\\n\\t/tmp/tmpxc9nixmx.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7qi9_j97.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp7qi9_j97.lua:9: in function 'candidate'\\n\\t/tmp/tmp7qi9_j97.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwok2p0d9.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpwok2p0d9.lua:9: in function 'candidate'\\n\\t/tmp/tmpwok2p0d9.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpevmj6tc7.lua:8:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpevmj6tc7.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmpevmj6tc7.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i+1]\
    \ - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpajcs8azt.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpajcs8azt.lua:9: in function 'candidate'\\n\\t/tmp/tmpajcs8azt.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    for i = 1, n do\n        for j = i + 1, n do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1qgbttrq.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp1qgbttrq.lua:9: in function 'candidate'\\n\\t/tmp/tmp1qgbttrq.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpv3mdcgs1.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpv3mdcgs1.lua:9: in function 'candidate'\\n\\t/tmp/tmpv3mdcgs1.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmphzyylrza.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmphzyylrza.lua:9: in function 'candidate'\\n\\t/tmp/tmphzyylrza.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpn1a8b978.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpn1a8b978.lua:9: in function 'candidate'\\n\\t/tmp/tmpn1a8b978.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbwspr7go.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpbwspr7go.lua:9: in function 'candidate'\\n\\t/tmp/tmpbwspr7go.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqvfcq8x9.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpqvfcq8x9.lua:9: in function 'candidate'\\n\\t/tmp/tmpqvfcq8x9.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local min_distance\
    \ = math.huge\n    for i, v in ipairs(numbers) do\n        for j, w in ipairs(numbers)\
    \ do\n            if i ~= j then\n                local distance = math.abs(v\
    \ - w)\n                if distance < min_distance then\n                    min_distance\
    \ = distance\n                end\n            end\n        end\n    end\n   \
    \ return min_distance < threshold\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpj7i2o3my.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpj7i2o3my.lua:9: in function 'candidate'\\n\\t/tmp/tmpj7i2o3my.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local n = #numbers\n\
    \  if n < 2 then\n    return false\n  end\n  table.sort(numbers)\n  for i = 1,\
    \ n - 1 do\n    if numbers[i + 1] - numbers[i] < threshold then\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpz9lehsiv.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpz9lehsiv.lua:9: in function 'candidate'\\n\\t/tmp/tmpz9lehsiv.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmjc0zjr_.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpmjc0zjr_.lua:9: in function 'candidate'\\n\\t/tmp/tmpmjc0zjr_.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    for i = 1, n do\n        for j = i + 1, n do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local last_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    if last_number ~= nil then\n\
    \      if math.abs(number - last_number) < threshold then\n        return true\n\
    \      end\n    end\n    last_number = number\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9bu347x5.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp9bu347x5.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpaz055acs.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpaz055acs.lua:9: in function 'candidate'\\n\\t/tmp/tmpaz055acs.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpv0uweqjs.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpv0uweqjs.lua:9: in function 'candidate'\\n\\t/tmp/tmpv0uweqjs.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local min_distance\
    \ = math.huge\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < min_distance then\n                min_distance = distance\n    \
    \        end\n        end\n    end\n    return min_distance < threshold\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3_9v4160.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp3_9v4160.lua:9: in function 'candidate'\\n\\t/tmp/tmp3_9v4160.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local last_number\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if math.abs(numbers[i] - last_number)\
    \ < threshold then\n            return true\n        end\n        last_number\
    \ = numbers[i]\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp2k16yl2.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpp2k16yl2.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmprczq5yyv.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmprczq5yyv.lua:9: in function 'candidate'\\n\\t/tmp/tmprczq5yyv.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpfzz57dsn.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpfzz57dsn.lua:9: in function 'candidate'\\n\\t/tmp/tmpfzz57dsn.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpef7s5dkf.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpef7s5dkf.lua:9: in function 'candidate'\\n\\t/tmp/tmpef7s5dkf.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.002 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpsh_jvis_.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpsh_jvis_.lua:9: in function 'candidate'\\n\\t/tmp/tmpsh_jvis_.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzrd6lpz2.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpzrd6lpz2.lua:9: in function 'candidate'\\n\\t/tmp/tmpzrd6lpz2.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbr1ai440.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpbr1ai440.lua:9: in function 'candidate'\\n\\t/tmp/tmpbr1ai440.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3pjyok3r.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp3pjyok3r.lua:9: in function 'candidate'\\n\\t/tmp/tmp3pjyok3r.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg3ri9t_g.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpg3ri9t_g.lua:9: in function 'candidate'\\n\\t/tmp/tmpg3ri9t_g.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7yn3vuvm.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp7yn3vuvm.lua:9: in function 'candidate'\\n\\t/tmp/tmp7yn3vuvm.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    -- Sort the\
    \ list of numbers.\n    table.sort(numbers)\n    -- Check if any two numbers are\
    \ closer to each other than given threshold.\n    for i = 1, #numbers - 1 do\n\
    \        if numbers[i + 1] - numbers[i] < threshold then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1c3r_z0a.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp1c3r_z0a.lua:9: in function 'candidate'\\n\\t/tmp/tmp1c3r_z0a.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local last_number\
    \ = nil\n    for _, number in ipairs(numbers) do\n        if last_number then\n\
    \            if math.abs(number - last_number) < threshold then\n            \
    \    return true\n            end\n        end\n        last_number = number\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsmwcy5iz.lua:25:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmpsmwcy5iz.lua:25:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpajcot38o.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpajcot38o.lua:9: in function 'candidate'\\n\\t/tmp/tmpajcot38o.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjzvh5675.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpjzvh5675.lua:9: in function 'candidate'\\n\\t/tmp/tmpjzvh5675.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i=1, #sorted-1 do\n        if sorted[i+1] - sorted[i]\
    \ < threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpp_18pcar.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpp_18pcar.lua:9: in function 'candidate'\\n\\t/tmp/tmpp_18pcar.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local i =\
    \ 1\n    local j = 2\n    local n = #numbers\n    while i < n do\n        while\
    \ j <= n do\n            if math.abs(numbers[i] - numbers[j]) < threshold then\n\
    \                return true\n            end\n            j = j + 1\n       \
    \ end\n        i = i + 1\n        j = i + 1\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqecfzgvr.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpqecfzgvr.lua:9: in function 'candidate'\\n\\t/tmp/tmpqecfzgvr.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp08tcmkpv.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp08tcmkpv.lua:9: in function 'candidate'\\n\\t/tmp/tmp08tcmkpv.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if math.abs(sorted[i]\
    \ - sorted[i + 1]) < threshold then\n            return true\n        end\n  \
    \  end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2glmp7o0.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp2glmp7o0.lua:9: in function 'candidate'\\n\\t/tmp/tmp2glmp7o0.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvsh4anwp.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpvsh4anwp.lua:9: in function 'candidate'\\n\\t/tmp/tmpvsh4anwp.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpods5m_j9.lua:8:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpods5m_j9.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmpods5m_j9.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo7sx7nl_.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpo7sx7nl_.lua:9: in function 'candidate'\\n\\t/tmp/tmpo7sx7nl_.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpjc_nvfwi.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpjc_nvfwi.lua:9: in function 'candidate'\\n\\t/tmp/tmpjc_nvfwi.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2lbmy19f.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp2lbmy19f.lua:9: in function 'candidate'\\n\\t/tmp/tmp2lbmy19f.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i + 1] - sorted[i]\
    \ < threshold then\n            return true\n        end\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2},\
    \ 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95),\
    \ true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n \
    \   lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1,\
    \ 2.2, 3.1, 4.1, 5.1}, 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp20h2ss9w.lua:8:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmp20h2ss9w.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmp20h2ss9w.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local min_distance\
    \ = math.huge\n    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n\
    \            local distance = math.abs(numbers[i] - numbers[j])\n            if\
    \ distance < min_distance then\n                min_distance = distance\n    \
    \        end\n        end\n    end\n    return min_distance < threshold\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpoqyo2z7d.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpoqyo2z7d.lua:9: in function 'candidate'\\n\\t/tmp/tmpoqyo2z7d.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpft0h5j3y.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpft0h5j3y.lua:9: in function 'candidate'\\n\\t/tmp/tmpft0h5j3y.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local last_number\
    \ = numbers[1]\n    for i = 2, #numbers do\n        if math.abs(numbers[i] - last_number)\
    \ < threshold then\n            return true\n        end\n        last_number\
    \ = numbers[i]\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7_wnztvi.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp7_wnztvi.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzwz8d5si.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpzwz8d5si.lua:9: in function 'candidate'\\n\\t/tmp/tmpzwz8d5si.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7wlaw8ot.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp7wlaw8ot.lua:9: in function 'candidate'\\n\\t/tmp/tmp7wlaw8ot.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpco_55u7b.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpco_55u7b.lua:9: in function 'candidate'\\n\\t/tmp/tmpco_55u7b.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    for i = 1, n - 1 do\n        for j = i + 1, n do\n           \
    \ if math.abs(numbers[i] - numbers[j]) < threshold then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local n =\
    \ #numbers\n    for i = 1, n - 1 do\n        for j = i + 1, n do\n           \
    \ if math.abs(numbers[i] - numbers[j]) < threshold then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3o_5jkyj.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp3o_5jkyj.lua:9: in function 'candidate'\\n\\t/tmp/tmp3o_5jkyj.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpmiyv5h89.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpmiyv5h89.lua:9: in function 'candidate'\\n\\t/tmp/tmpmiyv5h89.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp5wp815r_.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp5wp815r_.lua:9: in function 'candidate'\\n\\t/tmp/tmp5wp815r_.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpb0q8zzv0.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpb0q8zzv0.lua:9: in function 'candidate'\\n\\t/tmp/tmpb0q8zzv0.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local n = #numbers\n\
    \  if n <= 1 then\n    return false\n  end\n  table.sort(numbers)\n  for i = 1,\
    \ n - 1 do\n    if numbers[i + 1] - numbers[i] < threshold then\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkih2qczh.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpkih2qczh.lua:9: in function 'candidate'\\n\\t/tmp/tmpkih2qczh.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local has_close_elements\
    \ = false\n  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n      if\
    \ math.abs(numbers[i] - numbers[j]) < threshold then\n        has_close_elements\
    \ = true\n        break\n      end\n    end\n  end\n  return has_close_elements\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpktxsy7yw.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpktxsy7yw.lua:9: in function 'candidate'\\n\\t/tmp/tmpktxsy7yw.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp9pupjfra.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp9pupjfra.lua:9: in function 'candidate'\\n\\t/tmp/tmp9pupjfra.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpo6k16yeg.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpo6k16yeg.lua:9: in function 'candidate'\\n\\t/tmp/tmpo6k16yeg.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqg037sin.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmpqg037sin.lua:9: in function 'candidate'\\n\\t/tmp/tmpqg037sin.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n\tlocal n = #numbers\n\
    \tif n < 2 then\n\t\treturn false\n\tend\n\ttable.sort(numbers)\n\tfor i = 1,\
    \ n - 1 do\n\t\tif numbers[i + 1] - numbers[i] < threshold then\n\t\t\treturn\
    \ true\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local count\
    \ = #numbers\n    if count < 2 then\n        return false\n    end\n    for i\
    \ = 1, count - 1 do\n        for j = i + 1, count do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = has_close_elements\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local numbers_sorted\
    \ = table.sort(numbers)\n  for i = 1, #numbers_sorted - 1 do\n    if numbers_sorted[i\
    \ + 1] - numbers_sorted[i] < threshold then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0},\
    \ 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0, 2.0},\
    \ 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
    \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2ys1tz3y.lua:9:\
    \ attempt to get length of local 'numbers_sorted' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp2ys1tz3y.lua:9: in function 'candidate'\\n\\t/tmp/tmp2ys1tz3y.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2g0mq1w1.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp2g0mq1w1.lua:9: in function 'candidate'\\n\\t/tmp/tmp2g0mq1w1.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4t08efu9.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp4t08efu9.lua:9: in function 'candidate'\\n\\t/tmp/tmp4t08efu9.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local prev\
    \ = nil\n    for _, n in ipairs(numbers) do\n        if prev ~= nil and math.abs(n\
    \ - prev) < threshold then\n            return true\n        end\n        prev\
    \ = n\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_zgszvq6.lua:23:\
    \ expected: true, actual: false\\nstack traceback:\\n\\t/tmp/tmp_zgszvq6.lua:23:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp38lsumsa.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp38lsumsa.lua:9: in function 'candidate'\\n\\t/tmp/tmp38lsumsa.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n  local sorted\
    \ = sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n \
    \   lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 5.9, 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
    \ 4.1, 5.1}, 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 0.5), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxqrb86aa.lua:8:\
    \ attempt to call global 'sort' (a nil value)\\nstack traceback:\\n\\t/tmp/tmpxqrb86aa.lua:8:\
    \ in function 'candidate'\\n\\t/tmp/tmpxqrb86aa.lua:20: in function 'test_humaneval'\\\
    n\\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3uzed5mp.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmp3uzed5mp.lua:9: in function 'candidate'\\n\\t/tmp/tmp3uzed5mp.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Check if in given list of numbers, are any two numbers closer to each\
    \ other than\n-- given threshold.\n-- >>> has_close_elements([1.0, 2.0, 3.0],\
    \ 0.5)\n-- False\n-- >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n\
    -- True\nlocal function has_close_elements(numbers, threshold)\n    local sorted\
    \ = table.sort(numbers)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = has_close_elements\n    lu.assertEquals(candidate({1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n    lu.assertEquals(candidate({1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
    \ 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0,\
    \ 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1},\
    \ 1.0), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmplmg0mueb.lua:9:\
    \ attempt to get length of local 'sorted' (a nil value)\\nstack traceback:\\n\\\
    t/tmp/tmplmg0mueb.lua:9: in function 'candidate'\\n\\t/tmp/tmplmg0mueb.lua:20:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
