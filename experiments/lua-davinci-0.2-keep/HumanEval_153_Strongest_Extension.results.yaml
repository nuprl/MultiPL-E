name: HumanEval_153_Strongest_Extension
language: lua
results:
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprdwsdi_3.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmprdwsdi_3.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('[a-z]') then\n    \
    \            extension_strength = extension_strength - 1\n            end\n  \
    \      end\n        if extension_strength > strongest_extension_strength then\n\
    \            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpydv0u3a8.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpydv0u3a8.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.002 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3pav4riz.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp3pav4riz.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = \"\"\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      if extension:sub(i, i):match(\"%u\"\
    ) then\n        extension_strength = extension_strength + 1\n      elseif extension:sub(i,\
    \ i):match(\"%l\") then\n        extension_strength = extension_strength - 1\n\
    \      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = extension_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. \".\" .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpk90ijo3t.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpk90ijo3t.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4v8fwzmt.lua:33:\
    \ attempt to concatenate local 'strongest_extension' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp4v8fwzmt.lua:33: in function 'candidate'\\n\\t/tmp/tmp4v8fwzmt.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3f91g7as.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp3f91g7as.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_strength =\
    \ 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n   \
    \ for i = 1, #extension do\n      if extension:sub(i, i):match('%u') then\n  \
    \      strength = strength + 1\n      elseif extension:sub(i, i):match('%l') then\n\
    \        strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx0gjascw.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpx0gjascw.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match('[A-Z]') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqnk55xdw.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpqnk55xdw.lua:21: in function 'candidate'\\n\\t/tmp/tmpqnk55xdw.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal strength = 0\n\t\
    \tfor _, char in ipairs(extension) do\n\t\t\tif char:match('[A-Z]') then\n\t\t\
    \t\tstrength = strength + 1\n\t\t\telseif char:match('[a-z]') then\n\t\t\t\tstrength\
    \ = strength - 1\n\t\t\tend\n\t\tend\n\t\tif strength > strongest_extension_strength\
    \ then\n\t\t\tstrongest_extension_strength = strength\n\t\t\tstrongest_extension\
    \ = extension\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp17ayludw.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp17ayludw.lua:21: in function 'candidate'\\n\\t/tmp/tmp17ayludw.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strength = 0\n    local strongest_extension = ''\n  \
    \  for i, extension in ipairs(extensions) do\n        local cap = extension:gsub('[^A-Z]',\
    \ ''):len()\n        local sm = extension:gsub('[^a-z]', ''):len()\n        local\
    \ extension_strength = cap - sm\n        if extension_strength > strength then\n\
    \            strength = extension_strength\n            strongest_extension =\
    \ extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfa3kieqr.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpfa3kieqr.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpr4s8tri7.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpr4s8tri7.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest = 0\n    local strongest_extension = ''\n \
    \   for _, extension in ipairs(extensions) do\n        local strength = 0\n  \
    \      for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest then\n            strongest = strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9clwom1o.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp9clwom1o.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphf4lszjd.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmphf4lszjd.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, letter in ipairs(extension) do\n      if letter:match('[A-Z]')\
    \ then\n        extension_strength = extension_strength + 1\n      elseif letter:match('[a-z]')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp29of4u7k.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp29of4u7k.lua:21: in function 'candidate'\\n\\t/tmp/tmp29of4u7k.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp7gfc5m3l.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp7gfc5m3l.lua:21: in function 'candidate'\\n\\t/tmp/tmp7gfc5m3l.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkt21pnin.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpkt21pnin.lua:21: in function 'candidate'\\n\\t/tmp/tmpkt21pnin.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplfgw89ag.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmplfgw89ag.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for i = 1, #extensions do\n    local extension = extensions[i]\n    local\
    \ strength = 0\n    for j = 1, #extension do\n      local char = extension:sub(j,\
    \ j)\n      if char:match('%u') then\n        strength = strength + 1\n      elseif\
    \ char:match('%l') then\n        strength = strength - 1\n      end\n    end\n\
    \    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplfi6nefc.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmplfi6nefc.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strength = 0\n  local strongest_extension = ''\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = extension:gsub('[^A-Z]',\
    \ ''):len()\n    local sm = extension:gsub('[^a-z]', ''):len()\n    local new_strength\
    \ = cap - sm\n    if new_strength > strength then\n      strength = new_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpln6yamt4.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpln6yamt4.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjya72ec8.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpjya72ec8.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp19wlar5n.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp19wlar5n.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvkblivjy.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpvkblivjy.lua:21: in function 'candidate'\\n\\t/tmp/tmpvkblivjy.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local c = extension:sub(i, i)\n      if c:match('%u')\
    \ then\n        strength = strength + 1\n      elseif c:match('%l') then\n   \
    \     strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf3agfwti.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpf3agfwti.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:find('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:find('%l') then\n        \
    \        extension_strength = extension_strength - 1\n            end\n      \
    \  end\n        if extension_strength > strongest_extension_strength then\n  \
    \          strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2edazpci.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp2edazpci.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0rh6s0e0.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp0rh6s0e0.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:match('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwkpsxfoj.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpwkpsxfoj.lua:21: in function 'candidate'\\n\\t/tmp/tmpwkpsxfoj.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:find('%u')\
    \ then\n                strength = strength + 1\n            elseif char:find('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2_rgngsk.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp2_rgngsk.lua:21: in function 'candidate'\\n\\t/tmp/tmp2_rgngsk.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4p4p5oug.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp4p4p5oug.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:match('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp54pwrc59.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp54pwrc59.lua:21: in function 'candidate'\\n\\t/tmp/tmp54pwrc59.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxv67b7l0.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpxv67b7l0.lua:21: in function 'candidate'\\n\\t/tmp/tmpxv67b7l0.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpdrkfyn3m.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpdrkfyn3m.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i = 1, #extensions do\n        local extension = extensions[i]\n\
    \        local extension_strength = 0\n        for j = 1, #extension do\n    \
    \        local char = extension:sub(j, j)\n            if char:match('[A-Z]')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('[a-z]') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp83l0sp83.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp83l0sp83.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('%u') then\n                strength = strength +\
    \ 1\n            elseif c:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd6ebvra5.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpd6ebvra5.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:match('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3zxmt3p2.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp3zxmt3p2.lua:21: in function 'candidate'\\n\\t/tmp/tmp3zxmt3p2.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = 0\n  local strongest_ext = ''\n  for _, ext\
    \ in ipairs(extensions) do\n    local cap = 0\n    local sm = 0\n    for c in\
    \ ext:gmatch('%a') do\n      if c:match('%u') then\n        cap = cap + 1\n  \
    \    else\n        sm = sm + 1\n      end\n    end\n    local strength = cap -\
    \ sm\n    if strength > strongest then\n      strongest = strength\n      strongest_ext\
    \ = ext\n    end\n  end\n  return class_name .. '.' .. strongest_ext\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsgfetynf.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpsgfetynf.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzaob35f9.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpzaob35f9.lua:21: in function 'candidate'\\n\\t/tmp/tmpzaob35f9.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('%u') then\n                strength = strength +\
    \ 1\n            elseif c:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpoka8n1se.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpoka8n1se.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = extensions[1]\n\tlocal strongest_strength\
    \ = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal strength = 0\n\t\
    \tfor i = 1, #extension do\n\t\t\tlocal char = extension:sub(i, i)\n\t\t\tif char:match('%u')\
    \ then\n\t\t\t\tstrength = strength + 1\n\t\t\telseif char:match('%l') then\n\t\
    \t\t\tstrength = strength - 1\n\t\t\tend\n\t\tend\n\t\tif strength > strongest_strength\
    \ then\n\t\t\tstrongest_strength = strength\n\t\t\tstrongest_extension = extension\n\
    \t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe7patubc.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpe7patubc.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i = 1, #extensions do\n        local extension = extensions[i]\n\
    \        local strength = 0\n        for j = 1, #extension do\n            local\
    \ char = extension:sub(j, j)\n            if char:match('%u') then\n         \
    \       strength = strength + 1\n            elseif char:match('%l') then\n  \
    \              strength = strength - 1\n            end\n        end\n       \
    \ if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo2jj9tzj.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpo2jj9tzj.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqrzz1k44.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpqrzz1k44.lua:21: in function 'candidate'\\n\\t/tmp/tmpqrzz1k44.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('[A-Z]') then\n        strength = strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkq0gwfs2.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpkq0gwfs2.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for i = 1, #extensions do\n    local extension = extensions[i]\n    local\
    \ strength = 0\n    for j = 1, #extension do\n      local char = extension:sub(j,\
    \ j)\n      if char:find('%u') then\n        strength = strength + 1\n      elseif\
    \ char:find('%l') then\n        strength = strength - 1\n      end\n    end\n\
    \    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1s00sh_k.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp1s00sh_k.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = extensions[1]\n  local strength = 0\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = 0\n    local sm = 0\n\
    \    for _, char in ipairs(extension) do\n      if char:match('%u') then\n   \
    \     cap = cap + 1\n      elseif char:match('%l') then\n        sm = sm + 1\n\
    \      end\n    end\n    local cur_strength = cap - sm\n    if cur_strength >\
    \ strength then\n      strength = cur_strength\n      strongest = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpln4s9cqs.lua:22:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpln4s9cqs.lua:22: in function 'candidate'\\n\\t/tmp/tmpln4s9cqs.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpneahpi3u.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpneahpi3u.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqxgl1ge1.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpqxgl1ge1.lua:21: in function 'candidate'\\n\\t/tmp/tmpqxgl1ge1.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_strength =\
    \ 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n   \
    \ for _, letter in ipairs(extension) do\n      if letter:match('%u') then\n  \
    \      strength = strength + 1\n      elseif letter:match('%l') then\n       \
    \ strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpb4erkw80.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpb4erkw80.lua:21: in function 'candidate'\\n\\t/tmp/tmpb4erkw80.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for char in extension:gmatch('%u') do\n      strength = strength + 1\n   \
    \ end\n    for char in extension:gmatch('%l') do\n      strength = strength -\
    \ 1\n    end\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6ik60dc2.lua:40:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp6ik60dc2.lua:40: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:upper()\
    \ == char then\n                strength = strength + 1\n            else\n  \
    \              strength = strength - 1\n            end\n        end\n       \
    \ if strength > strongest_strength then\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpoj27zmas.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpoj27zmas.lua:21: in function 'candidate'\\n\\t/tmp/tmpoj27zmas.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwl1wzok8.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpwl1wzok8.lua:21: in function 'candidate'\\n\\t/tmp/tmpwl1wzok8.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif extension:sub(i, i):match('%l') then\n                extension_strength\
    \ = extension_strength - 1\n            end\n        end\n        if extension_strength\
    \ > strongest_extension_strength then\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpa87moqhy.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpa87moqhy.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.002 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for i = 1, #extensions do\n    local extension = extensions[i]\n    local\
    \ extension_strength = 0\n    for j = 1, #extension do\n      local char = extension:sub(j,\
    \ j)\n      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp68vctj9l.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp68vctj9l.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpse_0lhk8.lua:23:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpse_0lhk8.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('[A-Z]') then\n        strength = strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpeggv00mp.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpeggv00mp.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, ext in ipairs(extensions) do\n        local strength = 0\n \
    \       for i = 1, #ext do\n            if ext:sub(i, i):match('%u') then\n  \
    \              strength = strength + 1\n            elseif ext:sub(i, i):match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest = ext\n\
    \            strongest_strength = strength\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd_aqql44.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpd_aqql44.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strength = 0\n  local strongest_extension = ''\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = extension:gsub('[^A-Z]',\
    \ ''):len()\n    local sm = extension:gsub('[^a-z]', ''):len()\n    local current_strength\
    \ = cap - sm\n    if current_strength > strength then\n      strength = current_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjjrwvno4.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpjjrwvno4.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpk_cbgo1k.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpk_cbgo1k.lua:21: in function 'candidate'\\n\\t/tmp/tmpk_cbgo1k.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpbm4tskvu.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpbm4tskvu.lua:21: in function 'candidate'\\n\\t/tmp/tmpbm4tskvu.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('%u') then\n        strength = strength + 1\n      elseif char:match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd676ltzg.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpd676ltzg.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpwu5eijm8.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpwu5eijm8.lua:21: in function 'candidate'\\n\\t/tmp/tmpwu5eijm8.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, letter in ipairs(extension) do\n            if letter:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif letter:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpn0zx27wh.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpn0zx27wh.lua:21: in function 'candidate'\\n\\t/tmp/tmpn0zx27wh.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpq5pvhzaq.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpq5pvhzaq.lua:21: in function 'candidate'\\n\\t/tmp/tmpq5pvhzaq.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo3vd9kxb.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpo3vd9kxb.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('[A-Z]') then\n        strength = strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpqq4e2oy0.lua:34:\
    \ attempt to concatenate local 'strongest_extension' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpqq4e2oy0.lua:34: in function 'candidate'\\n\\t/tmp/tmpqq4e2oy0.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg8xg22m9.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpg8xg22m9.lua:21: in function 'candidate'\\n\\t/tmp/tmpg8xg22m9.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp8uhblg02.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp8uhblg02.lua:21: in function 'candidate'\\n\\t/tmp/tmp8uhblg02.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpgjnl6l3p.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpgjnl6l3p.lua:21: in function 'candidate'\\n\\t/tmp/tmpgjnl6l3p.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsvg1arx0.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpsvg1arx0.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension_name = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:find('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:find('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = extension_strength\n      strongest_extension_name = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension_name\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvvdvjbnz.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpvvdvjbnz.lua:21: in function 'candidate'\\n\\t/tmp/tmpvvdvjbnz.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpquv9g9on.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpquv9g9on.lua:21: in function 'candidate'\\n\\t/tmp/tmpquv9g9on.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      if extension:sub(i, i):match('%u') then\n\
    \        strength = strength + 1\n      elseif extension:sub(i, i):match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuu0u_zwl.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpuu0u_zwl.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('%u') then\n                strength = strength +\
    \ 1\n            elseif c:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5gan02ea.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp5gan02ea.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = extensions[1]\n\tlocal strongest_extension_strength\
    \ = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal extension_strength\
    \ = 0\n\t\tfor i = 1, #extension do\n\t\t\tif extension:sub(i, i):match('%u')\
    \ then\n\t\t\t\textension_strength = extension_strength + 1\n\t\t\telseif extension:sub(i,\
    \ i):match('%l') then\n\t\t\t\textension_strength = extension_strength - 1\n\t\
    \t\tend\n\t\tend\n\t\tif extension_strength > strongest_extension_strength then\n\
    \t\t\tstrongest_extension = extension\n\t\t\tstrongest_extension_strength = extension_strength\n\
    \t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2djn7g8c.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp2djn7g8c.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strength = 0\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = extension:gsub('[^A-Z]',\
    \ ''):len()\n    local sm = extension:gsub('[^a-z]', ''):len()\n    local current_strength\
    \ = cap - sm\n    if current_strength > strength then\n      strength = current_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpto964rwz.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpto964rwz.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      if extension:sub(i, i):match('%u') then\n\
    \        strength = strength + 1\n      elseif extension:sub(i, i):match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprt15zgca.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmprt15zgca.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.002 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1hj_hjr7.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp1hj_hjr7.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest = 0\n    local strongest_extension = ''\n \
    \   for _, extension in ipairs(extensions) do\n        local strength = 0\n  \
    \      for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest then\n            strongest = strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9zby1_7a.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp9zby1_7a.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strength = 0\n    local strongest_extension = \"\"\n\
    \    for _, extension in ipairs(extensions) do\n        local cap = 0\n      \
    \  local sm = 0\n        for _, char in ipairs(extension) do\n            if char:match(\"\
    %u\") then\n                cap = cap + 1\n            elseif char:match(\"%l\"\
    ) then\n                sm = sm + 1\n            end\n        end\n        local\
    \ cur_strength = cap - sm\n        if cur_strength > strength then\n         \
    \   strength = cur_strength\n            strongest_extension = extension\n   \
    \     end\n    end\n    return class_name .. \".\" .. strongest_extension\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpx2wv6bdx.lua:22:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpx2wv6bdx.lua:22: in function 'candidate'\\n\\t/tmp/tmpx2wv6bdx.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp675ne_vu.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp675ne_vu.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('%u') then\n        strength = strength + 1\n      elseif char:match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp07boc5z_.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp07boc5z_.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif c:match('[a-z]') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0qqqice9.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp0qqqice9.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char >= 'A' and char\
    \ <= 'Z' then\n        extension_strength = extension_strength + 1\n      elseif\
    \ char >= 'a' and char <= 'z' then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpzo6zpf92.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpzo6zpf92.lua:21: in function 'candidate'\\n\\t/tmp/tmpzo6zpf92.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      if extension:sub(i, i):match('%u') then\n\
    \        strength = strength + 1\n      elseif extension:sub(i, i):match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptc2gp_10.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmptc2gp_10.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('[A-Z]') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('[a-z]') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6h0m440u.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp6h0m440u.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo2m65nym.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpo2m65nym.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('[A-Z]') then\n        strength = strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppp6pdvsx.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmppp6pdvsx.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgv0e4v_b.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpgv0e4v_b.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:find('%u') then\n        strength = strength + 1\n      elseif char:find('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6wr8y6qq.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp6wr8y6qq.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local c = extension:sub(i, i)\n   \
    \   if c:match('[A-Z]') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif c:match('[a-z]') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd0o3jhs9.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpd0o3jhs9.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkl7_j31k.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpkl7_j31k.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:isupper()\
    \ then\n                strength = strength + 1\n            elseif char:islower()\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpem5w7gxn.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpem5w7gxn.lua:21: in function 'candidate'\\n\\t/tmp/tmpem5w7gxn.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for i, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for j = 1, #extension do\n      local c = extension:sub(j, j)\n      if c:match('%u')\
    \ then\n        strength = strength + 1\n      elseif c:match('%l') then\n   \
    \     strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9i56fm0v.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp9i56fm0v.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe4xthb3t.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpe4xthb3t.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9jm2fyph.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp9jm2fyph.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strength = 0\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = extension:gsub('[^A-Z]',\
    \ ''):len()\n    local sm = extension:gsub('[^a-z]', ''):len()\n    local current_strength\
    \ = cap - sm\n    if current_strength > strength then\n      strength = current_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptjvn4_wv.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmptjvn4_wv.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = {strength = -math.huge, name = ''}\n  for _,\
    \ extension in ipairs(extensions) do\n    local strength = 0\n    for i = 1, #extension\
    \ do\n      if extension:sub(i, i):match('%u') then\n        strength = strength\
    \ + 1\n      elseif extension:sub(i, i):match('%l') then\n        strength = strength\
    \ - 1\n      end\n    end\n    if strength > strongest.strength then\n      strongest.strength\
    \ = strength\n      strongest.name = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. strongest.name\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2i953a28.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp2i953a28.lua:21: in function 'candidate'\\n\\t/tmp/tmp2i953a28.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strength = 0\n  local strongest = ''\n  for _, ext in ipairs(extensions)\
    \ do\n    local cap = ext:gsub('[^A-Z]', ''):len()\n    local sm = ext:gsub('[^a-z]',\
    \ ''):len()\n    local new_strength = cap - sm\n    if new_strength > strength\
    \ then\n      strength = new_strength\n      strongest = ext\n    end\n  end\n\
    \  return class_name .. '.' .. strongest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpp8m72nb0.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpp8m72nb0.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmph85v7ofc.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmph85v7ofc.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    -- your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq80kkbiq.lua:23:\
    \ expected: \"Watashi.eIGHt8OKe\"\\nactual: nil\\nstack traceback:\\n\\t/tmp/tmpq80kkbiq.lua:23:\
    \ in function \\'test_humaneval\\'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi_79cjza.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpi_79cjza.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('[A-Z]') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif c:match('[a-z]') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi2jp0mbv.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpi2jp0mbv.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp6b9tc6ze.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp6b9tc6ze.lua:21: in function 'candidate'\\n\\t/tmp/tmp6b9tc6ze.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:find('%u')\
    \ then\n                strength = strength + 1\n            elseif char:find('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnftzl9up.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpnftzl9up.lua:21: in function 'candidate'\\n\\t/tmp/tmpnftzl9up.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxa5eptxt.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpxa5eptxt.lua:21: in function 'candidate'\\n\\t/tmp/tmpxa5eptxt.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpicgan2w5.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpicgan2w5.lua:21: in function 'candidate'\\n\\t/tmp/tmpicgan2w5.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3r3ocbss.lua:34:\
    \ attempt to concatenate local 'strongest_extension' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmp3r3ocbss.lua:34: in function 'candidate'\\n\\t/tmp/tmp3r3ocbss.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp04dc0_pt.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp04dc0_pt.lua:21: in function 'candidate'\\n\\t/tmp/tmp04dc0_pt.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n\tlocal strongest_extension = extensions[1]\n\tlocal strongest_extension_strength\
    \ = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal extension_strength\
    \ = 0\n\t\tfor _, char in ipairs(extension) do\n\t\t\tif char:match('%u') then\n\
    \t\t\t\textension_strength = extension_strength + 1\n\t\t\telseif char:match('%l')\
    \ then\n\t\t\t\textension_strength = extension_strength - 1\n\t\t\tend\n\t\tend\n\
    \t\tif extension_strength > strongest_extension_strength then\n\t\t\tstrongest_extension\
    \ = extension\n\t\t\tstrongest_extension_strength = extension_strength\n\t\tend\n\
    \tend\n\treturn class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpnnizggph.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpnnizggph.lua:21: in function 'candidate'\\n\\t/tmp/tmpnnizggph.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9cxx2oe9.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp9cxx2oe9.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:isupper()\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:islower() then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = extension_strength\n      \
    \      strongest_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptu9lfk7g.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmptu9lfk7g.lua:21: in function 'candidate'\\n\\t/tmp/tmptu9lfk7g.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_strength =\
    \ 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n   \
    \ for _, char in ipairs(extension) do\n      if char:match('%u') then\n      \
    \  strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_1s5rd29.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp_1s5rd29.lua:21: in function 'candidate'\\n\\t/tmp/tmp_1s5rd29.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp91qpjjrh.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp91qpjjrh.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for i, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for j = 1, #extension do\n      if extension:sub(j, j):match('%u') then\n\
    \        strength = strength + 1\n      elseif extension:sub(j, j):match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1g_q4yvi.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp1g_q4yvi.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('[a-z]') then\n    \
    \            extension_strength = extension_strength - 1\n            end\n  \
    \      end\n        if extension_strength > strongest_extension_strength then\n\
    \            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx1901qec.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpx1901qec.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpo6eo8ia6.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpo6eo8ia6.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpq2pqdc91.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpq2pqdc91.lua:21: in function 'candidate'\\n\\t/tmp/tmpq2pqdc91.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for i = 1, #extensions do\n        local strength = 0\n        for\
    \ j = 1, #extensions[i] do\n            if extensions[i]:sub(j, j):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extensions[i]:sub(j,\
    \ j):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extensions[i]\n        end\n \
    \   end\n    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwfbphts9.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpwfbphts9.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = nil\n  local strongest_strength =\
    \ 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n   \
    \ for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if char:match('[A-Z]')\
    \ then\n        strength = strength + 1\n      elseif char:match('[a-z]') then\n\
    \        strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpe7muv218.lua:34:\
    \ attempt to concatenate local 'strongest_extension' (a nil value)\\nstack traceback:\\\
    n\\t/tmp/tmpe7muv218.lua:34: in function 'candidate'\\n\\t/tmp/tmpe7muv218.lua:42:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif extension:sub(i, i):match('%l') then\n                extension_strength\
    \ = extension_strength - 1\n            end\n        end\n        if extension_strength\
    \ > strongest_extension_strength then\n            strongest_extension = extension\n\
    \            strongest_extension_strength = extension_strength\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcw6ugxor.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpcw6ugxor.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for char in extension:gmatch(\"%a\") do\n            if char:match(\"\
    %u\") then\n                extension_strength = extension_strength + 1\n    \
    \        else\n                extension_strength = extension_strength - 1\n \
    \           end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = extension_strength\n      \
    \      strongest_extension = extension\n        end\n    end\n    return class_name\
    \ .. \".\" .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_b_yf3lt.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp_b_yf3lt.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpldn6s2dh.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpldn6s2dh.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.002 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkh4grxsb.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpkh4grxsb.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('[A-Z]')\
    \ then\n                strength = strength + 1\n            elseif char:match('[a-z]')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1def4dhy.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp1def4dhy.lua:21: in function 'candidate'\\n\\t/tmp/tmp1def4dhy.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for i = 1, #extensions do\n    local extension = extensions[i]\n    local\
    \ extension_strength = 0\n    for j = 1, #extension do\n      local char = extension:sub(j,\
    \ j)\n      if char:match('[A-Z]') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('[a-z]') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplrctdqls.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmplrctdqls.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8zg_jm1a.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp8zg_jm1a.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc7zdzi7c.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpc7zdzi7c.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg72vd5h0.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpg72vd5h0.lua:21: in function 'candidate'\\n\\t/tmp/tmpg72vd5h0.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest = 0\n    local strongest_extension = ''\n \
    \   for _, extension in ipairs(extensions) do\n        local strength = 0\n  \
    \      for i = 1, #extension do\n            local char = extension:sub(i, i)\n\
    \            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest\
    \ then\n            strongest = strength\n            strongest_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. strongest_extension\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpu53l2obq.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpu53l2obq.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp604qos4m.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp604qos4m.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb4p31j2y.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpb4p31j2y.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for i, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for j = 1, #extension do\n      if extension:sub(j, j):match('%u') then\n\
    \        strength = strength + 1\n      elseif extension:sub(j, j):match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpzm0wc2gz.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpzm0wc2gz.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      if extension:sub(i, i):match('%u')\
    \ then\n        extension_strength = extension_strength + 1\n      elseif extension:sub(i,\
    \ i):match('%l') then\n        extension_strength = extension_strength - 1\n \
    \     end\n    end\n    if extension_strength > strongest_extension_strength then\n\
    \      strongest_extension = extension\n      strongest_extension_strength = extension_strength\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptcgx2sl6.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmptcgx2sl6.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('[A-Z]') then\n \
    \       strength = strength + 1\n      elseif char:match('[a-z]') then\n     \
    \   strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp6nv_1pn1.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp6nv_1pn1.lua:21: in function 'candidate'\\n\\t/tmp/tmp6nv_1pn1.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:find('%u') then\n     \
    \   strength = strength + 1\n      elseif char:find('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp1_y08uk7.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp1_y08uk7.lua:21: in function 'candidate'\\n\\t/tmp/tmp1_y08uk7.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            if string.find(extension, \"\
    [A-Z]\") then\n                strength = strength + 1\n            elseif string.find(extension,\
    \ \"[a-z]\") then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. \".\" .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpazcwhjyv.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.123NoooneB321\"\\nstack\
    \ traceback:\\n\\t/tmp/tmpazcwhjyv.lua:41: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpm8hyji8n.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpm8hyji8n.lua:21: in function 'candidate'\\n\\t/tmp/tmpm8hyji8n.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest = 0\n  local strongest_extension = ''\n  for\
    \ _, extension in ipairs(extensions) do\n    local strength = 0\n    for i = 1,\
    \ #extension do\n      if extension:sub(i, i):match('%u') then\n        strength\
    \ = strength + 1\n      elseif extension:sub(i, i):match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest then\n     \
    \ strongest = strength\n      strongest_extension = extension\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp574n6982.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp574n6982.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('[A-Z]')\
    \ then\n                strength = strength + 1\n            elseif char:match('[a-z]')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxeu18l48.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpxeu18l48.lua:21: in function 'candidate'\\n\\t/tmp/tmpxeu18l48.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2qnr76w9.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp2qnr76w9.lua:21: in function 'candidate'\\n\\t/tmp/tmp2qnr76w9.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplhqmqm7r.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmplhqmqm7r.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension_name = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension_name = extension\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension_name\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkbpm4g7w.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpkbpm4g7w.lua:21: in function 'candidate'\\n\\t/tmp/tmpkbpm4g7w.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpstigpuk9.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpstigpuk9.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:match('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpe6021wvp.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpe6021wvp.lua:21: in function 'candidate'\\n\\t/tmp/tmpe6021wvp.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:find('%u') then\n                strength = strength\
    \ + 1\n            elseif char:find('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplav5vhfs.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmplav5vhfs.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpxwdydwiq.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpxwdydwiq.lua:21: in function 'candidate'\\n\\t/tmp/tmpxwdydwiq.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('%u') then\n                strength = strength +\
    \ 1\n            elseif c:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8a7ww5vk.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp8a7ww5vk.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpoxz4bbam.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpoxz4bbam.lua:21: in function 'candidate'\\n\\t/tmp/tmpoxz4bbam.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfosp_uxi.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpfosp_uxi.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = {\n        name = '',\n       \
    \ strength = 0\n    }\n    for _, extension in ipairs(extensions) do\n       \
    \ local strength = 0\n        for _, char in ipairs(extension) do\n          \
    \  if char:match('%u') then\n                strength = strength + 1\n       \
    \     elseif char:match('%l') then\n                strength = strength - 1\n\
    \            end\n        end\n        if strength > strongest_extension.strength\
    \ then\n            strongest_extension.name = extension\n            strongest_extension.strength\
    \ = strength\n        end\n    end\n    return class_name .. '.' .. strongest_extension.name\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2xkup43t.lua:23:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp2xkup43t.lua:23: in function 'candidate'\\n\\t/tmp/tmp2xkup43t.lua:41:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2gux10w7.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp2gux10w7.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif extension:sub(i, i):match('%l') then\n                extension_strength\
    \ = extension_strength - 1\n            end\n        end\n        if extension_strength\
    \ > strongest_extension_strength then\n            strongest_extension = extension\n\
    \            strongest_extension_strength = extension_strength\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6prnuoa0.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp6prnuoa0.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, letter in ipairs(extension) do\n            if letter:match('%u')\
    \ then\n                strength = strength + 1\n            elseif letter:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp_dagypow.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp_dagypow.lua:21: in function 'candidate'\\n\\t/tmp/tmp_dagypow.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:find('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:find('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy8srt_cv.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpy8srt_cv.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp49_e6465.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp49_e6465.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:find('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:find('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpshopwlbg.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpshopwlbg.lua:21: in function 'candidate'\\n\\t/tmp/tmpshopwlbg.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strength = 0\n    local strongest_extension = ''\n  \
    \  for i = 1, #extensions do\n        local ext = extensions[i]\n        local\
    \ cap = 0\n        local sm = 0\n        for j = 1, #ext do\n            local\
    \ c = ext:sub(j, j)\n            if c:match('%u') then\n                cap =\
    \ cap + 1\n            elseif c:match('%l') then\n                sm = sm + 1\n\
    \            end\n        end\n        local cur_strength = cap - sm\n       \
    \ if cur_strength > strength then\n            strength = cur_strength\n     \
    \       strongest_extension = ext\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4fopk1wf.lua:45:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp4fopk1wf.lua:45: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('%u') then\n        strength = strength + 1\n      elseif char:match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpy_9om8d7.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpy_9om8d7.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = \"\"\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char == char:upper() then\n                strength = strength\
    \ + 1\n            else\n                strength = strength - 1\n           \
    \ end\n        end\n        if strength > strongest_extension_strength then\n\
    \            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. \".\" .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpbxyj0zht.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.123NoooneB321\"\\nstack\
    \ traceback:\\n\\t/tmp/tmpbxyj0zht.lua:42: in function \\'test_humaneval\\'\\\
    n\\nRan 1 tests in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp10v35xg5.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp10v35xg5.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmptbj4xcgv.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmptbj4xcgv.lua:21: in function 'candidate'\\n\\t/tmp/tmptbj4xcgv.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnhrburvh.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpnhrburvh.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpslobcdf5.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpslobcdf5.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, letter in ipairs(extension) do\n      if letter:upper() == letter then\n\
    \        strength = strength + 1\n      else\n        strength = strength - 1\n\
    \      end\n    end\n    if strength > strongest_extension_strength then\n   \
    \   strongest_extension_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpa08gncdz.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpa08gncdz.lua:21: in function 'candidate'\\n\\t/tmp/tmpa08gncdz.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.000 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension_name = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension_name\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension_name\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2dq3ton_.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp2dq3ton_.lua:21: in function 'candidate'\\n\\t/tmp/tmp2dq3ton_.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                extension_strength\
    \ = extension_strength + 1\n            elseif char:match('%l') then\n       \
    \         extension_strength = extension_strength - 1\n            end\n     \
    \   end\n        if extension_strength > strongest_extension_strength then\n \
    \           strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi1ep6ynm.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpi1ep6ynm.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg7ue9fqk.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpg7ue9fqk.lua:21: in function 'candidate'\\n\\t/tmp/tmpg7ue9fqk.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('[A-Z]') then\n        strength = strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpersppw_0.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpersppw_0.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_strength =\
    \ 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n   \
    \ for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if char:match('%u')\
    \ then\n        strength = strength + 1\n      elseif char:match('%l') then\n\
    \        strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp20c8f7h1.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmp20c8f7h1.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = \"\"\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match(\"[A-Z]\"\
    ) then\n        extension_strength = extension_strength + 1\n      elseif char:match(\"\
    [a-z]\") then\n        extension_strength = extension_strength - 1\n      end\n\
    \    end\n    if extension_strength > strongest_extension_strength then\n    \
    \  strongest_extension = extension\n      strongest_extension_strength = extension_strength\n\
    \    end\n  end\n  return class_name .. \".\" .. strongest_extension\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpp3dbwaq_.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpp3dbwaq_.lua:21: in function 'candidate'\\n\\t/tmp/tmpp3dbwaq_.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strength = 0\n  local strongest_extension = ''\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = extension:gsub('[^A-Z]',\
    \ ''):len()\n    local sm = extension:gsub('[^a-z]', ''):len()\n    local current_strength\
    \ = cap - sm\n    if current_strength > strength then\n      strength = current_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjb9yo0ca.lua:36:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpjb9yo0ca.lua:36: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6t3v7p4i.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp6t3v7p4i.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local max_strength = 0\n  local strongest_extension = ''\n  for\
    \ _, extension in ipairs(extensions) do\n    local strength = 0\n    for i = 1,\
    \ #extension do\n      local char = extension:sub(i, i)\n      if char:match('[A-Z]')\
    \ then\n        strength = strength + 1\n      elseif char:match('[a-z]') then\n\
    \        strength = strength - 1\n      end\n    end\n    if strength > max_strength\
    \ then\n      max_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprlaieqs6.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmprlaieqs6.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local c = extension:sub(i, i)\n   \
    \   if c:match('%u') then\n        extension_strength = extension_strength + 1\n\
    \      elseif c:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5f2ndb0r.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp5f2ndb0r.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest = {strength = 0, name = ''}\n    for _, ext\
    \ in ipairs(extensions) do\n        local strength = 0\n        for i = 1, #ext\
    \ do\n            if ext:sub(i, i):match('%u') then\n                strength\
    \ = strength + 1\n            elseif ext:sub(i, i):match('%l') then\n        \
    \        strength = strength - 1\n            end\n        end\n        if strength\
    \ > strongest.strength then\n            strongest.strength = strength\n     \
    \       strongest.name = ext\n        end\n    end\n    return class_name .. '.'\
    \ .. strongest.name\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe23yosef.lua:40:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpe23yosef.lua:40: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpexijdcog.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpexijdcog.lua:21: in function 'candidate'\\n\\t/tmp/tmpexijdcog.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptaqu0845.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmptaqu0845.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for i, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for j = 1, #extension do\n      local char = extension:sub(j, j)\n      if\
    \ char:match('[A-Z]') then\n        strength = strength + 1\n      elseif char:match('[a-z]')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1xk39hhj.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp1xk39hhj.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = extension_strength\n      \
    \      strongest_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpf3oeeqlr.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpf3oeeqlr.lua:21: in function 'candidate'\\n\\t/tmp/tmpf3oeeqlr.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for _, char in ipairs(extension) do\n      if char:match('%u') then\n\
    \        extension_strength = extension_strength + 1\n      elseif char:match('%l')\
    \ then\n        extension_strength = extension_strength - 1\n      end\n    end\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_strength\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp3eo6chn5.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp3eo6chn5.lua:21: in function 'candidate'\\n\\t/tmp/tmp3eo6chn5.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local c = extension:sub(i,\
    \ i)\n            if c:match('%u') then\n                strength = strength +\
    \ 1\n            elseif c:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_bwnks4g.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp_bwnks4g.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = 0\n    for i = 1, #extension do\n      local char = extension:sub(i, i)\n\
    \      if char:match('%u') then\n        extension_strength = extension_strength\
    \ + 1\n      elseif char:match('%l') then\n        extension_strength = extension_strength\
    \ - 1\n      end\n    end\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension = extension\n      strongest_extension_strength\
    \ = extension_strength\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf0rmkxcs.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpf0rmkxcs.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for _, char in ipairs(extension) do\n      if char:match('%u') then\n    \
    \    strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpg0ldf8km.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpg0ldf8km.lua:21: in function 'candidate'\\n\\t/tmp/tmpg0ldf8km.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpkipe2sku.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpkipe2sku.lua:21: in function 'candidate'\\n\\t/tmp/tmpkipe2sku.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi_vd01cf.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpi_vd01cf.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpssr2zz93.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpssr2zz93.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppmfnap0y.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmppmfnap0y.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            if extension:sub(i, i):match('%u')\
    \ then\n                strength = strength + 1\n            elseif extension:sub(i,\
    \ i):match('%l') then\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7zq3d2hz.lua:41:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp7zq3d2hz.lua:41: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpl511jke1.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpl511jke1.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:isupper()\
    \ then\n                strength = strength + 1\n            elseif char:islower()\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_strength then\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp4u98jqq0.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp4u98jqq0.lua:21: in function 'candidate'\\n\\t/tmp/tmp4u98jqq0.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpgx4_xf14.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpgx4_xf14.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  -- your code here\n  local strongest = 0\n  local strongest_extension\
    \ = \"\"\n  for i, extension in ipairs(extensions) do\n    local cap = 0\n   \
    \ local sm = 0\n    for j = 1, #extension do\n      if extension:sub(j, j):match(\"\
    %u\") then\n        cap = cap + 1\n      elseif extension:sub(j, j):match(\"%l\"\
    ) then\n        sm = sm + 1\n      end\n    end\n    if cap - sm > strongest then\n\
    \      strongest = cap - sm\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. \".\" .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn_hw78ii.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpn_hw78ii.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('%u') then\n        strength = strength + 1\n      elseif char:match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_strength then\n      strongest_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpse5_mf_4.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpse5_mf_4.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = extensions[1]\n  local strongest_extension_strength\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      local char = extension:sub(i, i)\n      if\
    \ char:match('%u') then\n        strength = strength + 1\n      elseif char:match('%l')\
    \ then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpx300ol3b.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmpx300ol3b.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    -- your code here\n    local strength = 0\n    local strongest\
    \ = ''\n    for _, ext in ipairs(extensions) do\n        local cap = 0\n     \
    \   local sm = 0\n        for i = 1, #ext do\n            if ext:sub(i, i):match('%u')\
    \ then\n                cap = cap + 1\n            elseif ext:sub(i, i):match('%l')\
    \ then\n                sm = sm + 1\n            end\n        end\n        if\
    \ cap - sm > strength then\n            strength = cap - sm\n            strongest\
    \ = ext\n        end\n    end\n    return class_name .. '.' .. strongest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj0zxnmps.lua:43:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpj0zxnmps.lua:43: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local extension_strength\
    \ = 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                extension_strength = extension_strength + 1\n        \
    \    elseif char:match('%l') then\n                extension_strength = extension_strength\
    \ - 1\n            end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpvd3v3wb2.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpvd3v3wb2.lua:21: in function 'candidate'\\n\\t/tmp/tmpvd3v3wb2.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  local strongest_extension = ''\n  local strongest_strength =\
    \ 0\n  for _, extension in ipairs(extensions) do\n    local strength = 0\n   \
    \ for _, char in ipairs(extension) do\n      if char:match('%u') then\n      \
    \  strength = strength + 1\n      elseif char:match('%l') then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmp2clhp6fw.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmp2clhp6fw.lua:21: in function 'candidate'\\n\\t/tmp/tmp2clhp6fw.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for i, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            local char = extension:sub(j,\
    \ j)\n            if char:match('%u') then\n                strength = strength\
    \ + 1\n            elseif char:match('%l') then\n                strength = strength\
    \ - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_t56myl1.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp_t56myl1.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for i = 1, #extension do\n            local char = extension:sub(i,\
    \ i)\n            if char:match('[A-Z]') then\n                strength = strength\
    \ + 1\n            elseif char:match('[a-z]') then\n                strength =\
    \ strength - 1\n            end\n        end\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
    \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
    \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
    \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
    \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n   \
    \ lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7o3loqjk.lua:42:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.t\"\\nstack traceback:\\\
    n\\t/tmp/tmp7o3loqjk.lua:42: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n  -- your code here\n  local strongest = 0\n  local strongest_extension\
    \ = ''\n  for i, v in ipairs(extensions) do\n    local cap = 0\n    local sm =\
    \ 0\n    for j = 1, #v do\n      if v:sub(j, j):match('%u') then\n        cap\
    \ = cap + 1\n      elseif v:sub(j, j):match('%l') then\n        sm = sm + 1\n\
    \      end\n    end\n    local strength = cap - sm\n    if strength > strongest\
    \ then\n      strongest = strength\n      strongest_extension = v\n    end\n \
    \ end\n  return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpivdbon3b.lua:44:\
    \ expected: \"__YESIMHERE.NuLl__\"\\nactual: \"__YESIMHERE.\"\\nstack traceback:\\\
    n\\t/tmp/tmpivdbon3b.lua:44: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- You will be given the name of a class (a string) and a list of extensions.\n\
    -- The extensions are to be used to load additional classes to the class. The\n\
    -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    -- letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n-- You should find the strongest extension and return a string in this \n\
    -- format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
    \ with the same strength, you should\n-- choose the one that comes first in the\
    \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
    \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    -- return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n-- (its strength is -1).\n-- Example:\n-- for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
    \ extensions)\n    local strongest_extension = extensions[1]\n    local strongest_extension_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for _, char in ipairs(extension) do\n            if char:match('%u')\
    \ then\n                strength = strength + 1\n            elseif char:match('%l')\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n    lu.assertEquals(candidate('Watashi',\
    \ {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n    lu.assertEquals(candidate('Boku123',\
    \ {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}), 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE',\
    \ {'t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n\
    \    lu.assertEquals(candidate('K', {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n\
    \    lu.assertEquals(candidate('__HAHA', {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n\
    \    lu.assertEquals(candidate('YameRore', {'HhAas', 'okIWILL123', 'WorkOut',\
    \ 'Fails', '-_-'}), 'YameRore.okIWILL123')\n    lu.assertEquals(candidate('finNNalLLly',\
    \ {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n    lu.assertEquals(candidate('_',\
    \ {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp', {'671235', 'Bb'}),\
    \ 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b\"E\\nTests with errors:\\n------------------\\n1) test_humaneval\\n/tmp/tmpofzwqny9.lua:21:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\\nstack traceback:\\\
    n\\t/tmp/tmpofzwqny9.lua:21: in function 'candidate'\\n\\t/tmp/tmpofzwqny9.lua:39:\
    \ in function 'test_humaneval'\\n\\nRan 1 tests in 0.001 seconds, 0 successes,\
    \ 1 error\\n\""
  stderr: b''
  exit_code: 1
  status: Exception
