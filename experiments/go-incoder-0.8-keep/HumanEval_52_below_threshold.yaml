name: HumanEval_52_below_threshold
language: go_test.go
prompt: "package below_threshold_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Return True if all numbers in the list l are below threshold t.\n// >>>\
  \ below_threshold([1, 2, 4, 10], 100)\n// True\n// >>> below_threshold([1, 20, 4,\
  \ 10], 5)\n// False\nfunc below_threshold(l []int, t int) bool {\n"
tests: "func TestBelow_Threshold(t *testing.T) {\n  candidate := below_threshold\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}, 100), expected:\
  \ true },\n     { actual: candidate([]int{1, 20, 4, 10}, 5), expected: false },\n\
  \     { actual: candidate([]int{1, 20, 4, 10}, 21), expected: true },\n     { actual:\
  \ candidate([]int{1, 20, 4, 10}, 22), expected: true },\n     { actual: candidate([]int{1,\
  \ 8, 4, 10}, 11), expected: true },\n     { actual: candidate([]int{1, 8, 4, 10},\
  \ 10), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: []
stop_tokens:
- "\nfunc"
- struct
- "\n// "
