name: HumanEval_14_all_prefixes
language: js
prompt: "//Return array of all prefixes from shortest to longest of the input string\n\
  // >>> all_prefixes(\"abc\")\n// [\"a\", \"ab\", \"abc\"]\nfunction all_prefixes(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n  assert.deepEqual(candidate(\"\
  asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"\
  WWW\"),[\"W\", \"WW\", \"WWW\"]);\n}\n\ntest();"
completions: ["    // Your code here\n    var result = [];\n    for (var i = 1; i\
    \ <= string.length; i++){\n        result.push(string.slice(0, i));\n    }\n \
    \   return result;\n}\n", "    var prefixes = []\n    var prefix = \"\"\n    for\
    \ (i=0; i<string.length; i++){\n        prefix = prefix + string[i]\n        prefixes.push(prefix)\n\
    \    }\n    return prefixes\n}\n", "  let prefix_array = [];\n  for (let i = 0;\
    \ i < string.length; i++){\n    prefix_array.push(string.slice(0, i+1));\n  }\n\
    \  return prefix_array;\n}\n", "\tvar result = [];\n\tvar string = string.split(\"\
    \");\n\tfor (var i = 0; i < string.length; i++){\n\t\tvar arr = string.slice(0,\
    \ i+1);\n\t\tvar prefix = arr.join(\"\");\n\t\tresult.push(prefix);\n\t}\n\treturn\
    \ result;\n}", "    return string.split(\"\").map(function(x,i){return string.slice(0,i+1)});\n\
    }\n", "    var prefixes = [],\n        i;\n    for (i = 1; i <= string.length;\
    \ i++) {\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n\
    }\n", "    var result = [];\n    for (var i = 0; i < string.length; i++) {\n \
    \       result.push(string.slice(0, i+1));\n    }\n    return result;\n}\n", " \
    \ var array_prefixes = [];\n  for (var i = 0; i < string.length; i++){\n    array_prefixes.push(string.slice(0,\
    \ i+1));\n  }\n  return array_prefixes;\n}\n", "  var prefixes = [];\n  for (var\
    \ i = 0; i < string.length; i++){\n    prefixes.push(string.slice(0,i+1));\n \
    \ }\n  return prefixes;\n}\n", "  var result = []\n  for (var i = 1; i <= string.length;\
    \ i++){\n    result.push(string.slice(0, i))\n  }\n  return result\n}\n", "  return\
    \ string.split(\"\").map(function(_, i){ return string.slice(0, i+1); });\n}\n",
  "    let result = [];\n    for (let i = 0; i < string.length; i++){\n        result.push(string.slice(0,\
    \ i+1));\n    }\n    return result;\n}\n", "    var prefixes = [];\n    for (i\
    \ = 0; i < string.length; i++){\n      prefixes.push(string.slice(0, i+1));\n\
    \    }\n    return prefixes;\n}\n", "    var prefixes = [];\n    for (var i =\
    \ 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i+1));\n\
    \    }\n    return prefixes;\n}\n", "    var prefixes = [];\n    for (var i =\
    \ 0; i < string.length; i++){\n        prefixes.push(string.slice(0, i+1));\n\
    \    }\n    return prefixes;\n}\n", "\tlet result = [];\n\tfor (let i = 0; i <\
    \ string.length; i++){\n\t\tresult.push(string.slice(0, i+1));\n\t}\n\treturn\
    \ result;\n}\n", "\tvar prefixes = [];\n\tfor (var i = 0; i < string.length; i++){\n\
    \t\tprefixes.push(string.slice(0,i+1));\n\t}\n\treturn prefixes;\n}", "\n}\n",
  "    var array = [],\n        short;\n    for(var i = 0; i < string.length; i++){\n\
    \        short = string.slice(0, i+1);\n        array.push(short);\n    }\n  \
    \  return array;\n}\n", "    var output = []\n    for (var i = 1; i < string.length\
    \ + 1; i++){\n        output.push(string.slice(0, i))\n    }\n    return output\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
