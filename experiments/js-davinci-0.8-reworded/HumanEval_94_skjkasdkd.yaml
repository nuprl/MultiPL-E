name: HumanEval_94_skjkasdkd
language: js
prompt: "//You are given an array of integers.\n// You need to find the largest prime\
  \ value and return the sum of its digits.\n// Examples:\n// >>> skjkasdkd([0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])\n// 10\n//\
  \ >>> skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])\n//\
  \ 25\n// >>> skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30,\
  \ 1, 9, 3])\n// 13\n// >>> skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0,\
  \ 5, 6])\n// 11\n// >>> skjkasdkd([0, 81, 12, 3, 1, 21])\n// 3\n// >>> skjkasdkd([0,\
  \ 8, 1, 2, 1, 7])\n// 7\nfunction skjkasdkd(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = skjkasdkd;\n  assert.deepEqual(candidate([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2,\
  \ 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]),10);\n  assert.deepEqual(candidate([1, 0,\
  \ 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]),25);\n  assert.deepEqual(candidate([1,\
  \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13);\n  assert.deepEqual(candidate([0,\
  \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]),11);\n  assert.deepEqual(candidate([0,\
  \ 81, 12, 3, 1, 21]),3);\n  assert.deepEqual(candidate([0, 8, 1, 2, 1, 7]),7);\n\
  \  assert.deepEqual(candidate([8191]),19);\n  assert.deepEqual(candidate([8191,\
  \ 123456, 127, 7]),19);\n  assert.deepEqual(candidate([127, 97, 8192]),10);\n}\n\
  \ntest();"
completions: ["  let lst1 = lst.filter(num => num>1)\n  let lst2 = lst1.filter(num\
    \ => is_prime(num))\n  let largest = Math.max(...lst2)\n  let largest_str = largest.toString()\n\
    \  let sum = 0\n  for (let i=0; i<largest_str.length; i++){\n    sum += Number(largest_str[i])\n\
    \  }\n  return sum\n}\n", "    let primes = [];\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(isPrime(lst[i])){\n            primes.push(lst[i]);\n    \
    \    }\n    }\n    let largest = 0;\n    for(let i = 0; i < primes.length; i++){\n\
    \        if(primes[i] > largest){\n            largest = primes[i];\n        }\n\
    \    }\n    let largestString = largest.toString();\n    let total = 0;\n    for(let\
    \ i = 0; i < largestString.length; i++){\n        total += Number(largestString[i]);\n\
    \    }\n    return total;\n}", "  var largestPrime = 0;\n  for(var i = 0; i <\
    \ lst.length; i++){\n    if(isPrime(lst[i]) && largestPrime < lst[i]){\n     \
    \ largestPrime = lst[i];\n    }\n  }\n  var str = largestPrime.toString();\n \
    \ var sum = 0;\n  for(var j = 0; j < str.length; j++){\n    sum += Number(str[j]);\n\
    \  }\n  return sum;\n}\n", "    let sums = lst.map(el => el.toString().split('').reduce((acc,\
    \ el) => acc + Number(el), 0));\n    let arr = lst.map((el, ind) => {\n      \
    \  if (el !== 0 && el !== 1 && sums[ind] < 10) {\n            return true;\n \
    \       }\n        return false;\n    });\n    return arr.includes(true) ? Math.max(...lst)\
    \ : Math.max(...sums);\n}", "    let maxPrimeValue = 0;\n    let sum = 0;\n  \
    \  for(let i=0; i<lst.length; i++){\n        if(lst[i]>maxPrimeValue && isPrime(lst[i])){\n\
    \            maxPrimeValue = lst[i];\n        }\n    }\n    while(maxPrimeValue){\n\
    \        sum += maxPrimeValue%10;\n        maxPrimeValue = Math.floor(maxPrimeValue/10);\n\
    \    }\n    return sum;\n}\n", "    var largestPrime = 0;\n    for(var i = 0;\
    \ i < lst.length; i++){\n        var currentNumber = lst[i];\n        if(isPrime(currentNumber)){\n\
    \            largestPrime = currentNumber;\n        }\n    }\n    var sum = 0;\n\
    \    while(largestPrime > 0){\n        sum += largestPrime % 10;\n        largestPrime\
    \ = Math.floor(largestPrime / 10);\n    }\n    return sum;\n}\n", "\tlet primes\
    \ = findPrimes(Math.max(...lst));\n\tprimes = primes.filter(x => lst.includes(x));\n\
    \tlet largest = Math.max(...primes);\n\tlet sum = 0;\n\tfor(let i of largest.toString()){\n\
    \t\tsum += Number(i);\n\t}\n\treturn sum;\n}\n", "    let max = 0\n    for(let\
    \ n of lst){\n        if(isPrime(n) && n > max){\n            max = n\n      \
    \  }\n    }\n    return digitSum(max)\n}\n", "    var results = [];\n    for (var\
    \ i = 0; i < lst.length; i++){\n        if (lst[i] > 0 && isPrime(lst[i])){\n\
    \            results.push(lst[i]);\n        }\n    }\n    var largest = Math.max.apply(null,\
    \ results);\n    return lst.reduce(function(a, b){return a + b;}, 0);\n}\n", " \
    \ let largestPrime = 0;\n  for(let i = 0; i < lst.length; i++){\n    if(isPrime(lst[i])\
    \ === true){\n      if(lst[i] > largestPrime){\n        largestPrime = lst[i];\n\
    \      }\n    }\n  }\n  return sumOfDigits(largestPrime);\n}", "  return false;\n\
    }", "    let largest = 0;\n    for(i = 0; i < lst.length; i++){\n        if(largest\
    \ < lst[i]){\n            largest = lst[i];\n        }\n    }\n    console.log(largest);\n\
    \    var sum = 0;\n    while(largest>0){\n        sum += largest%10;\n       \
    \ largest = parseInt(largest/10);\n    }\n    return sum;\n}\nskjkasdkd([0, 3,\
    \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]);\nskjkasdkd([1,\
    \ 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]);\nskjkasdkd([1, 3, 1,\
    \ 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]);\nskjkasdkd([0, 724,\
    \ 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]);\nskjkasdkd([0, 81, 12, 3, 1, 21]);\n\
    skjkasdkd([0, 8, 1, 2, 1, 7]);", "    function prime(n){\n        if (n<2) return\
    \ false;\n        for (let i=2; i<=Math.sqrt(n); i++){\n            if (n%i==0)\
    \ return false;\n        }\n        return true;\n    }\n    let max = Math.max(...lst.filter(x=>prime(x)));\n\
    \    let digits = String(max).split('');\n    let sum = 0;\n    for (let i=0;\
    \ i<digits.length; i++){\n        sum += Number(digits[i]);\n    }\n    return\
    \ sum;\n}", "    return sum_of_digits(largest_prime(lst));\n}\n", "    var x,\
    \ y, z;\n    var largest_prime = 0;\n    var answer = 0;\n    for (x = 0; x <\
    \ lst.length; x++){\n        if (lst[x] == 2){\n            largest_prime = 2;\n\
    \        } else if (lst[x] % 2 != 0){\n            var prime = true;\n       \
    \     for (y = 3; y < lst[x]; y++){\n                if (lst[x] % y == 0){\n \
    \                   prime = false;\n                }\n            }\n       \
    \     if (prime){\n                if (lst[x] > largest_prime){\n            \
    \        largest_prime = lst[x];\n                }\n            }\n        }\n\
    \    }\n    var string_num = largest_prime.toString();\n    for (z = 0; z < string_num.length;\
    \ z++){\n        answer += parseInt(string_num[z]);\n    }\n    return answer;\n\
    }\n", "    let arr = lst.map( x => {\n        return x.toString().split('').reduce(\
    \ (a,b) => +a + +b )\n    }).sort( (a,b) => b - a )\n    let arr1 = arr.filter(\
    \ x => {\n        for(let i = 2; i < x; i++){\n            if(x % i === 0)\n \
    \               return false\n        }\n        return true\n    })\n    return\
    \ arr1[0]\n}", "    var max=lst[0];\n    for(var i=0;i<lst.length;i++){\n    \
    \    if(lst[i]>max){\n            max=lst[i];\n        }\n    }\n    var sum=0;\n\
    \    while(max>0){\n        sum=sum+max%10;\n        max=Math.floor(max/10);\n\
    \    }\n    return sum;\n}", "    var largest_prime = Math.max.apply(null,lst.filter(function(n){return\
    \ isPrime(n)}));\n    return largest_prime.toString().split('').reduce(function(a,b){return\
    \ parseInt(a)+parseInt(b)},0);\n}", "    if(lst.length == 0){\n        return\
    \ 0;\n    }\n    function isPrime(n){\n        if(n < 2){\n            return\
    \ false;\n        }\n        for(let i = 2; i < n; i++){\n            if(n % i\
    \ == 0){\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    let maxPrime = -1;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(isPrime(lst[i]) && lst[i] > maxPrime){\n            maxPrime = lst[i];\n\
    \        }\n    }\n    let str = maxPrime.toString();\n    let sum = 0;\n    for(let\
    \ i = 0; i < str.length; i++){\n        sum += parseInt(str[i]);\n    }\n    return\
    \ sum;\n}\n", "    let max = 0;\n    let result = 0;\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] > max && isPrime(lst[i])) {\n       \
    \     max = lst[i];\n        }\n    }\n    while (max > 0) {\n        result +=\
    \ max % 10;\n        max = Math.floor(max / 10);\n    }\n    return result;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
