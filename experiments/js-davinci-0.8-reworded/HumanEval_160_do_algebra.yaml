name: HumanEval_160_do_algebra
language: js
prompt: "//Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n// the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n// expression and return the evaluation of this\
  \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
  \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
  \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n//\
  \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
  \ array is equal to the length of operand array minus one.\n// Operand is an array\
  \ of of non-negative integers.\n// Operator array has at least one operator, and\
  \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
  \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
  \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
completions: ["    let result;\n    for(let i = 0; i < operator.length; i++){\n  \
    \      if(operator[i] === '+'){\n            if(!result){\n                result\
    \ = operand[i] + operand[i+1];\n            }else{\n                result +=\
    \ operand[i+1];\n            }\n        }\n        if(operator[i] === '-'){\n\
    \            if(!result){\n                result = operand[i] - operand[i+1];\n\
    \            }else{\n                result -= operand[i+1];\n            }\n\
    \        }\n        if(operator[i] === '*'){\n            if(!result){\n     \
    \           result = operand[i] * operand[i+1];\n            }else{\n        \
    \        result *= operand[i+1];\n            }\n        }\n        if(operator[i]\
    \ === '//'){\n            if(!result){\n                result = Math.floor(operand[i]\
    \ / operand[i+1]);\n            }else{\n                result = Math.floor(result\
    \ / operand[i+1]);\n            }\n        }\n        if(operator[i] === '**'){\n\
    \            if(!result){\n                result = Math.pow(operand[i], operand[i+1]);\n\
    \            }else{\n                result = Math.pow(result, operand[i+1]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    if(operator.length===0\
    \ || operand.length<2){\n        return null;\n    }\n    let result = operand[0];\n\
    \    for(let i=0; i<operator.length; i++){\n        if(operator[i]==='+'){\n \
    \           result += operand[i+1];\n        }else if(operator[i]==='-'){\n  \
    \          result -= operand[i+1];\n        }else if(operator[i]==='*'){\n   \
    \         result *= operand[i+1];\n        }else if(operator[i]==='//'){\n   \
    \         result = Math.floor(result/operand[i+1]);\n        }else if(operator[i]==='**'){\n\
    \            result = Math.pow(result, operand[i+1]);\n        }\n    }\n    return\
    \ result;\n}", "    var res = operand[0];\n    for(var i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case '+':\n               \
    \ res += operand[i+1];\n                break;\n            case '-':\n      \
    \          res -= operand[i+1];\n                break;\n            case '*':\n\
    \                res *= operand[i+1];\n                break;\n            case\
    \ '//':\n                res = Math.floor(res / operand[i+1]);\n             \
    \   break;\n            case '**':\n                res = Math.pow(res, operand[i+1]);\n\
    \                break;\n        }\n    }\n    return res;\n}\n", "    let res\
    \ = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                res += operand[i+1];\n               \
    \ break;\n            case '-':\n                res -= operand[i+1];\n      \
    \          break;\n            case '*':\n                res *= operand[i+1];\n\
    \                break;\n            case '//':\n                res = Math.floor(res\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       res = Math.pow(res, operand[i+1]);\n                break;\n        }\n\
    \    }\n    return res;\n}", "  var result = 0;\n  var operator_count = 0;\n \
    \ var operand_count = 0;\n  while(operator_count < operator.length && operand_count\
    \ < operand.length){\n    if(operator[operator_count] == '+'){\n      result +=\
    \ operand[operand_count];\n      operand_count++;\n      operator_count++;\n \
    \   }\n    else if(operator[operator_count] == '-'){\n      result -= operand[operand_count];\n\
    \      operand_count++;\n      operator_count++;\n    }\n    else if(operator[operator_count]\
    \ == '*'){\n      result *= operand[operand_count];\n      operand_count++;\n\
    \      operator_count++;\n    }\n    else if(operator[operator_count] == '//'){\n\
    \      result = Math.floor(result / operand[operand_count]);\n      operand_count++;\n\
    \      operator_count++;\n    }\n    else if(operator[operator_count] == '**'){\n\
    \      result = Math.pow(result, operand[operand_count]);\n      operand_count++;\n\
    \      operator_count++;\n    }\n  }\n  return result;\n}\nvar operator = ['+',\
    \ '*', '-'];\nvar operand = [2, 3, 4, 5];", "  const al = [], op = []\n  operator.map((v,i)\
    \ => {\n    if(v === '+' || v === '-') al.push(v)\n    else op.push(v)\n  })\n\
    \  let r1 = eval(operand.join(' '+al.join(' ')))\n  let r2 = op.map((v,i) => v\
    \ === '*' ? eval(operand[i] * operand[i+1]) : eval(operand[i] / operand[i+1]))\n\
    \  return op.length > 0 ? eval(r1 + ' ' + r2.join(' ')) : r1\n}\n", "    let result\
    \ = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i]\
    \ === '+'){\n            result += operand[i+1];\n        }\n        if(operator[i]\
    \ === '-'){\n            result -= operand[i+1];\n        }\n        if(operator[i]\
    \ === '*'){\n            result *= operand[i+1];\n        }\n        if(operator[i]\
    \ === '//'){\n            result = Math.floor(result / operand[i+1]);\n      \
    \  }\n        if(operator[i] === '**'){\n            result = Math.pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}", "    let result =\
    \ operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i]\
    \ === '+'){\n            result += operand[i+1];\n        }\n        if(operator[i]\
    \ === '-'){\n            result -= operand[i+1];\n        }\n        if(operator[i]\
    \ === '*'){\n            result *= operand[i+1];\n        }\n        if(operator[i]\
    \ === '//'){\n            result = Math.floor(result / operand[i+1]);\n      \
    \  }\n        if(operator[i] === '**'){\n            result = Math.pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\n", "    let result\
    \ = 0;\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                result += operand[i] + operand[i+1];\n\
    \                break;\n            case '-':\n                result -= operand[i]\
    \ - operand[i+1];\n                break;\n            case '*':\n           \
    \     result *= operand[i] * operand[i+1];\n                break;\n         \
    \   case '//':\n                result = Math.floor(operand[i] / operand[i+1]);\n\
    \                break;\n            case '**':\n                result = Math.pow(operand[i],\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\n", "  var operandReverse = operand.reverse();\n  for(var i = 0; i < operator.length;\
    \ i++){\n    if(operator[i] === \"**\"){\n      operandReverse[i] = Math.pow(operandReverse[i],\
    \ operandReverse[i+1]);\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  for(var i = 0; i < operator.length; i++){\n \
    \   if(operator[i] === \"//\"){\n      operandReverse[i] = Math.floor(operandReverse[i]\
    \ / operandReverse[i+1]);\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  for(var i = 0; i < operator.length; i++){\n \
    \   if(operator[i] === \"*\"){\n      operandReverse[i] = operandReverse[i] *\
    \ operandReverse[i+1];\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  for(var i = 0; i < operator.length; i++){\n \
    \   if(operator[i] === \"+\"){\n      operandReverse[i] = operandReverse[i] +\
    \ operandReverse[i+1];\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  for(var i = 0; i < operator.length; i++){\n \
    \   if(operator[i] === \"-\"){\n      operandReverse[i] = operandReverse[i] -\
    \ operandReverse[i+1];\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i", "    // your code here\n}", "  let newOperand = operand.slice(0,2);\n\
    \  for(let i = 0; i < operator.length; i++){\n    let index = 0;\n    let count\
    \ = 1;\n    let x = newOperand[0];\n    let y = newOperand[1];\n    switch(operator[i]){\n\
    \      case '+':\n        newOperand.splice(0,2,x+y);\n        index = newOperand.length;\n\
    \        newOperand.splice(index,0,operand[count+1]);\n        count += 1;\n \
    \       break;\n      case '-':\n        newOperand.splice(0,2,x-y);\n       \
    \ index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n      case '*':\n        newOperand.splice(0,2,x*y);\n\
    \        index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n      case '//':\n        newOperand.splice(0,2,Math.floor(x/y));\n\
    \        index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n      case '**':\n        newOperand.splice(0,2,Math.pow(x,y));\n\
    \        index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n    }\n  }\n  return newOperand[0];\n}",
  "  return operand.reduce((result, op, i) => {\n    if (i === 0) {\n      return\
    \ op;\n    }\n    switch (operator[i - 1]) {\n      case '+':\n        return\
    \ result + op;\n      case '-':\n        return result - op;\n      case '*':\n\
    \        return result * op;\n      case '//':\n        return result / op;\n\
    \      case '**':\n        return result ** op;\n    }\n  });\n}", "    return\
    \ operand.reduce((a,b,i)=>{\n        if(operator[i-1]==='+'){\n            return\
    \ a+b;\n        }\n        if(operator[i-1]==='-'){\n            return a-b;\n\
    \        }\n        if(operator[i-1]==='*'){\n            return a*b;\n      \
    \  }\n        if(operator[i-1]==='//'){\n            return Math.floor(a/b);\n\
    \        }\n        if(operator[i-1]==='**'){\n            return Math.pow(a,b);\n\
    \        }\n    })\n}", "    return eval(operand.map((v,i)=>i<1?v:`${operator[i-1]}${v}`).join(''))\n\
    }\n", "\n}", "    var result = operand[0];\n    for(var i = 0; i < operator.length;\
    \ i++){\n        if(operator[i] == '+'){\n            result += operand[i+1];\n\
    \        }\n        else if(operator[i] == '-'){\n            result -= operand[i+1];\n\
    \        }\n        else if(operator[i] == '*'){\n            result *= operand[i+1];\n\
    \        }\n        else if(operator[i] == '//'){\n            result = parseInt(result\
    \ / operand[i+1]);\n        }\n        else if(operator[i] == '**'){\n       \
    \     result = Math.pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }", "  var result = operand[0];\n  for(var i = 0; i < operator.length; i++){\n\
    \    switch(operator[i]){\n      case '+':\n        result += operand[i+1];\n\
    \        break;\n      case '-':\n        result -= operand[i+1];\n        break;\n\
    \      case '*':\n        result *= operand[i+1];\n        break;\n      case\
    \ '//':\n        result = Math.floor(result / operand[i+1]);\n        break;\n\
    \      case '**':\n        result = Math.pow(result, operand[i+1]);\n        break;\n\
    \    }\n  }\n  return result;\n}", "  var total = operand[0];\n  for (var i =\
    \ 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      total\
    \ += operand[i+1];\n    } else if (operator[i] === '-') {\n      total -= operand[i+1];\n\
    \    } else if (operator[i] === '*') {\n      total *= operand[i+1];\n    } else\
    \ if (operator[i] === '//') {\n      total = Math.floor(total / operand[i+1]);\n\
    \    } else if (operator[i] === '**') {\n      total = Math.pow(total, operand[i+1]);\n\
    \    }\n  }\n  return total;\n}\n", "    let result = operand[0];\n    for(let\
    \ i = 0; i < operator.length; i++){\n        switch(operator[i]){\n          \
    \  case '+':\n                result += operand[i+1];\n                break;\n\
    \            case '-':\n                result -= operand[i+1];\n            \
    \    break;\n            case '*':\n                result *= operand[i+1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       result = Math.pow(result, operand[i+1]);\n                break;\n   \
    \     }\n    }\n    return result;\n}", "    let result = operand[0];\n    for(let\
    \ i = 0; i < operator.length; i++){\n        if(operator[i] === '+'){\n      \
    \      result += operand[i+1];\n        }\n        if(operator[i] === '-'){\n\
    \            result -= operand[i+1];\n        }\n        if(operator[i] === '*'){\n\
    \            result *= operand[i+1];\n        }\n        if(operator[i] === '//'){\n\
    \            result = Math.floor(result / operand[i+1]);\n        }\n        if(operator[i]\
    \ === '**'){\n            result = Math.pow(result, operand[i+1]);\n        }\n\
    \    }\n    return result;\n}\n", "    let expr = '';\n    for (let i = 0; i <\
    \ operand.length - 1; i++) {\n        expr += operand[i] + operator[i];\n    }\n\
    \    expr += operand[operand.length - 1];\n    return eval(expr);\n}", "    console.log(operator);\n\
    \    console.log(operand);\n    for(var i = 0; i < operator.length; i++){\n  \
    \      switch(operator[i]){\n            case '+':\n                operand[i+1]\
    \ = operand[i] + operand[i+1];\n                break;\n            case '-':\n\
    \                operand[i+1] = operand[i] - operand[i+1];\n                break;\n\
    \            case '*':\n                operand[i+1] = operand[i] * operand[i+1];\n\
    \                break;\n            case '//':\n                operand[i+1]\
    \ = Math.floor(operand[i] / operand[i+1]);\n                break;\n         \
    \   case '**':\n                operand[i+1] = Math.pow(operand[i], operand[i+1]);\n\
    \                break;\n        }\n    }\n    return operand[operand.length-1];\n\
    }", "  var result = operand[0];\n  operand.shift();\n  for(var i = 0; i < operator.length;\
    \ i++){\n    if(operator[i] == '+'){\n      result += operand[i];\n    }\n   \
    \ if(operator[i] == '-'){\n      result -= operand[i];\n    }\n    if(operator[i]\
    \ == '*'){\n      result *= operand[i];\n    }\n    if(operator[i] == '//'){\n\
    \      result = Math.floor(result / operand[i]);\n    }\n    if(operator[i] ==\
    \ '**'){\n      result = Math.pow(result, operand[i]);\n    }\n  }\n  return result;\n\
    }", "    let num1 = operand[0];\n    let num2 = operand[1];\n    let arr = [];\n\
    \    arr.push(num1, operator[0], num2);\n    let nextNum = operand[2];\n    let\
    \ i = 1;\n    while(operand.length > 3){\n        switch(operator[i]){\n     \
    \       case \"+\":\n                arr.push(\"+\", nextNum);\n             \
    \   break;\n            case \"-\":\n                arr.push(\"-\", nextNum);\n\
    \                break;\n            case \"*\":\n                arr.push(\"\
    *\", nextNum);\n                break;\n            case \"//\":\n           \
    \     arr.push(\"//\", nextNum);\n                break;\n            case \"\
    **\":\n                arr.push(\"**\", nextNum);\n                break;\n  \
    \      }\n        nextNum = operand[i+2];\n        i++;\n    }\n    console.log(arr.join(\"\
    \ \"));\n    console.log(eval(arr.join(\" \")));\n    return eval(arr.join(\"\
    \ \"));\n}", "    let result = operand[0];\n    for(let i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case '+':\n               \
    \ result += operand[i+1];\n                break;\n            case '-':\n   \
    \             result -= operand[i+1];\n                break;\n            case\
    \ '*':\n                result *= operand[i+1];\n                break;\n    \
    \        case '//':\n                result = Math.floor(result / operand[i+1]);\n\
    \                break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "  let expression = '';\n  for (let i = 0; i < operand.length; i++) {\n  \
    \  expression += operand[i] + operator[i];\n  }\n  expression += operand[operand.length\
    \ - 1];\n  return eval(expression);\n}", "    const opeArr = operator.length;\n\
    \    const oprArr = operand.length;\n    var result = operand[0];\n    var i =\
    \ 0;\n    while(i < opeArr){\n        if(operator[i] === '+'){\n            result\
    \ += operand[i+1];\n        }else if(operator[i] === '-'){\n            result\
    \ -= operand[i+1];\n        }else if(operator[i] === '*'){\n            result\
    \ *= operand[i+1];\n        }else if(operator[i] === '//'){\n            result\
    \ = Math.floor(result / operand[i+1]);\n        }else if(operator[i] === '**'){\n\
    \            result = Math.pow(result, operand[i+1]);\n        }\n        i++;\n\
    \    }\n    return result;\n}", "    return eval(operand.join(operator).replace(/\\\
    *\\*/g, '**'));\n}\n", "    let result = operand[0];\n    for(let i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case '+':\n               \
    \ result += operand[i+1];\n                break;\n            case '-':\n   \
    \             result -= operand[i+1];\n                break;\n            case\
    \ '*':\n                result *= operand[i+1];\n                break;\n    \
    \        case '//':\n                result = Math.floor(result / operand[i+1]);\n\
    \                break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\n", "  while(operator.length>0){\n    let op=operator.shift();\n    let a=operand.shift();\n\
    \    let b=operand.shift();\n    if(op==='+'){\n      operand.unshift(a+b);\n\
    \    }\n    if(op==='-'){\n      operand.unshift(a-b);\n    }\n    if(op==='*'){\n\
    \      operand.unshift(a*b);\n    }\n    if(op==='//'){\n      operand.unshift(Math.floor(a/b));\n\
    \    }\n    if(op==='**'){\n      operand.unshift(Math.pow(a,b));\n    }\n  }\n\
    \  return operand[0];\n}\n", "  var result = operand[0];\n  for(var i = 0; i <\
    \ operator.length; i++){\n    if(operator[i] == '+'){\n      result += operand[i+1];\n\
    \    }\n    if(operator[i] == '-'){\n      result -= operand[i+1];\n    }\n  \
    \  if(operator[i] == '*'){\n      result *= operand[i+1];\n    }\n    if(operator[i]\
    \ == '//'){\n      result = Math.floor(result / operand[i+1]);\n    }\n    if(operator[i]\
    \ == '**'){\n      result = Math.pow(result, operand[i+1]);\n    }\n  }\n  return\
    \ result;\n}\n", "  let ans = operand[0];\n  for(let i = 0; i < operator.length;\
    \ i++){\n    switch(operator[i]){\n      case '+':\n        ans += operand[i+1];\n\
    \        break;\n      case '-':\n        ans -= operand[i+1];\n        break;\n\
    \      case '*':\n        ans *= operand[i+1];\n        break;\n      case '//':\n\
    \        ans = Math.floor(ans / operand[i+1]);\n        break;\n      case '**':\n\
    \        ans = Math.pow(ans, operand[i+1]);\n        break;\n    }\n  }\n  return\
    \ ans;\n}", "  \n  let sum = 0\n  let num1 = operand[0]\n  let num2 = operand[1]\n\
    \  let str = ''\n  for(i = 0; i < operator.length; i++){\n    let op = operator[i]\n\
    \    if(op === '+'){\n      sum = num1 + num2\n      str += num1 + '+' + num2\
    \ + '=' + sum + ' '\n      num1 = sum\n      num2 = operand[i+2]\n    }else if(op\
    \ === '-'){\n      sum = num1 - num2\n      str += num1 + '-' + num2 + '=' + sum\
    \ + ' '\n      num1 = sum\n      num2 = operand[i+2]\n    }else if(op === '*'){\n\
    \      sum = num1 * num2\n      str += num1 + '*' + num2 + '=' + sum + ' '\n \
    \     num1 = sum\n      num2 = operand[i+2]\n    }else if(op === '//'){\n    \
    \  sum = Math.floor(num1 / num2)\n      str += num1 + '//' + num2 + '=' + sum\
    \ + ' '\n      num1 = sum\n      num2 = operand[i+2]\n    }else if(op === '**'){\n\
    \      sum = num1 ** num2\n      str += num1 + '**' + num2 + '=' + sum + ' '\n\
    \      num1 = sum\n      num2 = operand[i+2]\n    }\n  }\n  return str.slice(0,\
    \ -1)\n}", "    if(operator.length != operand.length - 1){\n        return -1;\n\
    \    }\n    let result = operand[0];\n    for(let i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case '+':\n               \
    \ result += operand[i + 1];\n                break;\n            case '-':\n \
    \               result -= operand[i + 1];\n                break;\n          \
    \  case '*':\n                result *= operand[i + 1];\n                break;\n\
    \            case '//':\n                result = Math.floor(result / operand[i\
    \ + 1]);\n                break;\n            case '**':\n                result\
    \ = Math.pow(result, operand[i + 1]);\n                break;\n            default:\n\
    \                return -1;\n        }\n    }\n    return result;\n}\n", "  let\
    \ result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    let\
    \ operation = operator[i];\n    let next = operand[i + 1];\n    if (operation\
    \ === '+') {\n      result += next;\n    } else if (operation === '-') {\n   \
    \   result -= next;\n    } else if (operation === '*') {\n      result *= next;\n\
    \    } else if (operation === '//') {\n      result = Math.floor(result / next);\n\
    \    } else if (operation === '**') {\n      result = Math.pow(result, next);\n\
    \    }\n  }\n  return result;\n}\n\nconst operator = ['+', '-', '*', '//', '**'];\n\
    const operand = [2, 3, 4, 5, 6];", "  const operandCopy = operand.slice();\n \
    \ let result = operandCopy.shift();\n  let i = 0;\n  for (const operand of operandCopy)\
    \ {\n    switch (operator[i]) {\n      case '+':\n        result += operand;\n\
    \        break;\n      case '-':\n        result -= operand;\n        break;\n\
    \      case '*':\n        result *= operand;\n        break;\n      case '//':\n\
    \        result = Math.floor(result / operand);\n        break;\n      case '**':\n\
    \        result = Math.pow(result, operand);\n        break;\n    }\n    i++;\n\
    \  }\n  return result;\n}\n\nmodule.exports = {\n  do_algebra\n}", "    let result\
    \ = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                result += operand[i+1];\n            \
    \    break;\n            case '-':\n                result -= operand[i+1];\n\
    \                break;\n            case '*':\n                result *= operand[i+1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       result = Math.pow(result, operand[i+1]);\n                break;\n   \
    \     }\n    }\n    return result;\n}\n", "    let op = [];\n    let num = [];\n\
    \    for(let i = 0; i < operator.length; i++){\n        if(operator[i] == '**'){\n\
    \            num.push(operand[i] ** operand[i+1]);\n            i++;\n       \
    \ }else{\n            num.push(operand[i]);\n            op.push(operator[i]);\n\
    \        }\n    }\n    num.push(operand[operand.length-1]);\n    let result =\
    \ num[0];\n    for(let i = 0; i < op.length; i++){\n        if(op[i] == '+'){\n\
    \            result += num[i+1];\n        }else if(op[i] == '-'){\n          \
    \  result -= num[i+1];\n        }else if(op[i] == '*'){\n            result *=\
    \ num[i+1];\n        }else if(op[i] == '//'){\n            result = Math.floor(result\
    \ / num[i+1]);\n        }\n    }\n    return result;\n}", "    var result = operand[0];\n\
    \    for(var i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+': result += operand[i+1];\n            break;\n         \
    \   case '-': result -= operand[i+1];\n            break;\n            case '*':\
    \ result *= operand[i+1];\n            break;\n            case '//': result =\
    \ Math.floor(result / operand[i+1]);\n            break;\n            case '**':\
    \ result = Math.pow(result, operand[i+1]);\n            break;\n        }\n  \
    \  }\n    return result;\n}\n", "\twhile(operator.length >= 1) {\n\t\tif(operator.includes('**'))\
    \ {\n\t\t\tconst i = operator.indexOf('**');\n\t\t\tconst result = operand[i]\
    \ ** operand[i+1];\n\t\t\toperator.splice(i, 1);\n\t\t\toperand.splice(i, 2, result);\n\
    \t\t}\n\t\telse if(operator.includes('//')) {\n\t\t\tconst i = operator.indexOf('//');\n\
    \t\t\tconst result = operand[i] // operand[i+1];\n\t\t\toperator.splice(i, 1);\n\
    \t\t\toperand.splice(i, 2, result);\n\t\t}\n\t\telse if(operator.includes('*'))\
    \ {\n\t\t\tconst i = operator.indexOf('*');\n\t\t\tconst result = operand[i] *\
    \ operand[i+1];\n\t\t\toperator.splice(i, 1);\n\t\t\toperand.splice(i, 2, result);\n\
    \t\t}\n\t\telse if(operator.includes('-')) {\n\t\t\tconst i = operator.indexOf('-');\n\
    \t\t\tconst result = operand[i] - operand[i+1];\n\t\t\toperator.splice(i, 1);\n\
    \t\t\toperand.splice(i, 2, result);\n\t\t}\n\t\telse if(operator.includes('+'))\
    \ {\n\t\t\tconst i = operator.indexOf('+');\n\t\t\tconst result = operand[i] +\
    \ operand[i+1];\n\t\t\toperator.splice(i, 1);\n\t\t\toperand.splice(i, 2, result);\n\
    \t\t}\n\t}\n\treturn operand[0];\n}\n", "  let answer = operand[0];\n  let x =\
    \ 1;\n  while (x < operand.length) {\n    if (operator[x-1] === '+') {\n     \
    \ answer += operand[x];\n    } else if (operator[x-1] === '-') {\n      answer\
    \ -= operand[x];\n    } else if (operator[x-1] === '*') {\n      answer *= operand[x];\n\
    \    } else if (operator[x-1] === '//') {\n      answer = Math.floor(answer /\
    \ operand[x]);\n    } else if (operator[x-1] === '**') {\n      answer = Math.pow(answer,\
    \ operand[x]);\n    }\n    x++;\n  }\n  return answer;\n}\n", "    var string\
    \ = operand[0];\n    for(var i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                string += operator[i] + operand[i+1];\n\
    \                break;\n            case '-':\n                string += operator[i]\
    \ + operand[i+1];\n                break;\n            case '*':\n           \
    \     string += operator[i] + operand[i+1];\n                break;\n        \
    \    case '//':\n                string += '/' + operand[i+1];\n             \
    \   break;\n            case '**':\n                string += '^' + operand[i+1];\n\
    \                break;\n        }\n    }\n    var result = eval(string);\n  \
    \  return result;\n}\n", "    if(operator.length === operand.length - 1){\n  \
    \      let result = operand[0];\n        for(let i = 0; i < operator.length; i++){\n\
    \            if(operator[i] === '+'){\n                result += operand[i + 1];\n\
    \            }\n            if(operator[i] === '-'){\n                result -=\
    \ operand[i + 1];\n            }\n            if(operator[i] === '*'){\n     \
    \           result *= operand[i + 1];\n            }\n            if(operator[i]\
    \ === '//'){\n                result = Math.floor(result / operand[i + 1]);\n\
    \            }\n            if(operator[i] === '**'){\n                result\
    \ = Math.pow(result, operand[i + 1]);\n            }\n        }\n        return\
    \ result;\n    } else {\n        return \"operator length must be one less than\
    \ operand length\"\n    }\n}\n", "    var result = operand[0];\n    for(let i\
    \ = 0; i < operator.length; i++){\n        if(operator[i] == '+'){\n         \
    \   result += operand[i+1];\n        }\n        else if(operator[i] == '-'){\n\
    \            result -= operand[i+1];\n        }\n        else if(operator[i] ==\
    \ '*'){\n            result *= operand[i+1];\n        }\n        else if(operator[i]\
    \ == '//'){\n            result = Math.floor(result / operand[i+1]);\n       \
    \ }\n        else if(operator[i] == '**'){\n            result = Math.pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\n\nvar op = [\"+\",\
    \ \"-\", \"*\", \"//\", \"**\"];\nvar opd = [2, 3, 4, 5, 10];", "  for(let i =\
    \ 0; i < operator.length; i++){\n    if(operator[i] === \"+\"){\n      operand[i\
    \ + 1] = operand[i] + operand[i + 1];\n    } else if(operator[i] === \"-\"){\n\
    \      operand[i + 1] = operand[i] - operand[i + 1];\n    } else if(operator[i]\
    \ === \"*\"){\n      operand[i + 1] = operand[i] * operand[i + 1];\n    } else\
    \ if(operator[i] === \"//\"){\n      operand[i + 1] = Math.floor(operand[i] /\
    \ operand[i + 1]);\n    } else if(operator[i] === \"**\"){\n      operand[i +\
    \ 1] = Math.pow(operand[i], operand[i + 1]);\n    }\n  }\n  return operand[operand.length\
    \ - 1];\n}\n", "  if (operator.length == 0) return operand[0];\n  var result =\
    \ operand[0];\n  for (var i = 0; i < operator.length; i++) {\n    if (operator[i]\
    \ == '+') {\n      result += operand[i+1];\n    } else if (operator[i] == '-')\
    \ {\n      result -= operand[i+1];\n    } else if (operator[i] == '*') {\n   \
    \   result *= operand[i+1];\n    } else if (operator[i] == '//') {\n      result\
    \ = Math.floor(result / operand[i+1]);\n    } else if (operator[i] == '**') {\n\
    \      result = Math.pow(result, operand[i+1]);\n    }\n  }\n  return result;\n\
    }\n", "  let result = operand[0];\n  for (let i = 0; i < operator.length; i++)\
    \ {\n    switch (operator[i]) {\n      case '+':\n        result += operand[i\
    \ + 1];\n        break;\n      case '-':\n        result -= operand[i + 1];\n\
    \        break;\n      case '*':\n        result *= operand[i + 1];\n        break;\n\
    \      case '//':\n        result = Math.floor(result / operand[i + 1]);\n   \
    \     break;\n      case '**':\n        result = Math.pow(result, operand[i +\
    \ 1]);\n        break;\n    }\n  }\n  return result;\n}\n", "    if(operator.length\
    \ !== operand.length - 1){\n        return false;\n    }\n    if(operator.length\
    \ === 0 || operand.length < 2){\n        return false;\n    }\n    let expression\
    \ = operand[0].toString();\n    for(let i = 0; i < operator.length; i++){\n  \
    \      expression += ` ${operator[i]} ${operand[i + 1]}`;\n    }\n    return eval(expression);\n\
    }\n", "  let op1 = operand.shift()\n  while(operator.length){\n    switch(operator.shift()){\n\
    \      case '+':\n        op1 += operand.shift()\n        break\n      case '-':\n\
    \        op1 -= operand.shift()\n        break\n      case '*':\n        op1 *=\
    \ operand.shift()\n        break\n      case '//':\n        op1 = Math.floor(op1\
    \ / operand.shift())\n        break\n      case '**':\n        op1 = Math.pow(op1,\
    \ operand.shift())\n        break\n    }\n  }\n  return op1\n}", "  let result\
    \ = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i]\
    \ === '+') {\n      result += operand[i + 1];\n    } else if (operator[i] ===\
    \ '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] === '*')\
    \ {\n      result *= operand[i + 1];\n    } else if (operator[i] === '//') {\n\
    \      result /= operand[i + 1];\n    } else if (operator[i] === '**') {\n   \
    \   result **= operand[i + 1];\n    }\n  }\n  return result;\n}", "  return operand.reduce((a,\
    \ b, i) => {\n    return operator[i - 1] === '+' ? a + b : \n    operator[i -\
    \ 1] === '-' ? a - b : \n    operator[i - 1] === '*' ? a * b : \n    operator[i\
    \ - 1] === '//' ? ~~(a / b) : \n    operator[i - 1] === '**' ? Math.pow(a, b)\
    \ : 0;\n  });\n}\n", "  let do_again;\n  let count = 0;\n  let temp;\n  let answer;\n\
    \  while(count < operator.length){\n    switch(operator[count]){\n      case '*':\n\
    \        operand[count] = operand[count] * operand[count + 1];\n        operand.splice(count\
    \ + 1, 1);\n        operator.splice(count, 1);\n        count = 0;\n        do_again\
    \ = true;\n        break;\n      case '//':\n        operand[count] = Math.floor(operand[count]\
    \ / operand[count + 1]);\n        operand.splice(count + 1, 1);\n        operator.splice(count,\
    \ 1);\n        count = 0;\n        do_again = true;\n        break;\n      case\
    \ '**':\n        operand[count] = Math.pow(operand[count], operand[count + 1]);\n\
    \        operand.splice(count + 1, 1);\n        operator.splice(count, 1);\n \
    \       count = 0;\n        do_again = true;\n        break;\n      default:\n\
    \        count++;\n        do_again = false;\n    }\n  }\n  answer = operand[0];\n\
    \  operand.splice(0, 1);\n  while(operand.length > 0){\n    switch(operator[0]){\n\
    \      case '+':\n        answer += operand[0];\n        break;\n      case '-':\n\
    \        answer -= operand[0];\n        break;\n    }\n    operand.splice(0, 1);\n\
    \    operator.splice(0, 1);\n  }\n  return answer;\n}\n", "    return operand.reduce((a,\
    \ b, i) => operator[i - 1] == '+' ? a + b : operator[i - 1] == '-' ? a - b : operator[i\
    \ - 1] == '*' ? a * b : operator[i - 1] == '//' ? a / b : a ** b);\n}", "    let\
    \ num1 = operand[0]\n    let num2 = operand[1]\n    let equation = num1 + operator[0]\
    \ + num2;\n    let i = 1;\n    while(i < operator.length){\n        equation +=\
    \ operator[i] + operand[i+1]\n        i++\n    }\n    return eval(equation)\n}",
  "    var operation = operand[0];\n    for(var i = 0; i < operator.length; i++){\n\
    \        switch(operator[i]){\n            case '+':\n                operation\
    \ += operand[i+1];\n                break;\n            case '-':\n          \
    \      operation -= operand[i+1];\n                break;\n            case '*':\n\
    \                operation *= operand[i+1];\n                break;\n        \
    \    case '//':\n                operation = Math.floor(operation / operand[i+1]);\n\
    \                break;\n            case '**':\n                operation = Math.pow(operation,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return operation;\n\
    }\n", "    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n\
    \        switch(operator[i]){\n            case '+':\n                result +=\
    \ operand[i+1];\n                break;\n            case '-':\n             \
    \   result -= operand[i+1];\n                break;\n            case '*':\n \
    \               result *= operand[i+1];\n                break;\n            case\
    \ '//':\n                result = Math.floor(result / operand[i+1]);\n       \
    \         break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }", "    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n\
    \        if(operator[i] === '+'){\n            result += operand[i+1];\n     \
    \   }\n        if(operator[i] === '-'){\n            result -= operand[i+1];\n\
    \        }\n        if(operator[i] === '*'){\n            result *= operand[i+1];\n\
    \        }\n        if(operator[i] === '//'){\n            result = Math.floor(result\
    \ / operand[i+1]);\n        }\n        if(operator[i] === '**'){\n           \
    \ result = Math.pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }\n", "    let operation = operand[0];\n    for(let i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case '+':\n               \
    \ operation += operand[i+1];\n                break;\n            case '-':\n\
    \                operation -= operand[i+1];\n                break;\n        \
    \    case '*':\n                operation *= operand[i+1];\n                break;\n\
    \            case '//':\n                operation = Math.floor(operation / operand[i+1]);\n\
    \                break;\n            case '**':\n                operation = Math.pow(operation,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return operation;\n\
    }", "\tlet result = operand[0];\n\tfor(let i = 0; i < operator.length; i++){\n\
    \t\tif(operator[i] === '+'){\n\t\t\tresult += operand[i+1];\n\t\t}\n\t\tif(operator[i]\
    \ === '-'){\n\t\t\tresult -= operand[i+1];\n\t\t}\n\t\tif(operator[i] === '*'){\n\
    \t\t\tresult *= operand[i+1];\n\t\t}\n\t\tif(operator[i] === '//'){\n\t\t\tresult\
    \ = Math.floor(result / operand[i+1]);\n\t\t}\n\t\tif(operator[i] === '**'){\n\
    \t\t\tresult = Math.pow(result, operand[i+1]);\n\t\t}\n\t}\n\treturn result;\n\
    }", "    var res = 0;\n    operator.forEach((item, index) => {\n        switch(item){\n\
    \            case '+':\n                res += operand[index] + operand[index\
    \ + 1];\n                break;\n            case '-':\n                res +=\
    \ operand[index] - operand[index + 1];\n                break;\n            case\
    \ '*':\n                res += operand[index] * operand[index + 1];\n        \
    \        break;\n            case '//':\n                res += Math.floor(operand[index]\
    \ / operand[index + 1]);\n                break;\n            case '**':\n   \
    \             res += Math.pow(operand[index], operand[index + 1]);\n         \
    \       break;\n        }\n    });\n    return res;\n}", "  var n = operator.length\n\
    \  var arr = []\n  var result = 0\n  var i = 0\n\n  while(i < n){\n    arr.push(operand[i])\n\
    \    arr.push(operator[i])\n    i++\n  }\n  arr.push(operand[i])\n  result = arr[0]\n\
    \  for(var j = 1; j < arr.length; j++){\n    if(arr[j] == '+'){\n      result\
    \ += arr[j+1]\n    }\n    else if(arr[j] == '-'){\n      result -= arr[j+1]\n\
    \    }\n    else if(arr[j] == '*'){\n      result *= arr[j+1]\n    }\n    else\
    \ if(arr[j] == '//'){\n      result = Math.floor(result / arr[j+1])\n    }\n \
    \   else if(arr[j] == '**'){\n      result = Math.pow(result, arr[j+1])\n    }\n\
    \  }\n  return result\n}\n", "  let result = operand[0];\n  for (let i = 0; i\
    \ < operator.length; i++) {\n    switch (operator[i]) {\n      case '+':\n   \
    \     result += operand[i + 1];\n        break;\n      case '-':\n        result\
    \ -= operand[i + 1];\n        break;\n      case '*':\n        result *= operand[i\
    \ + 1];\n        break;\n      case '//':\n        result = Math.floor(result\
    \ / operand[i + 1]);\n        break;\n      case '**':\n        result = Math.pow(result,\
    \ operand[i + 1]);\n        break;\n    }\n  }\n  return result;\n}\n", "\tvar\
    \ answer = 0;\n\tvar copyOperator = operator.slice();\n\tvar copyOperand = operand.slice();\n\
    \tfor(var i = 0; i < copyOperator.length; i++){\n\t\tif(copyOperator[i] === \"\
    *\"){\n\t\t\tvar ans = multiply(copyOperand[i], copyOperand[i+1]);\n\t\t\tcopyOperand.splice(i,\
    \ 2, ans);\n\t\t\tcopyOperator.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t\telse if(copyOperator[i]\
    \ === \"//\"){\n\t\t\tvar ans = floorDivide(copyOperand[i], copyOperand[i+1]);\n\
    \t\t\tcopyOperand.splice(i, 2, ans);\n\t\t\tcopyOperator.splice(i, 1);\n\t\t\t\
    i--;\n\t\t}\n\t\telse if(copyOperator[i] === \"**\"){\n\t\t\tvar ans = expon(copyOperand[i],\
    \ copyOperand[i+1]);\n\t\t\tcopyOperand.splice(i, 2, ans);\n\t\t\tcopyOperator.splice(i,\
    \ 1);\n\t\t\ti--;\n\t\t}\n\t}\n\tanswer = copyOperand[0];\n\tfor(var i = 0; i\
    \ < copyOperator.length; i++){\n\t\tif(copyOperator[i] === \"+\"){\n\t\t\tanswer\
    \ = add(answer, copyOperand[i+1]);\n\t\t}\n\t\telse if(copyOperator[i] === \"\
    -\"){\n\t\t\tanswer = subtract(answer, copyOperand[i+1]);\n\t\t}\n\t}\n\treturn\
    \ answer;\n}", "    let result = operand[0];\n    for(let i = 0; i < operator.length;\
    \ i++){\n        if(operator[i] === '+'){\n            result += operand[i+1];\n\
    \        }\n        if(operator[i] === '-'){\n            result -= operand[i+1];\n\
    \        }\n        if(operator[i] === '*'){\n            result *= operand[i+1];\n\
    \        }\n        if(operator[i] === '//'){\n            result = Math.floor(result\
    \ / operand[i+1]);\n        }\n        if(operator[i] === '**'){\n           \
    \ result = Math.pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }\n", "  for(var i = 0; i < operator.length; i++){\n    if(operator[i] === '+'){\n\
    \      operand[i + 1] = operand[i] + operand[i + 1];\n    } else if(operator[i]\
    \ === '-'){\n      operand[i + 1] = operand[i] - operand[i + 1];\n    } else if(operator[i]\
    \ === '*'){\n      operand[i + 1] = operand[i] * operand[i + 1];\n    } else if(operator[i]\
    \ === '//'){\n      operand[i + 1] = Math.floor(operand[i] / operand[i + 1]);\n\
    \    } else if(operator[i] === '**'){\n      operand[i + 1] = Math.pow(operand[i],\
    \ operand[i + 1]);\n    }\n  }\n  return operand[operand.length - 1];\n}", " \
    \   for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case \"+\":\n                operand[i + 1] = operand[i] + operand[i\
    \ + 1];\n                break;\n            case \"-\":\n                operand[i\
    \ + 1] = operand[i] - operand[i + 1];\n                break;\n            case\
    \ \"*\":\n                operand[i + 1] = operand[i] * operand[i + 1];\n    \
    \            break;\n            case \"//\":\n                operand[i + 1]\
    \ = Math.floor(operand[i] / operand[i + 1]);\n                break;\n       \
    \     case \"**\":\n                operand[i + 1] = Math.pow(operand[i], operand[i\
    \ + 1]);\n                break;\n        }\n    }\n    return operand[operand.length\
    \ - 1];\n}\n", "  let equation = operand.reduce((acc,curr,i)=>{\n    if(operator[i]){\n\
    \      return acc + operator[i] + curr\n    }else{\n      return acc + curr\n\
    \    }\n  })\n  return eval(equation)\n}\n", "  let result = 0;\n  for(let i =\
    \ 0; i < operator.length; i++){\n    if(operator[i] === '+'){\n      result +=\
    \ operand[i+1];\n    }\n    if(operator[i] === '-'){\n      result -= operand[i+1];\n\
    \    }\n    if(operator[i] === '*'){\n      result *= operand[i+1];\n    }\n \
    \   if(operator[i] === '//'){\n      result = Math.floor(result / operand[i+1]);\n\
    \    }\n    if(operator[i] === '**'){\n      result = Math.pow(result, operand[i+1]);\n\
    \    }\n  }\n  return result;\n}\n", "\tvar result = operand[0];\n\tfor(i=0; i<operator.length;\
    \ i++){\n\t\tswitch(operator[i]){\n\t\t\tcase '+':\n\t\t\t\tresult += operand[i+1];\n\
    \t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult -= operand[i+1];\n\t\t\t\tbreak;\n\
    \t\t\tcase '*':\n\t\t\t\tresult *= operand[i+1];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\
    \t\t\t\tresult = Math.floor(result / operand[i+1]);\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '**':\n\t\t\t\tresult = Math.pow(result, operand[i+1]);\n\t\t\t\tbreak;\n\t\t\
    }\n\t}\n\treturn result;\n}\n", "  if (operator.length === 0 || operand.length\
    \ === 0) return null;\n  let str = '';\n  for (let i = 0; i < operand.length;\
    \ i++) {\n    str += operand[i] + ' ';\n    if (i < operator.length) str += operator[i]\
    \ + ' ';\n  }\n  return eval(str);\n}\n", "\n}\n", "    let op_sym = new Map();\n\
    \    op_sym.set('+', (x, y) => x + y);\n    op_sym.set('-', (x, y) => x - y);\n\
    \    op_sym.set('*', (x, y) => x * y);\n    op_sym.set('//', (x, y) => x / y);\n\
    \    op_sym.set('**', (x, y) => x ** y);\n    let sum = operand[0];\n    for (let\
    \ i = 0; i < operator.length; i++) {\n        sum = op_sym.get(operator[i])(sum,\
    \ operand[i + 1]);\n    }\n    return sum;\n}\n", "  let result = operand[0];\n\
    \  for (let i = 0; i < operator.length; i++) {\n    switch (operator[i]) {\n \
    \     case '+':\n        result += operand[i + 1];\n        break;\n      case\
    \ '-':\n        result -= operand[i + 1];\n        break;\n      case '*':\n \
    \       result *= operand[i + 1];\n        break;\n      case '//':\n        result\
    \ = Math.floor(result / operand[i + 1]);\n        break;\n      case '**':\n \
    \       result = Math.pow(result, operand[i + 1]);\n        break;\n    }\n  }\n\
    \  return result;\n}\n", "    let len1 = operator.length\n    let len2 = operand.length\n\
    \    let result\n    if(len1 >= 1 && len2 >= 2){\n        result = operand[0]\n\
    \        for(let i = 0; i < len1; i++){\n            switch(operator[i]){\n  \
    \              case '+':\n                    result += operand[i+1]\n       \
    \             break\n                case '-':\n                    result -=\
    \ operand[i+1]\n                    break\n                case '*':\n       \
    \             result *= operand[i+1]\n                    break\n            \
    \    case '//':\n                    result = Math.floor(result / operand[i+1])\n\
    \                    break\n                case '**':\n                    result\
    \ = Math.pow(result, operand[i+1])\n                    break\n            }\n\
    \        }\n    }\n    return result\n}\n", "    let result = operand[0];\n  \
    \  for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n \
    \           case '+':\n                result += operand[i+1];\n             \
    \   break;\n            case '-':\n                result -= operand[i+1];\n \
    \               break;\n            case '*':\n                result *= operand[i+1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       result = Math.pow(result, operand[i+1]);\n                break;\n   \
    \     }\n    }\n    return result;\n}\n", "  //coding and coding...\n}", "   \
    \ let operand_index = 0;\n    let operator_index = 0;\n    let total = operand[operand_index++];\n\
    \    while(operator_index < operator.length){\n        let this_operator = operator[operator_index++];\n\
    \        let this_operand = operand[operand_index++];\n        total = eval(`${total}\
    \ ${this_operator} ${this_operand}`);\n    }\n    return total;\n}", "    let\
    \ expression = \"\";\n    for(let i = 0; i < operator.length; i++){\n        expression\
    \ += operand[i] + operator[i];\n    }\n    expression += operand[operand.length\
    \ - 1];\n    return eval(expression);\n}\n", "    let result = null;\n    for(let\
    \ i = 0; i < operator.length; i++){\n        switch(operator[i]){\n          \
    \  case '+':\n                result = operand[i] + operand[i+1];\n          \
    \      operand[i+1] = result;\n                break;\n            case '-':\n\
    \                result = operand[i] - operand[i+1];\n                operand[i+1]\
    \ = result;\n                break;\n            case '*':\n                result\
    \ = operand[i] * operand[i+1];\n                operand[i+1] = result;\n     \
    \           break;\n            case '//':\n                result = operand[i]\
    \ / operand[i+1];\n                operand[i+1] = result;\n                break;\n\
    \            case '**':\n                result = operand[i] ** operand[i+1];\n\
    \                operand[i+1] = result;\n                break;\n        }\n \
    \   }\n    return result;\n}\n", "    if (operator.length !== operand.length -\
    \ 1) return;\n    let result = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        switch (operator[i]) {\n            case '+':\n            \
    \    result += operand[i + 1];\n                break;\n            case '-':\n\
    \                result -= operand[i + 1];\n                break;\n         \
    \   case '*':\n                result *= operand[i + 1];\n                break;\n\
    \            case '//':\n                result = Math.floor(result / operand[i\
    \ + 1]);\n                break;\n            case '**':\n                result\
    \ = Math.pow(result, operand[i + 1]);\n                break;\n        }\n   \
    \ }\n    return result;\n}\n", "\tvar result = operand[0];\n\tfor(var i = 0; i\
    \ < operator.length; i++){\n\t\tswitch(operator[i]){\n\t\t\tcase '+':\n\t\t\t\t\
    result += operand[i+1];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult -= operand[i+1];\n\
    \t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\tresult *= operand[i+1];\n\t\t\t\tbreak;\n\
    \t\t\tcase '//':\n\t\t\t\tresult = Math.floor(result / operand[i+1]);\n\t\t\t\t\
    break;\n\t\t\tcase '**':\n\t\t\t\tresult = Math.pow(result, operand[i+1]);\n\t\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}\n", "   // var result = operand[0];\n\
    \    for(var i = 1; i < operand.length; i++){\n      switch(operator[i-1]){\n\
    \        case '+':\n          operand[0] += operand[i];\n          break;\n  \
    \      case '-':\n          operand[0] -= operand[i];\n          break;\n    \
    \    case '*':\n          operand[0] *= operand[i];\n          break;\n      \
    \  case '//':\n          operand[0] = Math.floor(operand[0] / operand[i]);\n \
    \         break;\n        case '**':\n          operand[0] = Math.pow(operand[0],\
    \ operand[i]);\n          break;\n      }\n    }\n    return operand[0];\n}\n",
  "  let len = operator.length;\n  while(len) {\n    if(operator[len - 1] === '**')\
    \ {\n      operand[len] = Math.pow(operand[len], operand[len + 1]);\n      operand.splice(len\
    \ + 1, 1);\n      operator.splice(len - 1, 1);\n    }\n    len -= 1;\n  }\n  len\
    \ = operator.length;\n  while(len) {\n    if(operator[len - 1] === '//') {\n \
    \     operand[len] = Math.floor(operand[len] / operand[len + 1]);\n      operand.splice(len\
    \ + 1, 1);\n      operator.splice(len - 1, 1);\n    }\n    len -= 1;\n  }\n  len\
    \ = operator.length;\n  while(len) {\n    if(operator[len - 1] === '*') {\n  \
    \    operand[len] = operand[len] * operand[len + 1];\n      operand.splice(len\
    \ + 1, 1);\n      operator.splice(len - 1, 1);\n    }\n    len -= 1;\n  }\n  len\
    \ = operator.length;\n  while(len) {\n    if(operator[len - 1] === '-') {\n  \
    \    operand[len] = operand[len] - operand[len + 1];\n      operand.splice(len\
    \ + 1, 1);\n      operator.splice(len - 1, 1);\n    }\n    len -= 1;\n  }\n  len\
    \ = operator.length;\n  while(len) {\n    if(operator[len - 1] === '+') {\n  \
    \    operand[len] = operand[len] + operand[len + 1];\n      operand.splice(len\
    \ + 1, 1);\n      operator.splice(len - 1, 1);\n    }\n    len -= 1;\n  }\n  return\
    \ operand[0];\n}", "  // your code here\n}\n", "  //your code here\n  let result\
    \ = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if (operator[i]\
    \ === '+') {\n      result += operand[i + 1];\n    } else if (operator[i] ===\
    \ '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] === '*')\
    \ {\n      result *= operand[i + 1];\n    } else if (operator[i] === '//') {\n\
    \      result = Math.floor(result / operand[i + 1]);\n    } else if (operator[i]\
    \ === '**') {\n      result = Math.pow(result, operand[i + 1]);\n    }\n  }\n\
    \  return result;\n}", "    //your code here\n}", "\tlet result = operand[0];\n\
    \tfor(let i = 0; i < operator.length; i++){\n\t\tlet operatorTest = operator[i];\n\
    \t\tlet operandTest = operand[i+1];\n\t\tswitch(operatorTest){\n\t\t\tcase '+':\n\
    \t\t\t\tresult += operandTest;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult\
    \ -= operandTest;\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\tresult *= operandTest;\n\
    \t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\tresult = Math.floor(result / operandTest);\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\tresult = Math.pow(result, operandTest);\n\
    \t\t\t\tbreak;\n\t\t}\n\t}\n\treturn result;\n}", "    return eval(operand.map((e,i)=>i?`${operator[i-1]}${e}`:e).join(''))\n\
    }\n", "    let result = [];\n    for(let i = 0; i < operator.length; i++){\n \
    \       switch(operator[i]){\n            case '+':\n                result.push(operand[i]\
    \ + operand[i+1]);\n                break;\n            case '-':\n          \
    \      result.push(operand[i] - operand[i+1]);\n                break;\n     \
    \       case '*':\n                result.push(operand[i] * operand[i+1]);\n \
    \               break;\n            case '//':\n                result.push(operand[i]\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       result.push(operand[i] ** operand[i+1]);\n                break;\n   \
    \     }\n    }\n    return result[result.length-1];\n}\n", "    console.log(operator,\
    \ operand)\n    for(var i = 0; i < operator.length; i++){\n        if(operator[i]\
    \ === '+'){\n            operand[i] = operand[i] + operand[i+1]\n            operand.splice(i+1,\
    \ 1)\n            operator.splice(i, 1)\n            i = i - 1\n        }\n  \
    \      if(operator[i] === '-'){\n            operand[i] = operand[i] - operand[i+1]\n\
    \            operand.splice(i+1, 1)\n            operator.splice(i, 1)\n     \
    \       i = i - 1\n        }\n        if(operator[i] === '*'){\n            operand[i]\
    \ = operand[i] * operand[i+1]\n            operand.splice(i+1, 1)\n          \
    \  operator.splice(i, 1)\n            i = i - 1\n        }\n        if(operator[i]\
    \ === '//'){\n            operand[i] = Math.floor(operand[i] / operand[i+1])\n\
    \            operand.splice(i+1, 1)\n            operator.splice(i, 1)\n     \
    \       i = i - 1\n        }\n        if(operator[i] === '**'){\n            operand[i]\
    \ = Math.pow(operand[i], operand[i+1])\n            operand.splice(i+1, 1)\n \
    \           operator.splice(i, 1)\n            i = i - 1\n        }\n    }\n \
    \   return operand[0]\n}", "    var sum = operand[0];\n    for(var i = 0; i <\
    \ operator.length; i++){\n        if(operator[i] == '+'){\n            sum +=\
    \ operand[i+1];\n        }\n        if(operator[i] == '-'){\n            sum -=\
    \ operand[i+1];\n        }\n        if(operator[i] == '*'){\n            sum *=\
    \ operand[i+1];\n        }\n        if(operator[i] == '//'){\n            sum\
    \ = Math.floor(sum / operand[i+1]);\n        }\n        if(operator[i] == '**'){\n\
    \            sum = Math.pow(sum, operand[i+1]);\n        }\n    }\n    return\
    \ sum;\n}", "    let result = operand[0];\n    for(let i = 0; i < operator.length;\
    \ i++){\n        if(operator[i] === '+'){\n            result += operand[i+1];\n\
    \        }\n        if(operator[i] === '-'){\n            result -= operand[i+1];\n\
    \        }\n        if(operator[i] === '*'){\n            result *= operand[i+1];\n\
    \        }\n        if(operator[i] === '//'){\n            result = Math.floor(result\
    \ / operand[i+1]);\n        }\n        if(operator[i] === '**'){\n           \
    \ result = Math.pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }", "    let temp = operand[0];\n    for(let i = 0; i < operator.length; i++){\n\
    \        if(operator[i] === '+'){\n            temp += operand[i+1];\n       \
    \ }\n        if(operator[i] === '-'){\n            temp -= operand[i+1];\n   \
    \     }\n        if(operator[i] === '*'){\n            temp *= operand[i+1];\n\
    \        }\n        if(operator[i] === '//'){\n            temp = Math.floor(temp\
    \ / operand[i+1]);\n        }\n        if(operator[i] === '**'){\n           \
    \ temp = Math.pow(temp, operand[i+1]);\n        }\n    }\n    return temp;\n}\n",
  "\tif(operator.length === 0) return null;\n\tlet result = operand[0];\n\tfor(let\
    \ i = 0; i < operator.length; i++){\n\t\tlet nextOperand = operand[i+1];\n\t\t\
    switch(operator[i]){\n\t\t\tcase '+':\n\t\t\t\tresult += nextOperand;\n\t\t\t\t\
    break;\n\t\t\tcase '-':\n\t\t\t\tresult -= nextOperand;\n\t\t\t\tbreak;\n\t\t\t\
    case '*':\n\t\t\t\tresult *= nextOperand;\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\
    \t\t\tresult = Math.floor(result / nextOperand);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\
    \t\t\t\tresult = Math.pow(result, nextOperand);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return result;\n}", "    \n}", "    let result = operand[0];\n    for(let i =\
    \ 0; i < operator.length; i++){\n        if(operator[i] === '+'){\n          \
    \  result += operand[i+1];\n        }\n        if(operator[i] === '-'){\n    \
    \        result -= operand[i+1];\n        }\n        if(operator[i] === '*'){\n\
    \            result *= operand[i+1];\n        }\n        if(operator[i] === '//'){\n\
    \            result = Math.floor(result / operand[i+1]);\n        }\n        if(operator[i]\
    \ === '**'){\n            result = Math.pow(result, operand[i+1]);\n        }\n\
    \    }\n    return result;\n}\n", "    let result = operand[0];\n    for(let i\
    \ = 0; i < operator.length; i++){\n        if(operator[i] === '+'){\n        \
    \    result += operand[i+1];\n        }else if(operator[i] === '-'){\n       \
    \     result -= operand[i+1];\n        }else if(operator[i] === '*'){\n      \
    \      result *= operand[i+1];\n        }else if(operator[i] === '//'){\n    \
    \        result = Math.floor(result / operand[i+1]);\n        }else if(operator[i]\
    \ === '**'){\n            result = Math.pow(result, operand[i+1]);\n        }\n\
    \    }\n    return result;\n}", "\tvar operatorB=operator.join(\"\");\n\tvar operandB=operand.join(\"\
    \");\n\treturn eval(operandB+operatorB);\n}\n", "    return operand.reduce((acc,\
    \ cur, i) => operator[i - 1] === '+' ? acc + cur :\n    operator[i - 1] === '-'\
    \ ? acc - cur :\n    operator[i - 1] === '*' ? acc * cur :\n    operator[i - 1]\
    \ === '//' ? acc / cur :\n    operator[i - 1] === '**' ? acc ** cur : 0, operand[0])\n\
    }\n", "    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n\
    \        switch(operator[i]){\n            case '+':\n                result +=\
    \ operand[i+1];\n                break;\n            case '-':\n             \
    \   result -= operand[i+1];\n                break;\n            case '*':\n \
    \               result *= operand[i+1];\n                break;\n            case\
    \ '//':\n                result = Math.floor(result / operand[i+1]);\n       \
    \         break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\n", "    let result = operand[0];\n    for(let i = 0; i < operator.length; i++){\n\
    \        switch(operator[i]){\n            case '+':\n                result +=\
    \ operand[i+1];\n                break;\n            case '-':\n             \
    \   result -= operand[i+1];\n                break;\n            case '*':\n \
    \               result *= operand[i+1];\n                break;\n            case\
    \ '//':\n                result = Math.floor(result / operand[i+1]);\n       \
    \         break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\n", "  var calcResult = operand[0];\n  for (var i = 0; i < operator.length;\
    \ i++) {\n    if (operator[i] === '+') {\n      calcResult += operand[i+1];\n\
    \    } else if (operator[i] === '-') {\n      calcResult -= operand[i+1];\n  \
    \  } else if (operator[i] === '*') {\n      calcResult *= operand[i+1];\n    }\
    \ else if (operator[i] === '//') {\n      calcResult = Math.floor(calcResult /\
    \ operand[i+1]);\n    } else if (operator[i] === '**') {\n      calcResult = Math.pow(calcResult,\
    \ operand[i+1]);\n    }\n  }\n  return calcResult;\n}", "    let result = operand[0];\n\
    \    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                result += operand[i+1];\n            \
    \    break;\n            case '-':\n                result -= operand[i+1];\n\
    \                break;\n            case '*':\n                result *= operand[i+1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       result = Math.pow(result, operand[i+1]);\n                break;\n   \
    \     }\n    }\n    return result;\n}", "  let result = operand[0];\n  for (let\
    \ i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result\
    \ += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i\
    \ + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n\
    \    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i\
    \ + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result,\
    \ operand[i + 1]);\n    }\n  }\n  return result;\n}\n", "  var result = operand[0];\n\
    \  for(var i = 0; i < operator.length; i++){\n    if(operator[i] == '+'){\n  \
    \    result += operand[i+1];\n    }\n    if(operator[i] == '-'){\n      result\
    \ -= operand[i+1];\n    }\n    if(operator[i] == '*'){\n      result *= operand[i+1];\n\
    \    }\n    if(operator[i] == '//'){\n      result = Math.floor(result / operand[i+1]);\n\
    \    }\n    if(operator[i] == '**'){\n      result = Math.pow(result, operand[i+1]);\n\
    \    }\n  }\n  return result;\n}", "    //coding and coding..\n    return eval(operand.map((n,\
    \ i) => i !== 0 ? operator[i - 1] + n : n).join(''));\n}\n", "    let result =\
    \ 0;\n    switch(operator[0]){\n        case '+':\n            result = operand[0]\
    \ + operand[1];\n            break;\n        case '-':\n            result = operand[0]\
    \ - operand[1];\n            break;\n        case '*':\n            result = operand[0]\
    \ * operand[1];\n            break;\n        case '//':\n            result =\
    \ operand[0] // operand[1];\n            break;\n        case '**':\n        \
    \    result = operand[0] ** operand[1];\n            break;\n    }\n    for(let\
    \ i = 1; i < operator.length; i++){\n        switch(operator[i]){\n          \
    \  case '+':\n                result += operand[i + 1];\n                break;\n\
    \            case '-':\n                result -= operand[i + 1];\n          \
    \      break;\n            case '*':\n                result *= operand[i + 1];\n\
    \                break;\n            case '//':\n                result //= operand[i\
    \ + 1];\n                break;\n            case '**':\n                result\
    \ **= operand[i + 1];\n                break;\n        }\n    }\n    return result;\n\
    }", "  const ops = {'+': (x, y) => x + y, '-': (x, y) => x - y, \n    '*': (x,\
    \ y) => x * y, '//': (x, y) => Math.floor(x / y), \n    '**': (x, y) => x ** y}\n\
    \  let exp = []\n  for (let i = 0; i < operand.length - 1; i++) {\n    exp.push(operand[i],\
    \ operator[i])\n  }\n  exp.push(operand[operand.length - 1])\n  let result = exp[0]\n\
    \  for (let i = 1; i < exp.length; i += 2) {\n    result = ops[exp[i]](result,\
    \ exp[i + 1])\n  }\n  return result\n}\n", "    if(operator.length === 0 || operand.length\
    \ === 0){\n        return 0;\n    }\n\n    let results = [];\n    let operatorMap\
    \ = {\n        '+': (a, b) => {\n            return a + b;\n        },\n     \
    \   '-': (a, b) => {\n            return a - b;\n        },\n        '*': (a,\
    \ b) => {\n            return a * b;\n        },\n        '/': (a, b) => {\n \
    \           return Math.floor(a / b);\n        },\n        '**': (a, b) => {\n\
    \            return Math.pow(a, b);\n        }\n    }\n\n    if(operator.length\
    \ !== operand.length - 1){\n        return 0;\n    }\n\n    if(operator.length\
    \ === 1){\n        results.push(operatorMap[operator[0]](operand[0], operand[1]));\n\
    \    }\n\n    for(let i = 0; i < operator.length; i++){\n        if(results.length\
    \ > 0){\n            if(operator[i] === '+' || operator[i] === '-'){\n       \
    \         let res = results.pop();\n                results.push(operatorMap[operator[i]](res,\
    \ operand[i + 1]));\n            } else {\n                results.push(operatorMap[operator[i]](operand[i],\
    \ operand[i + 1]));\n            }\n        } else {\n            results.push(operatorMap[operator[i]](operand[i],\
    \ operand[i + 1]));\n        }\n    }\n\n    return results[0];\n}\n", "\tlet\
    \ ans = operand[0];\n\tfor(let i = 0; i < operator.length; i++){\n\t\tswitch(operator[i]){\n\
    \t\t\tcase '+':\n\t\t\t\tans += operand[i+1];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\
    \t\t\t\tans -= operand[i+1];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\tans *=\
    \ operand[i+1];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\tans = Math.floor(ans\
    \ / operand[i+1]);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\tans = Math.pow(ans,\
    \ operand[i+1]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn ans;\n}", "\tlet result\
    \ = operand[0];\n\tfor(let i = 0; i < operator.length; i++){\n\t\tif(operator[i]\
    \ === '+'){\n\t\t\tresult += operand[i+1];\n\t\t}\n\t\tif(operator[i] === '-'){\n\
    \t\t\tresult -= operand[i+1];\n\t\t}\n\t\tif(operator[i] === '*'){\n\t\t\tresult\
    \ *= operand[i+1];\n\t\t}\n\t\tif(operator[i] === '//'){\n\t\t\tresult = Math.floor(result\
    \ / operand[i+1]);\n\t\t}\n\t\tif(operator[i] === '**'){\n\t\t\tresult = Math.pow(result,\
    \ operand[i+1]);\n\t\t}\n\t}\n\treturn result;\n}\n", "  for(let i = 0; i < operator.length;\
    \ i++){\n    switch(operator[i]){\n      case '+':\n        operand[i+1] = operand[i]\
    \ + operand[i+1];\n        break;\n      case '-':\n        operand[i+1] = operand[i]\
    \ - operand[i+1];\n        break;\n      case '*':\n        operand[i+1] = operand[i]\
    \ * operand[i+1];\n        break;\n      case '//':\n        operand[i+1] = operand[i]\
    \ / operand[i+1];\n        break;\n      case '**':\n        operand[i+1] = operand[i]\
    \ ** operand[i+1];\n        break;\n    }\n  }\n  return operand[operand.length-1];\n\
    }\n", "    var result = operand[0];\n    for(var i = 0; i < operator.length; i++){\n\
    \        if(operator[i] == '+'){\n            result += operand[i+1];\n      \
    \  }else if(operator[i] == '-'){\n            result -= operand[i+1];\n      \
    \  }else if(operator[i] == '*'){\n            result *= operand[i+1];\n      \
    \  }else if(operator[i] == '//'){\n            result = Math.floor(result / operand[i+1]);\n\
    \        }else if(operator[i] == '**'){\n            result = Math.pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}", "\treturn operator.reduce((acc,curr,index)=>{\n\
    \t\tswitch(curr){\n\t\t\tcase '+':\n\t\t\t\treturn acc + operand[index+1];\n\t\
    \t\tcase '-':\n\t\t\t\treturn acc - operand[index+1];\n\t\t\tcase '*':\n\t\t\t\
    \treturn acc * operand[index+1];\n\t\t\tcase '//':\n\t\t\t\treturn Math.floor(acc\
    \ / operand[index+1]);\n\t\t\tcase '**':\n\t\t\t\treturn Math.pow(acc,operand[index+1]);\n\
    \t\t}\n\t},operand[0])\n}\n", "    let result = '';\n    operand.forEach((element,\
    \ index) => {\n        result += element + operator[index];\n    });\n    result\
    \ += operand[operand.length - 1];\n    return eval(result);\n}\n", "    let result\
    \ = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i]\
    \ === '+'){\n            result += operand[i+1];\n        }else if(operator[i]\
    \ === '-'){\n            result -= operand[i+1];\n        }else if(operator[i]\
    \ === '*'){\n            result *= operand[i+1];\n        }else if(operator[i]\
    \ === '//'){\n            result = Math.floor(result / operand[i+1]);\n      \
    \  }else if(operator[i] === '**'){\n            result = Math.pow(result, operand[i+1]);\n\
    \        }\n    }\n    return result;\n}", "    var op = \"+-*/%^\";\n    var\
    \ exprs = [];\n    var length = operator.length;\n    for(var i = 0; i <= length;\
    \ i++){\n        exprs.push(operand[i]);\n        if(i != length){\n         \
    \   exprs.push(operator[i]);\n        }\n    }\n    exprs = exprs.join(\"\");\n\
    \    return eval(exprs);\n}\n", "  return eval(operand.map((op, i) => {\n    if(i\
    \ === 0) return op;\n    return op + operator[i - 1];\n  }).join(''));\n}\n",
  "     var arr1=[];\n     for(var i=0;i<operator.length;i++){\n       switch(operator[i]){\n\
    \         case '+':\n           arr1.push(operand[i]+operand[i+1]);\n        \
    \   break;\n         case '-':\n           arr1.push(operand[i]-operand[i+1]);\n\
    \           break;\n         case '*':\n           arr1.push(operand[i]*operand[i+1]);\n\
    \           break;\n         case '//':\n           arr1.push(operand[i]/operand[i+1]);\n\
    \           break;\n         case '**':\n           arr1.push(Math.pow(operand[i],operand[i+1]));\n\
    \           break;\n       }\n     }\n     var a=arr1[0];\n     for(var j=1;j<arr1.length;j++){\n\
    \       a=a+arr1[j];\n     }\n    return a;\n}", "\treturn operator.reduce((acc,\
    \ curr, idx) => {\n\t\treturn eval(acc+curr+operand[idx+1])\n\t}, operand[0])\n\
    }", "    return eval(`${operand[0]}${operator[0]}${operand[1]}${operator[1]}${operand[2]}${operator[2]}${operand[3]}`)\n\
    }\n", "    if(operator.length !== operand.length - 1){\n        return \"ERROR\"\
    \n    }\n    let result = operand[0]\n    for(let i = 0; i < operator.length;\
    \ i++){\n        if(operator[i] === \"+\"){\n            result += operand[i +\
    \ 1]\n        } else if(operator[i] === \"-\"){\n            result -= operand[i\
    \ + 1]\n        } else if(operator[i] === \"*\"){\n            result *= operand[i\
    \ + 1]\n        } else if(operator[i] === \"//\"){\n            result = Math.floor(result\
    \ / operand[i + 1])\n        } else if(operator[i] === \"**\"){\n            result\
    \ = Math.pow(result, operand[i + 1])\n        }\n    }\n    return result\n}\n",
  "  // Write code here..\n  let total = 0;\n  for(let i = 0; i < operator.length;\
    \ i++){\n    if(operator[i] === \"+\"){\n      total += operand[i] + operand[i+1];\n\
    \    } else if(operator[i] === \"-\"){\n      total += operand[i] - operand[i+1];\n\
    \    } else if(operator[i] === \"*\"){\n      total += operand[i] * operand[i+1];\n\
    \    } else if(operator[i] === \"//\"){\n      total += Math.floor(operand[i]\
    \ / operand[i+1]);\n    } else if(operator[i] === \"**\"){\n      total += Math.pow(operand[i],\
    \ operand[i+1]);\n    }\n  }\n  return total;\n}\n", "\tlet result = null;\n\t\
    let operand1 = operand[0];\n\tlet operand2 = operand[1];\n\tfor(let i = 0; i <\
    \ operator.length; i++){\n\t\tswitch(operator[i]){\n\t\t\tcase '+':\n\t\t\t\t\
    result = operand1 + operand2;\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\tresult\
    \ = operand1 - operand2;\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\tresult = operand1\
    \ * operand2;\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\tresult = operand1 / operand2;\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\tresult = operand1 ** operand2;\n\t\t\
    \t\tbreak;\n\t\t}\n\t\toperand1 = result;\n\t\toperand2 = operand[i + 2];\n\t\
    }\n\treturn result;\n}", "  // Write your code here and return the result\n  let\
    \ result = operand[0];\n  for (let i = 0; i < operator.length; i++) {\n    if\
    \ (operator[i] === '+') {\n      result += operand[i + 1];\n    } else if (operator[i]\
    \ === '-') {\n      result -= operand[i + 1];\n    } else if (operator[i] ===\
    \ '*') {\n      result *= operand[i + 1];\n    } else if (operator[i] === '//')\
    \ {\n      result = Math.floor(result / operand[i + 1]);\n    } else if (operator[i]\
    \ === '**') {\n      result = Math.pow(result, operand[i + 1]);\n    }\n  }\n\
    \  return result;\n}\n", "    // your code here\n    let result = operand[0];\n\
    \    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                result += operand[i+1];\n            \
    \    break;\n            case '-':\n                result -= operand[i+1];\n\
    \                break;\n            case '*':\n                result *= operand[i+1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       result = Math.pow(result, operand[i+1]);\n                break;\n   \
    \     }\n    }\n    return result;\n}\n", "    var result = operand[0];\n    for(var\
    \ i = 0; i < operator.length; i++){\n        if(operator[i] == '+'){\n       \
    \     result += operand[i+1];\n        }\n        else if(operator[i] == '-'){\n\
    \            result -= operand[i+1];\n        }\n        else if(operator[i] ==\
    \ '*'){\n            result *= operand[i+1];\n        }\n        else if(operator[i]\
    \ == '//'){\n            result = Math.floor(result / operand[i+1]);\n       \
    \ }\n        else if(operator[i] == '**'){\n            result = Math.pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}", "  let total = operand[0];\n\
    \  for (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n\
    \      total += operand[i + 1];\n    } else if (operator[i] === '-') {\n     \
    \ total -= operand[i + 1];\n    } else if (operator[i] === '*') {\n      total\
    \ *= operand[i + 1];\n    } else if (operator[i] === '//') {\n      total = Math.floor(total\
    \ / operand[i + 1]);\n    } else if (operator[i] === '**') {\n      total = Math.pow(total,\
    \ operand[i + 1]);\n    }\n  }\n  return total;\n}", "   if(operator === null\
    \ || operand === null) return null;\n   if(operator.length !== operand.length\
    \ - 1) return null;\n   if(operand.length === 0) return null;\n   let result =\
    \ operand[0];\n   for(let i = 0; i < operator.length; i++){\n      switch(operator[i]){\n\
    \         case '+':\n            result += operand[i + 1];\n            break;\n\
    \         case '-':\n            result -= operand[i + 1];\n            break;\n\
    \         case '*':\n            result *= operand[i + 1];\n            break;\n\
    \         case '//':\n            result = Math.floor(result / operand[i + 1]);\n\
    \            break;\n         case '**':\n            result = Math.pow(result,\
    \ operand[i + 1]);\n            break;\n         default:\n            return\
    \ null;\n      }\n   }\n   return result;\n}\n", "  return operand.reduce((sum,cur,idx)=>sum+`${operator[idx-1]\
    \ || ''}${cur}`)\n}", "  var result = operand[0];\n  for(var i = 0; i < operator.length;\
    \ i++){\n    if(operator[i] == '+') result += operand[i+1];\n    if(operator[i]\
    \ == '-') result -= operand[i+1];\n    if(operator[i] == '*') result *= operand[i+1];\n\
    \    if(operator[i] == '//') result = Math.floor(result / operand[i+1]);\n   \
    \ if(operator[i] == '**') result = Math.pow(result, operand[i+1]);\n  }\n  return\
    \ result;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
