name: HumanEval_160_do_algebra
language: js
prompt: "//Given two arrays operator, and operand. The first array has basic algebra\
  \ operations, and \n// the second array is an array of integers. Use the two given\
  \ arrays to build the algebric \n// expression and return the evaluation of this\
  \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
  \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
  \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n//\
  \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
  \ array is equal to the length of operand array minus one.\n// Operand is an array\
  \ of of non-negative integers.\n// Operator array has at least one operator, and\
  \ operand array has at least two operands.\nfunction do_algebra(operator, operand){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = do_algebra;\n  assert.deepEqual(candidate([\"**\", \"*\", \"+\"], [2, 3, 4,\
  \ 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\", \"-\"], [2, 3, 4, 5]),9);\n\
  \  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3, 4]),8);\n}\n\ntest();"
completions: ["    let result;\n    for(let i = 0; i < operator.length; i++){\n  \
    \      if(operator[i] === '+'){\n            if(!result){\n                result\
    \ = operand[i] + operand[i+1];\n            }else{\n                result +=\
    \ operand[i+1];\n            }\n        }\n        if(operator[i] === '-'){\n\
    \            if(!result){\n                result = operand[i] - operand[i+1];\n\
    \            }else{\n                result -= operand[i+1];\n            }\n\
    \        }\n        if(operator[i] === '*'){\n            if(!result){\n     \
    \           result = operand[i] * operand[i+1];\n            }else{\n        \
    \        result *= operand[i+1];\n            }\n        }\n        if(operator[i]\
    \ === '//'){\n            if(!result){\n                result = Math.floor(operand[i]\
    \ / operand[i+1]);\n            }else{\n                result = Math.floor(result\
    \ / operand[i+1]);\n            }\n        }\n        if(operator[i] === '**'){\n\
    \            if(!result){\n                result = Math.pow(operand[i], operand[i+1]);\n\
    \            }else{\n                result = Math.pow(result, operand[i+1]);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "    if(operator.length===0\
    \ || operand.length<2){\n        return null;\n    }\n    let result = operand[0];\n\
    \    for(let i=0; i<operator.length; i++){\n        if(operator[i]==='+'){\n \
    \           result += operand[i+1];\n        }else if(operator[i]==='-'){\n  \
    \          result -= operand[i+1];\n        }else if(operator[i]==='*'){\n   \
    \         result *= operand[i+1];\n        }else if(operator[i]==='//'){\n   \
    \         result = Math.floor(result/operand[i+1]);\n        }else if(operator[i]==='**'){\n\
    \            result = Math.pow(result, operand[i+1]);\n        }\n    }\n    return\
    \ result;\n}", "    var res = operand[0];\n    for(var i = 0; i < operator.length;\
    \ i++){\n        switch(operator[i]){\n            case '+':\n               \
    \ res += operand[i+1];\n                break;\n            case '-':\n      \
    \          res -= operand[i+1];\n                break;\n            case '*':\n\
    \                res *= operand[i+1];\n                break;\n            case\
    \ '//':\n                res = Math.floor(res / operand[i+1]);\n             \
    \   break;\n            case '**':\n                res = Math.pow(res, operand[i+1]);\n\
    \                break;\n        }\n    }\n    return res;\n}\n", "    let res\
    \ = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                res += operand[i+1];\n               \
    \ break;\n            case '-':\n                res -= operand[i+1];\n      \
    \          break;\n            case '*':\n                res *= operand[i+1];\n\
    \                break;\n            case '//':\n                res = Math.floor(res\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       res = Math.pow(res, operand[i+1]);\n                break;\n        }\n\
    \    }\n    return res;\n}", "  var result = 0;\n  var operator_count = 0;\n \
    \ var operand_count = 0;\n  while(operator_count < operator.length && operand_count\
    \ < operand.length){\n    if(operator[operator_count] == '+'){\n      result +=\
    \ operand[operand_count];\n      operand_count++;\n      operator_count++;\n \
    \   }\n    else if(operator[operator_count] == '-'){\n      result -= operand[operand_count];\n\
    \      operand_count++;\n      operator_count++;\n    }\n    else if(operator[operator_count]\
    \ == '*'){\n      result *= operand[operand_count];\n      operand_count++;\n\
    \      operator_count++;\n    }\n    else if(operator[operator_count] == '//'){\n\
    \      result = Math.floor(result / operand[operand_count]);\n      operand_count++;\n\
    \      operator_count++;\n    }\n    else if(operator[operator_count] == '**'){\n\
    \      result = Math.pow(result, operand[operand_count]);\n      operand_count++;\n\
    \      operator_count++;\n    }\n  }\n  return result;\n}\nvar operator = ['+',\
    \ '*', '-'];\nvar operand = [2, 3, 4, 5];", "  const al = [], op = []\n  operator.map((v,i)\
    \ => {\n    if(v === '+' || v === '-') al.push(v)\n    else op.push(v)\n  })\n\
    \  let r1 = eval(operand.join(' '+al.join(' ')))\n  let r2 = op.map((v,i) => v\
    \ === '*' ? eval(operand[i] * operand[i+1]) : eval(operand[i] / operand[i+1]))\n\
    \  return op.length > 0 ? eval(r1 + ' ' + r2.join(' ')) : r1\n}\n", "    let result\
    \ = operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i]\
    \ === '+'){\n            result += operand[i+1];\n        }\n        if(operator[i]\
    \ === '-'){\n            result -= operand[i+1];\n        }\n        if(operator[i]\
    \ === '*'){\n            result *= operand[i+1];\n        }\n        if(operator[i]\
    \ === '//'){\n            result = Math.floor(result / operand[i+1]);\n      \
    \  }\n        if(operator[i] === '**'){\n            result = Math.pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}", "    let result =\
    \ operand[0];\n    for(let i = 0; i < operator.length; i++){\n        if(operator[i]\
    \ === '+'){\n            result += operand[i+1];\n        }\n        if(operator[i]\
    \ === '-'){\n            result -= operand[i+1];\n        }\n        if(operator[i]\
    \ === '*'){\n            result *= operand[i+1];\n        }\n        if(operator[i]\
    \ === '//'){\n            result = Math.floor(result / operand[i+1]);\n      \
    \  }\n        if(operator[i] === '**'){\n            result = Math.pow(result,\
    \ operand[i+1]);\n        }\n    }\n    return result;\n}\n", "    let result\
    \ = 0;\n    for(let i = 0; i < operator.length; i++){\n        switch(operator[i]){\n\
    \            case '+':\n                result += operand[i] + operand[i+1];\n\
    \                break;\n            case '-':\n                result -= operand[i]\
    \ - operand[i+1];\n                break;\n            case '*':\n           \
    \     result *= operand[i] * operand[i+1];\n                break;\n         \
    \   case '//':\n                result = Math.floor(operand[i] / operand[i+1]);\n\
    \                break;\n            case '**':\n                result = Math.pow(operand[i],\
    \ operand[i+1]);\n                break;\n        }\n    }\n    return result;\n\
    }\n", "  var operandReverse = operand.reverse();\n  for(var i = 0; i < operator.length;\
    \ i++){\n    if(operator[i] === \"**\"){\n      operandReverse[i] = Math.pow(operandReverse[i],\
    \ operandReverse[i+1]);\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  for(var i = 0; i < operator.length; i++){\n \
    \   if(operator[i] === \"//\"){\n      operandReverse[i] = Math.floor(operandReverse[i]\
    \ / operandReverse[i+1]);\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  for(var i = 0; i < operator.length; i++){\n \
    \   if(operator[i] === \"*\"){\n      operandReverse[i] = operandReverse[i] *\
    \ operandReverse[i+1];\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  for(var i = 0; i < operator.length; i++){\n \
    \   if(operator[i] === \"+\"){\n      operandReverse[i] = operandReverse[i] +\
    \ operandReverse[i+1];\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i--;\n    }\n  }\n  for(var i = 0; i < operator.length; i++){\n \
    \   if(operator[i] === \"-\"){\n      operandReverse[i] = operandReverse[i] -\
    \ operandReverse[i+1];\n      operandReverse.splice(i+1, 1);\n      operator.splice(i,\
    \ 1);\n      i", "    // your code here\n}", "  let newOperand = operand.slice(0,2);\n\
    \  for(let i = 0; i < operator.length; i++){\n    let index = 0;\n    let count\
    \ = 1;\n    let x = newOperand[0];\n    let y = newOperand[1];\n    switch(operator[i]){\n\
    \      case '+':\n        newOperand.splice(0,2,x+y);\n        index = newOperand.length;\n\
    \        newOperand.splice(index,0,operand[count+1]);\n        count += 1;\n \
    \       break;\n      case '-':\n        newOperand.splice(0,2,x-y);\n       \
    \ index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n      case '*':\n        newOperand.splice(0,2,x*y);\n\
    \        index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n      case '//':\n        newOperand.splice(0,2,Math.floor(x/y));\n\
    \        index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n      case '**':\n        newOperand.splice(0,2,Math.pow(x,y));\n\
    \        index = newOperand.length;\n        newOperand.splice(index,0,operand[count+1]);\n\
    \        count += 1;\n        break;\n    }\n  }\n  return newOperand[0];\n}",
  "  return operand.reduce((result, op, i) => {\n    if (i === 0) {\n      return\
    \ op;\n    }\n    switch (operator[i - 1]) {\n      case '+':\n        return\
    \ result + op;\n      case '-':\n        return result - op;\n      case '*':\n\
    \        return result * op;\n      case '//':\n        return result / op;\n\
    \      case '**':\n        return result ** op;\n    }\n  });\n}", "    return\
    \ operand.reduce((a,b,i)=>{\n        if(operator[i-1]==='+'){\n            return\
    \ a+b;\n        }\n        if(operator[i-1]==='-'){\n            return a-b;\n\
    \        }\n        if(operator[i-1]==='*'){\n            return a*b;\n      \
    \  }\n        if(operator[i-1]==='//'){\n            return Math.floor(a/b);\n\
    \        }\n        if(operator[i-1]==='**'){\n            return Math.pow(a,b);\n\
    \        }\n    })\n}", "    return eval(operand.map((v,i)=>i<1?v:`${operator[i-1]}${v}`).join(''))\n\
    }\n", "\n}", "    var result = operand[0];\n    for(var i = 0; i < operator.length;\
    \ i++){\n        if(operator[i] == '+'){\n            result += operand[i+1];\n\
    \        }\n        else if(operator[i] == '-'){\n            result -= operand[i+1];\n\
    \        }\n        else if(operator[i] == '*'){\n            result *= operand[i+1];\n\
    \        }\n        else if(operator[i] == '//'){\n            result = parseInt(result\
    \ / operand[i+1]);\n        }\n        else if(operator[i] == '**'){\n       \
    \     result = Math.pow(result, operand[i+1]);\n        }\n    }\n    return result;\n\
    }", "  var result = operand[0];\n  for(var i = 0; i < operator.length; i++){\n\
    \    switch(operator[i]){\n      case '+':\n        result += operand[i+1];\n\
    \        break;\n      case '-':\n        result -= operand[i+1];\n        break;\n\
    \      case '*':\n        result *= operand[i+1];\n        break;\n      case\
    \ '//':\n        result = Math.floor(result / operand[i+1]);\n        break;\n\
    \      case '**':\n        result = Math.pow(result, operand[i+1]);\n        break;\n\
    \    }\n  }\n  return result;\n}", "  var total = operand[0];\n  for (var i =\
    \ 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      total\
    \ += operand[i+1];\n    } else if (operator[i] === '-') {\n      total -= operand[i+1];\n\
    \    } else if (operator[i] === '*') {\n      total *= operand[i+1];\n    } else\
    \ if (operator[i] === '//') {\n      total = Math.floor(total / operand[i+1]);\n\
    \    } else if (operator[i] === '**') {\n      total = Math.pow(total, operand[i+1]);\n\
    \    }\n  }\n  return total;\n}\n", "    let result = operand[0];\n    for(let\
    \ i = 0; i < operator.length; i++){\n        switch(operator[i]){\n          \
    \  case '+':\n                result += operand[i+1];\n                break;\n\
    \            case '-':\n                result -= operand[i+1];\n            \
    \    break;\n            case '*':\n                result *= operand[i+1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i+1]);\n                break;\n            case '**':\n         \
    \       result = Math.pow(result, operand[i+1]);\n                break;\n   \
    \     }\n    }\n    return result;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
