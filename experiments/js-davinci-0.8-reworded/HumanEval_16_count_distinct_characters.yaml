name: HumanEval_16_count_distinct_characters
language: js
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters(\"xyzXYZ\")\n// 3\n// >>>\
  \ count_distinct_characters(\"Jerry\")\n// 4\nfunction count_distinct_characters(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = count_distinct_characters;\n  assert.deepEqual(candidate(\"\"),0);\n  assert.deepEqual(candidate(\"\
  abcde\"),5);\n  assert.deepEqual(candidate(\"abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"\
  aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"Jerry jERRY JeRRRY\"),5);\n\
  }\n\ntest();"
completions: ["  var arr = string.split(\"\");\n  var result = [];\n  for(var i =\
    \ 0; i < arr.length; i++){\n    if(result.indexOf(arr[i].toLowerCase()) < 0){\n\
    \      result.push(arr[i].toLowerCase());\n    }\n  }\n  return result.length;\n\
    }\n", "\tvar unique = \"\";\n\tfor (var i = 0; i < string.length; i++) {\n\t\t\
    if (unique.indexOf(string[i]) == -1) {\n\t\t\tunique += string[i];\n\t\t}\n\t\
    }\n\treturn unique.length;\n}\n", "    var string = string.toLowerCase();\n  \
    \  var arr = string.split(\"\");\n    var obj = {};\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(!obj[arr[i]]){\n            obj[arr[i]] = 1;\n        }\n\
    \    }\n    return Object.keys(obj).length;\n}\n", "    return Array.from(new\
    \ Set(string.toLowerCase())).length;\n}\n", "    var no_space = string.replace(/\\\
    s+/g, '');\n    var str = no_space.toLowerCase();\n    var char = str.split(\"\
    \");\n    var count = [];\n    var result = 0;\n    for (var i = 0; i < char.length;\
    \ i++){\n        if (count[char[i]] === undefined){\n            count[char[i]]\
    \ = 1;\n            result++;\n        }\n    }\n    return result;\n}\n\n", " \
    \   //create a distinct set\n    let distinctSet = new Set();\n    //add all characters\
    \ of the string to the set\n    for(let i = 0; i < string.length; i++){\n    \
    \    distinctSet.add(string[i]);\n    }\n    //return the size of the set\n  \
    \  return distinctSet.size;\n}\n", "    var unique = \"\";\n    for (var i = 0;\
    \ i < string.length; i++) {\n        if (unique.indexOf(string[i]) == -1) {\n\
    \            unique += string[i];\n        }\n    }\n    return unique.length;\n\
    }", "  return string.toLowerCase().split('').filter(function(n, i, a){\n    return\
    \ a.indexOf(n) == i;\n  }).length;\n}\n", "\tvar index = 0;\n\tvar uniqueChars\
    \ = [];\n\twhile(index < string.length){\n\t\tvar char = string[index].toLowerCase();\n\
    \t\tif(uniqueChars.indexOf(char) == -1){\n\t\t\tuniqueChars.push(char);\n\t\t\
    }\n\t\tindex ++;\n\t}\n\treturn uniqueChars.length;\n}\n", "    var upper=string.toUpperCase();\n\
    \    var lower=string.toLowerCase();\n    var arr=[];\n    for(var i=0;i<string.length;i++){\n\
    \        if(arr.indexOf(upper[i])==-1){\n            arr.push(upper[i]);\n   \
    \     }\n        if(arr.indexOf(lower[i])==-1){\n            arr.push(lower[i]);\n\
    \        }\n    }\n    return arr.length;\n}", "    return [...new Set(string.toLowerCase())].length;\n\
    }", "\tvar array = string.split(\"\");\n\tvar unique = array.filter(function(elem,\
    \ index, self) {\n    \treturn index == self.indexOf(elem);\n\t});\n\treturn unique.length;\n\
    }\n", "    return string.toLowerCase().split('').filter(function(el,i,a){\n  \
    \      return i == a.indexOf(el);\n    }).length;\n}\n", "    var count = 0;\n\
    \    for (var i = 0; i < string.length; i++){\n        var char = string[i].toLowerCase();\n\
    \        if (string.toLowerCase().indexOf(char) == i){\n            count += 1;\n\
    \        }\n    }\n    return count;\n}", "    var char_set = '';\n    for (var\
    \ i = 0; i < string.length; i++) {\n        if (char_set.indexOf(string.charAt(i))\
    \ == -1) {\n            char_set += string[i];\n        }\n    }\n    return char_set.length;\n\
    }\n", "    return _.uniq(string.toLowerCase().split('')).length;\n}\n", "    let\
    \ distinct=0;\n    for(let i=0;i<string.length;i++){\n        if(string.toLowerCase().indexOf(string[i].toLowerCase())==i){\n\
    \            distinct++;\n        }\n    }\n    return distinct;\n}", "\tvar chars\
    \ = {};\n\tfor (var i = 0; i < string.length; i++){\n\t\tvar char = string[i].toLowerCase();\n\
    \t\tif (chars[char] === undefined){\n\t\t\tchars[char] = 1;\n\t\t}\n\t}\n\treturn\
    \ Object.keys(chars).length;\n}", "    //get rid of the duplicates\n    var newString\
    \ = string.toLowerCase().split('').filter(function(item, i, ar){ return ar.indexOf(item)\
    \ === i; }).join('');\n    return newString.length;\n}", "    return [...new Set(string.toLowerCase())].length;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
