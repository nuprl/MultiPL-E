name: HumanEval_25_factorize
language: js
prompt: "//Return array of prime factors of given integer in the order from smallest\
  \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
  \ to how many times it appeares in factorization.\n// Input number should be equal\
  \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
  // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
  \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
  \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
  \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n \
  \ assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
completions: ["    let factor = 2;\n    let arr = [];\n    while (n > 1) {\n     \
    \   if (n % factor == 0) {\n            arr.push(factor);\n            n = n /\
    \ factor;\n        } else {\n            factor++;\n        }\n    }\n    return\
    \ arr;\n}\n", "    if (n === 1) {\n        return [1];\n    }\n    let factors\
    \ = [];\n    let i = 2;\n    while (n > 1) {\n        if (n % i === 0) {\n   \
    \         factors.push(i);\n            n /= i;\n        } else {\n          \
    \  i++;\n        }\n    }\n    return factors;\n}\n", "    let factors = [];\n\
    \    while (n % 2 === 0) {\n        factors.push(2);\n        n = n / 2;\n   \
    \ }\n    for (let i = 3; i <= Math.sqrt(n); i = i + 2) {\n        while (n % i\
    \ === 0) {\n            factors.push(i);\n            n = n / i;\n        }\n\
    \    }\n    if (n > 2) {\n        factors.push(n);\n    }\n    return factors;\n\
    }", "    var result = [];\n    for (var divisor = 2; n > 1; divisor++) {\n   \
    \     for (; n % divisor == 0; n /= divisor) {\n            result.push(divisor);\n\
    \        }\n    }\n    return result;\n}\n", "    var result = [];\n    var i\
    \ = 2;\n    while (n >= i){\n        if (n % i == 0){\n            result.push(i);\n\
    \            n = n / i;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    return result;\n}", "    var divisor = 2;\n    var factors = [];\n\
    \    while (n > 1){\n        if (n % divisor == 0){\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        }\n        else {\n            divisor\
    \ += 1;\n        }\n    }\n    return factors;\n}", "    var a = [];\n    for\
    \ (var i = 2; i <= n; i++) {\n        while (n % i == 0) {\n            a.push(i);\n\
    \            n /= i;\n        }\n    }\n    return a;\n}\n", "    var arr = [];\n\
    \    while(n > 1){\n        var div = 2;\n        while(n % div !== 0){\n    \
    \        div++;\n        }\n        arr.push(div);\n        n = n / div;\n   \
    \ }\n    return arr;\n}\n", "    var primeFactors = [];\n    var temp = n;\n \
    \   if(n == 0 || n == 1){\n        return null;\n    }\n    while(n % 2 == 0){\n\
    \        primeFactors.push(2);\n        n = n / 2;\n    }\n    var sqrtNum = Math.sqrt(n);\n\
    \    for(var i = 3; i <= sqrtNum; i = i + 2){\n        while(n % i == 0){\n  \
    \          primeFactors.push(i);\n            n = n / i;\n        }\n    }\n \
    \   if(n > 2){\n        primeFactors.push(n);\n    }\n    if(temp == Math.pow(primeFactors[0],\
    \ primeFactors.length)){\n        return primeFactors;\n    }\n    else{\n   \
    \     return null;\n    }\n}\n", "    let factors = []\n    for (let i = 2; i\
    \ <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i)\n    \
    \        n /= i\n            i--\n        }\n    }\n    return factors\n}\n",
  "    let array = [];\n    for (let i = 2; i < n; i++) {\n        if (n % i === 0)\
    \ {\n            array.push(i);\n            n = n / i;\n            i = 1;\n\
    \        }\n    }\n    return array;\n}", "    let res = [];\n    for (let i =\
    \ 2; i <= n; i++) {\n        while (n % i === 0) {\n            res.push(i);\n\
    \            n /= i;\n        }\n    }\n    return res;\n}", "    var ans = [];\n\
    \    while(n % 2 == 0){\n        ans.push(2);\n        n = n / 2;\n    }\n   \
    \ for(var i = 3; i <= Math.sqrt(n); i = i + 2){\n        while(n % i == 0){\n\
    \            ans.push(i);\n            n = n / i;\n        }\n    }\n    if(n\
    \ > 2){\n        ans.push(n);\n    }\n    return ans;\n}\n", "    let result =\
    \ [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n   \
    \         result.push(i);\n            n /= i;\n        }\n    }\n    return result;\n\
    }\n", "    var arr1 = [];\n    var arr2 = [];\n    var product = 1;\n    for (var\
    \ i = 2; i <= n; i++){\n        while (n % i == 0){\n            arr1.push(i);\n\
    \            n = n / i;\n        }\n    }\n    for (var i = 0; i < arr1.length;\
    \ i++){\n        if (arr1[i] == arr1[i+1]){\n            arr2.push(arr1[i]);\n\
    \        }\n        else{\n            arr2.push(arr1[i]);\n            break;\n\
    \        }\n    }\n    for (var i = 0; i < arr2.length; i++){\n        product\
    \ *= arr2[i];\n    }\n    return arr2;\n}\n", "    var factors = [];\n    for\
    \ (var i = 2; i < n; i++) {\n        while(n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\nvar a1 = factorize(8);\nvar a2 = factorize(25);\n\
    var a3 = factorize(70);", "    var factors = [];\n    var divisor = 2;\n    while\
    \ (n>2){\n        if (n % divisor == 0){\n            factors.push(divisor);\n\
    \            n = n/divisor;\n        }\n        else{\n            divisor++;\n\
    \        }\n    }\n    return factors;\n}\n", "  var output = [];\n  var k = 2;\n\
    \  while (n > 1){\n    if (n % k == 0){\n      output.push(k);\n      n = n /\
    \ k;\n    }\n    else {\n      k++;\n    }\n  }\n  return output;\n}\n", "  if\
    \ (n == 1) {\n    return [1];\n  }\n  var prime = findNextPrime(1);\n  var result\
    \ = [];\n  while (n > 1) {\n    if (n % prime == 0) {\n      result.push(prime);\n\
    \      n = n / prime;\n    } else {\n      prime = findNextPrime(prime);\n   \
    \ }\n  }\n  return result;\n}\n", "    var i, result = [];\n    for (i = 2; i\
    \ <= n; i++) {\n        while (n % i === 0) {\n            result.push(i);\n \
    \           n /= i;\n        }\n    }\n    return result;\n}\n", "    let primeFactor\
    \ = 2;\n    let arr = [];\n    if(n == 1){\n        return [1];\n    }\n    while(n\
    \ !== 1){\n        if(n % primeFactor == 0){\n            arr.push(primeFactor);\n\
    \            n = n / primeFactor;\n        }\n        else{\n            primeFactor\
    \ ++;\n        }\n    }\n    return arr;\n}", "    let factors = [];\n    let\
    \ originalNumber = n;\n    let currentDivisor = 2;\n    while (n > 2){\n     \
    \   if (n % currentDivisor == 0){\n            factors.push(currentDivisor);\n\
    \            n = n / currentDivisor;\n        } else {\n            currentDivisor++;\n\
    \        }\n    }\n    return factors;\n}\n", "    var m = n;\n    var primeFactors\
    \ = [];\n    while (m % 2 === 0) {\n        primeFactors.push(2);\n        m =\
    \ m / 2;\n    }\n    var i = 3;\n    while (i <= Math.sqrt(m)) {\n        while\
    \ (m % i === 0) {\n            primeFactors.push(i);\n            m = m / i;\n\
    \        }\n        i = i + 2;\n    }\n    if (m > 2) {\n        primeFactors.push(m);\n\
    \    }\n    return primeFactors;\n}\n", "\tvar result = [];\n\tvar primeFactor\
    \ = 2;\n\twhile (n > 1){\n\t\twhile (n % primeFactor == 0){\n\t\t\tresult.push(primeFactor);\n\
    \t\t\tn /= primeFactor;\n\t\t}\n\t\tprimeFactor += 1;\n\t}\n\treturn result;\n\
    }\n", "  var primeFactors = [];\n  for (var i = 2; i <= n; i++) {\n    while (n\
    \ % i === 0) {\n      primeFactors.push(i);\n      n /= i;\n    }\n  }\n  return\
    \ primeFactors;\n}\n", "    var i, j, count, factArr = [];\n    for (i = 2; i\
    \ <= n; i++){\n        count = 0;\n        while (n % i == 0){\n            count++;\n\
    \            n /= i;\n        }\n        for (j = 0; j < count; j++){\n      \
    \      factArr.push(i);\n        }\n    }\n    return factArr;\n}\n", "    let\
    \ result = [];\n    while (n % 2 === 0) {\n        result.push(2);\n        n\
    \ = n / 2;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i = i + 2) {\n     \
    \   while (n % i === 0) {\n            result.push(i);\n            n = n / i;\n\
    \        }\n    }\n    if (n > 2)\n        result.push(n);\n    return result;\n\
    }\n\nmodule.exports = {\n    createCalculator: createCalculator,\n    callAndApply:\
    \ callAndApply,\n    personBuilder: personBuilder,\n    books: books,\n    addOne:\
    \ addOne,\n    fibo: fibo,\n    forEach: forEach,\n    map: map,\n    reduce:\
    \ reduce,\n    filter: filter,\n    find: find,\n    sort: sort,\n    reverse:\
    \ reverse,\n    indexOf: indexOf,\n    isPalindrome: isPalindrome,\n    isPrime:\
    \ isPrime,\n    factorize: factorize\n};", "  var primeFactors = [];\n  var factors\
    \ = [];\n  var lastPrime = null;\n  // if n is 1, then return []\n  if (n ===\
    \ 1) {\n    return [];\n  }\n  else {\n    //find all prime factors\n    while(n>1){\n\
    \      //find the next prime factor\n      lastPrime = prime(n);\n      //add\
    \ the factor to the list of prime factors\n      primeFactors.push(lastPrime);\n\
    \      //reduce n by dividing by the latest prime factor\n      n = n/lastPrime;\n\
    \    }\n    //array the prime factors\n    for (var i = 0; i < primeFactors.length;\
    \ i++) {\n      if (factors.length === 0) {\n        factors.push(primeFactors[i]);\n\
    \      }\n      else if (factors[factors.length-1] === primeFactors[i]) {\n  \
    \      factors.push(primeFactors[i]);\n      }\n      else {\n        factors.push(primeFactors[i]);\n\
    \      }\n    }\n    return factors;\n  }\n}\n", "    var fac = [];\n    while\
    \ (n%2 === 0){\n        fac.push(2);\n        n = n/2;\n    }\n    var sqrtn =\
    \ Math.sqrt(n);\n    for (var i = 3; i <= sqrtn; i = i+2){\n        while (n%i\
    \ === 0){\n            fac.push(i);\n            n = n/i;\n        }\n    }\n\
    \    if (n > 2){\n        fac.push(n);\n    }\n    return fac;\n}\n", "    var\
    \ factors = [];\n    for (var i = 2; i <= n; i++) {\n        while ((n % i) ===\
    \ 0) {\n            factors.push(i);\n            n /= i;\n        }\n    }\n\
    \    return factors;\n}", "    var list = []\n    var primes = primeFactors(n)\n\
    \    for (var i = 0; i < primes.length; i++){\n        list.push(primes[i])\n\
    \        if (primes[i+1] == primes[i]){\n            i += 1\n        }\n    }\n\
    \    return list\n}", "    let factors = [];\n    for (let i = 2; i < n; i++)\
    \ {\n        while (n % i === 0) {\n            factors.push(i);\n           \
    \ n /= i;\n        }\n    }\n    return factors;\n}\n", "  let result = [];\n\
    \  let i = 2;\n  while (n > 1) {\n    if (n % i === 0) {\n      result.push(i);\n\
    \      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n  return result;\n\
    }", "    let factors = [];\n    if (n < 2) return factors;\n\n    while (n % 2\
    \ === 0) {\n        factors.push(2);\n        n /= 2;\n    }\n\n    for (let i\
    \ = 3; i <= Math.sqrt(n); i += 2) {\n        while (n % i === 0) {\n         \
    \   factors.push(i);\n            n /= i;\n        }\n    }\n\n    if (n > 2)\
    \ {\n        factors.push(n);\n    }\n\n    return factors;\n}\n", "    let result\
    \ = [];\n    let divisor = 2;\n    while (n > 1){\n        while (n % divisor\
    \ === 0){\n            result.push(divisor);\n            n /= divisor;\n    \
    \    }\n        divisor++;\n    }\n    return result;\n}\n", "    var arr = [];\n\
    \    var i = 2;\n    while (n > 1){\n        if (n % i == 0){\n            arr.push(i);\n\
    \            n = n / i;\n        }\n        else {\n            i++;\n       \
    \ }\n    }\n    return arr;\n}", "    let factors=[];\n    for(let i=2;i<=n;i++){\n\
    \        if(n%i==0){\n            factors.push(i);\n            n=n/i;\n     \
    \       i=1;\n        }\n    }\n    return factors;\n}", "  var arr = [];\n  var\
    \ div = 2;\n  while (n > 1){\n    if (n % div === 0){\n      arr.push(div);\n\
    \      n = n / div;\n    } else {\n      div++;\n    }\n  }\n  return arr;\n}\n",
  "    let result = [];\n    let divisor = 2;\n    while (n > 1){\n        if (n %\
    \ divisor === 0){\n            result.push(divisor);\n            n = n / divisor;\n\
    \        }\n        else{\n            divisor += 1;\n        }\n    }\n    return\
    \ result;\n}", "    let res = [];\n    for (let i = 2; i <= n; i++) {\n      \
    \  if (n % i === 0) {\n            res.push(i);\n            n /= i;\n       \
    \     i--;\n        }\n    }\n    return res;\n}\n", "    const factor = [];\n\
    \    let temp = n;\n    for (let i = 2; i<=temp; i++){\n        while (temp%i\
    \ === 0){\n            factor.push(i);\n            temp /= i;\n        }\n  \
    \  }\n    return factor;\n}\n", "    var factors = [];\n    while (n != 1) {\n\
    \        var i = 2;\n        while (n % i != 0) i++;\n        factors.push(i);\n\
    \        n /= i;\n    }\n    return factors;\n}\n", "    let primeFactors = [];\n\
    \    if (isPrime(n)) {\n        primeFactors.push(n);\n        return primeFactors;\n\
    \    }\n    let factor = 2;\n    while (n > 1) {\n        if (n % factor === 0)\
    \ {\n            primeFactors.push(factor);\n            n /= factor;\n      \
    \  } else {\n            factor++;\n        }\n    }\n    return primeFactors;\n\
    }\n", "    var num = n;\n    var factors = [];\n    var i = 2;\n    while (i <=\
    \ num) {\n        if (num % i == 0) {\n            factors.push(i);\n        \
    \    num = num / i;\n        } else {\n            i++;\n        }\n    }\n  \
    \  return factors;\n}\n", "    var prime_factors = [];\n    var divisor = 2;\n\
    \    while (n > 2){\n        if (n % divisor == 0){\n            prime_factors.push(divisor);\n\
    \            n = n / divisor;\n        }\n        else{\n            divisor +=\
    \ 1;\n        }\n    }\n    return prime_factors;\n}\n", "\n}\n", "\tvar factors\
    \ = [];\n\tfor (i = 2; i <= n; i++){\n\t\tif (n % i == 0){\n\t\t\tn = n / i;\n\
    \t\t\tfactors.push(i);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn factors;\n}", "\tvar\
    \ factors = [];\n\twhile (n%2===0){\n\t\tfactors.push(2);\n\t\tn=n/2;\n\t}\n\t\
    for (var i=3; i<=Math.sqrt(n); i+=2){\n\t\twhile (n%i===0){\n\t\t\tfactors.push(i);\n\
    \t\t\tn=n/i;\n\t\t}\n\t}\n\tif (n>2){\n\t\tfactors.push(n);\n\t}\n\treturn factors;\n\
    }\n", "    let i = 2;\n    let result = [];\n    while (i <= n) {\n        if\
    \ (n % i === 0) {\n            result.push(i);\n            n = n / i;\n     \
    \   } else {\n            i++;\n        }\n    }\n    return result;\n}\n", " \
    \   var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997];\n    var factors = [];\n    while (n !=\
    \ 1) {\n        for (var i = 0; i < primes.length; i++) {\n            if (n %\
    \ primes[i] == 0) {\n                factors.push(primes[i]);\n              \
    \  n = n / primes[i];\n                break;\n            }\n        }\n    }\n\
    \    return factors;\n", "    const factors = [];\n    let i = 2;\n    while (n\
    \ > 1) {\n        while (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        }\n        i += 1;\n    }\n    return factors;\n}", " \
    \   let factors = [],\n        i = 2;\n    for (i; i <= n; i++) {\n        while\
    \ ((n % i) === 0) {\n            factors.push(i);\n            n /= i;\n     \
    \   }\n    }\n    return factors;\n}", "    let array = []\n    let i = 2;\n \
    \   while (n > 1){\n        if (n % i == 0){\n            array.push(i)\n    \
    \        n = n / i\n        } else {\n            i++\n        }\n    }\n    return\
    \ array\n}\n", "\tvar array = [];\n\tvar prime = 2;\n\twhile (n > 1){\n\t\tif\
    \ (n % prime == 0){\n\t\t\tarray.push(prime);\n\t\t\tn = n / prime;\n\t\t} else\
    \ {\n\t\t\tprime++;\n\t\t}\n\t}\n\treturn array;\n}", "    let result = [];\n\
    \    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            result.push(i);\n\
    \            n /= i;\n            i = 1;\n        }\n    }\n    return result;\n\
    }\n", "    var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    var primefactors = [];\n    var\
    \ factor = n;\n    var factors = [];\n    var i = 0;\n    while (i < primes.length)\
    \ {\n        if (factor % primes[i] == 0) {\n            primefactors.push(primes[i]);\n\
    \            factor = factor / primes[i];\n        } else {\n            i++;\n\
    \        }\n    }\n    for (var i = 0; i < primefactors.length; i++) {\n     \
    \   if (primefactors[i] == primefactors[i + 1]) {\n            factors.push(primefactors[i]);\n\
    \        } else {\n            factors.push(primefactors[i]);\n            factors.push(primefactors[i\
    \ + 1]);\n            break;\n        }\n    }\n    return factors;\n}\n", " \
    \   let result = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i ===\
    \ 0) {\n            result.push(i);\n            n /= i;\n            i--;\n \
    \       }\n    }\n    return result;\n}\n", "    let p=2,arr=[];\n    while(n>1){\n\
    \        while(n%p==0){\n            arr.push(p);\n            n/=p;\n       \
    \ }\n        p++;\n    }\n    return arr;\n}", "    var factors = [];\n    var\
    \ i;\n    var divisor = 2;\n    for (i = 0; i < n; i++) {\n        if (n % divisor\
    \ == 0) {\n            factors.push(divisor);\n            n = n / divisor;\n\
    \        } else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }", "    var primeFactors = [];\n    for (var i = 2; i <= n; i++) {\n        while\
    \ ((n % i) === 0) {\n            primeFactors.push(i);\n            n /= i;\n\
    \        }\n    }\n    return primeFactors;\n}\n\nvar numberToFactorize = 10;",
  "    let factors = [];\n    let start = 2;\n    while (n>1){\n        if (n%start===0){\n\
    \            factors.push(start);\n            n = n/start;\n        }\n     \
    \   else{\n            start++;\n        }\n    }\n    return factors;\n}\n",
  "    var divisor = 2;\n    var list = [];\n    var array = [];\n    for (var i =\
    \ 0; i < n; i++){\n        if (n % divisor == 0){\n            list.push(divisor);\n\
    \            n = n / divisor;\n        }\n        else{\n            divisor++;\n\
    \        }\n    }\n    for (var x = 0; x < list.length; x++){\n        array.push(list[x]);\n\
    \    }\n    console.log(array);\n}\nfactorize(8);\nfactorize(25);\nfactorize(70);",
  "    let div = 2;\n    let res = [];\n    while (n > 1){\n        if (n % div ==\
    \ 0){\n            res.push(div);\n            n = n / div;\n        } else {\n\
    \            div += 1;\n        }\n    }\n    return res;\n}", "    var factors\
    \ = [];\n    var divisor = 2;\n    while (n > 2){\n        if (n % divisor ==\
    \ 0){\n            factors.push(divisor);\n            n = n / divisor;\n    \
    \    }\n        else {\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "    if (n === 1) return [1];\n    var prime = [];\n    var i = 2;\n   \
    \ while (n > 1) {\n        while (n % i === 0) {\n            prime.push(i);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    return prime;\n}", " \
    \ let i = 2;\n  let result = [];\n  while (i <= n) {\n    if (n % i === 0) {\n\
    \      result.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n  }\n\
    \  return result;\n}\n", "    var primeFactors = [];\n    var d = 2;\n    while\
    \ (n>1){\n        while (n%d==0){\n            primeFactors.push(d);\n       \
    \     n = n/d;\n        }\n        d = d + 1;\n    }\n    return primeFactors;\n\
    }\nfactorize(8);\nfactorize(25);\nfactorize(70);", "    // TODO\n    let result\
    \ = [];\n    let n1 = n;\n    while (n1 > 1) {\n        for (let i = 2; i <= n1;\
    \ i++) {\n            if (n1 % i === 0) {\n                result.push(i);\n \
    \               n1 = n1 / i;\n                break;\n            }\n        }\n\
    \    }\n    return result;\n}", "    let factor = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];\n\
    \    let factors = [];\n    let i = 0;\n    while(n != 1){\n        if(n % factor[i]\
    \ == 0){\n            factors.push(factor[i]);\n            n = n / factor[i];\n\
    \        }else{\n            i++;\n        }\n    }\n    return factors;\n}",
  "\tvar res = [], f = 2;\n\twhile(n > 1){\n\t\twhile(n % f == 0){\n\t\t\tres.push(f);\n\
    \t\t\tn /= f;\n\t\t}\n\t\tf += 1;\n\t}\n\treturn res;\n}\n", "    var n = n;\n\
    \    var primes = [];\n    for (i = 2; i <= n; i++) {\n        var counter = 0;\n\
    \        while (n % i == 0) {\n            counter++;\n            n = n / i;\n\
    \        }\n        if (counter > 0) {\n            for (j = 0; j < counter; j++)\
    \ {\n                primes.push(i);\n            }\n        }\n    }\n    return\
    \ primes;\n}\n", "    var divisor = 2;\n    var factors = [];\n    while (n >=\
    \ divisor) {\n        if (n % divisor == 0) {\n            factors.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor = divisor\
    \ + 1;\n        }\n    }\n    return factors;\n}\n", "    var result = [];\n \
    \   for (var i = 2; i <= n; i++) {\n        while (n % i === 0) {\n          \
    \  result.push(i);\n            n /= i;\n        }\n    }\n    return result;\n\
    }", "  let factors = [];\n  let i = 2;\n  while (n > 1) {\n    if (n % i === 0)\
    \ {\n      factors.push(i);\n      n = n / i;\n    } else {\n      i++;\n    }\n\
    \  }\n  return factors;\n}\n", "\n}\n", "  // your solution goes here\n}\n", " \
    \   var p = [];\n    for (var i = 2; i <= n; i++) {\n        while ((n % i) ===\
    \ 0) {\n            p.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ p;\n}", "    var factors = [];\n    var divisor = 2;\n    while (n > 2){\n \
    \       if (n % divisor == 0){\n            factors.push(divisor);\n         \
    \   n = n / divisor;\n        }\n        else {\n            divisor++;\n    \
    \    }\n    }\n    return factors;\n}\n", "    for (var i = 2; i <= n; i++) {\n\
    \        if (n % i == 0) {\n            var prime = factorize(n / i);\n      \
    \      prime.unshift(i);\n            return prime;\n        }\n    }\n    return\
    \ [n];\n}", "    let result = [];\n    let divisor = 2;\n    while (n > 1){\n\
    \        if (n % divisor === 0){\n            result.push(divisor);\n        \
    \    n = n / divisor;\n        } else {\n            divisor++;\n        }\n \
    \   }\n    return result;\n}", "    let result = [];\n    if (n % 2 === 0) {\n\
    \        result.push(2);\n        n = n / 2;\n    }\n    let divisor = 3;\n  \
    \  while (n >= 3) {\n        if (n % divisor === 0) {\n            result.push(divisor);\n\
    \            n = n / divisor;\n        } else {\n            divisor += 2;\n \
    \       }\n    }\n    return result;\n}\n\nmodule.exports = {\n    factors,\n\
    \    factorsRec,\n    factorize\n};", "  var factors = [];\n  while (n%2 == 0){\n\
    \    factors.push(2);\n    n = n/2;\n  }\n  for (var i = 3; i <= Math.sqrt(n);\
    \ i = i+2){\n    while (n%i == 0){\n      factors.push(i);\n      n = n/i;\n \
    \   }\n  }\n  if (n > 2)\n    factors.push(n);\n  return factors;\n}", "    let\
    \ factors=[];\n    if(n==0){\n        return null;\n    }\n    if(n==1){\n   \
    \     return [];\n    }\n    for(let i=2; i<=n; i++){\n        if(n%i==0){\n \
    \           factors.push(i);\n            n=n/i;\n            i=1;\n        }\n\
    \    }\n    return factors;\n}\n", "    let result = [];\n    let divider = 2;\n\
    \    while (n > 1){\n        while (n % divider === 0){\n            result.push(divider);\n\
    \            n /= divider;\n        }\n        divider += 1;\n    }\n    return\
    \ result;\n}", "\tvar i, f=[];\n\tfor(i=2; i <= n; i++){\n\t\twhile (n % i ===\
    \ 0){\n\t\t\tf.push(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn f;\n}\n", "    let\
    \ factors = [];\n    let counter = 0;\n    let i = 2;\n    while (n > 1){\n  \
    \      while (n % i === 0){\n            counter++;\n            n /= i;\n   \
    \     }\n        if (counter > 0){\n            factors.push(i);\n           \
    \ counter = 0;\n        }\n        i++;\n    }\n    return factors;\n}\n", " \
    \   var result = [];\n    for (var i = 2; i <= n; i++) {\n        while (n % i\
    \ === 0) {\n            result.push(i);\n            n /= i;\n        }\n    }\n\
    \    return result;\n}", "    let res = [];\n    if (n === 1) return res;\n  \
    \  let number = n;\n    let d = 2;\n    while (d * d <= number) {\n        while\
    \ (number % d === 0) {\n            res.push(d);\n            number /= d;\n \
    \       }\n        d += 1;\n    }\n    if (number > 1) {\n        res.push(number);\n\
    \    }\n    return res;\n}\n", "    let result = [];\n    for (let i = 2; i <=\
    \ n; i++) {\n        while(n % i === 0) {\n            result.push(i);\n     \
    \       n /= i;\n        }\n    }\n    return result;\n}\n", "    // Implement\
    \ me!\n}", "    if (typeof n === 'number'){\n        var arr = [];\n        while\
    \ (n%2 === 0){\n            arr.push(2);\n            n /= 2;\n        }\n   \
    \     for (var i = 3; i < n/2; i+=2){\n            while (n%i === 0){\n      \
    \          arr.push(i);\n                n /= i;\n            }\n        }\n \
    \       if (n > 2){\n            arr.push(n);\n        }\n        return arr;\n\
    \    }\n    return false;\n}", "\tvar factors = [];\n\tvar i = 2;\n\twhile (n\
    \ > 1){\n\t\twhile (n % i == 0){\n\t\t\tfactors.push(i);\n\t\t\tn /= i;\n\t\t\
    }\n\t\ti++;\n\t}\n\treturn factors;\n}", "\tlet factors = [];\n\tlet prime = 2;\n\
    \twhile (n > 1){\n\t\twhile (n % prime === 0){\n\t\t\tfactors.push(prime);\n\t\
    \t\tn = n / prime;\n\t\t}\n\t\tprime = prime + 1;\n\t}\n\treturn factors;\n}",
  "\tvar factors = [];\n\tfor (var i = 2; i <= n; i++) {\n\t\twhile (n % i === 0)\
    \ {\n\t\t\tfactors.push(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn factors;\n}\n",
  "    const arr = [];\n    for (let i = 2; i <= n; i++) {\n        while (n % i ===\
    \ 0) {\n            arr.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ arr;\n}\n", "  let currentDivisor = 2,\n      factors = [];\n  while (n > 1)\
    \ {\n    if (n % currentDivisor === 0) {\n      factors.push(currentDivisor);\n\
    \      n /= currentDivisor;\n    } else {\n      currentDivisor++;\n    }\n  }\n\
    \  return factors;\n}\n", "    var checkN = n;\n    var checkArr = [];\n    var\
    \ result = [];\n    var i = 2;\n    while(checkN >= i){\n        if(checkN % i\
    \ === 0){\n            checkArr.push(i);\n            checkN = checkN / i;\n \
    \       }\n        else i++;\n    }\n    if(checkArr.length === 0) checkArr.push(n);\n\
    \    var arrCount = {};\n    for(var j = 0; j < checkArr.length; j++){\n     \
    \   if(arrCount[checkArr[j]] === undefined){\n            arrCount[checkArr[j]]\
    \ = 1;\n        }else arrCount[checkArr[j]]++;\n    }\n    for(var key in arrCount){\n\
    \        for(var k = 0; k < arrCount[key]; k++){\n            result.push(parseInt(key));\n\
    \        }\n    }\n    return result;\n}", "    var factors = [];\n    while (n%2===0){\n\
    \        factors.push(2);\n        n = n/2;\n    }\n    var sqrtn = Math.sqrt(n);\n\
    \    for (var i = 3; i <= sqrtn; i+=2){\n        while (n%i === 0){\n        \
    \    factors.push(i);\n            n = n/i;\n        }\n    }\n    if (n > 2){\n\
    \        factors.push(n);\n    }\n    return factors;\n}\n", "    let a = [],\
    \ b = n;\n    for (let i = 2; i <= b; i++) {\n        while ((b % i) === 0) {\n\
    \            a.push(i);\n            b /= i;\n        }\n    }\n    return a;\n\
    }\n", "    if (n===1) return [1];\n    var factors = [];\n    if (n%2 === 0) {\n\
    \        factors.push(2);\n        factors = factors.concat(factorize(n/2));\n\
    \    } else {\n        var i = 3;\n        while (i <= n) {\n            if (n%i\
    \ === 0) {\n                factors.push(i);\n                factors = factors.concat(factorize(n/i));\n\
    \                break;\n            }\n            i += 2;\n        }\n    }\n\
    \    return factors;\n}\n", "    var i = 2;\n    var factors = [];\n    while\
    \ (i<=n){\n        if (n%i==0){\n            factors.push(i);\n            n =\
    \ n/i;\n        }\n        else {\n            i++;\n        }\n    }\n    return\
    \ factors;\n}\n", "  var factors = [];\n  var primes = sieve(Math.sqrt(n));\n\
    \  for (var i = 0; i < primes.length; i++) {\n    while (n % primes[i] === 0)\
    \ {\n      factors.push(primes[i]);\n      n /= primes[i];\n    }\n  }\n  if (n\
    \ > 1) {\n    factors.push(n);\n  }\n  return factors;\n}\n", "    let sqrtN =\
    \ Math.floor(Math.sqrt(n));\n    let result = [];\n    for (let i = 2; i <= sqrtN;\
    \ i++) {\n        while (n % i === 0) {\n            result.push(i);\n       \
    \     n /= i;\n        }\n    }\n    if (n > 1) result.push(n);\n    return result;\n\
    }\n", "    let primeFactors = [];\n    for (let i = 2; i <= n; i++) {\n      \
    \  if (n % i === 0) {\n            primeFactors.push(i);\n            n /= i;\n\
    \            i = 1;\n        }\n    }\n    return primeFactors;\n}", "   var factor\
    \ = [];\n   var i = 2;\n   while(n !== 1){\n       if(n % i === 0){\n        \
    \   factor.push(i);\n           n = n / i;\n       }\n       else{\n         \
    \  i++;\n       }\n   }\n   return factor;\n}\n", "    let primeFactors = [];\n\
    \    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            n\
    \ /= i;\n            primeFactors.push(i);\n            i--;\n        }\n    }\n\
    \    return primeFactors;\n}", "    let res = [];\n    for (let i = 2; i <= n;\
    \ i++) {\n        while (n % i === 0) {\n            res.push(i);\n          \
    \  n /= i;\n        }\n    }\n    return res;\n}", "    var temp = n;\n    var\
    \ result = [];\n    for (var i = 2; i <= temp; i++) {\n        while (temp % i\
    \ == 0) {\n            result.push(i);\n            temp /= i;\n        }\n  \
    \  }\n    return result;\n}\n", "  var res = [];\n  for (var i = 2; i <= n; i++)\
    \ {\n    while ((n % i) === 0) {\n      res.push(i);\n      n /= i;\n    }\n \
    \ }\n  return res;\n}\n", "\tconst factors = [];\n\twhile (n % 2 === 0) {\n\t\t\
    factors.push(2);\n\t\tn = n / 2;\n\t}\n\tfor (let i = 3; i <= Math.sqrt(n); i\
    \ = i + 2) {\n\t\twhile (n % i === 0) {\n\t\t\tfactors.push(i);\n\t\t\tn = n /\
    \ i;\n\t\t}\n\t}\n\tif (n > 2) {\n\t\tfactors.push(n);\n\t}\n\treturn factors;\n\
    }", "    var factors = [];\n    var currentDivisor = 2;\n    while (n>1){\n  \
    \      while (n%currentDivisor==0){\n            factors.push(currentDivisor);\n\
    \            n /= currentDivisor;\n        }\n        currentDivisor ++;\n   \
    \ }\n    return factors;\n}\n", "    let primeFactors = [];\n    for (let i =\
    \ 2; i <= n; i++) {\n        if (n % i === 0){\n            primeFactors.push(i);\n\
    \            n = n / i;\n            i--;\n        }\n    }\n    return primeFactors;\n\
    }", "    var factors = [];\n    while (n % 2 === 0) {\n        factors.push(2);\n\
    \        n = n / 2;\n    }\n    for (var i = 3; i <= Math.sqrt(n); i+= 2) {\n\
    \        while (n % i === 0) {\n            factors.push(i);\n            n =\
    \ n / i;\n        }\n    }\n    if (n > 2) {\n        factors.push(n);\n    }\n\
    \    return factors;\n}", "    var factors = [];\n    for (var i = 2; i <= n;\
    \ i++) {\n        while (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        }\n    }\n    return factors;\n}\n", "    if (n === 1)\
    \ {\n        return [1];\n    }\n    let x = 2;\n    let arr = [];\n    while\
    \ (n >= x) {\n        if (n % x === 0) {\n            arr.push(x);\n         \
    \   n = n / x;\n        } else {\n            x += 1;\n        }\n    }\n    return\
    \ arr;\n}", "    let arr = []\n    let i = 2\n    while (n > 1){\n        if (n\
    \ % i === 0){\n            arr.push(i)\n            n = n / i\n        }\n   \
    \     else{\n            i++\n        }\n    }\n    return arr\n}\n", "    let\
    \ factors = []\n    let num = n\n    while (num % 2 === 0){\n        factors.push(2)\n\
    \        num = num / 2\n    }\n    let p = 3\n    while (num > 1){\n        while\
    \ (num % p === 0){\n            factors.push(p)\n            num = num / p\n \
    \       }\n        p = p + 2\n    }\n    return factors\n}\n\nlet res = factorize(65)",
  "    var result = [];\n    for (var i = 2; i < n/2; i++){\n        if (n % i ==\
    \ 0){\n            result.push(i);\n            n = n / i;\n            i--;\n\
    \        }\n    }\n    result.push(n);\n    return result;\n}\n", "    var res\
    \ = [];\n    var limit = n;\n    for (var i = 2; i < limit; i++) {\n        if\
    \ (n % i == 0) {\n            res.push(i);\n            limit = n / i;\n     \
    \       i = 2;\n        }\n    }\n    res.push(limit);\n    return res;\n}", " \
    \   let factors = [];\n    let factor = 2;\n    while (n > 1){\n        while\
    \ (n % factor === 0){\n            factors.push(factor);\n            n /= factor;\n\
    \        }\n        factor++;\n    }\n    return factors;\n}\n", "    var i =\
    \ 2;\n    var factors = [];\n    while (i <= n) {\n        if (n % i == 0) {\n\
    \            factors.push(i);\n            n = n / i;\n        } else {\n    \
    \        i += 1;\n        }\n    }\n    return factors;\n}", "    let output =\
    \ [];\n    while (n % 2 === 0) {\n        output.push(2);\n        n = n / 2;\n\
    \    }\n    for (let i = 3; i <= Math.sqrt(n); i = i + 2) {\n        while (n\
    \ % i === 0) {\n            output.push(i);\n            n = n / i;\n        }\n\
    \    }\n    if (n > 2) {\n        output.push(n);\n    }\n    return output;\n\
    }", "    let factors = [];\n    let divisor = 2;\n    while (n !== 1){\n     \
    \   if (n % divisor === 0){\n            factors.push(divisor);\n            n\
    \ = n / divisor;\n        }\n        else {\n            divisor ++;\n       \
    \ }\n    }\n    return factors;\n}\n", "  let primeFactors = [];\n  let divisor\
    \ = 2;\n  while (n > 2){\n    if (n % divisor == 0){\n      primeFactors.push(divisor);\n\
    \      n = n / divisor;\n    } else {\n      divisor++\n    }\n  }\n  return primeFactors;\n\
    }\n", "    let arr = [];\n    for (let i = 2; i <= n; i++) {\n        while (n\
    \ % i === 0) {\n            arr.push(i);\n            n /= i;\n        }\n   \
    \ }\n    return arr;\n}", "    let factors = [];\n    while (n % 2 === 0) {\n\
    \        factors.push(2);\n        n = n / 2;\n    }\n    for (let i = 3; i <\
    \ Math.sqrt(n); i+=2) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n = n / i;\n        }\n    }\n    if (n > 2) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}", "\t//write your code here\n\tvar arr = [], i;\n\
    \    for (i = 2; i <= n; i++) {\n        while ((n % i) === 0) {\n           \
    \ arr.push(i);\n            n /= i;\n        }\n    }\n    return arr;\n}\n",
  "  \n  var array = []\n  for (var i = 2; i <= n; i++) {\n    if (n % i == 0) {\n\
    \      array.push(i)\n      n = n / i\n      i = i - 1\n    }\n  }\n  return array\n\
    }\n", "    let result = [];\n    if (n == 0){\n        return \"Wrong Input\"\
    ;\n    }\n    while (n % 2 == 0){\n        result.push(2);\n        n = n / 2;\n\
    \    }\n    for (let i = 3; i <= Math.sqrt(n); i = i + 2){\n        while (n %\
    \ i == 0){\n            result.push(i);\n            n = n / i;\n        }\n \
    \   }\n    if (n > 2){\n        result.push(n);\n    }\n    return result;\n}",
  "\tvar factors = [];\n\tfor (var i = 2; i <= n; i++) {\n\t\twhile (n % i === 0)\
    \ {\n\t\t\tfactors.push(i);\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn factors;\n}",
  "  let k = 2;\n  let result = [];\n  while (n > 1) {\n    if (n % k === 0) {\n \
    \     result.push(k);\n      n = n / k;\n    } else {\n      k++;\n    }\n  }\n\
    \  return result;\n}\n\n", "    var fact = {};\n    for (var i = 2; i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            if (fact[i]) {\n              \
    \  fact[i]++;\n            } else {\n                fact[i] = 1;\n          \
    \  }\n            n /= i;\n        }\n    }\n    return Object.keys(fact).map(function(a){\n\
    \        return Number(a);\n    });\n}\n", "\tvar factor = 2;\n\tvar factors =\
    \ [];\n\twhile (n > 1){\n\t\tif (n % factor == 0){\n\t\t\tfactors.push(factor);\n\
    \t\t\tn = n / factor;\n\t\t}\n\t\telse{\n\t\t\tfactor++;\n\t\t}\n\t}\n\treturn\
    \ factors;\n}", "    const primes = sieveEratosthenes(n);\n    let res = [];\n\
    \    for (let i = 0; primes[i] <= n; i++) {\n        let j = 0;\n        while\
    \ (n % primes[i] === 0) {\n            n /= primes[i];\n            j++;\n   \
    \     }\n        res = res.concat(Array(j).fill(primes[i]));\n    }\n    return\
    \ res;\n}", "    let res = [], i = 2;\n    while (n >= 2) {\n        if (n % i\
    \ === 0) {\n            res.push(i);\n            n = n / i;\n        } else {\n\
    \            i++;\n        }\n    }\n    return res;\n}", "    let result = [];\n\
    \    for (let i = 2; i <= n; i++) {\n        while (n % i === 0) {\n         \
    \   result.push(i);\n            n /= i;\n        }\n    }\n    return result;\n\
    }", "    if (n <= 0) return null;\n    if (n == 1) return [1];\n    var factors\
    \ = [];\n    for (var i = 2; i <= n; i++){\n        if (n % i == 0){\n       \
    \     factors.push(i);\n            n /= i;\n            i--;\n        }\n   \
    \ }\n    return factors;\n}", "    var arr = [];\n    for (var i = 2; i <= n;\
    \ i++) {\n        while (n % i == 0) {\n            arr.push(i);\n           \
    \ n = n / i;\n        }\n    }\n    return arr;\n}\n", "\tvar factorization =\
    \ [];\n\tif (n <= 1) {\n\t\treturn factorization;\n\t}\n\tvar prime = 2;\n\twhile\
    \ (n > 1) {\n\t\twhile (n % prime === 0) {\n\t\t\tfactorization.push(prime);\n\
    \t\t\tn /= prime;\n\t\t}\n\t\tprime += 1;\n\t}\n\treturn factorization;\n}\n",
  "    let a = [];\n    for (let i = 2; i <= n; i++) {\n        while ((n % i) ===\
    \ 0) {\n            a.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ a;\n}", "    var result=[];\n    var i=2;\n    while(n>1){\n        while(n%i===0){\n\
    \            result.push(i);\n            n=n/i;\n        }\n        i++;\n  \
    \  }\n    return result;\n}\n\n\n", "    var primes = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   var result = [];\n    for (var i = 0; i < primes.length; i++) {\n        while\
    \ (n % primes[i] === 0) {\n            result.push(primes[i]);\n            n\
    \ = n / primes[i];\n        }\n    }\n    return result;\n}\n", "    var result\
    \ = [];\n    var i = 2;\n    while (n > 1){\n        while (n % i == 0){\n   \
    \         result.push(i);\n            n /= i;\n        }\n        i += 1;\n \
    \   }\n    return result;\n}\n", "    let list = [];\n    while (n % 2 === 0)\
    \ {\n        list.push(2);\n        n = n / 2;\n    }\n    let i = 3;\n    while\
    \ (i <= Math.sqrt(n)) {\n        while (n % i === 0) {\n            list.push(i);\n\
    \            n = n / i;\n        }\n        i = i + 2;\n    }\n    if (n > 2)\n\
    \        list.push(n);\n    return list;\n}\n", "  var factor = 2,\n      factors\
    \ = [];\n  while (n !== 1) {\n    if (n % factor === 0) {\n      factors.push(factor);\n\
    \      n /= factor;\n    } else {\n      factor++;\n    }\n  }\n  return factors;\n\
    }", "    var factor = 2;\n    var factors = [];\n    while (n > 1) {\n       \
    \ while (n % factor == 0) {\n            factors.push(factor);\n            n\
    \ = n / factor;\n        }\n        factor = factor + 1;\n    }\n    return factors;\n\
    }", "    let divisor = 2;\n    let primeFactors = [];\n    while (n > 2){\n  \
    \      if (n % divisor == 0){\n            primeFactors.push(divisor);\n     \
    \       n = n / divisor;\n        } else {\n            divisor++\n        }\n\
    \    }\n    return primeFactors;\n}", "    let factors = [];\n    for (let i =\
    \ 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}", "    var factors\
    \ = [];\n    for (var i = 2; i < n; i++) {\n        while (n % i === 0) {\n  \
    \          factors.push(i);\n            n /= i;\n        }\n    }\n    return\
    \ factors;\n}", "    //return []\n}\n", "    let num = n;\n    let arr = [];\n\
    \    let i = 2;\n    while (num > 1){\n        if (num % i === 0){\n         \
    \   arr.push(i);\n            num = num / i;\n        } else {\n            i\
    \ = i + 1;\n        }\n    }\n    return arr;\n}\n", "    let divisor = 2;\n \
    \   let factors = [];\n    while (n > 2){\n        if (n % divisor == 0){\n  \
    \          factors.push(divisor);\n            n = n / divisor;\n        } else\
    \ {\n            divisor++;\n        }\n    }\n    return factors;\n}", "    let\
    \ arr = [];\n    while(n % 2 === 0){\n        arr.push(2);\n        n /= 2;\n\
    \    }\n    let i = 3;\n    while(i * i <= n){\n        while(n % i === 0){\n\
    \            arr.push(i);\n            n /= i;\n        }\n        i += 2;\n \
    \   }\n    if(n > 2){\n        arr.push(n);\n    }\n    return arr;\n}", "   \
    \ let factors = [];\n    let i = 2;\n    while (n > 1){\n        if (n % i ===\
    \ 0){\n            factors.push(i);\n            n = n / i;\n        }\n     \
    \   else{\n            i++;\n        }\n    }\n    return factors;\n}", "  let\
    \ i = 0, num = n, result = [];\n  while (i < n) {\n    i++;\n    if (n % i ===\
    \ 0) {\n      n = n / i;\n      result.push(i);\n      i = 0;\n    }\n  }\n  return\
    \ result;\n}\n", "    // Your code here\n}\n", "    const factors = [];\n    for\
    \ (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n            i--;\n        }\n    }\n    return factors;\n\
    }", "    //\u0447\u0438\u0441\u043B\u043E \u043F\u0440\u043E\u0441\u0442\u043E\
    \u0435 \u0435\u0441\u043B\u0438 \u043E\u043D\u043E \u043D\u0435 \u0438\u043C\u0435\
    \u0435\u0442 \u0434\u0435\u043B\u0438\u0442\u0435\u043B\u0435\u0439\n    let result\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n    \
    \        result.push(i);\n            i--;\n            n = n / i;\n        }\n\
    \    }\n    return result;\n}", "    var arr = [];\n    if(n===1){\n        return\
    \ [1];\n    }\n    for(var i=2;i<=n;i++){\n        while(n%i===0){\n         \
    \   arr.push(i);\n            n=n/i;\n        }\n    }\n    return arr;\n}", "\t\
    let factors = [];\n\tlet i = 2;\n\twhile (n > 1){\n\t\twhile (n % i === 0){\n\t\
    \t\tfactors.push(i);\n\t\t\tn /= i;\n\t\t}\n\t\ti += 1;\n\t}\n\treturn factors;\n\
    }\n\nmodule.exports = {\n\tsum,\n\tsumOfN,\n\tsumOfSquares,\n\tisPrime,\n\tfactors,\n\
    \tfactorize\n};", "    var arr = [];\n    var i = 2;\n    while (n != 1){\n  \
    \      if (n % i == 0){\n            arr.push(i);\n            n = n / i;\n  \
    \      } else {\n            i++;\n        }\n    }\n    return arr;\n}", "  \
    \  // console.log(n)\n    let factors = [1];\n    for (let i = 2; i <= n; i++){\n\
    \        // console.log(i)\n        if (n % i === 0){\n            factors.push(i);\n\
    \            // console.log('pushed ' + i);\n            factorize(n/i);\n   \
    \         // console.log('divided ' + n/i);\n            return factors;\n   \
    \     }\n    }\n    return factors;\n}", "    var res = [];\n    while(n>1){\n\
    \        for(var i=2; i<=n; i++){\n            if(n%i == 0){\n               \
    \ res.push(i);\n                n = n/i;\n                break;\n           \
    \ }\n        }\n    }\n    return res;\n}\n\n", "    var a = [];\n    for (var\
    \ i = 2; i < n; i++) {\n        if (n % i == 0) {\n            var temp = [i];\n\
    \            a.push(temp);\n            n = n / i;\n            i = 2;\n     \
    \   }\n    }\n    return a;\n}", "    let arr = [];\n    for (let i = 2; i < n;\
    \ i++) {\n        while (n % i === 0) {\n            arr.push(i);\n          \
    \  n /= i;\n        }\n    }\n    if (n > 1) {\n        arr.push(n);\n    }\n\
    \    return arr;\n}\n", "    var primeFactors = [];\n    for (var i = 2; i <=\
    \ n; i++) {\n        while (n % i === 0) {\n            primeFactors.push(i);\n\
    \            n /= i;\n        }\n    }\n    return primeFactors;\n}", "  var factors\
    \ = [];\n  var primes = findPrimes(n);\n  var i = 0;\n  while (n > 1){\n    var\
    \ current_prime = primes[i];\n    if (n % current_prime === 0){\n      factors.push(current_prime);\n\
    \      n = n / current_prime;\n    } else {\n      i += 1;\n    }\n  }\n  return\
    \ factors;\n}\n", "    var a = [];\n    var i = 2;\n    while (n > 1) {\n    \
    \    while (n % i == 0) {\n            a.push(i);\n            n = n / i;\n  \
    \      }\n        i = i + 1;\n    }\n    return a;\n}", "    let primes = [];\n\
    \    let factors = [];\n    for (let i = 1; i <= n; i++){\n        if (isPrime(i)){\n\
    \            primes.push(i);\n        }\n    }\n    for (let i = 0; i < primes.length;\
    \ i++){\n        while (n % primes[i] === 0){\n            factors.push(primes[i]);\n\
    \            n = n / primes[i];\n        }\n    }\n    return factors;\n}", " \
    \ var div = 2;\n  var factors = [];\n  while (n > 1){\n    if (n % div == 0){\n\
    \      factors.push(div);\n      n = n / div;\n    }\n    else {\n      div =\
    \ div + 1;\n    }\n  }\n  return factors;\n}", "    var arr = [];\n    for (var\
    \ i = 1; i <= n; i++) {\n        if (n % i == 0 && prime(i)) {\n            for\
    \ (var j = 0; j < n / i; j++) {\n                arr.push(i);\n            }\n\
    \        }\n    }\n    return arr;\n}", "    var factors = [];\n    for (var i\
    \ = 2; i <= n; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    return factors;\n}\n", "    var fact\
    \ = [];\n    var factor = 2;\n    while (n > 1) {\n        while (n % factor ==\
    \ 0) {\n            fact.push(factor);\n            n = n / factor;\n        }\n\
    \        factor++;\n    }\n    return fact;\n}", "\tfor (var i = 2; i <= n; i++)\
    \ {\n\t\tif (n % i == 0) {\n\t\t\treturn [i].concat(factorize(n/i));\n\t\t}\n\t\
    }\n\treturn [];\n}", "    let result = [];\n    let current = 2;\n    while (n\
    \ > 1){\n        if (n % current === 0){\n            result.push(current);\n\
    \            n = n / current;\n        } else {\n            current += 1;\n \
    \       }\n    }\n    return result;\n}\n", "    const factors = [];\n    while\
    \ (n % 2 === 0) {\n        factors.push(2);\n        n = n / 2;\n    }\n    let\
    \ sqrtOfN = Math.sqrt(n);\n    for (let i = 3; i <= sqrtOfN; i++) {\n        while\
    \ (n % i === 0) {\n            factors.push(i);\n            n = n / i;\n    \
    \    }\n    }\n    if (n > 2) {\n        factors.push(n);\n    }\n    return factors;\n\
    }", "  if (n<2) {return null;}\n  var f = 2;\n  var factors = [];\n  while (n\
    \ > 1) {\n    while (n % f == 0) {\n      factors.push(f);\n      n /= f;\n  \
    \  }\n    f += 1;\n  }\n  return factors;\n}\n", "    let result = [];\n    let\
    \ i = 2;\n    while (n > 1){\n        if (n % i === 0){\n            result.push(i);\n\
    \            n = n / i;\n        }\n        else{\n            i++;\n        }\n\
    \    }\n    return result;\n}\n\nmodule.exports = {\n    factorize,\n};", "  \
    \  var factors = [];\n    while (n % 2 === 0) {\n        factors.push(2);\n  \
    \      n = n / 2;\n    }\n    var sqrt = Math.sqrt(n);\n    for (var i = 3; i\
    \ <= sqrt; i++) {\n        while (n % i === 0) {\n            factors.push(i);\n\
    \            n = n / i;\n        }\n    }\n    if (n > 2) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n", "    var arr = [];\n    var i = 2;\n    while\
    \ (n > 1){\n        if (n % i == 0){\n            arr.push(i);\n            n\
    \ = n / i;\n        } else {\n            i++;\n        }\n    }\n    return arr;\n\
    }\n", "    var factors = [];\n    for (var i = 2; i <= n; i++) {\n        while\
    \ ((n % i) === 0) {\n            factors.push(i);\n            n /= i;\n     \
    \   }\n    }\n    return factors;\n}\n", "    let primes = [];\n    for (let i\
    \ = 2; i < n; i++) {\n        while (n % i === 0) {\n            primes.push(i);\n\
    \            n /= i;\n        }\n    }\n    return primes;\n}\n", "    var factors\
    \ = [],\n        divisor = 2;\n\n    while(n>2){\n        if(n % divisor == 0){\n\
    \            factors.push(divisor);\n            n= n/ divisor;\n        }\n \
    \       else{\n            divisor++;\n        }\n    }\n    return factors;\n\
    }\n", "  //TODO\n    let factors = [];\n    let primeNum = 2;\n    while (n !=\
    \ 1) {\n        if (n % primeNum == 0) {\n            factors.push(primeNum);\n\
    \            n = n / primeNum;\n        } else {\n            primeNum++;\n  \
    \      }\n    }\n    return factors;\n}\n", "    var primes = getPrimes(n),\n\
    \        result = [];\n    while(n > 1){\n        primes.forEach(function(prime){\n\
    \            if(n % prime === 0){\n                result.push(prime);\n     \
    \           n /= prime;\n            }\n        });\n    }\n    return result;\n\
    }\n", "    let factor = 2,\n        factors = [];\n    while (n > 1) {\n     \
    \   if (n % factor === 0) {\n            factors.push(factor);\n            n\
    \ /= factor;\n        } else {\n            factor++;\n        }\n    }\n    return\
    \ factors;\n}", "    var primeFactors = [],\n        divisor = 2;\n\n    while(n>2){\n\
    \        if(n % divisor == 0){\n            primeFactors.push(divisor);\n    \
    \        n= n/ divisor;\n        }\n        else{\n            divisor++;\n  \
    \      }\n    }\n    return primeFactors;\n}", "  let res = [];\n  let d = 2;\n\
    \  while (n > 1) {\n    while (n % d === 0) {\n      res.push(d);\n      n /=\
    \ d;\n    }\n    d += 1;\n  }\n  return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
