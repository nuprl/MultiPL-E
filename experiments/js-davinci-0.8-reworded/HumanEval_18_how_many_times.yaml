name: HumanEval_18_how_many_times
language: js
prompt: "//Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n// >>> how_many_times(\"\", \"a\")\n// 0\n// >>> how_many_times(\"\
  aaa\", \"a\")\n// 3\n// >>> how_many_times(\"aaaa\", \"aa\")\n// 3\nfunction how_many_times(string,\
  \ substring){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = how_many_times;\n  assert.deepEqual(candidate(\"\", \"x\"),0);\n  assert.deepEqual(candidate(\"\
  xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"cacacacac\", \"cac\"),4);\n\
  \  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n}\n\ntest();"
completions: ["  // TODO - Complete implementation\n}\n", "\tvar i = 0;\n\tvar count\
    \ = 0;\n\twhile(string.indexOf(substring, i) !== -1){\n\t\tcount++;\n\t\ti = string.indexOf(substring,\
    \ i) + 1;\n\t}\n\treturn count;\n}", "    var count = 0;\n    for (var i = 0;\
    \ i < string.length; i++){\n        if (string.substring(i, i + substring.length)\
    \ == substring){\n            count += 1;\n        }\n    }\n    return count;\n\
    }", "  if(substring.length === 0){\n    return 0;\n  }\n  let i = 0;\n  let n\
    \ = 0;\n  while(i < string.length){\n    i = string.indexOf(substring, i);\n \
    \   if(i === -1){\n      break;\n    }\n    n++;\n    i++;\n  }\n  return n;\n\
    }\n\n", "  let counter = 0;\n  for (let i = 0; i < string.length; i++){\n    if\
    \ (string.substring(i, i + substring.length) === substring){\n      counter++;\n\
    \    }\n  }\n  return counter;\n}\n", "    var count = 0;\n    for (var i = 0;\
    \ i < string.length; i++){\n        if (string.slice(i, i + substring.length)\
    \ == substring){\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "  var count = 0\n  for (var i = 0; i < string.length; i++){\n    if (string.slice(i,\
    \ i + substring.length) === substring){\n      count++\n    }\n  }\n  return count\n\
    }\n", "\tif (string === '' || substring === '') {\n\t\treturn 0;\n\t}\n\tlet count\
    \ = 0;\n\tfor (var i = 0; i < string.length; i++) {\n\t\tif (string[i] === substring[0])\
    \ {\n\t\t\tcount += (string.slice(i, i + substring.length) === substring) ? 1\
    \ : 0;\n\t\t}\n\t}\n\treturn count;\n}\n", "    var counter = 0;\n    var index\
    \ = string.indexOf(substring);\n    while (index != -1) {\n        counter++;\n\
    \        index = string.indexOf(substring, index + 1);\n    }\n    return counter;\n\
    }\n", "    if (substring.length === 0) return 0;\n    let i = 0;\n    let j =\
    \ substring.length;\n    let count = 0;\n    while (i < string.length && j <=\
    \ string.length) {\n        if (string.slice(i, j) === substring) {\n        \
    \    count++;\n            i++;\n            j++;\n        } else {\n        \
    \    i++;\n            j++;\n        }\n    }\n    return count;\n}", "  return\
    \ string.split(substring).length - 1;\n}\n", "    let counter = 0;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string.substring(i, i + substring.length)\
    \ == substring) {\n            counter++;\n        }\n    }\n    return counter;\n\
    }\n", "  return string.split(substring).length - 1;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string.substring(i,\
    \ i + substring.length) == substring) {\n            count++;\n        }\n   \
    \ }\n    return count;\n}\n", "  var count = 0;\n  if (string !== \"\" && substring\
    \ !== \"\"){\n    for (var i = 0; i < string.length; i++){\n      if (string[i]\
    \ == substring[0]){\n        if (string.substring(i, i + substring.length) ==\
    \ substring){\n          count += 1;\n        }\n      }\n    }\n  }\n  return\
    \ count;\n}\n", "    var count = 0;\n    var i = 0;\n    while (i <= string.length\
    \ - substring.length) {\n        if (string.substring(i, i + substring.length)\
    \ == substring) {\n            count++;\n            i += substring.length;\n\
    \        } else {\n            i++;\n        }\n    }\n    return count;\n}",
  "  var occurences = 0;\n  for (var i = 0; i < string.length; i++){\n    for (var\
    \ j = 0; j < substring.length; j++){\n      if (string[i + j] !== substring[j]){\n\
    \        break;\n      }\n      if (j === substring.length - 1){\n        occurences++;\n\
    \      }\n    }\n  }\n  return occurences;\n}\n", "\tvar count = 0;\n\tfor(var\
    \ i = 0; i < string.length; i++){\n\t\tif(string.substring(i, i + substring.length)\
    \ == substring){\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}\n", "    let\
    \ res = 0;\n    let len = substring.length;\n    let remainder = string.length\
    \ % len;\n    let count = Math.floor(string.length / len);\n    if (len !== 0)\
    \ {\n        if (remainder === 0) {\n            res = count;\n        } else\
    \ {\n            res = count + 1;\n        }\n    }\n    return res;\n}", "  \
    \  return string.split(substring).length - 1;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
