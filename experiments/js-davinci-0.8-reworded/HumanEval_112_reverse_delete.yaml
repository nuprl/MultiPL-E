name: HumanEval_112_reverse_delete
language: js
prompt: "//Task\n// We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n// then check if the result\
  \ string is palindrome.\n// A string is called palindrome if it reads the same backward\
  \ as forward.\n// You should return an array containing the result string and true/false\
  \ for the check.\n// Example\n// >>> reverse_delete(\"abcde\", \"ae\")\n// [\"bcd\"\
  , false]\n// >>> reverse_delete(\"abcdef\", \"b\")\n// [\"acdef\", false]\n// >>>\
  \ reverse_delete(\"abcdedcba\", \"ab\")\n// [\"cdedc\", true]\nfunction reverse_delete(s,\
  \ c){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = reverse_delete;\n  assert.deepEqual(candidate(\"abcde\", \"ae\"),[\"bcd\", false]);\n\
  \  assert.deepEqual(candidate(\"abcdef\", \"b\"),[\"acdef\", false]);\n  assert.deepEqual(candidate(\"\
  abcdedcba\", \"ab\"),[\"cdedc\", true]);\n  assert.deepEqual(candidate(\"dwik\"\
  , \"w\"),[\"dik\", false]);\n  assert.deepEqual(candidate(\"a\", \"a\"),[\"\", true]);\n\
  \  assert.deepEqual(candidate(\"abcdedcba\", \"\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"\
  abcdedcba\", \"v\"),[\"abcdedcba\", true]);\n  assert.deepEqual(candidate(\"vabba\"\
  , \"v\"),[\"abba\", true]);\n  assert.deepEqual(candidate(\"mamma\", \"mia\"),[\"\
  \", true]);\n}\n\ntest();"
completions: ["    const filter = s.split('').filter(x => c.includes(x) === false);\n\
    \    const filterString = filter.join('');\n    const filterStringReverse = filter.reverse().join('');\n\
    \    const result = [];\n    if (filterString === filterStringReverse) {\n   \
    \     result.push(filterString, true);\n    } else {\n        result.push(filterString,\
    \ false);\n    }\n    return result;\n}", "    let res = s.split('').filter(x\
    \ => !c.includes(x)).join('');\n    let pal = res === res.split('').reverse().join('');\n\
    \    return [res, pal];\n}\n", "    var arr = []\n    var bool\n    for(var i\
    \ = 0; i < s.length; i++){\n        for(var j = 0; j < c.length; j++){\n     \
    \       if(s[i] == c[j]){\n                s = s.slice(0, i) + s.slice(i + 1,\
    \ s.length)\n                i--\n            }\n        }\n    }\n    for(var\
    \ i = 0; i < s.length / 2; i++){\n        if(s[i] != s[s.length - 1 - i]){\n \
    \           bool = false\n            break\n        }\n        else{\n      \
    \      bool = true\n        }\n    }\n    arr.push(s)\n    arr.push(bool)\n  \
    \  return arr\n}", "    c.split('').forEach(letter => s = s.replace(letter, ''));\n\
    \    return [s, s.split('').reverse().join('') === s];\n}\n", "    let cArr =\
    \ c.split('');\n    let sArr = s.split('');\n    sArr = sArr.filter(el => {\n\
    \        return !cArr.includes(el);\n    });\n    return [sArr.join(''), isPalindrome(sArr.join(''))];\n\
    }", "    var cleanStr = s.split('').filter(n => !c.includes(n)).join('');\n  \
    \  var reverseStr = cleanStr.split('').reverse().join('');\n    var result = [cleanStr,\
    \ cleanStr === reverseStr];\n    return result;\n}\n", "    var arr = s.split('');\n\
    \    var result = '';\n    for(var i = 0; i < arr.length; i++){\n        if(!c.includes(arr[i])){\n\
    \            result += arr[i];\n        }\n    }\n    return [result, result ===\
    \ result.split('').reverse().join('')];\n}", "    let myArray = [];\n    let s_array\
    \ = s.split('');\n    let c_array = c.split('');\n    let i;\n    let j;\n   \
    \ for(i = 0; i < s_array.length; i++){\n        for(j = 0; j < c_array.length;\
    \ j++){\n            if(s_array[i] == c_array[j]){\n                delete s_array[i];\n\
    \            }\n        }\n    }\n    myArray.push(s_array.join(''));\n    let\
    \ reverse_str = myArray[0].split('').reverse().join('');\n    myArray.push(myArray[0]\
    \ == reverse_str);\n    return myArray;\n}", "    let arr = s.split('');\n   \
    \ let newArr = [];\n    for(let i = 0; i < arr.length; i++){\n        let flag\
    \ = true;\n        for(let j = 0; j < c.length; j++){\n            if(arr[i] ===\
    \ c[j]){\n                flag = false;\n            }\n        }\n        if(flag){\n\
    \            newArr.push(arr[i]);\n        }\n    }\n    let output = newArr.join('');\n\
    \    let result = [];\n    let palindrome = true;\n    for(let i = 0; i < output.length;\
    \ i++){\n        if(output[i] != output[output.length - 1 - i]){\n           \
    \ palindrome = false;\n        }\n    }\n    result.push(output);\n    result.push(palindrome);\n\
    \    return result;\n}\n\nlet s = 'abcde';\nlet c = 'ae';", "  \n}\nreverse_delete(\"\
    abcdedcba\", \"ab\")", "  let arr = [s, true];\n  for (let i=0; i<c.length; i++){\n\
    \    arr[0] = arr[0].replace(new RegExp(c[i], 'g'), '');\n  }\n  let reverse =\
    \ arr[0].split('').reverse().join('');\n  if (arr[0] != reverse){\n    arr[1]\
    \ = false;\n  }\n  return arr;\n}", "    let sArray = s.split('');\n    let cArray\
    \ = c.split('');\n    let result = sArray.filter(value => !cArray.includes(value));\n\
    \    let reversed = result.reverse().join('');\n    return [reversed, reversed\
    \ === result.join('')];\n}\n", "    let resultStr = '';\n    let reverseStr =\
    \ '';\n    let resultArr = [];\n    for (let i = 0; i < s.length; i++) {\n   \
    \     if (c.indexOf(s[i]) === -1) {\n            resultStr += s[i];\n        }\n\
    \    }\n    for (let i = resultStr.length - 1; i >= 0; i--) {\n        reverseStr\
    \ += resultStr[i];\n    }\n    if (resultStr === reverseStr) {\n        resultArr.push(resultStr,\
    \ true);\n    } else {\n        resultArr.push(resultStr, false);\n    }\n   \
    \ return resultArr;\n}", "  let result = '';\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (!c.includes(s[i])) {\n      result += s[i];\n    }\n  }\n  if\
    \ (result === result.split('').reverse().join('')) {\n    return [result, true];\n\
    \  } else {\n    return [result, false];\n  }\n}", "    let arr = [];\n    arr[0]\
    \ = s.split('').filter(el => !c.includes(el)).join('');\n    arr[1] =  check(arr[0]);\n\
    \    return arr;\n}", "    let str = \"\";\n    let bool = false;\n    let arr\
    \ = [];\n    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n\
    \            str += s[i];\n        }\n    }\n    for(let i = 0; i < str.length;\
    \ i++){\n        if(str[i] === str[str.length - 1 - i]){\n            bool = true;\n\
    \        }else{\n            bool = false;\n            break;\n        }\n  \
    \  }\n    arr.push(str, bool);\n    return arr;\n}\n", "  let result = '';\n \
    \ for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      result\
    \ += s[i];\n    }\n  }\n  return [result, isPalindrome(result)];\n}\n", "    return\
    \ [s.split('').filter(function(i){\n        return !(c.indexOf(i)>-1);\n    }).join(''),\
    \ s.split('').filter(function(i){\n        return !(c.indexOf(i)>-1);\n    }).join('')==s.split('').filter(function(i){\n\
    \        return !(c.indexOf(i)>-1);\n    }).reverse().join('')];\n}", "    let\
    \ arr = [];\n    s.split('').forEach(function(item){\n        if(c.includes(item)){\n\
    \            return;\n        }\n        arr.push(item);\n    });\n    let arr2\
    \ = arr.reverse();\n    let str = arr.join('');\n    return [str, arr.join('')\
    \ == arr2.join('')];\n}\n", "    let result = \"\";\n    let test = true;\n  \
    \  for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n  \
    \          result += s[i];\n        }\n    }\n    console.log(result);\n    for\
    \ (let i = 0; i < result.length / 2; i++) {\n        if (result[i] !== result[result.length\
    \ - i - 1]) {\n            test = false;\n        }\n    }\n    return [result,\
    \ test];\n}\n", "  let newString = \"\";\n  for (var i = 0; i < s.length; i++)\
    \ {\n    if(c.indexOf(s[i]) == -1){\n      newString += s[i];\n    }\n  }\n  let\
    \ isPalindrome = false;\n  for (var i = 0; i < newString.length/2; i++) {\n  \
    \  if(newString[i] == newString[newString.length-1-i]){\n      isPalindrome =\
    \ true;\n    }\n    else{\n      isPalindrome = false;\n      break;\n    }\n\
    \  }\n  return [newString, isPalindrome];\n}\n", "    return [s.split('').filter(e=>c.split('').indexOf(e)==-1).join(''),\
    \ s.split('').filter(e=>c.split('').indexOf(e)==-1).join('')==s.split('').filter(e=>c.split('').indexOf(e)==-1).reverse().join('')]\n\
    }", "    let sArr = s.split('')\n    let cArr = c.split('')\n    cArr.forEach(function(e){\n\
    \        sArr = sArr.filter(function(f){\n            return f != e\n        })\n\
    \    })\n    return [sArr.join(''), checkPalindrome(sArr)]\n}\n", "  let str =\
    \ s;\n  let map = {};\n  for(let i = 0; i < c.length; i++){\n    if(!map[c[i]]){\n\
    \      map[c[i]] = true;\n    }\n  }\n  for(let i = 0; i < str.length; i++){\n\
    \    if(map[str[i]]){\n      str = str.slice(0, i) + str.slice(i + 1);\n     \
    \ i--;\n    }\n  }\n  let isPalindrome = true;\n  for(let i = 0; i < str.length\
    \ / 2; i++){\n    if(str[i] !== str[str.length - 1 - i]){\n      isPalindrome\
    \ = false;\n      break;\n    }\n  }\n  return [str, isPalindrome];\n}", "   \
    \ let result = \"\";\n    let isPalindrome = true;\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (c.indexOf(s[i]) == -1) {\n            result += s[i];\n\
    \        }\n    }\n    for (let i = 0; i < result.length / 2; i++) {\n       \
    \ if (result[i] != result[result.length - 1 - i]) {\n            isPalindrome\
    \ = false;\n            break;\n        }\n    }\n    return [result, isPalindrome];\n\
    }", "  let arr = s.split('')\n  c.split('').forEach(e => {\n    while(arr.indexOf(e)\
    \ != -1){\n      arr.splice(arr.indexOf(e), 1)\n    }\n  })\n  let str = arr.join('')\n\
    \  return [str, str == str.split('').reverse().join('')]\n}\n", "    for (let\
    \ i = 0; i < c.length; i++) {\n        s = s.replace(new RegExp(c[i], 'g'), '');\n\
    \    }\n    return [s, s === s.split('').reverse().join('')];\n}\n", "    let\
    \ str = \"\";\n    for(let i = 0; i < s.length; i++){\n        if(c.indexOf(s[i])\
    \ === -1){\n            str += s[i];\n        }\n    }\n    let strToArray = str.split(\"\
    \");\n    let newArray = [];\n    for(let i = strToArray.length - 1; i >= 0; i--){\n\
    \        newArray.push(strToArray[i]);\n    }\n    let newStr = newArray.join(\"\
    \");\n    if(str === newStr){\n        return [str, true];\n    } else {\n   \
    \     return [str, false];\n    }\n}", "    return [s.split('').filter(v => !c.includes(v)).join(''),\
    \ s.split('').filter(v => !c.includes(v)).join('') === s.split('').filter(v =>\
    \ !c.includes(v)).reverse().join('')];\n}", "    let str = s.split('').filter(v\
    \ => !c.includes(v)).join('');\n    return [str, str === str.split('').reverse().join('')];\n\
    }\n", "    let p = s;\n    let q = c;\n    let arr = [];\n    let arr1 = [];\n\
    \    let m = 0;\n    let j = 0;\n    let o = '';\n    for(let i = 0; i < p.length;\
    \ i++){\n        arr.push(p[i]);\n    }\n    for(let i = 0; i < q.length; i++){\n\
    \        arr1.push(q[i]);\n    }\n    for(let i = 0; i < arr.length; i++){\n \
    \       for(let k = 0; k < arr1.length; k++){\n            if(arr[i] === arr1[k]){\n\
    \                m++;\n            }\n        }\n        if(m === 0){\n      \
    \      o += arr[i];\n        }\n        m = 0;\n    }\n    let b = o.split('');\n\
    \    let l = b.length - 1;\n    let h = 0;\n    while(h < b.length/2){\n     \
    \   if(b[h] === b[l]){\n            j++;\n        }\n        h++;\n        l--;\n\
    \    }\n    if(j === b.length/2){\n        return [o, true];\n    }\n    else{\n\
    \        return [o, false];\n    }\n}", "    let regEx = new RegExp(`[${c}]`,\
    \ 'g');\n    let arr = s.split('').filter(x => !x.match(regEx));\n    let str\
    \ = arr.join('');\n    return [str, str === str.split('').reverse().join('')];\n\
    }\n", "    // from string s, delete all the characters in c\n    let cArr = c.split('');\n\
    \    cArr.forEach(element => {\n        s = s.replace(element, '');\n    });\n\
    \    // check if the result string is palindrome\n    let palindrome = true;\n\
    \    let sArr = s.split('');\n    // not going to use splice to avoid permanent\
    \ mutations\n    let sArrFwd = sArr.slice();\n    let sArrRev = sArr.slice().reverse();\n\
    \    sArrFwd.forEach((e, i) => {\n        if (e !== sArrRev[i]) {\n          \
    \  palindrome = false;\n        }\n    });\n    return [s, palindrome];\n}", " \
    \   var s = s.split('').filter(a => !c.includes(a)).join('')\n    var arr = []\n\
    \    arr.push(s)\n    arr.push(s === s.split('').reverse().join(''))\n    return\
    \ arr\n}\n", "    let newArray = []\n    for(let i = 0; i < s.length; i++){\n\
    \        let isNotFound = true\n        for(let j = 0; j < c.length; j++){\n \
    \           if(s[i] === c[j]){\n                isNotFound = false\n         \
    \   }\n        }\n        if(isNotFound){\n            newArray.push(s[i])\n \
    \       }\n    }\n    let isPalindrome = true\n    for(let i = 0; i < newArray.length;\
    \ i++){\n        if(newArray[i] !== newArray[newArray.length - i - 1]){\n    \
    \        isPalindrome = false\n        }\n    }\n    let result = []\n    result.push(newArray.join(''))\n\
    \    result.push(isPalindrome)\n    return result\n}", "    for (var i = 0; i\
    \ < c.length; i++) {\n        for (var j = 0; j < s.length; j++) {\n         \
    \   if (c[i] == s[j]) {\n                s = s.slice(0, j) + s.slice(j + 1);\n\
    \                j--;\n            }\n        }\n    }\n    return [s, s.split('').reverse().join('')\
    \ == s];\n}\n", "    let result = s.split('').filter(letter => !c.includes(letter)).join('');\n\
    \    let palindrome = isPalindrome(result);\n    return [result, palindrome];\n\
    }\n", "    let sArr = s.split('');\n    let cArr = c.split('');\n    let str =\
    \ '';\n    for(let i = 0; i < sArr.length; i++){\n        for(let j = 0; j < cArr.length;\
    \ j++){\n            if(sArr[i] === cArr[j]){\n                sArr.splice(i,\
    \ 1);\n                i--;\n                break;\n            }\n        }\n\
    \    }\n    for(let i = 0; i < sArr.length; i++){\n        str = str + sArr[i];\n\
    \    }\n    let res = [];\n    let flag = true;\n    for(let i = 0; i < str.length;\
    \ i++){\n        if(str[i] !== str[str.length - 1 - i]){\n            flag = false;\n\
    \            break;\n        }\n    }\n    res.push(str);\n    res.push(flag);\n\
    \    return res;\n}", "  let result = [];\n  let resultStr = s.split('').filter(el\
    \ => c.indexOf(el) === -1).join('');\n  result.push(resultStr);\n  result.push(resultStr\
    \ === resultStr.split('').reverse().join(''));\n  return result;\n}\n", "    let\
    \ result = s.split('').filter(x => !c.includes(x)).join('');\n    let palindrome\
    \ = result.split('').reverse().join('') === result;\n    return [result, palindrome];\n\
    }", "    let result = '';\n    for (let i = 0; i < s.length; i++) {\n        if\
    \ (!c.includes(s[i])) {\n            result += s[i];\n        }\n    }\n    return\
    \ [result, result === result.split('').reverse().join('')];\n}", "    let s_list\
    \ = s.split('');\n    let c_list = c.split('');\n    let d_list = [];\n    let\
    \ result = [];\n    let s_result = [];\n    let c_result = [];\n    let palindrome\
    \ = false;\n    s_list.forEach(element => {\n        if (c_list.includes(element))\
    \ {\n            d_list.push(element);\n        }\n    });\n    d_list.forEach(element\
    \ => {\n        s_list.splice(s_list.indexOf(element), 1);\n    });\n    s_list.forEach(element\
    \ => {\n        s_result.push(element);\n    });\n    c_list.forEach(element =>\
    \ {\n        c_result.push(element);\n    });\n    for (let i = 0; i < s_result.length;\
    \ i++) {\n        if (s_result[i] == s_result[s_result.length - 1 - i]) {\n  \
    \          palindrome = true;\n        } else {\n            palindrome = false;\n\
    \            break;\n        }\n    }\n    result.push(s_result);\n    result.push(palindrome);\n\
    \    return result;\n}", "  return [s.split('').filter(v => !c.includes(v)).join(''),\
    \ isPalindrome(s.split('').filter(v => !c.includes(v)).join(''))];\n}\n", "  let\
    \ result = s.split('').filter(char => !c.includes(char)).join('');\n  let check\
    \ = result === result.split('').reverse().join('');\n  return [result, check];\n\
    }", "  let result = [];\n  for (let i = 0; i < s.length; i++) {\n    if (!c.includes(s[i]))\
    \ {\n      result.push(s[i]);\n    }\n  }\n  result = result.join('');\n  let\
    \ rev = result.split('').reverse().join('');\n  let check = result === rev;\n\
    \  return [result, check];\n}\n", "    var res = s;\n    for(var i = 0; i < c.length;\
    \ i++){\n        res = res.replace(new RegExp(c[i], 'g'), '');\n    }\n    var\
    \ res1 = res.split('').reverse().join('');\n    return [res, res == res1];\n}",
  "    let pal = false\n    let result = \"\"\n    for(let i = 0; i < s.length; i++){\n\
    \        if(c.indexOf(s[i]) == -1){\n            result += s[i]\n        }\n \
    \   }\n    if(result == result.split(\"\").reverse().join(\"\")){\n        pal\
    \ = true\n    }\n    return [result, pal]\n}", "    let result = [];\n    let\
    \ myArr = c.split('');\n    let myResult = s.split('');\n    let check = false;\n\
    \    for(let i = 0; i < myArr.length; i++){\n        for(let j = 0; j < myResult.length;\
    \ j++){\n            if(myArr[i] === myResult[j]){\n                myResult.splice(j,\
    \ 1);\n                j--;\n            }\n        }\n    }\n    for(let i =\
    \ 0; i < myResult.length / 2; i++){\n        if(myResult[i] === myResult[myResult.length\
    \ - i - 1]){\n            check = true;\n        }else{\n            check = false;\n\
    \            break;\n        }\n    }\n    result.push(myResult.join(''));\n \
    \   result.push(check);\n    return result;\n}\n", "    let arr = s.split('');\n\
    \    let newArr = [];\n    let answer = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(!c.includes(arr[i])){\n            newArr.push(arr[i]);\n\
    \        }\n    }\n    newArr = newArr.join('');\n    if(newArr === newArr.split('').reverse().join('')){\n\
    \        answer.push(newArr, true);\n    }else{\n        answer.push(newArr, false);\n\
    \    }\n    return answer;\n}\n", "    c.split('').forEach(element => {\n    \
    \    s = s.replace(element, '');\n    });\n    return [s, s.split('').reverse().join('')\
    \ === s];\n}", "\tfor(let i = 0; i < c.length; i++){\n\t\ts = s.replace(new RegExp(c[i],\
    \ 'g'), '');\n\t}\n\treturn [s, (s.split('').reverse().join('') === s)];\n}",
  "   var newStr = \"\";\n   for(var i = 0; i < s.length; i++){\n     if(c.indexOf(s[i])\
    \ == -1){\n       newStr += s[i];\n     }\n   }\n   return [newStr, newStr ==\
    \ newStr.split(\"\").reverse().join(\"\")];\n}\nreverse_delete(\"abcdedcba\",\
    \ \"ab\");", "    let deleteStr = s.split('').filter(val => !c.includes(val)).join('');\n\
    \    let isPalindrome = deleteStr.split('').reverse().join('') === deleteStr;\n\
    \    return [deleteStr, isPalindrome];\n}\n", "    c = c.split('');\n    s = s.split('');\n\
    \    for(var i = 0; i < c.length; i++){\n        s = s.filter(function(e){\n \
    \           return e !== c[i];\n        });\n    }\n    return [s.join(''), s.reverse().join('')\
    \ === s.join('')];\n}", "    let str = '';\n    for(let i = 0; i < s.length; i++){\n\
    \        let flag = true;\n        for(let j = 0; j < c.length; j++){\n      \
    \      if(s[i] === c[j]){\n                flag = false;\n                break;\n\
    \            }\n        }\n        if(flag){\n            str += s[i];\n     \
    \   }\n    }\n    return [str, str === str.split('').reverse().join('')];\n}\n",
  "    return [\n        Array.from(s).filter(char => !Array.from(c).includes(char)).join(''),\n\
    \        Array.from(s).filter(char => !Array.from(c).includes(char)).join('')\
    \ === Array.from(s).filter(char => !Array.from(c).includes(char)).reverse().join('')\n\
    \    ]\n}", "   var answer = [];\n   var newS = '';\n   for(var i = 0; i < s.length;\
    \ i++){\n      var letter = s[i];\n      var isDif = true;\n      for(var j =\
    \ 0; j < c.length; j++){\n         if(letter === c[j]){\n            isDif = false;\n\
    \         }\n      }\n      if(isDif){\n         newS += letter;\n      }\n  \
    \ }\n   console.log(newS);\n   if(newS === newS.split('').reverse().join('')){\n\
    \      answer.push(newS, true);\n   } else {\n      answer.push(newS, false);\n\
    \   }\n   return answer;\n}", "    let result = true\n    s = s.split('').filter(e\
    \ => !c.includes(e)).join('')\n    for(let i = 0; i < s.length / 2; i++){\n  \
    \      if(s[i] !== s[s.length - 1 - i]){\n            result = false\n       \
    \     break\n        }\n    }\n    return [s, result]\n}", "    let cArr = c.split('');\n\
    \    cArr.forEach(function(item) {\n        s = s.replace(item, '');\n    });\n\
    \    return s.split('').reverse().join('') === s ? [s, true] : [s, false];\n}",
  "    //..\n    let len = s.length\n    let len2 = c.length\n    let result = ''\n\
    \    let palindrome = ''\n    for(let i = 0; i < len; i++){\n        for(let j\
    \ = 0; j < len2; j++){\n            if(s[i] !== c[j]){\n                result\
    \ += s[i]\n            }\n        }\n    }\n    let len3 = result.length\n   \
    \ for(let i = len3 - 1; i >= 0; i--){\n        palindrome += result[i]\n    }\n\
    \    if(result === palindrome){\n        return [result, true]\n    }\n    return\
    \ [result, false]\n}\n", "    let res = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (!c.includes(s[i])){\n            res += s[i];\n        }\n\
    \    }\n    return [res, res === res.split(\"\").reverse().join(\"\")];\n}", " \
    \   let result = \"\";\n    let cArr = c.split(\"\");\n    for(let el of s){\n\
    \        if(!cArr.includes(el)){\n            result += el;\n        }\n    }\n\
    \    let reverseResult = result.split(\"\").reverse().join(\"\");\n    let arr\
    \ = [result, result === reverseResult]\n    return arr;\n}", "    let arrStr =\
    \ s.split('');\n    let arrChar = c.split('');\n    let newString = \"\";\n  \
    \  let result = [];\n    for(let i = 0; i < arrStr.length; i++){\n        for(let\
    \ j = 0; j < arrChar.length; j++){\n            if(arrStr[i] !== arrChar[j]){\n\
    \                newString += arrStr[i];\n            }\n        }\n    }\n  \
    \  for(let i = 0; i < newString.length; i++){\n        if(newString[i] !== newString[newString.length\
    \ - i - 1]){\n            result.push(newString, false);\n            return result;\n\
    \        }\n    }\n    result.push(newString, true);\n    return result;\n}\n",
  "    let splited = s.split('');\n    let newString = [];\n    for(let i = 0; i <\
    \ splited.length; i++){\n        if(c.includes(splited[i])){\n            continue;\n\
    \        }else{\n            newString.push(splited[i]);\n        }\n    }\n \
    \   let reverseArr = newString.slice().reverse();\n    let result = newString.join('')\
    \ == reverseArr.join('');\n    return [newString.join(''), result];\n}\n", " \
    \   for (let i = 0; i < c.length; i++) {\n        s = s.replace(new RegExp(c[i],\
    \ 'g'), '');\n    }\n    let result = [];\n    result.push(s);\n    result.push(s\
    \ === s.split('').reverse().join(''));\n    return result;\n}", "    let result\
    \ = s.split('').filter(i => !c.includes(i)).join('');\n    return [result, result\
    \ === result.split('').reverse().join('')];\n}", "    let result = '';\n    for\
    \ (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n  \
    \          result += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }", "    for (let i=0; i<c.length; i++){\n        s = s.replace(new RegExp(c[i],\
    \ 'g'), '');\n    }\n    return [s, s === s.split('').reverse().join('')];\n}",
  "    let arr = s.split('').filter(a => c.includes(a));\n    let check = (arr.join('')\
    \ == arr.reverse().join('')) ? true : false;\n    return [arr.join(''), check];\n\
    }", "    for (let i = 0; i < c.length; i++) {\n        s = s.replace(new RegExp(c[i],\
    \ 'g'), '');\n    }\n    return [s, s.split('').reverse().join('') === s];\n}",
  "    let check = \"\"\n    let is_palindrome = true\n    for(let i = 0; i < s.length;\
    \ i++){\n        let include = true\n        for(let j = 0; j < c.length; j++){\n\
    \            if(s[i] === c[j]){\n                include = false\n           \
    \ }\n        }\n        if(include){\n            check += s[i]\n        }\n \
    \   }\n    for(let i = 0; i < check.length; i++){\n        if(check[i] !== check[check.length\
    \ - 1 - i]){\n            is_palindrome = false\n        }\n    }\n    return\
    \ [check, is_palindrome]\n}", "    let newStr = s.split('');\n    let newStrC\
    \ = c.split('');\n    let arr = [];\n    for(let i = 0; i < newStr.length; i++){\n\
    \        for(let j = 0; j < newStrC.length; j++){\n            if(newStr[i] ===\
    \ newStrC[j]){\n                arr.push(i);\n            }\n        }\n    }\n\
    \    for(let k = arr.length - 1; k >= 0; k--){\n        newStr.splice(arr[k],\
    \ 1);\n    }\n    newStr = newStr.join('');\n    let revStr = newStr.split('').reverse().join('');\n\
    \    return [newStr, revStr === newStr];\n}\n", "    for (var i = 0; i < c.length;\
    \ i++) {\n        s = s.replace(new RegExp(c[i], 'g'), '');\n    }\n    return\
    \ [s, (s === s.split('').reverse().join(''))];\n}", "    let cArr = c.split('');\n\
    \    let sArr = s.split('');\n    cArr.forEach(function(item){\n        sArr =\
    \ sArr.filter(function(value){\n            return value !== item;\n        });\n\
    \    });\n    let isPalindrome = true;\n    for(let i = 0; i < sArr.length; i++){\n\
    \        if(sArr[i] !== sArr[sArr.length - i - 1]){\n            isPalindrome\
    \ = false;\n            break;\n        }\n    }\n    return [sArr.join(''), isPalindrome];\n\
    }\n", "    var arr = [];\n    var str = \"\";\n    for(var i = 0; i < s.length;\
    \ i++){\n        if(!c.includes(s[i])){\n            str += s[i];\n        }\n\
    \    }\n    arr.push(str);\n    arr.push(str == str.split(\"\").reverse().join(\"\
    \"));\n    return arr;\n}\n", "    return [\n        s.split('').filter(el =>\
    \ !c.includes(el)).join(''),\n        s.split('').filter(el => !c.includes(el)).join('')\
    \ == s.split('').filter(el => !c.includes(el)).reverse().join('')\n    ]\n}",
  "    for (i = 0; i < c.length; i++) {\n        let count = c.charAt(i);\n      \
    \  let reg = new RegExp(count, \"g\");\n        s = s.replace(reg, \"\");\n  \
    \  }\n    let mid = Math.floor(s.length / 2);\n    let check = true;\n    for\
    \ (let i = 0; i < mid; i++) {\n        if (s.charAt(i) !== s.charAt(s.length -\
    \ 1 - i)) {\n            check = false;\n            break;\n        }\n    }\n\
    \    return [s, check];\n}", "  var a = s.split('').filter(function(x){\n    return\
    \ !c.includes(x);\n  });\n  return [a.join(''), a.join('') === a.reverse().join('')];\n\
    }", "    let sArray = s.split('');\n    let cArray = c.split('');\n    let result\
    \ = [];\n    sArray.forEach(item => {\n        if(cArray.indexOf(item) === -1){\n\
    \            result.push(item);\n        }\n    });\n    let isPalindrome = result.reverse().join('')\
    \ === result.join('');\n    return [result.join(''), isPalindrome];\n}", "   \
    \ let res = s;\n    let check = true;\n    let s_arr = s.split('');\n    let c_arr\
    \ = c.split('');\n    for(let i = 0; i < s_arr.length; i++){\n        for(let\
    \ j = 0; j < c_arr.length; j++){\n            if(s_arr[i] === c_arr[j]){\n   \
    \             s_arr.splice(i, 1);\n                i--;\n            }\n     \
    \   }\n    }\n    for(let k = 0; k < s_arr.length / 2; k++){\n        if(s_arr[k]\
    \ !== s_arr[s_arr.length - 1 - k]){\n            check = false;\n        }\n \
    \   }\n    return [s_arr.join(''), check];\n}", "    s = s.split('');\n    c =\
    \ c.split('');\n    let result = [];\n    for(let i = 0; i < s.length; i++){\n\
    \        for(let j = 0; j < c.length; j++){\n            if(s[i] === c[j]){\n\
    \                s.splice(i, 1);\n                i--;\n            }\n      \
    \  }\n    }\n    let reverse = s.reverse().join('');\n    let final = s.join('');\n\
    \    if(reverse === final){\n        result.push(s.join(''), true);\n    }else{\n\
    \        result.push(s.join(''), false);\n    }\n    return result;\n}", "   \
    \ for (var i = 0; i < c.length; i++) {\n        var reg = new RegExp(c[i], \"\
    g\");\n        s = s.replace(reg, \"\");\n    }\n    var reg1 = new RegExp(s.split(\"\
    \").reverse().join(\"\"), \"g\");\n    return [s, reg1.test(s)];\n}\n", "    let\
    \ arr = []\n    arr.push(s.split('').filter(letr => !c.includes(letr)).join(''))\n\
    \    return arr\n}", "    let string = s.split('').filter(el => c.split('').indexOf(el)\
    \ === -1).join('');\n    let reversed = string.split('').reverse().join('');\n\
    \    return [string, string === reversed];\n}\n", "    let newS = s.split('').filter(element\
    \ => !c.includes(element)).join('');\n    let reverse = newS.split('').reverse().join('');\n\
    \    return [newS, newS == reverse];\n}\n", "    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split(\"\"\
    ).reverse().join(\"\")];\n}\n", "    let result = [s,true];\n    for(let i=0;i<c.length;i++){\n\
    \        result[0] = result[0].replace(new RegExp(c[i],\"g\"),\"\");\n    }\n\
    \    result[1] = result[0] === result[0].split(\"\").reverse().join(\"\");\n \
    \   return result;\n}", "  var arr = s.split('');\n  for(var i = 0; i < c.length;\
    \ i++){\n    for(var j = 0; j < arr.length; j++){\n      if(c[i] === arr[j]){\n\
    \        arr.splice(j, 1);\n        j--;\n      }\n    }\n  }\n  var result =\
    \ arr.join('');\n  return [result, isPalindrome(result)];\n}", "    let res =\
    \ \"\"\n    for (let i = 0; i < s.length; i++) {\n        if (!c.includes(s[i]))\
    \ {\n            res += s[i]\n        }\n    }\n    return [res, res == res.split(\"\
    \").reverse().join(\"\")]\n}\n", "  let res = '';\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (!c.includes(s[i])) res += s[i];\n  }\n  let r = res.split('').reverse().join('');\n\
    \  return res == r ? [res, true] : [res, false];\n}\n", "    let delete_arr =\
    \ s.split('').filter(e => !c.includes(e));\n    let result = delete_arr.join('');\n\
    \    let isPalindrome = result === result.split('').reverse().join('');\n    return\
    \ [result, isPalindrome];\n}", "    let result = '';\n    for (let i = 0; i <\
    \ s.length; i++) {\n        if (c.indexOf(s[i]) === -1) {\n            result\
    \ += s[i];\n        }\n    }\n    return [result, result === result.split('').reverse().join('')];\n\
    }", "  let result_string = [];\n  let s_result = s.split('');\n  let c_result\
    \ = c.split('');\n  for(let i = 0; i < s_result.length; i++){\n    if(c_result.indexOf(s_result[i])\
    \ < 0){\n      result_string.push(s_result[i]);\n    }\n  }\n  let check = result_string.join('')\
    \ === result_string.reverse().join('');\n  return [result_string.join(''), check];\n\
    }", "  \n    for (i=0; i<c.length; i++){\n      var char = c[i];\n      for (j=0;\
    \ j<s.length; j++){\n        if (s[j]==char){\n          s = s.slice(0,j) + s.slice(j+1,s.length);\n\
    \          j--;\n        }\n      }\n    }\n    var palindrome = true;\n    for\
    \ (i=0; i<Math.floor(s.length/2); i++){\n      if (s[i]!=s[s.length-1-i]) palindrome\
    \ = false;\n    }\n    var result = [];\n    result.push(s);\n    result.push(palindrome);\n\
    \    return result;\n  \n  }", "  var temp = s.split('');\n  c.split('').forEach(function(e){\n\
    \    temp = temp.filter(function(c){\n      return c !== e;\n    });\n  });\n\
    \  return [temp.join(''),temp.join('') === temp.reverse().join('')];\n}\n", " \
    \   let reversed = s.split('').filter(char => !c.includes(char)).reverse().join('');\n\
    \    let answer = [];\n    if (reversed === s) {\n        answer.push(reversed,\
    \ true);\n    } else {\n        answer.push(reversed, false);\n    }\n    return\
    \ answer;\n}", "    var palindrome = []\n    for(var i = 0; i < s.length; i++){\n\
    \        for(var j = 0; j < c.length; j++){\n            if(s[i] == c[j]){\n \
    \               s = s.replace(s[i], \"\")\n            }\n        }\n    }\n \
    \   if(s.split(\"\").reverse().join(\"\") == s){\n        palindrome.push(s, true)\n\
    \    }else{\n        palindrome.push(s, false)\n    }\n    return palindrome\n\
    }", "  let str = s.split('');\n  let ch = c.split('');\n  let result = [];\n \
    \ for(let i = 0; i < str.length; i++){\n    for(let j = 0; j < ch.length; j++){\n\
    \      if(str[i] === ch[j]){\n        result.push(str[i]);\n      }\n    }\n \
    \ }\n  let arr = result.join('');\n  if(arr === str.reverse().join('')){\n   \
    \ return [str.join(''), true];\n  }\n  return [str.join(''), false];\n}", "  let\
    \ regex = new RegExp('[' + c + ']', 'gi');\n  let result = s.replace(regex, '');\n\
    \  return [result, result === result.split('').reverse().join('')];\n}", "   \
    \ for (let i = 0; i < c.length; i++) {\n        for (let j = 0; j < s.length;\
    \ j++) {\n            if (c[i] === s[j]){\n                s = s.slice(0, j) +\
    \ s.slice(j + 1);\n                j -= 1;\n            }\n        }\n    }\n\
    \    if (s.split('').reverse().join('') === s){\n        return [s, true];\n \
    \   }\n    return [s, false];\n}", "    var test = s.split('');\n    var deleted\
    \ = [];\n    var splice = function(i){\n        var ind = test.indexOf(i);\n \
    \       while(ind >= 0){\n            test.splice(ind, 1);\n            ind =\
    \ test.indexOf(i);\n        }\n    }\n    for(var i = 0; i < c.length; i++){\n\
    \        splice(c[i]);\n    }\n    var reverse = [];\n    for(var i = test.length\
    \ - 1; i >= 0; i--){\n        reverse.push(test[i]);\n    }\n    var rev = reverse.join('');\n\
    \    var cor = test.join('');\n    return [cor, cor === rev];\n}\n", "    const\
    \ result = s.split('').filter(l => !c.includes(l)).join('');\n    const isPalindrome\
    \ = result === result.split('').reverse().join('');\n    return [result, isPalindrome];\n\
    }", "    if(c){\n        let sub = new RegExp(`[${c}]`, 'g');\n        let res\
    \ = s.replace(sub, '');\n        let reverseRes = res.split('').reverse().join('');\n\
    \        if(res === reverseRes){\n            return [res, true];\n        }\n\
    \        return [res, false];\n    }\n    return [s, false];\n}\n", "    for (let\
    \ i = 0; i < c.length; i++) {\n        for (let j = 0; j < s.length; j++) {\n\
    \            if (c[i] === s[j]) {\n                s = s.replace(s[j], '');\n\
    \            }\n        }\n    }\n    let palindrome = true;\n    for (let i =\
    \ 0; i < s.length; i++) {\n        if (s[i] !== s[s.length - i - 1]) {\n     \
    \       palindrome = false;\n        }\n    }\n    return [s, palindrome];\n}",
  "  let str = s.split('')\n  let result = []\n  for(let i = 0; i < str.length; i++){\n\
    \    for(let j = 0; j < c.length; j++){\n      if(str[i] === c[j]){\n        delete\
    \ str[i]\n      }\n    }\n  }\n  for(let i = 0; i < str.length; i++){\n    if(str[i]\
    \ !== undefined){\n      result.push(str[i])\n    }\n  }\n  let flag = true\n\
    \  for(let i = 0; i < Math.floor(result.length / 2); i++){\n    if(result[i] !==\
    \ result[result.length - 1 - i]){\n      flag = false\n    }\n  }\n  return [result.join(''),\
    \ flag]\n}\n", "    let i=0;\n    while(i<s.length){\n        if(c.includes(s[i])){\n\
    \            s=s.substring(0,i)+s.substring(i+1);\n            i=0;\n        }else{\n\
    \            i+=1;\n        }\n    }\n    let palindrome=true;\n    for(let i=0;i<s.length/2;i++){\n\
    \        if(s[i]!=s[s.length-1-i]){\n            palindrome=false;\n         \
    \   break;\n        }\n    }\n    return [s,palindrome];\n}", "    var new_s =\
    \ s.split('');\n    var new_c = c.split('');\n    var result = [];\n    for(var\
    \ i = 0; i < new_s.length; i++){\n        for(var j = 0; j < new_c.length; j++){\n\
    \            if(new_s[i] == new_c[j]){\n                new_s.splice(i, 1);\n\
    \                i--;\n            }\n        }\n    }\n    new_s = new_s.join('');\n\
    \    if(new_s == new_s.split('').reverse().join('')){\n        result.push(new_s,\
    \ true);\n    }else{\n        result.push(new_s, false);\n    }\n    return result;\n\
    }\n", "    let arr = [];\n    let string = \"\";\n    for(let i = 0; i < s.length;\
    \ i++){\n        if(c.indexOf(s[i]) < 0){\n            string += s[i];\n     \
    \   }\n    }\n    let string2 = \"\";\n    for(let i = string.length - 1; i >=\
    \ 0; i--){\n        string2 += string[i];\n    }\n    if(string === string2){\n\
    \        arr.push(string, true);\n    }else{\n        arr.push(string, false);\n\
    \    }\n    return arr;\n}", "  const splitS = s.split('');\n  const splitC =\
    \ c.split('');\n  const result = splitS.filter( item => {\n    return !splitC.includes(item);\n\
    \  });\n  return [result.join(''), isPalindrome(result.join(''))];\n}\n", "  let\
    \ remove = s.split('').filter(item => !c.includes(item)).join('');\n  let check\
    \ = remove.split('').reverse().join('') === remove;\n  return [remove, check];\n\
    }", "  var inp_str = s;\n  var inp_c  = c;\n  var res_str = \"\";\n  var res_bool\
    \ = false;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n  var l = 0;\n  var m =\
    \ 0;\n  var len_str = inp_str.length;\n  var len_c = inp_c.length;\n  var present\
    \ = false;\n  for(i = 0; i < len_str; i++){\n    present = false;\n    for(j =\
    \ 0; j < len_c; j++){\n      if(inp_str[i] == inp_c[j]){\n        present = true;\n\
    \        break;\n      }\n    }\n    if(present == false){\n      res_str += inp_str[i];\n\
    \    }\n  }\n  var len_res_str = res_str.length;\n  var rev_str = \"\";\n  for(k\
    \ = 0; k < len_res_str; k++){\n    rev_str += res_str[len_res_str - 1 - k];\n\
    \  }\n  if(rev_str == res_str){\n    res_bool = true;\n  }\n  else{\n    res_bool\
    \ = false;\n  }\n  return [res_str, res_bool];\n}", "    let str = s.split('');\n\
    \    for(let i = 0; i < str.length; i++){\n        if(c.includes(str[i])){\n \
    \           str.splice(i, 1);\n            i--;\n        }\n    }\n    return\
    \ [str.join(''), str.join('') === str.reverse().join('')];\n}", "  for (let i\
    \ = 0; i < c.length; i++) {\n    s = s.replace(new RegExp(c[i], 'g'), '');\n \
    \ }\n  if (s === s.split('').reverse().join('')) {\n    return [s, true];\n  }\
    \ else {\n    return [s, false];\n  }\n}\n", "    let result = \"\";\n    let\
    \ cArray = c.split(\"\");\n    for(let i = 0; i < s.length; i++){\n        if(!cArray.includes(s[i])){\n\
    \            result += s[i];\n        }\n    }\n    let reversed = \"\";\n   \
    \ for(let i = result.length - 1; i >= 0; i--){\n        reversed += result[i];\n\
    \    }\n    if(reversed === result){\n        return [result, true];\n    }\n\
    \    return [result, false];\n}", "    let result = \"\";\n    let array = s.split(\"\
    \");\n    for(let i = 0; i < array.length; i++){\n        if(c.indexOf(array[i])\
    \ === -1){\n            result += array[i];\n        }\n    }\n    return [result,\
    \ isPalindrome(result)];\n}\n", "    let result = [];\n    let check_result =\
    \ [];\n    for (let i = 0; i < s.length; i++) {\n        for (let j = 0; j < c.length;\
    \ j++) {\n            if (s[i] !== c[j]) {\n                result.push(s[i]);\n\
    \            }\n        }\n    }\n    result = result.join('');\n    if (result\
    \ === result.split('').reverse().join('')) {\n        check_result.push(result,\
    \ true);\n    } else {\n        check_result.push(result, false);\n    }\n   \
    \ return check_result;\n}\n", "    let res = s.split('').filter(v => !c.includes(v));\n\
    \    console.log(res);\n    return [res.join(''),is_palindrome(res.join(''))];\n\
    }", "    let resultArr = [];\n    resultArr.push(s.split('').filter(el => !c.includes(el)).join(''));\n\
    \    if (resultArr[0] === resultArr[0].split('').reverse().join('')){\n      \
    \  resultArr.push(true);\n    } else {\n        resultArr.push(false);\n    }\n\
    \    return resultArr;\n}", "    // c = c.split('');\n    // console.log(c);\n\
    \    // let str = s.split('');\n    // console.log(str);\n    // for(let i = 0;\
    \ i < str.length; i++){\n    //     if(c.includes(str[i])){\n    //         str.splice(i,\
    \ 1);\n    //         i--;\n    //     }\n    // }\n    // console.log(str);\n\
    \    // let s_str = str.join('');\n    // console.log(s_str);\n    // let rev_str\
    \ = str.reverse().join('');\n    // console.log(rev_str);\n    // if(s_str ===\
    \ rev_str){\n    //     return [s_str, true];\n    // }\n    // else{\n    //\
    \     return [s_str, false];\n    // }\n}", "    var string = s;\n    var check\
    \ = c;\n    var reverse = \"\";\n    var array = [];\n    var result = [];\n \
    \   for(var i = 0; i < string.length; i++){\n        if(check.indexOf(string[i])\
    \ !== -1){\n            string = string.slice(0, i) + string.slice(i + 1);\n \
    \           i--;\n        }\n    }\n    for(var i = string.length - 1; i >= 0;\
    \ i--){\n        reverse += string[i];\n    }\n    if(reverse === string){\n \
    \       array.push(string);\n        array.push(true);\n    }\n    else{\n   \
    \     array.push(string);\n        array.push(false);\n    }\n    return array;\n\
    }\nvar string = prompt(\"Enter the string\");\nvar stringCheck = prompt(\"Enter\
    \ the string to check\");\nvar result = reverse_delete(string, stringCheck);",
  "    return [s.split('').filter(x => !c.includes(x)).join(''), isPalindrome(s.split('').filter(x\
    \ => !c.includes(x)).join(''))];\n  }\n  \n  function isPalindrome(string) {\n\
    \    let inverseString = string.split('').reverse().join('');\n    return string\
    \ === inverseString;\n  }\n  \n  console.log(reverse_delete(\"abcde\", \"ae\"\
    ));", "    let resultString = s.split('').filter(char => !c.includes(char)).join('');\n\
    \    return [resultString, resultString === resultString.split('').reverse().join('')];\n\
    }\n", "    // your code here\n    let result = s;\n    for (i in c){\n      let\
    \ rg = new RegExp(c[i], \"g\");\n      result = result.replace(rg, \"\");\n  \
    \  }\n    let reverse = result.split(\"\").reverse().join(\"\");\n    return [result,\
    \ result === reverse];\n  }", "    let x = s.split('');\n    for(i = 0; i < x.length;\
    \ i++){\n        for(j = 0; j < c.length; j++){\n            if(x[i] == c[j]){\n\
    \                x.splice(i, 1);\n                i--;\n            }\n      \
    \  }\n    }\n    let y = x.join('');\n    let z = x.reverse().join('');\n    if(y\
    \ == z){\n        return [y, true];\n    }\n    else{\n        return [y, false];\n\
    \    }\n}", "    let toReturn = s;\n    let toCheck = \"\";\n    for(let i = 0;\
    \ i < c.length; i++){\n        toReturn = toReturn.replace(c[i], \"\");\n    }\n\
    \    for(let i = toReturn.length - 1; i >= 0; i--){\n        toCheck += toReturn[i];\n\
    \    }\n    if(toReturn === toCheck){\n        return [toReturn, true];\n    }\n\
    \    return [toReturn, false];\n}\n", "    let arr = [...s]\n    for(let i=0;\
    \ i<arr.length; i++){\n        if(c.includes(arr[i])){\n            arr.splice(i,\
    \ 1)\n            i--\n        }\n    }\n    let str = arr.join('')\n    let reverse\
    \ = arr.reverse().join('')\n    return [str, str === reverse]\n}\n", "    let\
    \ filtered_string = s.split('').filter(letter => !c.includes(letter)).join('');\n\
    \    let reversed_string = filtered_string.split('').reverse().join('');\n   \
    \ return [filtered_string, filtered_string === reversed_string];\n}", "    let\
    \ regex = new RegExp(`[${c}]`, 'g');\n    s = s.replace(regex, '');\n    return\
    \ [s, s.length / 2 == Math.floor(s.length / 2)];\n}\n", "    var result = \"\"\
    ;\n    for (var i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) === -1)\
    \ {\n            result += s[i];\n        }\n    }\n    return [result, result\
    \ === result.split(\"\").reverse().join(\"\")];\n}\n", "    //returns [s, true]\
    \ where s is the string after deleting all the chars in c\n    //from s and true\
    \ if s is a palindrome\n    //your code here\n    for (let i = 0; i < c.length;\
    \ i++) {\n        s = s.replace(new RegExp(c[i], 'g'), \"\");\n    }\n    return\
    \ [s, s === s.split(\"\").reverse().join(\"\")];\n}\n", "    let result = '';\n\
    \    for (let i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i]) < 0) {\n\
    \            result += s[i];\n        }\n    }\n    let pal = true;\n    for (let\
    \ i = 0; i < result.length / 2; i++) {\n        if (result[i] !== result[result.length\
    \ - 1 - i]) {\n            pal = false;\n            break;\n        }\n    }\n\
    \    return [result, pal];\n}", "  let set = new Set(c);\n  let newS = '';\n \
    \ for(let i = 0; i < s.length; i++){\n    if(!set.has(s[i])){\n      newS += s[i];\n\
    \    }\n  }\n  return [newS, newS.split('').reverse().join('') === newS];\n}",
  "    let result = [];\n    result.push(s.split('').filter(x => c.indexOf(x) ===\
    \ -1).join(''));\n    let toCheck = result[0].split('').reverse().join('');\n\
    \    result.push(result[0] === toCheck);\n    return result;\n}", "    var regex\
    \ = new RegExp(\"[\" + c + \"]\", \"g\");\n    var newStr = s.replace(regex, \"\
    \");\n    var sArr = newStr.split(\"\");\n    var isPal = true;\n    for(var i\
    \ = 0; i < sArr.length; i++){\n        if(sArr[i] !== sArr[sArr.length - i - 1]){\n\
    \            isPal = false;\n        }\n    }\n    return [newStr, isPal];\n}\n",
  "    let newStr = s.split('');\n    let arr = c.split('');\n    let newArr = [];\n\
    \    for(let i = 0; i < arr.length; i++){\n        for(let j = 0; j < newStr.length;\
    \ j++){\n            if(arr[i] === newStr[j]){\n                newStr.splice(j,\
    \ 1);\n                j--;\n            }\n        }\n    }\n    let reverseStr\
    \ = newStr.reverse().join('');\n    let palindrome = false;\n    if(reverseStr\
    \ === newStr.join('')){\n        palindrome = true;\n    }\n    newArr.push(newStr.join(''),\
    \ palindrome);\n    return newArr;\n}\n", "    var r = s.split('');\n    var t\
    \ = c.split('');\n    var result = [];\n    r.forEach(function(e,i){\n       \
    \ t.forEach(function(d,f){\n            if(e == d){\n                r.splice(i,1);\n\
    \            }\n        });\n    });\n    result.push(r.join(''));\n    var p\
    \ = r.join('');\n    var b = p.split('').reverse().join('');\n    if(p === b){\n\
    \        result.push(true);\n    }else{\n        result.push(false);\n    }\n\
    \    return result;\n}\nreverse_delete(\"abcdedcba\", \"ab\");", "    let sArray\
    \ = s.split('');\n    let cArray = c.split('');\n    for (let i = 0; i < sArray.length;\
    \ i++) {\n        for (let j = 0; j < cArray.length; j++) {\n            if (sArray[i]\
    \ === cArray[j]) {\n                sArray.splice(i, 1);\n                i--;\n\
    \            }\n        }\n    }\n    let sStr = sArray.join('');\n    let sStrRev\
    \ = sArray.reverse().join('');\n    let result = [sStr, sStr === sStrRev];\n \
    \   return result;\n}", "\tlet s_new = '';\n\tfor (let i=0; i<s.length; i++){\n\
    \t\tif (!c.includes(s[i])){\n\t\t\ts_new += s[i];\n\t\t}\n\t}\n\tlet rev_s_new\
    \ = '';\n\tfor (let i=s_new.length-1; i>=0; i--){\n\t\trev_s_new += s_new[i];\n\
    \t}\n\tlet check = false;\n\tif (s_new === rev_s_new){\n\t\tcheck = true;\n\t\
    }\n\treturn [s_new, check];\n}\n", "    let regex = new RegExp(`[${c}]`, 'gi');\n\
    \    let newStr = s.replace(regex, '');\n    return [newStr, newStr.split('').reverse().join('')\
    \ == newStr];\n}\n", "    let regex = new RegExp(`[${c}]`, 'g');\n    let newStr\
    \ = s.replace(regex, '');\n    let result = [newStr, isPalindrome(newStr)];\n\
    \    return result;\n  }\n  \n  function isPalindrome(str){\n    let i = 0;\n\
    \    let j = str.length - 1;\n    while(i < j){\n      if(str[i] !== str[j]) return\
    \ false;\n      i++;\n      j--;\n    }\n    return true;\n  }\n  console.log(reverse_delete(\"\
    abcde\", \"ae\"));\n  console.log(reverse_delete(\"abcdef\", \"b\"));\n  console.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));\n  \n  // function reverse_delete(s, c){\n  //   let newStr\
    \ = s.split('').filter(x => !c.includes(x)).join('');\n  //   let result = [newStr,\
    \ isPalindrome(newStr)];\n  //   return result;\n  // }\n  \n  // function isPalindrome(str){\n\
    \  //   let i = 0;\n  //   let j = str.length - 1;\n  //   while(i < j){\n  //\
    \     if(str[i] !== str[j]) return false;\n  //     i++;\n  //     j--;\n  //\
    \   }\n  //   return true;\n  // }\n  // console.log(reverse_delete(\"abcde\"\
    , \"ae\"));\n  // console.log(reverse_delete(\"abcdef\", \"b\"));\n  // console.log(reverse_delete(\"\
    abcdedcba\", \"ab\"));", "    let arr1 = [...s], arr2 = [...c];\n    for(let i=0;\
    \ i<arr1.length; i++){\n        if(arr2.includes(arr1[i])) arr1.splice(i, 1);\n\
    \    }\n    return [arr1.join(''), arr1.join('') == arr1.reverse().join('')];\n\
    }", "    let result = '';\n    let cArr = c.split('');\n    let sArr = s.split('');\n\
    \    let isPalindrome = false;\n    // cArr.forEach(x => {\n    //     console.log(sArr.splice(sArr.indexOf(x),\
    \ 1));\n    // });\n    for (let i = 0; i < cArr.length; i++) {\n        for (let\
    \ y = 0; y < sArr.length; y++) {\n            if (cArr[i] === sArr[y]) {\n   \
    \             sArr.splice(y, 1);\n            }\n        }\n    }\n    // console.log(sArr);\n\
    \    for (let i = 0; i < sArr.length / 2; i++) {\n        if (sArr[i] !== sArr[sArr.length\
    \ - 1 - i]) {\n            isPalindrome = false;\n            break;\n       \
    \ } else {\n            isPalindrome = true;\n        }\n    }\n    console.log(sArr);\n\
    \    return [sArr.join(''), isPalindrome];\n}", "    let result = s.split('').filter(char\
    \ => !c.includes(char)).join('');\n    let check = result === result.split('').reverse().join('');\n\
    \    return [result, check];\n  }\n", "  let res = '';\n  for (let i = 0; i <\
    \ s.length; i++) {\n    if (!c.includes(s[i])){\n      res += s[i];\n    }\n \
    \ }\n  let reversed = res.split('').reverse().join('');\n  return [res, res ===\
    \ reversed];\n}\n", "    let res = '';\n    for (let i = 0; i < s.length; i++)\
    \ {\n        if (!c.includes(s[i])) {\n            res += s[i];\n        }\n \
    \   }\n    return [res, res === res.split('').reverse().join('')];\n}", "    return\
    \ [s.split('').filter(e=>!c.includes(e)).join(''), s.split('').filter(e=>!c.includes(e)).join('')\
    \ === s.split('').filter(e=>!c.includes(e)).reverse().join('')];\n  }\n", "  let\
    \ arr = c.split('');\n  let arr2 = s.split('');\n  let check = false;\n  for(let\
    \ i = 0; i < arr.length; i++){\n    for(let j = 0; j < arr2.length; j++){\n  \
    \    if(arr[i] === arr2[j]){\n        arr2.splice(j, 1);\n        j--;\n     \
    \ }\n    }\n  }\n  let arr3 = arr2.join('');\n  let arr4 = arr3.split('');\n \
    \ let arr5 = arr3.split('').reverse();\n  if(arr4.join('') === arr5.join('')){\n\
    \    check = true;\n  }\n  return [arr3, check];\n}", "    let result = '';\n\
    \    let isPalindrome = true;\n    s.split('').forEach(char => {\n        if(!c.includes(char)){\n\
    \            result += char;\n        }\n    });\n    let check = result.split('').reverse().join('');\n\
    \    isPalindrome = result === check;\n    return [result, isPalindrome];\n}\n",
  "  c.split('').forEach(function(element) {\n    s = s.replace(element, '');\n  });\n\
    \  var result = [];\n  result.push(s);\n  result.push(s === s.split('').reverse().join(''));\n\
    \  return result;\n}", "    var a = s.split('').filter(x => !c.includes(x));\n\
    \    return [a.join(''), a.join('') === a.reverse().join('')];\n}", "    let newS\
    \ = s.split('').filter(el => !c.includes(el)).join('');\n    let reverseS = newS.split('').reverse().join('');\n\
    \    return [newS, newS === reverseS];\n}\n", "    return [s.split('').filter(item\
    \ => c.indexOf(item) === -1).join(''), (s.split('').filter(item => c.indexOf(item)\
    \ === -1).join('') === s.split('').filter(item => c.indexOf(item) === -1).reverse().join(''))];\n\
    }", "    let c_arr = c.split('');\n    let s_arr = s.split('');\n    for(let i\
    \ = 0; i < c_arr.length; i++){\n        for(let j = 0; j < s_arr.length; j++){\n\
    \            if(c_arr[i] === s_arr[j]){\n                s_arr.splice(j, 1);\n\
    \                j--;\n            }\n        }\n    }\n    let result = [s_arr.join(''),\
    \ palindrome(s_arr)];\n    return result;\n}", "  let res = '';\n  for (let i\
    \ = 0; i < s.length; i++) {\n    if (!c.includes(s[i])) {\n      res += s[i];\n\
    \    }\n  }\n  let is_palindrome = (res === res.split('').reverse().join(''));\n\
    \  return [res, is_palindrome];\n}\n", "  var res = s.split('').filter(function(elem){\n\
    \   return !c.split('').includes(elem);\n  }).join('');\n  console.log([res,res.split('').reverse().join('')\
    \ === res]);\n}\nreverse_delete(\"abcdedcba\", \"ab\");", "    let result = \"\
    \";\n    for (i = 0; i < s.length; i++) {\n        if (!c.includes(s[i])) {\n\
    \            result += s[i];\n        }\n    }\n    let check = false;\n    for\
    \ (i = 0; i < result.length; i++) {\n        if (result[i] === result[result.length\
    \ - 1 - i]) {\n            check = true;\n        } else {\n            check\
    \ = false;\n            break;\n        }\n    }\n    return [result, check];\n\
    }\n", "    let string = '';\n    let boolean = false;\n    for(let i = 0; i <\
    \ s.length; i++){\n        let char = s[i];\n        if(c.indexOf(char) === -1){\n\
    \            string += char;\n        }\n    }\n    if(string === string.split('').reverse().join('')){\n\
    \        boolean = true;\n    }\n    return [string, boolean];\n}", "    let arr\
    \ = s.split('').filter(item => {\n        if(c.includes(item)) return false;\n\
    \        return true;\n    });\n    let reversedArr = arr.reverse();\n    if(arr.join('')\
    \ === reversedArr.join('')) return [arr.join(''), true];\n    return [arr.join(''),\
    \ false];\n}", "\tfor(let i=0; i<c.length; i++){\n\t\tlet regex = new RegExp(c[i],\
    \ 'g');\n\t\ts = s.replace(regex, '');\n\t}\n\treturn [s, isPalindrome(s)];\n}",
  "    let filteredStr = s.split('').filter(char => !c.includes(char)).join('');\n\
    \    return [filteredStr, filteredStr === filteredStr.split('').reverse().join('')];\n\
    }\n", "    let n = 0;\n    let res = \"\";\n    for (let i = 0; i < s.length;\
    \ i++) {\n        let char = s[i];\n        if (c.indexOf(char) === -1) {\n  \
    \          res += char;\n        }\n    }\n    for (let i = 0; i < res.length;\
    \ i++) {\n        if (res[i] === res[res.length - i - 1]) {\n            n++;\n\
    \        }\n    }\n    if (n === res.length) {\n        return [res, true];\n\
    \    } else {\n        return [res, false];\n    }\n}", "    let r = '';\n   \
    \ let s_arr = s.split('');\n    let c_arr = c.split('');\n    for(let i=0; i<s_arr.length;\
    \ i++){\n        if(!c_arr.includes(s_arr[i])){\n            r += s_arr[i];\n\
    \        }\n    }\n    let pal = false;\n    let r_arr = r.split('');\n    for(let\
    \ i=0; i<r_arr.length; i++){\n        if(r_arr[i] === r_arr[r_arr.length-1-i]){\n\
    \            pal = true;\n        }else{\n            pal = false;\n         \
    \   break;\n        }\n    }\n    return [r, pal];\n}\n", "  let result = s.split('').filter(el\
    \ => !c.includes(el));\n  let result_check = result.join('');\n  if (result_check\
    \ === result_check.split('').reverse().join('')){\n    return [result_check, true];\n\
    \  }\n  return [result_check, false];\n}", "    for (let i = 0; i < c.length;\
    \ i++) {\n        s = s.replace(new RegExp(c[i], 'g'), '');\n    }\n    return\
    \ [s, s.split('').reverse().join('') === s];\n}", "    let result = s.split('').filter(a\
    \ => !c.includes(a));\n    return [result.join(''),isPalindrome(result)];\n}",
  "  for (let i = 0; i < c.length; i++) {\n    const element = c[i];\n    s = s.replace(new\
    \ RegExp(element, 'g'), '');\n  }\n  let check = true;\n  for (let i = 0; i <\
    \ Math.floor(s.length / 2); i++) {\n    if (s[i] !== s[s.length - 1 - i]) {\n\
    \      check = false;\n      break;\n    }\n  }\n  return [s, check];\n}\nreverse_delete(\"\
    abcde\", \"ae\");\nreverse_delete(\"abcdef\", \"b\");\nreverse_delete(\"abcdedcba\"\
    , \"ab\");", "    let sArr = s.split('');\n    for(let i = 0; i < sArr.length;\
    \ i++){\n        for(let j = 0; j < c.length; j++){\n            if(sArr[i] ===\
    \ c[j]){\n                sArr.splice(i, 1);\n                i--;\n         \
    \   }\n        }\n    }\n    let sStr = sArr.join('');\n    let reverseStr = sStr.split('').reverse().join('');\n\
    \    let resultArr = [];\n    if(sStr === reverseStr){\n        resultArr.push(sStr,\
    \ true);\n    }else{\n        resultArr.push(sStr, false);\n    }\n    return\
    \ resultArr;\n}", "    let check = s;\n    for(let i = 0; i < c.length; i++){\n\
    \        for(let j = 0; j < s.length; j++){\n            if(c[i] === s[j]){\n\
    \                check = check.replace(s[j], '');\n            }\n        }\n\
    \    }\n    let reverseCheck = check.split('').reverse().join('');\n    return\
    \ [check, reverseCheck === check];\n}", "    let deleted = [];\n    let result\
    \ = [];\n    for (let i = 0; i < s.length; i++) {\n        if(c.indexOf(s[i])\
    \ === -1){\n            deleted.push(s[i]);\n        }\n    }\n    deleted = deleted.join('');\n\
    \    let reversed = deleted.split('').reverse().join('');\n    if(deleted == reversed){\n\
    \        result.push(deleted, true);\n    } else {\n        result.push(deleted,\
    \ false);\n    }\n    return result;\n}", "    // c = 'ae'\n    // s = 'abcde'\n\
    \    let newString = s.split('').filter(letter => !c.includes(letter)).join('')\n\
    \    let result = [newString, isPalindrome(newString)]\n    return result\n  }\n\
    \  \n  function isPalindrome(string){\n    let reverseString = string.split('').reverse().join('')\n\
    \    return string === reverseString\n  }", "    var arr = [];\n    for(var i\
    \ = 0; i < s.length; i++){\n        if(c.indexOf(s[i]) == -1){\n            arr.push(s[i]);\n\
    \        }\n    }\n    var newStr = arr.join('');\n    return [newStr, isPalindrome(newStr)];\n\
    }\n", "  return [s.split('').filter(x => c.indexOf(x)===-1).join(''),\n    s.split('').filter(x\
    \ => c.indexOf(x)===-1).join('') === s.split('').filter(x => c.indexOf(x)===-1).reverse().join('')];\n\
    }\n", "  let rem = s.split('').filter(function(el){\n      return c.indexOf(el)\
    \ < 0;\n  }).join('');\n  return [rem, rem === rem.split('').reverse().join('')];\n\
    }", "    let arrS = s.split('');\n    let arrC = c.split('');\n    let result\
    \ = \"\";\n    let bool = true;\n    for(let i = 0; i < arrS.length; i++){\n \
    \       if(arrC.indexOf(arrS[i]) === -1){\n            result += arrS[i];\n  \
    \      }\n    }\n    if(result.length > 1){\n        for(let i = 0; i < result.length;\
    \ i++){\n            if(result[i] !== result[result.length - 1 - i]){\n      \
    \          bool = false;\n            }\n        }\n    }\n    else{\n       \
    \ bool = false;\n    }\n    return [result, bool];\n}", "    // write your code\
    \ here\n    if (typeof(s) !== 'string' || typeof(c) !== 'string') return 'Invalid\
    \ input';\n    let str = s.split('');\n    let del = c.split('');\n    for (let\
    \ i = 0; i < del.length; i++) {\n        for (let j = 0; j < str.length; j++)\
    \ {\n            if (del[i] === str[j]) {\n                str.splice(j, 1);\n\
    \                j--;\n            }\n        }\n    }\n    return [str.join(''),\
    \ palindrome(str.join(''))];\n}\n", "    const result = [];\n    let flag = true;\n\
    \    for(let i = 0; i < s.length; i++){\n        if(!c.includes(s[i])){\n    \
    \        result.push(s[i]);\n        }\n    }\n    let revResult = result.slice(0);\n\
    \    revResult = revResult.reverse();\n    let strRes = result.join('');\n   \
    \ let strRevRes = revResult.join('');\n    if(strRes !== strRevRes){\n       \
    \ flag = false;\n    }\n    return [strRes, flag];\n}", "    return [s.split('').filter(i\
    \ => !c.includes(i)).join(''), s.split('').filter(i => !c.includes(i)).join('')\
    \ === s.split('').filter(i => !c.includes(i)).reverse().join('')];\n}", "    for\
    \ (let i = 0; i < c.length; i++) {\n        s = s.replace(new RegExp(c[i], 'g'),\
    \ '');\n    }\n    return [s, s === s.split('').reverse().join('')];\n}\n", " \
    \   const chars = s.split('');\n    const deleteChar = c.split('');\n    const\
    \ result = chars.filter(char => {\n        return !deleteChar.includes(char);\n\
    \    });\n    const finalResult = result.join('');\n    const resultOfPalindrome\
    \ = isPalindrome(finalResult);\n    return [finalResult, resultOfPalindrome];\n\
    }", "    c.split('').forEach(v => s = s.replace(v, ''));\n    return [s, s.split('').reverse().join('')\
    \ === s];\n}", "    for (var i = 0; i < c.length; i++) {\n        s = s.replace(new\
    \ RegExp(c[i], 'g'), '');\n    }\n    return [s, s === s.split('').reverse().join('')];\n\
    }", "    let filtered = s.split('').filter(char => !c.includes(char)).join('');\n\
    \    return [filtered, filtered === filtered.split('').reverse().join('')];\n\
    }\n", "  let res = [];\n  for (var i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i])\
    \ == -1) {\n      res.push(s[i]);\n    }\n  }\n  let str = res.join('');\n  let\
    \ check = true;\n  for (var i = 0; i < str.length/2; i++) {\n    if (str[i] !=\
    \ str[str.length-1-i]) {\n      check = false;\n    }\n  }\n  return [str, check];\n\
    }", "    let remove = s.split('');\n    for(let i=0; i<remove.length; i++){\n\
    \        for(let j=0; j<c.length; j++){\n            if(remove[i]===c[j]){\n \
    \               remove.splice(i,1)\n                i--\n            }\n     \
    \   }\n    }\n    let back = remove.reverse().join('')\n    return remove.join('')\
    \ === back ? [remove.join(''), true] : [remove.join(''), false]\n}", "    let\
    \ sCopy = [...s];\n    for (let i = 0; i < sCopy.length; i++) {\n        for (let\
    \ j = 0; j < c.length; j++) {\n            if (sCopy[i] === c[j]){\n         \
    \       sCopy.splice(i, 1);\n                i--;\n            }\n        }\n\
    \    }\n    return [sCopy.join(''), isPalindrome(sCopy.join(''))];\n}\n", "  \
    \  var arr = s.split('');\n    var cArr = c.split('');\n    var result = [];\n\
    \    for(var i = 0; i < cArr.length; i++){\n        for(var j = 0; j < arr.length;\
    \ j++){\n            if(cArr[i] === arr[j]){\n                arr.splice(j, 1);\n\
    \                j--;\n            }\n        }\n    }\n    result.push(arr.join(''));\n\
    \    if(isPalindrome(arr)){\n        result.push(true);\n    }else{\n        result.push(false);\n\
    \    }\n    return result;\n}", "    var s_changed = s.split('');\n    for (var\
    \ i = 0; i < s_changed.length; i++) {\n        for (var j = 0; j < c.length; j++)\
    \ {\n            if (s_changed[i] == c[j]){\n                s_changed.splice(i,\
    \ 1);\n                i--;\n            }\n        }\n    }\n    var reverse_s_changed\
    \ = s_changed.reverse();\n    var palindrome = true;\n    for (var i = 0; i <\
    \ s_changed.length; i++) {\n        if (s_changed[i] != reverse_s_changed[i]){\n\
    \            palindrome = false;\n        }\n    }\n    s_changed = s_changed.join('');\n\
    \    return [s_changed, palindrome];\n}", "    let res = s;\n    let new_s = \"\
    \";\n    for (let x of c){\n        for (let i = 0; i < res.length; i++){\n  \
    \          if (res[i] != x){\n                new_s += res[i];\n            }\n\
    \        }\n        res = new_s;\n        new_s = \"\";\n    }\n    let check\
    \ = false;\n    for (let i = 0; i < res.length; i++){\n        if (res[i] == res[res.length\
    \ - i - 1]){\n            check = true;\n        }\n        else{\n          \
    \  check = false;\n            break;\n        }\n    }\n    return [res, check];\n\
    }", "\tlet result = [];\n\tlet str = '';\n\tlet palindrome = true;\n\tfor (let\
    \ i = 0; i < s.length; i++) {\n\t\tif (!c.includes(s[i])) {\n\t\t\tstr += s[i];\n\
    \t\t}\n\t}\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i] !== str[str.length\
    \ - 1 - i]) {\n\t\t\tpalindrome = false;\n\t\t}\n\t}\n\tresult.push(str, palindrome);\n\
    \treturn result;\n}", "\ts=s.split('');\n\tc=c.split('');\n\tfor(var i=0;i<s.length;i++){\n\
    \t\tfor(var j=0;j<c.length;j++){\n\t\t\tif(s[i]==c[j]){\n\t\t\t\ts.splice(i,1);\n\
    \t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n\tvar wynik=s.join('');\n\tif(wynik==wynik.split('').reverse().join('')){\n\
    \t\treturn [wynik,true];\n\t}\n\telse{\n\t\treturn [wynik,false];\n\t}\n}", " \
    \   var t = '';\n    for (var i = 0; i < s.length; i++) {\n        if (c.indexOf(s[i])\
    \ === -1) {\n            t += s[i];\n        }\n    }\n    return [t, t === t.split('').reverse().join('')];\n\
    }", "    c.split('').forEach(function(e){\n        s = s.replace(e, '');\n   \
    \ });\n    return [s, isPalindrome(s)];\n}", "    let count = 0;\n    let resultArr\
    \ = [];\n    let tempArray = s.split('');\n    let reverseArray = [];\n    let\
    \ cArray = c.split('');\n    let resultString = '';\n    for(let i = 0; i < tempArray.length;\
    \ i++){\n        if(cArray.includes(tempArray[i])){\n            count++;\n  \
    \      }\n    }\n    for(let i = 0; i < tempArray.length - count; i++){\n    \
    \    if(!cArray.includes(tempArray[i])){\n            resultString += tempArray[i];\n\
    \        }\n    }\n    reverseArray = resultString.split('').reverse();\n    if(reverseArray.join('')\
    \ === resultString){\n        resultArr.push(resultString, true);\n    }else{\n\
    \        resultArr.push(resultString, false);\n    }\n    return resultArr;\n}",
  "    let result = \"\";\n    let c_arr = c.split(\"\");\n    for(let i = 0; i <\
    \ s.length; i++){\n        if(!c_arr.includes(s[i])){\n            result += s[i];\n\
    \        }\n    }\n    return [result, palindrome(result)];\n}\n", "    let re\
    \ = new RegExp(`[${c}]`, 'g');\n    let r = s.replace(re, '');\n    return [r,\
    \ r === r.split('').reverse().join('')];\n}\n", "    let str = s.split('').filter(l=>!c.includes(l)).join('');\n\
    \    return [str, str === str.split('').reverse().join('')];\n}\n", "  let str\
    \ = '';\n  for (let i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i]) == -1)\
    \ {\n      str += s[i];\n    }\n  }\n  if (str.split('').reverse().join('') ==\
    \ str) {\n    return [str, true];\n  } else {\n    return [str, false];\n  }\n\
    }\n", "    let result = '';\n    for (let i = 0; i < s.length; i++) {\n      \
    \  if (!c.includes(s[i])){\n            result += s[i];\n        }\n    }\n  \
    \  return [result, result === result.split('').reverse().join('')];\n}", "  let\
    \ strToArray = s.split('');\n  let subStrToArray = c.split('');\n  let result\
    \ = [];\n  let isPalindrome = false;\n  strToArray.forEach(function(i){\n    if(!subStrToArray.includes(i)){\n\
    \      result.push(i);\n    }\n  });\n  result = result.join('');\n  if(result.split('').reverse().join('')\
    \ === result){\n    isPalindrome = true;\n  }\n  return [result, isPalindrome];\n\
    }", "    let sArray = s.split('');\n    let cArray = c.split('');\n    let newArray\
    \ = sArray.filter(x => !cArray.includes(x));\n    let sPalindrome = newArray.join('');\n\
    \    let result = newArray.reverse().join('');\n    return [sPalindrome, sPalindrome\
    \ === result];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
