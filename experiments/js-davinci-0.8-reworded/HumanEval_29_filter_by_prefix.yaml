name: HumanEval_29_filter_by_prefix
language: js
prompt: "//Filter an input array of strings only for ones that start with a given\
  \ prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"\
  abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings,\
  \ prefix){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\",\
  \ \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
completions: ["    return strings.filter( function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "\tvar filtered_list = strings.filter(\n\t\tfunction(string) {\n\
    \t\t\treturn string.startsWith(prefix);\n\t\t}\n\t);\n\treturn filtered_list;\n\
    }\n", "    return strings.filter(function(item){\n        return item.startsWith(prefix);\n\
    \    });\n}", "    return strings.filter(function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    // YOUR CODE HERE\n    var result = [];\n    for (var i =\
    \ 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)){\n\
    \            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n", "    return strings.filter(function(x){\n        return x.startsWith(prefix);\n\
    \    });\n}\n", "    var result = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].startsWith(prefix))\n            result.push(strings[i]);\n\
    \    }\n    return result;\n}", "    return strings.filter(function(string){\n\
    \        return string.slice(0,prefix.length) === prefix;\n    });\n}", "  return\
    \ strings.filter(string => string.startsWith(prefix));\n}\n\n", "    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n", "    var filtered = [];\n\
    \    for (var i = 0; i < strings.length; i++){\n        if (strings[i].indexOf(prefix)\
    \ == 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n", "\treturn strings.filter(function(string){\n\t\treturn string.startsWith(prefix);\n\
    \t});\n}\n", "  var filtered_strings = [];\n  var i;\n  for (i=0; i<strings.length;\
    \ i++){\n    if (strings[i].startsWith(prefix)){\n      filtered_strings.push(strings[i]);\n\
    \    }\n  }\n  return filtered_strings;\n}\n", "    strings = strings.filter(filter_by_prefix_helper(prefix));\n\
    \    return strings;\n}\n", "    var filtered = [];\n    for (var i=0; i<strings.length;\
    \ i++){\n        if (strings[i].startsWith(prefix)) {\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "  return _.filter(strings, function(string){\n\
    \    return string.slice(0,1) === prefix;\n  });\n}\n", "  var prefixLength =\
    \ prefix.length;\n  var results = [];\n  for(var i = 0; i < strings.length; i++){\n\
    \    if(strings[i].substring(0, prefixLength) === prefix){\n      results.push(strings[i]);\n\
    \    }\n  }\n  return results;\n}\n", "\treturn strings.filter(function(e){\n\t\
    \treturn e.indexOf(prefix) === 0;\n\t});\n}\n", "\tvar output = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\
    \t\toutput.push(strings[i]);\n\t\t}\n\t}\n\treturn output;\n}\n", "    strings\
    \ = strings.filter(function(el){\n        return el.indexOf(prefix) === 0;\n \
    \   });\n    return strings;\n}\n", "  return strings.filter(str => str.startsWith(prefix));\n\
    }\n", "    var result = [];\n    for(var i = 0; i < strings.length; i++){\n  \
    \      if(strings[i].startsWith(prefix)){\n            result.push(strings[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    var newArray = [];\n    for(var\
    \ i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            newArray.push(strings[i]);\n        }\n    }\n    return newArray;\n\
    }\n", "\treturn _.filter(strings, function(s){\n\t\treturn _.startsWith(s, prefix);\n\
    \t});\n}\n", "\tvar newstrings = [];\n\tfor (var i = 0; i < strings.length; i++){\n\
    \t\tif (strings[i].indexOf(prefix) === 0){\n\t\t\tnewstrings.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn newstrings;\n}\n", "\t// your code here...\n}\n", "    var\
    \ prefixed = [];\n    for (var i = 0; i < strings.length; i++){\n        if (strings[i].startsWith(prefix)){\n\
    \            prefixed.push(strings[i]);\n        }\n    }\n    return prefixed;\n\
    }\n", "\tvar myArray = [];\n\tfor (var i = 0; i < strings.length; i++) {\n\t\t\
    if (strings[i].startsWith(prefix)) {\n\t\t\tmyArray.push(strings[i]);\n\t\t}\n\
    \t}\n\treturn myArray;\n}", "\tconst result = strings.filter(s => s.startsWith(prefix));\n\
    \treturn result;\n}\n", "    return strings.filter(string => string.startsWith(prefix));\n\
    }\n", "  var arr = [];\n  strings.forEach(function(e){\n    if(e.startsWith(prefix)){\n\
    \      arr.push(e);\n    }\n  });\n  return arr;\n}\n", "\n}\n", "\t//TODO: implement\
    \ this function\n\tvar filteredStrings = [];\n\tfor (var i = 0; i < strings.length;\
    \ i++) {\n\t\tvar word = strings[i];\n\t\tif (word.startsWith(prefix)) {\n\t\t\
    \tfilteredStrings.push(word);\n\t\t}\n\t}\n\treturn filteredStrings;\n}\n", " \
    \   return strings.filter(function(string){\n        return string.indexOf(prefix)\
    \ === 0;\n    });\n}\n", "\tvar filtered_strings = [];\n\t\n\tfor(var i = 0; i\
    \ < strings.length; i++){\n\t\tif(strings[i].substring(0, prefix.length) == prefix){\n\
    \t\t\tfiltered_strings.push(strings[i]);\n\t\t}\n\t}\n\t\n\treturn filtered_strings;\n\
    }\n", "  var result = strings.filter(function(x){\n    return x.startsWith(prefix);\n\
    \  });\n  return result;\n}\n", "\treturn strings.filter(function(string){\n\t\
    \treturn string.startsWith(prefix);\n\t});\n}\n", "  var c=0;\n  var output =\
    \ [];\n  for(var i=0; i<strings.length; i++){\n    if(strings[i].substring(0,1)\
    \ == prefix){\n      output[c] = strings[i];\n      c++;\n    }\n  }\n  return\
    \ output;\n}\n", "    return strings.filter( (item) => item.startsWith(prefix)\
    \ );\n}\n", "  return _.filter(strings, function(string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n", "\t// TODO\n\t// return the array of strings that match the prefix\n\
    \tvar array = new Array();\n\tfor(var i = 0; i < strings.length; i++){\n\t\tif(strings[i].charAt(0)\
    \ == prefix){\n\t\t\tarray.push(strings[i]);\n\t\t}\n\t}\n\treturn array;\n}\n",
  "    // code here\n}\n", "    return strings.filter(function(str){\n        return\
    \ str.startsWith(prefix);\n    });\n}\n", "    if (prefix === undefined) {\n \
    \       prefix = \"\";\n    }\n    return strings.filter(function(string){\n \
    \       return string.indexOf(prefix) === 0;\n    });\n}\n", "  let result = [];\n\
    \  for (i = 0; i < strings.length; i++){\n    if (strings[i].charAt(0) == prefix){\n\
    \      result.push(strings[i]);\n    }\n  }\n  return result;\n}\n", "    var\
    \ list = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            list.push(strings[i]);\n        }\n    }\n    return list;\n}\n",
  "  return strings.filter(function(string){\n    return string.startsWith(prefix);\n\
    \  });\n}\n\n", "    var result = strings.filter(function(string){\n        return\
    \ string.startsWith(prefix);\n    });\n    return result;\n}\n", "  var output\
    \ = [];\n  for (var i = 0; i < strings.length; i++){\n    if (strings[i].startsWith(prefix)){\n\
    \      output.push(strings[i]);\n    }\n  }\n  return output;\n}\n", "    return\
    \ strings.filter(function(str){\n        return str.startsWith(prefix);\n    });\n\
    }\n\n", "  var filtered = [];\n  for (var i = 0; i < strings.length; i++){\n \
    \   if (strings[i].startsWith(prefix)){\n      filtered.push(strings[i]);\n  \
    \  }\n  }\n  return filtered;\n}\n", "  return _.filter(strings, function(x){\n\
    \    return x.startsWith(prefix);\n  });\n}\n", "    return strings.filter(function(item){\n\
    \        return item.startsWith(prefix);\n    });\n}\n", "    let results = [];\n\
    \    for (let i=0; i<strings.length; i++){\n        if (strings[i].startsWith(prefix)){\n\
    \            results.push(strings[i]);\n        }\n    }\n    return results;\n\
    }\n", "    var filtered = [];\n    for (var i = 0; i < strings.length; i++){\n\
    \tif (strings[i].slice(0, prefix.length) == prefix){\n\t    filtered.push(strings[i]);\n\
    \t}\n    }\n    return filtered;\n}\n", "    if(prefix===undefined) return strings;\n\
    \    else {\n        return strings.filter(function(x){\n            return x.startsWith(prefix);\n\
    \        });\n    }\n}\n\n\n", "\treturn strings.filter(function(item){\n\t\t\
    return item.indexOf(prefix) === 0;\n\t});\n}\n", "    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n\n", "    // YOUR CODE HERE\n\
    \    return undefined;\n}", "    var filtered = [];\n    for (var i=0; i<strings.length;\
    \ i++){\n        if (strings[i].slice(0,1) == prefix){\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "\tlet filteredArr = [];\n\tfor(let\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\
    \t\tfilteredArr.push(strings[i]);\n\t\t}\n\t}\n\treturn filteredArr;\n}\n", " \
    \   let output = [];\n    for (let item of strings){\n        if (item.startsWith(prefix)){\n\
    \            output.push(item);\n        }\n    }\n    return output;\n}", " \
    \   return strings.filter(function(str){\n        return str.substring(0, prefix.length)\
    \ === prefix;\n    });\n}\n", "    const result = [];\n    strings.forEach(function(string){\n\
    \        if(string.startsWith(prefix)){\n            result.push(string);\n  \
    \      }\n    });\n    return result;\n}\n", "\n}\n", "    var result = [];\n\
    \    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n", "\treturn strings.filter(function(string){\n\t\treturn string.startsWith(prefix);\n\
    \t});\n}\n", "    // START SOLUTION\n    return strings.filter(function(s){\n\
    \        return starts_with(s, prefix);\n    });\n    // END SOLUTION\n}\n", " \
    \ return strings.filter(function(word){\n    return word.startsWith(prefix);\n\
    \  });\n}", "    let result = [];\n    for (let i = 0; i < strings.length; i++){\n\
    \        if (strings[i].startsWith(prefix)){\n            result.push(strings[i]);\n\
    \        }\n    }\n    return result;\n}", "    let rtn = [];\n    let len = prefix.length;\n\
    \    for(let i = 0; i < strings.length; i++){\n        if(strings[i].slice(0,\
    \ len) === prefix){\n            rtn.push(strings[i]);\n        }\n    }\n   \
    \ return rtn;\n}", "    var filtered = [];\n    for (var str of strings){\n  \
    \      if (str.startsWith(prefix)){\n            filtered.push(str);\n       \
    \ }\n    }\n    return filtered;\n}\n", "    // YOUR CODE HERE\n    let newarr\
    \ = [];\n    for (let i=0; i<strings.length; i++){\n        if (strings[i].startsWith(prefix)){\n\
    \            newarr.push(strings[i]);\n        }\n    }\n    return newarr;\n\
    }\n", "    return strings.filter(function(string){\n        return string.startsWith(prefix);\n\
    \    });\n}\n\n", "\tvar b = [];\n\tfor(var i = 0; i < strings.length; i++){\n\
    \t\tif(strings[i].startsWith(prefix)){\n\t\t\tb.push(strings[i]);\n\t\t}\n\t}\n\
    \treturn b;\n}\n", "\treturn _.filter(strings, function(s){\n\t\treturn s.indexOf(prefix)\
    \ == 0;\n\t});\n}\n", "    return strings.filter(function(element){\n        return\
    \ element.startsWith(prefix);\n    });\n}\n", "  var newArray = [];\n  for (var\
    \ i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0)\
    \ {\n      newArray.push(strings[i]);\n    }\n  }\n  return newArray;\n}\n", " \
    \   let filtered = strings.filter(function(str){\n\treturn str.startsWith(prefix);\n\
    \    });\n    return filtered;\n}\n", "    return strings.filter(function(string){\n\
    \      return string.startsWith(prefix);\n    });\n  }\n  \n  // Count in an array\
    \ of strings the number of ones that start with a given prefix.\n  // >>> count_by_prefix([],\
    \ \"a\")\n  // 0\n  // >>> count_by_prefix([\"abc\", \"bcd\", \"cde\", \"array\"\
    ], \"a\")\n  // 2\n  function count_by_prefix(strings, prefix){\n    var filtered\
    \ = filter_by_prefix(strings, prefix);\n    return filtered.length;\n  }\n  \n\
    \  //Return a list of values for a given property name.\n  // >>> get_property_values([],\
    \ \"name\")\n  // []\n  // >>> get_property_values([{'name':'moe', 'age':40},\
    \ {'name':'larry', 'age':50}], \"name\")\n  // [\"moe\", \"larry\"]\n  function\
    \ get_property_values(list, property_name){\n    var values = [];\n    list.forEach(function(item){\n\
    \      values.push(item[property_name]);\n    });\n    return values;\n  }\n \
    \ \n  //Sum all the numeric values in an array.\n  // >>> sum([1, 2, 3])\n  //\
    \ 6\n  // >>> sum([])\n  // 0\n  function sum(values){\n    var sum = 0;\n   \
    \ values.forEach(function(value){\n      sum += value;\n    });\n    return sum;\n\
    \  }\n  \n  //Find the average value in an array.\n  // >>> avg([1, 2, 3])\n \
    \ // 2\n  // >>> avg([])\n  // NaN\n  function avg(values){\n    var sum = 0;\n\
    \    values.forEach(function(value){\n      sum += value;\n    });\n    return\
    \ sum / values.length;\n  }\n  \n  //Make a deep copy of an object.\n  // >>>\
    \ deep_copy({\"a\":1, \"b\": [1, 2, 3]})\n  // {\"a\":1, \"b\": [1, 2, 3]}\n \
    \ function deep_copy(object){\n", "\tvar newstrings = [];\n\tif (prefix != \"\"\
    ){\n\t\tstrings.forEach(function(x){\n\t\t\tif (x.indexOf(prefix)==0){\n\t\t\t\
    \tnewstrings.push(x);\n\t\t\t}\n\t\t});\n\t}\n\treturn newstrings;\n}\n", "  \
    \  if (prefix === undefined) return strings;\n    return strings.filter(function(str){\n\
    \        return str.indexOf(prefix) === 0;\n    });\n}\n", "    return filter(function(string){\n\
    \        return string.startsWith(prefix);\n    }, strings);\n}\n", "    var filtered\
    \ = [];\n    for (var i = 0; i < strings.length; i++){\n        if (strings[i].startsWith(prefix)){\n\
    \            filtered.push(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\n", "    var r=strings.filter(function(str){\n        return str.startsWith(prefix);\n\
    \    });\n    return r;\n}\n", "\treturn strings.filter(function(string){\n\t\t\
    return string.indexOf(prefix) === 0;\n\t});\n}\n", "\n}\n", "    return strings.filter(function(element){return\
    \ element.startsWith(prefix)});\n}\n", "  // YOUR CODE HERE\n  let new_array =\
    \ [];\n  for (let i = 0; i < strings.length; i++){\n    if (strings[i].startsWith(prefix)){\n\
    \      new_array.push(strings[i]);\n    }\n  }\n  return new_array;\n}\n", " \
    \ return strings.filter(function(word){\n    return word.indexOf(prefix) == 0;\n\
    \  });\n}\n\n", "    var good_strings = []\n    for (var i = 0; i < strings.length;\
    \ i++){\n        if (strings[i].startsWith(prefix)){\n            good_strings.push(strings[i])\n\
    \        }\n    }\n    return good_strings\n}\n", "    let set = new Set();\n\
    \    for(let i = 0; i < strings.length; i++){\n        let checker = strings[i].startsWith(prefix);\n\
    \        if(checker == true){\n            set.add(strings[i]);\n        }\n \
    \   }\n    return set;\n}", "\tvar result = [];\n\tfor(var i = 0; i < strings.length;\
    \ i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\t\tresult.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "\tvar results = [];\n\tfor(var i=0; i<strings.length;\
    \ i++){\n\t\tif(strings[i].indexOf(prefix) == 0){\n\t\t\tresults.push(strings[i]);\n\
    \t\t}\n\t}\n\treturn results;\n}\n", "    for(var n=0; n<strings.length; n++){\n\
    \        if(strings[n].startsWith(prefix)){\n            console.log(strings[n]);\n\
    \        }\n    }\n}", "  let result = [];\n  for (let i = 0; i < strings.length;\
    \ i++){\n    if (strings[i].startsWith(prefix)){\n      result.push(strings[i]);\n\
    \    }\n  }\n  return result;\n}\n", "  return strings.filter(function(string){\n\
    \    return string.indexOf(prefix) === 0;\n  });\n}\n", "  return strings.filter(function(val){\n\
    \    return val.startsWith(prefix);\n  });\n}\n", "\tvar filtered = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\
    \t\tfiltered.push(strings[i]);\n\t\t}\n\t}\n\treturn filtered;\n}\n", "    var\
    \ arr = [];\n    for(var i = 0; i < strings.length; i++){\n        if(strings[i].startsWith(prefix)){\n\
    \            arr.push(strings[i]);\n        }\n    }\n    return arr;\n}\n", " \
    \   return strings.filter(function(string){\n      if(string.startsWith(prefix)){\n\
    \        return string;\n      }\n    });\n}\n\n\n", "    // YOUR CODE HERE\n\
    \    return strings.filter(function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "  for(var i = 0; i < strings.length; i++){\n    if(strings[i].startsWith(prefix)){\n\
    \      strings.splice(i,1);\n    }\n  }\n  return strings;\n}", "    return strings.filter(string\
    \ => string.slice(0, prefix.length) === prefix);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
