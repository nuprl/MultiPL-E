name: HumanEval_29_filter_by_prefix
language: js
prompt: "//Filter an input array of strings only for ones that start with a given\
  \ prefix.\n// >>> filter_by_prefix([], \"a\")\n// []\n// >>> filter_by_prefix([\"\
  abc\", \"bcd\", \"cde\", \"array\"], \"a\")\n// [\"abc\", \"array\"]\nfunction filter_by_prefix(strings,\
  \ prefix){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_by_prefix;\n  assert.deepEqual(candidate([], \"john\"),[]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\",\
  \ \"xxxAAA\", \"xxx\"]);\n}\n\ntest();"
completions: ["    return strings.filter( function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "\tvar filtered_list = strings.filter(\n\t\tfunction(string) {\n\
    \t\t\treturn string.startsWith(prefix);\n\t\t}\n\t);\n\treturn filtered_list;\n\
    }\n", "    return strings.filter(function(item){\n        return item.startsWith(prefix);\n\
    \    });\n}", "    return strings.filter(function(str){\n        return str.startsWith(prefix);\n\
    \    });\n}\n", "    // YOUR CODE HERE\n    var result = [];\n    for (var i =\
    \ 0; i < strings.length; i++) {\n        if (strings[i].startsWith(prefix)){\n\
    \            result.push(strings[i]);\n        }\n    }\n    return result;\n\
    }\n", "    return strings.filter(function(x){\n        return x.startsWith(prefix);\n\
    \    });\n}\n", "    var result = [];\n    for(var i = 0; i < strings.length;\
    \ i++){\n        if(strings[i].startsWith(prefix))\n            result.push(strings[i]);\n\
    \    }\n    return result;\n}", "    return strings.filter(function(string){\n\
    \        return string.slice(0,prefix.length) === prefix;\n    });\n}", "  return\
    \ strings.filter(string => string.startsWith(prefix));\n}\n\n", "    return strings.filter(function(str){\n\
    \        return str.startsWith(prefix);\n    });\n}\n", "    var filtered = [];\n\
    \    for (var i = 0; i < strings.length; i++){\n        if (strings[i].indexOf(prefix)\
    \ == 0){\n            filtered.push(strings[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n", "\treturn strings.filter(function(string){\n\t\treturn string.startsWith(prefix);\n\
    \t});\n}\n", "  var filtered_strings = [];\n  var i;\n  for (i=0; i<strings.length;\
    \ i++){\n    if (strings[i].startsWith(prefix)){\n      filtered_strings.push(strings[i]);\n\
    \    }\n  }\n  return filtered_strings;\n}\n", "    strings = strings.filter(filter_by_prefix_helper(prefix));\n\
    \    return strings;\n}\n", "    var filtered = [];\n    for (var i=0; i<strings.length;\
    \ i++){\n        if (strings[i].startsWith(prefix)) {\n            filtered.push(strings[i]);\n\
    \        }\n    }\n    return filtered;\n}\n", "  return _.filter(strings, function(string){\n\
    \    return string.slice(0,1) === prefix;\n  });\n}\n", "  var prefixLength =\
    \ prefix.length;\n  var results = [];\n  for(var i = 0; i < strings.length; i++){\n\
    \    if(strings[i].substring(0, prefixLength) === prefix){\n      results.push(strings[i]);\n\
    \    }\n  }\n  return results;\n}\n", "\treturn strings.filter(function(e){\n\t\
    \treturn e.indexOf(prefix) === 0;\n\t});\n}\n", "\tvar output = [];\n\tfor(var\
    \ i = 0; i < strings.length; i++){\n\t\tif(strings[i].startsWith(prefix)){\n\t\
    \t\toutput.push(strings[i]);\n\t\t}\n\t}\n\treturn output;\n}\n", "    strings\
    \ = strings.filter(function(el){\n        return el.indexOf(prefix) === 0;\n \
    \   });\n    return strings;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
