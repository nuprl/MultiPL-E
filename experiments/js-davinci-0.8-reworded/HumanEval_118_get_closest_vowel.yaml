name: HumanEval_118_get_closest_vowel
language: js
prompt: "//You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
  full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
  eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
  bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
  ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
  quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
  Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
completions: ["    var vowels = \"aeiouAEIOU\";\n    var pos = word.length - 1;\n\
    \    while (pos > 0) {\n        if (!is_vowel(word[pos])) {\n            // We\
    \ found a consonant\n            pos--;\n            if (!is_vowel(word[pos]))\
    \ {\n                // We found a consonant followed by a consonant\n       \
    \         pos++;\n                break;\n            }\n        }\n        pos--;\n\
    \    }\n    if (pos < word.length && pos >= 0 && is_vowel(word[pos])) {\n    \
    \    return word[pos];\n    } else {\n        return \"\";\n    }\n}\n", "   \
    \ word = word.split(\"\");\n    let vowels = [];\n    let consonants = [];\n \
    \   let closest_vowel = \"\";\n    for(let i = 0; i < word.length; i++){\n   \
    \     if(word[i] == \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i] ==\
    \ \"o\" || word[i] == \"u\"){\n            vowels.push(word[i]);\n        }\n\
    \        else{\n            consonants.push(word[i]);\n        }\n    }\n    if(consonants.length\
    \ == 0 || vowels.length == 0){\n        return \"\";\n    }\n    else{\n     \
    \   if(consonants.length > vowels.length){\n            closest_vowel = vowels[vowels.length\
    \ - 1];\n        }\n        else{\n            closest_vowel = vowels[consonants.length\
    \ - 1];\n        }\n    }\n    return closest_vowel;\n}", "    // use a for loop\
    \ and check for each character\n    for (var i = word.length - 1; i >= 0; i--)\
    \ {\n        var char = word[i];\n        if (is_consonant(char)) {\n        \
    \    for (var j = i - 1; j >= 0; j--) {\n                if (is_vowel(word[j]))\
    \ {\n                    return word[j];\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "\t// Your code goes here:\n}\n", "\t\
    word = word.toLowerCase()\n\tvowels = \"aeiou\"\n\tvar closest_vowel = \"\"\n\t\
    var distance = 10000\n\tfor (var i = 0; i < word.length; i++) {\n\t\tvar current_vowel\
    \ = word[i]\n\t\tvar current_distance = word.length - i\n\t\tif (vowels.indexOf(current_vowel)\
    \ != -1 && current_distance < distance){\n\t\t\tclosest_vowel = current_vowel\n\
    \t\t\tdistance = current_distance\n\t\t}\n\t}\n\treturn closest_vowel\n}\n", " \
    \ let counter = word.length - 1;\n  let consonant_1 = false;\n  let consonant_2\
    \ = false;\n  let closest_vowel = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \  while (counter > 0){\n    if (!consonant_1){\n      if (vowels.indexOf(word[counter])\
    \ == -1){\n        consonant_1 = true;\n      }\n    } else if (!consonant_2){\n\
    \      if (vowels.indexOf(word[counter]) == -1){\n        consonant_2 = true;\n\
    \      } else {\n        closest_vowel = word[counter];\n        break;\n    \
    \  }\n    }\n    counter -= 1;\n  }\n  return closest_vowel;\n}\n", "    var vowel=[\"\
    a\",\"e\",\"i\",\"o\",\"u\"];\n    var word_split=word.split(\"\");\n    var word_length=word_split.length;\n\
    \    for(var i=word_length-1;i>0;i--){\n        if(vowel.indexOf(word_split[i])!=-1){\n\
    \            if(vowel.indexOf(word_split[i-1])==-1){\n                return word_split[i];\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    var word = word.split(\"\
    \");\n    var last_vowel = '';\n    var closest_vowel = '';\n    var is_last_char_consonant\
    \ = true;\n    var vowel_is_found = false;\n    for(var i = word.length - 1; i\
    \ >= 0; i--){\n        var letter = word[i];\n        var is_vowel = letter.match(/[aeiou]/i);\n\
    \        var is_consonant = letter.match(/[bcdfghjklmnpqrstvwxz]/i);\n       \
    \ if(is_vowel){\n            last_vowel = letter;\n            if(is_last_char_consonant){\n\
    \                vowel_is_found = true;\n                closest_vowel = last_vowel;\n\
    \                break;\n            }\n        }\n        if(is_consonant){\n\
    \            is_last_char_consonant = true;\n        }else{\n            is_last_char_consonant\
    \ = false;\n        }\n    }\n    if(vowel_is_found){\n        return closest_vowel;\n\
    \    }else{\n        return \"\";\n    }\n}", "    \n    var vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"];\n    var closestVowel = \"\";\n    var closestVowelIndex\
    \ = -1;\n    var lastLetterIndex = word.length - 1;\n    var firstLetterIndex\
    \ = 0;\n    var isFirstLetter = false;\n    var isLastLetter = false;\n    var\
    \ isSecondLetter = false;\n    var isFirstVowel = false;\n    var isSecondVowel\
    \ = false;\n    var isFirstConsonant = false;\n    var isSecondConsonant = false;\n\
    \    var nextLetter = \"\";\n    var previousLetter = \"\";\n    var position\
    \ = 0;\n    var index = 0;\n    var isVowel = false;\n    var difference = 0;\n\
    \    var currentDifference = 0;\n    var currentIndex = 0;\n    var currentVowel\
    \ = \"\";\n    var currentClosestVowel = \"\";\n    var currentPosition = 0;\n\
    \    var wordLength = word.length;\n    var currentCount = 0;\n    var previousCount\
    \ = 0;\n    var count = 0;\n    var closestCount = 0;\n    var isClosestVowel\
    \ = false;\n    var isCurrentVowel = false;\n    var currentWord = \"\";\n   \
    \ var closestWord = \"\";\n    var isClosestWord = false;\n    var closestWordDistance\
    \ = 0;\n    var currentWordDistance = 0;\n    var currentWordVowelIndex = 0;\n\
    \    var closestWordVowelIndex = 0;\n    var vowelIndex = 0;\n    var positionOfVowel\
    \ = 0;\n    var isCurrentClosestVowel = false;\n    var previousVowel = \"\";\n\
    \    var previousClosestVowel = \"\";\n    var currentVowelIndex = 0;\n    var\
    \ previousVowelIndex = 0;\n    var currentClosestVowelIndex = 0;\n    var previousClosestVowelIndex\
    \ = 0;\n    var closestVowelIndex = 0;\n    var countOfVowels = 0;\n    var minimumDistance\
    \ = 0;\n    var currentDistance = 0;", "    var VOWELS = \"aeiou\";\n    var i\
    \ = word.length - 1;\n    while (i >= 0) {\n        if (VOWELS.indexOf(word[i])\
    \ == -1)\n            i--;\n        else if (i == 0)\n            return \"\"\
    ;\n        else if (VOWELS.indexOf(word[i-1]) == -1)\n            return word[i];\n\
    \        else\n            i--;\n    }\n    return \"\";\n}\n", "    var arr =\
    \ word.split(\"\");\n    var count = 0;\n    var result = \"\";\n    for(var i\
    \ = word.length-1; i >= 0; i--){\n        if(arr[i] === \"a\" || arr[i] === \"\
    e\" || arr[i] === \"i\" || arr[i] === \"o\" || arr[i] === \"u\"){\n          \
    \  count++;\n            if(count === 2){\n                result = arr[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var vowel = ['a','e','i','o','u'];\n    for(var i = word.length - 1;\
    \ i >= 0; i--){\n      if(vowel.indexOf(word[i]) !== -1){\n        for(var j =\
    \ i - 1; j >= 0; j--){\n          if(vowel.indexOf(word[j]) === -1){\n       \
    \     return word[i];\n          }\n        }\n      }\n    }\n    return '';\n\
    }\n", "    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var nearest_vowel;\n\
    \    var first_vowel_index = word.length;\n    for (var i = 0; i < vowels.length;\
    \ i++){\n        var vowel_index = word.indexOf(vowels[i]);\n        if (vowel_index\
    \ > -1 && vowel_index < first_vowel_index && vowel_index > 0 && word.indexOf(vowels[i],\
    \ vowel_index + 1) == -1){\n            nearest_vowel = vowels[i];\n         \
    \   first_vowel_index = vowel_index;\n        }\n    }\n    return nearest_vowel\
    \ || \"\";\n}\n", "    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'];\n    let i = word.length - 1;\n    let vowel = \"\";\n    let foundVowel\
    \ = false;\n    let firstLetterIsAVowel = false;\n    let lastLetterIsAVowel =\
    \ false;\n    let count = 0;\n    let output = '';\n    for (let j = 0; j < word.length;\
    \ j++) {\n        if (vowels.includes(word[j])) {\n            firstLetterIsAVowel\
    \ = true;\n        }\n    }\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (vowels.includes(word[i])) {\n            lastLetterIsAVowel = true;\n\
    \        }\n    }\n    if (firstLetterIsAVowel === true && lastLetterIsAVowel\
    \ === true) {\n        while (i >= 0) {\n            if (vowels.includes(word[i]))\
    \ {\n                vowel = word[i];\n                foundVowel = true;\n  \
    \              count++;\n            }\n            if (foundVowel === true &&\
    \ !vowels.includes(word[i]) && count === 1) {\n                output = vowel;\n\
    \                break;\n            }\n            i--;\n        }\n    }\n \
    \   return output;\n}\n\n", "    if(!word) return '';\n    let vowel = ['a','e','i','o','u','A','E','I','O','U'];\n\
    \    let found = -1;\n    for(let i = word.length-1; i >= 0; i--){\n        if(vowel.indexOf(word[i])\
    \ >= 0){\n            found = i;\n            break;\n        }\n    }\n    if(found\
    \ == -1) return '';\n    if(found == 0) return '';\n    if(found == word.length-1)\
    \ return '';\n    if(vowel.indexOf(word[found-1]) >= 0) return '';\n    if(vowel.indexOf(word[found+1])\
    \ >= 0) return '';\n    return word[found];\n}\n", "    let vowels = 'AEIOUaeiou'\n\
    \    let closest = ''\n    for (let i = word.length-1; i >= 0; i--){\n       \
    \ if (vowels.includes(word[i])){\n            closest = word[i]\n            break\n\
    \        }\n    }\n    return closest\n}", "    if(!word) return null;\n    var\
    \ right = word.length - 1;\n    var left = word.length - 2;\n    if(left < 0)\
    \ return \"\";\n    while(left >= 0){\n        if(!isVowel(word[left]) && isVowel(word[right])){\n\
    \            return word[right];\n        }\n        right--;\n        left--;\n\
    \    }\n    return \"\";\n}\n", "    const vowel = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const consonant = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let consonantPos = 0;\n\
    \    let vowelPos = 0;\n    for (let i = word.length - 1; i >= 0; i--) {\n   \
    \     if (consonant.includes(word[i])) {\n            consonantPos = i;\n    \
    \        break;\n        }\n    }\n    for (let i = consonantPos; i >= 0; i--)\
    \ {\n        if (vowel.includes(word[i])) {\n            vowelPos = i;\n     \
    \       break;\n        }\n    }\n    if (vowelPos > 0) {\n        return word[vowelPos];\n\
    \    } else {\n        return '';\n    }\n}", "    var vowelPosition;\n    var\
    \ patt = /[aeiou]/gi;\n    var result = word.match(patt);\n    var last_vowel\
    \ = result[result.length-1];\n    var last_vowel_index = word.lastIndexOf(last_vowel);\n\
    \    var left_consonant = word.slice(0,last_vowel_index);\n    var right_consonant\
    \ = word.slice(last_vowel_index+1);\n    var left_consonant_arr = left_consonant.split(\"\
    \");\n    var right_consonant_arr = right_consonant.split(\"\");\n    var reverse_consonant_arr\
    \ = left_consonant_arr.reverse();\n    if (vowelPosition == 0){\n        return\
    \ \"\"\n    } else if (vowelPosition == 1){\n        return word.slice(vowelPosition)\n\
    \    } else {\n        return last_vowel\n    }\n}\n", "    let vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    let wordArray = Array.from(word.toLowerCase());\n\
    \    let foundVowel = [];\n    for (let i = wordArray.length - 1; i >= 0; i--)\
    \ {\n        if (!vowels.includes(wordArray[i])) {\n            continue;\n  \
    \      } else {\n            foundVowel.push(wordArray[i]);\n            if (foundVowel.length\
    \ == 2) {\n                break;\n            }\n        }\n    }\n    return\
    \ foundVowel.length >= 2 ? word[word.toLowerCase().indexOf(foundVowel[1])] : '';\n\
    }", "\tif (word.length <= 2) {\n\t\treturn \"\";\n\t}\n\tvar vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"];\n\tvar prev = '';\n\tvar curr = '';\n\tvar result\
    \ = '';\n\tfor (var i = 0; i < word.length; i++) {\n\t\tif (vowels.indexOf(word[i])\
    \ >= 0) {\n\t\t\tcurr = word[i];\n\t\t\tif (vowels.indexOf(prev) < 0 && vowels.indexOf(curr)\
    \ >= 0) {\n\t\t\t\tresult = curr;\n\t\t\t}\n\t\t}\n\t\tprev = curr;\n\t}\n\treturn\
    \ result;\n}\n", "    let vowels = 'AEIOUaeiou'\n    let left = 0;\n    let right\
    \ = word.length - 1;\n    while(left < right){\n        while(vowels.indexOf(word[left])\
    \ === -1 && left < right){\n            left += 1;\n        }\n        while(vowels.indexOf(word[right])\
    \ === -1 && left < right){\n            right -= 1;\n        }\n        if(vowels.indexOf(word[left])\
    \ !== -1 && vowels.indexOf(word[right]) !== -1){\n            return word[left];\n\
    \        }\n        left += 1;\n        right -= 1;\n    }\n    return '';\n}",
  "\tvar vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tword = word.split(\"\");\n\
    \tvar closest_vowel = \"\";\n\tfor(var i = word.length - 1; i >= 0; i--){\n\t\t\
    if(vowels.indexOf(word[i]) != -1){\n\t\t\tclosest_vowel = word[i];\n\t\t\tfor(var\
    \ j = i - 1; j >= 0; j--){\n\t\t\t\tif(vowels.indexOf(word[j]) == -1){\n\t\t\t\
    \t\treturn closest_vowel;\n\t\t\t\t} else {\n\t\t\t\t\tclosest_vowel = \"\";\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn closest_vowel;\n}", "\tvar vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n\tfor (var i = word.length - 1; i >= 0; i--)\
    \ {\n\t\tvar curr = word[i];\n\t\tvar next = word[i - 1];\n\t\tif (vowels.indexOf(curr)\
    \ > -1 && vowels.indexOf(next) == -1) {\n\t\t\treturn curr;\n\t\t}\n\t}\n\treturn\
    \ \"\";\n}\n", "    for(var i = word.length-1; i >= 0; i--){\n        if(consonant(word[i])){\n\
    \            for(var j = i-1; j >= 0; j--){\n                if(vowel(word[j])){\n\
    \                    return word[j];\n                }\n            }\n     \
    \   }\n    }\n    return '';\n}\n", "\tlet result = [];\n\tlet str = word.split('');\n\
    \tlet counter = 0;\n\tfor(let i = 0; i < str.length; i++){\n\t\tif(vowels.includes(str[i])\
    \ === true && vowels.includes(str[i + 1]) === false && vowels.includes(str[i -\
    \ 1]) === false){\n\t\t\tif(counter === 0){\n\t\t\t\tresult.push(str[i]);\n\t\t\
    \t\tcounter++;\n\t\t\t}\n\t\t}\n\t}\n\tif(result.length > 0){\n\t\treturn result.join('');\n\
    \t}else{\n\t\treturn '';\n\t}\n}", "    let closest_vowel = \"\";\n    let consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    let vowels = \"aeiou\";\n    let consonant_count\
    \ = 0;\n    let vowel_count = 0;\n    for (let i = word.length-1; i >= 0; i--){\n\
    \        if (consonants.includes(word[i])){\n            consonant_count += 1;\n\
    \        } else if (vowels.includes(word[i])){\n            vowel_count += 1;\n\
    \        }\n        if (consonant_count > 0 && vowel_count > 0){\n           \
    \ closest_vowel = word[i];\n            break;\n        }\n    }\n    return closest_vowel;\n\
    }", "    const vowels = \"aeiou\";\n    const consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    let subword = \"\";\n    let closest_vowel = \"\";\n    let vowel_ind =\
    \ -1;\n    let cons_ind = -1;\n    //loop through the word\n    for(let i = word.length\
    \ - 1; i > 0; i--){\n        // if the character is a vowel\n        if(vowels.includes(word[i])){\n\
    \            if(vowel_ind === -1){\n                vowel_ind = i;\n         \
    \   }\n            else if(cons_ind !== -1){\n                return word[vowel_ind];\n\
    \            }\n        }\n        //if the character is a consonant\n       \
    \ else if(consonants.includes(word[i])){\n            if(cons_ind === -1){\n \
    \               cons_ind = i;\n            }\n            else if(vowel_ind !==\
    \ -1){\n                return word[vowel_ind];\n            }\n        }\n  \
    \  }\n    return closest_vowel;\n}\n", "    let vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    let closestVowel = '';\n    let closestDistance = word.length;\n\
    \    let currentDistance = word.length;\n    for (let i = 0; i < word.length;\
    \ i++) {\n        if (vowels.includes(word[i])) {\n            for (let j = i\
    \ + 1; j < word.length; j++) {\n                if (!vowels.includes(word[j]))\
    \ {\n                    currentDistance = j - i;\n                    if (currentDistance\
    \ < closestDistance) {\n                        closestDistance = currentDistance;\n\
    \                        closestVowel = word[i];\n                    }\n    \
    \                break;\n                }\n            }\n        }\n    }\n\
    \    return closestVowel;\n}", "  // get the index of the first consonant at the\
    \ end of the word\n  const last_consonant_index = Array.from(word).reverse().findIndex(\n\
    \    x => 'bcdfghjklmnpqrstvwxyz'.includes(x.toLowerCase())\n  );\n  if (last_consonant_index\
    \ < 2) {\n    return '';\n  }\n  const last_consonant_index_from_left = word.length\
    \ - last_consonant_index - 1;\n  const closest_vowel_index = word.substring(last_consonant_index_from_left).search(/[aeiouy]/);\n\
    \  if (closest_vowel_index < 0) {\n    return '';\n  }\n  return word[last_consonant_index_from_left\
    \ + closest_vowel_index];\n}\n", "    var n= word.length;\n    var vowel=\"\"\
    ;\n    for(var i=n-1;i>0;i--){\n        if((word[i]==\"a\"||word[i]==\"e\"||word[i]==\"\
    i\"||word[i]==\"o\"||word[i]==\"u\")&&(word[i-1]!=\"a\"&&word[i-1]!=\"e\"&&word[i-1]!=\"\
    i\"&&word[i-1]!=\"o\"&&word[i-1]!=\"u\")){\n            vowel=word[i];\n     \
    \       break;\n        }\n    }\n    return vowel;\n}", "    var vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    for (var i = word.length - 1; i >= 0; i--)\
    \ {\n        if (vowels.indexOf(word[i]) !== -1) {\n            if (i == word.length\
    \ - 1) {\n                return \"\";\n            }\n            if (vowels.indexOf(word[i\
    \ + 1]) !== -1) {\n                return \"\";\n            }\n            return\
    \ word[i];\n        }\n    }\n    return \"\";\n}\n", "    var vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    var vowel_index = null;\n    var last_con_index\
    \ = word.length - 1;\n    for (var i = word.length - 1; i >= 0; i--) {\n     \
    \   if (vowels.indexOf(word[i]) > -1) {\n            vowel_index = i;\n      \
    \  } else {\n            if (vowel_index != null) {\n                return word[vowel_index];\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    if(typeof word !==\
    \ \"string\") return \"Argument must be string!\";\n    if(word.length === 0)\
    \ return \"Empty string!\";\n    let vowels = new Set([\"a\", \"e\", \"i\", \"\
    o\", \"u\"]);\n    for(let i = word.length - 1; i >= 0; i--){\n        if(vowels.has(word[i])\
    \ && i > 0){\n            if(!vowels.has(word[i - 1])) return word[i];\n     \
    \   }\n    }\n    return \"\";\n}", "    var vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    var closest = \"\";\n    var rightVowel = \"\";\n    for (var\
    \ i = 0; i < word.length; i++){\n        if (vowels.indexOf(word[i]) !== -1){\n\
    \            rightVowel = word[i];\n            break;\n        }\n    }\n   \
    \ for (var j = 0; j < word.length; j++){\n        if (vowels.indexOf(word[j])\
    \ !== -1){\n            if (rightVowel !== \"\"){\n                if (word.indexOf(rightVowel)\
    \ < word.indexOf(word[j])){\n                    closest = rightVowel;\n     \
    \           }\n                else{\n                    closest = word[j];\n\
    \                }\n            }\n            else{\n                closest\
    \ = word[j];\n            }\n        }\n    }\n    return closest;\n}", "    var\
    \ vowels = \"aeiouAEIOU\";\n    var out = \"\";\n    var wordLen = word.length;\n\
    \    var i;\n    for (i = wordLen - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            out = word[i];\n            break;\n        }\n    }\n\
    \    return out;\n}\n", "  word = word.split(\"\");\n  var vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n  var result = [];\n  for(var i = word.length - 1;\
    \ i >= 0; i--){\n    if(vowels.indexOf(word[i]) > -1){\n      if(vowels.indexOf(word[i-1])\
    \ == -1 && vowels.indexOf(word[i+1]) == -1){\n        result.push(word[i]);\n\
    \      }\n    }\n  }\n  return result[0];\n}", "    var vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    var closestVowel = \"\";\n    for (var i = word.length-1;\
    \ i >= 0; i--) {\n        if (vowels.indexOf(word[i]) > -1 && vowels.indexOf(word[i-1])\
    \ === -1 && vowels.indexOf(word[i+1]) === -1) {\n            closestVowel = word[i];\n\
    \            break;\n        }\n    }\n    return closestVowel;\n}\n", "    var\
    \ vowels = 'aeiou';\n    var vowel = '';\n    var result = '';\n    var position\
    \ = -1;\n    var closest = null;\n    var closestPosition = -1;\n    var reversed\
    \ = word.split('').reverse().join('');\n    for (var i = 0; i < reversed.length;\
    \ i++) {\n        if (vowels.indexOf(reversed[i]) != -1) {\n            position\
    \ = i;\n            vowel = reversed[i];\n            break;\n        }\n    }\n\
    \    if (position == -1) {\n        return '';\n    }\n    for (var i = position\
    \ + 1; i < reversed.length; i++) {\n        if (vowels.indexOf(reversed[i]) ==\
    \ -1) {\n            closest = reversed[i];\n            closestPosition = i;\n\
    \            break;\n        }\n    }\n    if (closestPosition == -1) {\n    \
    \    return '';\n    }\n    if (position == closestPosition + 1) {\n        return\
    \ '';\n    }\n    return vowel;\n}\n", "    var vowels = \"aeiou\";\n    var ln\
    \ = word.length;\n    var dist = ln;\n    var result = \"\";\n    for(var i =\
    \ 0; i < ln; i++){\n        if(vowels.indexOf(word[i]) > -1){\n            if(i\
    \ > 0 && vowels.indexOf(word[i-1]) == -1){\n                var d = ln - i;\n\
    \                if(d < dist){\n                    dist = d;\n              \
    \      result = word[i];\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    var check = false;\n    var j = 0;\n    for(var\
    \ i = word.length-1; i >= 0; i--){\n        if(word[i] == \"a\" || word[i] ==\
    \ \"e\" || word[i] == \"i\" || word[i] == \"o\" || word[i] == \"u\" || word[i]\
    \ == \"A\" || word[i] == \"E\" || word[i] == \"I\" || word[i] == \"O\" || word[i]\
    \ == \"U\"){\n            check = true;\n            j = i;\n        }\n     \
    \   if(check && word[i] != \"a\" && word[i] != \"e\" && word[i] != \"i\" && word[i]\
    \ != \"o\" && word[i] != \"u\" && word[i] != \"A\" && word[i] != \"E\" && word[i]\
    \ != \"I\" && word[i] != \"O\" && word[i] != \"U\"){\n            return word[j];\n\
    \        }\n    }\n    return \"\";\n}", "\tconst vowels = \"aeiou\";\n\tlet closest_vowel\
    \ = '';\n\tfor (let i = word.length - 1; i >= 0; i--) {\n\t\tif (vowels.includes(word[i])\
    \ && vowels.includes(word[i-1])) {\n\t\t\tclosest_vowel = word[i];\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn closest_vowel;\n}\n", "    var vowels = 'aeiouAEIOU';\n \
    \   var vowel = '';\n    for (var i = word.length-1; i >= 0; i--){\n        if\
    \ (vowels.indexOf(word[i]) != -1 && vowels.indexOf(word[i-1]) == -1 && vowels.indexOf(word[i+1])\
    \ == -1){\n            vowel = word[i];\n            break;\n        }\n    }\n\
    \    return vowel;\n}", "    let vowels = \"aeiou\";\n    let index = 0;\n   \
    \ let count = 0;\n    for(let i = word.length - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i])\
    \ !== -1){\n            count++;\n            if(count === 2){\n             \
    \   index = i;\n                break;\n            }\n        }\n    }\n    if(count\
    \ === 2){\n        return word[index];\n    }\n    return \"\";\n}\n", "  if(word.match(/^[^aeiou]*[aeiou]/i)){\n\
    \    let m = word.match(/^[^aeiou]*[aeiou]/i)[0]\n    return m[m.length-1]\n \
    \ }\n  return ''\n}\n", "\t// TODO:\n\t//  return the vowel that is closest to\
    \ the end of the word from the right side\n}\n", "    const vowels = \"AEIOUaeiou\"\
    ;\n    for (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.includes(word[i])\
    \ &&\n            i > 0 && !vowels.includes(word[i - 1])) {\n            return\
    \ word[i];\n        }\n    }\n    return \"\";\n}", "    var str = word.split(\"\
    \");\n    var vowels = ['a','e','i','o','u'];\n    var index = 0;\n    var results\
    \ = [];\n    var letters = [];\n    var new_letter = \"\";\n    var vow = [];\n\
    \    var final = [];\n    var concat = [];\n    var empty = [];\n    var empty2\
    \ = [];\n    var empty3 = [];\n    var my_letter = \"\";\n    var my_vow = \"\"\
    ;\n    var my_final = \"\";\n    var my_concat = \"\";\n    var my_empt = \"\"\
    ;\n    var my_empt2 = \"\";\n    var my_empt3 = \"\";\n    for(var i = 0; i <\
    \ str.length; i++){\n        if(str[i] == \"a\" || str[i] == \"e\" || str[i] ==\
    \ \"i\" || str[i] == \"o\" || str[i] == \"u\"){\n            new_letter = str[i];\n\
    \            letters.push(new_letter);\n        }\n    }\n    for(var i = 0; i\
    \ < letters.length; i++){\n        vow.push(letters[i]);\n    }\n    for(var i\
    \ = 0; i < vow.length; i++){\n        final.push(vow[i]);\n    }\n    for(var\
    \ i = 0; i < final.length; i++){\n        concat.push(final[i]);\n    }\n    for(var\
    \ i = 0; i < concat.length; i++){\n        empty.push(concat[i]);\n    }\n   \
    \ for(var i = 0; i < empty.length; i++){\n        empty2.push(empty[i]);\n   \
    \ }\n    for(var i = 0; i < empty2.length; i++){\n        empty3.push(empty2[i]);\n\
    \    }\n    for(var i = 0; i < empty3.length; i++){\n        my_letter = empty3[i];\n\
    \        my_vow = empty3[i];\n        my_final = empty3[i];\n        my_concat\
    \ = empty3[", "\tfor(var i = word.length-1; i >= 0; i--){\n\t\tif( word[i] ==\
    \ \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i] == \"o\" || word[i]\
    \ == \"u\" || word[i] == \"A\" || word[i] == \"E\" || word[i] == \"I\" || word[i]\
    \ == \"O\" || word[i] == \"U\"){\n\t\t\tif( word[i-1] != \"a\" && word[i-1] !=\
    \ \"e\" && word[i-1] != \"i\" && word[i-1] != \"o\" && word[i-1] != \"u\" && word[i-1]\
    \ != \"A\" && word[i-1] != \"E\" && word[i-1] != \"I\" && word[i-1] != \"O\" &&\
    \ word[i-1] != \"U\"){\n\t\t\t\tif(word[i+1] != \"a\" && word[i+1] != \"e\" &&\
    \ word[i+1] != \"i\" && word[i+1] != \"o\" && word[i+1] != \"u\" && word[i+1]\
    \ != \"A\" && word[i+1] != \"E\" && word[i+1] != \"I\" && word[i+1] != \"O\" &&\
    \ word[i+1] != \"U\"){\n\t\t\t\t\treturn word[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn \"\";\n}", "    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    let reversedWord = word.split(\"\").reverse().join(\"\");\n    let flag\
    \ = false;\n    for (let i = 0; i < reversedWord.length; i++) {\n        if (vowels.includes(reversedWord[i]))\
    \ {\n            flag = true;\n            if (!vowels.includes(reversedWord[i\
    \ + 1])) {\n                return reversedWord[i];\n            }\n        }\
    \ else if (flag) {\n            return \"\";\n        }\n    }\n    return \"\"\
    ;\n}", "\tlet vowel = ['a','e','i','o','u'];\n\tlet consonant = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\n\
    \tlet i = 0;\n\tlet length = word.length;\n\tfor(i=length-1;i>=0;i--){\n\t\tif(vowel.indexOf(word[i])>=0){\n\
    \t\t\tif(i == length-1){\n\t\t\t\treturn word[i];\n\t\t\t}else if(consonant.indexOf(word[i+1])>=0){\n\
    \t\t\t\treturn word[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\";\n}\n", "    var vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    var vowels_cap = ['A', 'E', 'I', 'O', 'U'];\n\
    \    var length = word.length;\n    for (var i = length - 1; i >= 0; i--) {\n\
    \        if (vowels.indexOf(word[i]) >= 0) {\n            if (i == length - 1\
    \ || i == 0) {\n                return \"\";\n            }\n            if (vowels.indexOf(word[i\
    \ - 1]) >= 0) {\n                continue;\n            }\n            if (vowels.indexOf(word[i\
    \ + 1]) >= 0) {\n                continue;\n            }\n            return\
    \ word[i];\n        }\n        if (vowels_cap.indexOf(word[i]) >= 0) {\n     \
    \       if (i == length - 1 || i == 0) {\n                return \"\";\n     \
    \       }\n            if (vowels_cap.indexOf(word[i - 1]) >= 0) {\n         \
    \       continue;\n            }\n            if (vowels_cap.indexOf(word[i +\
    \ 1]) >= 0) {\n                continue;\n            }\n            return word[i];\n\
    \        }\n    }\n    return \"\";\n}\n", "  let vowel_list = ['a', 'e', 'i',\
    \ 'o', 'u'];\n  let word_split = word.split('');\n  let last_index = word_split.length\
    \ - 1;\n  let vowel_index = -1;\n  for (let i = last_index; i >= 0; i--) {\n \
    \   if (vowel_list.includes(word_split[i])) {\n      vowel_index = i;\n      break;\n\
    \    }\n  }\n  if (vowel_index <= 0 || vowel_index === last_index) {\n    return\
    \ '';\n  }\n  let char_before = word_split[vowel_index - 1];\n  let char_after\
    \ = word_split[vowel_index + 1];\n  if (vowel_list.includes(char_before) || vowel_list.includes(char_after))\
    \ {\n    return '';\n  }\n  return word_split[vowel_index];\n}\n", "  let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let consonants = [\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  let result = \"\";\n\
    \  let left = -1;\n  let right = -1;\n  for (let i = word.length - 1; i >= 0;\
    \ i--) {\n    if (consonants.includes(word[i])) {\n      left = i;\n      for\
    \ (let j = left - 1; j >= 0; j--) {\n        if (consonants.includes(word[j]))\
    \ {\n          left = j;\n        } else {\n          break;\n        }\n    \
    \  }\n      break;\n    }\n  }\n  for (let i = left + 1; i < word.length; i++)\
    \ {\n    if (vowels.includes(word[i])) {\n      right = i;\n      break;\n   \
    \ }\n  }\n  if (left !== -1 && right !== -1) {\n    result = word[right];\n  }\n\
    \  return result;\n}\n", "    let vowels = \"AEIOUaeiou\";\n    let index = 0;\n\
    \    let closest_vowel = \"\";\n    let cons_count = 0;\n    for(let i = word.length\
    \ - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) !== -1){\n          \
    \  index = i;\n            break;\n        }\n    }\n    for(let i = index - 1;\
    \ i >= 0; i--){\n        if(vowels.indexOf(word[i]) === -1){\n            cons_count++;\n\
    \        }\n        else{\n            cons_count = 0;\n        }\n        if(cons_count\
    \ === 2){\n            closest_vowel = word[index];\n            break;\n    \
    \    }\n    }\n    return closest_vowel;\n}", "    let vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n    let i = word.length - 1;\n    let result = [];\n\
    \    if (word.length === 1) {\n        return \"\"\n    } else {\n        while\
    \ (i >= 0) {\n            if (vowels.includes(word[i])) {\n                if\
    \ (i > 0 && i < word.length - 1) {\n                    if (!vowels.includes(word[i-1])\
    \ && !vowels.includes(word[i+1])) {\n                        result.push(word[i]);\n\
    \                    }\n                }\n            }\n            i--;\n \
    \       }\n        if (result.length === 0) {\n            return \"\"\n     \
    \   } else {\n            return result[0];\n        }\n    }\n}", "   var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n   var wordArray = word.split(\"\");\n\
    \   var answer = [];\n   var temp = [];\n   for(var i = 0; i < wordArray.length;\
    \ i++){\n      if(vowels.indexOf(wordArray[i]) !== -1 && vowels.indexOf(wordArray[i-1])\
    \ === -1 \n        && vowels.indexOf(wordArray[i+1]) === -1){\n        answer.push(wordArray[i]);\n\
    \      }\n   }\n   if(answer.length === 0){\n      return \"\";\n   }\n   else{\n\
    \     for(var i = 0; i < answer.length; i++){\n        if(answer[i] === wordArray[wordArray.length-1]){\n\
    \           return answer[i];\n        }\n     }\n     return answer[0];\n   }\n\
    }", "    var vowels = \"aeiouAEIOU\";\n    for (var i = word.length - 1; i >=\
    \ 0; i--){\n        if (vowels.indexOf(word[i]) >= 0){\n            return word[i];\n\
    \        }\n    }\n    return \"\";\n}", "    var i = word.length - 1;\n    var\
    \ j = word.length - 1;\n    while(i >= 0){\n        if(!isVowel(word[i])) {\n\
    \            break;\n        }\n        i--;\n    }\n    while(j >= 0){\n    \
    \    if(isVowel(word[j])) {\n            break;\n        }\n        j--;\n   \
    \ }\n    return j > i ? word[j] : \"\";\n}\n", "    let string = \"aeiou\";\n\
    \    word = word.split(\"\");\n    for(let i = word.length -1; i >= 0; i--){\n\
    \        if(string.indexOf(word[i]) === -1){\n            for(let j = i; j >=\
    \ 0; j--){\n                if(string.indexOf(word[j]) != -1){\n             \
    \       return word[j];\n                }\n            }\n        }\n    }\n\
    \    return \"\";\n}\n", "  word = word.split(\"\");\n  var vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n  for (var i = word.length - 1; i >= 0; i--) {\n \
    \   if (vowels.indexOf(word[i]) > -1) {\n      if (vowels.indexOf(word[i-1]) ===\
    \ -1 && vowels.indexOf(word[i+1]) === -1) {\n        return word[i];\n      }\n\
    \    }\n  }\n  return \"\";\n}\n", "    var vowels = ['a', 'e', 'i', 'o', 'u',\
    \ 'A', 'E', 'I', 'O', 'U'];\n    var wordLen = word.length;\n    var vowel = '';\n\
    \    var vowC = 0;\n    var conC = 0;\n    var cons = '';\n    var consArray =\
    \ '';\n    var splitCon = [];\n    var newWord = '';\n    // 1st loop to find\
    \ vowels and count them\n    for (var i = 0; i < wordLen; i++) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            vowC++;\n            vowel += word[i];\n        }\n \
    \   }\n    // 2nd loop to find consonants and count them\n    for (var i = 0;\
    \ i < wordLen; i++) {\n        if (vowels.indexOf(word[i]) === -1) {\n       \
    \     conC++;\n            cons += word[i];\n        }\n    }\n    // console.log('Number\
    \ of consonants is ' + conC);\n    // console.log('Number of vowels is ' + vowC);\n\
    \    // console.log('Vowels in the word are ' + vowel);\n    // console.log('Consonants\
    \ in the word are ' + cons);\n    if (conC > vowC || conC === vowC) {\n      \
    \  return '';\n    } else {\n        for (var i = wordLen - 1; i >= 0; i--) {\n\
    \            if (vowels.indexOf(word[i]) === -1) {\n                newWord +=\
    \ word[i];\n            } else {\n                break;\n            }\n    \
    \    }\n        // console.log('Reversed word is ' + newWord);\n        var revWord\
    \ = newWord.split('').reverse().join('');\n        // console.log('Reversed word\
    \ is ' + revWord);\n        splitCon = revWord.split('');\n        // console.log('Splitted\
    \ consonants are ' + splitCon);\n        var closestVowel = '';\n        var splitWord\
    \ = word.split('');\n        // 3rd loop to find", "\tvar vowels = ['a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\tvar word_array = word.split('');\n\
    \tvar last_vowel = '';\n\tword_array.forEach(function(letter){\n\t\tif(vowels.indexOf(letter)\
    \ != -1){\n\t\t\tlast_vowel = letter;\n\t\t}\n\t});\n\tif(last_vowel != ''){\n\
    \t\tvar position = word_array.lastIndexOf(last_vowel);\n\t\tif(position > 0 &&\
    \ position < word_array.length-1){\n\t\t\tif(vowels.indexOf(word_array[position-1])\
    \ == -1 && vowels.indexOf(word_array[position+1]) == -1){\n\t\t\t\treturn last_vowel;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn '';\n}\n", "\tvar vowels = \"aeiouAEIOU\";\n\tvar\
    \ index = 0;\n\tfor(var i = word.length - 1; i > 0; i--){\n\t\tif(vowels.indexOf(word[i])\
    \ != -1 && vowels.indexOf(word[i-1]) == -1 && vowels.indexOf(word[i+1]) == -1){\n\
    \t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(index === 0){\n\t\treturn \"\"\
    ;\n\t}\n\treturn word[index];\n}\n", "    vowels = ['a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U'];\n    for (var i = word.length - 1; i >= 0; i--) {\n   \
    \     if (vowels.indexOf(word[i]) > -1) {\n            if (i - 1 >= 0 && vowels.indexOf(word[i\
    \ - 1]) > -1) {\n                continue;\n            }\n            if (i +\
    \ 1 < word.length && vowels.indexOf(word[i + 1]) > -1) {\n                continue;\n\
    \            }\n            return word[i];\n        }\n    }\n    return '';\n\
    }\n", "    if(!word){\n        return \"\";\n    }\n    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n    let check = false;\n    let offset = 0;\n    let\
    \ result = \"\";\n    let start = -1;\n    for(let i = word.length - 1; i >= 0;\
    \ i--){\n        for(let j = 0; j < vowels.length; j++){\n            if(word[i]\
    \ === vowels[j]){\n                if(check){\n                    start = i;\n\
    \                    break;\n                }else{\n                    check\
    \ = true;\n                    result = word[i];\n                    offset =\
    \ 1;\n                }\n            }\n        }\n        if(check && start >\
    \ -1){\n            break;\n        }\n    }\n    if(start < 0){\n        return\
    \ \"\";\n    }\n    for(let i = start - 1; i >= 0; i--){\n        for(let j =\
    \ 0; j < vowels.length; j++){\n            if(word[i] === vowels[j]){\n      \
    \          if(offset > i - start){\n                    result = word[i];\n  \
    \                  offset = i - start;\n                }\n            }\n   \
    \     }\n    }\n    return result;\n}\n", "\tvar vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n\tvar get_index = function(vowel){\n\t\tvar c = -1;\n\t\tfor(var\
    \ i = 0; i < word.length; i++){\n\t\t\tif(word[i] == vowel) {\n\t\t\t\tc = i;\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn c;\n\t}\n\tvar indices = [];\n\tfor(var\
    \ i = 0; i < vowels.length; i++){\n\t\tindices.push(get_index(vowels[i]));\n\t\
    }\n\tvar result = null;\n\tvar closest = word.length;\n\tfor(var i = 0; i < indices.length;\
    \ i++){\n\t\tif(indices[i] != -1 && indices[i] < closest){\n\t\t\tclosest = indices[i];\n\
    \t\t\tresult = vowels[i];\n\t\t}\n\t}\n\treturn result;\n}\n", "\tvar vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar reversedWord = word.split(\"\").reverse().join(\"\
    \");\n\tvar i;\n\tfor (i = 0; i < reversedWord.length; i++){\n\t\tif (vowels.indexOf(reversedWord[i])\
    \ > -1){\n\t\t\tif (i > 0 && i < reversedWord.length - 1){\n\t\t\t\tif (vowels.indexOf(reversedWord[i-1])\
    \ < 0 && vowels.indexOf(reversedWord[i+1]) < 0){\n\t\t\t\t\treturn reversedWord[i];\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\";\n}\n", "    const vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    word = word.split(\"\").reverse();\n  \
    \  for (let i = 0; i < word.length; i++) {\n        if (vowels.includes(word[i])\
    \ && i > 0 && !vowels.includes(word[i - 1])) {\n            return word[i];\n\
    \        }\n    }\n    return \"\";\n}\n", "    let vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    let test = [];\n    for (let i = 0; i < word.length; i++) {\n   \
    \     if (vowels.includes(word[i])) {\n            test.push(word[i]);\n     \
    \   }\n    }\n    if (test.length === 0) {\n        return '';\n    } else {\n\
    \        let end = test.length - 1;\n        return test[end];\n    }\n}", " \
    \   var vowels = \"AEIOUaeiou\";\n    var position = [];\n    for (var i = 0;\
    \ i < word.length; i++){\n        if (vowels.indexOf(word[i]) != -1){\n      \
    \      position.push(i);\n        }\n    }\n    if (position.length == 0){\n \
    \       return \"\";\n    }\n    var result = word[position[position.length -\
    \ 1]];\n    for (var i = position.length - 1; i >= 0; i--){\n        if (position[i]\
    \ + 1 < word.length && vowels.indexOf(word[position[i] + 1]) == -1){\n       \
    \     result = word[position[i]];\n            break;\n        }\n    }\n    return\
    \ result;\n}\n", "    vowels = {\n        \"a\": true,\n        \"e\": true,\n\
    \        \"i\": true,\n        \"o\": true,\n        \"u\": true,\n        \"\
    A\": true,\n        \"E\": true,\n        \"I\": true,\n        \"O\": true,\n\
    \        \"U\": true\n    }\n    console.log(word);\n    let l = word.length;\n\
    \    for(let i = l - 1; i >= 0; i--){\n        if(vowels[word[i]]){\n        \
    \    if(i != l - 1){\n                if(!vowels[word[i + 1]]){\n            \
    \        return word[i];\n                }\n            }else{\n            \
    \    return word[i];\n            }\n        }\n    }\n    return \"\";\n}\n",
  "\tvar vowels = ['a', 'e', 'i', 'o', 'u'];\n\tvar ind = -1;\n\tvar list = [];\n\t\
    for (var i = word.length - 1; i >= 0; i--) {\n\t\tvar char = word[i];\n\t\tif\
    \ (vowels.indexOf(char) > -1) {\n\t\t\tlist.push(char);\n\t\t}\n\t\telse {\n\t\
    \t\tif (list.length > 0) {\n\t\t\t\tif (list.length === 1) {\n\t\t\t\t\tind =\
    \ i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tind = i + 1;\n\t\t\
    \t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (ind > -1) {\n\t\treturn word[ind];\n\
    \t}\n\telse {\n\t\treturn \"\";\n\t}\n}\n", "    \n    \n    var vowels = ['a','e','i','o','u'];\n\
    \    var vowel = '';\n    var consonants = 0;\n    var between_consonants = 0;\n\
    \    var initial_consonants = 0;\n    var word_length = word.length;\n    for(var\
    \ i = word_length-1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) == -1){\n\
    \            consonants++;\n            if(vowel.length == 0){\n             \
    \   initial_consonants++;\n            }\n        }\n        else{\n         \
    \   vowel = word[i];\n            between_consonants = consonants - initial_consonants;\n\
    \            break;\n        }\n    }\n    if(between_consonants >= 2){\n    \
    \    return vowel;\n    }\n    else{\n        return '';\n    }\n}\n", "  //your\
    \ code here!\n}", "  var result = '';\n  var vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \  var consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n  var vowel_is_found = false;\n\
    \  var vowel_found = '';\n  var first_letter = word[0];\n  var last_letter = word[word.length\
    \ - 1];\n  if (vowels.indexOf(first_letter) === -1 && vowels.indexOf(last_letter)\
    \ === -1) {\n    for (var i = word.length - 1; i >= 0; i--) {\n      if (vowels.indexOf(word[i])\
    \ > -1) {\n        vowel_found = word[i];\n        vowel_is_found = true;\n  \
    \      break;\n      }\n    }\n    if (vowel_is_found) {\n      for (var k = word.length\
    \ - 1; k >= 0; k--) {\n        if (vowels.indexOf(word[k]) === -1 && consonants.indexOf(word[k])\
    \ > -1) {\n          if (vowel_found === word[k - 1]) {\n            result =\
    \ vowel_found;\n            break;\n          }\n        }\n      }\n    }\n \
    \ }\n  return result;\n}", "\tif(word==\"\" || word.length == 1) return \"\";\n\
    \tvar result = \"\";\n\tvar minDistance = 999999999;\n\tvar vowels = ['a','e','i','o','u','A','E','I','O','U'];\n\
    \tvar consonents = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z','B','C','D','F','G','H','J','K','L','M','N','P','Q','R','S','T','V','W','X','Y','Z'];\n\
    \tfor(var i = 0; i < word.length; i++){\n\t\tfor(var j = 0; j < vowels.length;\
    \ j++){\n\t\t\tif(word[i] == vowels[j]){\n\t\t\t\tvar next = false;\n\t\t\t\t\
    for(var k = i+1; k < word.length; k++){\n\t\t\t\t\tfor(var l = 0; l < consonents.length;\
    \ l++){\n\t\t\t\t\t\tif(word[k] == consonents[l]){\n\t\t\t\t\t\t\tif(k-i < minDistance){\n\
    \t\t\t\t\t\t\t\tminDistance = k-i;\n\t\t\t\t\t\t\t\tresult = word[i];\n\t\t\t\t\
    \t\t\t}\n\t\t\t\t\t\t\tnext = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\
    \t\t\t}\n\t\t\t\t\tif(next) break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "    //check the word has vowel\n    var vowels = [\"a\", \"e\", \"i\",\
    \ \"o\", \"u\"];\n    var letters = word.split(\"\");\n    //check the word ends\
    \ with consonant\n    var ends_with_consonant = true;\n    for (i = 0; i < vowels.length;\
    \ i++) {\n        if (letters[letters.length - 1] == vowels[i]) {\n          \
    \  ends_with_consonant = false;\n        }\n    }\n    if (ends_with_consonant\
    \ == false) {\n        return \"\";\n    }\n    //check the word starts with consonant\n\
    \    var starts_with_consonant = true;\n    for (i = 0; i < vowels.length; i++)\
    \ {\n        if (letters[0] == vowels[i]) {\n            starts_with_consonant\
    \ = false;\n        }\n    }\n    if (starts_with_consonant == false) {\n    \
    \    for (i = 0; i < letters.length; i++) {\n            if (letters[i] == \"\
    a\" || letters[i] == \"e\" || letters[i] == \"i\" || letters[i] == \"o\" || letters[i]\
    \ == \"u\") {\n                return letters[i];\n            }\n        }\n\
    \    } else {\n        var closest_vowel = \"\";\n        var vowel_index = 0;\n\
    \        var consonant_index = 0;\n        for (i = 0; i < letters.length; i++)\
    \ {\n            if (letters[i] == \"a\" || letters[i] == \"e\" || letters[i]\
    \ == \"i\" || letters[i] == \"o\" || letters[i] == \"u\") {\n                vowel_index\
    \ = i;\n                for (j = vowel_index + 1; j < letters.length; j++) {\n\
    \                    if (letters[j] != \"a\" && letters[j] != \"e\" && letters[j]\
    \ != \"i\" && letters[j] != \"o\" && letters[j] != \"u\") {\n                \
    \        consonant_index = j;\n                        closest_vowel = letters[vowel_",
  "\t//return word.split('').map(v => VOWELS.indexOf(v.toLowerCase()) > -1 ? v : '').reverse().join('').trim().split('').reverse().join('');\n\
    \tconst getVowel = function(letter) {\n\t\tlet vowel = '';\n\t\tVOWELS.indexOf(letter.toLowerCase())\
    \ > -1 ? vowel = letter : vowel = '';\n\t\treturn vowel;\n\t}\n\tlet vowel = '';\n\
    \tfor (let i = word.length - 1; i >= 0; i--) {\n\t\tlet letter = word[i];\n\t\t\
    vowel = getVowel(letter);\n\t\tif (vowel !== '') break;\n\t}\n\treturn vowel;\n\
    }\n", "    let vowels = \"aeiou\";\n    let closest = \"\";\n    let i = word.length\
    \ - 1;\n    while(i > 0){\n        if(vowels.includes(word[i])){\n           \
    \ closest = word[i];\n            break;\n        }\n        i--;\n    }\n   \
    \ return closest;\n}", "  var last_c = -1, last_v = -1;\n  for (var i = word.length\
    \ - 1; i >= 0; i--) {\n    if (word[i].match(/[aeiou]/)) {\n      last_v = i;\n\
    \      if (last_c >= 0)\n        return word[last_v];\n    } else {\n      last_c\
    \ = i;\n      if (last_v >= 0)\n        return word[last_v];\n    }\n  }\n  return\
    \ \"\";\n}", "  var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  var res =\
    \ [];\n  for (var i = word.length - 1; i >= 0; i--) {\n    if (vowels.indexOf(word[i])\
    \ != -1) {\n      res.push(word[i]);\n    }\n    else {\n      return res.slice(-1)[0];\n\
    \    }\n  }\n  return res.slice(-1)[0];\n}\n", "    var vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n    var vowels2 = ['A', 'E', 'I', 'O', 'U'];\n    var array = word.split('');\n\
    \    for (var i = array.length-1; i >= 0; i--) {\n        if (array[i] === vowels\
    \ || array[i] === vowels2) {\n            return array[i];\n        }\n    }\n\
    }\n\n", "  let vowels = 'aeiouAEIOU';\n  let result = '';\n  let vowel_pos = -1;\n\
    \  let found = false;\n  // iterate the given word, start from rightmost\n  for\
    \ (let i = word.length - 1; i >= 0; i--) {\n    // check if the char is vowel\n\
    \    if (vowels.indexOf(word[i]) > -1) {\n      // set the first vowel's position\n\
    \      if (vowel_pos === -1) {\n        vowel_pos = i;\n      }\n      // check\
    \ the previous char is consonant\n      if (i > 0 && vowels.indexOf(word[i - 1])\
    \ === -1) {\n        result = word[i];\n        found = true;\n        break;\n\
    \      }\n    }\n  }\n  // if we did not find any vowel and there is one in the\
    \ word, return it\n  if (!found && vowel_pos > -1) {\n    result = word[vowel_pos];\n\
    \  }\n  return result;\n}\n", "\tvar vowel = ['a','e','i','o','u','A','E','I','O','U'];\n\
    \tvar check = '';\n\tfor(var i = word.length - 1; i >= 0; i--){\n\t\tfor(var j\
    \ = 0; j < vowel.length; j++){\n\t\t\tif(vowel[j] == word[i]){\n\t\t\t\tcheck\
    \ = word[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(check != ''){\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn check;\n}", "    var vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    var cons = [];\n    var result = '';\n    var i = 0;\n    while(i < word.length){\n\
    \        if (vowels.indexOf(word[i]) === -1){\n            cons.push(word[i]);\n\
    \        } else {\n            if (cons.length === 0){\n                i++;\n\
    \                continue;\n            }\n            var con = cons.pop();\n\
    \            if (cons.length === 0){\n                break;\n            }\n\
    \        }\n        i++;\n    }\n    if (cons.length > 0){\n        result = word[i];\n\
    \    }\n    return result;\n}\n", "\tword = word.split(\"\");\n\tvar vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar index = 0;\n\tvar i = word.length\
    \ - 1;\n\tvar found = false;\n\twhile (i >= 0 && !found){\n\t\tif (vowels.indexOf(word[i])\
    \ == -1){\n\t\t\ti--;\n\t\t} else {\n\t\t\tindex = i;\n\t\t\tfound = true;\n\t\
    \t}\n\t}\n\tif (found){\n\t\treturn word[index];\n\t} else {\n\t\treturn \"\"\
    ;\n\t}\n}\n", "    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var result = '';\n\
    \    var last_vowel_index = -1;\n    for (var i = word.length - 1; i >= 0; i--)\
    \ {\n        var letter = word[i];\n        if (vowels.indexOf(letter) >= 0) {\n\
    \            last_vowel_index = i;\n            break;\n        }\n    }\n   \
    \ if (last_vowel_index > 0) {\n        var first_vowel_index = last_vowel_index\
    \ - 1;\n        for (var i = first_vowel_index; i >= 0; i--) {\n            var\
    \ letter = word[i];\n            if (vowels.indexOf(letter) < 0) {\n         \
    \       result = word[last_vowel_index];\n                break;\n           \
    \ }\n        }\n    }\n    return result;\n}\n", "\tlet vowels = \"aeiouAEIOU\"\
    \n\tlet letter = ''\n\tfor (let i = 0; i < word.length; i++){\n\t\tif (vowels.includes(word[i])){\n\
    \t\t\tif (word[i-1] && word[i+1]){\n\t\t\t\tif (!vowels.includes(word[i-1]) &&\
    \ !vowels.includes(word[i+1])){\n\t\t\t\t\tletter = word[i]\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn letter\n}\n", "\tvar vowels = [\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n\tvar str = word.split(\"\");\n\tvar cons = [];\n\tvar vow = [];\n\
    \tfor(var i = 0; i < str.length; i++){\n\t\tif(vowels.indexOf(str[i]) == -1){\n\
    \t\t\tcons.push(str[i]);\n\t\t}else{\n\t\t\tvow.push(str[i]);\n\t\t}\n\t}\n\t\
    if(cons.length <= 1){\n\t\treturn \"\";\n\t}\n\tfor(var i = cons.length - 1; i\
    \ >= 0; i--){\n\t\tif(vowels.indexOf(cons[i]) !== -1){\n\t\t\tvow.push(cons[i]);\n\
    \t\t}\n\t}\n\tvar diff = [];\n\tvar index = 0;\n\tfor(var i = 0; i < vow.length;\
    \ i++){\n\t\tdiff.push(Math.abs(word.indexOf(vow[i]) - cons.length));\n\t}\n\t\
    for(var i = 0; i < diff.length; i++){\n\t\tif(diff[i] == Math.min.apply(null,\
    \ diff)){\n\t\t\tindex = i;\n\t\t}\n\t}\n\treturn vow[index];\n}\n", "    let\
    \ vowels = \"aeiou\";\n    let consonants = \"bcdfghjklmnpqrstvwxyz\";\n    //\
    \ let vowels_list = vowels.split(\"\");\n    // let new_list = [];\n    // console.log(vowels_list);\n\
    \    // for (const el of vowels_list) {\n    //     for (const ele of word) {\n\
    \    //         if (el === ele){\n    //             new_list.push(el);\n    //\
    \         }\n    //     }\n    // }\n    // console.log(new_list);\n    // for\
    \ (const el of new_list) {\n    //     for (const ele of word) {\n    //     \
    \    if (el === ele){\n    //             return el;\n    //         }\n    //\
    \     }\n    // }\n    // console.log(word);\n    let index_vowel = vowels.indexOf(word[word.length-1]);\n\
    \    let index_consonant = consonants.indexOf(word[word.length-2]);\n    // console.log(index_vowel);\n\
    \    // console.log(index_consonant);\n    if (index_vowel !== -1 && index_consonant\
    \ !== -1){\n        return word[word.length-1];\n    }\n    else{\n        return\
    \ \"\";\n    }\n}", "\tvar vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar\
    \ consonants = [];\n\t\n\tvar word_array = word.split(\"\");\n\t\n\tvar array_length\
    \ = word_array.length;\n\t\n\tfor(var i = 0; i < word_array.length; i++){\n\t\t\
    \n\t\tvar count = 0;\n\t\t\n\t\tfor(var j = 0; j < vowels.length; j++){\n\t\t\t\
    \n\t\t\tif(word_array[i] === vowels[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\
    \t\n\t\tif(count === 0){\n\t\t\tconsonants.push(word_array[i]);\n\t\t}\n\t}\n\t\
    \n\tconsole.log(consonants);\n\t\n\tvar array_length = consonants.length;\n\t\n\
    \tvar index_array = [];\n\t\n\tvar count = 0;\n\t\n\tfor(var i = 0; i < word_array.length;\
    \ i++){\n\t\t\n\t\tif(word_array[i] === consonants[array_length - 1]){\n\t\t\t\
    index_array.push(i);\n\t\t\tcount++;\n\t\t}\n\t}\n\t\n\tconsole.log(index_array);\n\
    \t\n\tvar vowel_array = [];\n\t\n\tvar index = -1;\n\t\n\tfor(var i = 0; i < index_array.length;\
    \ i++){\n\t\t\n\t\tindex = index_array[i];\n\t\t\n\t\tfor(var j = index; j < word_array.length;\
    \ j++){\n\t\t\t\n\t\t\tfor(var k = 0; k < vowels.length; k++){\n\t\t\t\t\n\t\t\
    \t\tif(word_array[j] === vowels[k]){\n\t\t\t\t\tvowel_array.push(word_array[j]);\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tconsole.log(vowel_array);\n\t\n\tvar min\
    \ = 0;\n\t\n\t", "    var vowels = \"aeiouAEIOU\";\n    var consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    var found = false;\n    var result = \"\";\n    for(var i = word.length\
    \ - 1; i >= 0; i--){\n        for(var j = 0; j < vowels.length; j++){\n      \
    \      if(word[i] == vowels[j]){\n                found = true;\n            \
    \    result = word[i];\n                break;\n            }\n        }\n   \
    \     if(found){\n            break;\n        }\n    }\n    return result;\n}\n",
  "    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var closest_vowel =\
    \ \"\";\n    var cons_count = 0;\n    var start_vowel = 0;\n    for (var i = word.length\
    \ - 1; i >= 0; i--){\n        if(vowels.indexOf(word[i]) > -1){\n            start_vowel\
    \ = 1;\n            closest_vowel = word[i];\n            cons_count = 0;\n  \
    \      } else if (start_vowel){\n            cons_count += 1;\n        }\n   \
    \     if (cons_count === 2){\n            return closest_vowel;\n        }\n \
    \   }\n    return \"\";\n}", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    let consonants = \"\";\n    let first_consonant_index = -1;\n    let\
    \ second_consonant_index = -1;\n    let first_vowel_index = -1;\n    let second_vowel_index\
    \ = -1;\n    let second_vowel = \"\";\n    let first_vowel = \"\";\n    for (let\
    \ i = 0; i < word.length; i++){\n        if (!vowels.includes(word[i])){\n   \
    \         consonants += word[i];\n        }\n    }\n    console.log(consonants);\n\
    \    for (let i = 0; i < word.length; i++){\n        if (consonants.includes(word[i])){\n\
    \            if (first_consonant_index === -1){\n                first_consonant_index\
    \ = i;\n            }\n            else if (second_consonant_index === -1){\n\
    \                second_consonant_index = i;\n            }\n        }\n     \
    \   if (vowels.includes(word[i])){\n            if (first_vowel_index === -1){\n\
    \                first_vowel_index = i;\n            }\n            else if (second_vowel_index\
    \ === -1){\n                second_vowel_index = i;\n            }\n        }\n\
    \    }\n    first_vowel = word[first_vowel_index];\n    second_vowel = word[second_vowel_index];\n\
    \    if (first_vowel_index > second_consonant_index || second_vowel_index < first_consonant_index){\n\
    \        return \"\";\n    }\n    else if (second_vowel_index - first_consonant_index\
    \ < first_vowel_index - second_consonant_index){\n        return second_vowel;\n\
    \    }\n    else {\n        return first_vowel;\n    }\n}\n", "\tconst vowels\
    \ = 'aeiouAEIOU';\n\tlet pos = word.length - 1;\n\twhile (pos > 0) {\n\t\tif (vowels.indexOf(word[pos])\
    \ > -1) {\n\t\t\tlet next = word[pos - 1];\n\t\t\tif (vowels.indexOf(next) ===\
    \ -1) {\n\t\t\t\treturn word[pos];\n\t\t\t}\n\t\t}\n\t\tpos--;\n\t}\n\treturn\
    \ '';\n}\n", "\t// Write your code here\n}\n", "    var vowels = 'aeiouAEIOU'\n\
    \    var closest = ''\n    var closest_dist = 0\n    var index = word.length-1\n\
    \    while(index>=0){\n        if(vowels.indexOf(word[index])==-1){\n        \
    \    for(i=0;i<vowels.length;i++){\n                if(word.indexOf(vowels[i])!=-1\
    \ && word.indexOf(vowels[i])<index){\n                    if(word.indexOf(vowels[i])>closest_dist){\n\
    \                        closest_dist = word.indexOf(vowels[i])\n            \
    \            closest = vowels[i]\n                    }\n                }\n \
    \           }\n            if(closest!=''){\n                return closest\n\
    \            }\n            else{\n                return ''\n            }\n\
    \        }\n        index -= 1\n    }\n    return ''\n}", "    // your code here...\n\
    \    var vowel = 'aeiouAEIOU';\n    var index = -1;\n    var closest = -1;\n \
    \   var temp = -1;\n    for(var i = word.length - 1; i >= 0; i--){\n        if(vowel.indexOf(word[i])\
    \ != -1){\n            index = i;\n            closest = closest == -1 ? i : closest;\n\
    \            temp = temp == -1 ? i : temp;\n        }\n        else{\n       \
    \     if(index != -1 && temp != -1){\n                closest = Math.abs(index\
    \ - temp) < Math.abs(closest - temp) ? index : closest;\n                temp\
    \ = index;\n            }\n        }\n    }\n    return closest == -1 ? '' : word[closest];\n\
    }", "\tvar listOfVowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar result =\
    \ \"\";\n\tfor (var i = word.length - 1; i >= 0; i--) {\n\t\tif (listOfVowels.indexOf(word[i])\
    \ != -1) {\n\t\t\tif (listOfVowels.indexOf(word[i-1]) == -1 && listOfVowels.indexOf(word[i+1])\
    \ == -1) {\n\t\t\t\tresult = word[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return result;\n}\n", "  let vowel = \"aeiou\"\n  for(let i = word.length - 1;\
    \ i >= 0; i--){\n    let char = word[i]\n    let right = word[i + 1]\n    let\
    \ left = word[i - 1]\n    if(vowel.includes(char) && !vowel.includes(right) &&\
    \ !vowel.includes(left)){\n      return char\n    }\n  }\n  return \"\"\n}\n",
  "  var s = '';\n  for (var i = word.length - 1; i >= 0; i--) {\n    if (word[i]\
    \ == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u')\
    \ {\n      if (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i'\
    \ && word[i - 1] != 'o' && word[i - 1] != 'u') {\n        if (word[i + 1] != 'a'\
    \ && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i\
    \ + 1] != 'u') {\n          s = word[i];\n          break;\n        }\n      }\n\
    \    }\n  }\n  return s;\n}\n", "    let vowel = ['a','e','i','o','u','A','E','I','O','U'];\n\
    \    let result = '';\n    let preCheck = 0;\n    let preCheck2 = 0;\n    for(let\
    \ i = 0; i < word.length; i++){\n        if(vowel.indexOf(word[i]) != -1){\n \
    \           preCheck++;\n        }\n    }\n    if(preCheck == 0){\n        return\
    \ '';\n    }\n    for(let i = word.length - 1; i >= 0; i--){\n        if(vowel.indexOf(word[i])\
    \ != -1){\n            for(let j = i - 1; j >= 0; j--){\n                if(vowel.indexOf(word[j])\
    \ == -1){\n                    preCheck2++;\n                }\n            }\n\
    \            if(preCheck2 > 0){\n                result = word[i];\n         \
    \       break;\n            }\n        }\n    }\n    return result;\n}", "   \
    \ word = word.split(\"\");\n    var v = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n   \
    \ var c = [];\n    var p = [];\n    for(var i = 0; i < word.length; i++){\n  \
    \      if(v.indexOf(word[i]) > -1){\n            p.push(word[i]);\n        }else{\n\
    \            c.push(word[i]);\n        }\n    }\n    var r = \"\";\n    for(var\
    \ i = c.length-1; i >= 0; i--){\n        if(v.indexOf(c[i]) > -1){\n         \
    \   r = \"\";\n        }else{\n            r = p[p.length-1];\n            break;\n\
    \        }\n    }\n    return r;\n}\n", "    var vowel = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    var new_word = word.split(\"\");\n    var answer = \"\"\n\
    \    for (var i = new_word.length-1; i >=0; i--){\n        if (new_word[i] ==\
    \ vowel){\n            answer = new_word[i]\n        }\n    }\n    return answer\n\
    }\n\n", "    // your code goes here\n}", "  const vowels = \"aeiou\";\n  word\
    \ = word.split(\"\");\n  for (let i = word.length - 1; i >= 0; i--) {\n    if\
    \ (vowels.includes(word[i]) && vowels.includes(word[i + 1])) {\n      return word[i];\n\
    \    }\n  }\n  return \"\";\n}", "\tlet wordArr = word.split('');\n\tlet vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tlet retVal = \"\";\n\tlet vowelIndex\
    \ = -1;\n\tlet counter = wordArr.length - 1;\n\tfor(i = counter; i > 0; i--){\n\
    \t\tif(vowels.includes(wordArr[i]) && !vowels.includes(wordArr[i-1])){\n\t\t\t\
    retVal = wordArr[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn retVal;\n}", "    //\
    \ Write your code here\n}", "    var consonants = [\"B\", \"C\", \"D\", \"F\"\
    , \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\"\
    , \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n    var vowels = [\"A\", \"E\",\
    \ \"I\", \"O\", \"U\"];\n    var vowels_distance = [];\n    var consonants_distance\
    \ = [];\n    var end_of_word = word.length;\n    var empty_string = \"\";\n  \
    \  var i = 0;\n    var k = 0;\n    var l = 0;\n    var m = 0;\n    var n = 0;\n\
    \    var o = 0;\n    var p = 0;\n    var q = 0;\n    var r = 0;\n    var s = 0;\n\
    \    var t = 0;\n    var u = 0;\n    var v = 0;\n    var w = 0;\n    var x = 0;\n\
    \    var y = 0;\n    var z = 0;\n    for (i = 0; i < word.length; i++){\n    \
    \    if (consonants.indexOf(word[i]) >= 0){\n            consonants_distance.push(i);\n\
    \        }\n        if (vowels.indexOf(word[i]) >= 0){\n            vowels_distance.push(i);\n\
    \        }\n    }\n    if (vowels_distance.length == 0 || consonants_distance.length\
    \ < 2){\n        return empty_string;\n    }\n    for (k = 0; k < vowels_distance.length;\
    \ k++){\n        for (l = 0; l < consonants_distance.length; l++){\n         \
    \   if (vowels_distance[k] > consonants_distance[l]){\n                if (end_of_word\
    \ > vowels_distance[k]){\n                    end_of_word = vowels_distance[k];\n\
    \                }\n            }\n        }\n    }\n    for (m = 0; m < vowels_distance.length;\
    \ m++){\n        if (vowels_distance[m] == end_of_word", "    let vowels = \"\
    aeiouAEIOU\";\n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    for (let i = word.length-1; i > 0; i--){\n        if (consonants.includes(word[i])\
    \ && vowels.includes(word[i-1])){\n            return word[i-1];\n        }\n\
    \    }\n    return \"\";\n}\n\n", "    var vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    var result = '';\n    var startIndex = -1;\n    for (var i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) >= 0) {\n         \
    \   startIndex = i;\n            break;\n        }\n    }\n    for (var i = startIndex\
    \ - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) < 0) {\n          \
    \  for (var j = startIndex; j < word.length; j++) {\n                if (vowels.indexOf(word[j])\
    \ < 0) {\n                    result = word[startIndex];\n                   \
    \ break;\n                }\n            }\n            break;\n        }\n  \
    \  }\n    return result;\n}\n", "\tvar vowels = \"aeiou\";\n\tvar word = word.toLowerCase();\n\
    \tvar locationOfVowel = 0;\n\tvar lastVowelLocation = 0;\n\tfor(var i = word.length\
    \ - 1; i >= 0; i--){\n\t\tif(vowels.indexOf(word[i]) != -1){\n\t\t\tlocationOfVowel\
    \ = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(var i = locationOfVowel - 1; i >= 0; i--){\n\
    \t\tif(vowels.indexOf(word[i]) == -1){\n\t\t\tlastVowelLocation = i + 1;\n\t\t\
    \tbreak;\n\t\t}\n\t}\n\tvar closestVowel = \"\";\n\tfor(var i = lastVowelLocation;\
    \ i < locationOfVowel; i++){\n\t\tif(vowels.indexOf(word[i]) != -1){\n\t\t\tclosestVowel\
    \ = word[i];\n\t\t}\n\t}\n\tconsole.log(closestVowel);\n}\nget_closest_vowel(\"\
    yogurt\");\nget_closest_vowel(\"FULL\");\nget_closest_vowel(\"quick\");\nget_closest_vowel(\"\
    ab\");\n", "    var vowels = ['a', 'e', 'i', 'o', 'u'];\n    var consonants =\
    \ ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n    var arrWord = word.split('');\n    var length\
    \ = arrWord.length;\n    var vowel = '';\n    var i = length - 1;\n    var consonant\
    \ = false;\n    while (i >= 0){\n        var temp = arrWord[i];\n        if (consonants.indexOf(temp)\
    \ != -1 && vowel == ''){\n            consonant = true;\n        }\n        if\
    \ (vowels.indexOf(temp) != -1 && consonant == true){\n            vowel = temp;\n\
    \            break;\n        }\n        i--;\n    }\n    return vowel;\n}", " \
    \   const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    const arr = word.split(\"\
    \");\n    if (vowels.includes(arr[arr.length - 1])){\n        return \"\";\n \
    \   }\n    for (let i = arr.length - 1; i >= 0; i--){\n        if (vowels.includes(arr[i])){\n\
    \            if (i == 0){\n                return \"\";\n            } else if\
    \ (vowels.includes(arr[i - 1])){\n                continue;\n            } else\
    \ {\n                return arr[i];\n            }\n        }\n    }\n    return\
    \ \"\";\n}", "  var vowels = \"aeiouAEIOU\";\n  var afterVowel = false;\n  var\
    \ result = \"\";\n  for(var i = word.length - 1; i > 0; i--){\n    if(vowels.indexOf(word[i])\
    \ != -1){\n      afterVowel = true;\n    }\n    else if(afterVowel && vowels.indexOf(word[i\
    \ - 1]) != -1){\n      result = word[i - 1];\n      break;\n    }\n  }\n  return\
    \ result;\n}\n", "    for(var i = word.length -1; i > 0; i--){\n        if(word[i].match(/[aeiou]/)){\n\
    \            if(!word[i-1].match(/[aeiou]/)){\n                return word[i];\n\
    \            }\n        }\n    }\n    return \"\";\n}\n\n", "\tvar vowels = /[aeiou]/g;\n\
    \tvar s = word.length;\n\tvar vowel = '';\n\tfor(var i = word.length-1; i>0; i--){\n\
    \t\tif (word[i].match(vowels) && !word[i-1].match(vowels)){\n\t\t\tvowel = word[i];\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn vowel;\n}\n", "\tvar vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n\tvar vowelIndex = 0;\n\tvar lastVowelIndex = 0;\n\tvar firstConsonantIndex\
    \ = 0;\n\tvar closestVowel = '';\n\tvar wordLength = word.length;\n\tfor (var\
    \ i = 0; i < wordLength; i++) {\n\t\tvar currentLetter = word[i];\n\t\tif (vowels.indexOf(currentLetter)\
    \ !== -1) {\n\t\t\tvowelIndex = i;\n\t\t\tlastVowelIndex = vowelIndex;\n\t\t}\
    \ else {\n\t\t\tfirstConsonantIndex = i;\n\t\t\tif (firstConsonantIndex > lastVowelIndex)\
    \ {\n\t\t\t\tclosestVowel = word[lastVowelIndex];\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn closestVowel;\n}\n", "    var vowels = \"aeiouAEIOU\";\n  \
    \  var closest_vowel = \"\";\n    var cons_count = 0;\n    for (var i = word.length\
    \ - 1; i >= 0; i--){\n        var char = word[i];\n        if (vowels.indexOf(char)\
    \ != -1) {\n            if (cons_count >= 2) {\n                closest_vowel\
    \ = char;\n                break;\n            }\n            cons_count = 0;\n\
    \        } else {\n            cons_count += 1;\n        }\n    }\n    return\
    \ closest_vowel;\n}\n", "    var word = word.split(\"\");\n    for(var i = word.length\
    \ - 1; i >= 0; i--){\n        if(isVowel(word[i])){\n            if(isVowel(word[i-1])\
    \ || isVowel(word[i+1])){\n                continue;\n            }\n        \
    \    else{\n                return word[i];\n            }\n        }\n    }\n\
    \    return \"\";\n}\n", "    const vowels = {\n        'a': 1,\n        'e':\
    \ 1,\n        'i': 1,\n        'o': 1,\n        'u': 1,\n        'A': 1,\n   \
    \     'E': 1,\n        'I': 1,\n        'O': 1,\n        'U': 1\n    };\n    let\
    \ last_consonant = word.length - 1;\n    while (last_consonant >= 0 && vowels[word[last_consonant]]\
    \ === 1) {\n        last_consonant--;\n    }\n    let closest_vowel = -1;\n  \
    \  for (let i = last_consonant - 1; i >= 0; i--) {\n        if (vowels[word[i]]\
    \ === 1) {\n            closest_vowel = i;\n            break;\n        }\n  \
    \  }\n    return closest_vowel >= 0 ? word[closest_vowel] : '';\n}\n", "    let\
    \ vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let wordArr\
    \ = word.split('');\n    let vowelIndex = -1;\n    for (let i = wordArr.length-1;\
    \ i > 0; i--) {\n        let char = wordArr[i];\n        if (vowels.includes(char))\
    \ {\n            vowelIndex = i;\n            break;\n        }\n    }\n    if\
    \ (vowelIndex > 0) {\n        if (wordArr[vowelIndex-1] === ' ' || vowels.includes(wordArr[vowelIndex-1]))\
    \ {\n            return '';\n        }\n        return wordArr[vowelIndex];\n\
    \    }\n    return '';\n}\n", "\tvar vowels=['a','e','i','o','u','A','E','I','O','U'];\n\
    \tvar cons=['q','w','r','t','y','p','s','d','f','g','h','j','k','l','z','x','c','v','b','n','m','Q','W','R','T','Y','P','S','D','F','G','H','J','K','L','Z','X','C','V','B','N','M'];\n\
    \tvar arr=[];\n\tvar arr1=[];\n\tvar arr2=[];\n\tvar arr3=[];\n\tfor(var i=0;i<word.length;i++){\n\
    \t\tarr.push(word[i]);\n\t}\n\tfor(var j=0;j<arr.length;j++){\n\t\tfor(var k=0;k<vowels.length;k++){\n\
    \t\t\tif(arr[j]==vowels[k]){\n\t\t\t\tarr1.push(arr[j]);\n\t\t\t}\n\t\t}\n\t}\n\
    \tfor(var j=0;j<arr.length;j++){\n\t\tfor(var k=0;k<cons.length;k++){\n\t\t\t\
    if(arr[j]==cons[k]){\n\t\t\t\tarr2.push(arr[j]);\n\t\t\t}\n\t\t}\n\t}\n\tvar m=arr2.length-1;\n\
    \tfor(var j=arr1.length-1;j>=0;j--){\n\t\tfor(var k=m;k>=0;k--){\n\t\t\tif(arr1[j]==arr2[k]){\n\
    \t\t\t\tfor(var l=k;l>=0;l--){\n\t\t\t\t\tif(arr2[l]==arr2[k]){\n\t\t\t\t\t\t\
    arr3.push(arr2[l]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn arr3.join('');\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn '';\n}", "    var vowels = \"aeiou\";\n    var consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    var closest_vowel = \"\";\n    var vowel_index\
    \ = -1;\n    var length = word.length;\n    var index = length - 1;\n    while(index\
    \ > 0){\n        //look at the current index\n        var letter = word[index];\n\
    \        if(vowels.indexOf(letter) !== -1){\n            //current letter is a\
    \ vowel,\n            //check if the previous letter is a consonant\n        \
    \    var previous_letter = word[index - 1];\n            if(consonants.indexOf(previous_letter)\
    \ !== -1){\n                //we found a vowel that stands between two consonants\n\
    \                closest_vowel = letter;\n                vowel_index = index;\n\
    \                break;\n            }\n        }\n        index = index - 1;\n\
    \    }\n    return closest_vowel;\n}\n", "  var vowels = \"AEIOUaeiou\";\n  var\
    \ index = word.length-1;\n  while(index >= 0){\n    if(vowels.indexOf(word[index])\
    \ != -1){\n      if(index === 0){\n        return \"\";\n      }\n      if(vowels.indexOf(word[index-1])\
    \ === -1){\n        return word[index];\n      }\n    }\n    index--;\n  }\n \
    \ return \"\";\n}\n", "    //vowels are a,e,i,o,u,A,E,I,O,U\n    word = word.split(\"\
    \");\n    for(var i = word.length - 1; i > -1; i--){\n        //\n        if(word[i]\
    \ == \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i] == \"o\" || word[i]\
    \ == \"u\" || word[i] == \"A\" || word[i] == \"E\" || word[i] == \"I\" || word[i]\
    \ == \"O\" || word[i] == \"U\"){\n            if(word[i - 1] == \"a\" || word[i\
    \ - 1] == \"e\" || word[i - 1] == \"i\" || word[i - 1] == \"o\" || word[i - 1]\
    \ == \"u\" || word[i - 1] == \"A\" || word[i - 1] == \"E\" || word[i - 1] == \"\
    I\" || word[i - 1] == \"O\" || word[i - 1] == \"U\"){\n                i--;\n\
    \            }\n            else{\n                return word[i];\n         \
    \   }\n        }\n    }\n    return \"\";\n}", "    var consonants = \"BCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    for (var i = word.length-1; i > 0; i--){\n        if (consonants.indexOf(word[i])\
    \ != -1) {\n            if (consonants.indexOf(word[i-1]) == -1){\n          \
    \      return word[i-1];\n            }\n        }\n    }\n    return \"\";\n}",
  "    let vowel = \"\";\n    let distance = -1;\n    word = word.split(\"\");\n \
    \   for(let i = word.length - 1; i >= 0; i--){\n        if(word[i] === \"a\" ||\
    \ word[i] === \"e\" || word[i] === \"i\" || word[i] === \"o\" || word[i] === \"\
    u\"){\n            let v = word[i];\n            if(distance === -1 || distance\
    \ > word.length - i){\n                vowel = v;\n                distance =\
    \ word.length - i;\n            }\n        }\n    }\n    return vowel;\n}\n",
  "\t// This is the solution I came up with:\n\t// var vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n\t// var wordArr = word.split('');\n\t// var wordArrRev = wordArr.reverse();\n\
    \t// var closestVowel = '';\n\t// for (var i = 0; i < wordArrRev.length; i++)\
    \ {\n\t// \tif (vowels.indexOf(wordArrRev[i]) === -1) {\n\t// \t\tif (vowels.indexOf(wordArrRev[i\
    \ + 1]) === -1) {\n\t// \t\t\tcontinue;\n\t// \t\t} else {\n\t// \t\t\tclosestVowel\
    \ = wordArrRev[i + 1];\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// }\n\t//\
    \ return closestVowel;\n\n\t// This is the solution the instructor came up with:\n\
    \tvar vowels = 'aeiouAEIOU';\n\tvar idx = word.length - 1;\n\twhile (idx > 0)\
    \ {\n\t\tif (vowels.indexOf(word[idx]) !== -1) {\n\t\t\tif (vowels.indexOf(word[idx\
    \ - 1]) === -1) {\n\t\t\t\treturn word[idx];\n\t\t\t}\n\t\t}\n\t\tidx -= 1;\n\t\
    }\n\treturn '';\n}", "  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'];\n  let closestVowel;\n  let i = word.length - 1;\n  while (i >= 0)\
    \ {\n    if (vowels.includes(word[i])) {\n      if (i == word.length - 1) {\n\
    \        return '';\n      }\n      if (vowels.includes(word[i + 1])) {\n    \
    \    return '';\n      }\n      closestVowel = word[i];\n      break;\n    }\n\
    \    i--;\n  }\n  return closestVowel || '';\n}", "\tvar vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"];\n\tvar wordArray = word.split(\"\");\n\tvar closestVowel\
    \ = \"\";\n\tvar position = 0;\n\tvar distance = word.length;\n\tfor (var i =\
    \ 0; i < wordArray.length; i++) {\n\t\tif (vowels.indexOf(wordArray[i]) != -1)\
    \ {\n\t\t\tfor (var j = i; j < wordArray.length; j++) {\n\t\t\t\tif (vowels.indexOf(wordArray[j])\
    \ == -1) {\n\t\t\t\t\tif (j - i < distance) {\n\t\t\t\t\t\tdistance = j - i;\n\
    \t\t\t\t\t\tposition = i;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t}\n\tif (position != 0) {\n\t\tclosestVowel = wordArray[position];\n\t\
    }\n\treturn closestVowel;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
