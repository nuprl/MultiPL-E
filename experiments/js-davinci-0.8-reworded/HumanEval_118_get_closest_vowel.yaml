name: HumanEval_118_get_closest_vowel
language: js
prompt: "//You are given a word. Your task is to find the closest vowel that stands\
  \ between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel(word){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
  full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
  eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
  bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
  ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
  quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
  Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
completions: ["    var vowels = \"aeiouAEIOU\";\n    var pos = word.length - 1;\n\
    \    while (pos > 0) {\n        if (!is_vowel(word[pos])) {\n            // We\
    \ found a consonant\n            pos--;\n            if (!is_vowel(word[pos]))\
    \ {\n                // We found a consonant followed by a consonant\n       \
    \         pos++;\n                break;\n            }\n        }\n        pos--;\n\
    \    }\n    if (pos < word.length && pos >= 0 && is_vowel(word[pos])) {\n    \
    \    return word[pos];\n    } else {\n        return \"\";\n    }\n}\n", "   \
    \ word = word.split(\"\");\n    let vowels = [];\n    let consonants = [];\n \
    \   let closest_vowel = \"\";\n    for(let i = 0; i < word.length; i++){\n   \
    \     if(word[i] == \"a\" || word[i] == \"e\" || word[i] == \"i\" || word[i] ==\
    \ \"o\" || word[i] == \"u\"){\n            vowels.push(word[i]);\n        }\n\
    \        else{\n            consonants.push(word[i]);\n        }\n    }\n    if(consonants.length\
    \ == 0 || vowels.length == 0){\n        return \"\";\n    }\n    else{\n     \
    \   if(consonants.length > vowels.length){\n            closest_vowel = vowels[vowels.length\
    \ - 1];\n        }\n        else{\n            closest_vowel = vowels[consonants.length\
    \ - 1];\n        }\n    }\n    return closest_vowel;\n}", "    // use a for loop\
    \ and check for each character\n    for (var i = word.length - 1; i >= 0; i--)\
    \ {\n        var char = word[i];\n        if (is_consonant(char)) {\n        \
    \    for (var j = i - 1; j >= 0; j--) {\n                if (is_vowel(word[j]))\
    \ {\n                    return word[j];\n                }\n            }\n \
    \       }\n    }\n    return \"\";\n}", "\t// Your code goes here:\n}\n", "\t\
    word = word.toLowerCase()\n\tvowels = \"aeiou\"\n\tvar closest_vowel = \"\"\n\t\
    var distance = 10000\n\tfor (var i = 0; i < word.length; i++) {\n\t\tvar current_vowel\
    \ = word[i]\n\t\tvar current_distance = word.length - i\n\t\tif (vowels.indexOf(current_vowel)\
    \ != -1 && current_distance < distance){\n\t\t\tclosest_vowel = current_vowel\n\
    \t\t\tdistance = current_distance\n\t\t}\n\t}\n\treturn closest_vowel\n}\n", " \
    \ let counter = word.length - 1;\n  let consonant_1 = false;\n  let consonant_2\
    \ = false;\n  let closest_vowel = '';\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \  while (counter > 0){\n    if (!consonant_1){\n      if (vowels.indexOf(word[counter])\
    \ == -1){\n        consonant_1 = true;\n      }\n    } else if (!consonant_2){\n\
    \      if (vowels.indexOf(word[counter]) == -1){\n        consonant_2 = true;\n\
    \      } else {\n        closest_vowel = word[counter];\n        break;\n    \
    \  }\n    }\n    counter -= 1;\n  }\n  return closest_vowel;\n}\n", "    var vowel=[\"\
    a\",\"e\",\"i\",\"o\",\"u\"];\n    var word_split=word.split(\"\");\n    var word_length=word_split.length;\n\
    \    for(var i=word_length-1;i>0;i--){\n        if(vowel.indexOf(word_split[i])!=-1){\n\
    \            if(vowel.indexOf(word_split[i-1])==-1){\n                return word_split[i];\n\
    \            }\n        }\n    }\n    return \"\";\n}", "    var word = word.split(\"\
    \");\n    var last_vowel = '';\n    var closest_vowel = '';\n    var is_last_char_consonant\
    \ = true;\n    var vowel_is_found = false;\n    for(var i = word.length - 1; i\
    \ >= 0; i--){\n        var letter = word[i];\n        var is_vowel = letter.match(/[aeiou]/i);\n\
    \        var is_consonant = letter.match(/[bcdfghjklmnpqrstvwxz]/i);\n       \
    \ if(is_vowel){\n            last_vowel = letter;\n            if(is_last_char_consonant){\n\
    \                vowel_is_found = true;\n                closest_vowel = last_vowel;\n\
    \                break;\n            }\n        }\n        if(is_consonant){\n\
    \            is_last_char_consonant = true;\n        }else{\n            is_last_char_consonant\
    \ = false;\n        }\n    }\n    if(vowel_is_found){\n        return closest_vowel;\n\
    \    }else{\n        return \"\";\n    }\n}", "    \n    var vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"];\n    var closestVowel = \"\";\n    var closestVowelIndex\
    \ = -1;\n    var lastLetterIndex = word.length - 1;\n    var firstLetterIndex\
    \ = 0;\n    var isFirstLetter = false;\n    var isLastLetter = false;\n    var\
    \ isSecondLetter = false;\n    var isFirstVowel = false;\n    var isSecondVowel\
    \ = false;\n    var isFirstConsonant = false;\n    var isSecondConsonant = false;\n\
    \    var nextLetter = \"\";\n    var previousLetter = \"\";\n    var position\
    \ = 0;\n    var index = 0;\n    var isVowel = false;\n    var difference = 0;\n\
    \    var currentDifference = 0;\n    var currentIndex = 0;\n    var currentVowel\
    \ = \"\";\n    var currentClosestVowel = \"\";\n    var currentPosition = 0;\n\
    \    var wordLength = word.length;\n    var currentCount = 0;\n    var previousCount\
    \ = 0;\n    var count = 0;\n    var closestCount = 0;\n    var isClosestVowel\
    \ = false;\n    var isCurrentVowel = false;\n    var currentWord = \"\";\n   \
    \ var closestWord = \"\";\n    var isClosestWord = false;\n    var closestWordDistance\
    \ = 0;\n    var currentWordDistance = 0;\n    var currentWordVowelIndex = 0;\n\
    \    var closestWordVowelIndex = 0;\n    var vowelIndex = 0;\n    var positionOfVowel\
    \ = 0;\n    var isCurrentClosestVowel = false;\n    var previousVowel = \"\";\n\
    \    var previousClosestVowel = \"\";\n    var currentVowelIndex = 0;\n    var\
    \ previousVowelIndex = 0;\n    var currentClosestVowelIndex = 0;\n    var previousClosestVowelIndex\
    \ = 0;\n    var closestVowelIndex = 0;\n    var countOfVowels = 0;\n    var minimumDistance\
    \ = 0;\n    var currentDistance = 0;", "    var VOWELS = \"aeiou\";\n    var i\
    \ = word.length - 1;\n    while (i >= 0) {\n        if (VOWELS.indexOf(word[i])\
    \ == -1)\n            i--;\n        else if (i == 0)\n            return \"\"\
    ;\n        else if (VOWELS.indexOf(word[i-1]) == -1)\n            return word[i];\n\
    \        else\n            i--;\n    }\n    return \"\";\n}\n", "    var arr =\
    \ word.split(\"\");\n    var count = 0;\n    var result = \"\";\n    for(var i\
    \ = word.length-1; i >= 0; i--){\n        if(arr[i] === \"a\" || arr[i] === \"\
    e\" || arr[i] === \"i\" || arr[i] === \"o\" || arr[i] === \"u\"){\n          \
    \  count++;\n            if(count === 2){\n                result = arr[i];\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\n", "    var vowel = ['a','e','i','o','u'];\n    for(var i = word.length - 1;\
    \ i >= 0; i--){\n      if(vowel.indexOf(word[i]) !== -1){\n        for(var j =\
    \ i - 1; j >= 0; j--){\n          if(vowel.indexOf(word[j]) === -1){\n       \
    \     return word[i];\n          }\n        }\n      }\n    }\n    return '';\n\
    }\n", "    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    var nearest_vowel;\n\
    \    var first_vowel_index = word.length;\n    for (var i = 0; i < vowels.length;\
    \ i++){\n        var vowel_index = word.indexOf(vowels[i]);\n        if (vowel_index\
    \ > -1 && vowel_index < first_vowel_index && vowel_index > 0 && word.indexOf(vowels[i],\
    \ vowel_index + 1) == -1){\n            nearest_vowel = vowels[i];\n         \
    \   first_vowel_index = vowel_index;\n        }\n    }\n    return nearest_vowel\
    \ || \"\";\n}\n", "    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U'];\n    let i = word.length - 1;\n    let vowel = \"\";\n    let foundVowel\
    \ = false;\n    let firstLetterIsAVowel = false;\n    let lastLetterIsAVowel =\
    \ false;\n    let count = 0;\n    let output = '';\n    for (let j = 0; j < word.length;\
    \ j++) {\n        if (vowels.includes(word[j])) {\n            firstLetterIsAVowel\
    \ = true;\n        }\n    }\n    for (let i = word.length - 1; i >= 0; i--) {\n\
    \        if (vowels.includes(word[i])) {\n            lastLetterIsAVowel = true;\n\
    \        }\n    }\n    if (firstLetterIsAVowel === true && lastLetterIsAVowel\
    \ === true) {\n        while (i >= 0) {\n            if (vowels.includes(word[i]))\
    \ {\n                vowel = word[i];\n                foundVowel = true;\n  \
    \              count++;\n            }\n            if (foundVowel === true &&\
    \ !vowels.includes(word[i]) && count === 1) {\n                output = vowel;\n\
    \                break;\n            }\n            i--;\n        }\n    }\n \
    \   return output;\n}\n\n", "    if(!word) return '';\n    let vowel = ['a','e','i','o','u','A','E','I','O','U'];\n\
    \    let found = -1;\n    for(let i = word.length-1; i >= 0; i--){\n        if(vowel.indexOf(word[i])\
    \ >= 0){\n            found = i;\n            break;\n        }\n    }\n    if(found\
    \ == -1) return '';\n    if(found == 0) return '';\n    if(found == word.length-1)\
    \ return '';\n    if(vowel.indexOf(word[found-1]) >= 0) return '';\n    if(vowel.indexOf(word[found+1])\
    \ >= 0) return '';\n    return word[found];\n}\n", "    let vowels = 'AEIOUaeiou'\n\
    \    let closest = ''\n    for (let i = word.length-1; i >= 0; i--){\n       \
    \ if (vowels.includes(word[i])){\n            closest = word[i]\n            break\n\
    \        }\n    }\n    return closest\n}", "    if(!word) return null;\n    var\
    \ right = word.length - 1;\n    var left = word.length - 2;\n    if(left < 0)\
    \ return \"\";\n    while(left >= 0){\n        if(!isVowel(word[left]) && isVowel(word[right])){\n\
    \            return word[right];\n        }\n        right--;\n        left--;\n\
    \    }\n    return \"\";\n}\n", "    const vowel = ['a', 'e', 'i', 'o', 'u'];\n\
    \    const consonant = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    let consonantPos = 0;\n\
    \    let vowelPos = 0;\n    for (let i = word.length - 1; i >= 0; i--) {\n   \
    \     if (consonant.includes(word[i])) {\n            consonantPos = i;\n    \
    \        break;\n        }\n    }\n    for (let i = consonantPos; i >= 0; i--)\
    \ {\n        if (vowel.includes(word[i])) {\n            vowelPos = i;\n     \
    \       break;\n        }\n    }\n    if (vowelPos > 0) {\n        return word[vowelPos];\n\
    \    } else {\n        return '';\n    }\n}", "    var vowelPosition;\n    var\
    \ patt = /[aeiou]/gi;\n    var result = word.match(patt);\n    var last_vowel\
    \ = result[result.length-1];\n    var last_vowel_index = word.lastIndexOf(last_vowel);\n\
    \    var left_consonant = word.slice(0,last_vowel_index);\n    var right_consonant\
    \ = word.slice(last_vowel_index+1);\n    var left_consonant_arr = left_consonant.split(\"\
    \");\n    var right_consonant_arr = right_consonant.split(\"\");\n    var reverse_consonant_arr\
    \ = left_consonant_arr.reverse();\n    if (vowelPosition == 0){\n        return\
    \ \"\"\n    } else if (vowelPosition == 1){\n        return word.slice(vowelPosition)\n\
    \    } else {\n        return last_vowel\n    }\n}\n", "    let vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    let wordArray = Array.from(word.toLowerCase());\n\
    \    let foundVowel = [];\n    for (let i = wordArray.length - 1; i >= 0; i--)\
    \ {\n        if (!vowels.includes(wordArray[i])) {\n            continue;\n  \
    \      } else {\n            foundVowel.push(wordArray[i]);\n            if (foundVowel.length\
    \ == 2) {\n                break;\n            }\n        }\n    }\n    return\
    \ foundVowel.length >= 2 ? word[word.toLowerCase().indexOf(foundVowel[1])] : '';\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
