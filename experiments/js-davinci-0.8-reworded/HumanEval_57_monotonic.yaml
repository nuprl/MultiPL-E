name: HumanEval_57_monotonic
language: js
prompt: "//Return true is array elements are monotonically increasing or decreasing.\n\
  // >>> monotonic([1, 2, 4, 20])\n// true\n// >>> monotonic([1, 20, 4, 10])\n// false\n\
  // >>> monotonic([4, 1, 0, -10])\n// true\nfunction monotonic(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = monotonic;\n  assert.deepEqual(candidate([1, 2, 4, 10]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 4, 20]),true);\n  assert.deepEqual(candidate([1, 20, 4, 10]),false);\n  assert.deepEqual(candidate([4,\
  \ 1, 0, -10]),true);\n  assert.deepEqual(candidate([4, 1, 1, 0]),true);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 2, 5, 60]),false);\n  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n\
  \  assert.deepEqual(candidate([9, 9, 9, 9]),true);\n}\n\ntest();"
completions: ["  var mono = true;\n  for(var i = 1; i < l.length; i++){\n    if(l[i]\
    \ > l[i-1]){\n      for(var j = i+1; j < l.length; j++){\n        if(l[j] <= l[j-1]){\n\
    \          mono = false;\n        }\n      }\n    }\n    else if(l[i] < l[i-1]){\n\
    \      for(var j = i+1; j < l.length; j++){\n        if(l[j] >= l[j-1]){\n   \
    \       mono = false;\n        }\n      }\n    }\n  }\n  return mono;\n}\n", " \
    \ // YOUR CODE HERE\n  for(var i = 1; i < l.length; i++){\n    if(l[i]>=l[i-1]){\n\
    \      return true;\n    }\n    else{\n      return false;\n    }\n  }\n}\n",
  "    if(l.length <= 1){\n        return true;\n    }\n    if(l[0] < l[1]){\n   \
    \     for(var i = 1; i < l.length - 1; i++){\n            if(l[i] > l[i + 1]){\n\
    \                return false;\n            }\n        }\n    }\n    else{\n \
    \       for(var i = 1; i < l.length - 1; i++){\n            if(l[i] < l[i + 1]){\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\n", "\tvar result = true;\n\tfor(var i = 1; i < l.length; i++){\n\t\tif(l[i]\
    \ - l[i-1] < 0){\n\t\t\tif(l[i-1] - l[i-2] > 0){\n\t\t\t\tresult = false;\n\t\t\
    \t}\n\t\t}\n\t\telse if(l[i] - l[i-1] > 0){\n\t\t\tif(l[i-1] - l[i-2] < 0){\n\t\
    \t\t\tresult = false;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n", "    var increasing\
    \ = true;\n    var decreasing = true;\n    for(var i = 0; i < l.length - 1; i++){\n\
    \        if(l[i] < l[i+1]){\n            decreasing = false;\n        }else if(l[i]\
    \ > l[i+1]){\n            increasing = false;\n        }\n    }\n    return increasing\
    \ || decreasing;\n}\n", "  \n  var direction;\n  var ok = true;\n  var a;\n  var\
    \ b;\n  var i;\n  \n  for (i = 0; i < l.length - 1; i++) {\n    a = l[i];\n  \
    \  b = l[i + 1];\n    if (direction === undefined) {\n      if (a < b) {\n   \
    \     direction = 'up';\n      } else if (a > b) {\n        direction = 'down';\n\
    \      }\n    } else {\n      if (direction === 'up' && a > b) {\n        ok =\
    \ false;\n        break;\n      } else if (direction === 'down' && a < b) {\n\
    \        ok = false;\n        break;\n      }\n    }\n  }\n  \n  return ok;\n\
    }\n", "    if(!l){\n        return false;\n    }\n    var i = 0;\n    var inc\
    \ = l[i] < l[i+1];\n    while(l[i] <= l[i+1] === inc){\n        i++;\n    }\n\
    \    return i === l.length-1;\n}\n", "\tvar a = 0;\n\tvar d = 0;\n\tfor(var i\
    \ = 0; i < l.length - 1; i++){\n\t\tif(l[i+1] > l[i])\n\t\t\ta++;\n\t\telse if(l[i+1]\
    \ < l[i])\n\t\t\td++;\n\t}\n\tif(a != 0 && d != 0)\n\t\treturn false;\n\telse\n\
    \t\treturn true;\n}\n", "\tvar x= l[0] < l[1];\n\tfor(var i=1; i<l.length-1; i++){\n\
    \t\tif((l[i]<l[i+1])!=x){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n",
  "\treturn (decreasing(l) || increasing(l));\n}\n", "    var decresing = true;\n\
    \    var increasing = true;\n    for(var i = 1; i < l.length; i++){\n        if(l[i-1]\
    \ < l[i]){\n            decresing = false;\n        }\n        if(l[i-1] > l[i]){\n\
    \            increasing = false;\n        }\n    }\n    return increasing || decresing;\n\
    }\n", "    var result = true;\n    var up = l[0] < l[1];\n    for(var i = 0; i\
    \ < l.length-1; i++){\n        if(up && l[i] > l[i+1]) {\n            result =\
    \ false;\n            break;\n        }\n        if(!up && l[i] < l[i+1]) {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\n", "    for(var i = 0; i < l.length - 1; i++){\n        if(l[i]\
    \ <= l[i+1]){\n            return true;\n        }\n        else{\n          \
    \  return false;\n        }\n    }\n}\n", "  if(l.length <= 1){\n    return true;\n\
    \  }\n\n  let current = l[0];\n  let isIncreasing = false;\n  let isDecreasing\
    \ = false;\n\n  for(let i = 1; i < l.length; i++){\n    if(l[i] > current){\n\
    \      isIncreasing = true;\n    } else if(l[i] < current){\n      isDecreasing\
    \ = true;\n    }\n    current = l[i];\n  }\n\n  return isIncreasing === false\
    \ || isDecreasing === false;\n}\n", "    var i;\n    var direction = l[0] - l[1];\n\
    \    for(i = 1; i < l.length; i++){\n        if(l[i] - l[i+1] != direction){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "\tif(l.length==0\
    \ || l.length==1){\n\t\treturn true;\n\t}\n\tvar flag=0;\n\tfor(var i=0;i<l.length-1;i++){\n\
    \t\tif(l[i]<l[i+1]){\n\t\t\tflag=1;\n\t\t\tbreak;\n\t\t}\n\t\telse if(l[i]>l[i+1]){\n\
    \t\t\tflag=2;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif(flag==0){\n\t\treturn true;\n\t\
    }\n\telse if(flag==1){\n\t\tfor(var i=0;i<l.length-1;i++){\n\t\t\tif(l[i]>l[i+1]){\n\
    \t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\telse if(flag==2){\n\
    \t\tfor(var i=0;i<l.length-1;i++){\n\t\t\tif(l[i]<l[i+1]){\n\t\t\t\treturn false;\n\
    \t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\t\n}", "    // YOUR CODE HERE\n    let\
    \ goingUp = true;\n    let goingDown = true;\n    for (let i = 0; i < l.length\
    \ - 1; i++){\n        if (l[i] > l[i+1]){\n            goingUp = false;\n    \
    \    }\n        if (l[i] < l[i+1]){\n            goingDown = false;\n        }\n\
    \    }\n    return goingUp || goingDown;\n}\n", "    return increasing(l) || decreasing(l);\n\
    }\n", "    // Your code here\n}\n\nmodule.exports = {\n    longest_list,\n   \
    \ min,\n    sum,\n    product,\n    concat,\n    unique,\n    unique_sorted,\n\
    \    sorted,\n    monotonic\n}", "\treturn l.every((x,i) => x >= l[i+1] || x <=\
    \ l[i+1])\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
