name: HumanEval_42_incr_list
language: js
prompt: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
  // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4,\
  \ 4, 10, 1, 124]\nfunction incr_list(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
  \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
  \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
completions: ["\tvar new_list = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i]\
    \ + 1);\n\t}\n\treturn new_list;\n}\n", "    var new_list = [];\n    for (var\
    \ i=0; i<l.length; i++){\n        new_list.push(l[i]+1);\n    }\n    return new_list;\n\
    }", "\tvar newl = [];\n\tfor(var i = 0; i < l.length; i++){\n\t\tnewl.push(l[i]\
    \ + 1);\n\t}\n\treturn newl;\n}\n", "    return l.map(x => x + 1);\n}\n", "  \
    \  let res = [];\n    for(let i = 0; i < l.length; i++){\n        res.push(l[i]\
    \ + 1);\n    }\n    return res;\n}\n", "  var arr_incr = [];\n  for (var i = 0;\
    \ i < l.length; i++){\n    arr_incr.push(l[i] + 1);\n  }\n  return arr_incr;\n\
    }\n", "    return l.map(function(el){\n        return el+1;\n    });\n}\n", " \
    \   return l.map(function(item){return item+1});\n}\n", "    return l.map(item\
    \ => item+1);\n}\n", "    var l2=[];\n    for(var i=0;i<l.length;i++){\n     \
    \   l2.push(l[i]+1);\n    }\n    return l2;\n}", "    return l.map(x => x + 1);\n\
    }\n", "\tvar newList = l.map(function(x){\n\t\treturn x + 1;\n\t});\n\treturn\
    \ newList;\n}\n", "\tvar l_new = [];\n\tfor (var i = 0; i < l.length; i++){\n\t\
    \tl_new.push(l[i] + 1);\n\t}\n\treturn l_new;\n}", "    var result = [];\n   \
    \ for(var i = 0; i < l.length; i++){\n        result.push(l[i] + 1);\n    }\n\
    \    return result;\n}\n", "    return l.map(function(num){\n        return num\
    \ + 1;\n    });\n}\n", "    var ret=[];\n    for(var i=0;i<l.length;i++){\n  \
    \      ret.push(l[i]+1);\n    }\n    return ret;\n}\n", "    var arr = [];\n \
    \   for(var i = 0; i < l.length; i++){\n        arr.push(l[i] + 1);\n    }\n \
    \   return arr;\n}\n", "    var new_l = [];\n    for(var i = 0; i < l.length;\
    \ i++){\n        new_l.push(l[i] + 1);\n    }\n    return new_l;\n}", "    var\
    \ r = [];\n    for(var i = 0; i < l.length; i++){\n        r.push(l[i] + 1);\n\
    \    }\n    return r;\n}", "    return l.map(function(elem){\n        return elem+1;\n\
    \    });\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
