name: HumanEval_149_sorted_list_sum
language: js
prompt: "//Write a function that accepts an array of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted array\
  \ with a sorted order,\n// The array is always an array of strings and never an\
  \ array of numbers,\n// and it may contain duplicates.\n// The order of the array\
  \ should be ascending by length of each word, and you\n// should return the array\
  \ sorted by that rule.\n// If two words have the same length, sort the array alphabetically.\n\
  // The function should return an array of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// >>> list_sort([\"\
  aa\", \"a\", \"aaa\"])\n// [\"aa\"]\n// >>> list_sort([\"ab\", \"a\", \"aaa\", \"\
  cd\"])\n// [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sorted_list_sum;\n  assert.deepEqual(candidate([\"aa\", \"a\", \"aaa\"]),[\"\
  aa\"]);\n  assert.deepEqual(candidate([\"school\", \"AI\", \"asdf\", \"b\"]),[\"\
  AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"d\", \"b\", \"c\"\
  , \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\", \"abcd\", \"a\"]),[\"\
  abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\", \"ai\", \"au\"]),[\"\
  AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"a\", \"b\", \"b\", \"c\"\
  , \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"aaaa\", \"bbbb\", \"dd\"\
  , \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\ntest();"
completions: ["    var a = lst.length;\n    var sum = 0;\n    for (var i = 0; i <\
    \ a; i++){\n        if (lst[i].length % 2 == 0){\n            sum += lst[i].length;\n\
    \        }\n    }\n    return sum;\n}", "    let ans = [];\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i].length % 2 == 0){\n            ans.push(lst[i]);\n\
    \        }\n    }\n    ans.sort(function(a, b){\n        return a.length - b.length;\n\
    \    });\n    return ans;\n}", "    lst.sort(function(a, b){\n        if (a.length\
    \ > b.length) {\n            return 1;\n        }\n        if (a.length < b.length)\
    \ {\n            return -1;\n        }\n        return 0;\n    });\n    var length\
    \ = lst.length;\n    var even_lst = [];\n    for (var i = 0; i < length; i++){\n\
    \        if (lst[i].length % 2 == 0){\n            even_lst.push(lst[i]);\n  \
    \      }\n    }\n    return even_lst;\n}", "  return lst.map(x => x.length)\n\
    \            .reduce((total, x) => total + x, 0);\n}\n", "    var index = 0;\n\
    \    var total = 0;\n    for (var index = 0; index < lst.length; index++) {\n\
    \        total += lst[index];\n    }\n    return total;\n}", "    var lst_sort\
    \ = lst.sort(function(a, b){\n        return a.length - b.length || a.localeCompare(b);\n\
    \    });\n    var new_lst = [];\n    for (var i = 0; i < lst_sort.length; i++){\n\
    \        if (lst_sort[i].length % 2 == 0){\n            new_lst.push(lst_sort[i]);\n\
    \        }\n    }\n    return new_lst;\n}\n", "    lst = lst.filter(word => word.length\
    \ % 2 == 0);\n    lst.sort((a, b) => a.length - b.length || a.localeCompare(b));\n\
    \    return lst;\n}", "    var sum=0;\n    for(var i=0; i<lst.length; i++){\n\
    \        sum += lst[i];\n    }\n    return sum;\n}", "  let temp = lst.slice(0,\
    \ lst.length);\n  temp.sort();\n  for(let i = 0; i < temp.length; i++){\n    if(temp[i].length\
    \ % 2 != 0){\n      lst.splice(i, 1);\n    }\n  }\n  return lst;\n}\n", "    sum\
    \ = 0;\n    sorted_lst = lst.sort();\n    console.log(sorted_lst);\n    for (var\
    \ i = 0; i < sorted_lst.length; i++){\n        sum += sorted_lst[i];\n    }\n\
    \    return sum;\n}", "  var i;\n  var len = lst.length;\n  var temp;\n  for(i=0;\
    \ i<len; i++){\n    for(j=i+1; j<len; j++){\n      if(lst[i].length > lst[j].length){\n\
    \        temp = lst[i];\n        lst[i] = lst[j];\n        lst[j] = temp;\n  \
    \    }\n    }\n  }\n  return lst;\n}\n", "    var odd_lst = [];\n    var even_lst\
    \ = [];\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i].length\
    \ % 2 === 0){\n            even_lst.push(lst[i]);\n        } else {\n        \
    \    odd_lst.push(lst[i]);\n        }\n    }\n    odd_lst.sort();\n    return\
    \ odd_lst;\n}", "    var lst_new = [];\n    var i = 0;\n    while (i < lst.length){\n\
    \        if (lst[i].length % 2 == 0){\n            lst_new.push(lst[i]);\n   \
    \     }\n        i = i + 1;\n    }\n    return lst_new.sort();\n}\n", "    var\
    \ new_list = [];\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i].length\
    \ % 2 === 0){\n            new_list.push(lst[i]);\n        }\n    }\n    var dict\
    \ = {};\n    for (var i = 0; i < new_list.length; i++){\n        dict[new_list[i]]\
    \ = new_list[i].length;\n    }\n    var new_list2 = [];\n    for (var key in dict){\n\
    \        new_list2.push(key);\n    }\n    return new_list2.sort();\n}", "    var\
    \ len = lst.length;\n    var res = [];\n    for(var i = 0; i < len; i++){\n  \
    \      if(lst[i].length % 2 == 0){\n            res.push(lst[i]);\n        }\n\
    \    }\n    res.sort();\n    return res;\n}", "    let sum = 0;\n    let newLst\
    \ = lst.sort();\n    for(let i=0; i<newLst.length; i++){\n        sum += newLst[i];\n\
    \    }\n    return sum;\n}", "    var sum = 0;\n    var tmp = 0;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst.length; j++){\n\
    \            if(lst[i] > lst[j]){\n                tmp = lst[i];\n           \
    \     lst[i] = lst[j];\n                lst[j] = tmp;\n            }\n       \
    \ }\n    }\n    for(var i = 0; i < lst.length; i++){\n        sum += lst[i];\n\
    \    }\n    return sum;\n}", "\tvar len = lst.length;\n\tvar odd = false;\n\t\
    for(var i = 0; i < len; i++){\n\t\todd = false;\n\t\tfor(var j = 0; j < lst[i].length;\
    \ j++){\n\t\t\tif(j % 2 === 1){\n\t\t\t\todd = true;\n\t\t\t}\n\t\t}\n\t\tif(odd\
    \ === true){\n\t\t\tlst.splice(i, 1);\n\t\t\tlen = lst.length;\n\t\t\ti--;\n\t\
    \t}\n\t}\n\treturn lst.sort();\n}\n\n", "    var list_sum = 0;\n    var idx;\n\
    \    lst.sort();\n    for (idx = 0; idx < lst.length; idx++){\n        list_sum\
    \ += lst[idx];\n    }\n    return list_sum;\n}\n", "  var sorted_lst = lst.sort();\n\
    \  var sum = 0;\n  for (var i = 0; i < sorted_lst.length; i++) {\n    sum += sorted_lst[i];\n\
    \  }\n  return sum;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
