name: HumanEval_132_is_nested
language: js
prompt: "//Create a function that takes a string as input which contains only square\
  \ brackets.\n// The function should return true if and only if there is a valid\
  \ subsequence of brackets \n// where at least one bracket in the subsequence is\
  \ nested.\n// >>> is_nested(\"[[]]\")\n// true\n// >>> is_nested(\"[]]]]]]][[[[[]\"\
  )\n// false\n// >>> is_nested(\"[][]\")\n// false\n// >>> is_nested(\"[]\")\n//\
  \ false\n// >>> is_nested(\"[[][]]\")\n// true\n// >>> is_nested(\"[[]][[\")\n//\
  \ true\nfunction is_nested(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_nested;\n  assert.deepEqual(candidate(\"[[]]\"),true);\n  assert.deepEqual(candidate(\"\
  []]]]]]][[[[[]\"),false);\n  assert.deepEqual(candidate(\"[][]\"),false);\n  assert.deepEqual(candidate(\"\
  []\"),false);\n  assert.deepEqual(candidate(\"[[[[]]]]\"),true);\n  assert.deepEqual(candidate(\"\
  []]]]]]]]]]\"),false);\n  assert.deepEqual(candidate(\"[][][[]]\"),true);\n  assert.deepEqual(candidate(\"\
  [[]\"),false);\n  assert.deepEqual(candidate(\"[]]\"),false);\n  assert.deepEqual(candidate(\"\
  [[]][[\"),true);\n  assert.deepEqual(candidate(\"[[][]]\"),true);\n  assert.deepEqual(candidate(\"\
  \"),false);\n  assert.deepEqual(candidate(\"[[[[[[[[\"),false);\n  assert.deepEqual(candidate(\"\
  ]]]]]]]]\"),false);\n}\n\ntest();"
completions: ["\treturn /(\\[\\])/.test(string)\n}\n\n", "\tvar stack = [];\n\tfor(var\
    \ i = 0; i < string.length; i++){\n\t\tvar char = string[i];\n\t\tif(char ===\
    \ '['){\n\t\t\tstack.push(char);\n\t\t}else if(char === ']'){\n\t\t\tif(stack.length\
    \ > 0){\n\t\t\t\tstack.pop();\n\t\t\t}else{\n\t\t\t\treturn false;\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn stack.length === 0;\n}", "    var count = 0;\n    for(var i\
    \ = 0; i < string.length; i++){\n        if(string[i] == \"[\"){\n           \
    \ count ++;\n        }\n        else if(string[i] == \"]\"){\n            count\
    \ --;\n        }\n        if(count < 0){\n            return false;\n        }\n\
    \    }\n    return count == 0;\n}", "  var valid = true;\n  var counter = 0;\n\
    \  for(var i = 0; i < string.length; i++){\n    if(string[i] == \"[\"){\n    \
    \  counter += 1;\n    }\n    else if(string[i] == \"]\"){\n      counter -= 1;\n\
    \    }\n    if(counter < 0){\n      valid = false;\n    }\n  }\n  if(counter !=\
    \ 0){\n    valid = false;\n  }\n  return valid;\n}", "    let opened = 0\n   \
    \ let closed = 0\n    for(let c of string){\n        if(c == \"[\") opened++\n\
    \        if(c == \"]\") closed++\n        if(closed > opened) return false\n \
    \   }\n    return true\n}\n", "    const stack = [];\n    const map = {\n    \
    \    '[':']',\n        '{':'}',\n        '(':')'\n    }\n    for(let char of string){\n\
    \        if(char === '['){\n            stack.push(char);\n        }else if(char\
    \ === ']'){\n            if(stack.length === 0){\n                return false;\n\
    \            }\n            if(map[stack.pop()] !== char){\n                return\
    \ false;\n            }\n        }\n    }\n    return stack.length === 0;\n}",
  "    let curr = null;\n    let stack = [];\n    let map = {\n        ']' : '[',\n\
    \    }\n    for(let i = 0; i < string.length; i++){\n        curr = string[i];\n\
    \        if(map[curr]){\n            if(stack.pop() !== map[curr]) return false;\n\
    \        }else{\n            stack.push(curr);\n        }\n    }\n    return stack.length\
    \ === 0;\n}\n", "    var list = string.split(\"\");\n    var count = 0;\n    for(var\
    \ i = 0; i < list.length; i++) {\n        if(list[i] == \"[\") {\n           \
    \ count += 1;\n        } else if(list[i] == \"]\") {\n            count -= 1;\n\
    \        }\n        if(count < 0) {\n            return false;\n        }\n  \
    \  }\n    return count != 0 ? false : true;\n}", "    //an empty string should\
    \ return false\n    if(string === \"\"){\n        return false;\n    }\n    var\
    \ openArr = [];\n    for(var i = 0; i < string.length; i++){\n        // if there\
    \ is an opening bracket, push it to the array\n        if(string[i] === \"[\"\
    ){\n            openArr.push(string[i]);\n        }\n        // if there is a\
    \ closing bracket\n        else if(string[i] === \"]\"){\n            //if openArr\
    \ is empty, then there is no matching open bracket\n            if(openArr.length\
    \ === 0){\n                return false;\n            }\n            // pop the\
    \ last bracket, and see if it is a matching bracket\n            else{\n     \
    \           openArr.pop();\n            }\n        }\n    }\n    // if all the\
    \ brackets are matched and there are no brackets left in the array\n    if(openArr.length\
    \ === 0){\n        return true;\n    }\n    // else return false\n    else{\n\
    \        return false;\n    }\n}", "    //split the string into an array\n   \
    \ let arr = string.split('');\n    //create a result variable\n    let result\
    \ = 0;\n    //loop through the arr\n    for(let i = 0; i < arr.length; i++){\n\
    \        //if the element is an opening bracket add 1 to result\n        if(arr[i]\
    \ === '['){\n            result++\n        }\n        //if the element is a closing\
    \ bracket minus 1 from result\n        if(arr[i] === ']'){\n            result--\n\
    \        }\n        //if the result is negative return false\n        if(result\
    \ < 0){\n            return false\n        }\n    }\n    //return true if no negatives\n\
    \    return true\n}\n", "  if(string.length % 2 !== 0){\n    return false;\n \
    \ }\n  var stack = []\n  for(var i = 0; i < string.length; i++){\n    if(string[i]\
    \ === \"[\"){\n      stack.push(string[i])\n    } else if(string[i] === \"]\"\
    ){\n      if(stack.length > 0){\n        stack.pop()\n      } else {\n       \
    \ return false\n      }\n    }\n  }\n  return stack.length === 0\n}", "    left\
    \ = string.replace(/\\]/g,\"\");\n    right = string.replace(/\\[/g,\"\");\n \
    \   if(left.length == right.length){\n        return false;\n    }else{\n    \
    \    return true;\n    }\n}", "    //check if the string contains anything else\
    \ other than brackets, if so return false\n    if(!string.match(/^[\\[\\]]+$/))\
    \ return false;\n    //setup a stack\n    let stack = [];\n    //populate stack\
    \ with each bracket\n    for(let i = 0; i < string.length; i++){\n        stack.push(string[i]);\n\
    \    }\n    //loop through the stack, replacing \"[[\" and \"]]\" with \"=\" while\
    \ there are brackets left in the stack\n    while(stack.length > 0){\n       \
    \ if(stack.indexOf(\"[]\") >= 0){\n            stack[stack.indexOf(\"[]\")] =\
    \ \"=\";\n            stack[stack.indexOf(\"[]\") + 1] = \"=\";\n        } else\
    \ {\n            return false;\n        }\n    }\n    //if there are no brackets\
    \ left, return true\n    return true;\n}", "    var length = string.length;\n\
    \    var stack = [];\n    for(let i = 0; i < length; i++){\n        if(string[i]\
    \ == '['){\n            stack.push(string[i]);\n        }else{\n            if(stack.length\
    \ == 0){\n                return false;\n            }else{\n                stack.pop();\n\
    \            }\n        }\n    }\n    if(stack.length > 0){\n        return false;\n\
    \    }else{\n        return true;\n    }\n}\nvar string = \"][\";", "    let current_count\
    \ = 0;\n    let max_count = 0;\n    for(let i = 0; i < string.length; i++){\n\
    \        if(string[i] == '['){\n            current_count += 1;\n            if(current_count\
    \ > max_count){\n                max_count = current_count;\n            }\n \
    \       }\n        else if(string[i] == ']'){\n            current_count -= 1;\n\
    \        }\n    }\n    return max_count > 1;\n}\n", "    if (string.includes(\"\
    []\")){\n        return true\n    } else {\n        return false\n    }\n}\n\n",
  "  if (string.length === 0){\n    return false;\n  }\n  else{\n    let open = 0;\n\
    \    let close = 0;\n    for (let i = 0; i < string.length; i++){\n      if (string[i]\
    \ === '['){\n        open++;\n      }\n      else{\n        close++;\n      }\n\
    \      if (close > open){\n        return false;\n      }\n    }\n    if (open\
    \ > close){\n      return false;\n    }\n    else{\n      return true;\n    }\n\
    \  }\n}\n", "    var stack = [];\n    for(var i = 0; i < string.length; i++){\n\
    \        if(string[i] == '['){\n            stack.push(string[i]);\n        }\n\
    \        else if(string[i] == ']'){\n            if(stack.length == 0){\n    \
    \            return false;\n            }\n            else{\n               \
    \ stack.pop();\n            }\n        }\n    }\n    if(stack.length == 0){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   let valid_sequence = true;\n    let level = 0;\n    for( let i = 0; i < string.length;\
    \ i++){\n        if(string[i] === \"[\"){\n            level += 1;\n        }\n\
    \        else if(string[i] === \"]\"){\n            level -= 1;\n        }\n \
    \       if(level < 0){\n            valid_sequence = false;\n            break;\n\
    \        }\n    }\n    if(level > 0){\n        valid_sequence = false;\n    }\n\
    \    return valid_sequence;\n}", "    var stack = [];\n    for(var i = 0; i <\
    \ string.length; i++){\n        var char = string[i];\n        if(char == \"[\"\
    ){\n            stack.push(char);\n        }\n        else if(char == \"]\"){\n\
    \            if(stack.length > 0){\n                stack.pop();\n           \
    \ }\n            else{\n                return false;\n            }\n       \
    \ }\n    }\n    return stack.length > 0 ? false : true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
