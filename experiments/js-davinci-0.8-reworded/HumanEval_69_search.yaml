name: HumanEval_69_search
language: js
prompt: "//You are given a non-empty array of positive integers. Return the greatest\
  \ integer that is greater than \n// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n// The frequency of an integer is the number\
  \ of times it appears in the array.\n// If no such a value exist, return -1.\n//\
  \ Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3,\
  \ 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = search;\n  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);\n  assert.deepEqual(candidate([4,\
  \ 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3, 3]),-1);\n  assert.deepEqual(candidate([8,\
  \ 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);\n\
  \  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2, 8, 2]),2);\n  assert.deepEqual(candidate([6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n  assert.deepEqual(candidate([8, 8, 3, 6,\
  \ 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9,\
  \ 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n  assert.deepEqual(candidate([1,\
  \ 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n  assert.deepEqual(candidate([1]),1);\n\
  \  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4,\
  \ 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10,\
  \ 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1, 6,\
  \ 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4, 1,\
  \ 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9,\
  \ 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3,\
  \ 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6, 10,\
  \ 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n\
  \  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9,\
  \ 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3,\
  \ 10, 10, 9, 2]),-1);\n}\n\ntest();"
completions: ["  var h = {};\n  for (var i=0; i<lst.length; i++){\n    var x = lst[i];\n\
    \    if (x in h){\n      h[x] += 1;\n    }\n    else{\n      h[x] = 1;\n    }\n\
    \  }\n  var keys = Object.keys(h);\n  var max = 0;\n  for (var i=0; i<keys.length;\
    \ i++){\n    if (keys[i] > max && h[keys[i]] >= keys[i]){\n      max = keys[i];\n\
    \    }\n  }\n  if (max == 0){\n    return -1;\n  }\n  return max;\n}\n", "   \
    \ const number = []\n    const freq = []\n    for(let i=0; i<lst.length; i++){\n\
    \        if(number.includes(lst[i])){\n            freq[number.indexOf(lst[i])]++\n\
    \        }\n        else{\n            number.push(lst[i])\n            freq.push(1)\n\
    \        }\n    }\n    var max = -1\n    for(let i=0; i<freq.length; i++){\n \
    \       if(freq[i] >= number[i] && number[i] > max){\n            max = number[i]\n\
    \        }\n    }\n    return max\n}\n", "    let hashtable = {};\n    let maxValue\
    \ = 0;\n    let maxValueKey = 0;\n    for(let i = 0; i < lst.length; i++){\n \
    \       if(hashtable[lst[i]] === undefined){\n            hashtable[lst[i]] =\
    \ 1;\n        }\n        else{\n            hashtable[lst[i]]++;\n        }\n\
    \    }\n    for(let key in hashtable){\n        if(hashtable[key] >= key && key\
    \ > maxValue){\n            maxValue = key;\n            maxValueKey = key;\n\
    \        }\n    }\n    if(maxValue === 0){\n        return -1;\n    }\n    return\
    \ maxValueKey;\n}\n", "    // your code here\n    let map = {};\n    let max =\
    \ 0;\n    for(let i = 0; i < lst.length; i++){\n        if(!map[lst[i]]){\n  \
    \          map[lst[i]] = 1;\n        }else{\n            map[lst[i]]++;\n    \
    \    }\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n\
    \    for(let i = max; i > 0; i--){\n        if(map[i] && map[i] >= i){\n     \
    \       return i;\n        }\n    }\n    return -1;\n}\n", "    if(lst.length\
    \ === 0) return -1;\n    let largest = Math.max(...lst);\n    let obj = {};\n\
    \    for(let i=0; i<lst.length; i++){\n        if(obj[lst[i]]){\n            obj[lst[i]]\
    \ += 1;\n        } else {\n            obj[lst[i]] = 1;\n        }\n    }\n  \
    \  for(let i=largest; i>0; i--){\n        if(obj[i] >= i){\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "    let max = Math.max(...lst);\n\
    \    let maxIndex = lst.indexOf(max);\n    let counter = 0;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] === max){\n            counter++;\n\
    \        }\n    }\n    if(counter >= max){\n        return max;\n    }\n    else{\n\
    \        return -1;\n    }\n}", "    let max = -1;\n    let counter = 0;\n   \
    \ let searchedItem = 0;\n    for(let i = 0; i < lst.length; i++){\n        counter\
    \ = 0;\n        for(let j = 0; j < lst.length; j++){\n            if(lst[i] ===\
    \ lst[j]){\n                counter++;\n            }\n        }\n        if(counter\
    \ >= lst[i] && lst[i] > max){\n            max = lst[i];\n        }\n    }\n \
    \   return max;\n}\n", "    // write code here\n    let n = lst.length;\n    let\
    \ lst2 = lst.sort();\n    let lst3 = lst2.filter(function(item, index, array){\n\
    \    \treturn array.indexOf(item)===index;\n    });\n    let len = lst3.length;\n\
    \    if(len==1){\n    \tif(lst3[0]==1){\n    \t\treturn 1;\n    \t}else{\n   \
    \ \t\treturn -1;\n    \t}\n    }\n    for(let i=len-1;i>=0;i--){\n    \tlet num\
    \ = lst3[i];\n    \tlet freq = 0;\n    \tfor(let j=0;j<lst.length;j++){\n    \t\
    \tif(lst[j]==num){\n    \t\t\tfreq++;\n    \t\t}\n    \t}\n    \tif(freq==num){\n\
    \    \t\treturn num;\n    \t}\n    }\n    return -1;\n}", "    // Your code here\n\
    }\n", "    let max = Math.max(...lst);\n    let freq = Array(max+1).fill(0);\n\
    \    for(let num of lst){\n        freq[num] += 1;\n    }\n    for(let num = max;\
    \ num > 0; num--){\n        if(freq[num] >= num){\n            return num;\n \
    \       }\n    }\n    return -1;\n}", "    const frequency = lst.reduce((acc,\
    \ curr) => {\n        acc[curr] = (acc[curr] || 0) + 1;\n        return acc;\n\
    \    }, {});\n    const highestFreq = Math.max(...Object.values(frequency));\n\
    \    const maxFreqValue = Object.keys(frequency).reduce((acc, curr) => {\n   \
    \     if (frequency[curr] === highestFreq && curr > acc) return Number(curr);\n\
    \        return acc;\n    }, 0);\n    if (maxFreqValue === 0) return -1;\n   \
    \ if (maxFreqValue >= highestFreq) return maxFreqValue;\n    return -1;\n}", " \
    \ let a=new Set();\n  let num=0;\n  let count=0;\n  let max=0;\n  for(let i=0;i<lst.length;i++){\n\
    \    num=lst[i];\n    if(!a.has(num)){\n        a.add(num);\n        count=1;\n\
    \        for(let j=i+1;j<lst.length;j++){\n            if(lst[j]==num){\n    \
    \          count++;\n            }\n        }\n        if(count>=num){\n     \
    \     if(num>max){\n            max=num;\n          }\n        }\n      }\n  }\n\
    \  if(max>0){\n    return max;\n  }\n  else{\n    return -1;\n  }\n}\n", "   \
    \ let i = 0;\n    let dict = {};\n    for (i; i < lst.length; i++){\n        if\
    \ (!(lst[i] in dict)){\n            dict[lst[i]] = 1;\n        }\n        else{\n\
    \            dict[lst[i]] += 1;\n        }\n    }\n    let max = -1;\n    for\
    \ (var key in dict){\n        if (dict[key] >= key && key > max){\n          \
    \  max = key;\n        }\n    }\n    return max;\n}", "    let max = 0\n    let\
    \ count = 0\n    let greatest = 0\n    for(let i = 0; i < lst.length; i++){\n\
    \        for(let j = 0; j < lst.length; j++){\n            if(lst[i] == lst[j]){\n\
    \                count += 1\n            }\n        }\n        if(count >= lst[i]\
    \ && lst[i] > max){\n            max = lst[i]\n            greatest = max\n  \
    \      }\n        count = 0\n    }\n    if(greatest == 0){\n        return -1\n\
    \    }\n    return greatest\n}\n", "    let dict = {}\n    for (var i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] in dict) {\n            dict[lst[i]]\
    \ += 1\n        } else {\n            dict[lst[i]] = 1\n        }\n    }\n   \
    \ for (let key in dict) {\n        if (key <= dict[key]) {\n            return\
    \ key\n        }\n    }\n    return -1\n}", "    let obj = {}\n    for(let i =\
    \ 0; i < lst.length; i++){\n        if(!obj[lst[i]]){\n            obj[lst[i]]\
    \ = 1\n        }else{\n            obj[lst[i]] += 1\n        }\n    }\n    let\
    \ arr = Object.keys(obj)\n    let final = arr.filter(num => num >= obj[num])\n\
    \    if(final.length > 0){\n        return final.sort((a,b) => b - a)[0]\n   \
    \ }else{\n        return -1\n    }\n}", "    let frequencyMap = {};\n    let maxCount\
    \ = 0;\n    let maxValue = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(frequencyMap[lst[i]]){\n            frequencyMap[lst[i]] += 1;\n     \
    \   } else {\n            frequencyMap[lst[i]] = 1;\n        }\n        if(frequencyMap[lst[i]]\
    \ > maxCount && lst[i] >= frequencyMap[lst[i]]){\n            maxCount = frequencyMap[lst[i]];\n\
    \            maxValue = lst[i];\n        }\n    }\n    if(maxCount === 0){\n \
    \       return -1;\n    }\n    return maxValue;\n}", "    let obj = {};\n    for(let\
    \ i=0; i<lst.length; i++){\n        if(!obj[lst[i]]){\n            obj[lst[i]]\
    \ = 1;\n        }else{\n            obj[lst[i]] += 1;\n        }\n    }\n    let\
    \ newArr = Object.keys(obj).map(function(k){\n        return obj[k];\n    });\n\
    \    console.log(newArr);\n    let maxVal = 0;\n    for(let i=0; i<newArr.length;\
    \ i++){\n        if(newArr[i] > maxVal){\n            maxVal = newArr[i];\n  \
    \      }\n    }\n    if(maxVal >= 1){\n        return maxVal;\n    }else{\n  \
    \      return -1;\n    }\n}\n", "    var max = 0;\n    var maxVal = -1;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        var num = lst[i];\n        var count =\
    \ 0;\n        for(var j = 0; j < lst.length; j++){\n            if(lst[j] == num){\n\
    \                count += 1;\n            }\n        }\n        if(count >= num\
    \ && num > max){\n            max = num;\n            maxVal = num;\n        }\n\
    \    }\n    return maxVal;\n}\n", "    // Fill this in.\n    let answer = [];\n\
    \    let maxInt = 0;\n    let frequency = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        let count = 0;\n        for (let j = 0; j < lst.length; j++)\
    \ {\n            if (lst[i] === lst[j]) {\n                count += 1;\n     \
    \       }\n        }\n        if (count >= lst[i] && count > frequency) {\n  \
    \          frequency = count;\n            maxInt = lst[i];\n        }\n    }\n\
    \    if (maxInt === 0) {\n        answer.push(-1);\n    } else {\n        answer.push(maxInt);\n\
    \    }\n    return answer;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
