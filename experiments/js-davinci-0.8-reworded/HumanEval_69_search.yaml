name: HumanEval_69_search
language: js
prompt: "//You are given a non-empty array of positive integers. Return the greatest\
  \ integer that is greater than \n// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n// The frequency of an integer is the number\
  \ of times it appears in the array.\n// If no such a value exist, return -1.\n//\
  \ Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>> search([1, 2, 2, 3,\
  \ 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nfunction search(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = search;\n  assert.deepEqual(candidate([5, 5, 5, 5, 1]),1);\n  assert.deepEqual(candidate([4,\
  \ 1, 4, 1, 4, 4]),4);\n  assert.deepEqual(candidate([3, 3]),-1);\n  assert.deepEqual(candidate([8,\
  \ 8, 8, 8, 8, 8, 8, 8]),8);\n  assert.deepEqual(candidate([2, 3, 3, 2, 2]),2);\n\
  \  assert.deepEqual(candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7,\
  \ 1, 7, 4, 10, 8, 1]),1);\n  assert.deepEqual(candidate([3, 2, 8, 2]),2);\n  assert.deepEqual(candidate([6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]),1);\n  assert.deepEqual(candidate([8, 8, 3, 6,\
  \ 5, 6, 4]),-1);\n  assert.deepEqual(candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9,\
  \ 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]),1);\n  assert.deepEqual(candidate([1,\
  \ 9, 10, 1, 3]),1);\n  assert.deepEqual(candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]),5);\n  assert.deepEqual(candidate([1]),1);\n\
  \  assert.deepEqual(candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4,\
  \ 2, 1, 10, 2, 1, 1, 5]),4);\n  assert.deepEqual(candidate([2, 10, 4, 8, 2, 10,\
  \ 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]),2);\n  assert.deepEqual(candidate([1, 6,\
  \ 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]),1);\n  assert.deepEqual(candidate([9, 2, 4, 1,\
  \ 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9,\
  \ 4]),4);\n  assert.deepEqual(candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3,\
  \ 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]),4);\n  assert.deepEqual(candidate([9, 8, 6, 10,\
  \ 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]),2);\n  assert.deepEqual(candidate([5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]),-1);\n  assert.deepEqual(candidate([10]),-1);\n\
  \  assert.deepEqual(candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),2);\n  assert.deepEqual(candidate([5,\
  \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]),1);\n  assert.deepEqual(candidate([7, 9, 9, 9,\
  \ 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]),1);\n  assert.deepEqual(candidate([3,\
  \ 10, 10, 9, 2]),-1);\n}\n\ntest();"
completions: ["  var h = {};\n  for (var i=0; i<lst.length; i++){\n    var x = lst[i];\n\
    \    if (x in h){\n      h[x] += 1;\n    }\n    else{\n      h[x] = 1;\n    }\n\
    \  }\n  var keys = Object.keys(h);\n  var max = 0;\n  for (var i=0; i<keys.length;\
    \ i++){\n    if (keys[i] > max && h[keys[i]] >= keys[i]){\n      max = keys[i];\n\
    \    }\n  }\n  if (max == 0){\n    return -1;\n  }\n  return max;\n}\n", "   \
    \ const number = []\n    const freq = []\n    for(let i=0; i<lst.length; i++){\n\
    \        if(number.includes(lst[i])){\n            freq[number.indexOf(lst[i])]++\n\
    \        }\n        else{\n            number.push(lst[i])\n            freq.push(1)\n\
    \        }\n    }\n    var max = -1\n    for(let i=0; i<freq.length; i++){\n \
    \       if(freq[i] >= number[i] && number[i] > max){\n            max = number[i]\n\
    \        }\n    }\n    return max\n}\n", "    let hashtable = {};\n    let maxValue\
    \ = 0;\n    let maxValueKey = 0;\n    for(let i = 0; i < lst.length; i++){\n \
    \       if(hashtable[lst[i]] === undefined){\n            hashtable[lst[i]] =\
    \ 1;\n        }\n        else{\n            hashtable[lst[i]]++;\n        }\n\
    \    }\n    for(let key in hashtable){\n        if(hashtable[key] >= key && key\
    \ > maxValue){\n            maxValue = key;\n            maxValueKey = key;\n\
    \        }\n    }\n    if(maxValue === 0){\n        return -1;\n    }\n    return\
    \ maxValueKey;\n}\n", "    // your code here\n    let map = {};\n    let max =\
    \ 0;\n    for(let i = 0; i < lst.length; i++){\n        if(!map[lst[i]]){\n  \
    \          map[lst[i]] = 1;\n        }else{\n            map[lst[i]]++;\n    \
    \    }\n        if(lst[i] > max){\n            max = lst[i];\n        }\n    }\n\
    \    for(let i = max; i > 0; i--){\n        if(map[i] && map[i] >= i){\n     \
    \       return i;\n        }\n    }\n    return -1;\n}\n", "    if(lst.length\
    \ === 0) return -1;\n    let largest = Math.max(...lst);\n    let obj = {};\n\
    \    for(let i=0; i<lst.length; i++){\n        if(obj[lst[i]]){\n            obj[lst[i]]\
    \ += 1;\n        } else {\n            obj[lst[i]] = 1;\n        }\n    }\n  \
    \  for(let i=largest; i>0; i--){\n        if(obj[i] >= i){\n            return\
    \ i;\n        }\n    }\n    return -1;\n}", "    let max = Math.max(...lst);\n\
    \    let maxIndex = lst.indexOf(max);\n    let counter = 0;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] === max){\n            counter++;\n\
    \        }\n    }\n    if(counter >= max){\n        return max;\n    }\n    else{\n\
    \        return -1;\n    }\n}", "    let max = -1;\n    let counter = 0;\n   \
    \ let searchedItem = 0;\n    for(let i = 0; i < lst.length; i++){\n        counter\
    \ = 0;\n        for(let j = 0; j < lst.length; j++){\n            if(lst[i] ===\
    \ lst[j]){\n                counter++;\n            }\n        }\n        if(counter\
    \ >= lst[i] && lst[i] > max){\n            max = lst[i];\n        }\n    }\n \
    \   return max;\n}\n", "    // write code here\n    let n = lst.length;\n    let\
    \ lst2 = lst.sort();\n    let lst3 = lst2.filter(function(item, index, array){\n\
    \    \treturn array.indexOf(item)===index;\n    });\n    let len = lst3.length;\n\
    \    if(len==1){\n    \tif(lst3[0]==1){\n    \t\treturn 1;\n    \t}else{\n   \
    \ \t\treturn -1;\n    \t}\n    }\n    for(let i=len-1;i>=0;i--){\n    \tlet num\
    \ = lst3[i];\n    \tlet freq = 0;\n    \tfor(let j=0;j<lst.length;j++){\n    \t\
    \tif(lst[j]==num){\n    \t\t\tfreq++;\n    \t\t}\n    \t}\n    \tif(freq==num){\n\
    \    \t\treturn num;\n    \t}\n    }\n    return -1;\n}", "    // Your code here\n\
    }\n", "    let max = Math.max(...lst);\n    let freq = Array(max+1).fill(0);\n\
    \    for(let num of lst){\n        freq[num] += 1;\n    }\n    for(let num = max;\
    \ num > 0; num--){\n        if(freq[num] >= num){\n            return num;\n \
    \       }\n    }\n    return -1;\n}", "    const frequency = lst.reduce((acc,\
    \ curr) => {\n        acc[curr] = (acc[curr] || 0) + 1;\n        return acc;\n\
    \    }, {});\n    const highestFreq = Math.max(...Object.values(frequency));\n\
    \    const maxFreqValue = Object.keys(frequency).reduce((acc, curr) => {\n   \
    \     if (frequency[curr] === highestFreq && curr > acc) return Number(curr);\n\
    \        return acc;\n    }, 0);\n    if (maxFreqValue === 0) return -1;\n   \
    \ if (maxFreqValue >= highestFreq) return maxFreqValue;\n    return -1;\n}", " \
    \ let a=new Set();\n  let num=0;\n  let count=0;\n  let max=0;\n  for(let i=0;i<lst.length;i++){\n\
    \    num=lst[i];\n    if(!a.has(num)){\n        a.add(num);\n        count=1;\n\
    \        for(let j=i+1;j<lst.length;j++){\n            if(lst[j]==num){\n    \
    \          count++;\n            }\n        }\n        if(count>=num){\n     \
    \     if(num>max){\n            max=num;\n          }\n        }\n      }\n  }\n\
    \  if(max>0){\n    return max;\n  }\n  else{\n    return -1;\n  }\n}\n", "   \
    \ let i = 0;\n    let dict = {};\n    for (i; i < lst.length; i++){\n        if\
    \ (!(lst[i] in dict)){\n            dict[lst[i]] = 1;\n        }\n        else{\n\
    \            dict[lst[i]] += 1;\n        }\n    }\n    let max = -1;\n    for\
    \ (var key in dict){\n        if (dict[key] >= key && key > max){\n          \
    \  max = key;\n        }\n    }\n    return max;\n}", "    let max = 0\n    let\
    \ count = 0\n    let greatest = 0\n    for(let i = 0; i < lst.length; i++){\n\
    \        for(let j = 0; j < lst.length; j++){\n            if(lst[i] == lst[j]){\n\
    \                count += 1\n            }\n        }\n        if(count >= lst[i]\
    \ && lst[i] > max){\n            max = lst[i]\n            greatest = max\n  \
    \      }\n        count = 0\n    }\n    if(greatest == 0){\n        return -1\n\
    \    }\n    return greatest\n}\n", "    let dict = {}\n    for (var i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] in dict) {\n            dict[lst[i]]\
    \ += 1\n        } else {\n            dict[lst[i]] = 1\n        }\n    }\n   \
    \ for (let key in dict) {\n        if (key <= dict[key]) {\n            return\
    \ key\n        }\n    }\n    return -1\n}", "    let obj = {}\n    for(let i =\
    \ 0; i < lst.length; i++){\n        if(!obj[lst[i]]){\n            obj[lst[i]]\
    \ = 1\n        }else{\n            obj[lst[i]] += 1\n        }\n    }\n    let\
    \ arr = Object.keys(obj)\n    let final = arr.filter(num => num >= obj[num])\n\
    \    if(final.length > 0){\n        return final.sort((a,b) => b - a)[0]\n   \
    \ }else{\n        return -1\n    }\n}", "    let frequencyMap = {};\n    let maxCount\
    \ = 0;\n    let maxValue = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(frequencyMap[lst[i]]){\n            frequencyMap[lst[i]] += 1;\n     \
    \   } else {\n            frequencyMap[lst[i]] = 1;\n        }\n        if(frequencyMap[lst[i]]\
    \ > maxCount && lst[i] >= frequencyMap[lst[i]]){\n            maxCount = frequencyMap[lst[i]];\n\
    \            maxValue = lst[i];\n        }\n    }\n    if(maxCount === 0){\n \
    \       return -1;\n    }\n    return maxValue;\n}", "    let obj = {};\n    for(let\
    \ i=0; i<lst.length; i++){\n        if(!obj[lst[i]]){\n            obj[lst[i]]\
    \ = 1;\n        }else{\n            obj[lst[i]] += 1;\n        }\n    }\n    let\
    \ newArr = Object.keys(obj).map(function(k){\n        return obj[k];\n    });\n\
    \    console.log(newArr);\n    let maxVal = 0;\n    for(let i=0; i<newArr.length;\
    \ i++){\n        if(newArr[i] > maxVal){\n            maxVal = newArr[i];\n  \
    \      }\n    }\n    if(maxVal >= 1){\n        return maxVal;\n    }else{\n  \
    \      return -1;\n    }\n}\n", "    var max = 0;\n    var maxVal = -1;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        var num = lst[i];\n        var count =\
    \ 0;\n        for(var j = 0; j < lst.length; j++){\n            if(lst[j] == num){\n\
    \                count += 1;\n            }\n        }\n        if(count >= num\
    \ && num > max){\n            max = num;\n            maxVal = num;\n        }\n\
    \    }\n    return maxVal;\n}\n", "    // Fill this in.\n    let answer = [];\n\
    \    let maxInt = 0;\n    let frequency = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        let count = 0;\n        for (let j = 0; j < lst.length; j++)\
    \ {\n            if (lst[i] === lst[j]) {\n                count += 1;\n     \
    \       }\n        }\n        if (count >= lst[i] && count > frequency) {\n  \
    \          frequency = count;\n            maxInt = lst[i];\n        }\n    }\n\
    \    if (maxInt === 0) {\n        answer.push(-1);\n    } else {\n        answer.push(maxInt);\n\
    \    }\n    return answer;\n}", "    var counts = {};\n    for(var i = 0; i< lst.length;\
    \ i++){\n        var num = lst[i];\n        counts[num] = counts[num] ? counts[num]+1\
    \ : 1;\n    }\n    var maxInt = null;\n    var maxIntCount = null;\n    for(var\
    \ n in counts){\n        var count = counts[n];\n        if(!maxInt || count >=\
    \ maxIntCount){\n            maxInt = n;\n            maxIntCount = count;\n \
    \       }\n    }\n    if(maxIntCount >= maxInt){\n        return maxInt;\n   \
    \ }\n    return -1;\n}\n", "    let dict = new Map();\n    for(let item of lst){\n\
    \        if(dict.has(item)){\n            dict.set(item, dict.get(item) + 1);\n\
    \        }else{\n            dict.set(item, 1);\n        }\n    }\n    let max\
    \ = -1;\n    for(let [key, value] of dict){\n        if(key >= value && key >\
    \ max){\n            max = key;\n        }\n    }\n    return max;\n}", "  var\
    \ newLst = lst.sort(function(a,b){\n    return a-b;\n  });\n  var counter = 0;\n\
    \  var max = 0;\n  var num = -1;\n  for(var i = 0; i < newLst.length; i++){\n\
    \    counter++;\n    if(newLst[i+1] != newLst[i]){\n      if(counter >= newLst[i]){\n\
    \        max = newLst[i];\n        if(max > num){\n          num = max;\n    \
    \    }\n      }\n      counter = 0;\n    }\n  }\n  return num;\n}", "    let count\
    \ = 1;\n    let ret = -1;\n    let sorted = [...lst].sort((a,b) => a-b);\n   \
    \ for(let i = 0; i < sorted.length; i++){\n        if(i !== sorted.length - 1\
    \ && sorted[i] === sorted[i+1]){\n            count++;\n        } else {\n   \
    \         if(count >= sorted[i]){\n                ret = sorted[i];\n        \
    \    }\n            count = 1;\n        }\n    }\n    return ret;\n}", "    let\
    \ s = new Set(lst)\n    let result = -1\n    let counter = 0\n    for(const elem\
    \ of s){\n        if(elem > counter && lst.filter(e => e === elem).length >= elem){\n\
    \            result = elem\n            counter = elem\n        }\n    }\n   \
    \ return result\n}\n", "    var obj = {};\n    var count = 0;\n    for(var i =\
    \ 0; i < lst.length; i++){\n        if(obj[lst[i]]){\n            obj[lst[i]]\
    \ += 1;\n        }\n        else{\n            obj[lst[i]] = 1;\n        }\n \
    \   }\n    for(var key in obj){\n        if(obj[key] >= key){\n            count\
    \ += 1;\n        }\n    }\n    if(count === 0){\n        return -1;\n    }\n \
    \   return count;\n}", "    let a = lst.length;\n    let ans = -1;\n    for(let\
    \ i = 0; i < a; i++){\n        let count = 0;\n        for(let j = 0; j < a; j++){\n\
    \            if(lst[i] == lst[j]){\n                count++;\n            }\n\
    \        }\n        if(count >= lst[i] && lst[i] > ans){\n            ans = lst[i];\n\
    \        }\n    }\n    return ans;\n}", "\tvar counts = [0,0,0,0,0,0,0,0,0,0];\n\
    \tfor (var i = 0; i < lst.length; i++){\n\t\tcounts[lst[i]]++;\n\t}\n\tfor (var\
    \ j = 0; j < counts.length; j++){\n\t\tif (counts[j] >= j){\n\t\t\treturn j;\n\
    \t\t}\n\t}\n\treturn -1;\n}\n", "    var max = 0\n    var count = 0\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max\
    \ = lst[i]\n        }\n    }\n    for (let j = 1; j <= max; j++) {\n        count\
    \ = 0\n        for (let i = 0; i < lst.length; i++) {\n            if (lst[i]\
    \ == j) {\n                count++\n            }\n        }\n        if (count\
    \ >= j) {\n            return j\n        }\n    }\n    return -1\n}", "    let\
    \ dict = {}\n    for (let num of lst){\n        if (num in dict){\n          \
    \  dict[num] += 1\n        }\n        else{\n            dict[num] = 1\n     \
    \   }\n    }\n    let result = -1\n    for (let key in dict){\n        if (dict[key]\
    \ >= key && key > result){\n            result = key\n        }\n    }\n    return\
    \ result\n}\n", "\n}", "\n}\n", "    let result = {}\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(result[lst[i]]){\n            result[lst[i]]++\n        }\
    \ else {\n            result[lst[i]] = 1\n        }\n    }\n    let answer = -1\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(result[lst[i]] >= lst[i]\
    \ && lst[i] > answer){\n            answer = lst[i]\n        }\n    }\n    return\
    \ answer\n}\n", "  let dictionary = {}\n  let output = -1\n  for (let i = 0; i\
    \ < lst.length; i++){\n    if (dictionary[lst[i]] === undefined){\n      dictionary[lst[i]]\
    \ = 1\n    }\n    else{\n      dictionary[lst[i]] += 1\n    }\n  }\n  let keys\
    \ = Object.keys(dictionary)\n  for (let i = 0; i < keys.length; i++){\n    if\
    \ (dictionary[keys[i]] >= parseInt(keys[i])){\n      output = parseInt(keys[i])\n\
    \    }\n  }\n  return output\n}", "    const counts = {};\n    const result =\
    \ {};\n    let highestFreq = 0;\n    let currentFreq = 0;\n    let highestCount\
    \ = 0;\n    let currentCount = 0;\n    let answer = -1;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        currentCount = lst[i];\n        counts[currentCount]\
    \ = counts[currentCount] + 1 || 1;\n        currentFreq = counts[currentCount];\n\
    \        result[currentCount] = currentFreq;\n        if(currentFreq >= currentCount\
    \ && currentCount > highestCount){\n            highestCount = currentCount;\n\
    \            highestFreq = currentFreq;\n            answer = highestCount;\n\
    \        }\n    }\n    return answer;\n}\n", "    var d = new Object();\n    var\
    \ max = 0;\n    var ret = -1;\n    for(var i=0; i<lst.length; i++){\n        if(lst[i]\
    \ in d){\n            d[lst[i]]++;\n        }else{\n            d[lst[i]] = 1;\n\
    \        }\n        if(d[lst[i]] >= lst[i] && lst[i] > max){\n            max\
    \ = lst[i];\n            ret = lst[i];\n        }\n    }\n    return ret;\n}\n\
    \nvar test1 = [4, 1, 2, 2, 3, 1];\nvar test2 = [1, 2, 2, 3, 3, 3, 4, 4, 4];\n\
    var test3 = [5, 5, 4, 4, 4];", "    let max = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        let val = lst[i];\n        if(lst.filter(x => x === val).length\
    \ >= val && val > max){\n            max = val;\n        }\n    }\n    return\
    \ max;\n}\n", "    let freq = {}\n    let max = 0\n    for(let i = 0; i < lst.length;\
    \ i++){\n        freq[lst[i]] = freq[lst[i]]+1 || 1\n        if(lst[i] > max){\n\
    \            max = lst[i]\n        }\n    }\n    for(let i = max; i > 0; i--){\n\
    \        if(freq[i] >= i){\n            return i\n        }\n    }\n    return\
    \ -1\n}\n", "    return [...new Set(lst)].filter(x => lst.filter(y => y === x).length\
    \ >= x).sort((a, b) => b - a)[0] || -1;\n}\n", "    let freq={};\n    for(let\
    \ i of lst){\n        if(freq[i]){\n            freq[i]++;\n        }\n      \
    \  else{\n            freq[i]=1;\n        }\n    }\n    console.log(freq);\n \
    \   let keys=Object.keys(freq);\n    let maxVal=-1;\n    for(let i of keys){\n\
    \        if(i<=freq[i] && maxVal<i){\n            maxVal=i;\n        }\n    }\n\
    \    return maxVal;\n}\n", "  let arr = lst.sort((a,b) => a - b);\n  let ans =\
    \ -1;\n  for(let i = 0; i < arr.length; i++){\n    let j = i;\n    let cnt = 0;\n\
    \    while(arr[j] === arr[i]){\n      cnt++;\n      j++;\n    }\n    if(cnt >=\
    \ arr[i]) ans = arr[i];\n    i = j - 1;\n  }\n  return ans;\n}", "  //YOUR CODE\
    \ HERE\n}\n", "    let frequencies = lst.reduce((acc,num)=>{\n        acc[num]\
    \ ? acc[num]++ : acc[num] = 1;\n        return acc;\n    },{});\n    let result\
    \ = -1;\n    for(let key in frequencies){\n        if(parseInt(key) <= frequencies[key]\
    \ && parseInt(key) > result){\n            result = parseInt(key);\n        }\n\
    \    }\n    return result;\n}\n", "    if(lst.length === 0) return -1;\n    let\
    \ count = {};\n    for(let i = 0; i < lst.length; i++){\n        if(count[lst[i]])\
    \ count[lst[i]]++;\n        else count[lst[i]] = 1;\n    }\n    let nums = Object.keys(count);\n\
    \    let ans = -1;\n    for(let i = 0; i < nums.length; i++){\n        if(count[nums[i]]\
    \ >= nums[i] && nums[i] > ans) ans = nums[i];\n    }\n    return ans;\n}\n", " \
    \ let dic = {};\n  let max = {};\n  for(let i = 0; i < lst.length; i++){\n   \
    \ if(dic[lst[i]]){\n      dic[lst[i]] += 1;\n    }else{\n      dic[lst[i]] = 1;\n\
    \    }\n  }\n  for(let key in dic){\n    if(dic[key] >= parseInt(key)){\n    \
    \  max[key] = dic[key];\n    }\n  }\n  let max_key = Math.max(...Object.keys(max));\n\
    \  if(max_key){\n    return max_key;\n  }else{\n    return -1;\n  }\n}\n", " \
    \ var obj = {};\n  var key = null;\n  var max = 0;\n  var result = -1;\n  for(var\
    \ i = 0; i < lst.length; i++){\n    key = lst[i];\n    if(obj[key] === undefined){\n\
    \      obj[key] = 1;\n    }else{\n      obj[key]++;\n    }\n  }\n  for(var key\
    \ in obj){\n    if(obj[key] >= key && key > max){\n      max = key;\n      result\
    \ = key;\n    }\n  }\n  return result;\n}\n", "    let frequency = {};\n    for\
    \ (let i=0; i<lst.length; i++){\n        if (frequency[lst[i]] === undefined){\n\
    \            frequency[lst[i]] = 1;\n        } else {\n            frequency[lst[i]]\
    \ += 1;\n        }\n    }\n    let result = -1;\n    for (const key in frequency){\n\
    \        if (frequency[key] >= key && key > result){\n            result = key;\n\
    \        }\n    }\n    return result;\n}\n", "    let seen = {}\n    lst.forEach(i\
    \ => seen[i] = (seen[i] || 0) + 1)\n    return Math.max(...lst.filter(i => seen[i]\
    \ >= i).sort((a,b) => b-a))\n}\n", "    //code here...\n}\n", "    // your code\
    \ here\n    let f = {};\n    let m = -1;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        f[lst[i]] = f[lst[i]] + 1 || 1;\n        if (f[lst[i]] >= lst[i]\
    \ && lst[i] > m) m = lst[i];\n    }\n    return m;\n}\n", "    if (lst.length\
    \ === 0) {\n        return -1;\n    }\n    lst.sort((a, b) => b - a);\n    let\
    \ max = lst[0];\n    let count = 1;\n    for (let i = 1; i < lst.length; i++)\
    \ {\n        if (lst[i] === max) {\n            count += 1;\n        } else {\n\
    \            if (max > count) {\n                return max;\n            } else\
    \ {\n                max = lst[i];\n                count = 1;\n            }\n\
    \        }\n    }\n    return max > count ? max : -1;\n}\n", "    let obj = {};\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(!obj[lst[i]]){\n       \
    \     obj[lst[i]] = 1;\n        } else {\n            obj[lst[i]]++;\n       \
    \ }\n    }\n    let result = -1;\n    let temp = 0;\n    for(let key in obj){\n\
    \        if(key > temp && obj[key] >= parseInt(key)){\n            temp = key;\n\
    \            result = key;\n        }\n    }\n    return result;\n}", "    for\
    \ (let i=lst.length; i>0; i--){\n        if (lst.indexOf(i) !== -1 && lst.lastIndexOf(i)\
    \ !== -1 && lst.lastIndexOf(i) - lst.indexOf(i) >= i-1){\n            return i;\n\
    \        }\n    }\n    return -1;\n}", "    if(lst.length == 0){\n        return\
    \ -1;\n    }\n    var exist = false;\n    lst.sort(function(a, b){return a-b});\n\
    \    var max_freq = lst.length;\n    // console.log(lst);\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(lst[i] == lst[i+1]){\n            max_freq\
    \ = max_freq - 1;\n        }\n        else{\n            if(lst[i] <= max_freq){\n\
    \                return lst[i];\n            }\n            else{\n          \
    \      max_freq = max_freq - 1;\n            }\n        }\n    }\n    return -1;\n\
    }", "    let max = 1\n    let set = new Set(lst)\n    for (let i of set){\n  \
    \      if (lst.filter(x => x === i).length >= i && i > max){\n            max\
    \ = i\n        }\n    }\n    return max > 1 ? max : -1\n}\n", "    // your code\
    \ here\n}", "    let obj = {};\n    for(let i=0; i<lst.length; i++){\n       \
    \ if(obj[lst[i]] === undefined){\n            obj[lst[i]] = 1;\n        }\n  \
    \      else{\n            obj[lst[i]] += 1;\n        }\n    }\n    for(let i=lst.length;\
    \ i>0; i--){\n        if(obj[i] !== undefined && obj[i] >= i){\n            return\
    \ i;\n        }\n    }\n    return -1;\n}\n", "  if (lst.length === 0) {\n   \
    \ return -1;\n  }\n  var newObj = {};\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    if (!newObj[lst[i]]) {\n      newObj[lst[i]] = 1;\n    } else {\n   \
    \   newObj[lst[i]] += 1;\n    }\n  }\n  var newArr = Object.entries(newObj);\n\
    \  newArr.sort(function(a, b) {\n    return a[0] - b[0];\n  });\n  console.log(newArr);\n\
    \  var largest = -1;\n  for (var j = 0; j < newArr.length; j++) {\n    if (newArr[j][0]\
    \ > newArr[j][1]) {\n      continue;\n    } else if (newArr[j][0] <= newArr[j][1])\
    \ {\n      largest = newArr[j][0];\n    }\n  }\n  return largest;\n}\n\nsearch([4,\
    \ 1, 2, 2, 3, 1]);\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]);\nsearch([5, 5, 4, 4,\
    \ 4]);", "    // Implement your code here\n    var result = {},\n        max =\
    \ {\n            value: 0,\n            count: -1\n        };\n    for (var i\
    \ = 0; i < lst.length; i++) {\n        var num = lst[i];\n        if (!result[num])\
    \ {\n            result[num] = 1;\n        } else {\n            result[num]++;\n\
    \        }\n    }\n    for (var key in result) {\n        if (result[key] >= key\
    \ && result[key] > max.count) {\n            max.value = key;\n            max.count\
    \ = result[key];\n        }\n    }\n    return max.value || -1;\n}\n", "    if(lst.length\
    \ === 0) return -1;\n    let freqCount = {};\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(freqCount[lst[i]]){\n            freqCount[lst[i]] += 1;\n\
    \        }else{\n            freqCount[lst[i]] = 1;\n        }\n    }\n    let\
    \ biggest = 0;\n    for(let j = 0; j < lst.length; j++){\n        if(freqCount[lst[j]]\
    \ >= lst[j] && lst[j] > biggest){\n            biggest = lst[j];\n        }\n\
    \    }\n    if(biggest === 0) return -1;\n    return biggest;\n}", "  \n    var\
    \ count = 1;\n    var maxFreq = 0;\n    var integer = 0;\n    var maxInter = -1;\n\
    \    lst.sort((a,b) => {return a-b;});\n    //console.log(lst);\n    for(var i\
    \ = 0; i < lst.length; i++){\n        if(lst[i] === lst[i+1]){\n            count++;\n\
    \        }else{\n            if(count >= lst[i]){\n                maxFreq = count;\n\
    \                integer = lst[i];\n            }\n            count = 1;\n  \
    \      }\n    }\n    //console.log(integer);\n    for(var j = 0; j < lst.length;\
    \ j++){\n        if(lst[j] === integer){\n            maxInter = integer;\n  \
    \      }\n    }\n    return maxInter;\n}", "    var counts = {};\n    var max\
    \ = -1;\n    var max_i = -1;\n    for(var i = 0; i < lst.length; i++){\n     \
    \   var key = lst[i];\n        if(!counts[key]){\n            counts[key] = 1;\n\
    \        }\n        else{\n            counts[key] += 1;\n        }\n        if(max\
    \ < counts[key] && counts[key] >= key){\n            max = counts[key];\n    \
    \        max_i = key;\n        }\n    }\n    return max_i;\n}", "    let d = {};\n\
    \    for (let i of lst){\n        if (!d[i]){\n            d[i] = 1;\n       \
    \ }\n        else{\n            d[i] += 1;\n        }\n    }\n    let max = -1;\n\
    \    for (let i in d){\n        if (d[i] >= i && max < i){\n            max =\
    \ i;\n        }\n    }\n    return max;\n}", "    let greater = -1;\n    let frequency\
    \ = 0;\n    let counter = 0;\n    let dict = {};\n    for(let i = 0; i < lst.length;\
    \ i++){\n        counter = 0;\n        for(let j = 0; j < lst.length; j++){\n\
    \            if(lst[i] === lst[j]){\n                counter += 1;\n         \
    \   }\n        }\n        dict[lst[i]] = counter;\n    }\n    for(let key in dict){\n\
    \        if(Number(key) >= dict[key] && Number(key) > greater){\n            greater\
    \ = Number(key);\n        }\n    }\n    return greater;\n}", "  // First we create\
    \ a new array, that contains the frequency of numbers in the lst array.\n  //\
    \ the frequency of a number can be calculated by the number of elements that are\
    \ equal to that number in the lst array.\n  var frequency = []\n  // Loop through\
    \ the lst array.\n  for(var i = 0; i < lst.length; i++){\n    // Use the filter()\
    \ method to check how many numbers are equal to the current number.\n    var count\
    \ = lst.filter(function(element){\n      return element == lst[i]\n    })\n  \
    \  // Add the count to the frequency array.\n    frequency.push(count.length)\n\
    \  }\n  // Loop through the lst array.\n  for(var i = 0; i < lst.length; i++){\n\
    \    // Check if the current number is greater than zero and its frequency is\
    \ greater than or equal to itself.\n    if(lst[i] > 0 && frequency[i] >= lst[i]){\n\
    \      // Return the number if the above condition is true.\n      return lst[i]\n\
    \    }\n  }\n  // Return -1 if no such a value exist.\n  return -1\n}", "    //\
    \ Your code here\n}\n", "    if(lst.length == 0){\n        return -1;\n    }\n\
    \    const arr = Array.from(new Set(lst)).sort();\n    for(let i = arr.length\
    \ - 1; i >= 0; i--){\n        if(arr[i] == lst.filter(x => x == arr[i]).length){\n\
    \            return arr[i];\n        }\n    }\n    return -1;\n}", "  var newList\
    \ = [];\n  for(var i = 0; i < lst.length; i++){\n    newList.push(lst[i]);\n \
    \ }\n  newList.sort();\n  var mostFrequent = newList[0];\n  var frequency = 1;\n\
    \  var counter = 1;\n  for(var j = 1; j < newList.length; j++){\n    if(newList[j]\
    \ === newList[j-1]){\n      counter++;\n    }\n    else{\n      counter = 1;\n\
    \    }\n    if(counter > frequency){\n      frequency = counter;\n      mostFrequent\
    \ = newList[j];\n    }\n  }\n  if(frequency >= mostFrequent){\n    return mostFrequent;\n\
    \  }\n  else{\n    return -1;\n  }\n}", "    var frequencies = [],\n        max\
    \ = -1;\n    lst.forEach(function(v){\n        frequencies[v] = frequencies[v]\
    \ ? frequencies[v] + 1 : 1;\n    });\n    lst.forEach(function(v){\n        if\
    \ (frequencies[v] >= v && v > max) max = v;\n    });\n    return max;\n}", " \
    \   // your code here\n    let x = {}\n    let count = 0\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(x[lst[i]] != undefined){\n            x[lst[i]]\
    \ += 1\n        }else{\n            x[lst[i]] = 1\n        }\n    }\n    let num\
    \ = Math.max(...lst)\n    while(num > 0){\n        if(x[num] >= num){\n      \
    \      return num\n        }\n        num -= 1\n    }\n    return -1\n}", "  \
    \  let frequency = {}\n    for(let i = 0; i < lst.length; i++){\n        if(frequency[lst[i]]\
    \ === undefined){\n            frequency[lst[i]] = 1\n        } else {\n     \
    \       frequency[lst[i]]++\n        }\n    }\n    let max = -1\n    for(let i\
    \ = 0; i < lst.length; i++){\n        if(frequency[lst[i]] >= lst[i] && lst[i]\
    \ > max){\n            max = lst[i]\n        }\n    }\n    return max\n}\n", " \
    \   let sortArr = [...new Set(lst)].sort((a,b) => a-b)\n    let lstObj = lst.reduce((a,c)\
    \ => {\n        a[c] = a[c] ? a[c] + 1 : 1\n        return a\n    },{})\n    let\
    \ result = -1\n    for(i = sortArr.length - 1; i >= 0; i--){\n        if(sortArr[i]\
    \ == lstObj[sortArr[i]]){\n            result = sortArr[i]\n            break\n\
    \        }\n    }\n    return result\n}\n", "    let counted = count(lst);\n \
    \   let keys = Object.keys(counted);\n    let result = keys.filter(el => {\n \
    \       if (el > counted[el]){\n            return el;\n        }\n    });\n \
    \   return result[0] || -1;\n}\n", "    var count = 0;\n    for(let i = 0; i <\
    \ lst.length; i++){\n        for(let j = 0; j < lst.length; j++){\n          \
    \  if(lst[i] == lst[j]){\n                count++;\n            }\n        }\n\
    \        if(count >= lst[i]){\n            return lst[i];\n        }\n       \
    \ count = 0;\n    }\n    return -1;\n}\nvar lst = [5, 5, 4, 4, 4];", "    let\
    \ dictionary = {};\n    let max = -1;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(dictionary[lst[i]]){\n            dictionary[lst[i]] += 1;\n     \
    \   }\n        else{\n            dictionary[lst[i]] = 1;\n        }\n    }\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(dictionary[lst[i]] >= lst[i]\
    \ && lst[i] > max){\n            max = lst[i];\n        }\n    }\n    return max;\n\
    }\n", "    var temp = [];\n    var arr = [];\n    var max = 0;\n    var output\
    \ = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(temp.indexOf(lst[i])\
    \ === -1){\n            temp.push(lst[i]);\n            arr.push(1);\n       \
    \ }\n        else{\n            arr[temp.indexOf(lst[i])]++;\n        }\n    }\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] >= temp[i] && temp[i]\
    \ > max){\n            max = temp[i];\n            output = temp[i];\n       \
    \ }\n    }\n    if(output === 0){\n        return -1;\n    }\n    return output;\n\
    }", "  let lst2 = lst.filter(val => val > 0).sort();\n  let x = lst2.length;\n\
    \  for (let i = 0; i < x; i++) {\n    let freq = lst2.filter(v => v === lst2[i]).length;\n\
    \    if (freq >= lst2[i]) return lst2[i];\n  }\n  return -1;\n}", "    for (var\
    \ i = lst.length; i > 0; i--){\n        if (lst.filter(function(a){return a ==\
    \ i}).length >= i){\n            return i;\n        }\n    }\n    return -1;\n\
    }", "    let frequency = {}\n    let ans = -1\n    let maxFreq = -1\n    for(let\
    \ i=0; i<lst.length; i++){\n        if(frequency[lst[i]] == undefined){\n    \
    \        frequency[lst[i]] = 1\n        }\n        else{\n            frequency[lst[i]]\
    \ += 1\n        }\n    }\n    for(let key in frequency){\n        if(frequency[key]\
    \ >= key && key >= maxFreq){\n            maxFreq = key\n            ans = maxFreq\n\
    \        }\n    }\n    return ans\n}", "    let int = 0;\n    let count = 0;\n\
    \    let final = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ > int){\n            int = lst[i];\n        }\n    }\n    for(let j = 0; j <\
    \ lst.length; j++){\n        if(lst[j] == int){\n            count++;\n      \
    \  }\n    }\n    if(count < int){\n        return -1;\n    }\n    else{\n    \
    \    return int;\n    }\n}\n", "    // TODO: Implement function\n}\n", "    var\
    \ obj = {};\n    var max = 0;\n    var result = -1;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(!obj[lst[i]]){\n            obj[lst[i]] = 1;\n        }\n\
    \        else{\n            obj[lst[i]] += 1;\n        }\n    }\n    for(var key\
    \ in obj){\n        if(obj[key] >= key && obj[key] > max){\n            max =\
    \ obj[key];\n            result = key;\n        }\n    }\n    return result;\n\
    }\n", "    function genObj(arr){\n        var obj = {};\n        for(var i = 0;\
    \ i < arr.length; i++){\n            if(!obj[arr[i]]){\n                obj[arr[i]]\
    \ = 1;\n            }\n            else{\n                obj[arr[i]]++;\n   \
    \         }\n        }\n        return obj;\n    }\n    var obj = genObj(lst);\n\
    \    var keys = Object.keys(obj);\n    keys.sort(function(a, b){return a - b});\n\
    \    for(var i = keys.length - 1; i >= 0; i--){\n        if(obj[keys[i]] >= keys[i]){\n\
    \            return keys[i];\n        }\n    }\n    return -1;\n}\n", "    let\
    \ obj = {};\n    let max = 0;\n    for(let i = 0; i < lst.length; i++){\n    \
    \    if(obj[lst[i]]){\n            obj[lst[i]]++;\n        }\n        else{\n\
    \            obj[lst[i]] = 1;\n        }\n    }\n    for(let key in obj){\n  \
    \      if(obj[key] >= key && key > max){\n            max = key;\n        }\n\
    \    }\n    if(max === 0){\n        return -1;\n    }\n    return max;\n}\n",
  "    let map = {};\n    for(let i=0; i<lst.length; i++){\n        if(map[lst[i]]){\n\
    \            map[lst[i]] += 1;\n        }else{\n            map[lst[i]] = 1;\n\
    \        }\n    }\n    let objArr = Object.keys(map);\n    for(let i=0; i<objArr.length;\
    \ i++){\n        if(map[objArr[i]] >= Number(objArr[i])){\n            return\
    \ Number(objArr[i]);\n        }\n    }\n    return -1;\n}", "    var max_num =\
    \ Math.max(...lst);\n    var counts = lst.reduce((acc,x) => (acc[x] = (acc[x]\
    \ || 0) + 1, acc), {});\n    if (counts[max_num] >= max_num) {\n        return\
    \ max_num;\n    } else {\n        return -1;\n    }\n}\n", "  let dict = {};\n\
    \  let max = -1;\n  for (let i = 0; i < lst.length; i++){\n    let num = lst[i];\n\
    \    if (num > max){\n      max = num;\n    }\n    if (dict[num]){\n      dict[num]\
    \ += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  for (let i = max; i\
    \ > 0; i--){\n    if (dict[i] >= i){\n      return i;\n    }\n  }\n  return -1;\n\
    }", "    // Your code here\n    let freq = {}\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] in freq){\n            freq[lst[i]] += 1\n        }else{\n\
    \            freq[lst[i]] = 1\n        }\n    }\n    let list = Object.entries(freq)\n\
    \    list.sort(function(a, b){\n        return b[1] - a[1]\n    })\n    // console.log(list)\n\
    \    let max = parseInt(list[0][0])\n    let occ = list[0][1]\n    if(max < occ){\n\
    \        return max\n    }else{\n        return -1\n    }\n}", "    let result\
    \ = 0;\n    for (let i = 1; i < lst.length; i++){\n        if (lst.filter(x =>\
    \ x === i).length >= i){\n            result = i;\n        }\n    }\n    return\
    \ result === 0 ? -1 : result;\n}", "    // YOUR CODE HERE\n    let max = -1;\n\
    \    let dict = {};\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ > max) {\n            max = lst[i];\n        }\n        if (dict[lst[i]]) {\n\
    \            dict[lst[i]]++;\n        } else {\n            dict[lst[i]] = 1;\n\
    \        }\n    }\n    for (let i = 1; i <= max; i++) {\n        if (dict[i] >=\
    \ i) {\n            return i;\n        }\n    }\n    return -1;\n}\n", "  // your\
    \ code here\n}\n", "    let dic = {}\n    for(let e of lst){\n        if(e in\
    \ dic){\n            dic[e]+=1\n        }\n        else{\n            dic[e]=1\n\
    \        }\n    }\n    let keys = Object.keys(dic)\n    let max_key = 0\n    for(let\
    \ k of keys){\n        if(Number(k)>max_key && dic[k]>=Number(k)){\n         \
    \   max_key = Number(k)\n        }\n    }\n    if(max_key === 0){\n        return\
    \ -1\n    }\n    return max_key\n}", "    var numbers = [];\n    for(var i = 0;\
    \ i < lst.length; i++){\n        if(numbers[lst[i]] === undefined){\n        \
    \    numbers[lst[i]] = 1;\n        }\n        else{\n            numbers[lst[i]]\
    \ += 1;\n        }\n    }\n    for(var j = lst.length - 1; j > 0; j--){\n    \
    \    if(numbers[j] !== undefined && numbers[j] >= j){\n            return j;\n\
    \        }\n    }\n    return -1;\n}", "    //your code here\n    function isFrequency(a,b){\n\
    \        let count=0;\n        for(let i=0;i<lst.length;i++){\n            if(lst[i]==a){\n\
    \                count+=1;\n            }\n        }\n        if(a<=count){\n\
    \            return a;\n        }\n        else if(a>count){\n            return\
    \ -1;\n        }\n    }\n    let list = lst.filter(x=>x>0);\n    let h = list.sort((a,b)=>a-b);\n\
    \    let f = h.map(x=>x);\n    let r = f.map(x=>isFrequency(x,f));\n    return\
    \ Math.max(...r);\n}", "\tvar max = Math.max(...lst);\n\tvar freq = [];\n\tvar\
    \ result = -1;\n\tfor(var i = 0; i < max; i++){\n\t\tfreq.push(0);\n\t}\n\tfor(var\
    \ i = 0; i < lst.length; i++){\n\t\tfreq[lst[i] - 1]++;\n\t}\n\tfor(var i = 0;\
    \ i < max; i++){\n\t\tif(freq[i] >= i + 1){\n\t\t\tresult = i + 1;\n\t\t}\n\t\
    }\n\treturn result;\n}\n", "    var results = 0;\n    var counter = 0;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst.length; j++){\n\
    \            if(lst[i] === lst[j]){\n                counter++;\n            }\n\
    \        }\n        if(counter >= lst[i] && lst[i] > results){\n            results\
    \ = lst[i];\n        }\n        counter = 0;\n    }\n    if(results === 0){\n\
    \        return -1;\n    }\n    return results;\n}\n", "    //YOUR CODE HERE\n\
    \    const uniqueLst = [];\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   if (!uniqueLst.includes(lst[i])) {\n            uniqueLst.push(lst[i]);\n\
    \        }\n    }\n    let result = -1;\n    for (let i = 0; i < uniqueLst.length;\
    \ i++) {\n        let counter = 0;\n        for (let j = 0; j < lst.length; j++)\
    \ {\n            if (uniqueLst[i] === lst[j]) {\n                counter++;\n\
    \            }\n        }\n        if (counter >= uniqueLst[i]) {\n          \
    \  result = uniqueLst[i];\n        }\n    }\n    return result;\n}", "    let\
    \ b = {};\n    for(let i = 0; i < lst.length; i++){\n        if(b[lst[i]]) {b[lst[i]]\
    \ += 1;}\n        else {b[lst[i]] = 1;}\n    }\n    let c = Object.entries(b).sort((a,b)\
    \ => b[1] - a[1]);\n    for(let i = 0; i < c.length; i++){\n        if(c[i][0]\
    \ <= c[i][1]){\n            return c[i][0];\n        }\n    }\n    return -1;\n\
    }", "  let count = {};\n  for (let i = 0; i < lst.length; i++){\n    let num =\
    \ lst[i];\n    if (!count[num]){\n      count[num] = 1;\n    }\n    else {\n \
    \     count[num] += 1;\n    }\n  }\n  let arr = Object.keys(count);\n  arr.sort(function(a,\
    \ b){return a-b});\n  for (let j = arr.length - 1; j >= 0; j--){\n    if (count[arr[j]]\
    \ >= arr[j]){\n      return arr[j];\n    }\n  }\n  return -1;\n}\n", "    let\
    \ res = 0;\n    let count = 0;\n    for(let i = 0; i < lst.length; i++){\n   \
    \     for(let j = 0; j < lst.length; j++){\n            if(lst[i] > 0 && lst[i]\
    \ === lst[j]){\n                count++;\n            }\n        }\n        if(count\
    \ >= lst[i]){\n            res = lst[i];\n        }\n        count = 0;\n    }\n\
    \    if(res === 0){\n        return -1;\n    }\n    return res;\n}", "    let\
    \ counts = {};\n    let isFound = false;\n    let answer = -1;\n    lst.forEach(item\
    \ => {\n        if(!counts[item]){\n            counts[item] = 1;\n        } else\
    \ {\n            counts[item] += 1;\n        }\n    });\n    for(let i=lst.length;\
    \ i>=0; i--){\n        if(counts[i] >= i){\n            answer = i;\n        \
    \    isFound = true;\n            break;\n        }\n    }\n    if(!isFound){\n\
    \        answer = -1;\n    }\n    return answer;\n}", "    // your code here\n\
    \    let freq = {}\n    let output = []\n    for(let i = 0; i < lst.length; i++){\n\
    \        let num = lst[i]\n        if(freq[num]){\n            freq[num] += 1\n\
    \        }else{\n            freq[num] = 1\n        }\n    }\n    let nums = Object.keys(freq)\n\
    \    for(let i = 0; i < nums.length; i++){\n        let num = nums[i]\n      \
    \  if(parseInt(num) <= freq[num]){\n            output.push(num)\n        }\n\
    \    }\n    if(output.length === 0){\n        return -1\n    }else{\n        let\
    \ max = output[0]\n        for(let i = 0; i < output.length; i++){\n         \
    \   if(parseInt(output[i]) > parseInt(max)){\n                max = output[i]\n\
    \            }\n        }\n        return max\n    }\n}\n", "    let x = lst.reduce((map,\
    \ y) => {\n        map[y] = (map[y] || 0) + 1;\n        return map;\n    }, {});\n\
    \    let keys = Object.keys(x);\n    for (i = 0; i < keys.length; i++) {\n   \
    \     if (x[keys[i]] >= keys[i]) {\n            return keys[i];\n        }\n \
    \   }\n    return -1;\n}\n", "  let max_frequency = 0;\n  let max_number = 0;\n\
    \  let numbers = {}\n  for (let i=0; i<lst.length; i++){\n    let number = lst[i];\n\
    \    if (numbers[number] === undefined){\n      numbers[number] = 1;\n    } else\
    \ {\n      numbers[number] += 1;\n    }\n    if (numbers[number] >= number &&\
    \ number > max_number){\n      max_number = number;\n    }\n  }\n  return max_number\n\
    }\n", "\tvar dict = {};\n\tfor (var i = 0; i < lst.length; i++){\n\t\tif (lst[i]\
    \ in dict){\n\t\t\tdict[lst[i]] += 1;\n\t\t}\n\t\telse{\n\t\t\tdict[lst[i]] =\
    \ 1;\n\t\t}\n\t}\n\tvar keys = Object.keys(dict);\n\tvar greatest = 1;\n\tfor\
    \ (var j = 0; j < keys.length; j++){\n\t\tif (keys[j] < dict[keys[j]] && keys[j]\
    \ > greatest){\n\t\t\tgreatest = keys[j];\n\t\t}\n\t}\n\tif (greatest === 1){\n\
    \t\treturn -1;\n\t}\n\treturn greatest;\n}\n", "\tlet dict = {};\n\tlet maximum\
    \ = -1;\n\tfor (let i=0; i<lst.length; i++){\n\t\tif (lst[i] in dict){\n\t\t\t\
    dict[lst[i]] += 1;\n\t\t} else {\n\t\t\tdict[lst[i]] = 1;\n\t\t}\n\t}\n\tfor (key\
    \ in dict){\n\t\tif (dict[key] >= key && key > maximum){\n\t\t\tmaximum = key;\n\
    \t\t}\n\t}\n\treturn maximum;\n}", "    let arr = [...new Set(lst)];\n    let\
    \ sorted_arr = arr.sort((a, b) => b - a);\n    let result = -1;\n    for (let\
    \ i = 0; i < sorted_arr.length; i++) {\n        if (lst.filter(num => num ===\
    \ sorted_arr[i]).length >= sorted_arr[i]) {\n            result = sorted_arr[i];\n\
    \            break;\n        }\n    }\n    return result;\n}", "\t// add code\
    \ here\n\tvar arr = []\n\tfor(var i = 0; i < lst.length; i++){\n\t\tvar count\
    \ = 0\n\t\tfor(var j = 0; j < lst.length; j++){\n\t\t\tif(lst[i] == lst[j]){\n\
    \t\t\t\tcount += 1\n\t\t\t}\n\t\t}\n\t\tif(count >= lst[i]){\n\t\t\tarr.push(lst[i])\n\
    \t\t}\n\t}\n\tvar max = Math.max(...arr)\n\treturn max > 0 ? max : -1\n}\n", " \
    \   var max=Math.max(...lst);\n    var cnt=0;\n    var cnt1=0;\n    var a=0;\n\
    \    var b=0;\n    for(var i=0;i<lst.length;i++){\n        if(lst[i]==max){\n\
    \            cnt++;\n        }\n    }\n    if(cnt==max){\n        return max;\n\
    \    }\n    else{\n        for(var i=max-1;i>=1;i--){\n            for(var j=0;j<lst.length;j++){\n\
    \                if(lst[j]==i){\n                    cnt1++;\n               \
    \ }\n            }\n            if(cnt1==i){\n                return i;\n    \
    \        }\n            else{\n                cnt1=0;\n            }\n      \
    \  }\n    }\n    return -1;\n}\nmodule.exports = search;", "  // code goes here\n\
    \  var freq = {};\n  var max = -1;\n  for(var i = 0; i < lst.length; i++){\n \
    \   var num = lst[i];\n    if(freq[num] === undefined){\n      freq[num] = 1;\n\
    \    }else{\n      freq[num] += 1;\n    }\n    if(num > max && freq[num] >= num){\n\
    \      max = num;\n    }\n  }\n  return max;\n}", "  //your code here\n}\n", " \
    \   var mostFrequent = 0;\n    var counter = 0;\n    var result = 0;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        counter = 0;\n        for(var j = 0; j\
    \ < lst.length; j++){\n            if(lst[i] == lst[j]){\n                counter++;\n\
    \            }\n        }\n        if(counter >= lst[i] && counter > mostFrequent){\n\
    \            mostFrequent = counter;\n            result = lst[i];\n        }\n\
    \    }\n    if(result == 0){\n        return -1;\n    }else{\n        return result;\n\
    \    }\n}", "    let frequency = {}\n    for(let i = 0; i < lst.length; i++){\n\
    \        let current = lst[i]\n        if(frequency[current]){\n            frequency[current]\
    \ = frequency[current] + 1\n        }else{\n            frequency[current] = 1\n\
    \        }\n    }\n    for(let key in frequency){\n        let value = frequency[key]\n\
    \        if(key >= value){\n            return key\n        }\n    }\n    return\
    \ -1\n}\n", "    let count = {}\n    for (let i=0; i<lst.length; i++){\n     \
    \   if (lst[i] in count){\n            count[lst[i]] += 1\n        } else {\n\
    \            count[lst[i]] = 1\n        }\n    }\n    let result = []\n    for\
    \ (let key in count){\n        if (count[key] >= key){\n            result.push(key)\n\
    \        }\n    }\n    return result.length > 0 ? Math.max(...result) : -1\n}",
  "    var temp = 0;\n    for(var i = 0; i < lst.length; i++){\n        var count\
    \ = 0;\n        for(var j = 0; j < lst.length; j++){\n            if(lst[i] ==\
    \ lst[j]){\n                count += 1;\n            }\n        }\n        if(count\
    \ >= lst[i] && lst[i] > temp){\n            temp = lst[i];\n        }\n    }\n\
    \    if(temp == 0){\n        return -1;\n    }\n    return temp;\n}", "    if\
    \ (lst.length === 0) {\n        return -1;\n    }\n    var array = lst.sort();\n\
    \    var max = array[array.length - 1];\n    for (var i = max; i > 0; i--) {\n\
    \        if (array.lastIndexOf(i) - array.indexOf(i) >= i - 1) {\n           \
    \ return i;\n        }\n    }\n    return -1;\n}\n", "    let result = -1;\n \
    \   let freq = {};\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i]\
    \ in freq){\n            freq[lst[i]]++;\n        }\n        else{\n         \
    \   freq[lst[i]] = 1;\n        }\n    }\n    for (let key in freq){\n        if\
    \ (freq[key] >= key && key > result){\n            result = key;\n        }\n\
    \    }\n    return result;\n}\n", "    let dic = {};\n    for(let i=0; i<lst.length;\
    \ i++){\n        if(dic[lst[i]] === undefined){\n            dic[lst[i]] = 1;\n\
    \        }\n        else{\n            dic[lst[i]]++;\n        }\n    }\n    let\
    \ ans = -1;\n    for(let i=0; i<lst.length; i++){\n        if(dic[lst[i]]>=lst[i]\
    \ && lst[i]>ans){\n            ans = lst[i];\n        }\n    }\n    return ans;\n\
    }", "    let ints = {};\n    for(let i=0; i<lst.length; i++){\n        let num\
    \ = lst[i];\n        if(ints[num]) ints[num] += 1;\n        else ints[num] = 1;\n\
    \    }\n    let keys = Object.keys(ints);\n    keys.sort((a,b) => b-a);\n    for(let\
    \ i=0; i<keys.length; i++){\n        let key = keys[i];\n        if(ints[key]\
    \ >= key) return key;\n    }\n    return -1;\n}", "  var count = 0;\n  var max\
    \ = 0;\n  var num = -1;\n  var ans = -1;\n  for(var i = 0; i < lst.length; i++){\n\
    \    count = 0;\n    for(var j = 0; j < lst.length; j++){\n      if(lst[i] ==\
    \ lst[j]){\n        count++;\n      }\n    }\n    if(count >= lst[i]){\n     \
    \ if(count > max){\n        max = count;\n        num = lst[i];\n      }\n   \
    \ }\n  }\n  if(num > 0){\n    ans = num;\n  }\n  return ans;\n}", "    let max\
    \ = lst[0];\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n\
    \            max = lst[i];\n        }\n    }\n    let dic = {};\n    for(let i\
    \ = 0; i < lst.length; i++){\n        if(lst[i] in dic){\n            dic[lst[i]]++;\n\
    \        }\n        else{\n            dic[lst[i]] = 1;\n        }\n    }\n  \
    \  let res = -1;\n    for(let i = 1; i <= max; i++){\n        if(i in dic && dic[i]\
    \ >= i){\n            res = i;\n        }\n    }\n    return res;\n}", "    //\
    \ Write your code here\n    let max_val = 0;\n    let max_index = -1;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > max_val){\n            max_val\
    \ = lst[i];\n            max_index = i;\n        }\n    }\n    let count = 0;\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] == max_val){\n  \
    \          count += 1;\n        }\n    }\n    if(count < max_val){\n        return\
    \ -1;\n    }else{\n        return max_val;\n    }\n}", "    var counts = {};\n\
    \    for(var i = 0; i< lst.length; i++){\n        var num = lst[i];\n        counts[num]\
    \ = counts[num] ? counts[num]+1 : 1;\n    }\n    for(var i = lst.length; i > 0;\
    \ i--){\n        if(counts[i] >= i){\n            return i;\n        }\n    }\n\
    \    return -1;\n}", "    // your code here\n}", "    var freq = lst.reduce(function(acc,\
    \ curr){\n        if(acc[curr]){\n            acc[curr]++;\n        } else {\n\
    \            acc[curr] = 1;\n        }\n        return acc;\n    }, {});\n   \
    \ var great = Math.max.apply(null, lst);\n    for(var i = great; i > 0; i--){\n\
    \        if(freq[i] >= i){\n            return i;\n        }\n    }\n    return\
    \ -1;\n}", "  if (lst.length === 0) { return -1; }\n  var frequencies = {}\n \
    \ var highestFreq = 0;\n  var highestFreqInt = 0;\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] > highestFreqInt && frequencies[lst[i]] >= lst[i]) {\n\
    \      highestFreqInt = lst[i];\n    }\n    if (frequencies[lst[i]]) {\n     \
    \ frequencies[lst[i]] += 1;\n    } else {\n      frequencies[lst[i]] = 1;\n  \
    \  }\n  }\n  return highestFreqInt;\n}", "    let mostFrequent = 0;\n    let mostFrequentAmount\
    \ = 0;\n    let dict = {};\n    for(let i = 0; i < lst.length; i++){\n       \
    \ if(dict[lst[i]] === undefined){\n            dict[lst[i]] = 1;\n        }\n\
    \        else{\n            dict[lst[i]]++;\n        }\n        if(dict[lst[i]]\
    \ >= lst[i] && dict[lst[i]] > mostFrequentAmount){\n            mostFrequent =\
    \ lst[i];\n            mostFrequentAmount = dict[lst[i]];\n        }\n    }\n\
    \    if(mostFrequent === 0){\n        return -1;\n    }\n    return mostFrequent;\n\
    }", "    let count = 0;\n    let result = -1;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        count = 0;\n        for(let j = 0; j < lst.length; j++){\n  \
    \          if(lst[i] === lst[j]){\n                count += 1;\n            }\n\
    \        }\n        if(count >= lst[i] && lst[i] > result){\n            result\
    \ = lst[i];\n        }\n    }\n    return result;\n}\n", "    const freqDict =\
    \ {};\n    const uniqLst = lst.filter((item, index) => lst.indexOf(item) === index);\n\
    \    let highestFreq = null;\n    let highestFreqVal = null;\n    for (const item\
    \ of uniqLst) {\n        const count = lst.filter(value => value === item).length;\n\
    \        freqDict[item] = count;\n        if (count >= item) {\n            if\
    \ (highestFreqVal === null || highestFreqVal < item) {\n                highestFreqVal\
    \ = item;\n                highestFreq = count;\n            }\n        }\n  \
    \  }\n    return highestFreqVal === null ? -1 : highestFreqVal;\n}\n", "    let\
    \ hashmap = {}\n    for(let i = 0; i < lst.length; i++){\n        if(hashmap[lst[i]]){\n\
    \            hashmap[lst[i]]++\n        } else {\n            hashmap[lst[i]]\
    \ = 1\n        }\n    }\n    let keys = Object.keys(hashmap)\n    keys.sort((a,b)\
    \ => a - b)\n    for(let i = keys.length - 1; i >= 0; i--){\n        if(hashmap[keys[i]]\
    \ >= Number(keys[i])){\n            return Number(keys[i])\n        }\n    }\n\
    \    return -1\n}", "\tif (lst.length === 0) {\n\t\treturn -1;\n\t}\n\tvar frequencies\
    \ = {};\n\tlst.forEach(function(item){\n\t\tif (frequencies[item]) {\n\t\t\tfrequencies[item]\
    \ += 1;\n\t\t} else {\n\t\t\tfrequencies[item] = 1;\n\t\t}\n\t});\n\tvar greatest\
    \ = -1;\n\tfor (var key in frequencies) {\n\t\tif (frequencies[key] >= parseInt(key)\
    \ && parseInt(key) > greatest) {\n\t\t\tgreatest = parseInt(key);\n\t\t}\n\t}\n\
    \treturn greatest;\n}", "    let freq = new Map();\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(!freq.has(lst[i])){\n            freq.set(lst[i], 1);\n  \
    \      }else{\n            freq.set(lst[i], freq.get(lst[i]) + 1);\n        }\n\
    \    }\n    let maxFreq = 0;\n    let result = -1;\n    for(let [key, value] of\
    \ freq){\n        if(key <= value && value >= maxFreq){\n            maxFreq =\
    \ value;\n            result = key;\n        }\n    }\n    return result;\n}",
  "    for (let i = lst.length; i > 0; i--){\n        let c = lst.filter(n => n ==\
    \ i);\n        if (c.length >= i){\n            return i;\n        }\n    }\n\
    \    return -1;\n}\n", "   let n = 0;\n   let count = 0;\n   let max = 0;\n  \
    \ let countMax = 0;\n   if(lst.length === 0){\n     return -1;\n   }\n   for(let\
    \ i = 0; i < lst.length; i++){\n     if(lst[i] > max){\n       max = lst[i];\n\
    \     }\n   }\n   while(n <= max){\n     count = 0;\n     for(let j = 0; j < lst.length;\
    \ j++){\n       if(lst[j] === n){\n         count += 1;\n       }\n     }\n  \
    \   if(countMax < count){\n       countMax = count;\n     }\n     n += 1;\n  \
    \ }\n   if(countMax === 0){\n     return -1;\n   }\n   if(countMax >= max){\n\
    \     return max;\n   }\n   return countMax;\n}", "    let max = lst[0];\n   \
    \ for(let i=0; i<lst.length; i++){\n        if(lst[i] > max){\n            max\
    \ = lst[i];\n        }\n    }\n    let res = -1;\n    for(let i=0; i<lst.length;\
    \ i++){\n        if(lst[i] <= max){\n            let c = lst.filter(e => e ===\
    \ lst[i]).length;\n            if(c >= lst[i]){\n                res = lst[i];\n\
    \            }\n        }\n    }\n    return res;\n}\n", "    // your code here\n\
    \  }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\
    \  \n  \n  //----------------------------------------------------------------------\n\
    \  // 18. While Loop\n  //The function 'search' will receive an array of positive\
    \ integers and \n  // will return the first integer that is greater than zero\
    \ and that \n  // has a frequency greater than or equal to the value of the integer\
    \ itself.\n  // Examples:\n  // >>> search([4, 1, 2, 2, 3, 1])\n  // 2\n  // >>>\
    \ search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n  // 3\n  // >>> search([5, 5, 4, 4, 4])\n\
    \  // -1\n  function search(lst){\n    // your code here\n  }\n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  //----------------------------------------------------------------------\n\
    \  // 19. For Loop\n  //The function 'search' will receive an array of positive\
    \ integers and \n  // will return the first integer that is greater than zero\
    \ and that \n  // has a frequency greater than or equal to the value of the integer\
    \ itself.\n  // Examples:\n  // >>> search([4, 1, 2, 2, 3, 1])\n  // 2\n  // >>>\
    \ search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n  // 3\n  // >>> search([5, 5, 4, 4, 4])\n\
    \  // -1\n  function search(lst){\n    // your code here\n  }\n  \n  \n  \n  \n\
    \  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  //----------------------------------------------------------------------\n\
    \  // 20. Check if two arrays are identical\n  //Write a function that receives\
    \ two arrays and returns 'true' if they are identical, or 'false' otherwise.\n\
    \  //Examples:\n  // >>> arraysIdentical([1, 2, 3], [1, 2, 3])\n  //", "  var\
    \ obj = {};\n  for (var i = 0; i < lst.length; i++){\n    if (obj[lst[i]] ===\
    \ undefined){\n      obj[lst[i]] = 1;\n    }\n    else {\n      obj[lst[i]]++;\n\
    \    }\n  }\n  var result = 0;\n  for (var key in obj){\n    if (obj[key] > key\
    \ && obj[key] > result){\n      result = key;\n    }\n  }\n  if (result === 0){\n\
    \    return -1;\n  }\n  return result;\n}\n", "\tfunction mode(array)\n{\n   \
    \ if(array.length == 0)\n    \treturn null;\n    var modeMap = {};\n    var maxEl\
    \ = array[0], maxCount = 1;\n    for(var i = 0; i < array.length; i++)\n    {\n\
    \    \tvar el = array[i];\n    \tif(modeMap[el] == null)\n    \t\tmodeMap[el]\
    \ = 1;\n    \telse\n    \t\tmodeMap[el]++;\t\n    \tif(modeMap[el] > maxCount)\n\
    \    \t{\n    \t\tmaxEl = el;\n    \t\tmaxCount = modeMap[el];\n    \t}\n    }\n\
    \    return maxEl;\n}\n\tvar myMode = mode(lst);\n\tif (myMode == null) {\n\t\t\
    return -1;\n\t}else if (lst.includes(myMode)) {\n\t\treturn myMode;\n\t}else{\n\
    \t\treturn -1;\n\t}\n}\n", "    //go through the list and find the frequency\n\
    \    //return -1 if the greater integer than zero is not found\n    //iterate\
    \ the list\n    //iterate the list by first 2\n    let list = lst.sort((a,b) =>\
    \ a-b);\n    let count = 1;\n    let temp = list[0];\n    if(list[0] > 0){\n \
    \       for(let i = 0; i < list.length-1; i++){\n            if(list[i] === list[i+1]){\n\
    \                count++;\n            }else{\n                if(list[i] < count){\n\
    \                    temp = list[i];\n                }\n                count\
    \ = 1;\n            }\n        }\n        if(list[list.length-1] < count){\n \
    \           temp = list[list.length-1];\n        }\n        return temp;\n   \
    \ }else{\n        return -1;\n    }\n}", "    //your code here\n    var max =\
    \ 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n  \
    \          max = lst[i];\n        }\n    }\n    var table = new Array(max);\n\
    \    table.fill(0);\n    for(let i = 0; i < lst.length; i++){\n        table[lst[i]\
    \ - 1] += 1;\n    }\n    for(let i = 0; i < table.length; i++){\n        if(table[i]\
    \ >= i + 1){\n            return i + 1;\n        }\n    }\n    return -1;\n}",
  "    const frequency = new Map();\n    for (let i = 0; i < lst.length; i++) {\n\
    \        const key = lst[i];\n        if (frequency.has(key)) {\n            frequency.set(key,\
    \ frequency.get(key) + 1);\n        } else {\n            frequency.set(key, 1);\n\
    \        }\n    }\n    let newList = Array.from(frequency.keys()).sort((a, b)\
    \ => b - a);\n    console.log(newList);\n    for (let i = 0; i < newList.length;\
    \ i++) {\n        if (frequency.get(newList[i]) >= newList[i]) {\n           \
    \ return newList[i];\n        }\n    }\n    return -1;\n}", "  \n  let max = Math.max(...lst);\n\
    \  let result = -1;\n  let frequency = 0;\n  \n  for(let i = max; i >= 1; i--){\n\
    \    frequency = 0;\n    for(let j = 0; j < lst.length; j++){\n      if(lst[j]\
    \ === i){\n        frequency++;\n      }\n    }\n    if(frequency >= i){\n   \
    \   result = i;\n      break;\n    }\n  }\n  return result;\n}", "  if (lst.length\
    \ === 0) return -1;\n  let newLst = lst.sort((a,b) => a - b);\n  let newLst2 =\
    \ newLst.filter((v,i) => newLst.indexOf(v) === i)\n  let obj = {};\n  for (let\
    \ i = 0; i < newLst.length; i++){\n    if (obj[newLst[i]]){\n      obj[newLst[i]]\
    \ += 1;\n    }\n    else{\n      obj[newLst[i]] = 1;\n    }\n  }\n  let big =\
    \ -1;\n  for (let i = 0; i < newLst2.length; i++){\n    if (obj[newLst2[i]] >=\
    \ newLst2[i]){\n      big = newLst2[i];\n    }\n  }\n  return big;\n}\n", "  \
    \  var hash = {};\n    var max = 0;\n    var maxKey = 0;\n    for(var i = 0; i\
    \ < lst.length; i++){\n        if(!hash[lst[i]]){\n            hash[lst[i]] =\
    \ 1;\n        }else{\n            hash[lst[i]] += 1;\n        }\n    }\n    for(var\
    \ key in hash){\n        if(hash[key] >= key && hash[key] > max){\n          \
    \  max = hash[key];\n            maxKey = key;\n        }\n    }\n    if(maxKey\
    \ == 0){\n        return -1;\n    }\n    return maxKey;\n}\n", "    let newLst\
    \ = [];\n    for(let i = 0; i < lst.length; i++){\n        let x = lst[i];\n \
    \       if(x > 0){\n            if(newLst[x] > 0){\n                newLst[x]++;\n\
    \            }\n            else {\n                newLst[x] = 1;\n         \
    \   }\n        }\n    }\n    let max = -1;\n    for(let i = 0; i < newLst.length;\
    \ i++){\n        if(newLst[i] >= i){\n            max = i;\n        }\n    }\n\
    \    return max;\n}\n", "    let map={}\n    for(i=0;i<lst.length;i++){\n    \
    \    if(lst[i] in map){\n            map[lst[i]]+=1\n        }else{\n        \
    \    map[lst[i]]=1\n        }\n    }\n    console.log(map)\n    let int=Object.keys(map)\n\
    \    let freq=Object.values(map)\n    let results=[0]\n    for(j=0;j<int.length;j++){\n\
    \        if(freq[j]>=int[j]){\n            results.push(parseInt(int[j]))\n  \
    \      }\n    }\n    if(Math.max(...results)===0){\n        return -1\n    }else{\n\
    \        return Math.max(...results)\n    }\n}", "    let counts = {}\n    for\
    \ (const l of lst) {\n        if (counts[l]) {\n            counts[l]++\n    \
    \    } else {\n            counts[l] = 1\n        }\n    }\n    let greatest =\
    \ -1\n    let greatestFreq = -1\n    for (const [key, val] of Object.entries(counts))\
    \ {\n        if (key >= val && val >= greatestFreq) {\n            greatest =\
    \ key\n            greatestFreq = val\n        }\n    }\n    return greatest\n\
    }\n", "    var freq={};\n    for(var i=0;i<lst.length;i++){\n        if(lst[i]\
    \ in freq){\n            freq[lst[i]]+=1;\n        }\n        else{\n        \
    \    freq[lst[i]]=1;\n        }\n    }\n    var temp=Object.keys(freq);\n    var\
    \ res=[];\n    for(var i=0;i<temp.length;i++){\n        if(freq[temp[i]]>=parseInt(temp[i])){\n\
    \            res.push(temp[i]);\n        }\n    }\n    if(res.length==0){\n  \
    \      return -1;\n    }\n    else{\n        return Math.max(...res);\n    }\n\
    }\n", "    let freqObj = {};\n    let maxFrequency = -1;\n    let maxFrequencyElement\
    \ = -1;\n    for(let i = 0; i < lst.length; i++){\n        if(!freqObj[lst[i]]){\n\
    \            freqObj[lst[i]] = 1;\n        }\n        else{\n            freqObj[lst[i]]\
    \ += 1;\n        }\n    }\n    for(let i = 0; i < lst.length; i++){\n        if(freqObj[lst[i]]\
    \ > maxFrequency && freqObj[lst[i]] >= lst[i]){\n            maxFrequency = freqObj[lst[i]];\n\
    \            maxFrequencyElement = lst[i];\n        }\n    }\n    return maxFrequencyElement;\n\
    }\n", "    let len = lst.length;\n    let map = new Map();\n    let output = -1;\n\
    \    for(let i = 0; i < len; i++){\n        if(map.has(lst[i])){\n           \
    \ map.set(lst[i], map.get(lst[i]) + 1);\n        }\n        else{\n          \
    \  map.set(lst[i], 1);\n        }\n    }\n    for(let key of map.keys()){\n  \
    \      if(key <= map.get(key)){\n            output = key;\n        }\n    }\n\
    \    return output;\n}", "    let count = 0;\n    let greatest = -1;\n    let\
    \ obj = {};\n    lst.forEach(function(number){\n        obj[number] = (obj[number]\
    \ || 0) + 1;\n    });\n    for(let i in obj){\n        count = obj[i];\n     \
    \   let num = parseInt(i);\n        if(count >= num && num > greatest){\n    \
    \        greatest = num;\n        }\n    }\n    return greatest;\n}\n", "    let\
    \ frequencyCounter = {};\n    let highestFrequency = 0;\n    let currentFrequency\
    \ = 0;\n    let highestFrequencyNumber = 0;\n    for(let num of lst){\n      \
    \  frequencyCounter[num] = frequencyCounter[num] + 1 || 1;\n        if(num > highestFrequency){\n\
    \            highestFrequency = num;\n        }\n    }\n    console.log(frequencyCounter);\n\
    \    for(let i = highestFrequency; i > 0; i--){\n        if(frequencyCounter[i]\
    \ >= i){\n            highestFrequencyNumber = i;\n            break;\n      \
    \  }\n    }\n    if(highestFrequencyNumber){\n        return highestFrequencyNumber;\n\
    \    } else {\n        return -1;\n    }\n}\n", "  let counts = new Map();\n \
    \ for (let i = 0; i < lst.length; i++) {\n    if (counts.has(lst[i])) {\n    \
    \  counts.set(lst[i], counts.get(lst[i]) + 1);\n    } else {\n      counts.set(lst[i],\
    \ 1);\n    }\n  }\n  let maxKey = -1;\n  let maxVal = -1;\n  counts.forEach((val,\
    \ key) => {\n    if (key > maxKey && val >= key) {\n      maxKey = key;\n    \
    \  maxVal = val;\n    }\n  });\n  return maxKey;\n}", "    let max_freq = 0;\n\
    \    let max_ele = 0;\n    let count = 1;\n    let i = 0;\n    while(i < lst.length){\n\
    \        let j = i + 1;\n        while(j < lst.length){\n            if(lst[i]\
    \ == lst[j]){\n                count += 1;\n            }\n            j++;\n\
    \        }\n        if(count >= lst[i] && max_freq < count){\n            max_freq\
    \ = count;\n            max_ele = lst[i];\n        }\n        count = 1;\n   \
    \     i++;\n    }\n    if(max_ele == 0){\n        return -1;\n    }\n    return\
    \ max_ele;\n}\n", "  if (typeof lst !== 'object') throw new Error('invalid input');\n\
    \  if (lst.length === 0) return -1;\n  var map = new Map();\n  for (var i = 0;\
    \ i < lst.length; i++) {\n    var elem = lst[i];\n    if (elem > 0) {\n      var\
    \ count = map.get(elem);\n      if (count === undefined) {\n        map.set(elem,\
    \ 1);\n      } else {\n        map.set(elem, count + 1);\n      }\n    }\n  }\n\
    \  var max = -1;\n  for (var elem of map.keys()) {\n    if (elem <= map.get(elem)\
    \ && elem > max) {\n      max = elem;\n    }\n  }\n  return max;\n}\n", "\t//\
    \ TODO: Implement me\n\treturn -1;\n}", "    let set = new Set();\n    for(let\
    \ i = 0; i < lst.length; i++){\n        set.add(lst[i]);\n    }\n    let arr =\
    \ Array.from(set);\n    let count = 0;\n    let ans = 0;\n    for(let i = 0; i\
    \ < arr.length; i++){\n        for(let j = 0; j < lst.length; j++){\n        \
    \    if(arr[i] == lst[j]){\n                count++;\n            }\n        }\n\
    \        if(count >= arr[i]){\n            ans = arr[i];\n        }\n        count\
    \ = 0;\n    }\n    if(ans == 0){\n        return -1;\n    }\n    return ans;\n\
    }", "\tvar freqTable = [];\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(freqTable[lst[i]]\
    \ == undefined){\n\t\t\tfreqTable[lst[i]] = 1;\n\t\t}\n\t\telse{\n\t\t\tfreqTable[lst[i]]++;\n\
    \t\t}\n\t}\n\tfor(var j = 1; j < freqTable.length; j++){\n\t\tif(freqTable[j]\
    \ >= j){\n\t\t\treturn j;\n\t\t}\n\t}\n\treturn -1;\n}", "    let max = Math.max(...lst);\n\
    \    let max2 = max;\n    let tmp = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] == max){\n            tmp += 1;\n        }\n    }\n    if(tmp\
    \ >= max){\n        return max;\n    }\n    else{\n        for(let j = max - 1;\
    \ j > 0; j--){\n            for(let k = 0; k < lst.length; k++){\n           \
    \     if(lst[k] == j){\n                    tmp += 1;\n                }\n   \
    \         }\n            if(tmp >= j){\n                max2 = j;\n          \
    \      break;\n            }\n            else{\n                tmp = 0;\n  \
    \          }\n        }\n    }\n    if(max2 == max){\n        return -1;\n   \
    \ }\n    else{\n        return max2;\n    }\n}", "    if(lst.length==0){\n   \
    \     return -1;\n    }\n    let obj={};\n    for(let i=0;i<lst.length;i++){\n\
    \        if(obj[lst[i]]===undefined){\n            obj[lst[i]]=1;\n        }\n\
    \        else{\n            obj[lst[i]]+=1;\n        }\n    }\n    let arr=[];\n\
    \    for(let key in obj){\n        if(obj[key]>=key && key>0){\n            arr.push(key);\n\
    \        }\n    }\n    if(arr.length==0){\n        return -1;\n    }\n    let\
    \ max=0;\n    for(let i=0;i<arr.length;i++){\n        if(arr[i]>max){\n      \
    \      max=arr[i];\n        }\n    }\n    return max;\n}\nlet list=[4, 1, 2, 2,\
    \ 3, 1];", "    let valueToReturn = -1;\n    let objectWithFrequency = {};\n \
    \   for(let i = 0; i < lst.length; i++){\n        let value = lst[i];\n      \
    \  if(!objectWithFrequency[value]){\n            objectWithFrequency[value] =\
    \ 1;\n        }else{\n            objectWithFrequency[value]++;\n        }\n \
    \   }\n    let keys = Object.keys(objectWithFrequency);\n    let values = Object.values(objectWithFrequency);\n\
    \    for(let i = 0; i < keys.length; i++){\n        if(keys[i] <= values[i]){\n\
    \            valueToReturn = keys[i];\n        }\n    }\n    return valueToReturn;\n\
    }\n", "    let numCounts = {};\n    for (let i = 0; i < lst.length; i++){\n  \
    \      if (!numCounts[lst[i]]){\n            numCounts[lst[i]] = 1;\n        }\
    \ else {\n            numCounts[lst[i]] += 1;\n        }\n    }\n    let sortedNums\
    \ = Object.keys(numCounts).sort((a, b) => b - a);\n    for (let j = 0; j < sortedNums.length;\
    \ j++){\n        if (numCounts[sortedNums[j]] >= sortedNums[j]){\n           \
    \ return sortedNums[j];\n        }\n    }\n    return -1;\n}", "  \n}", "   //your\
    \ code is here\n   let lst1 = lst.sort((a,b)=> a-b)\n   return Math.max.apply(null,lst1.filter(item\
    \ => item === lst1.filter(ite => ite === item).length))\n\n}\n", "    let counter\
    \ = {};\n    let max = -1;\n    let res = -1;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        let item = lst[i];\n        if(counter[item]){\n            counter[item]\
    \ += 1;\n        }else{\n            counter[item] = 1;\n        }\n        if(counter[item]\
    \ >= item && counter[item] > max){\n            max = counter[item];\n       \
    \     res = item;\n        }\n    }\n    return res;\n}\n", "    // your code\
    \ here\n    let map = {};\n    for(let i = 0; i < lst.length; i++){\n        if(map[lst[i]]){\n\
    \            map[lst[i]] += 1;\n        } else {\n            map[lst[i]] = 1;\n\
    \        }\n    }\n    let new_lst = Object.keys(map).sort((a,b) => b - a);\n\
    \    for(let i = 0; i < new_lst.length; i++){\n        if(new_lst[i] >= map[new_lst[i]]){\n\
    \            return new_lst[i];\n        }\n    }\n    return -1;\n}\n", "  \n\
    \  let newArr = [];\n  let count = 0;\n  let maxCount = 0;\n  let num = 0;\n \
    \ \n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst.length;\
    \ j++){\n      if(lst[i] === lst[j]){\n        count += 1;\n      }\n    }\n \
    \   if(!newArr.includes(lst[i])){\n      newArr.push(lst[i]);\n    }\n    if(lst[i]\
    \ < count){\n      maxCount = count;\n      num = lst[i];\n    }\n    count =\
    \ 0;\n  }\n  return num;\n}", "  if(lst.length === 0) return -1;\n  let result\
    \ = lst.reduce((prev, curr) => {\n    if(prev[curr]){\n      prev[curr] += 1;\n\
    \    }else{\n      prev[curr] = 1;\n    }\n    return prev;\n  }, {});\n  let\
    \ max = -1;\n  for(let key in result){\n    if(result[key] >= key && key > max){\n\
    \      max = key;\n    }\n  }\n  return max;\n}\n", "    let max = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n            max = lst[i];\n\
    \        }\n    }\n    let count = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] == max){\n            count++;\n        }\n    }\n    if(count\
    \ >= max){\n        return max;\n    }\n    return -1;\n}\n", "\tvar set = new\
    \ Set(lst);\n\tfor (var i of set){\n\t\tif (lst.filter(x => x == i).length >=\
    \ i){\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n", "    //...\n}\nsearch([4,\
    \ 1, 2, 2, 3, 1])\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4])\nsearch([5, 5, 4, 4, 4])",
  "    var a = 0;\n    for (var i = 0; i < lst.length; i++){\n        if (lst[i] >\
    \ a && lst.indexOf(lst[i]) != lst.lastIndexOf(lst[i])){\n            a = lst[i];\n\
    \        }\n    }\n    if (a == 0){\n        a = -1;\n    }\n    return a;\n}",
  "    let count={};\n    let max=Math.max(...lst);\n    for(let i=0;i<lst.length;i++){\n\
    \        if(count[lst[i]]===undefined){\n            count[lst[i]]=1;\n      \
    \  }\n        else{\n            count[lst[i]]++;\n        }\n    }\n    for(let\
    \ i=1;i<=max;i++){\n        if(count[i]!==undefined && count[i]>=i){\n       \
    \     return i;\n        }\n    }\n    return -1;\n}", "    let res = 0;\n   \
    \ let obj = {};\n    for(let i = 0; i < lst.length; i++){\n        if(!obj[lst[i]]){\n\
    \            obj[lst[i]] = 1;\n        } else {\n            obj[lst[i]] += 1;\n\
    \        }\n    }\n    for(let k in obj){\n        if(k >= obj[k] && k > res){\n\
    \            res = k;\n        }\n    }\n    return res ? res : -1;\n}", "   \
    \ var frequencyObject = {};\n    for (var i = 0; i < lst.length; i++){\n     \
    \   frequencyObject[lst[i]] = (frequencyObject[lst[i]] || 0) + 1;\n    }\n   \
    \ var keyList = Object.keys(frequencyObject);\n    var greatest = 0;\n    for\
    \ (var i = 0; i < keyList.length; i++){\n        if (keyList[i] > greatest &&\
    \ frequencyObject[keyList[i]] >= keyList[i]){\n            greatest = keyList[i];\n\
    \        }\n    }\n    if (greatest === 0){\n        return -1;\n    } else {\n\
    \        return greatest;\n    }\n}", "    let dic = {};\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] in dic){\n            dic[lst[i]] +=\
    \ 1;\n        }\n        else{\n            dic[lst[i]] = 1;\n        }\n    }\n\
    \    let keys = Object.keys(dic);\n    let max = 0;\n    for(let i = 0; i < keys.length;\
    \ i++){\n        if(keys[i] > max && dic[keys[i]] >= keys[i]){\n            max\
    \ = keys[i];\n        }\n    }\n    if(max > 0){\n        return max;\n    }\n\
    \    else{\n        return -1;\n    }\n}", "    var max = -1;\n    var count =\
    \ 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] > max){\n  \
    \          count = 1;\n            max = lst[i];\n        }\n        else if(lst[i]\
    \ == max){\n            count++;\n        }\n    }\n    if(count >= max){\n  \
    \      return max;\n    }\n    else{\n        return -1;\n    }\n}\n", "    var\
    \ dict = {};\n    var maxCount = 0;\n    var result = -1;\n    for(var i = 0;\
    \ i < lst.length; i++){\n        var num = lst[i];\n        if(dict[num] === undefined){\n\
    \            dict[num] = 1;\n        }else{\n            dict[num] += 1;\n   \
    \     }\n        if(num > maxCount && dict[num] >= num){\n            maxCount\
    \ = num;\n            result = num;\n        }\n    }\n    return result;\n}\n",
  "  // Set an empty object that will hold the number of occurrences of each integer\
    \ in the array\n  let obj = {};\n  // Loop through the array and add each integer\
    \ as a key to the obj object. \n  // The value should be equal to the number of\
    \ occurrences of that integer in the array.\n  lst.forEach(function(elem){\n \
    \   if(obj[elem]){\n      obj[elem] += 1;\n    } else {\n      obj[elem] = 1;\n\
    \    }\n  });\n  // Iterate through the obj object, and if the value of a key\
    \ is greater than or equal to the key itself, \n  // return the key.\n  for(let\
    \ key in obj){\n    if(obj[key] >= key){\n      return parseInt(key);\n    }\n\
    \  }\n  // If there is no such a value, return -1.\n  return -1;\n}", "  let h\
    \ = {};\n  let keys = [];\n  let values = [];\n  for(let i=0; i<lst.length; i++){\n\
    \    if(h[lst[i]]===undefined){\n      h[lst[i]] = 1;\n    }else{\n      h[lst[i]]\
    \ += 1;\n    }\n  }\n  for(let key in h){\n    if(h[key] >= key){\n      keys.push(key);\n\
    \      values.push(h[key]);\n    }\n  }\n  if(keys.length === 0){\n    return\
    \ -1;\n  }\n  return Math.max(...keys);\n}", "    const dict = {}\n    for (let\
    \ i = 0; i < lst.length; i++){\n        if (lst[i] > 0){\n            if (dict[lst[i]]){\n\
    \                dict[lst[i]]++\n            }\n            else{\n          \
    \      dict[lst[i]] = 1\n            }\n        }\n    }\n    const highest =\
    \ Math.max(...Object.keys(dict))\n    if (dict[highest] >= highest){\n       \
    \ return highest\n    }\n    else{\n        return -1\n    }\n}", "    var lst2\
    \ = lst.sort((a,b) => a-b);\n    var mx = lst2[lst2.length-1];\n    for(var i\
    \ = mx; i >= 0; i--){\n        if(lst2.lastIndexOf(i) - lst2.indexOf(i) >= i){\n\
    \            return i;\n        }\n    }\n    return -1;\n}", "    let set = new\
    \ Set(lst);\n    let freq = new Map();\n    for(let i of set){\n        freq.set(i,\
    \ 0);\n    }\n    for(let i of lst){\n        freq.set(i, freq.get(i) + 1);\n\
    \    }\n    let temp = new Map();\n    let counter = 0;\n    let max = 0;\n  \
    \  let maxKey = -1;\n    for(let i of set){\n        counter = freq.get(i);\n\
    \        if(counter >= i){\n            if(max <= counter){\n                max\
    \ = counter;\n                maxKey = i;\n            }\n        }\n    }\n \
    \   return maxKey;\n}", "    // console.log(lst);\n    var counts = {};\n    lst.forEach(function(x)\
    \ { counts[x] = (counts[x] || 0)+1; });\n    var sorted_counts = Object.keys(counts).sort(function(a,b){return\
    \ counts[b]-counts[a]});\n    // console.log(sorted_counts);\n    var result;\n\
    \    for (var i = 0; i < sorted_counts.length; i++) {\n        if (counts[sorted_counts[i]]\
    \ >= sorted_counts[i]) {\n            result = sorted_counts[i];\n           \
    \ break;\n        }\n    }\n    if (result == undefined) {\n        result = -1;\n\
    \    }\n    return result;\n}\n", "    // your code here\n    var newObj = {};\n\
    \    var arrKey = [];\n    var arrValue = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] > 0){\n            if(newObj[lst[i]]){\n          \
    \      newObj[lst[i]] += 1;\n            }else{\n                newObj[lst[i]]\
    \ = 1;\n            }\n        }\n    }\n    for(var i in newObj){\n        arrKey.push(i);\n\
    \        arrValue.push(newObj[i]);\n    }\n    for(var i = 0; i < arrKey.length;\
    \ i++){\n        if(arrKey[i] <= arrValue[i]){\n            return Number(arrKey[i]);\n\
    \        }\n    }\n    return -1;\n}", "   // your code here\n   var count = 0;\n\
    \   var num = 0;\n   for(var i = 0; i < lst.length; i++){\n       for(var j =\
    \ 0; j < lst.length; j++){\n           if(lst[i] == lst[j]){\n               count++\n\
    \           }\n       }\n       if(count >= lst[i] && lst[i] > num){\n       \
    \    num = lst[i]\n       }\n       count = 0;\n   }\n   if(num == 0){\n     \
    \  return -1\n   }\n   return num\n}\n", "\tvar c = 1;\n\tvar max = 0;\n\tlst.sort(function(a,\
    \ b){return a-b});\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(lst[i] == lst[i+1]){\n\
    \t\t\tc++;\n\t\t}\n\t\telse if(c >= lst[i]){\n\t\t\tif(max < lst[i]){\n\t\t\t\t\
    max = lst[i];\n\t\t\t}\n\t\t\tc = 1;\n\t\t}\n\t\telse if(c < lst[i]){\n\t\t\t\
    c = 1;\n\t\t}\n\t}\n\tif(max == 0){\n\t\treturn -1;\n\t}\n\treturn max;\n}", " \
    \   let newLst = [];\n    let counter = 0;\n    let counter2 = 0;\n    let value\
    \ = -1;\n    let number = 0;\n    let max = 0;\n    let maxIndex = 0;\n    let\
    \ index2 = 0;\n    let index = 0;\n    //write your code here\n    while(counter\
    \ < lst.length) {\n        if(lst[counter] === 0) {\n            newLst.push(lst[counter]);\n\
    \        } else {\n            newLst.push(lst[counter]);\n        }\n       \
    \ counter = counter + 1;\n    }\n    counter = 0;\n    while(counter < newLst.length)\
    \ {\n        value = newLst[counter];\n        counter2 = 0;\n        while(counter2\
    \ < newLst.length) {\n            if(value === newLst[counter2]) {\n         \
    \       number = number + 1;\n            }\n            counter2 = counter2 +\
    \ 1;\n        }\n        if(number >= value) {\n            max = value;\n   \
    \         maxIndex = counter;\n        }\n        counter = counter + 1;\n   \
    \     number = 0;\n    }\n    index = 0;\n    while(index < newLst.length) {\n\
    \        if(max === newLst[index]) {\n            index2 = index2 + 1;\n     \
    \   }\n        index = index + 1;\n    }\n    if(index2 === max) {\n        return\
    \ max;\n    } else {\n        return -1;\n    }\n}\n", "    const freq = {}\n\
    \    for(let i = 0; i < lst.length; i++){\n        let num = lst[i]\n        if(!freq[num]){\n\
    \            freq[num] = 1\n        } else {\n            freq[num]++\n      \
    \  }\n    }\n    for(let i = 0; i < lst.length; i++){\n        let num = lst[i]\n\
    \        if(num > 0 && freq[num] >= num){\n            return num\n        }\n\
    \    }\n    return -1\n}", "    let hasil = -1\n    for(i = 0; i < lst.length;\
    \ i++){\n        let hitung = 0\n        for(j = 0; j < lst.length; j++){\n  \
    \          if(lst[i] == lst[j]){\n                hitung += 1\n            }\n\
    \        }\n        if(hitung >= lst[i] && lst[i] > hasil){\n            hasil\
    \ = lst[i]\n        }\n    }\n    return hasil\n}", "\tconst countFreq = new Map();\n\
    \tlet max = 0;\n\tfor(let i=0; i<lst.length; i++){\n\t\tlet item = lst[i];\n\t\
    \tcountFreq.set(item, (countFreq.get(item) || 0) + 1);\n\t\tif(countFreq.get(item)\
    \ >= item && item > max){\n\t\t\tmax = item;\n\t\t}\n\t}\n\treturn max === 0 ?\
    \ -1 : max;\n}", "    const obj = {};\n    let max = -1;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        let item = lst[i];\n        if(!obj[item]) obj[item]\
    \ = 1;\n        else obj[item] += 1;\n        if(item < max) continue;\n     \
    \   if(obj[item] >= item) max = item;\n    }\n    return max;\n}", "    var highestFreq\
    \ = 0;\n    var highestFreqInt = -1;\n    var occurrances = {};\n    for(var i\
    \ = 0; i < lst.length; i++){\n        var item = lst[i];\n        if(!occurrances[item]){\n\
    \            occurrances[item] = 1;\n        } else {\n            occurrances[item]++;\n\
    \        }\n        if(occurrances[item] >= item && item > highestFreqInt){\n\
    \            highestFreqInt = item;\n        }\n    }\n    return highestFreqInt;\n\
    }", "    if (lst.length < 1) {return}\n    let temp = 0;\n    let occurences =\
    \ {};\n    for (let i = 0; i < lst.length; i++) {\n        if (occurences[lst[i]])\
    \ {\n            occurences[lst[i]]++;\n        } else {\n            occurences[lst[i]]\
    \ = 1;\n        }\n    }\n    console.log(occurences);\n    for (let key in occurences)\
    \ {\n        if (occurences[key] >= key) {\n            if (key > temp) {\n  \
    \              temp = key;\n            }\n        }\n    }\n    if (temp > 0)\
    \ {\n        return temp;\n    } else {\n        return -1;\n    }\n}", "    const\
    \ obj = {};\n    let arr = [];\n    let highestValue = -1;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        obj[lst[i]] = obj[lst[i]] + 1 || 1;\n    }\n\
    \    for(let key in obj){\n        arr.push(obj[key])\n    }\n    arr.sort((a,b)\
    \ => b - a);\n    for(let i = 0; i < arr.length; i++){\n        let test = arr[i];\n\
    \        let value = arr.filter(x => x === test);\n        if(test === arr[i]\
    \ && value.length >= test){\n            highestValue = test;\n            break;\n\
    \        }\n    }\n    return highestValue;\n}", "    //CODE HERE\n}\n", "   \
    \ let st = new Set(lst);\n    let result = -1;\n    let nums = Array.from(st).sort((a,b)\
    \ => b-a);\n    let obj = {};\n    for(let num of nums){\n        let count =\
    \ 0;\n        for(let i = 0; i < lst.length; i++){\n            if(lst[i] ===\
    \ num){\n                count++;\n            }\n        }\n        obj[num]\
    \ = count;\n    }\n    for(let key in obj){\n        if(key <= obj[key]){\n  \
    \          result = key;\n            break;\n        }\n    }\n    return Number(result);\n\
    }\n", "    let freq_obj = {};\n    for (let i = 0; i < lst.length; i++){\n   \
    \     if (freq_obj[lst[i]]){\n            freq_obj[lst[i]] += 1;\n        }\n\
    \        else{\n            freq_obj[lst[i]] = 1;\n        }\n    }\n    let highest_freq\
    \ = -1;\n    for (let freq in freq_obj){\n        if (freq_obj[freq] >= freq){\n\
    \            highest_freq = freq;\n        }\n    }\n    return highest_freq;\n\
    }", "    let count = {}\n    lst.forEach( item => {\n        if (count[item]){\n\
    \            count[item] += 1\n        } else {\n            count[item] = 1\n\
    \        }\n    })\n    let sortable = []\n    for (let item in count){\n    \
    \    sortable.push([item, count[item]])\n    }\n    sortable.sort( (a, b) => {\n\
    \        return b[1] - a[1]\n    })\n    for (i=0; i<sortable.length; i++){\n\
    \        if (sortable[i][1] >= sortable[i][0]){\n            return sortable[i][0]\n\
    \        }\n    }\n    return -1\n}\nsearch([5, 5, 4, 4, 4])", "    var obj =\
    \ {};\n    for(var i = 0; i < lst.length; i++){\n        if(obj[lst[i]] == undefined){\n\
    \            obj[lst[i]] = 1;\n        }else{\n            obj[lst[i]] += 1;\n\
    \        }\n    }\n    console.log(obj);\n    var values = Object.values(obj);\n\
    \    var keys = Object.keys(obj);\n    // console.log(values);\n    // console.log(keys);\n\
    \    var answer = -1;\n    for(var i = 0; i < values.length; i++){\n        if(values[i]\
    \ >= keys[i] && keys[i] > answer){\n            answer = keys[i];\n        }\n\
    \    }\n    return answer;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
