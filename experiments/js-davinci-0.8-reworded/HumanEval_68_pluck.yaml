name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    let result = [],\n        index = -1;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            if(result.length === 0 ||\
    \ result[0] > arr[i]){\n                result = [arr[i], i];\n            }\n\
    \        }\n    }\n    return result;\n}\n", "    let evenArr = [];\n    for(i=0;\
    \ i<arr.length; i++){\n        if(arr[i]%2 === 0){\n            evenArr.push(arr[i]);\n\
    \        }\n    }\n    if(evenArr.length < 1){\n        return [];\n    }\n  \
    \  let smallestEven = evenArr[0];\n    for(i=0; i<evenArr.length; i++){\n    \
    \    if(evenArr[i] < smallestEven){\n            smallestEven = evenArr[i];\n\
    \        }\n    }\n    let indexOfSmallestEven = arr.indexOf(smallestEven);\n\
    \    let result = [smallestEven, indexOfSmallestEven];\n    return result;\n}",
  "  var evenArr = [];\n  var indexArr = [];\n  var smallestArr = [];\n  var sortedEvenArr\
    \ = [];\n  var smallestIndex = 0;\n  for(var i = 0; i < arr.length; i++){\n  \
    \  if(arr[i] % 2 === 0){\n      evenArr.push(arr[i]);\n      indexArr.push(i);\n\
    \    }\n  }\n  sortedEvenArr = evenArr.sort();\n  smallestArr.push(sortedEvenArr[0]);\n\
    \  for(var j = 0; j < indexArr.length; j++){\n    if(arr[indexArr[j]] === smallestArr[0]){\n\
    \      smallestIndex = indexArr[j];\n      break;\n    }\n  }\n  smallestArr.push(smallestIndex);\n\
    \  return smallestArr;\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n \
    \ if(evens.length === 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n\
    }\n", "  if(arr.length === 0){\n    return [];\n  }\n  let smallestEven;\n  let\
    \ smallestIndex;\n  let smallestEvenIndex;\n  for(let i = 0; i < arr.length; i++){\n\
    \    if(arr[i] % 2 === 0){\n      if(!smallestEven){\n        smallestEven = arr[i];\n\
    \        smallestEvenIndex = i;\n      } else if(arr[i] < smallestEven){\n   \
    \     smallestEven = arr[i];\n        smallestEvenIndex = i;\n      }\n    }\n\
    \  }\n  if(!smallestEven){\n    return [];\n  }\n  return [smallestEven, smallestEvenIndex];\n\
    }\n", "    let evenArr = arr.filter(el => el % 2 === 0);\n    if (evenArr.length)\
    \ {\n        let minEven = Math.min(...evenArr);\n        return [minEven, arr.indexOf(minEven)];\n\
    \    } else {\n        return [];\n    }\n}\n", "  // your code here\n  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  var res = [], low = 0;\n  for (var i = 0; i\
    \ < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (res.length ===\
    \ 0) {\n        res = [arr[i], i];\n      } else if (arr[i] < res[0]) {\n    \
    \    res = [arr[i], i];\n      }\n    }\n  }\n  return res;\n}", "  let evenArr\
    \ = arr.filter(function(item) {\n    return item % 2 === 0;\n  });\n  if (evenArr.length\
    \ === 0) {\n    return [];\n  }\n  let answer = [Math.min(...evenArr), arr.indexOf(Math.min(...evenArr))];\n\
    \  return answer;\n}\n", "  if (arr.length === 0) return [];\n  let smallest =\
    \ Infinity;\n  let result = [];\n  for (let i = 0; i < arr.length; i++){\n   \
    \ if (arr[i] % 2 === 0){\n      if (arr[i] < smallest){\n        smallest = arr[i];\n\
    \        result = [smallest, i];\n      }\n    }\n  }\n  return result;\n}", " \
    \   let min;\n    let index = -1;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0 && (min === undefined || arr[i] < min)){\n      \
    \      min = arr[i];\n            index = i;\n        }\n    }\n    return index\
    \ === -1 ? [] : [min, index];\n}\n", "  if(arr.length === 0) return [];\n  let\
    \ evenArr = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 ===\
    \ 0) evenArr.push(arr[i]);\n  }\n  if(evenArr.length === 0) return [];\n  let\
    \ smallest = evenArr[0];\n  let index;\n  for(let i = 0; i < evenArr.length; i++){\n\
    \    if(evenArr[i] < smallest){\n      smallest = evenArr[i];\n      index = i;\n\
    \    }\n  }\n  return [smallest, index];\n}\n", "    let even = arr.filter(el\
    \ => el % 2 === 0);\n    let smallestEven = even.sort((a, b) => a - b)[0];\n \
    \   if(!smallestEven){\n        return [];\n    }\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "    if(arr.length == 0) return [];\n\
    \    var minEven = Number.MAX_VALUE;\n    var index = -1;\n    for(var i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 == 0 && arr[i] < minEven){\n  \
    \          minEven = arr[i];\n            index = i;\n        }\n    }\n    if(index\
    \ == -1) return [];\n    return [minEven, index];\n}\n", "    let evenArr = [];\n\
    \    let arrOfEven = arr.filter(item => {\n        if(item % 2 === 0) {\n    \
    \        evenArr.push(item);\n        }\n    });\n    console.log(evenArr);\n\
    \    console.log(arrOfEven);\n    let evenSmall = Math.min(...evenArr);\n    console.log(evenSmall);\n\
    \    let indexArr = [];\n    arr.forEach((val, index) => {\n        if(val ===\
    \ evenSmall) {\n            indexArr.push(index);\n        }\n    });\n    console.log(indexArr);\n\
    \    let smallestIndex = Math.min(...indexArr);\n    console.log(smallestIndex);\n\
    \    let result = [];\n    result.push(evenSmall, smallestIndex);\n    console.log(result);\n\
    \    if(result.length === 0) {\n        return result;\n    }\n    return result;\n\
    }", "    let newArr = [];\n    let i = 0;\n    let evens = 0;\n    let results\
    \ = [];\n    for(let num of arr){\n        if(num % 2 === 0){\n            newArr.push(num);\n\
    \            evens = num;\n        }\n    }\n    for(let num of arr){\n      \
    \  if(num === evens){\n            results.push(num);\n            results.push(i);\n\
    \            break;\n        }\n        i++;\n    }\n    if(results.length ===\
    \ 0){\n        return [];\n    }\n    return results;\n}", "\tlet results = [];\n\
    \tlet evens = arr.filter(item => {\n\t\tif(item % 2 === 0){\n\t\t\treturn item;\n\
    \t\t}\n\t})\n\tif(evens.length === 0){\n\t\treturn [];\n\t}\n\tlet smallest =\
    \ evens.reduce((acc, item) => {\n\t\tif(item < acc){\n\t\t\treturn item;\n\t\t\
    }\n\t\treturn acc;\n\t})\n\treturn [smallest, arr.indexOf(smallest)];\n}", " \
    \   return arr.filter(a => a%2 === 0)\n        .sort((a,b) => a-b)[0] !== undefined\
    \ ? [arr.filter(a => a%2 === 0)\n            .sort((a,b) => a-b)[0], arr.indexOf(arr.filter(a\
    \ => a%2 === 0)\n            .sort((a,b) => a-b)[0])] : [];\n}", "    let result\
    \ = [];\n    let evens = [];\n    if(arr.length === 0) {\n        return [];\n\
    \    }\n    for(let i = 0; i < arr.length; i++) {\n        if(arr[i] % 2 === 0)\
    \ {\n            evens.push(arr[i]);\n        }\n    }\n    if(evens.length ===\
    \ 0) {\n        return [];\n    }\n    let minEven = Math.min(...evens);\n   \
    \ for(let i = 0; i < arr.length; i++) {\n        if(arr[i] === minEven) {\n  \
    \          result.push(minEven);\n            result.push(i);\n            return\
    \ result;\n        }\n    }\n    return result;\n}", "\tif(arr.length < 1){\n\t\
    \treturn [];\n\t}\n\tlet result = [],\n\t\tsmallestEven = Infinity,\n\t\tsmallestEvenIndex\
    \ = Infinity;\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 === 0\
    \ && arr[i] < smallestEven){\n\t\t\tsmallestEven = arr[i];\n\t\t\tsmallestEvenIndex\
    \ = i;\n\t\t}\n\t}\n\tif(smallestEven === Infinity){\n\t\treturn [];\n\t} else\
    \ {\n\t\tresult.push(smallestEven);\n\t\tresult.push(smallestEvenIndex);\n\t\t\
    return result;\n\t}\n}", "    var result = [];\n    var min;\n    for(var i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(min\
    \ === undefined){\n                min = arr[i];\n                result = [min,\
    \ i];\n            }\n            else if(arr[i] < min){\n                min\
    \ = arr[i];\n                result = [min, i];\n            }\n        }\n  \
    \  }\n    return result;\n}\n", "    if(arr.length === 0){\n        return [];\n\
    \    }\n    if(arr.length === 1){\n        if(arr[0] % 2 === 0){\n           \
    \ return [arr[0], 0];\n        }\n        return [];\n    }\n    let minEven =\
    \ Infinity;\n    let indexes = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            if(arr[i] < minEven){\n          \
    \      minEven = arr[i];\n                indexes = [i];\n            }\n    \
    \        else if(arr[i] === minEven){\n                indexes.push(i);\n    \
    \        }\n        }\n    }\n    if(minEven === Infinity){\n        return [];\n\
    \    }\n    return [minEven, indexes[0]];\n}", "    let evenArr = arr.filter(item\
    \ => item % 2 === 0);\n    if (evenArr.length > 0) {\n        let minEven = Math.min(...evenArr);\n\
    \        return [minEven, arr.indexOf(minEven)];\n    } else {\n        return\
    \ [];\n    }\n}\n", "    let evens = arr.filter(v => v % 2 === 0);\n    return\
    \ evens.length > 0 ? [evens[0], arr.indexOf(evens[0])] : [];\n}", "    return\
    \ arr.filter(num => num % 2 === 0).sort((a, b) => a - b)[0] || [];\n}\n", "  \
    \  var even = [];\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ % 2 === 0){\n            even.push(arr[i]);\n        }\n    }\n    var min =\
    \ even[0];\n    for(var j = 0; j < even.length; j++){\n        if(even[j] < min){\n\
    \            min = even[j];\n        }\n    }\n    var minIndex = even.indexOf(min);\n\
    \    var result = [min, minIndex];\n    return result;\n}\nvar a = pluck([4, 2,\
    \ 3]);", "    var even = Number.MAX_VALUE;\n    var index = Number.MAX_VALUE;\n\
    \    for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && arr[i]\
    \ < even){\n            even = arr[i];\n            index = i;\n        }\n  \
    \  }\n    if(even === Number.MAX_VALUE){\n        return [];\n    } else {\n \
    \       return [even, index];\n    }\n}", "    let min = 0, minIndex = -1;\n \
    \   for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0 && (min\
    \ === 0 || arr[i] < min)){\n            min = arr[i];\n            minIndex =\
    \ i;\n        }\n    }\n    return (min === 0 && minIndex === -1) ? [] : [min,\
    \ minIndex];\n}", "    if(arr.length <= 0){\n        return [];\n    }\n\n   \
    \ let evenArr = arr.filter(value => value % 2 === 0);\n    let minEven = Math.min(...evenArr);\n\
    \    let idx = arr.indexOf(minEven);\n\n    return [minEven, idx];\n}", "    if(arr.length\
    \ === 0) return [];\n    let even = [];\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0){\n            even.push([arr[i], i]);\n        }\n\
    \    }\n    if(even.length === 0) return [];\n    even.sort((a, b) => a[0] - b[0]);\n\
    \    return even[0];\n}", "    if(arr.length === 0){\n        return []\n    }\n\
    \    let evens = []\n    let evenIndexes = []\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            evens.push(arr[i])\n     \
    \       evenIndexes.push(i)\n        }\n    }\n    if(evens.length === 0){\n \
    \       return []\n    }\n    else{\n        let minEven = Math.min(...evens)\n\
    \        let minEvenIndex = evenIndexes[evens.indexOf(minEven)]\n        return\
    \ [minEven, minEvenIndex]\n    }\n}", "    let even = [];\n    for(let i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \        }\n    }\n    if(even.length === 0){\n        return [];\n    }\n   \
    \ else{\n        even.sort(function(a, b){return a-b});\n        let smallest\
    \ = even[0];\n        for(let i = 0; i < arr.length; i++){\n            if(arr[i]\
    \ === smallest){\n                return [smallest, i];\n            }\n     \
    \   }\n    }\n}\n", "    if(arr.length == 0)\n    {\n        return [];\n    }\n\
    \    let evenArr = arr.filter(val => val % 2 == 0);\n    let min = evenArr[0];\n\
    \    let minIndex = 0;\n    for(let i = 0; i < evenArr.length; i++)\n    {\n \
    \       if(evenArr[i] < min)\n        {\n            min = evenArr[i];\n     \
    \       minIndex = i;\n        }\n    }\n    return [min, minIndex];\n}\n", " \
    \ if (arr.length === 0){\n    return [];\n  }\n  let index = 0;\n  let smallestEven\
    \ = arr[0];\n  for (let i = 0; i < arr.length; i++){\n    if (arr[i] === 0){\n\
    \      index = i;\n      smallestEven = 0;\n      break;\n    }\n    if (arr[i]\
    \ < smallestEven && arr[i] % 2 === 0){\n      index = i;\n      smallestEven =\
    \ arr[i];\n    }\n  }\n  if (smallestEven === 0){\n    return [smallestEven, index];\n\
    \  }\n  if (smallestEven % 2 === 0){\n    return [smallestEven, index];\n  } else\
    \ {\n    return [];\n  }\n}", "  if(arr.length === 0){\n    return [];\n  }\n\
    \  var smallestEven = Infinity;\n  var index = -1;\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] % 2 === 0 && arr[i] < smallestEven){\n      smallestEven\
    \ = arr[i];\n      index = i;\n    }\n  }\n  if(index === -1){\n    return [];\n\
    \  }\n  return [smallestEven, index];\n}", "    if(arr.length === 0) return [];\n\
    \    let evenArr = arr.filter(e => e % 2 === 0);\n    if(evenArr.length === 0)\
    \ return [];\n    evenArr.sort((a, b) => a - b);\n    return [evenArr[0], arr.indexOf(evenArr[0])];\n\
    }", "    var theArr = [];\n    if(arr.length === 0){\n        return theArr;\n\
    \    }else{\n        var evenArray = [];\n        var evenIndex = [];\n      \
    \  for(var i = 0; i < arr.length; i++){\n            if(arr[i] % 2 === 0){\n \
    \               evenArray.push(arr[i]);\n                evenIndex.push(i);\n\
    \            }\n        }\n        if(evenArray.length === 0){\n            return\
    \ theArr;\n        }else{\n            var min = evenArray[0];\n            var\
    \ minI = evenIndex[0];\n            for(var j = 0; j < evenArray.length; j++){\n\
    \                if(evenArray[j] < min){\n                    min = evenArray[j];\n\
    \                    minI = evenIndex[j];\n                }\n            }\n\
    \            return [min, minI];\n        }\n    }\n}", "\tlet even = arr.filter(e=>e%2==0)\n\
    \tif(even.length == 0) return []\n\tlet smallest = Math.min(...even)\n\tlet index\
    \ = arr.indexOf(smallest)\n\treturn [smallest, index]\n}", "    if(arr.length\
    \ === 0){\n        return []\n    }\n    let evens = arr.filter(el => el % 2 ===\
    \ 0);\n    let smallestEven = evens.reduce((a, b) => Math.min(a, b));\n    let\
    \ smallestEvenIndex = arr.indexOf(smallestEven);\n    let smallestEvenArr = [smallestEven,\
    \ smallestEvenIndex];\n    return smallestEvenArr;\n}", "  if (arr.length == 0){\n\
    \    return [];\n  }\n  let evens = [];\n  let indices = [];\n  for (let i = 0;\
    \ i < arr.length; i++){\n    if (arr[i] % 2 == 0){\n      evens.push(arr[i]);\n\
    \      indices.push(i);\n    }\n  }\n  if (evens.length == 0){\n    return [];\n\
    \  }\n  let min = evens[0];\n  let index = 0;\n  for (let i = 0; i < evens.length;\
    \ i++){\n    if (evens[i] < min){\n      min = evens[i];\n      index = i;\n \
    \   }\n  }\n  return [min, indices[index]];\n}", "  let even = []\n  let smallest\
    \ = arr[0]\n  let index = 0\n  if(arr.length == 0){\n    return []\n  }\n  for(let\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] % 2 == 0){\n      even.push(arr[i])\n\
    \    }\n  }\n  if(even.length == 0){\n    return []\n  }\n  for(let i = 0; i <\
    \ even.length; i++){\n    if(even[i] < smallest){\n      smallest = even[i]\n\
    \      index = i\n    }\n  }\n  return [smallest, index]\n}\n", "    var plucked,\
    \ smallestEven = [];\n    if(arr.length === 0){\n        return [];\n    }\n \
    \   for(var i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n    \
    \        if(smallestEven.length === 0){\n                smallestEven.push(arr[i]);\n\
    \                smallestEven.push(i);\n            }\n            else if(arr[i]\
    \ < smallestEven[0]){\n                smallestEven[0] = arr[i];\n           \
    \     smallestEven[1] = i;\n            }\n        }\n    }\n    return smallestEven;\n\
    }", "    // write your code here\n    var evenArr = [];\n    var arrRet = [];\n\
    \    var min;\n    if(arr.length == 0){\n        return [];\n    }\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 == 0){\n            evenArr.push(arr[i]);\n\
    \        }\n    }\n    if(evenArr.length == 0){\n        return [];\n    }else{\n\
    \        min = evenArr[0];\n        for(var i = 0; i < evenArr.length; i++){\n\
    \            if(evenArr[i] < min){\n                min = evenArr[i];\n      \
    \      }\n        }\n        for(var i = 0; i < arr.length; i++){\n          \
    \  if(arr[i] == min){\n                arrRet = [min, i];\n                break;\n\
    \            }\n        }\n    }\n    return arrRet;\n}\n", "    let evenVals\
    \ = arr.filter(el => el % 2 === 0);\n    if (evenVals.length === 0) return [];\n\
    \    let min = Math.min(...evenVals);\n    return [min, arr.indexOf(min)];\n}\n",
  "    if (arr.length === 0) return [];\n    let min = arr[0];\n    let index = -1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i]\
    \ < min) {\n            min = arr[i];\n            index = i;\n        }\n   \
    \ }\n    if (index === -1) return [];\n    return [min, index];\n}\n", "  // your\
    \ code here\n}\n", "    var even = arr.filter(function(elem){\n        return\
    \ elem % 2 === 0;\n    });\n    if(even.length === 0) return [];\n    var min\
    \ = even.reduce(function(memo, elem){\n        return memo < elem ? memo : elem;\n\
    \    });\n    var index = arr.indexOf(min);\n    return [min, index];\n}", " \
    \   let newArr = [];\n    let answer = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            newArr.push(arr[i]);\n   \
    \     }\n    }\n    if(newArr.length === 0){\n        return [];\n    }\n    else{\n\
    \        let small = newArr[0];\n        for(let i = 0; i < newArr.length; i++){\n\
    \            if(newArr[i] < small){\n                small = newArr[i];\n    \
    \        }\n        }\n        for(let i = 0; i < arr.length; i++){\n        \
    \    if(arr[i] === small){\n                answer.push(small);\n            \
    \    answer.push(i);\n                return answer;\n            }\n        }\n\
    \    }\n}\n", "    if(arr.length < 1) {\n        return [];\n    }\n    let currentIndex\
    \ = 0;\n    let newArr = arr.filter(val => {\n        if(val % 2 === 0) {\n  \
    \          return val;\n        }\n    });\n    if(newArr.length < 1) {\n    \
    \    return [];\n    }\n    let smallest = newArr[0];\n    for(let i = 0; i <\
    \ newArr.length; i++) {\n        if(newArr[i] < smallest) {\n            smallest\
    \ = newArr[i];\n            currentIndex = i;\n        }\n    }\n    return [smallest,\
    \ currentIndex];\n}", "    let arr1 = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            arr1.push(arr[i]);\n     \
    \   }\n    }\n    if(arr1.length === 0){\n        return [];\n    }\n    let smallest\
    \ = Math.min(...arr1);\n    let count = 0;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] === smallest){\n            break;\n        }\n   \
    \     count++;\n    }\n    return [smallest, count];\n}", "  let evens = arr.filter(num\
    \ => num % 2 === 0);\n  if(evens.length < 1){\n    return [];\n  }\n  let smallest\
    \ = evens.reduce((acc, num) => Math.min(acc, num));\n  let index = arr.indexOf(smallest);\n\
    \  return [smallest, index];\n}\n", "    let smallest = null;\n    let index =\
    \ null;\n    arr.forEach((item, i) => {\n        if(item % 2 === 0 && smallest\
    \ === null){\n            smallest = item;\n            index = i;\n        }\
    \ else if(item % 2 === 0 && item < smallest){\n            smallest = item;\n\
    \            index = i;\n        }\n    });\n    if(smallest === null){\n    \
    \    return [];\n    }\n    return [smallest, index];\n}\n", "  let evenMin =\
    \ Infinity;\n  let answer = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i]\
    \ < evenMin && arr[i] % 2 === 0){\n      evenMin = arr[i];\n      answer = [evenMin,\
    \ i];\n    }\n  }\n  return answer.length > 0 ? answer : [];\n}", "    let even\
    \ = [];\n    if(arr.length < 1){\n        return even;\n    }\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            even.push(arr[i]);\n\
    \        }\n    }\n    if(even.length < 1){\n        return even;\n    }\n   \
    \ let min = Math.min(...even);\n    return [min, arr.indexOf(min)];\n}\n", " \
    \   var smallestNum = -1;\n    var index = -1;\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            if(arr[i] < smallestNum ||\
    \ smallestNum === -1){\n                smallestNum = arr[i];\n              \
    \  index = i;\n            }\n        }\n    }\n    if(smallestNum === -1){\n\
    \        return [];\n    }\n    return [smallestNum, index];\n}", "\tvar min =\
    \ Infinity;\n\tvar index = 0;\n\tvar output = [];\n\tvar isEven = false;\n\tfor(var\
    \ i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 === 0){\n\t\t\tisEven = true;\n\
    \t\t\tif(arr[i] < min){\n\t\t\t\tmin = arr[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\
    \t}\n\t}\n\tif(isEven){\n\t\toutput.push(min);\n\t\toutput.push(index);\n\t}\n\
    \treturn output;\n}\n\nvar pluckArr = [1, 2, 3];\nvar pluckArr2 = [5, 0, 3, 0,\
    \ 4, 2];\nvar pluckArr3 = [];", "  var smallest = 10001;\n  var index = 0;\n \
    \ for(var i = 0; i < arr.length; i++){\n    if(arr[i] < smallest && arr[i] % 2\
    \ === 0){\n      smallest = arr[i];\n      index = i;\n    }\n  }\n  return smallest\
    \ === 10001 ? [] : [smallest, index];\n}", "    let ret = [];\n    let min = arr[0];\n\
    \    let minIdx = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(!(arr[i]\
    \ % 2)){\n            if(arr[i] < min){\n                min = arr[i];\n     \
    \           minIdx = i;\n            }\n        }\n    }\n    if(minIdx === 0\
    \ && min === arr[0]){\n        return [];\n    }\n    ret.push(min);\n    ret.push(minIdx);\n\
    \    return ret;\n}\n", "    let newArr = [];\n    let finalArr = [];\n    let\
    \ min = arr[0];\n    let index = 0;\n    if(arr.length === 0) return [];\n   \
    \ for(let i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n      \
    \      newArr.push(arr[i]);\n        }\n    }\n    for(let j = 0; j < newArr.length;\
    \ j++){\n        if(newArr[j] < min){\n            min = newArr[j];\n        \
    \    index = j;\n        }\n    }\n    finalArr.push(min);\n    finalArr.push(index);\n\
    \    return finalArr;\n}", "    if(arr.length < 1) return [];\n    let min = -1;\n\
    \    let minindex = -1;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]%2\
    \ === 0){\n            if(min === -1 || arr[i] < min){\n                min =\
    \ arr[i];\n                minindex = i;\n            }\n        }\n    }\n  \
    \  if(minindex === -1) return [];\n    return [min, minindex];\n}\n", "  let smallestEvenNum\
    \ = 10002;\n  let smallestEvenNumIndex = 10002;\n  for(let i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] % 2 === 0 && arr[i] < smallestEvenNum){\n      smallestEvenNum\
    \ = arr[i];\n      smallestEvenNumIndex = i;\n    }\n  }\n  if(smallestEvenNum\
    \ === 10002){\n    return [];\n  }\n  return [smallestEvenNum, smallestEvenNumIndex];\n\
    }", "  //your code here\n}", "  var i = 0;\n  var res = [];\n  var min = 10000;\n\
    \  var index = -1;\n  while(i < arr.length){\n    if(arr[i] % 2 === 0 && arr[i]\
    \ < min){\n      min = arr[i];\n      index = i;\n    }\n    i++;\n  }\n  if(index\
    \ === -1){\n    return [];\n  }else{\n    res.push(min);\n    res.push(index);\n\
    \    return res;\n  }\n}\n", "  let evens = arr.filter(num => num % 2 === 0)\n\
    \  if (evens.length > 0){\n    let min = Math.min(...evens)\n    return [min,\
    \ arr.indexOf(min)]\n  }\n  return []\n}", "    if(arr.length === 0) return [];\n\
    \    let evens = arr.filter(v => v % 2 === 0).sort((a,b) => a - b);\n    if(evens.length\
    \ === 0) return [];\n    else return [evens[0], arr.indexOf(evens[0])];\n}", " \
    \ if(arr.length === 0){\n    return [];\n  }\n  let evens = [];\n  for(let i =\
    \ 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0){\n      evens.push(arr[i]);\n\
    \    }\n  }\n  if(evens.length === 0){\n    return [];\n  }\n  evens.sort((a,\
    \ b) => a - b);\n  let smallestEven = evens[0];\n  let answer = [smallestEven,\
    \ arr.indexOf(smallestEven)];\n  return answer;\n}", "    if (arr.length === 0){\n\
    \        return [];\n    }\n    else{\n        let mini = 1000;\n        let index\
    \ = 0;\n        let answer = [];\n        for (let i = 0; i < arr.length; i++){\n\
    \            if (arr[i] % 2 === 0 && arr[i] < mini){\n                mini = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (mini === 1000){\n\
    \            return [];\n        }\n        else{\n            answer.push(mini);\n\
    \            answer.push(index);\n            return answer;\n        }\n    }\n\
    }\n", "  let smallest = null;\n  let index = null;\n  arr.forEach((num, i) =>\
    \ {\n    if (num % 2 === 0) {\n      if (smallest === null) {\n        smallest\
    \ = num;\n        index = i;\n      } else if (num < smallest) {\n        smallest\
    \ = num;\n        index = i;\n      }\n    }\n  });\n  if (smallest !== null)\
    \ {\n    return [smallest, index];\n  } else {\n    return [];\n  }\n}\npluck([5,\
    \ 0, 3, 0, 4, 2]);", "    let evens = arr.filter(item => item % 2 === 0);\n  \
    \  let smallestEven = Math.min(...evens);\n    let index = arr.indexOf(smallestEven);\n\
    \    return smallestEven !== Infinity ? [smallestEven, index] : [];\n}\n", " \
    \   let evens = arr.filter(i => i % 2 === 0);\n    let index = arr.indexOf(Math.min(...evens));\n\
    \    if (evens.length === 0){\n        return [];\n    }\n    return [Math.min(...evens),\
    \ index];\n}", "  var evens = [];\n  var index = null;\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] % 2 === 0 && !index){\n      index = i;\n    }\n    if(arr[i]\
    \ % 2 === 0){\n      evens.push(arr[i]);\n    }\n  }\n  if(evens.length === 0){\n\
    \    return [];\n  }\n  var smallest = Math.min.apply(null, evens);\n  return\
    \ [smallest, index];\n}", "    let newArr = [];\n    let min = arr[0];\n    let\
    \ index = 0;\n    let index_1 = 0;\n    let even_1 = false;\n    let even_2 =\
    \ false;\n    for(let i = 0; i < arr.length; i++){\n        if(min > arr[i]){\n\
    \            min = arr[i];\n            index = i;\n        }\n    }\n    if(min\
    \ % 2 == 0){\n        even_1 = true;\n    }\n    else{\n        min = arr[1];\n\
    \        for(let i = 0; i < arr.length; i++){\n            if(min > arr[i]){\n\
    \                min = arr[i];\n                index_1 = i;\n            }\n\
    \        }\n        if(min % 2 == 0){\n            even_2 = true;\n        }\n\
    \    }\n    if(even_1){\n        newArr[0] = min;\n        newArr[1] = index;\n\
    \    }\n    else if(even_2){\n        newArr[0] = min;\n        newArr[1] = index_1;\n\
    \    }\n    else{\n        newArr = [];\n    }\n    return newArr;\n}", "  let\
    \ evens = arr.filter(n => n % 2 === 0)\n  if (evens.length === 0) return []\n\
    \  let smallestEven = evens.reduce((min, val) => min < val ? min : val)\n  let\
    \ index = arr.indexOf(smallestEven)\n  return [smallestEven, index]\n}\n", " \
    \ let answer = [];\n  let min_index = 0;\n  let min_value = 999999999;\n  for(let\
    \ i = 0; i < arr.length; i++){\n    if(arr[i] % 2 == 0 && arr[i] < min_value){\n\
    \      min_value = arr[i];\n      min_index = i;\n    }\n  }\n  if(min_value ==\
    \ 999999999){\n    return [];\n  }\n  answer.push(min_value);\n  answer.push(min_index);\n\
    \  return answer;\n}\n", "    if (arr.length === 0) return [];\n    let even =\
    \ [Infinity, 0];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ % 2 === 0 && arr[i] < even[0]) {\n            even[0] = arr[i];\n          \
    \  even[1] = i;\n        }\n    }\n    if (even[0] === Infinity) return [];\n\
    \    return even;\n}", "  let min = Number.MAX_SAFE_INTEGER\n  let minIndex =\
    \ -1\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 === 0 && arr[i]\
    \ < min){\n      min = arr[i]\n      minIndex = i\n    }\n  }\n  return minIndex\
    \ >= 0 ? [min, minIndex] : []\n}\n\nmodule.exports = { pluck }", "    let evens\
    \ = arr.filter(el => el % 2 === 0);\n    if (evens.length === 0) return [];\n\
    \    let min = Math.min(...evens);\n    return [min, arr.indexOf(min)];\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
