name: HumanEval_68_pluck
language: js
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in an array, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// >>> pluck([4, 2, 3])\n// [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// >>> pluck([1, 2,\
  \ 3])\n// [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n// Example 3:\n// >>> pluck([])\n// []\n// Example 4:\n// >>> pluck([5,\
  \ 0, 3, 0, 4, 2])\n// [0, 1]\n// Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n// so we will choose the first zero, which has the smallest index.\n\
  // Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nfunction\
  \ pluck(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([5,\
  \ 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1, 2, 3, 0, 5, 3]),[0,\
  \ 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n  assert.deepEqual(candidate([7,\
  \ 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7, 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    let result = [],\n        index = -1;\n    for(let i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] % 2 === 0){\n            if(result.length === 0 ||\
    \ result[0] > arr[i]){\n                result = [arr[i], i];\n            }\n\
    \        }\n    }\n    return result;\n}\n", "    let evenArr = [];\n    for(i=0;\
    \ i<arr.length; i++){\n        if(arr[i]%2 === 0){\n            evenArr.push(arr[i]);\n\
    \        }\n    }\n    if(evenArr.length < 1){\n        return [];\n    }\n  \
    \  let smallestEven = evenArr[0];\n    for(i=0; i<evenArr.length; i++){\n    \
    \    if(evenArr[i] < smallestEven){\n            smallestEven = evenArr[i];\n\
    \        }\n    }\n    let indexOfSmallestEven = arr.indexOf(smallestEven);\n\
    \    let result = [smallestEven, indexOfSmallestEven];\n    return result;\n}",
  "  var evenArr = [];\n  var indexArr = [];\n  var smallestArr = [];\n  var sortedEvenArr\
    \ = [];\n  var smallestIndex = 0;\n  for(var i = 0; i < arr.length; i++){\n  \
    \  if(arr[i] % 2 === 0){\n      evenArr.push(arr[i]);\n      indexArr.push(i);\n\
    \    }\n  }\n  sortedEvenArr = evenArr.sort();\n  smallestArr.push(sortedEvenArr[0]);\n\
    \  for(var j = 0; j < indexArr.length; j++){\n    if(arr[indexArr[j]] === smallestArr[0]){\n\
    \      smallestIndex = indexArr[j];\n      break;\n    }\n  }\n  smallestArr.push(smallestIndex);\n\
    \  return smallestArr;\n}\n", "  let evens = arr.filter(x => x % 2 === 0);\n \
    \ if(evens.length === 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n\
    }\n", "  if(arr.length === 0){\n    return [];\n  }\n  let smallestEven;\n  let\
    \ smallestIndex;\n  let smallestEvenIndex;\n  for(let i = 0; i < arr.length; i++){\n\
    \    if(arr[i] % 2 === 0){\n      if(!smallestEven){\n        smallestEven = arr[i];\n\
    \        smallestEvenIndex = i;\n      } else if(arr[i] < smallestEven){\n   \
    \     smallestEven = arr[i];\n        smallestEvenIndex = i;\n      }\n    }\n\
    \  }\n  if(!smallestEven){\n    return [];\n  }\n  return [smallestEven, smallestEvenIndex];\n\
    }\n", "    let evenArr = arr.filter(el => el % 2 === 0);\n    if (evenArr.length)\
    \ {\n        let minEven = Math.min(...evenArr);\n        return [minEven, arr.indexOf(minEven)];\n\
    \    } else {\n        return [];\n    }\n}\n", "  // your code here\n  if (arr.length\
    \ === 0) {\n    return [];\n  }\n  var res = [], low = 0;\n  for (var i = 0; i\
    \ < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (res.length ===\
    \ 0) {\n        res = [arr[i], i];\n      } else if (arr[i] < res[0]) {\n    \
    \    res = [arr[i], i];\n      }\n    }\n  }\n  return res;\n}", "  let evenArr\
    \ = arr.filter(function(item) {\n    return item % 2 === 0;\n  });\n  if (evenArr.length\
    \ === 0) {\n    return [];\n  }\n  let answer = [Math.min(...evenArr), arr.indexOf(Math.min(...evenArr))];\n\
    \  return answer;\n}\n", "  if (arr.length === 0) return [];\n  let smallest =\
    \ Infinity;\n  let result = [];\n  for (let i = 0; i < arr.length; i++){\n   \
    \ if (arr[i] % 2 === 0){\n      if (arr[i] < smallest){\n        smallest = arr[i];\n\
    \        result = [smallest, i];\n      }\n    }\n  }\n  return result;\n}", " \
    \   let min;\n    let index = -1;\n    for(let i = 0; i < arr.length; i++){\n\
    \        if(arr[i] % 2 === 0 && (min === undefined || arr[i] < min)){\n      \
    \      min = arr[i];\n            index = i;\n        }\n    }\n    return index\
    \ === -1 ? [] : [min, index];\n}\n", "  if(arr.length === 0) return [];\n  let\
    \ evenArr = [];\n  for(let i = 0; i < arr.length; i++){\n    if(arr[i] % 2 ===\
    \ 0) evenArr.push(arr[i]);\n  }\n  if(evenArr.length === 0) return [];\n  let\
    \ smallest = evenArr[0];\n  let index;\n  for(let i = 0; i < evenArr.length; i++){\n\
    \    if(evenArr[i] < smallest){\n      smallest = evenArr[i];\n      index = i;\n\
    \    }\n  }\n  return [smallest, index];\n}\n", "    let even = arr.filter(el\
    \ => el % 2 === 0);\n    let smallestEven = even.sort((a, b) => a - b)[0];\n \
    \   if(!smallestEven){\n        return [];\n    }\n    let index = arr.indexOf(smallestEven);\n\
    \    return [smallestEven, index];\n}\n", "    if(arr.length == 0) return [];\n\
    \    var minEven = Number.MAX_VALUE;\n    var index = -1;\n    for(var i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] % 2 == 0 && arr[i] < minEven){\n  \
    \          minEven = arr[i];\n            index = i;\n        }\n    }\n    if(index\
    \ == -1) return [];\n    return [minEven, index];\n}\n", "    let evenArr = [];\n\
    \    let arrOfEven = arr.filter(item => {\n        if(item % 2 === 0) {\n    \
    \        evenArr.push(item);\n        }\n    });\n    console.log(evenArr);\n\
    \    console.log(arrOfEven);\n    let evenSmall = Math.min(...evenArr);\n    console.log(evenSmall);\n\
    \    let indexArr = [];\n    arr.forEach((val, index) => {\n        if(val ===\
    \ evenSmall) {\n            indexArr.push(index);\n        }\n    });\n    console.log(indexArr);\n\
    \    let smallestIndex = Math.min(...indexArr);\n    console.log(smallestIndex);\n\
    \    let result = [];\n    result.push(evenSmall, smallestIndex);\n    console.log(result);\n\
    \    if(result.length === 0) {\n        return result;\n    }\n    return result;\n\
    }", "    let newArr = [];\n    let i = 0;\n    let evens = 0;\n    let results\
    \ = [];\n    for(let num of arr){\n        if(num % 2 === 0){\n            newArr.push(num);\n\
    \            evens = num;\n        }\n    }\n    for(let num of arr){\n      \
    \  if(num === evens){\n            results.push(num);\n            results.push(i);\n\
    \            break;\n        }\n        i++;\n    }\n    if(results.length ===\
    \ 0){\n        return [];\n    }\n    return results;\n}", "\tlet results = [];\n\
    \tlet evens = arr.filter(item => {\n\t\tif(item % 2 === 0){\n\t\t\treturn item;\n\
    \t\t}\n\t})\n\tif(evens.length === 0){\n\t\treturn [];\n\t}\n\tlet smallest =\
    \ evens.reduce((acc, item) => {\n\t\tif(item < acc){\n\t\t\treturn item;\n\t\t\
    }\n\t\treturn acc;\n\t})\n\treturn [smallest, arr.indexOf(smallest)];\n}", " \
    \   return arr.filter(a => a%2 === 0)\n        .sort((a,b) => a-b)[0] !== undefined\
    \ ? [arr.filter(a => a%2 === 0)\n            .sort((a,b) => a-b)[0], arr.indexOf(arr.filter(a\
    \ => a%2 === 0)\n            .sort((a,b) => a-b)[0])] : [];\n}", "    let result\
    \ = [];\n    let evens = [];\n    if(arr.length === 0) {\n        return [];\n\
    \    }\n    for(let i = 0; i < arr.length; i++) {\n        if(arr[i] % 2 === 0)\
    \ {\n            evens.push(arr[i]);\n        }\n    }\n    if(evens.length ===\
    \ 0) {\n        return [];\n    }\n    let minEven = Math.min(...evens);\n   \
    \ for(let i = 0; i < arr.length; i++) {\n        if(arr[i] === minEven) {\n  \
    \          result.push(minEven);\n            result.push(i);\n            return\
    \ result;\n        }\n    }\n    return result;\n}", "\tif(arr.length < 1){\n\t\
    \treturn [];\n\t}\n\tlet result = [],\n\t\tsmallestEven = Infinity,\n\t\tsmallestEvenIndex\
    \ = Infinity;\n\tfor(let i = 0; i < arr.length; i++){\n\t\tif(arr[i] % 2 === 0\
    \ && arr[i] < smallestEven){\n\t\t\tsmallestEven = arr[i];\n\t\t\tsmallestEvenIndex\
    \ = i;\n\t\t}\n\t}\n\tif(smallestEven === Infinity){\n\t\treturn [];\n\t} else\
    \ {\n\t\tresult.push(smallestEven);\n\t\tresult.push(smallestEvenIndex);\n\t\t\
    return result;\n\t}\n}", "    var result = [];\n    var min;\n    for(var i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            if(min\
    \ === undefined){\n                min = arr[i];\n                result = [min,\
    \ i];\n            }\n            else if(arr[i] < min){\n                min\
    \ = arr[i];\n                result = [min, i];\n            }\n        }\n  \
    \  }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
