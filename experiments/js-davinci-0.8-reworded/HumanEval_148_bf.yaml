name: HumanEval_148_bf
language: js
prompt: "//There are eight planets in our solar system: the closerst to the Sun \n\
  // is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n// Uranus,\
  \ Neptune.\n// Write a function that takes two planet names as strings planet1 and\
  \ planet2. \n// The function should return an array containing all planets whose\
  \ orbits are \n// located between the orbit of planet1 and the orbit of planet2,\
  \ sorted by \n// the proximity to the sun. \n// The function should return an empty\
  \ array if planet1 or planet2\n// are not correct planet names. \n// Examples\n\
  // >>> bf(\"Jupiter\", \"Neptune\")\n// [\"Saturn\", \"Uranus\"]\n// >>> bf(\"Earth\"\
  , \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\", \"Uranus\")\n// [\"Venus\"\
  , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"]\nfunction bf(planet1, planet2){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = bf;\n  assert.deepEqual(candidate(\"Jupiter\", \"Neptune\"),[\"Saturn\", \"\
  Uranus\"]);\n  assert.deepEqual(candidate(\"Earth\", \"Mercury\"),[\"Venus\"]);\n\
  \  assert.deepEqual(candidate(\"Mercury\", \"Uranus\"),[\"Venus\", \"Earth\", \"\
  Mars\", \"Jupiter\", \"Saturn\"]);\n  assert.deepEqual(candidate(\"Neptune\", \"\
  Venus\"),[\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]);\n  assert.deepEqual(candidate(\"\
  Earth\", \"Earth\"),[]);\n  assert.deepEqual(candidate(\"Mars\", \"Earth\"),[]);\n\
  \  assert.deepEqual(candidate(\"Jupiter\", \"Makemake\"),[]);\n}\n\ntest();"
completions: ["    // your code here\n}", "\tvar planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t\
    var order = planets.indexOf(planet1)<planets.indexOf(planet2) ? planets.indexOf(planet1)\
    \ : planets.indexOf(planet2);\n\tvar planetsArr = planets.slice(order, order+1);\n\
    \treturn planetsArr;\n}", "    var solarSystem = {\n        Mercury:1,\n     \
    \   Venus:2,\n        Earth:3,\n        Mars:4,\n        Jupiter:5,\n        Saturn:6,\n\
    \        Uranus:7,\n        Neptune:8\n    }\n    var res = [];\n    var start\
    \ = solarSystem[planet1];\n    var end = solarSystem[planet2];\n    if(planet1\
    \ && planet2){\n        if(start > end){\n            for(var i = end; i <= start;\
    \ i++){\n                for(var key in solarSystem){\n                    if(solarSystem[key]\
    \ === i){\n                        res.push(key);\n                    }\n   \
    \             }\n            }\n        }else{\n            for(var i = start;\
    \ i <= end; i++){\n                for(var key in solarSystem){\n            \
    \        if(solarSystem[key] === i){\n                        res.push(key);\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return res;\n}", "    var planets = {\n        'Mercury':1,\n        'Venus':2,\n\
    \        'Earth':3,\n        'Mars':4,\n        'Jupiter':5,\n        'Saturn':6,\n\
    \        'Uranus':7,\n        'Neptune':8\n    }\n    if(!planets[planet1] ||\
    \ !planets[planet2]){\n        return [];\n    }\n    var keys = Object.keys(planets);\n\
    \    var position1 = keys.indexOf(planet1);\n    var position2 = keys.indexOf(planet2);\n\
    \    if(position1 > position2){\n        var temp = position1;\n        position1\
    \ = position2;\n        position2 = temp;\n    }\n    var res = [];\n    for(var\
    \ i = position1 + 1; i < position2; i++){\n        res.push(keys[i]);\n    }\n\
    \    return res;\n}", "    var orbits = {\n        \"Mercury\": 1,\n        \"\
    Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\"\
    : 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n\
    \    };\n    if (orbits[planet1] && orbits[planet2]){\n        var result = [];\n\
    \        for (var planet in orbits){\n            if (planet !== planet1 && planet\
    \ !== planet2){\n                if (orbits[planet] > orbits[planet1] && orbits[planet]\
    \ < orbits[planet2]){\n                    result.push(planet);\n            \
    \    }\n            }\n        }\n        return result;\n    } else {\n     \
    \   return [];\n    }\n}\n", "\tlet planets = {\n\t\t\"Mercury\": 1,\n\t\t\"Venus\"\
    : 2,\n\t\t\"Earth\": 3,\n\t\t\"Mars\": 4,\n\t\t\"Jupiter\": 5,\n\t\t\"Saturn\"\
    : 6,\n\t\t\"Uranus\": 7,\n\t\t\"Neptune\": 8\n\t}\n\tif(!planets[planet1] || !planets[planet2]){\n\
    \t\treturn [];\n\t}\n\tif(planets[planet1] < planets[planet2]){\n\t\tlet planetList\
    \ = [];\n\t\tfor(let i = planets[planet1] + 1; i < planets[planet2]; i++){\n\t\
    \t\tplanetList.push(Object.keys(planets).find(key => planets[key] === i));\n\t\
    \t}\n\t\treturn planetList;\n\t}\n\tif(planets[planet1] > planets[planet2]){\n\
    \t\tlet planetList = [];\n\t\tfor(let i = planets[planet2] + 1; i < planets[planet1];\
    \ i++){\n\t\t\tplanetList.push(Object.keys(planets).find(key => planets[key] ===\
    \ i));\n\t\t}\n\t\treturn planetList;\n\t}\n}", "\tvar planets = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n\tvar index1 = planets.indexOf(planet1);\n\tvar index2 = planets.indexOf(planet2);\n\
    \tvar temp = [];\n\tif (index1 > index2){\n\t\tfor (var i = index2; i < index1;\
    \ i++){\n\t\t\ttemp.push(planets[i]);\n\t\t}\n\t} else {\n\t\tfor (var i = index1;\
    \ i < index2; i++){\n\t\t\ttemp.push(planets[i]);\n\t\t}\n\t}\n\treturn temp;\n\
    }\n", "    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    if(!planets.includes(planet1) ||\
    \ !planets.includes(planet2)){\n        return [];\n    }\n    let i = planets.indexOf(planet1);\n\
    \    let j = planets.indexOf(planet2);\n    if(i>j){\n        [i,j] = [j,i];\n\
    \    }\n    return planets.slice(i+1,j);\n}\n", "    \n    var planets = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    var planetIdx1 = planets.indexOf(planet1);\n    var planetIdx2 = planets.indexOf(planet2);\n\
    \    var result = [];\n    var swap;\n    if(planetIdx1 == -1 || planetIdx2 ==\
    \ -1){\n        return result;\n    }\n    if(planetIdx1 > planetIdx2){\n    \
    \    swap = planetIdx1;\n        planetIdx1 = planetIdx2;\n        planetIdx2\
    \ = swap;\n    }\n    for(var i = planetIdx1 + 1; i < planetIdx2; i++){\n    \
    \    result.push(planets[i]);\n    }\n    return result;\n}", "    // YOUR CODE\
    \ HERE\n    return [];\n}\n", "    const planets = {\n        \"Mercury\":1,\n\
    \        \"Venus\":2,\n        \"Earth\":3,\n        \"Mars\":4,\n        \"Jupiter\"\
    :5,\n        \"Saturn\":6,\n        \"Uranus\":7,\n        \"Neptune\":8\n   \
    \ }\n    if(planet1 in planets && planet2 in planets){\n        const x = planets[planet1];\n\
    \        const y = planets[planet2];\n        let result = [];\n        if(x<y){\n\
    \            for(let i = x+1; i<y; i++){\n                for(let key in planets){\n\
    \                    if(planets[key] == i){\n                        result.push(key);\n\
    \                    }\n                }\n            }\n        }\n        else{\n\
    \            for(let i = y+1; i<x; i++){\n                for(let key in planets){\n\
    \                    if(planets[key] == i){\n                        result.push(key);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    else{\n        return [];\n    }\n}\n", "\tvar planets =\
    \ [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n\tvar indexPlanet1 = planets.indexOf(planet1);\n\tvar indexPlanet2\
    \ = planets.indexOf(planet2);\n\tif(indexPlanet1 == -1 || indexPlanet2 == -1)\
    \ return [];\n\tvar betweenPlanets = [];\n\tif(indexPlanet1 > indexPlanet2){\n\
    \t\tfor(i = indexPlanet2 + 1; i < indexPlanet1; i++){\n\t\t\tbetweenPlanets.push(planets[i]);\n\
    \t\t}\n\t} else if(indexPlanet1 < indexPlanet2){\n\t\tfor(i = indexPlanet1 + 1;\
    \ i < indexPlanet2; i++){\n\t\t\tbetweenPlanets.push(planets[i]);\n\t\t}\n\t}\n\
    \treturn betweenPlanets;\n}\n", "    var planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var\
    \ ind1 = 0;\n    var ind2 = 0;\n    var new_planets = [];\n    if(planet1 == planet2){\n\
    \        return [];\n    }\n    for(var i = 0; i < planets.length; i++){\n   \
    \     if(planets[i] == planet1){\n            ind1 = i;\n        }\n        if(planets[i]\
    \ == planet2){\n            ind2 = i;\n        }\n    }\n    if(ind1 == 0 || ind2\
    \ == 0){\n        return [];\n    }\n    if(ind1 > ind2){\n        for(var j =\
    \ ind2; j < ind1; j++){\n            new_planets.push(planets[j]);\n        }\n\
    \    }\n    else{\n        for(var j = ind1; j < ind2; j++){\n            new_planets.push(planets[j]);\n\
    \        }\n    }\n    return new_planets;\n}\n", "    if (planet1 === \"Mercury\"\
    ){\n        if (planet2 === \"Venus\"){\n            return [\"Venus\"];\n   \
    \     } else if (planet2 === \"Earth\"){\n            return [\"Venus\", \"Earth\"\
    ];\n        } else if (planet2 === \"Mars\"){\n            return [\"Venus\",\
    \ \"Earth\", \"Mars\"];\n        } else if (planet2 === \"Jupiter\"){\n      \
    \      return [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"];\n        } else if\
    \ (planet2 === \"Saturn\"){\n            return [\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\"];\n        } else if (planet2 === \"Uranus\"){\n   \
    \         return [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\"];\n        } else if (planet2 === \"Neptune\"){\n            return [\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n        } else {\n            return [];\n        }\n    } else if (planet1\
    \ === \"Venus\"){\n        if (planet2 === \"Earth\"){\n            return [\"\
    Earth\"];\n        } else if (planet2 === \"Mars\"){\n            return [\"Earth\"\
    , \"Mars\"];\n        } else if (planet2 === \"Jupiter\"){\n            return\
    \ [\"Earth\", \"Mars\", \"Jupiter\"];\n        } else if (planet2 === \"Saturn\"\
    ){\n            return [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\n     \
    \   } else if (planet2 === \"Uranus\"){\n            return [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"];\n        } else if (planet2 === \"Neptune\"\
    ){\n            return [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n        } else {\n            return [];\n        }\n    } else\
    \ if (planet1 === \"Earth\"){\n        if (planet2 === \"Mars\"){\n          \
    \  return [\"Mars\"];\n        } else if (planet2 === \"Jupiter\"){\n        \
    \    return [\"Mars\", \"", "    let planets = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let p1 = planets.indexOf(planet1);\n\
    \    let p2 = planets.indexOf(planet2);\n    if(p1 < 0 || p2 < 0){\n        return\
    \ [];\n    }\n    let results = [];\n    if(p1 < p2){\n        results = planets.slice(p1\
    \ + 1, p2)\n    } else {\n        results = planets.slice(p2 + 1, p1)\n    }\n\
    \    return results;\n}\n", "    var planets = [\n        {name: \"Mercury\",\
    \ near_to_sun: true},\n        {name: \"Venus\", near_to_sun: true},\n       \
    \ {name: \"Earth\", near_to_sun: true},\n        {name: \"Mars\", near_to_sun:\
    \ true},\n        {name: \"Jupiter\", near_to_sun: false},\n        {name: \"\
    Saturn\", near_to_sun: false},\n        {name: \"Uranus\", near_to_sun: false},\n\
    \        {name: \"Neptune\", near_to_sun: false}\n    ];\n    var planet1_index\
    \ = 0;\n    var planet2_index = 0;\n    var between_planets = [];\n    var new_between_planets\
    \ = [];\n    var sorted_between_planets = [];\n    var new_sorted_between_planets\
    \ = [];\n    for(var i = 0; i < planets.length; i++){\n        if(planets[i].name\
    \ == planet1){\n            planet1_index = i;\n        }\n        if(planets[i].name\
    \ == planet2){\n            planet2_index = i;\n        }\n    }\n    if(planet1_index\
    \ > planet2_index){\n        for(var j = planet2_index; j < planet1_index; j++){\n\
    \            between_planets.push(planets[j].name);\n        }\n    }else{\n \
    \       for(var j = planet1_index; j < planet2_index; j++){\n            between_planets.push(planets[j].name);\n\
    \        }\n    }\n    for(var k = 0; k < between_planets.length; k++){\n    \
    \    for(var l = 0; l < planets.length; l++){\n            if(between_planets[k]\
    \ == planets[l].name){\n                if(planets[l].near_to_sun == true){\n\
    \                    new_between_planets.push(planets[l].name);\n            \
    \    }\n            }\n        }\n    }\n    sorted_between_planets = between_planets.sort();\n\
    \    new_s", "    var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var start = planets.indexOf(planet1);\n\
    \    var end = planets.indexOf(planet2);\n    var result = [];\n    if (start\
    \ === -1 || end === -1){\n        return result;\n    } else if (start < end){\n\
    \        result = planets.slice(start+1, end);\n    } else {\n        result =\
    \ planets.slice(end+1, start);\n    }\n    return result;\n}\n", "  let s = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n  let\
    \ p1 = s.indexOf(planet1);\n  let p2 = s.indexOf(planet2);\n  if(p1 == -1 || p2\
    \ == -1){\n    return [];\n  }\n  let res = [];\n  for(let i = p1 + 1; i < p2;\
    \ i++){\n    res.push(s[i]);\n  }\n  return res;\n}\n", "    var planets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n    var index1 = planets.indexOf(planet1);\n    var index2 =\
    \ planets.indexOf(planet2);\n    if(index1 < 0 || index2 < 0){\n        return\
    \ [];\n    }\n    if(index1 > index2){\n        var temp = index1;\n        index1\
    \ = index2;\n        index2 = temp;\n    }\n    return planets.slice(index1 +\
    \ 1, index2);\n}", "    let solarSystem = [\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let arr =\
    \ [];\n    let first = solarSystem.indexOf(planet1);\n    let second = solarSystem.indexOf(planet2);\n\
    \    if(first<0 || second<0){\n        return arr;\n    }\n    if(first<second){\n\
    \        for(let i = first+1; i<second; i++){\n            arr.push(solarSystem[i]);\n\
    \        }\n    }else{\n        for(let i = second+1; i<first; i++){\n       \
    \     arr.push(solarSystem[i]);\n        }\n    }\n    return arr;\n}", "    const\
    \ planets = [\n        \"Mercury\",\n        \"Venus\",\n        \"Earth\",\n\
    \        \"Mars\",\n        \"Jupiter\",\n        \"Saturn\",\n        \"Uranus\"\
    ,\n        \"Neptune\"\n    ];\n    const planet1Pos = planets.indexOf(planet1);\n\
    \    const planet2Pos = planets.indexOf(planet2);\n    if (planet1Pos === -1 ||\
    \ planet2Pos === -1) {\n        return [];\n    }\n    const range = Math.abs(planet1Pos\
    \ - planet2Pos);\n    const arr = [];\n    for (let i = 1; i < range; i++) {\n\
    \        arr.push(planets[planet1Pos + i]);\n    }\n    return arr;\n}\n", " \
    \   var solarSystem = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    var firstPlanet = solarSystem.indexOf(planet1);\n\
    \    var secondPlanet = solarSystem.indexOf(planet2);\n    var result = [];\n\
    \    if (firstPlanet === -1 || secondPlanet === -1) {\n        return \"\";\n\
    \    }\n    else if (firstPlanet > secondPlanet) {\n        for (var i = secondPlanet;\
    \ i < firstPlanet; i++) {\n            result.push(solarSystem[i]);\n        }\n\
    \    }\n    else {\n        for (var i = firstPlanet; i < secondPlanet; i++) {\n\
    \            result.push(solarSystem[i]);\n        }\n    }\n    return result;\n\
    }\n", "\tvar planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n\tvar planetOrder = planets.indexOf(planet1) - planets.indexOf(planet2);\n\
    \tif (planetOrder > 0){\n\t\treturn planets.slice(planets.indexOf(planet2)+1,\
    \ planets.indexOf(planet1));\n\t}\n\telse if (planetOrder < 0){\n\t\treturn planets.slice(planets.indexOf(planet1)+1,\
    \ planets.indexOf(planet2));\n\t}\n\telse if (planetOrder === 0){\n\t\treturn\
    \ '';\n\t}\n\telse{\n\t\treturn [];\n\t}\n}\n", "\tlet planets = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n\tlet first = planets.indexOf(planet1);\n\tlet second = planets.indexOf(planet2);\n\
    \tlet bool = true;\n\tif (first < 0 || second < 0) {\n\t\treturn [];\n\t} else\
    \ if (first > second) {\n\t\t[first, second] = [second, first];\n\t\tbool = false;\n\
    \t}\n\treturn bool ? planets.slice(first + 1, second) : planets.slice(second +\
    \ 1, first);\n}", "\tlet planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tlet idx1 = planets.indexOf(planet1);\n\
    \tlet idx2 = planets.indexOf(planet2);\n\tlet result = [];\n\tif(idx1 < 0 || idx2\
    \ < 0){\n\t\treturn result;\n\t}\n\tif(idx1 > idx2){\n\t\tfor(let i = idx2 + 1;\
    \ i < idx1; i++){\n\t\t\tresult.push(planets[i]);\n\t\t}\n\t} else if(idx1 < idx2){\n\
    \t\tfor(let i = idx1 + 1; i < idx2; i++){\n\t\t\tresult.push(planets[i]);\n\t\t\
    }\n\t}\n\treturn result;\n}", "    var orbit = {\n        \"Mercury\":1,\n   \
    \     \"Venus\":2,\n        \"Earth\":3,\n        \"Mars\":4,\n        \"Jupiter\"\
    :5,\n        \"Saturn\":6,\n        \"Uranus\":7,\n        \"Neptune\":8\n   \
    \ }\n    if (orbit[planet1] == undefined || orbit[planet2] == undefined) {\n \
    \       return []\n    }\n    var a = Math.min(orbit[planet1], orbit[planet2]);\n\
    \    var b = Math.max(orbit[planet1], orbit[planet2]);\n    var answer = [];\n\
    \    for (var key in orbit) {\n        if (orbit[key] >= a && orbit[key] <= b)\
    \ {\n            answer.push(key);\n        }\n    }\n    return answer;\n}",
  "\tvar planets = {\n\t\tMercury: 1,\n\t\tVenus: 2,\n\t\tEarth: 3,\n\t\tMars: 4,\n\
    \t\tJupiter: 5,\n\t\tSaturn: 6,\n\t\tUranus: 7,\n\t\tNeptune: 8\n\t};\n\tif(!planets[planet1]\
    \ || !planets[planet2])\n\t\treturn [];\n\tif(planets[planet1] < planets[planet2])\n\
    \t\tvar result = Object.keys(planets).slice(planets[planet1], planets[planet2]);\n\
    \telse\n\t\tvar result = Object.keys(planets).slice(planets[planet2], planets[planet1]).reverse();\n\
    \treturn result;\n}\n", "\tvar between = [];\n\tif(planet1 == \"Mercury\"){\n\t\
    \tbetween.push(\"Venus\");\n\t}\n\tif(planet1 == \"Venus\"){\n\t\tbetween.push(\"\
    Earth\");\n\t}\n\tif(planet1 == \"Earth\"){\n\t\tbetween.push(\"Mars\");\n\t}\n\
    \tif(planet1 == \"Mars\"){\n\t\tbetween.push(\"Jupiter\");\n\t}\n\tif(planet1\
    \ == \"Jupiter\"){\n\t\tbetween.push(\"Saturn\");\n\t}\n\tif(planet1 == \"Saturn\"\
    ){\n\t\tbetween.push(\"Uranus\");\n\t}\n\tif(planet1 == \"Uranus\"){\n\t\tbetween.push(\"\
    Neptune\");\n\t}\n\tif(planet2 == \"Venus\"){\n\t\tbetween.pop();\n\t}\n\tif(planet2\
    \ == \"Earth\"){\n\t\tbetween.pop();\n\t}\n\tif(planet2 == \"Mars\"){\n\t\tbetween.pop();\n\
    \t}\n\tif(planet2 == \"Jupiter\"){\n\t\tbetween.pop();\n\t}\n\tif(planet2 == \"\
    Saturn\"){\n\t\tbetween.pop();\n\t}\n\tif(planet2 == \"Uranus\"){\n\t\tbetween.pop();\n\
    \t}\n\tif(planet2 == \"Neptune\"){\n\t\tbetween.pop();\n\t}\n\treturn between;\n\
    }", "    const solarSystem = {\n        Mercury: 1,\n        Venus: 2,\n     \
    \   Earth: 3,\n        Mars: 4,\n        Jupiter: 5,\n        Saturn: 6,\n   \
    \     Uranus: 7,\n        Neptune: 8\n    }\n    let p1, p2;\n    if (planet1\
    \ in solarSystem && planet2 in solarSystem){\n        p1 = solarSystem[planet1];\n\
    \        p2 = solarSystem[planet2];\n    } else {\n        return [];\n    }\n\
    \    let res = [];\n    for (let i = p1 + 1; i < p2; i++){\n        for (let planet\
    \ in solarSystem){\n            if (solarSystem[planet] === i){\n            \
    \    res.push(planet);\n            }\n        }\n    }\n    return res;\n}\n",
  "\tvar solar = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n\tvar sun = [];\n\tvar index1 = 0;\n\tvar index2 = 0;\n\tfor(var\
    \ i = 0; i < solar.length; i++){\n\t\tif(solar[i] === planet1){\n\t\t\tindex1\
    \ = i;\n\t\t}\n\t\tif(solar[i] === planet2){\n\t\t\tindex2 = i;\n\t\t}\n\t}\n\t\
    if(index1 === 0 && index2 === 0){\n\t\treturn [];\n\t}\n\tif(index1 > index2){\n\
    \t\tindex1 = index2;\n\t\tindex2 = index1;\n\t}\n\tfor(var j = index1 + 1; j <\
    \ index2; j++){\n\t\tsun.push(solar[j]);\n\t}\n\treturn sun;\n}\n", "    var arr\
    \ = {\n        Mercury: 1,\n        Venus: 2,\n        Earth: 3,\n        Mars:\
    \ 4,\n        Jupiter: 5,\n        Saturn: 6,\n        Uranus: 7,\n        Neptune:\
    \ 8\n    }\n    var temp = [];\n    if (arr[planet1] === undefined || arr[planet2]\
    \ === undefined) {\n        return temp;\n    } else if (arr[planet1] < arr[planet2])\
    \ {\n        for (var i = arr[planet1]; i < arr[planet2]; i++) {\n           \
    \ for (var key in arr) {\n                if (arr[key] === i) {\n            \
    \        temp.push(key);\n                }\n            }\n        }\n    } else\
    \ {\n        for (var i = arr[planet2]; i < arr[planet1]; i++) {\n           \
    \ for (var key in arr) {\n                if (arr[key] === i) {\n            \
    \        temp.push(key);\n                }\n            }\n        }\n    }\n\
    \    return temp;\n}", "    let solarSystem = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planetIndex\
    \ = [];\n    for(let i = 0; i < solarSystem.length; i++){\n        if(solarSystem[i]\
    \ === planet1 || solarSystem[i] === planet2){\n            planetIndex.push(i);\n\
    \        }\n    }\n    if(planetIndex.length != 2){\n        return [];\n    }\n\
    \    let newSolarSystem = solarSystem.slice(planetIndex[0], planetIndex[1] + 1);\n\
    \    if(planetIndex[0] > planetIndex[1]){\n        newSolarSystem = solarSystem.slice(planetIndex[1],\
    \ planetIndex[0] + 1);\n    }\n    return newSolarSystem;\n}\n", "\tvar planets\
    \ = [\n\t\t{name: \"Mercury\", orbit: 0},\n\t\t{name: \"Venus\", orbit: 1},\n\t\
    \t{name: \"Earth\", orbit: 2},\n\t\t{name: \"Mars\", orbit: 3},\n\t\t{name: \"\
    Jupiter\", orbit: 4},\n\t\t{name: \"Saturn\", orbit: 5},\n\t\t{name: \"Uranus\"\
    , orbit: 6},\n\t\t{name: \"Neptune\", orbit: 7}\n\t];\n\t\n\tvar tempOrbits =\
    \ [];\n\tvar ans = [];\n\tfor(var i = 0; i < planets.length; i++){\n\t\tif(planets[i].name\
    \ === planet1){\n\t\t\tfor(var j = i; j < planets.length; j++){\n\t\t\t\ttempOrbits.push(planets[j].orbit);\n\
    \t\t\t}\n\t\t}else if(planets[i].name === planet2){\n\t\t\tfor(var j = i; j >=\
    \ 0; j--){\n\t\t\t\ttempOrbits.push(planets[j].orbit);\n\t\t\t}\n\t\t}\n\t}\n\t\
    \n\ttempOrbits.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\t\n\tfor(var i\
    \ = 0; i < planets.length; i++){\n\t\tfor(var j = 0; j < tempOrbits.length; j++){\n\
    \t\t\tif(planets[i].orbit === tempOrbits[j]){\n\t\t\t\tans.push(planets[i].name);\n\
    \t\t\t}\n\t\t}\n\t}\n\t\n\treturn ans;\n}\n", "    var solarSystem = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    var planets = [];\n    var index1 = solarSystem.indexOf(planet1);\n  \
    \  var index2 = solarSystem.indexOf(planet2);\n    if(index1 >= 0 && index2 >=\
    \ 0){\n        for(var i = index1; i <= index2; i++){\n            planets.push(solarSystem[i]);\n\
    \        }\n    }\n    return planets;\n}", "    var planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    var empty = [];\n    var final = [];\n    for(var i = 0; i < planets.length;\
    \ i++){\n        if(planets[i] === planet1){\n            for(var j = 0; j < planets.length;\
    \ j++){\n                if(planets[j] === planet2){\n                    if(j\
    \ > i){\n                        for(var k = i + 1; k < j; k++){\n           \
    \                 final.push(planets[k]);\n                        }\n       \
    \                 return final;\n                    }\n                    else{\n\
    \                        for(var k = j + 1; k < i; k++){\n                   \
    \         final.push(planets[k]);\n                        }\n               \
    \         return final;\n                    }\n                }\n          \
    \  }\n        }\n    }\n    return empty;\n}", "\tif (planet1 === \"Mercury\"\
    ){\n\t\treturn [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n\t}\n\tif (planet1 === \"Venus\"){\n\t\treturn [\"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t}\n\tif (planet1\
    \ === \"Earth\"){\n\t\treturn [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\",\
    \ \"Neptune\"];\n\t}\n\tif (planet1 === \"Mars\"){\n\t\treturn [\"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"];\n\t}\n\tif (planet1 === \"Jupiter\"){\n\t\t\
    return [\"Saturn\", \"Uranus\", \"Neptune\"];\n\t}\n\tif (planet1 === \"Saturn\"\
    ){\n\t\treturn [\"Uranus\", \"Neptune\"];\n\t}\n\tif (planet1 === \"Uranus\"){\n\
    \t\treturn [\"Neptune\"];\n\t}\n\tif (planet1 === \"Neptune\"){\n\t\treturn [];\n\
    \t}\n\telse{\n\t\treturn [];\n\t}\n}\n", "    let position1 = planets.indexOf(planet1);\n\
    \    let position2 = planets.indexOf(planet2);\n    let planets1 = [];\n    if(position1\
    \ === -1 || position2 === -1){\n        return planets1;\n    }else if(position1\
    \ > position2){\n        let temp = position1;\n        position1 = position2;\n\
    \        position2 = temp;\n    }\n    for(let i = position1 + 1; i < position2;\
    \ i++){\n        planets1.push(planets[i]);\n    }\n    return planets1;\n}",
  "    planet1 = planet1.toLowerCase();\n    planet2 = planet2.toLowerCase();\n  \
    \  var planets = ['mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus',\
    \ 'neptune'];\n    if(planets.indexOf(planet1) !== -1 && planets.indexOf(planet2)\
    \ !== -1){\n        var planetsInbetween = planets.slice(planets.indexOf(planet1)\
    \ + 1, planets.indexOf(planet2))\n        return planetsInbetween;\n    }\n  \
    \  else{\n        return [];\n    }\n}", "    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    if (index1 === -1 || index2 === -1) {\n        return [];\n    }\n    if\
    \ (index1 < index2) {\n        return planets.slice(index1+1, index2);\n    }\n\
    \    else if (index1 > index2) {\n        return planets.slice(index2+1, index1);\n\
    \    }\n    else {\n        return [];\n    }\n}\n", "    // https://stackoverflow.com/questions/42757058/javascript-object-get-key-with-min-or-max-value\n\
    \    // get min max\n    const map = {\n        Mercury: 1,\n        Venus: 2,\n\
    \        Earth: 3,\n        Mars: 4,\n        Jupiter: 5,\n        Saturn: 6,\n\
    \        Uranus: 7,\n        Neptune: 8\n    }\n    const min = Math.min(map[planet1],\
    \ map[planet2]);\n    const max = Math.max(map[planet1], map[planet2]);\n    const\
    \ result = [];\n    for (let i = min; i <= max; i++) {\n        if (i == map[planet1]\
    \ || i == map[planet2]) {\n            continue;\n        }\n        for (const\
    \ prop in map) {\n            if (map[prop] == i) {\n                result.push(prop);\n\
    \            }\n        }\n    }\n    return result;\n}\n", "\tvar solarSystem\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"];\n\tvar firstPlanetPosition = solarSystem.indexOf(planet1);\n\
    \tvar secondPlanetPosition = solarSystem.indexOf(planet2);\n\tvar result = [];\n\
    \tvar i;\n\tif (firstPlanetPosition === -1 || secondPlanetPosition === -1) {\n\
    \t\treturn [];\n\t}\n\tif (firstPlanetPosition < secondPlanetPosition) {\n\t\t\
    for (i = firstPlanetPosition + 1; i < secondPlanetPosition; i++) {\n\t\t\tresult.push(solarSystem[i]);\n\
    \t\t}\n\t} else {\n\t\tfor (i = secondPlanetPosition + 1; i < firstPlanetPosition;\
    \ i++) {\n\t\t\tresult.push(solarSystem[i]);\n\t\t}\n\t}\n\treturn result;\n}\n",
  "\tvar planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n\tvar idx1 = planets.indexOf(planet1);\n\tvar idx2\
    \ = planets.indexOf(planet2);\n\tvar between = [];\n\tfor(var i = idx1+1; i<idx2;\
    \ i++){\n\t\tbetween.push(planets[i]);\n\t}\n\treturn between;\n}", "    var planets\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"];\n    var index1 = planets.indexOf(planet1);\n    var index2\
    \ = planets.indexOf(planet2);\n    if(index1 > index2){\n        var temp = index1;\n\
    \        index1 = index2;\n        index2 = temp;\n    }\n    var result = [];\n\
    \    for(var i = index1 + 1; i < index2; i++){\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}", "  const planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const\
    \ planetIndex = planets.indexOf(planet1);\n  const planet2Index = planets.indexOf(planet2);\n\
    \  if(planetIndex !== -1 && planet2Index !== -1){\n    let retArr = [];\n    if(planetIndex\
    \ > planet2Index){\n      retArr = planets.slice(planet2Index + 1, planetIndex);\n\
    \    } else {\n      retArr = planets.slice(planetIndex + 1, planet2Index);\n\
    \    }\n    return retArr;\n  }\n  return [];\n}", "  var solarSystem = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n  var planetIndex1 = solarSystem.indexOf(planet1);\n  var planetIndex2 = solarSystem.indexOf(planet2);\n\
    \  if(planetIndex1 === -1 || planetIndex2 === -1){\n    return [];\n  }\n  if(planetIndex1\
    \ > planetIndex2){\n    var start = planetIndex2 + 1;\n    var end = planetIndex1;\n\
    \  } else {\n    var start = planetIndex1 + 1;\n    var end = planetIndex2;\n\
    \  }\n  return solarSystem.slice(start, end);\n}", "  let result = [];\n  const\
    \ planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n  let planet1_index = planets.indexOf(planet1);\n\
    \  let planet2_index = planets.indexOf(planet2);\n  if(planet1_index < 0 || planet2_index\
    \ < 0){\n    return result;\n  }\n  if(planet1_index <= planet2_index){\n    while(planet1_index\
    \ <= planet2_index){\n      result.push(planets[planet1_index]);\n      planet1_index++;\n\
    \    }\n  }\n  else{\n    while(planet1_index >= planet2_index){\n      result.push(planets[planet1_index]);\n\
    \      planet1_index--;\n    }\n  }\n  return result;\n}", "\tvar planets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n\tvar result = [];\n\tvar index1 = planets.indexOf(planet1);\n\
    \tvar index2 = planets.indexOf(planet2);\n\tif(index1 == -1 || index2 == -1){\n\
    \t\treturn \"Please insert correct planet names\";\n\t}\n\tfor(var i = index1;\
    \ i < index2; i++){\n\t\tresult.push(planets[i]);\n\t}\n\treturn result;\n}\n",
  "    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"];\n    let planet1Index = planets.indexOf(planet1);\n\
    \    let planet2Index = planets.indexOf(planet2);\n    let result = [];\n    if\
    \ (planet1Index === -1 || planet2Index === -1) {\n        return result;\n   \
    \ }\n    else if (planet1Index < planet2Index) {\n        for (let i = planet1Index\
    \ + 1; i < planet2Index; i++) {\n            result.push(planets[i]);\n      \
    \  }\n    }\n    else {\n        for (let i = planet2Index + 1; i < planet1Index;\
    \ i++) {\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }\n", "    var list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1 = list.indexOf(planet1);\n\
    \    var index2 = list.indexOf(planet2);\n    var temp;\n    if(index1 > index2){\n\
    \        temp = index1;\n        index1 = index2;\n        index2 = temp;\n  \
    \  }\n    var result = [];\n    for(var i = index1 + 1; i < index2; i++){\n  \
    \      result.push(list[i]);\n    }\n    return result;\n}", "    let planets\
    \ = {\n        Mercury: 1,\n        Venus: 2,\n        Earth: 3,\n        Mars:\
    \ 4,\n        Jupiter: 5,\n        Saturn: 6,\n        Uranus: 7,\n        Neptune:\
    \ 8\n    }\n    let result = []\n    if (planets[planet1] && planets[planet2]){\n\
    \        for (let i = planets[planet1]; i < planets[planet2]; i++){\n        \
    \    result.push(Object.keys(planets).find(key => planets[key] === i))\n     \
    \   }\n    }\n    return result\n}", "  let planets = { \n    Mercury: 1, \n \
    \   Venus: 2, \n    Earth: 3, \n    Mars: 4, \n    Jupiter: 5, \n    Saturn: 6,\
    \ \n    Uranus: 7, \n    Neptune: 8, \n  };\n  if(planets[planet1] === undefined\
    \ || planets[planet2] === undefined) return \"Invalid Planet Name\";\n  let n1\
    \ = planets[planet1];\n  let n2 = planets[planet2];\n  if(n1 < n2){\n    let arr\
    \ = [];\n    for(let i = n1+1; i < n2; i++){\n      arr.push(Object.keys(planets).find(key\
    \ => planets[key] === i));\n    }\n    return arr;\n  }\n  if(n1 > n2){\n    let\
    \ arr = [];\n    for(let i = n2+1; i < n1; i++){\n      arr.push(Object.keys(planets).find(key\
    \ => planets[key] === i));\n    }\n    return arr;\n  }\n  return \"Planets are\
    \ too close\";\n}\n", "  let orbits = [0, 0.4, 0.7, 1, 1.4, 1.7, 2, 2.4, 2.7];\n\
    \  let names = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n  let index1 = names.indexOf(planet1);\n  let index2\
    \ = names.indexOf(planet2);\n  if (index1 > index2){\n    index1 = names.indexOf(planet2);\n\
    \    index2 = names.indexOf(planet1);\n  }\n  let planets = [];\n  for (let i\
    \ = index1; i < index2; i++){\n    planets.push(names[i+1]);\n  }\n  return planets;\n\
    }", "\tvar planetList = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\tvar planetList = planetList.reverse();\n\
    \tvar planet1Index = planetList.indexOf(planet1);\n\tvar planet2Index = planetList.indexOf(planet2);\n\
    \tvar betweenList = planetList.slice(planet1Index, planet2Index + 1);\n\tbetweenList.pop();\n\
    \tbetweenList.shift();\n\tbetweenList = betweenList.reverse();\n\treturn betweenList;\n\
    }\n", "    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    let first = planets.indexOf(planet1);\n\
    \    let second = planets.indexOf(planet2);\n    let res = [];\n    if (first\
    \ < 0 || second < 0){\n        return res;\n    }\n    if (first > second){\n\
    \        for (let i = second + 1; i < first; i++){\n            res.push(planets[i]);\n\
    \        }\n    } else if (first < second){\n        for (let i = first + 1; i\
    \ < second; i++){\n            res.push(planets[i]);\n        }\n    } else {\n\
    \        res.push(planets[first]);\n    }\n    return res;\n}", "    let planets\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"];\n    let list = [];\n    let ind1 = planets.indexOf(planet1);\n\
    \    let ind2 = planets.indexOf(planet2);\n    if(ind1 < 0 || ind2 < 0)\n    \
    \    return [];\n    for(let i = ind1 + 1; i < ind2; i++){\n        list.push(planets[i]);\n\
    \    }\n    return list;\n}\n", "  var planets = {\n    Mercury: 1,\n    Venus:\
    \ 2,\n    Earth: 3,\n    Mars: 4,\n    Jupiter: 5,\n    Saturn: 6,\n    Uranus:\
    \ 7,\n    Neptune: 8\n  };\n  var d = [];\n  for(var i = planets[planet1]; i <=\
    \ planets[planet2]; i++){\n    for(var j in planets){\n      if(planets[j] ===\
    \ i){\n        d.push(j);\n      }\n    }\n  }\n  return d;\n}", "\tif (planet1\
    \ == \"Mercury\") {\n\t\tif (planet2 == \"Jupiter\") {\n\t\t\treturn [\"Venus\"\
    , \"Earth\", \"Mars\"];\n\t\t} else if (planet2 == \"Saturn\") {\n\t\t\treturn\
    \ [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\"];\n\t\t} else if (planet2 == \"\
    Uranus\") {\n\t\t\treturn [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ];\n\t\t} else if (planet2 == \"Neptune\") {\n\t\t\treturn [\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"];\n\t\t} else {\n\t\t\treturn\
    \ [];\n\t\t}\n\t} else if (planet1 == \"Venus\") {\n\t\tif (planet2 == \"Jupiter\"\
    ) {\n\t\t\treturn [\"Earth\", \"Mars\"];\n\t\t} else if (planet2 == \"Saturn\"\
    ) {\n\t\t\treturn [\"Earth\", \"Mars\", \"Jupiter\"];\n\t\t} else if (planet2\
    \ == \"Uranus\") {\n\t\t\treturn [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ];\n\t\t} else if (planet2 == \"Neptune\") {\n\t\t\treturn [\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"];\n\t\t} else {\n\t\t\treturn [];\n\t\t\
    }\n\t} else if (planet1 == \"Earth\") {\n\t\tif (planet2 == \"Jupiter\") {\n\t\
    \t\treturn [\"Mars\"];\n\t\t} else if (planet2 == \"Saturn\") {\n\t\t\treturn\
    \ [\"Mars\", \"Jupiter\"];\n\t\t} else if (planet2 == \"Uranus\") {\n\t\t\treturn\
    \ [\"Mars\", \"Jupiter\", \"Saturn\"];\n\t\t} else if (planet2 == \"Neptune\"\
    ) {\n\t\t\treturn [\"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"];\n\t\t} else\
    \ {\n\t\t\treturn [];\n\t\t}\n\t} else if (planet1 == \"Mars\") {\n\t\tif (planet2\
    \ == \"", "    // switch (planet1) {\n    //     case \"Earth\":\n    //     var\
    \ arr = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\n    //   \
    \  break;\n    //     case \"Jupiter\":\n    //     var arr = [\"Saturn\", \"\
    Uranus\"];\n    //     break;\n    //     case \"Mercury\":\n    //     var arr\
    \ = [\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"];\n    //     break;\n\
    \    //     default:\n    //     var arr = [];\n    // }\n    // return arr;\n\
    \    var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\", \"Neptune\"];\n    var position1 = 0;\n    var position2\
    \ = 0;\n    for (var i = 0; i < planets.length; i++) {\n        if (planets[i]\
    \ === planet1) {\n            position1 = i;\n        }\n        if (planets[i]\
    \ === planet2) {\n            position2 = i;\n        }\n    }\n    if (position1\
    \ === 0 || position2 === 0) {\n        return [];\n    } else if (position1 <\
    \ position2) {\n        var arr = planets.slice(position1, position2 + 1);\n \
    \       return arr;\n    } else {\n        var arr = planets.slice(position2,\
    \ position1 + 1);\n        return arr;\n    }\n    \n    \n}", "\tvar planetOrder\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"];\n\tvar planet1Index = planetOrder.indexOf(planet1);\n\t\
    var planet2Index = planetOrder.indexOf(planet2);\n\tif (planet1Index > -1 && planet2Index\
    \ > -1){\n\t\tvar between = [];\n\t\tif (planet1Index < planet2Index){\n\t\t\t\
    for (var i = planet1Index + 1; i < planet2Index; i++){\n\t\t\t\tbetween.push(planetOrder[i]);\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfor (var i = planet2Index + 1; i < planet1Index;\
    \ i++){\n\t\t\t\tbetween.push(planetOrder[i]);\n\t\t\t}\n\t\t}\n\t\treturn between;\n\
    \t}\n\telse {\n\t\treturn [];\n\t}\n}\n", "    var planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    var list = [];\n    if(planets.indexOf(planet1)>=0 && planets.indexOf(planet2)>=0){\n\
    \        if(planets.indexOf(planet1)<planets.indexOf(planet2)){\n            for(var\
    \ i=planets.indexOf(planet1)+1; i<planets.indexOf(planet2); i++){\n          \
    \      list.push(planets[i]);\n            }\n        }\n        else{\n     \
    \       for(var i=planets.indexOf(planet2)+1; i<planets.indexOf(planet1); i++){\n\
    \                list.push(planets[i]);\n            }\n        }\n    }\n   \
    \ return list;\n}", "    if (!(planets(planet1) && planets(planet2))) return [];\n\
    \    let p1 = planets(planet1), p2 = planets(planet2);\n    if (p1.c > p2.c) [p1,\
    \ p2] = [p2, p1];\n    return p1.c == p2.c ? [] : p1.c < p2.c ? Object.values(planets).filter(planet\
    \ => p1.c < planet.c && planet.c < p2.c).map(planet => planet.n) : [Object.values(planets).find(planet\
    \ => planet.c > p1.c && planet.c < p2.c).n];\n}\n", "\tvar arr = [];\n\tvar first,\
    \ second;\n\tvar planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\tfor(var i = 0; i < planets.length;\
    \ i++){\n\t\tif(planets[i] === planet1){\n\t\t\tfirst = i;\n\t\t}\n\t\tif(planets[i]\
    \ === planet2){\n\t\t\tsecond = i;\n\t\t}\n\t}\n\tif(first === undefined || second\
    \ === undefined){\n\t\treturn arr;\n\t}\n\tif(first > second){\n\t\treturn arr;\n\
    \t}\n\tfor(var j = first + 1; j < second; j++){\n\t\tarr.push(planets[j]);\n\t\
    }\n\treturn arr;\n}\n", "    const solarSystem = {\n        Mercury: 1,\n    \
    \    Venus: 2,\n        Earth: 3,\n        Mars: 4,\n        Jupiter: 5,\n   \
    \     Saturn: 6,\n        Uranus: 7,\n        Neptune: 8\n    }\n    if(planet1\
    \ in solarSystem && planet2 in solarSystem){\n        let orbit = []\n       \
    \ for(let planet in solarSystem){\n            if(solarSystem[planet] > solarSystem[planet1]\
    \ && solarSystem[planet] < solarSystem[planet2]){\n                orbit.push(planet)\n\
    \            }\n        }\n        return orbit\n    }else{\n        return []\n\
    \    }\n}", "    var planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter',\
    \ 'Saturn', 'Uranus', 'Neptune'];\n    var planetsBetween = [];\n    if (planets.indexOf(planet1)\
    \ != -1 && planets.indexOf(planet2) != -1){\n        for (var i = planets.indexOf(planet1)\
    \ + 1; i < planets.indexOf(planet2); i++){\n            planetsBetween.push(planets[i]);\n\
    \        }\n        return planetsBetween;\n    } else {\n        return [];\n\
    \    }\n}", "    var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var orbitalRange = [];\n\
    \    var planetOneRange = planets.indexOf(planet1);\n    var planetTwoRange =\
    \ planets.indexOf(planet2);\n    if(planetOneRange === -1 || planetTwoRange ===\
    \ -1){\n        return false;\n    }\n    if(planetOneRange < planetTwoRange){\n\
    \        orbitalRange = planets.slice(planetOneRange + 1, planetTwoRange);\n \
    \   }\n    else{\n        orbitalRange = planets.slice(planetTwoRange + 1, planetOneRange);\n\
    \    }\n    return orbitalRange;\n}\n", "    let arr = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let a = arr.indexOf(planet1);\n    let b = arr.indexOf(planet2);\n    if(a\
    \ > b){\n        return arr.slice(b+1, a).reverse();\n    }\n    else{\n     \
    \   return arr.slice(a+1, b);\n    }\n}\n", "    let planets = {\n        Mercury:\
    \ 1,\n        Venus: 2,\n        Earth: 3,\n        Mars: 4,\n        Jupiter:\
    \ 5,\n        Saturn: 6,\n        Uranus: 7,\n        Neptune: 8\n    }\n    let\
    \ planetNr1 = planets[planet1];\n    let planetNr2 = planets[planet2];\n    if\
    \ (planetNr1 && planetNr2) {\n        let sortedPlanetNr = planetNr1 < planetNr2\
    \ ? [planetNr1, planetNr2] : [planetNr2, planetNr1];\n        let planetNames\
    \ = Object.keys(planets);\n        let result = [];\n        for (let i = 0; i\
    \ < planetNames.length; i++) {\n            if (planets[planetNames[i]] > sortedPlanetNr[0]\
    \ && planets[planetNames[i]] < sortedPlanetNr[1]) {\n                result.push(planetNames[i]);\n\
    \            }\n        }\n        return result;\n    } else {\n        return\
    \ \"Invalid planet name\";\n    }\n}\n", "  let res = [];\n  let planetHash =\
    \ {\n    Mercury: 1,\n    Venus: 2,\n    Earth: 3,\n    Mars: 4,\n    Jupiter:\
    \ 5,\n    Saturn: 6,\n    Uranus: 7,\n    Neptune: 8\n  }\n  if(!planetHash[planet1]\
    \ || !planetHash[planet2]){\n    return res;\n  }\n  if(planetHash[planet1] <\
    \ planetHash[planet2]){\n    for(let planet in planetHash){\n      if(planetHash[planet]\
    \ > planetHash[planet1] && planetHash[planet] < planetHash[planet2]){\n      \
    \  res.push(planet);\n      }\n    }\n  }else{\n    for(let planet in planetHash){\n\
    \      if(planetHash[planet] > planetHash[planet2] && planetHash[planet] < planetHash[planet1]){\n\
    \        res.push(planet);\n      }\n    }\n  }\n  return res;\n}\n", "    var\
    \ planets = [\n        {name:\"Mercury\", distance: 1},\n        {name:\"Venus\"\
    , distance: 2},\n        {name:\"Earth\", distance: 3},\n        {name:\"Mars\"\
    , distance: 4},\n        {name:\"Jupiter\", distance: 5},\n        {name:\"Saturn\"\
    , distance: 6},\n        {name:\"Uranus\", distance: 7},\n        {name:\"Neptune\"\
    , distance: 8}\n    ];\n    var plnt1, plnt2;\n    planets.forEach(function(plnt){\n\
    \        if(plnt.name == planet1){\n            plnt1 = plnt;\n        }\n   \
    \     if(plnt.name == planet2){\n            plnt2 = plnt;\n        }\n    });\n\
    \    if(plnt1 == undefined || plnt2 == undefined){\n        return [];\n    }\n\
    \    var result = [];\n    if(plnt1.distance < plnt2.distance){\n        for(var\
    \ i = plnt1.distance; i <= plnt2.distance; i++){\n            result.push(planets[i-1].name);\n\
    \        }\n    }else{\n        for(var i = plnt2.distance; i <= plnt1.distance;\
    \ i++){\n            result.push(planets[i-1].name);\n        }\n    }\n    return\
    \ result;\n}\n", "  let solar = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let p1 = solar.indexOf(planet1);\n\
    \  let p2 = solar.indexOf(planet2);\n  let answer = [];\n  if(p1 > p2){\n    let\
    \ temp = p1;\n    p1 = p2;\n    p2 = temp;\n  }\n  for(let i = p1 + 1; i < p2;\
    \ i++){\n    answer.push(solar[i]);\n  }\n  return answer;\n}\n", "  let planets\
    \ = {\n    Mercury: 0,\n    Venus: 1,\n    Earth: 2,\n    Mars: 3,\n    Jupiter:\
    \ 4,\n    Saturn: 5,\n    Uranus: 6,\n    Neptune: 7\n  }\n  if(planet1 in planets\
    \ && planet2 in planets){\n    let small = (planets[planet1] > planets[planet2])\
    \ ? planets[planet2] : planets[planet1];\n    let big = (planets[planet1] > planets[planet2])\
    \ ? planets[planet1] : planets[planet2];\n    let result = [];\n    for(let i\
    \ = small + 1; i < big; i++){\n      let planet = Object.keys(planets).find(key\
    \ => planets[key] === i);\n      result.push(planet);\n    }\n    return result;\n\
    \  }\n  return [];\n}", "  let array = [\"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  let i1 = array.indexOf(planet1);\n\
    \  let i2 = array.indexOf(planet2);\n  let result = [];\n  if (i1 > -1 && i2 >\
    \ -1) {\n    if (i1 < i2) {\n      for (let i = i1 + 1; i < i2; i++) {\n     \
    \   result.push(array[i]);\n      }\n    } else {\n      for (let i = i2 + 1;\
    \ i < i1; i++) {\n        result.push(array[i]);\n      }\n    }\n  }\n  return\
    \ result;\n}", "\tvar planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tvar idx1 = planets.indexOf(planet1);\n\
    \tvar idx2 = planets.indexOf(planet2);\n\tif (idx1 < 0 || idx2 < 0){\n\t\treturn\
    \ [];\n\t}\n\tvar i = idx1;\n\tvar ret = [];\n\twhile (i!=idx2){\n\t\tret.push(planets[i]);\n\
    \t\ti++;\n\t\tif (i == planets.length){\n\t\t\ti = 0;\n\t\t}\n\t}\n\treturn ret;\n\
    }\n", "    const planets = {\n        \"Mercury\":0,\n        \"Venus\":1,\n \
    \       \"Earth\":2,\n        \"Mars\":3,\n        \"Jupiter\":4,\n        \"\
    Saturn\":5,\n        \"Uranus\":6,\n        \"Neptune\":7\n    }\n    const solarSystem\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"];\n    var orderedPlanets = [];\n    if(planets[planet1]\
    \ > planets[planet2]){\n        for(var i = planets[planet2]; i <= planets[planet1];\
    \ i++){\n            orderedPlanets.push(solarSystem[i]);\n        }\n    }else{\n\
    \        for(var i = planets[planet1]; i <= planets[planet2]; i++){\n        \
    \    orderedPlanets.push(solarSystem[i]);\n        }\n    }\n    return orderedPlanets;\n\
    }", "\tvar planets = {\n\t\t\"Mercury\": 1,\n\t\t\"Venus\": 2,\n\t\t\"Earth\"\
    : 3,\n\t\t\"Mars\": 4,\n\t\t\"Jupiter\": 5,\n\t\t\"Saturn\": 6,\n\t\t\"Uranus\"\
    : 7,\n\t\t\"Neptune\": 8\n\t};\n\tvar array = [];\n\tfor(var i = planets[planet1]\
    \ + 1; i < planets[planet2]; i++){\n\t\tarray.push(Object.keys(planets)[i-1]);\n\
    \t}\n\treturn array;\n}\n", "    var obj = {\n        Mercury: 1,\n        Venus:\
    \ 2,\n        Earth: 3,\n        Mars: 4,\n        Jupiter: 5,\n        Saturn:\
    \ 6,\n        Uranus: 7,\n        Neptune: 8\n    }\n    var planets = [];\n \
    \   if(!obj[planet1] || !obj[planet2]){\n        return [];\n    }\n    var start\
    \ = obj[planet1];\n    var end = obj[planet2];\n    for(var i = start + 1; i <\
    \ end; i++){\n        for(var planet in obj){\n            if(obj[planet] ===\
    \ i){\n                planets.push(planet);\n            }\n        }\n    }\n\
    \    return planets;\n}", "    var solarSystem = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (planet1\
    \ === solarSystem[0] && planet2 === solarSystem[7]) {\n        return solarSystem.slice(1,\
    \ solarSystem.length);\n    } else if (planet1 === solarSystem[0] && planet2 ===\
    \ solarSystem[6]) {\n        return solarSystem.slice(1, solarSystem.length -\
    \ 1);\n    } else if (planet1 === solarSystem[0] && planet2 === solarSystem[5])\
    \ {\n        return solarSystem.slice(1, solarSystem.length - 2);\n    } else\
    \ if (planet1 === solarSystem[0] && planet2 === solarSystem[4]) {\n        return\
    \ solarSystem.slice(1, solarSystem.length - 3);\n    } else if (planet1 === solarSystem[0]\
    \ && planet2 === solarSystem[3]) {\n        return solarSystem.slice(1, solarSystem.length\
    \ - 4);\n    } else if (planet1 === solarSystem[0] && planet2 === solarSystem[2])\
    \ {\n        return solarSystem.slice(1, solarSystem.length - 5);\n    } else\
    \ if (planet1 === solarSystem[0] && planet2 === solarSystem[1]) {\n        return\
    \ solarSystem.slice(1, solarSystem.length - 6);\n    } else if (planet1 === solarSystem[1]\
    \ && planet2 === solarSystem[7]) {\n        return solarSystem.slice(2, solarSystem.length);\n\
    \    } else if (planet1 === solarSystem[1] && planet2 === solarSystem[6]) {\n\
    \        return solarSystem.slice(2, solarSystem.length - 1);\n    } else if (planet1\
    \ === solarSystem[1] && planet2 === solarSystem[5]) {\n        return solarSystem.slice(2,\
    \ solarSystem.length - 2);\n    } else if (planet1 === solarSystem[1] && planet2\
    \ === solarSystem[4]) {\n        return solarSystem.slice(2, solarSystem.length\
    \ - 3);\n    } else if (planet1 === solarSystem[1] && planet2 === solarSystem[3])\
    \ {\n        return solar", "    let planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let planets1\
    \ = planets.slice(planets.indexOf(planet1), planets.indexOf(planet2) + 1);\n \
    \   return planets1;\n}", "    var planets = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var p1 = planets.indexOf(planet1);\n\
    \    var p2 = planets.indexOf(planet2);\n    if(p1 === -1 || p2 === -1){\n   \
    \     return [];\n    }else if(p1 > p2){\n        return planets.slice(p2+1, p1);\n\
    \    }else{\n        return planets.slice(p1+1, p2);\n    }\n}\n", "    const\
    \ planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n    const output = [];\n    let startIndex = planets.indexOf(planet1);\n\
    \    let endIndex = planets.indexOf(planet2);\n    if(startIndex > endIndex){\n\
    \        startIndex = planets.indexOf(planet2);\n        endIndex = planets.indexOf(planet1);\n\
    \    }\n    if(startIndex === -1 || endIndex === -1){\n        return [];\n  \
    \  }\n    for(let i = startIndex + 1; i < endIndex; i++){\n        output.push(planets[i]);\n\
    \    }\n    return output;\n}", "    //your code here\n}\n", "    var system =[\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n    var findPlanet1 = system.indexOf(planet1);\n    var findPlanet2\
    \ = system.indexOf(planet2);\n    var planet =[];\n    if(findPlanet1 == -1 ||\
    \ findPlanet2 == -1){\n        return planet;\n    }\n    else if(findPlanet1\
    \ < findPlanet2){\n        for(var i = findPlanet1+1; i < findPlanet2; i++){\n\
    \            planet.push(system[i]);\n        }\n    }\n    else if(findPlanet1\
    \ > findPlanet2){\n        for(var i = findPlanet2+1; i < findPlanet1; i++){\n\
    \            planet.push(system[i]);\n        }\n    }\n    return planet;\n}\n",
  "    let res = [];\n    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let index1 = planets.indexOf(planet1);\n\
    \    let index2 = planets.indexOf(planet2);\n    if(index1 !== -1 && index2 !==\
    \ -1){\n        if(index1 < index2){\n            for(let i = index1+1; i < index2;\
    \ i++){\n                res.push(planets[i]);\n            }\n        } else\
    \ {\n            for(let i = index2+1; i < index1; i++){\n                res.push(planets[i]);\n\
    \            }\n        }\n    }\n    return res;\n}", "\tlet planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\tlet\
    \ positions = [];\n\tplanets.forEach(function(planet, i){\n\t\tif(planet === planet1){\n\
    \t\t\tpositions.push(i);\n\t\t}\n\t\tif(planet === planet2){\n\t\t\tpositions.push(i);\n\
    \t\t}\n\t});\n\tif(positions.length !== 2){\n\t\treturn [];\n\t}\n\tlet lower\
    \ = Math.min(...positions);\n\tlet higher = Math.max(...positions);\n\tlet desiredPlanets\
    \ = [];\n\tplanets.forEach(function(planet, i){\n\t\tif(i > lower && i < higher){\n\
    \t\t\tdesiredPlanets.push(planet);\n\t\t}\n\t});\n\treturn desiredPlanets;\n}\n",
  "    var list = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus',\
    \ 'Neptune'];\n    if (list.indexOf(planet1) == -1 || list.indexOf(planet2) ==\
    \ -1){\n        return [];\n    }\n    else if (list.indexOf(planet1) > list.indexOf(planet2)){\n\
    \        return list.slice(list.indexOf(planet2), list.indexOf(planet1)+1);\n\
    \    }\n    else {\n        return list.slice(list.indexOf(planet1), list.indexOf(planet2)+1);\n\
    \    }\n}", "    let planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"\
    Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    if (planets.indexOf(planet1)\
    \ == -1 || planets.indexOf(planet2) == -1) {\n        return []\n    }\n    let\
    \ start = planets.indexOf(planet1);\n    let end = planets.indexOf(planet2);\n\
    \    let results = [];\n    if (start > end) {\n        end = [start, start =\
    \ end][0];\n    }\n    for (let i = start + 1; i < end; i++) {\n        results.push(planets[i]);\n\
    \    }\n    return results;\n}", "    const planets = {\n        'Mercury': 1,\n\
    \        'Venus': 2,\n        'Earth': 3,\n        'Mars': 4,\n        'Jupiter':\
    \ 5,\n        'Saturn': 6,\n        'Uranus': 7,\n        'Neptune': 8\n    }\n\
    \    const keys = Object.keys(planets);\n    const values = Object.values(planets);\n\
    \    const planetsOrdered = [];\n    let filteredPlanets = [];\n    let planet1Index\
    \ = '';\n    let planet2Index = '';\n    if (keys.includes(planet1) && keys.includes(planet2)){\n\
    \        planet1Index = values.indexOf(planets[planet1]);\n        planet2Index\
    \ = values.indexOf(planets[planet2]);\n        if (planet1Index < planet2Index){\n\
    \            for (let i = planet1Index + 1; i < planet2Index; i++){\n        \
    \        planetsOrdered.push(keys[i]);\n            }\n        } else {\n    \
    \        for (let i = planet2Index + 1; i < planet1Index; i++){\n            \
    \    planetsOrdered.push(keys[i]);\n            }\n        }\n        filteredPlanets\
    \ = planetsOrdered.filter(el => el != planet1 && el != planet2);\n        return\
    \ filteredPlanets;\n    } else {\n        return filteredPlanets;\n    }\n}\n",
  "\tvar array = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n\tvar index1 = array.indexOf(planet1);\n\tvar index2\
    \ = array.indexOf(planet2);\n\tif (index1 < 0 || index2 < 0) return []\n\treturn\
    \ array.slice(index1+1, index2);\n}", "    var planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  var firstPlanet = planets.indexOf(planet1);\n    var secondPlanet = planets.indexOf(planet2);\n\
    \    var result = [];\n    if(firstPlanet < 0 || secondPlanet < 0){\n        return\
    \ result;\n    }\n    if(firstPlanet < secondPlanet){\n        for(var i = firstPlanet+1;\
    \ i < secondPlanet; i++){\n            result.push(planets[i]);\n        }\n \
    \   }else{\n        for(var i = secondPlanet+1; i < firstPlanet; i++){\n     \
    \       result.push(planets[i]);\n        }\n    }\n    return result;\n}\n",
  "  var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n  var planetIndex = [];\n  var bfPlanets = [];\n\
    \  // console.log(planet1 + \"  \" + planet2);\n  for(var i = 0; i < planets.length;\
    \ i++){\n    if(planets[i] === planet1){\n      planetIndex.push(i);\n    }\n\
    \    if(planets[i] === planet2){\n      planetIndex.push(i);\n    }\n  }\n  if(planetIndex.length\
    \ > 1){\n    if(planetIndex[0] > planetIndex[1]){\n      planetIndex.sort(function(a,\
    \ b){return a-b});\n    }\n    if(planetIndex[0] < planetIndex[1]){\n      planetIndex.sort(function(a,\
    \ b){return b-a});\n    }\n    for(var i = planetIndex[0]; i < planetIndex[1];\
    \ i++){\n      bfPlanets.push(planets[i]);\n    }\n    return bfPlanets;\n  }\n\
    \  else{\n    return [];\n  }\n}\n", "    var solar_system = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    var index1 = solar_system.indexOf(planet1);\n    var index2 = solar_system.indexOf(planet2);\n\
    \    var result = [];\n    if (index1 === -1 || index2 === -1){\n        return\
    \ [];\n    } else if (index1 > index2){\n        for (var i = index2 + 1; i <\
    \ index1; i++){\n            result.push(solar_system[i]);\n        }\n    } else\
    \ {\n        for (var i = index1 + 1; i < index2; i++){\n            result.push(solar_system[i]);\n\
    \        }\n    }\n    return result;\n}", "    const map = {\n        Mercury:\
    \ 1,\n        Venus: 2,\n        Earth: 3,\n        Mars: 4,\n        Jupiter:\
    \ 5,\n        Saturn: 6,\n        Uranus: 7,\n        Neptune: 8\n    }\n    if(map[planet1]\
    \ && map[planet2]){\n        const start = map[planet1]\n        const end = map[planet2]\n\
    \        let planets = []\n        for(let i = start + 1; i < end; i++){\n   \
    \         planets.push(Object.keys(map).find(key => map[key] === i))\n       \
    \ }\n        return planets\n    }\n    return []\n}", "    const result = [];\n\
    \    let start = 0;\n    let end = 0;\n    const planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  for(let i = 0; i < planets.length; i++){\n        if(planets[i] === planet1){\n\
    \            start = i;\n        }\n        if(planets[i] === planet2){\n    \
    \        end = i;\n        }\n    }\n    if(start >= end){\n        return result;\n\
    \    }\n    for(let i = start + 1; i < end; i++){\n        result.push(planets[i]);\n\
    \    }\n    return result;\n}", "    const planets = ['Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    if(planets.indexOf(planet1)\
    \ > planets.indexOf(planet2)){\n        planet1 = [planet2, planet2 = planet1][0];\n\
    \    }\n    if(planets.indexOf(planet1) === -1 || planets.indexOf(planet2) ===\
    \ -1){\n        return [];\n    }\n    let newPlanets = planets.filter(planet\
    \ => {\n        if(planets.indexOf(planet) > planets.indexOf(planet1) && planets.indexOf(planet)\
    \ < planets.indexOf(planet2)){\n            return planet;\n        }\n    });\n\
    \    return newPlanets;\n}\n", "    let sol = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let temp = [];\n    if(sol.includes(planet1)\
    \ && sol.includes(planet2)){\n        if(sol.indexOf(planet1) < sol.indexOf(planet2)){\n\
    \            for(let i = sol.indexOf(planet1) + 1; i < sol.indexOf(planet2); i++){\n\
    \                temp.push(sol[i]);\n            }\n        }else{\n         \
    \   for(let i = sol.indexOf(planet2) + 1; i < sol.indexOf(planet1); i++){\n  \
    \              temp.push(sol[i]);\n            }\n        }\n    }\n    return\
    \ temp;\n}", "    var allPlanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    var result = [];\n \
    \   var planet1Index = 0;\n    var planet2Index = 0;\n    var index = 0;\n   \
    \ for(var i = 0; i < allPlanets.length; i++){\n        if(allPlanets[i] === planet1){\n\
    \            planet1Index = i;\n        }\n        if(allPlanets[i] === planet2){\n\
    \            planet2Index = i;\n        }\n    }\n    if(planet1Index < planet2Index){\n\
    \        index = planet1Index;\n        while(index < planet2Index){\n       \
    \     result.push(allPlanets[index]);\n            index++;\n        }\n    }\n\
    \    else{\n        index = planet2Index;\n        while(index < planet1Index){\n\
    \            result.push(allPlanets[index]);\n            index++;\n        }\n\
    \    }\n    return result;\n}\n", "    \n    const planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    const index1 = planets.indexOf(planet1);\n    const index2 = planets.indexOf(planet2);\n\
    \    const result = [];\n    if (index1 > index2) {\n        for (let i = index2\
    \ + 1; i < index1; i++) {\n            result.push(planets[i]);\n        }\n \
    \   } else {\n        for (let i = index1 + 1; i < index2; i++) {\n          \
    \  result.push(planets[i]);\n        }\n    }\n    return result;\n}\n", "   \
    \ var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"];\n    let index1 = planets.indexOf(planet1);\n\
    \    let index2 = planets.indexOf(planet2);\n    let newArr = [];\n    if(index1\
    \ === -1 || index2 === -1){\n        return [];\n    }\n    if(index1 > index2){\n\
    \        return [];\n    }\n    while(index1 <= index2){\n        newArr.push(planets[index1]);\n\
    \        index1++;\n    }\n    return newArr;\n}\n", "\tvar planets = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n\tvar p1;\n\tvar p2;\n\tif (planets.indexOf(planet1) == -1 || planets.indexOf(planet2)\
    \ == -1){\n\t\treturn [];\n\t}else{\n\t\tp1 = planets.indexOf(planet1);\n\t\t\
    p2 = planets.indexOf(planet2);\n\t\treturn planets.slice(p1, p2);\n\t}\n}\n",
  "    let planets = {\n        Mercury: 1,\n        Venus: 2,\n        Earth: 3,\n\
    \        Mars: 4,\n        Jupiter: 5,\n        Saturn: 6,\n        Uranus: 7,\n\
    \        Neptune: 8\n    }\n    let orbits1 = planets[planet1];\n    let orbits2\
    \ = planets[planet2];\n    let res = [];\n    for(let planet in planets){\n  \
    \      if(planets[planet] > orbits1 && planets[planet] < orbits2){\n         \
    \   res.push(planet);\n        }\n    }\n    return res;\n}\n", "    planets =\
    \ {\n        Mercury: 0,\n        Venus: 1,\n        Earth: 2,\n        Mars:\
    \ 3,\n        Jupiter: 4,\n        Saturn: 5,\n        Uranus: 6,\n        Neptune:\
    \ 7\n    }\n    const r = [];\n    if (planet1 in planets && planet2 in planets)\
    \ {\n        if (planets[planet1] > planets[planet2]) {\n            const temp\
    \ = planet1;\n            planet1 = planet2;\n            planet2 = temp;\n  \
    \      }\n        for (const key in planets) {\n            if (planets[key] >\
    \ planets[planet1] && planets[key] < planets[planet2]) {\n                r.push(key);\n\
    \            }\n        }\n    }\n    return r;\n}\n", "    const planets = [\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"];\n    const isExist = planets.indexOf(planet1) !== -1 && planets.indexOf(planet2)\
    \ !== -1;\n    if(!isExist){\n        return [];\n    }\n    const planetsBetween\
    \ = planets.slice(planets.indexOf(planet1) + 1, planets.indexOf(planet2));\n \
    \   if(planetsBetween.length === 0){\n        return planets[planets.indexOf(planet1)\
    \ + 1];\n    }\n    return planetsBetween;\n}\n", "    let planets = [[\"Mercury\"\
    , 57.9], [\"Venus\", 108.2], [\"Earth\", 149.6], \n    [\"Mars\", 227.9], [\"\
    Jupiter\", 778.3], [\"Saturn\", 1427.0], [\"Uranus\", 2871.0], \n    [\"Neptune\"\
    , 4497.1]];\n    let planetsInOrder = [];\n    for(let i = 0; i < planets.length;\
    \ i++){\n        if(planets[i][0] === planet1){\n            let j = i;\n    \
    \        while(j < planets.length){\n                planetsInOrder.push(planets[j][0]);\n\
    \                j++;\n            }\n            j = 0;\n            while(j\
    \ < i){\n                planetsInOrder.push(planets[j][0]);\n               \
    \ j++;\n            }\n        }\n    }\n    if(planetsInOrder.length > 0){\n\
    \        let newPlanetsInOrder = planetsInOrder.slice(planetsInOrder.indexOf(planet2)\
    \ + 1, planetsInOrder.indexOf(planet1));\n        return newPlanetsInOrder;\n\
    \    }\n    return [];\n}\n", "  let planets = {\n    Mercury: 1,\n    Venus:\
    \ 2,\n    Earth: 3,\n    Mars: 4,\n    Jupiter: 5,\n    Saturn: 6,\n    Uranus:\
    \ 7,\n    Neptune: 8\n  }\n  let pos1 = planets[planet1];\n  let pos2 = planets[planet2];\n\
    \  if (pos1 && pos2){\n    let result = [];\n    for (let i = pos1 + 1; i < pos2;\
    \ i++){\n      for (let item in planets){\n        if (planets[item] === i){\n\
    \          result.push(item);\n        }\n      }\n    }\n    return result;\n\
    \  } else {\n    return [];\n  }\n}", "    let planets = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  let planet1Idx = planets.indexOf(planet1);\n    let planet2Idx = planets.indexOf(planet2);\n\
    \    if(planet1Idx >= 0 && planet2Idx >= 0){\n        let allPlanets = planets.slice(planet1Idx\
    \ + 1, planet2Idx);\n        let closestPlanets = [];\n        for(let i = 0;\
    \ i < allPlanets.length; i++){\n            closestPlanets.push(allPlanets[i]);\n\
    \        }\n        return closestPlanets;\n    }\n    return [];\n}", "    let\
    \ planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n    let arr = [];\n    if(planets.indexOf(planet1)\
    \ === -1 || planets.indexOf(planet2) === -1){\n        return arr;\n    }\n  \
    \  if(planets.indexOf(planet1) < planets.indexOf(planet2)){\n        for(let i\
    \ = planets.indexOf(planet1) + 1; i < planets.indexOf(planet2); i++){\n      \
    \      arr.push(planets[i]);\n        }\n    } else {\n        for(let i = planets.indexOf(planet2)\
    \ + 1; i < planets.indexOf(planet1); i++){\n            arr.push(planets[i]);\n\
    \        }\n    }\n    return arr;\n}", "    let planets = ['Mercury', 'Venus',\
    \ 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let result\
    \ = [];\n    if(planets.indexOf(planet1) !== -1 && planets.indexOf(planet2) !==\
    \ -1){\n        let index1 = planets.indexOf(planet1);\n        let index2 = planets.indexOf(planet2);\n\
    \        if(index1 > index2){\n            for(let i = index2 + 1; i < index1;\
    \ i++){\n                result.push(planets[i]);\n            }\n        }else{\n\
    \            for(let i = index1 + 1; i < index2; i++){\n                result.push(planets[i]);\n\
    \            }\n        }\n    }\n    return result;\n}", "    let planets = ['Mercury',\
    \ 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n    let\
    \ index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let result = planets.slice(index1, index2);\n    return result.length > 0\
    \ ? result : false;\n}", "\tvar planet1Index;\n\tvar planet2Index;\n\tswitch(planet1){\n\
    \t\tcase \"Mercury\":\n\t\t\tplanet1Index = 0;\n\t\t\tbreak;\n\t\tcase \"Venus\"\
    :\n\t\t\tplanet1Index = 1;\n\t\t\tbreak;\n\t\tcase \"Earth\":\n\t\t\tplanet1Index\
    \ = 2;\n\t\t\tbreak;\n\t\tcase \"Mars\":\n\t\t\tplanet1Index = 3;\n\t\t\tbreak;\n\
    \t\tcase \"Jupiter\":\n\t\t\tplanet1Index = 4;\n\t\t\tbreak;\n\t\tcase \"Saturn\"\
    :\n\t\t\tplanet1Index = 5;\n\t\t\tbreak;\n\t\tcase \"Uranus\":\n\t\t\tplanet1Index\
    \ = 6;\n\t\t\tbreak;\n\t\tcase \"Neptune\":\n\t\t\tplanet1Index = 7;\n\t\t\tbreak;\n\
    \t\tdefault:\n\t\t\tconsole.log(\"Invalid planet: \" + planet1);\n\t\t\treturn\
    \ null;\n\t}\n\tswitch(planet2){\n\t\tcase \"Mercury\":\n\t\t\tplanet2Index =\
    \ 0;\n\t\t\tbreak;\n\t\tcase \"Venus\":\n\t\t\tplanet2Index = 1;\n\t\t\tbreak;\n\
    \t\tcase \"Earth\":\n\t\t\tplanet2Index = 2;\n\t\t\tbreak;\n\t\tcase \"Mars\"\
    :\n\t\t\tplanet2Index = 3;\n\t\t\tbreak;\n\t\tcase \"Jupiter\":\n\t\t\tplanet2Index\
    \ = 4;\n\t\t\tbreak;\n\t\tcase \"Saturn\":\n\t\t\tplanet2Index = 5;\n\t\t\tbreak;\n\
    \t\tcase \"Uranus\":\n\t\t\tplanet2Index = 6;\n\t\t\tbreak;\n\t\tcase \"Neptune\"\
    :\n\t\t\tplanet2Index = 7;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.log(\"Invalid\
    \ planet: \" + planet2);\n\t\t\treturn null;\n\t}\n\tvar startIndex = planet1Index\
    \ < planet2Index ? planet1Index : planet2Index;\n\tvar endIndex = planet1Index\
    \ > planet2Index ? planet1", "    var planets = [\n        {name: \"Mercury\"\
    , distance: 57.9},\n        {name: \"Venus\", distance: 108.2},\n        {name:\
    \ \"Earth\", distance: 149.6},\n        {name: \"Mars\", distance: 227.9},\n \
    \       {name: \"Jupiter\", distance: 778.3},\n        {name: \"Saturn\", distance:\
    \ 1427.0},\n        {name: \"Uranus\", distance: 2871.0},\n        {name: \"Neptune\"\
    , distance: 4497.1}\n    ];\n    function findPlanetIndex(planets, planetName){\n\
    \        for(var i = 0; i < planets.length; i++){\n            if(planets[i].name\
    \ === planetName){\n                return i;\n            }\n        }\n    \
    \    return -1;\n    }\n    var planet1Index = findPlanetIndex(planets, planet1);\n\
    \    var planet2Index = findPlanetIndex(planets, planet2);\n    if(planet1Index\
    \ === -1 || planet2Index === -1){\n        return [];\n    } else if(planet1Index\
    \ > planet2Index){\n        var temIndex = planet1Index;\n        planet1Index\
    \ = planet2Index;\n        planet2Index = temIndex;\n    }\n    return planets.slice(planet1Index\
    \ + 1, planet2Index);\n}", "    let solarSystem = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let\
    \ planet1Index = solarSystem.indexOf(planet1);\n    let planet2Index = solarSystem.indexOf(planet2);\n\
    \    let betweenPlanets = [];\n    if(planet1Index >= 0 && planet2Index >= 0){\n\
    \        if(planet1Index < planet2Index){\n            for(let i = planet1Index\
    \ + 1; i < planet2Index; i++){\n                betweenPlanets.push(solarSystem[i]);\n\
    \            }\n        }else{\n            for(let i = planet2Index + 1; i <\
    \ planet1Index; i++){\n                betweenPlanets.push(solarSystem[i]);\n\
    \            }\n        }\n    }\n    return betweenPlanets;\n}\n", "    let planets\
    \ = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\", \"Neptune\"];\n    let index1 = 0;\n    let index2 = 0;\n    let result\
    \ = [];\n    for(let i = 0; i < planets.length; i++){\n        if(planets[i] ===\
    \ planet1){\n            index1 = i;\n        }\n        if(planets[i] === planet2){\n\
    \            index2 = i;\n        }\n    }\n    if(index1 === 0 || index2 ===\
    \ 0){\n        return \"\";\n    }\n    if(index1 < index2){\n        for(let\
    \ i = index1 + 1; i < index2; i++){\n            result.push(planets[i]);\n  \
    \      }\n    }else{\n        for(let i = index2 + 1; i < index1; i++){\n    \
    \        result.push(planets[i]);\n        }\n    }\n    return result;\n}\n",
  "\tconst planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"\
    Saturn\", \"Uranus\", \"Neptune\"];\n\tif(planets.indexOf(planet1) === -1 || planets.indexOf(planet2)\
    \ === -1){\n\t\treturn [];\n\t}\n\tlet start = planets.indexOf(planet1) + 1;\n\
    \tlet end = planets.indexOf(planet2);\n\tlet output = [];\n\tif(start < end){\n\
    \t\tfor(let i = start; i < end; i++){\n\t\t\toutput.push(planets[i]);\n\t\t}\n\
    \t}else{\n\t\tfor(let i = start; i > end; i--){\n\t\t\toutput.push(planets[i]);\n\
    \t\t}\n\t}\n\treturn output;\n}\n", "    var listOfPlanets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    var result = [];\n    var start = listOfPlanets.indexOf(planet1);\n  \
    \  var end = listOfPlanets.indexOf(planet2);\n    if (start > end) {\n       \
    \ var temp = start;\n        start = end;\n        end = temp;\n    }\n    if\
    \ (start > -1 && end > -1) {\n        for (var i = start + 1; i < end; i++) {\n\
    \            result.push(listOfPlanets[i]);\n        }\n    }\n    return result;\n\
    }", "    var solarSystem = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    var index1 = solarSystem.indexOf(planet1);\n\
    \    var index2 = solarSystem.indexOf(planet2);\n    if (index1 === -1 || index2\
    \ === -1){\n        return [];\n    }\n    var planetList = [];\n    if (index1\
    \ <= index2){\n        for (var i = index1 + 1; i < index2; i++){\n          \
    \  planetList.push(solarSystem[i]);\n        }\n    }\n    else{\n        for\
    \ (var i = index2 + 1; i < index1; i++){\n            planetList.push(solarSystem[i]);\n\
    \        }\n    }\n    return planetList;\n}\n", "    var planets = [\n      \
    \  { name: \"Mercury\", order: 1 },\n        { name: \"Venus\", order: 2 },\n\
    \        { name: \"Earth\", order: 3 },\n        { name: \"Mars\", order: 4 },\n\
    \        { name: \"Jupiter\", order: 5 },\n        { name: \"Saturn\", order:\
    \ 6 },\n        { name: \"Uranus\", order: 7 },\n        { name: \"Neptune\",\
    \ order: 8 }\n    ];\n    var ans = [];\n    var planetOneOrder;\n    var planetTwoOrder;\n\
    \    var i = 0;\n    while(i < planets.length){\n        if(planets[i].name ===\
    \ planet1){\n            planetOneOrder = planets[i].order;\n        }\n     \
    \   if(planets[i].name === planet2){\n            planetTwoOrder = planets[i].order;\n\
    \        }\n        i++\n    }\n    if(planetOneOrder < planetTwoOrder){\n   \
    \     planets.forEach(function(x){\n            if(x.order > planetOneOrder &&\
    \ x.order < planetTwoOrder){\n                ans.push(x.name);\n            }\n\
    \        })\n    }\n    else if(planetOneOrder > planetTwoOrder){\n        planets.forEach(function(x){\n\
    \            if(x.order < planetOneOrder && x.order > planetTwoOrder){\n     \
    \           ans.push(x.name);\n            }\n        })\n    }\n    else{\n \
    \       ans = [];\n    }\n    return ans;\n}", "    planets = [\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    var start = planets.indexOf(planet1);\n    var end = planets.indexOf(planet2);\n\
    \    if(start < 0 || end < 0)\n        return [];\n    if(start > end)\n     \
    \   return planets.slice(end, start + 1).reverse();\n    return planets.slice(start,\
    \ end + 1);\n}", "\tvar planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tvar planets_between =\
    \ [];\n\tvar index1 = 0;\n\tvar index2 = 0;\n\tfor(var i = 0; i < planets.length;\
    \ i++){\n\t\tif(planets[i] == planet1){\n\t\t\tindex1 = i;\n\t\t}\n\t\tif(planets[i]\
    \ == planet2){\n\t\t\tindex2 = i;\n\t\t}\n\t}\n\t\n\tif(index1 == 0 || index2\
    \ == 0){\n\t\treturn [];\n\t}\n\telse if(index1 < index2){\n\t\tfor(var i = index1+1;\
    \ i < index2; i++){\n\t\t\tplanets_between.push(planets[i]);\n\t\t}\n\t}\n\telse{\n\
    \t\tfor(var i = index2+1; i < index1; i++){\n\t\t\tplanets_between.push(planets[i]);\n\
    \t\t}\n\t}\n\treturn planets_between;\n}\n", "    let planets = [\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    let index1 = planets.indexOf(planet1);\n    let index2 = planets.indexOf(planet2);\n\
    \    let output = [];\n    if(index1 == -1 || index2 == -1){\n        return output;\n\
    \    }\n    if(index1 < index2){\n        output = planets.slice(index1 + 1, index2);\n\
    \    }else{\n        output = planets.slice(index2 + 1, index1);\n    }\n    return\
    \ output;\n}\n", "    var solar_system = {\n        \"Mercury\": 1,\n        \"\
    Venus\": 2,\n        \"Earth\": 3,\n        \"Mars\": 4,\n        \"Jupiter\"\
    : 5,\n        \"Saturn\": 6,\n        \"Uranus\": 7,\n        \"Neptune\": 8\n\
    \    }\n    var result = [];\n    var min = Math.min(solar_system[planet1], solar_system[planet2]);\n\
    \    var max = Math.max(solar_system[planet1], solar_system[planet2]);\n    for\
    \ (var name in solar_system){\n        if (solar_system[name] > min && solar_system[name]\
    \ < max){\n            result.push(name);\n        }\n    }\n    return result;\n\
    }", "\tvar planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n\tvar planet1Index = planets.indexOf(planet1);\n\
    \tvar planet2Index = planets.indexOf(planet2);\n\tvar betweenPlanets = [];\n\t\
    if (planet1Index === -1 || planet2Index === -1) {\n\t\treturn [];\n\t}\n\telse\
    \ if (planet1Index < planet2Index) {\n\t\tfor (var i = planet1Index + 1; i < planet2Index;\
    \ i++) {\n\t\t\tbetweenPlanets.push(planets[i]);\n\t\t}\n\t}\n\telse {\n\t\tfor\
    \ (var i = planet2Index + 1; i < planet1Index; i++) {\n\t\t\tbetweenPlanets.push(planets[i]);\n\
    \t\t}\n\t}\n\treturn betweenPlanets;\n}\n", "    let arr = [\n        \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \n    ];\n    let p1 = arr.indexOf(planet1);\n    let p2 = arr.indexOf(planet2);\n\
    \    let result = [];\n    if(p1 == -1 || p2 == -1){\n        return result;\n\
    \    }\n    if(p1 > p2){\n        result = arr.slice(p2, p1+1);\n    }else{\n\
    \        result = arr.slice(p1, p2+1);\n    }\n    return result;\n}", "    let\
    \ allPlanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n    let planets = [];\n    if (allPlanets.includes(planet1)\
    \ && allPlanets.includes(planet2)){\n        let index1 = allPlanets.indexOf(planet1);\n\
    \        let index2 = allPlanets.indexOf(planet2);\n        if (index1 <= index2){\n\
    \            for (let i = index1 + 1; i < index2; i++){\n                planets.push(allPlanets[i]);\n\
    \            }\n        } else {\n            for (let i = index2 + 1; i < index1;\
    \ i++){\n                planets.push(allPlanets[i]);\n            }\n       \
    \ }\n    }\n    return planets;\n}", "\tlet between = [];\n\tlet allPlanets =\
    \ ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\
    \tlet planet1Index = allPlanets.indexOf(planet1);\n\tlet planet2Index = allPlanets.indexOf(planet2);\n\
    \tif(planet1Index === -1 || planet2Index === -1){\n\t\treturn [];\n\t}\n\tif(planet1Index\
    \ > planet2Index){\n\t\tlet temp = planet1Index;\n\t\tplanet1Index = planet2Index;\n\
    \t\tplanet2Index = temp;\n\t}\n\tfor(i = planet1Index + 1; i < planet2Index; i++){\n\
    \t\tbetween.push(allPlanets[i]);\n\t}\n\treturn between;\n}\n", "    if (planet1\
    \ === \"Mercury\"){\n        return []\n    }\n    else if (planet1 === \"Venus\"\
    ){\n        if (planet2 === \"Earth\"){\n            return []\n        }\n  \
    \      else if (planet2 === \"Mars\"){\n            return [\"Earth\"]\n     \
    \   }\n        else if (planet2 === \"Jupiter\"){\n            return [\"Earth\"\
    , \"Mars\"]\n        }\n        else if (planet2 === \"Saturn\"){\n          \
    \  return [\"Earth\", \"Mars\", \"Jupiter\"]\n        }\n        else if (planet2\
    \ === \"Uranus\"){\n            return [\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    ]\n        }\n        else if (planet2 === \"Neptune\"){\n            return [\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"]\n        }\n        else{\n\
    \            return []\n        }\n    }\n    else if (planet1 === \"Earth\"){\n\
    \        if (planet2 === \"Mars\"){\n            return []\n        }\n      \
    \  else if (planet2 === \"Jupiter\"){\n            return [\"Mars\"]\n       \
    \ }\n        else if (planet2 === \"Saturn\"){\n            return [\"Mars\",\
    \ \"Jupiter\"]\n        }\n        else if (planet2 === \"Uranus\"){\n       \
    \     return [\"Mars\", \"Jupiter\", \"Saturn\"]\n        }\n        else if (planet2\
    \ === \"Neptune\"){\n            return [\"Mars\", \"Jupiter\", \"Saturn\", \"\
    Uranus\"]\n        }\n        else{\n            return []\n        }\n    }\n\
    \    else if (planet1 === \"Mars\"){\n        if (planet2 === \"Jupiter\"){\n\
    \            return []\n        }\n        else if (planet2 === \"Saturn\"){\n\
    \            return [\"Jupiter\"]\n        }\n        else if (planet2 === \"\
    Uranus\"){\n            return [\"Jupiter\", \"Saturn\"]\n        }\n        else\
    \ if (planet2 === \"Neptune\"){\n            return [\"Jupiter\", \"Saturn\",\
    \ \"Uranus\"]\n        }\n        else{\n            return []\n        }\n  \
    \  }\n    else if (planet1 === \"Jupiter\")", "    var orbit = new Array(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    var arr_orbit = [];\n    var arr_orbit_sort = [];\n    var i = 0;\n  \
    \  for(i = 0; i < orbit.length; i++){\n        if(orbit[i] == planet1){\n    \
    \        for(var j = i; j < orbit.length; j++){\n                if(orbit[j] ==\
    \ planet2){\n                    for(var k = i; k <= j; k++){\n              \
    \          arr_orbit.push(orbit[k]);\n                    }\n                \
    \    return arr_orbit;\n                }\n            }\n        }\n    }\n \
    \   if(i == orbit.length){\n        return arr_orbit_sort;\n    }\n}", "\n}",
  "    const planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\",\
    \ \"Saturn\", \"Uranus\", \"Neptune\"];\n    var orbit1 = planets.indexOf(planet1);\n\
    \    var orbit2 = planets.indexOf(planet2);\n    var array = [];\n    if(orbit1\
    \ === -1 || orbit2 === -1){\n        return array;\n    }\n    if(orbit1>orbit2){\n\
    \        var temp = orbit1;\n        orbit1 = orbit2;\n        orbit2 = temp;\n\
    \    }\n    for(var i = orbit1 + 1; i < orbit2; i++){\n        array.push(planets[i]);\n\
    \    }\n    return array;\n}", "    let planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    let\
    \ planet1Index = planets.indexOf(planet1);\n    let planet2Index = planets.indexOf(planet2);\n\
    \    let result = [];\n    if(planet1Index === -1 || planet2Index === -1){\n \
    \       return \"Neither \" + planet1 + \" nor \" + planet2 + \" are in the solar\
    \ system\";\n    }\n    if(planet1Index < planet2Index){\n        for(let i =\
    \ planet1Index + 1; i < planet2Index; i++){\n            result.push(planets[i]);\n\
    \        }\n    }\n    else{\n        for(let i = planet2Index + 1; i < planet1Index;\
    \ i++){\n            result.push(planets[i]);\n        }\n    }\n    return result;\n\
    }", "    var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"];\n    var orbit = {};\n    for(var i =\
    \ 0; i < planets.length; i++){\n        if(planets[i] == planet1){\n         \
    \   orbit.first = i;\n        }\n        if(planets[i] == planet2){\n        \
    \    orbit.second = i;\n        }\n    }\n    if(!orbit.first || !orbit.second){\n\
    \        return [];\n    }\n    var result = [];\n    for(var i = orbit.first\
    \ + 1; i < orbit.second; i++){\n        result.push(planets[i]);\n    }\n    return\
    \ result;\n}\n", "    const solarSystem = [\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n    const start\
    \ = solarSystem.indexOf(planet1);\n    const end = solarSystem.indexOf(planet2);\n\
    \    let planets = [];\n    if (start < 0 || end < 0){\n        return planets;\n\
    \    }\n    if (start > end){\n        for (let i = end; i <= start; i++){\n \
    \           planets.push(solarSystem[i]);\n        }\n    }\n    else{\n     \
    \   for (let i = start; i <= end; i++){\n            planets.push(solarSystem[i]);\n\
    \        }\n    }\n    return planets;\n}", "    const result = [];\n    let arrPlanets\
    \ = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\
    \    let startPlanet, endPlanet;\n    arrPlanets.forEach((val, index) => {\n \
    \       if(val === planet1){\n            startPlanet = index;\n        } else\
    \ if(val === planet2){\n            endPlanet = index;\n        }\n    });\n \
    \   if(startPlanet < endPlanet){\n        arrPlanets.forEach((val, index) => {\n\
    \            if(index >= startPlanet && index <= endPlanet){\n               \
    \ result.push(val);\n            }\n        });\n    } else if(startPlanet > endPlanet){\n\
    \        arrPlanets.forEach((val, index) => {\n            if(index <= startPlanet\
    \ && index >= endPlanet){\n                result.push(val);\n            }\n\
    \        });\n    }\n    return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
