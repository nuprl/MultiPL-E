language: js
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var maxlevel = 0;\n    var result = [];\n    for (var i = 0; i < paren_string.length;\
    \ i++){\n        if (paren_string[i] == \"(\"){\n            level += 1;\n   \
    \         if (level > maxlevel){\n                maxlevel = level;\n        \
    \    }\n        }\n        else if (paren_string[i] == \")\"){\n            level\
    \ -= 1;\n        }\n        else if (paren_string[i] == \" \"){\n            result.push(maxlevel);\n\
    \            maxlevel = 0;\n            level = 0;\n        }\n    }\n    result.push(maxlevel);\n\
    \    return result;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let maxCount\
    \ = 0;\n    let nested_parens = [];\n    paren_string.split(' ').forEach(paren\
    \ => {\n        let count = 0;\n        paren.split('').forEach(char => {\n  \
    \          if(char === '('){\n                count++;\n            } else if(char\
    \ === ')'){\n                count--;\n            }\n        });\n        if(count\
    \ > maxCount){\n            maxCount = count;\n        }\n        nested_parens.push(count);\n\
    \    });\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmp7f8co9ko.js:31:10)\n    at Object.<anonymous> (/tmp/tmp7f8co9ko.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var new_string\
    \ = paren_string.replace(/ /g, '');\n    var stack = [];\n    var count = 0;\n\
    \    var max = 0;\n    var group = [];\n    var last_char = \"\";\n    var last_paren\
    \ = \"\";\n    for (var i = 0; i < new_string.length; i++){\n        var char\
    \ = new_string[i];\n        if (char === \"(\"){\n            stack.push(char);\n\
    \            count++;\n            if (count > max){\n                max = count;\n\
    \            }\n        }\n        else if (char === \")\"){\n            stack.pop();\n\
    \            count--;\n        }\n        if (last_char === \")\" && char ===\
    \ \"(\"){\n            group.push(max);\n            max = 0;\n        }\n   \
    \     last_char = char;\n    }\n    group.push(max);\n    return group;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 1, 3, 1, 3, 2, 0 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpea7w4ue5.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpea7w4ue5.js:47:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 3, 1,\n    3, 2, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result\
    \ = [];\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ === '('){\n            for(var j = i + 1; j < paren_string.length; j++){\n \
    \               if(paren_string[j] === '('){\n                    result.push(1)\n\
    \                }\n                if(paren_string[j] === ')'){\n           \
    \         result.push(0)\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1,\n  0,\n  1,\n  0,\n  0,\n  1,\n  1,\n\
    \  1,\n  0,\n  0,\n  0,\n  1,\n  0,\n  1,\n  1,\n  1,\n  0,\n  0,\n  1,\n  0,\n\
    \  1,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  1,\n  1,\n  1,\n  0,\n  0,\n  0,\n\
    \  1,\n  0,\n  1,\n  1,\n  1,\n  0,\n  0,\n  1,\n  0,\n  1,\n  0,\n  0,\n  0,\n\
    \  0,\n  1,\n  1,\n  1,\n  0,\n  0,\n  0,\n  1,\n  0,\n  1,\n  1,\n  1,\n  0,\n\
    \  0,\n  1,\n  0,\n  1,\n  0,\n  0,\n  1,\n  1,\n  0,\n  0,\n  0,\n  1,\n  0,\n\
    \  1,\n  1,\n  1,\n  0,\n  0,\n  1,\n  0,\n  1,\n  0,\n  0,\n  1,\n  0,\n  0,\n\
    \  0,\n  1,\n  0,\n  1,\n  1,\n  1,\n  0,\n  0,\n  1,\n  0,\n  1,\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  1,...\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpq16hbs31.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq16hbs31.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1,\n\
    \    0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0,\n    1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0,\
    \ 1,\n    1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,\n    1, 1, 0, 0, 0, 1, 0, 1, 1,\
    \ 1, 0, 0,\n    1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0,\n    1, 1, 1, 0, 0, 1, 0,\
    \ 1, 0, 0, 1, 0,\n    0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1,\n    0, 0, 0, 0,\n \
    \   ... 54 more items\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    // your code\
    \ here\n    paren_string = paren_string.split(\" \");\n    var index = 0;\n  \
    \  var indexOne = 0;\n    var indexTwo = 0;\n    var result = [];\n    var count\
    \ = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        index = paren_string[i].indexOf(\"\
    (\");\n        indexOne = paren_string[i].indexOf(\")\");\n        indexTwo =\
    \ paren_string[i].lastIndexOf(\")\");\n        count = 0;\n        while(indexOne\
    \ < indexTwo){\n            count++;\n            indexOne = paren_string[i].indexOf(\"\
    )\", indexOne + 1);\n        }\n        result.push(count);\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 2, 0, 4 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmp7t701wyj.js:32:10)\n    at Object.<anonymous> (/tmp/tmp7t701wyj.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 0, 4 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_counter = 0;\n        var max_paren_counter = 0;\n\
    \        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_counter += 1;\n                if(paren_counter\
    \ > max_paren_counter){\n                    max_paren_counter = paren_counter;\n\
    \                }\n            }\n            else if(paren_array[i][j] == \"\
    )\"){\n                paren_counter -= 1;\n            }\n        }\n       \
    \ result.push(max_paren_counter);\n    }\n    return result;\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var group\
    \ = paren_string.split(\" \");\n    for(var i = 0; i < group.length; i++){\n \
    \       var max_nest = 0;\n        var nest = 0;\n        for(var j = 0; j < group[i].length;\
    \ j++){\n            if(group[i][j] == '('){\n                nest++;\n      \
    \          if(nest > max_nest){\n                    max_nest = nest;\n      \
    \          }\n            }\n            else if(group[i][j] == ')'){\n      \
    \          nest--;\n            }\n        }\n        group[i] = max_nest;\n \
    \   }\n    return group;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_arr\
    \ = paren_string.split(' ');\n  var result = [];\n  for(var i = 0; i < paren_arr.length;\
    \ i++){\n    result.push(find_nested_parens(paren_arr[i]));\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6_y3onub.js:10\n    result.push(find_nested_parens(paren_arr[i]));\n\
    \           ^\n\nReferenceError: find_nested_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmp6_y3onub.js:10:12)\n    at test (/tmp/tmp6_y3onub.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp6_y3onub.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let answer\
    \ = [];\n    let levels = [];\n    for(let i = 0; i < paren_string.length; i++){\n\
    \        let curr_char = paren_string[i];\n        //if curr_char == '(', then\
    \ we push to the levels stack\n        if(curr_char == '('){\n            levels.push(1);\n\
    \        }\n        // if curr_char == ')', then we subtract from the last index\
    \ in levels\n        else if(curr_char == ')'){\n            if(levels.length\
    \ == 0){\n                levels.push(0);\n            }\n            else{\n\
    \                levels[levels.length - 1] -= 1;\n            }\n        }\n \
    \       // if curr_char == ' ', then we add an element to levels\n        else\
    \ if(curr_char == ' '){\n            answer.push(levels[levels.length - 1]);\n\
    \            levels.push(0);\n        }\n    }\n    return answer;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, -2, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpvdznwy4i.js:38:10)\n    at Object.<anonymous> (/tmp/tmpvdznwy4i.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ -1, -2, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_arr\
    \ = paren_string.split(\" \")\n    var paren_result = []\n    for (var i = 0;\
    \ i < paren_arr.length; i++){\n        paren_result.push(parse_parens(paren_arr[i]))\n\
    \    }\n    return paren_result\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpnlubyir9.js:10\n        paren_result.push(parse_parens(paren_arr[i]))\n\
    \                     ^\n\nReferenceError: parse_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmpnlubyir9.js:10:22)\n    at test (/tmp/tmpnlubyir9.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpnlubyir9.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar result\
    \ = [];\n\tvar temp = [];\n\tparen_string.split(' ').forEach(function(element,\
    \ index, array){\n\t\ttemp = parse_string(element);\n\t\tresult.push(temp);\n\t\
    });\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_3pwiw3c.js:10\n\t\ttemp = parse_string(element);\n\t\t^\n\nReferenceError:\
    \ parse_string is not defined\n    at /tmp/tmp_3pwiw3c.js:10:3\n    at Array.forEach\
    \ (<anonymous>)\n    at parse_nested_parens (/tmp/tmp_3pwiw3c.js:9:26)\n    at\
    \ test (/tmp/tmp_3pwiw3c.js:21:20)\n    at Object.<anonymous> (/tmp/tmp_3pwiw3c.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  const count\
    \ = [];\n  const openingParens = [\"(\", \"[\", \"{\"];\n  const closingParens\
    \ = [\")\", \"]\", \"}\"];\n  let stack = [];\n  let str = '';\n  for (let i =\
    \ 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \" \") {\n \
    \     count.push(stack.length);\n      stack = [];\n      str = '';\n    } else\
    \ {\n      str += paren_string[i];\n      if (openingParens.includes(paren_string[i]))\
    \ {\n        stack.push(paren_string[i]);\n      } else if (closingParens.includes(paren_string[i]))\
    \ {\n        if (closingParens.indexOf(paren_string[i]) === openingParens.indexOf(stack[stack.length\
    \ - 1])) {\n          stack.pop();\n        } else {\n          throw `Parens\
    \ don't match in ${str}`;\n        }\n      }\n    }\n  }\n  count.push(stack.length);\n\
    \  return count;\n}\n\nmodule.exports = {\n  parse_nested_parens,\n};\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpg3h6ljup.js:42:10)\n    at Object.<anonymous> (/tmp/tmpg3h6ljup.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var finalArray\
    \ = paren_string.split(\" \");\n  var level = 0;\n  var parenLevels = new Array();\n\
    \  for(var i = 0; i < finalArray.length; i++){\n    level = 0;\n    for(var j\
    \ = 0; j < finalArray[i].length; j++){\n      if(finalArray[i][j] == \"(\"){\n\
    \        level++;\n      }\n      else if(finalArray[i][j] == \")\"){\n      \
    \  level--;\n      }\n    }\n    parenLevels.push(level);\n  }\n  return parenLevels;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpyz7e341q.js:29:10)\n    at Object.<anonymous> (/tmp/tmpyz7e341q.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  //create array\
    \ to return\n  var paren_array = paren_string.split(\" \");\n  //array to store\
    \ answers\n  var answers = [];\n  //loop through each paren\n  for(var i = 0;\
    \ i < paren_array.length; i++){\n    //starting count\n    var counter = 0;\n\
    \    //maximum count\n    var max_count = 0;\n    //loop through each paren\n\
    \    for(var j = 0; j < paren_array[i].length; j++){\n      //if it's an open\
    \ paren\n      if(paren_array[i][j] === \"(\"){\n        //add to counter\n  \
    \      counter++;\n        //if counter is greater than max count, replace it\n\
    \        if(counter > max_count){\n          max_count = counter;\n        }\n\
    \      }\n      //if it's a close paren\n      else if(paren_array[i][j] === \"\
    )\"){\n        //subtract from counter\n        counter--;\n      }\n    }\n \
    \   //push current max count to answers array\n    answers.push(max_count);\n\
    \  }\n  //return answers array\n  return answers;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var output\
    \ = [];\n    var start = 0;\n    var end = 0;\n    while(paren_string.length >\
    \ 0){\n        end = paren_string.indexOf(\" \");\n        if(end == -1){\n  \
    \          end = paren_string.length;\n        }\n        var substring = paren_string.substring(start,\
    \ end);\n        paren_string = paren_string.substring(end + 1);\n        output.push(nested_parens(substring));\n\
    \    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmplww3cgkr.js:17\n        output.push(nested_parens(substring));\n\
    \               ^\n\nReferenceError: nested_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmplww3cgkr.js:17:16)\n    at test (/tmp/tmplww3cgkr.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplww3cgkr.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var arr =\
    \ paren_string.split(\" \");\n    var ret = [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        var leftCount = 0;\n        var rightCount = 0;\n        var\
    \ left = true;\n        var max = 0;\n        for(var j = 0; j < arr[i].length;\
    \ j++){\n            if(arr[i][j] == \"(\"){\n                if(left) leftCount++;\n\
    \                else rightCount++;\n            }\n            else if(arr[i][j]\
    \ == \")\"){\n                if(left) leftCount--;\n                else rightCount--;\n\
    \            }\n            if(leftCount < 0){\n                left = false;\n\
    \                leftCount = 0;\n            }\n            if(rightCount < 0){\n\
    \                left = true;\n                rightCount = 0;\n            }\n\
    \            max = Math.max(max, Math.max(leftCount, rightCount));\n        }\n\
    \        ret.push(max);\n    }\n    return ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let stack\
    \ = [];\n    let ans = [];\n    let max = 0;\n    let current = 0;\n    for(let\
    \ i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n\
    \            stack.push(paren_string[i]);\n            current += 1;\n       \
    \     max = Math.max(max, current);\n        }\n        else if(paren_string[i]\
    \ == ')'){\n            stack.pop();\n            current -= 1;\n        }\n \
    \       else{\n            ans.push(max);\n            max = 0;\n            current\
    \ = 0;\n        }\n    }\n    return ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 1 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmpugh3u3l7.js:35:10)\n    at Object.<anonymous> (/tmp/tmpugh3u3l7.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result\
    \ = [];\n    var new_string = '';\n    paren_string = paren_string.replace(/\\\
    (\\(/g, '(');\n    for (var i = 0; i < paren_string.length; i++){\n        if\
    \ (paren_string[i] == '(' || paren_string[i] == ')') {\n            new_string\
    \ += paren_string[i];\n        }\n    }\n    var str_array = new_string.split('\
    \ ');\n    console.log(str_array);\n    str_array.forEach(function(elem){\n  \
    \      result.push(parse_parens(elem));\n    });\n    return result;\n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmc6citfn.js:18\n        result.push(parse_parens(elem));\n    \
    \           ^\n\nReferenceError: parse_parens is not defined\n    at /tmp/tmpmc6citfn.js:18:16\n\
    \    at Array.forEach (<anonymous>)\n    at parse_nested_parens (/tmp/tmpmc6citfn.js:17:15)\n\
    \    at test (/tmp/tmpmc6citfn.js:29:20)\n    at Object.<anonymous> (/tmp/tmpmc6citfn.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  stdout: '[ ''()())(()))()(())()())'' ]

    '
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    return paren_string.split('\
    \ ').map(i => {\n        var parens = 0;\n        var max_parens = 0;\n      \
    \  for (var j=0; j<i.length; j++){\n            if (i[j] == '('){\n          \
    \      parens++;\n                if (parens > max_parens){\n                \
    \    max_parens = parens;\n                }\n            }\n            else\
    \ if (i[j] == ')'){\n                parens--;\n            }\n        }\n   \
    \     return max_parens;\n    });\n}\n\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(\" \");\n    var num_parens = [];\n    for (var i = 0;\
    \ i < parens.length; i++){\n        num_parens.push(num_nested_parens(parens[i]));\n\
    \    }\n    return num_parens;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp_0_e14hs.js:10\n        num_parens.push(num_nested_parens(parens[i]));\n\
    \                   ^\n\nReferenceError: num_nested_parens is not defined\n  \
    \  at parse_nested_parens (/tmp/tmp_0_e14hs.js:10:20)\n    at test (/tmp/tmp_0_e14hs.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp_0_e14hs.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < parens.length;\
    \ i++){\n        result.push(find_nested_level(parens[i]));\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9o46d7vt.js:10\n        result.push(find_nested_level(parens[i]));\n\
    \               ^\n\nReferenceError: find_nested_level is not defined\n    at\
    \ parse_nested_parens (/tmp/tmp9o46d7vt.js:10:16)\n    at test (/tmp/tmp9o46d7vt.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp9o46d7vt.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let res =\
    \ [];\n    let parens = paren_string.split(' ');\n    for(let paren of parens){\n\
    \        let stack = [];\n        let max = 0;\n        for(let i = 0; i < paren.length;\
    \ i++){\n            if(paren[i] === '('){\n                stack.push(paren[i]);\n\
    \                max = Math.max(max, stack.length);\n            }\n         \
    \   else{\n                stack.pop();\n            }\n        }\n        res.push(max);\n\
    \    }\n    return res;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(' ');\n    var output = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        output.push(count_paren_depth(paren_array[i]));\n    }\n    return\
    \ output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp2tdic0wb.js:10\n        output.push(count_paren_depth(paren_array[i]));\n\
    \               ^\n\nReferenceError: count_paren_depth is not defined\n    at\
    \ parse_nested_parens (/tmp/tmp2tdic0wb.js:10:16)\n    at test (/tmp/tmp2tdic0wb.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp2tdic0wb.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    return paren_string.split('\
    \ ').map(function(a){\n        return a.split('').reduce(function(max, x){\n \
    \           if(x == '('){\n                max++;\n            }\n           \
    \ else if(x == ')'){\n                max--;\n            }\n            return\
    \ max;\n        }, 0);\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpvyfupumg.js:25:10)\n    at Object.<anonymous> (/tmp/tmpvyfupumg.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  const grp_arr\
    \ = paren_string.split(' ');\n  // console.log(grp_arr);\n  const level_arr =\
    \ grp_arr.map(grp=>{\n    let max_level = 0;\n    let level = 0;\n    for(let\
    \ i=0; i<grp.length; i++){\n      if(grp[i]==='('){\n        level += 1;\n   \
    \     if(level>max_level){\n          max_level = level;\n        }\n      }\n\
    \      else if(grp[i]===')'){\n        level -= 1;\n      }\n    }\n    return\
    \ max_level;\n  });\n  return level_arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tlet paren_groups\
    \ = paren_string.split(\" \");\n\tlet levels = [];\n\tfor(let i = 0; i < paren_groups.length;\
    \ i++){\n\t\tlevels.push(deepest_parens(paren_groups[i]));\n\t}\n\treturn levels;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvhtwuatg.js:10\n\t\tlevels.push(deepest_parens(paren_groups[i]));\n\
    \t\t       ^\n\nReferenceError: deepest_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpvhtwuatg.js:10:10)\n    at test (/tmp/tmpvhtwuatg.js:19:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpvhtwuatg.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    // your code\
    \ here\n    var result = [];\n    var groups = paren_string.split(\" \");\n  \
    \  var max = 0;\n    var count = 0;\n    for (var i = 0; i < groups.length; i++)\
    \ {\n        for (var j = 0; j < groups[i].length; j++) {\n            if (groups[i][j]\
    \ == \"(\") {\n                count ++;\n            } else if (groups[i][j]\
    \ == \")\") {\n                count --;\n            }\n            if (count\
    \ > max) {\n                max = count;\n            }\n        }\n        result.push(max);\n\
    \        max = 0;\n        count = 0;\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var count =\
    \ 0;\n  var arr = [];\n  var result = [];\n  var sub_str = '';\n  var index =\
    \ 0;\n  var start_index = 0;\n  var end_index = 0;\n  var new_arr = [];\n  for(var\
    \ i = 0; i < paren_string.length; i++){\n    if(paren_string[i] === '('){\n  \
    \    count++;\n    }\n    if(paren_string[i] === ')'){\n      count--;\n    }\n\
    \    arr.push(count);\n  }\n  for(var j = 0; j < arr.length; j++){\n    if(arr[j]\
    \ === 0){\n      end_index = j;\n      sub_str = paren_string.slice(start_index,\
    \ end_index + 1);\n      new_arr.push(sub_str);\n      start_index = end_index\
    \ + 2;\n    }\n  }\n  for(var k = 0; k < new_arr.length; k++){\n    var max =\
    \ Math.max.apply(null, new_arr[k].split(''));\n    result.push(max);\n  }\n  return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  -Infinity,\n\
    \  NaN,\n  -Infinity,\n  NaN,\n  -Infinity,\n  NaN\n]\n\nshould loosely deep-equal\n\
    \n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp00vfw_p5.js:43:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp00vfw_p5.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, -Infinity,\
    \ NaN, -Infinity, NaN, -Infinity, NaN ],\n  expected: [ 2, 3, 1, 3 ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var regex\
    \ = /\\((.*?)\\)/g;\n    var parens = paren_string.match(regex);\n    var result\
    \ = [];\n    for(var i = 0; i < parens.length; i++){\n        var maxCount = 0;\n\
    \        var currCount = 0;\n        for(var j = 0; j < parens[i].length; j++){\n\
    \            if(parens[i][j] == '('){\n                currCount++;\n        \
    \    }\n            else if(parens[i][j] == ')'){\n                currCount--;\n\
    \            }\n            if(currCount > maxCount){\n                maxCount\
    \ = currCount;\n            }\n        }\n        result.push(maxCount);\n   \
    \ }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  3,\n  1,\n  3,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n\
    \  1,\n  3\n]\n    at test (/tmp/tmppmchfg0d.js:34:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppmchfg0d.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 3, 1,\n    3, 1, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var paren in paren_array){\n\
    \        var temp = paren_array[paren];\n        result.push(parse_single_paren(temp));\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvwoeos5z.js:11\n        result.push(parse_single_paren(temp));\n\
    \               ^\n\nReferenceError: parse_single_paren is not defined\n    at\
    \ parse_nested_parens (/tmp/tmpvwoeos5z.js:11:16)\n    at test (/tmp/tmpvwoeos5z.js:21:20)\n\
    \    at Object.<anonymous> (/tmp/tmpvwoeos5z.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_arr\
    \ = paren_string.split(\" \");\n    var paren_cnt_arr = [];\n    for(var i=0;\
    \ i<paren_arr.length; i++){\n        paren_cnt_arr.push(paren_arr[i].length-2);\n\
    \    }\n    return paren_cnt_arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  0,\n  8\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp20lyj3f2.js:19:10)\n    at Object.<anonymous> (/tmp/tmp20lyj3f2.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 0,\
    \ 8 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result\
    \ = [];\n    var parens = paren_string.split(\" \");\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var cur_max = 0;\n        var cur_paren = parens[i];\n      \
    \  for(var j = 0; j < cur_paren.length; j++){\n            if(cur_paren[j] ==\
    \ '('){\n                cur_max += 1;\n            }\n            else{\n   \
    \             cur_max -= 1;\n            }\n        }\n        result.push(cur_max);\n\
    \    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmprudtj23l.js:30:10)\n    at Object.<anonymous> (/tmp/tmprudtj23l.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tlet res = paren_string.split(\"\
    \ \");\n\tres = res.map(elem => {\n\t\tlet cnt = 0;\n\t\tlet max = 0;\n\t\tfor(let\
    \ i = 0; i < elem.length; i++){\n\t\t\tif(elem[i] === \"(\"){\n\t\t\t\tcnt++;\n\
    \t\t\t\tmax = Math.max(max, cnt);\n\t\t\t}\n\t\t\telse if(elem[i] === \")\"){\n\
    \t\t\t\tcnt--;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t});\n\treturn res;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let count_array\
    \ = [];\n    let paren_array = paren_string.split(\" \");\n    for (let i = 0;\
    \ i < paren_array.length; i++){\n        let count = 0;\n        let curr_paren\
    \ = paren_array[i];\n        let new_paren = curr_paren.slice(1, curr_paren.length\
    \ - 1);\n        for (let i = 0; i < new_paren.length; i++){\n            if (new_paren[i]\
    \ === \"(\"){\n                count++;\n            }\n        }\n        count_array.push(count);\n\
    \    }\n    return count_array;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  0,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpyx_dnde7.js:27:10)\n    at Object.<anonymous> (/tmp/tmpyx_dnde7.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 0,\
    \ 4 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar split_string\
    \ = paren_string.split(\" \");\n\tvar result = [];\n\tfor(var i = 0; i < split_string.length;\
    \ i++){\n\t\tvar temp = 0;\n\t\tvar max = 0;\n\t\tfor(var j = 0; j < split_string[i].length;\
    \ j++){\n\t\t\tif(split_string[i][j] == \"(\"){\n\t\t\t\ttemp++;\n\t\t\t\tif(temp\
    \ > max){\n\t\t\t\t\tmax = temp;\n\t\t\t\t}\n\t\t\t}else if(split_string[i][j]\
    \ == \")\"){\n\t\t\t\ttemp--;\n\t\t\t}\n\t\t}\n\t\tresult.push(max);\n\t}\n\t\
    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var deepest\
    \ = 0;\n  var deepest_array = [];\n  var count = 0;\n  for (var i = 0; i < paren_string.length;\
    \ i++){\n    if (paren_string[i] === \"(\"){\n      count++;\n      if (count\
    \ > deepest){\n        deepest = count;\n      }\n    } else if (paren_string[i]\
    \ === \")\"){\n      count--;\n      if (count === 0){\n        deepest_array.push(deepest);\n\
    \        deepest = 0;\n      }\n    }\n  }\n  return deepest_array;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    return paren_string.split('\
    \ ').map(function(x){\n        return x.match(/\\(((?=\\()*\\))/g).length;\n \
    \   });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpbdbxg951.js:17:10)\n    at Object.<anonymous> (/tmp/tmpbdbxg951.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 1,\
    \ 3 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var answer\
    \ = [];\n    var paren_array = paren_string.split(\" \");\n    for (var i = 0;\
    \ i < paren_array.length; i++){\n        var current_group = paren_array[i];\n\
    \        var current_sum = 0;\n        var max_sum = 0;\n        for (var j =\
    \ 0; j < current_group.length; j++){\n            var current_char = current_group[j];\n\
    \            if (current_char == \"(\"){\n                current_sum++;\n   \
    \         }\n            else if (current_char == \")\"){\n                current_sum--;\n\
    \            }\n            if (current_sum > max_sum){\n                max_sum\
    \ = current_sum;\n            }\n        }\n        answer.push(max_sum);\n  \
    \  }\n    return answer;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    // split\
    \ the string by spaces\n    let arrayOfGroups = paren_string.split(\" \");\n \
    \   //for each string of parens we need to find the deepest level of nesting of\
    \ parentheses.\n    let maxLevels = [];\n    for(let i = 0; i < arrayOfGroups.length;\
    \ i++){\n        // go through each string character by character looking for\
    \ ( or )\n        let currentString = arrayOfGroups[i];\n        let currentLevel\
    \ = 0;\n        let maxLevel = 0;\n        for(let j = 0; j < currentString.length;\
    \ j++){\n            // if we find a ( we add 1 to our currentLevel\n        \
    \    if(currentString[j] === \"(\"){\n                currentLevel += 1;\n   \
    \         }\n            // if we find a ) we subtract 1 from our currentLevel\n\
    \            if(currentString[j] === \")\"){\n                currentLevel -=\
    \ 1;\n            }\n            // after each new character we check to see if\
    \ our currentLevel is larger than our maxLevel.\n            if(currentLevel >\
    \ maxLevel){\n                maxLevel = currentLevel;\n            }\n      \
    \  }\n        // then we push maxLevel to our maxLevels array\n        maxLevels.push(maxLevel);\n\
    \    }\n    return maxLevels;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    const parens\
    \ = paren_string.split(\" \");\n    const results = [];\n    for(let paren of\
    \ parens){\n        let cur = 0;\n        let max = 0;\n        for(let i = 0;\
    \ i < paren.length; i++){\n            if(paren[i] === \"(\"){\n             \
    \   cur++;\n                max = Math.max(max, cur);\n            }\n       \
    \     else if(paren[i] === \")\"){\n                cur--;\n            }\n  \
    \      }\n        results.push(max);\n    }\n    return results;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var max_nesting_count\
    \ = 0;\n    var nesting_count = 0;\n    var nesting_count_arr = [];\n    for(var\
    \ i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n\
    \            nesting_count++;\n            if(nesting_count > max_nesting_count){\n\
    \                max_nesting_count = nesting_count;\n            }\n        }\n\
    \        else if(paren_string[i] == \")\"){\n            nesting_count_arr.push(nesting_count);\n\
    \            nesting_count = 0;\n        }\n    }\n    return nesting_count_arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  0,\n  3,\n  0,\n  0,\n  1,\n  3,\n  0,\n  1,\n  1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7a47n6hh.js:30:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7a47n6hh.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 0, 3, 0,\n    0, 1, 3, 0, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    //TODO\n\
    \    let array_of_parens = paren_string.split(\" \");\n    let levels = [];\n\
    \    for (let group of array_of_parens){\n        let highest = 0;\n        let\
    \ level = 0;\n        for (let i = 0; i < group.length; i++){\n            if\
    \ (group[i] == \"(\"){\n                level += 1;\n            }\n         \
    \   else if (group[i] == \")\"){\n                level -= 1;\n            }\n\
    \            if (level > highest){\n                highest = level;\n       \
    \     }\n        }\n        levels.push(highest);\n    }\n    return levels;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_splitted\
    \ = paren_string.split(\" \");\n    let paren_max = [];\n    for (let i = 0; i\
    \ < paren_splitted.length; i++){\n        paren_max.push(parse_parens(paren_splitted[i]));\n\
    \    }\n    return paren_max;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpsnyiufom.js:10\n        paren_max.push(parse_parens(paren_splitted[i]));\n\
    \                  ^\n\nReferenceError: parse_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpsnyiufom.js:10:19)\n    at test (/tmp/tmpsnyiufom.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpsnyiufom.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    // Write\
    \ a solution here\n    var splitString = paren_string.split(\" \");\n    var result\
    \ = [];\n    var stack = [];\n    for(var i = 0; i < splitString.length; i++){\n\
    \        if(splitString[i] === \"(\"){\n            stack.push(splitString[i]);\n\
    \        }\n        else if(splitString[i] === \")\"){\n            stack.pop();\n\
    \        }\n        result.push(stack.length);\n    }\n    return result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpeibxv2qj.js:28:10)\n    at Object.<anonymous> (/tmp/tmpeibxv2qj.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var result\
    \ = [];\n  var groups = paren_string.split(\" \");\n  for (var i = 0; i < groups.length;\
    \ i++){\n    var current = groups[i];\n    var num_open = 0;\n    var max_open\
    \ = 0;\n    for (var j = 0; j < current.length; j++){\n      if (current[j] ==\
    \ \"(\"){\n        num_open += 1;\n        if (num_open > max_open){\n       \
    \   max_open = num_open;\n        }\n      }\n      else if (current[j] == \"\
    )\"){\n        num_open -= 1;\n      }\n    }\n    result.push(max_open);\n  }\n\
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let parens\
    \ = paren_string.split(' ');\n    let parsed = [];\n    for(let i = 0; i < parens.length;\
    \ i++){\n        parsed.push(parse_single_paren(parens[i]));\n    }\n    return\
    \ parsed;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6udl9dg3.js:10\n        parsed.push(parse_single_paren(parens[i]));\n\
    \               ^\n\nReferenceError: parse_single_paren is not defined\n    at\
    \ parse_nested_parens (/tmp/tmp6udl9dg3.js:10:16)\n    at test (/tmp/tmp6udl9dg3.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp6udl9dg3.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var max_open\
    \ = 0;\n    var paren_array = paren_string.split(\" \");\n    var output = [];\n\
    \    for (var i = 0; i < paren_array.length; i++){\n        var s = paren_array[i];\n\
    \        var curr_max = 0;\n        var curr_open = 0;\n        for (var j = 0;\
    \ j < s.length; j++){\n            if (s[j] == '('){\n                curr_open++;\n\
    \                if (curr_open > curr_max){\n                    curr_max = curr_open;\n\
    \                }\n            }\n            else if (s[j] == ')'){\n      \
    \          curr_open--;\n            }\n        }\n        output.push(curr_max);\n\
    \    }\n    return output;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result\
    \ = [];\n    var regex = /[()]/g;\n    var match_arr = paren_string.match(regex);\n\
    \    var max_depth = 0;\n    var depth = 0;\n    for(var i = 0; i < match_arr.length;\
    \ i++){\n        if(match_arr[i] == \"(\"){\n            depth++;\n          \
    \  if(depth > max_depth){\n                max_depth = depth;\n            }\n\
    \        }\n        else if(match_arr[i] == \")\"){\n            depth--;\n  \
    \      }\n        if(i < match_arr.length - 1 && match_arr[i+1] == \" \"){\n \
    \           result.push(max_depth);\n            max_depth = 0;\n        }\n \
    \   }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpvw61m1zh.js:34:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvw61m1zh.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    const strings\
    \ = paren_string.split(' ');\n    const answers = [];\n    for(const string of\
    \ strings){\n        let stack = [];\n        let maxDepth = 0;\n        for(const\
    \ char of string){\n            if(char === '('){\n                stack.push(char);\n\
    \                maxDepth = Math.max(maxDepth, stack.length);\n            }\n\
    \            else{\n                stack.pop();\n            }\n        }\n \
    \       answers.push(maxDepth);\n    }\n    return answers;\n}\n\nmodule.exports\
    \ = {\n    parse_nested_parens\n};\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var stack=[];\n\
    \    var result=[];\n    for(var i=0;i<paren_string.length;i++){\n        if(paren_string[i]=='('){\n\
    \            stack.push(paren_string[i]);\n        }\n        else if(paren_string[i]==')'){\n\
    \            stack.pop();\n        }\n        else if(paren_string[i]==' '){\n\
    \            result.push(stack.length);\n        }\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmpumptm1pj.js:28:10)\n    at Object.<anonymous> (/tmp/tmpumptm1pj.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let paren_groups\
    \ = paren_string.split(\" \");\n  let paren_levels = [];\n  for (let i = 0; i\
    \ < paren_groups.length; i++){\n    let current_paren_group = paren_groups[i];\n\
    \    let current_paren_level = 0;\n    let deepest_paren_level = 0;\n    for (let\
    \ j = 0; j < current_paren_group.length; j++){\n      if (current_paren_group[j]\
    \ === \"(\"){\n        current_paren_level++;\n      }\n      if (current_paren_group[j]\
    \ === \")\"){\n        current_paren_level--;\n      }\n      if (current_paren_level\
    \ > deepest_paren_level){\n        deepest_paren_level = current_paren_level;\n\
    \      }\n    }\n    paren_levels.push(deepest_paren_level);\n  }\n  return paren_levels;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    const parenArr\
    \ = paren_string.split(' ');\n    let result = [];\n    parenArr.forEach(element\
    \ => {\n        let count = 0;\n        let currentDepth = 0;\n        for(let\
    \ i = 0; i < element.length; i++){\n            if(element[i] === '('){\n    \
    \            count++;\n                if(count > currentDepth){\n           \
    \         currentDepth = count;\n                }\n            }else if(element[i]\
    \ === ')'){\n                count--;\n            }\n        }\n        result.push(currentDepth);\n\
    \    });\n    return result;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    paren_string\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    var answer = [];\n\
    \    for(var i = 0; i < paren_string.length; i++){\n        var j = 0;\n     \
    \   var current_depth = 0;\n        while(j < paren_string[i].length){\n     \
    \       if(paren_string[i][j] == \"(\"){\n                current_depth++;\n \
    \           }else if(paren_string[i][j] == \")\"){\n                current_depth--;\n\
    \            }\n            j++;\n        }\n        answer.push(current_depth);\n\
    \    }\n    return answer;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpnjbpqmu1.js:31:10)\n    at Object.<anonymous> (/tmp/tmpnjbpqmu1.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_arr\
    \ = paren_string.split(\" \");\n    let max_levels = [];\n    paren_arr.forEach(value\
    \ => {\n        let level = 0;\n        let max_level = 0;\n        for(let i\
    \ = 0; i < value.length; i++){\n            if(value[i] === \"(\"){\n        \
    \        level++;\n                if(level > max_level){\n                  \
    \  max_level = level;\n                }\n            }\n            else if(value[i]\
    \ === \")\"){\n                level--;\n            }\n        }\n        max_levels.push(max_level);\n\
    \    });\n    return max_levels;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren\
    \ = paren_string.split(\" \");\n    // console.log(paren);\n    let return_array\
    \ = [];\n    for(let i = 0; i < paren.length; i++){\n        let count = 0;\n\
    \        let max = 0;\n        for(let j = 0; j < paren[i].length; j++){\n   \
    \         if(paren[i][j] === \"(\"){\n                count++;\n             \
    \   if(count > max){\n                    max = count;\n                }\n  \
    \          }\n            else if(paren[i][j] === \")\"){\n                count--;\n\
    \            }\n        }\n        return_array.push(max);\n    }\n    return\
    \ return_array;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_array\
    \ = paren_string.split(' ');\n\tvar paren_levels = [];\n\tfor (var i = 0; i <\
    \ paren_array.length; i++){\n\t\tvar current_paren_level = 0;\n\t\tvar current_paren_string\
    \ = paren_array[i];\n\t\tfor (var j = 0; j < current_paren_string.length; j++){\n\
    \t\t\tif (current_paren_string[j] == '('){\n\t\t\t\tcurrent_paren_level++;\n\t\
    \t\t}\n\t\t\telse if (current_paren_string[j] == ')'){\n\t\t\t\tcurrent_paren_level--;\n\
    \t\t\t}\n\t\t}\n\t\tparen_levels.push(current_paren_level);\n\t}\n\treturn paren_levels;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpp68edwk5.js:30:10)\n    at Object.<anonymous> (/tmp/tmpp68edwk5.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let max_num\
    \ = 0;\n    let arr = paren_string.split(\" \");\n    let results = [];\n    for(let\
    \ i = 0; i < arr.length; i++){\n        let num = 0;\n        for(let j = 0; j\
    \ < arr[i].length; j++){\n            if(arr[i][j] === \"(\"){\n             \
    \   num += 1;\n            }else if(arr[i][j] === \")\"){\n                num\
    \ -= 1;\n            }\n        }\n        if(num > max_num){\n            max_num\
    \ = num;\n        }\n        results.push(max_num);\n    }\n    return results;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpdjqj1mf7.js:32:10)\n    at Object.<anonymous> (/tmp/tmpdjqj1mf7.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar paren_list\
    \ = paren_string.split(\" \");\n\treturn paren_list.map(function(str){\n\t\tvar\
    \ count = 0;\n\t\tvar max = 0;\n\t\tfor(var i = 0; i < str.length; i++){\n\t\t\
    \tif(str[i] == \"(\"){\n\t\t\t\tcount++;\n\t\t\t\tif(count > max){\n\t\t\t\t\t\
    max = count;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(str[i] == \")\"){\n\t\t\t\tcount--;\n\
    \t\t\t}\n\t\t}\n\t\treturn max;\n\t});\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var prev\
    \ = [0], result = [];\n    for(var i = 0; i < paren_string.length; i++){\n   \
    \     if(paren_string[i] == '('){\n            prev.push(prev[prev.length - 1]\
    \ + 1);\n        }else if(paren_string[i] == ')'){\n            result.push(prev.pop());\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  1,\n  3,\n  2,\n  1,\n  1,\n  3,\n  2,\n  2,\n  2,\n  1\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpsopgzeco.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsopgzeco.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 2, 1, 3, 2,\n    1, 1, 3, 2, 2,\n    2, 1\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var groups\
    \ = paren_string.split(\" \");\n  var result = [];\n  for(i=0; i<groups.length;\
    \ i++){\n    var max = 0;\n    var count = 0;\n    for(j=0; j<groups[i].length;\
    \ j++){\n      if(groups[i][j]=='('){\n        count++;\n        if(count>max){\n\
    \          max = count;\n        }\n      }\n      else if(groups[i][j]==')'){\n\
    \        count--;\n      }\n    }\n    result.push(max);\n  }\n  return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parenArray\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < parenArray.length;\
    \ i++){\n        var paren_stack = [];\n        var max = 0;\n        for(var\
    \ j = 0; j < parenArray[i].length; j++){\n            if(parenArray[i][j] == \"\
    (\"){\n                paren_stack.push(parenArray[i][j]);\n                if(paren_stack.length\
    \ > max){\n                    max = paren_stack.length;\n                }\n\
    \            }\n            else if(parenArray[i][j] == \")\"){\n            \
    \    paren_stack.pop();\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let paren_group\
    \ = paren_string.split(' ');\n  let result = [];\n  for(let i = 0; i < paren_group.length;\
    \ i++){\n    let count = 0;\n    let max = 0;\n    for(let j = 0; j < paren_group[i].length;\
    \ j++){\n      if(paren_group[i][j] === '('){\n        count ++;\n        if(count\
    \ > max){\n          max = count;\n        }\n      }else if(paren_group[i][j]\
    \ === ')'){\n        count --;\n      }\n    }\n    result.push(max);\n  }\n \
    \ return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let split =\
    \ paren_string.split(' ');\n  return split.map(paren=> {\n    let depth = 0;\n\
    \    let count = 0;\n    for (let i = 0; i < paren.length; i++) {\n      if (paren[i]\
    \ === '(') {\n        depth++;\n        if (depth > count) {\n          count\
    \ = depth;\n        }\n      } else {\n        depth--;\n      }\n    }\n    return\
    \ count;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var max = 0;\n\
    \  var arr = [];\n  var stack = [];\n  var stringArr = paren_string.split(\" \"\
    );\n  var j = 0;\n  var i = 0;\n  while(j < stringArr.length){\n    while(i <\
    \ stringArr[j].length){\n      if(stringArr[j][i] === \"(\"){\n        stack.push(stringArr[j][i]);\n\
    \      }\n      else if(stringArr[j][i] === \")\"){\n        stack.pop();\n  \
    \    }\n      i++;\n    }\n    arr.push(stack.length);\n    i = 0;\n    j++;\n\
    \  }\n  return arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpg2vi9lq8.js:35:10)\n    at Object.<anonymous> (/tmp/tmpg2vi9lq8.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let max_level\
    \ = 0, current_level = 0, res = [];\n  for(let i = 0; i < paren_string.length;\
    \ i++){\n    if(paren_string[i] === '('){\n      current_level++;\n      max_level\
    \ = Math.max(max_level, current_level);\n    }else if(paren_string[i] === ')'){\n\
    \      current_level--;\n    }else if(paren_string[i] === ' '){\n      res.push(max_level);\n\
    \      max_level = 0;\n      current_level = 0;\n    }\n  }\n  res.push(max_level);\n\
    \  return res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var groups\
    \ = paren_string.split(\" \");\n    var res = [];\n    for(var i=0; i<groups.length;\
    \ i++){\n        var deepest_level = 0;\n        var curr_level = 0;\n       \
    \ for(var j=0; j<groups[i].length; j++){\n            if(groups[i][j]===\"(\"\
    ){\n                curr_level++;\n                if(curr_level>deepest_level){\n\
    \                    deepest_level = curr_level;\n                }\n        \
    \    }\n            else if(groups[i][j]===\")\"){\n                curr_level--;\n\
    \            }\n        }\n        res.push(deepest_level);\n    }\n    return\
    \ res;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp7m7so7fu.js:15:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7m7so7fu.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let finalArray\
    \ = [];\n  let splitArray = paren_string.split(\" \");\n  for (i=0; i<splitArray.length;\
    \ i++){\n    let parenString = splitArray[i];\n    let count = 0;\n    let tempCount\
    \ = 0;\n    for (j=0; j<parenString.length; j++){\n      if (parenString[j] ===\
    \ '('){\n        tempCount += 1;\n      }\n      if (parenString[j] === ')'){\n\
    \        tempCount -= 1;\n      }\n      if (tempCount > count){\n        count\
    \ = tempCount;\n      }\n    }\n    finalArray.push(count);\n  }\n  return finalArray;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tlet parenList\
    \ = paren_string.split(\" \");\n\tlet nestedParenArr = [];\n\tfor(let i = 0; i\
    \ < parenList.length; i++){\n\t\tlet paren = parenList[i];\n\t\tlet count = 0;\n\
    \t\tlet max = 0;\n\t\tfor(let j = 0; j < paren.length; j++){\n\t\t\tif(paren[j]\
    \ === \"(\"){\n\t\t\t\tcount++;\n\t\t\t\tif(count > max){\n\t\t\t\t\tmax = count;\n\
    \t\t\t\t}\n\t\t\t}else if(paren[j] === \")\"){\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\
    }\n\t\tnestedParenArr.push(max);\n\t}\n\treturn nestedParenArr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var results\
    \ = [];\n    var parens = paren_string.split(\" \");\n    for(var i = 0; i < parens.length;\
    \ i++){\n        var index = 0;\n        var maxIndex = 0;\n        var length\
    \ = parens[i].length;\n        var lengthMax = 0;\n        while(index < length){\n\
    \            if(parens[i][index] == \"(\"){\n                maxIndex++;\n   \
    \             lengthMax++;\n            }\n            else if(parens[i][index]\
    \ == \")\"){\n                maxIndex--;\n                lengthMax++;\n    \
    \        }\n            index++;\n        }\n        results.push(lengthMax);\n\
    \    }\n    return results;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  6,\n  6,\n\
    \  2,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n \
    \   at test (/tmp/tmpw6wy7az4.js:35:10)\n    at Object.<anonymous> (/tmp/tmpw6wy7az4.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 6, 6, 2,\
    \ 10 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_arr\
    \ = paren_string.split(\" \");\n    var max_paren = 0;\n    var paren_counter\
    \ = 0;\n    var result = [];\n    for(var i = 0; i < paren_arr.length; i++){\n\
    \        var paren_level = paren_arr[i];\n        for(var j = 0; j < paren_level.length;\
    \ j++){\n            if(paren_level[j] == \"(\"){\n                paren_counter++;\n\
    \            }\n            else if(paren_level[j] == \")\"){\n              \
    \  paren_counter--;\n            }\n            max_paren = Math.max(max_paren,\
    \ paren_counter);\n        }\n        result.push(max_paren);\n        max_paren\
    \ = 0;\n        paren_counter = 0;\n    }\n    return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(\" \");\n    var levels = []\n    for (var i = 0; i < parens.length;\
    \ i++){\n        var stack = [];\n        var count = 0;\n        for (var j =\
    \ 0; j < parens[i].length; j++){\n            if (parens[i][j] == '('){\n    \
    \            stack.push('(');\n                count++;\n            }\n     \
    \       else if (parens[i][j] == ')'){\n                stack.pop();\n       \
    \         count--;\n            }\n        }\n        levels.push(Math.abs(count));\n\
    \    }\n    return levels;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpprtndbof.js:32:10)\n    at Object.<anonymous> (/tmp/tmpprtndbof.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_groups\
    \ = paren_string.split(\" \");\n    return paren_groups.map( (group) => {\n  \
    \      let stack = [];\n        let curr_level = 0;\n        let max_level = 0;\n\
    \        for (let i = 0; i < group.length; i++){\n            if (group[i] ===\
    \ \"(\"){\n                stack.push(1);\n                curr_level++;\n   \
    \             max_level = Math.max(max_level, curr_level);\n            } else\
    \ if (group[i] === \")\"){\n                stack.pop();\n                curr_level--;\n\
    \            }\n        }\n        return max_level;\n    });\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var level =\
    \ [],\n      max = [];\n  //split paren_string into array of individual strings\n\
    \  var parens = paren_string.split(\" \");\n  //iterate through parens\n  for\
    \ (var i = 0; i < parens.length; i++){\n    var count = 0;\n    for (var j = 0;\
    \ j < parens[i].length; j++){\n      //if paren is open, add one to count\n  \
    \    if (parens[i][j] === \"(\"){\n        count++;\n      }\n      //if paren\
    \ is closed, subtract one from count\n      else if (parens[i][j] === \")\"){\n\
    \        count--;\n      }\n      //if count is negative, return invalid parenthasis\n\
    \      if (count < 0){\n        return \"invalid parenthasis\";\n      }\n   \
    \ }\n    //push count to level array\n    level.push(count);\n  }\n  //iterate\
    \ through level array\n  for (var k = 0; k < level.length; k++){\n    //if level\
    \ is greater than 1, push level to max array\n    if (level[k] > 1){\n      max.push(level[k]);\n\
    \    }\n    //else level is 1\n    else {\n      //iterate through max array\n\
    \      for (var m = 0; m < max.length; m++){\n        //if level is greater than\
    \ max, push level to max array\n        if (level[k] > max[m]){\n          max.push(level[k]);\n\
    \        }\n      }\n    }\n  }\n  return max;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpf0mk8v79.js:55:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf0mk8v79.js:60:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let final_array\
    \ = [];\n  let split_string = paren_string.split(\" \");\n  for (let i = 0; i\
    \ < split_string.length; i++){\n    let current_string = split_string[i];\n  \
    \  let count = 0;\n    let max_count = 0;\n    for (let j = 0; j < current_string.length;\
    \ j++){\n      if (current_string[j] === \"(\"){\n        count++;\n        if\
    \ (count > max_count){\n          max_count = count;\n        }\n      } else\
    \ if (current_string[j] === \")\"){\n        count--;\n      }\n    }\n    final_array.push(max_count);\n\
    \  }\n  return final_array;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(\" \");\n    var max_depth = 0;\n    var paren_depth =\
    \ 0;\n    var depth_arr = [];\n    for(var i = 0; i < parens.length; i++){\n \
    \       for(var j = 0; j < parens[i].length; j++){\n            if(parens[i][j]\
    \ == \"(\"){\n                paren_depth += 1;\n            }else if(parens[i][j]\
    \ == \")\"){\n                paren_depth -= 1;\n            }\n            if(paren_depth\
    \ > max_depth){\n                max_depth = paren_depth;\n            }\n   \
    \     }\n        depth_arr.push(max_depth);\n        max_depth = 0;\n        paren_depth\
    \ = 0;\n    }\n    return depth_arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_split\
    \ = paren_string.split(\" \");\n    var deepest_nesting = [];\n    for (i = 0;\
    \ i < paren_split.length; i++){\n        var current_depth = 0;\n        var max_depth\
    \ = 0;\n        for (n = 0; n < paren_split[i].length; n++){\n            if (paren_split[i][n]\
    \ == \"(\"){\n                current_depth += 1;\n                if (current_depth\
    \ > max_depth){\n                    max_depth = current_depth;\n            \
    \    }\n            }\n            else if (paren_split[i][n] == \")\"){\n   \
    \             current_depth -= 1;\n            }\n        }\n        deepest_nesting.push(max_depth);\n\
    \    }\n    return deepest_nesting;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    paren_string\
    \ = paren_string.replace(/\\s/g,'');\n    var max_index = 0;\n    var count =\
    \ 0;\n    var arr = [];\n    while(paren_string.length > 0){\n        if(paren_string[0]\
    \ == \"(\"){\n            count++;\n            if(count > max_index){\n     \
    \           max_index = count;\n            }\n        }\n        else if(paren_string[0]\
    \ == \")\"){\n            count--;\n        }\n        paren_string = paren_string.slice(1);\n\
    \    }\n    console.log(max_index);\n    return max_index;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpa5y8kjbk.js:32:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa5y8kjbk.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '3

    '
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_array\
    \ = paren_string.split(\" \");\n  var output = [];\n  for (var i = 0; i < paren_array.length;\
    \ i++){\n    var paren_index = 0;\n    var current_paren_array = paren_array[i].split(\"\
    \");\n    var current_paren_level = 0;\n    var max_paren_level = 0;\n    while\
    \ (paren_index < current_paren_array.length){\n      if (current_paren_array[paren_index]\
    \ == \"(\"){\n        current_paren_level += 1;\n        if (current_paren_level\
    \ > max_paren_level){\n          max_paren_level = current_paren_level;\n    \
    \    }\n      } else if (current_paren_array[paren_index] == \")\"){\n       \
    \ current_paren_level -= 1;\n      }\n      paren_index += 1;\n    }\n    output.push(max_paren_level);\n\
    \  }\n  return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    const paren_list\
    \ = paren_string.split(\" \");\n    let output = []\n    for (let i = 0; i < paren_list.length;\
    \ i++){\n        let stack = [];\n        let count = 0;\n        for (let j =\
    \ 0; j < paren_list[i].length; j++){\n            if (paren_list[i][j] === '('){\n\
    \                stack.push(paren_list[i][j]);\n                count++;\n   \
    \         }\n            else if (paren_list[i][j] === ')'){\n               \
    \ if (stack.length > 0){\n                    stack.pop();\n                }\n\
    \                else{\n                    count = 0;\n                    break;\n\
    \                }\n            }\n        }\n        output.push(count);\n  \
    \  }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpd17sq4ad.js:37:10)\n    at Object.<anonymous> (/tmp/tmpd17sq4ad.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let arr =\
    \ paren_string.split(\" \");\n    let depth = [];\n    for(let i = 0; i < arr.length;\
    \ i++){\n        depth.push(getDepth(arr[i]));\n    }\n    return depth;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp1loy4trk.js:10\n        depth.push(getDepth(arr[i]));\n       \
    \       ^\n\nReferenceError: getDepth is not defined\n    at parse_nested_parens\
    \ (/tmp/tmp1loy4trk.js:10:15)\n    at test (/tmp/tmp1loy4trk.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp1loy4trk.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var output\
    \ = [];\n  var max = 0;\n  var count = 0;\n  for(var i = 0; i < paren_string.length;\
    \ i++){\n    if(paren_string[i] == '('){\n      count++;\n      if(count > max){\n\
    \        max = count;\n      }\n    }\n    if(paren_string[i] == ')'){\n     \
    \ count--;\n    }\n    if(paren_string[i] == ' '){\n      output.push(max);\n\
    \      max = 0;\n      count = 0;\n    }\n  }\n  return output;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp0egrbev1.js:33:10)\n    at Object.<anonymous> (/tmp/tmp0egrbev1.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var array_string\
    \ = paren_string.split(\" \");\n    var array_result = [];\n    var num_parens\
    \ = 0;\n    var count_parens = 0;\n    var new_str = \"\";\n    for(var i = 0;\
    \ i < array_string.length; i++){\n        num_parens = 0;\n        count_parens\
    \ = 0;\n        new_str = \"\";\n        for(var j = 0; j < array_string[i].length;\
    \ j++){\n            if(array_string[i][j] == \"(\"){\n                count_parens\
    \ = count_parens + 1;\n            }\n            else if(array_string[i][j] ==\
    \ \")\"){\n                count_parens = count_parens - 1;\n            }\n \
    \           if(count_parens > num_parens){\n                num_parens = count_parens;\n\
    \            }\n        }\n        array_result.push(num_parens);\n    }\n   \
    \ return array_result;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\t//split into\
    \ list of paren strings\n\tlet paren_list = paren_string.split(\" \");\n\tlet\
    \ paren_levels = [];\n\tfor (var i = 0; i < paren_list.length; i++) {\n\t\tparen_levels.push(get_paren_levels(paren_list[i]));\n\
    \t}\n\treturn paren_levels;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpgtm0fje1.js:11\n\t\tparen_levels.push(get_paren_levels(paren_list[i]));\n\
    \t\t             ^\n\nReferenceError: get_paren_levels is not defined\n    at\
    \ parse_nested_parens (/tmp/tmpgtm0fje1.js:11:16)\n    at test (/tmp/tmpgtm0fje1.js:21:20)\n\
    \    at Object.<anonymous> (/tmp/tmpgtm0fje1.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  // //Your code\
    \ here\n  // return undefined;\n  // 1. create array to hold nested paren pairs\n\
    \  // 2. loop through paren_string, push first paren to array\n  // 3. loop through\
    \ array, if there's a closing paren without an opening paren, push to array\n\
    \  // 4. loop through array, find the longest string.length, return that length\n\
    \  var parenArray = [];\n  for (var i = 0; i < paren_string.length; i++) {\n \
    \   if (paren_string[i] === '(') {\n      parenArray.push(paren_string[i]);\n\
    \    } else if (paren_string[i] === ')') {\n      parenArray.push(paren_string[i]);\n\
    \    }\n  }\n  console.log(parenArray);\n  var longest = parenArray[0];\n  for\
    \ (var j = 0; j < parenArray.length; j++) {\n    if (parenArray[j].length > longest.length)\
    \ {\n      longest = parenArray[j];\n    }\n  }\n  return longest.length;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpn8v4upvz.js:36:10)\n\
    \    at Object.<anonymous> (/tmp/tmpn8v4upvz.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: "[\n  '(', '(', ')', '(', ')',\n  ')', '(', '(', '(', ')',\n  ')', ')',\
    \ '(', ')', '(',\n  '(', '(', ')', ')', '(',\n  ')', '(', ')', ')'\n]\n"
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tlet paren_array\
    \ = paren_string.split(\" \");\n\tlet result = [];\n\tfor(let i = 0; i < paren_array.length;\
    \ i++){\n\t\tresult.push(depth_of_parens(paren_array[i]));\n\t}\n\treturn result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpefox_9fi.js:10\n\t\tresult.push(depth_of_parens(paren_array[i]));\n\
    \t\t       ^\n\nReferenceError: depth_of_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmpefox_9fi.js:10:10)\n    at test (/tmp/tmpefox_9fi.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpefox_9fi.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_arr\
    \ = paren_string.split(\" \");\n    var max_level = 0;\n    var max_idx = 0;\n\
    \    for(var i = 0; i < paren_arr.length; i++){\n        var level = 0;\n    \
    \    for(var j = 0; j < paren_arr[i].length; j++){\n            if(paren_arr[i][j]\
    \ == \"(\"){\n                level++;\n            }\n            else if(paren_arr[i][j]\
    \ == \")\"){\n                level--;\n            }\n        }\n        if(level\
    \ > max_level){\n            max_level = level;\n            max_idx = i;\n  \
    \      }\n    }\n    return [max_level, max_idx];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmpp6dz5v58.js:33:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp6dz5v58.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0 ],\n\
    \  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var max_parens\
    \ = [];\n  var paren_indices = paren_string.split(' ');\n  // should be an array\
    \ of strings representing each of the groups\n  console.log(paren_indices);\n\
    \  // iterate through paren_indices\n  for (var i = 0; i < paren_indices.length;\
    \ i++){\n    var left_paren_count = 0;\n    var right_paren_count = 0;\n    //\
    \ iterate through each character in paren_indices[i]\n    for (var j = 0; j <\
    \ paren_indices[i].length; j++){\n      if (paren_indices[i][j] === '('){\n  \
    \      left_paren_count += 1;\n      }\n      else if (paren_indices[i][j] ===\
    \ ')'){\n        right_paren_count += 1;\n      }\n    }\n    // if number of\
    \ left parentheses > right parens\n    if (left_paren_count > right_paren_count){\n\
    \      max_parens.push(left_paren_count);\n    }\n    else {\n      max_parens.push(right_paren_count);\n\
    \    }\n  }\n  console.log(max_parens);\n  return max_parens;\n}\n\nparse_nested_parens(\"\
    (()()) ((())) () ((())()())\");\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  3,\n\
    \  1,\n  5\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpdnctyvmg.js:42:10)\n    at Object.<anonymous> (/tmp/tmpdnctyvmg.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 3, 1,\
    \ 5 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''(()())'', ''((()))'', ''()'', ''((())()())'' ]

    [ 3, 3, 1, 5 ]

    [ ''(()())'', ''((()))'', ''()'', ''((())()())'' ]

    [ 3, 3, 1, 5 ]

    '
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    // paren_string.split('\
    \ ').map(paren_string => paren_string.split('').reduce((memo, value) => {\n  \
    \  //     if (value === '(') {\n    //         memo++;\n    //     } else if (value\
    \ === ')') {\n    //         memo--;\n    //     }\n    //     return memo;\n\
    \    // }, 0))\n    var levels = [];\n    var level = 0;\n    var current = 0;\n\
    \    for (var i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === '(') {\n            level++;\n        } else if (paren_string[i] === ')')\
    \ {\n            level--;\n        } else if (paren_string[i] === ' ') {\n   \
    \         levels.push(level);\n            level = 0;\n        }\n    }\n    return\
    \ levels;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test\
    \ (/tmp/tmp0c46n5i4.js:36:10)\n    at Object.<anonymous> (/tmp/tmp0c46n5i4.js:41:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0\
    \ ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let final_output\
    \ = [];\n    let paren_array = paren_string.split(\" \");\n    for(let i = 0;\
    \ i < paren_array.length; i++){\n        let group = paren_array[i];\n       \
    \ let max_nesting = 0;\n        let current_nesting = 0;\n        for(let j =\
    \ 0; j < group.length; j++){\n            if(group[j] === \"(\"){\n          \
    \      current_nesting += 1;\n                if(current_nesting > max_nesting){\n\
    \                    max_nesting = current_nesting;\n                }\n     \
    \       }\n            else if(group[j] === \")\"){\n                current_nesting\
    \ -= 1;\n            }\n        }\n        final_output.push(max_nesting);\n \
    \   }\n    return final_output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var parens\
    \ = paren_string.split(\" \");\n  var result = [];\n  for(var i = 0; i < parens.length;\
    \ i++){\n    var current = parens[i];\n    var temp = 0;\n    var max = 0;\n \
    \   for(var j = 0; j < current.length; j++){\n      if(current[j] === \"(\"){\n\
    \        temp++;\n        if(temp > max){\n          max = temp;\n        }\n\
    \      }\n      else if(current[j] === \")\"){\n        temp--;\n      }\n   \
    \ }\n    result.push(max);\n  }\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result\
    \ = [];\n    var deep = 0;\n    var i;\n    var temp = 0;\n    var len = paren_string.length;\n\
    \    for(i = 0; i < len; i++){\n        if(paren_string[i] === '('){\n       \
    \     temp++;\n            if(temp > deep){\n                deep = temp;\n  \
    \          }\n        }\n        else if(paren_string[i] === ')'){\n         \
    \   temp--;\n        }\n        else if(paren_string[i] === ' '){\n          \
    \  result.push(deep);\n            deep = 0;\n            temp = 0;\n        }\n\
    \    }\n    result.push(deep);\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let result\
    \ = [];\n    let paren_groups = paren_string.split(\" \");\n    for(let i = 0;\
    \ i < paren_groups.length; i++){\n        let startParenIndex = -1;\n        let\
    \ maxNestingLevel = 0;\n        let currentNestingLevel = 0;\n        for(let\
    \ j = 0; j < paren_groups[i].length; j++){\n            if(paren_groups[i][j]\
    \ === \"(\"){\n                if(startParenIndex < 0){\n                    startParenIndex\
    \ = j;\n                }\n                currentNestingLevel++;\n          \
    \      if(currentNestingLevel > maxNestingLevel){\n                    maxNestingLevel\
    \ = currentNestingLevel;\n                }\n            }\n            else if(paren_groups[i][j]\
    \ === \")\"){\n                currentNestingLevel--;\n            }\n       \
    \ }\n        result.push(maxNestingLevel);\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(' ');\n    var result = [];\n    var stack = [];\n    for(i\
    \ = 0; i < parens.length; i++){\n        for(j = 0; j < parens[i].length; j++){\n\
    \            var elem = parens[i][j];\n            if(elem == '('){\n        \
    \        stack.push(elem);\n            }\n            else if(elem == ')'){\n\
    \                stack.pop();\n            }\n        }\n        result.push(stack.length);\n\
    \        stack = [];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp4q92yqd8.js:30:10)\n    at Object.<anonymous> (/tmp/tmp4q92yqd8.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let paren_array\
    \ = paren_string.split(\" \");\n    let max_depth = 0;\n    let max_depth_list\
    \ = [];\n    for(let i = 0; i < paren_array.length; i++){\n        for(let j =\
    \ 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j] === \"\
    (\"){\n                max_depth += 1;\n            }\n            else if(paren_array[i][j]\
    \ === \")\"){\n                max_depth_list.push(max_depth);\n             \
    \   max_depth = 0;\n            }\n        }\n    }\n    return max_depth_list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  0,\n  3,\n  0,\n  0,\n  1,\n  3,\n  0,\n  1,\n  1,\n  0\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n    at test (/tmp/tmp9ul51lni.js:29:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9ul51lni.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 0, 3, 0,\n    0, 1, 3, 0, 1,\n    1, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  return paren_string.split('\
    \ ').map(parens => {\n    let max = 0, level = 0\n    parens.split('').forEach(paren\
    \ => {\n      if (paren === '(')\n        max = Math.max(++level, max)\n     \
    \ else\n        level--\n    })\n    return max\n  })\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    return paren_string.split('\
    \ ').map(parse_parens);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpi3q9wd69.js:7\n    return paren_string.split(' ').map(parse_parens);\n\
    \                                       ^\n\nReferenceError: parse_parens is not\
    \ defined\n    at parse_nested_parens (/tmp/tmpi3q9wd69.js:7:40)\n    at test\
    \ (/tmp/tmpi3q9wd69.js:15:20)\n    at Object.<anonymous> (/tmp/tmpi3q9wd69.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_string_arr\
    \ = paren_string.split(\" \");\n    return paren_string_arr.map(function(item){\n\
    \        var count = 0;\n        var max_count = 0;\n        for(var i = 0; i\
    \ < item.length; i++){\n            if(item[i] === \"(\"){\n                count++;\n\
    \                if(count > max_count){\n                    max_count = count;\n\
    \                }\n            }\n            else if(item[i] === \")\"){\n \
    \               count--;\n            }\n        }\n        return max_count;\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var arr =\
    \ paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        var count = 0;\n        var str = arr[i];\n        for(var j\
    \ = 0; j < str.length; j++){\n            if(str[j] == '('){\n               \
    \ count++;\n            }\n            else if(str[j] == ')'){\n             \
    \   count--;\n            }\n        }\n        result.push(count);\n    }\n \
    \   return result;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmpvwwj512m.js:31:10)\n    at Object.<anonymous> (/tmp/tmpvwwj512m.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let result\
    \ = [];\n    let split_string = paren_string.split(\" \");\n    //console.log(split_string);\n\
    \    let max_levels = 0;\n    let count = 0;\n    for(let i = 0; i < split_string.length;\
    \ i++){\n        for(let j = 0; j < split_string[i].length; j++){\n          \
    \  //console.log(split_string[i][j]);\n            if(split_string[i][j] === \"\
    (\"){\n                count += 1;\n            }\n            else if(split_string[i][j]\
    \ === \")\"){\n                count -= 1;\n            }\n            if(count\
    \ > max_levels){\n                max_levels = count;\n            }\n       \
    \ }\n        result.push(max_levels);\n        max_levels = 0;\n        count\
    \ = 0;\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar result\
    \ = [];\n\tvar parens = paren_string.split(\" \");\n\tfor(var i = 0; i < parens.length;\
    \ i++){\n\t\tvar num_open = 0;\n\t\tvar max_level = 0;\n\t\tfor(var j = 0; j <\
    \ parens[i].length; j++){\n\t\t\tif(parens[i][j] == \"(\"){\n\t\t\t\tnum_open++;\n\
    \t\t\t\tif(num_open > max_level){\n\t\t\t\t\tmax_level = num_open;\n\t\t\t\t}\n\
    \t\t\t}\n\t\t\telse if(parens[i][j] == \")\"){\n\t\t\t\tnum_open--;\n\t\t\t}\n\
    \t\t}\n\t\tresult.push(max_level);\n\t}\n\treturn result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  let stack =\
    \ [];\n  let split_string = paren_string.split(' ');\n  let result = [];\n  for(let\
    \ i = 0; i < split_string.length; i++){\n    let current_string = split_string[i];\n\
    \    for(let j = 0; j < current_string.length; j++){\n      if(current_string[j]\
    \ === '('){\n        stack.push(current_string[j]);\n      }\n      else if(current_string[j]\
    \ === ')'){\n        stack.pop();\n      }\n    }\n    result.push(stack.length);\n\
    \    stack = [];\n  }\n  return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  3,\n  1,\n  3\n]\n  \
    \  at test (/tmp/tmp7ygzgmtw.js:30:10)\n    at Object.<anonymous> (/tmp/tmp7ygzgmtw.js:35:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_groups\
    \ = paren_string.split(\" \");\n    var result = [];\n    var level;\n    var\
    \ max;\n    for(var i = 0; i < paren_groups.length; i++){\n        level = 0;\n\
    \        max = 0;\n        for(var j = 0; j < paren_groups[i].length; j++){\n\
    \            if(paren_groups[i][j] == \"(\"){\n                level++;\n    \
    \            if(level > max){\n                    max = level;\n            \
    \    }\n            }\n            else if(paren_groups[i][j] == \")\"){\n   \
    \             level--;\n            }\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < parens_array.length;\
    \ i++){\n        result.push(count_nested_parens(parens_array[i]));\n    }\n \
    \   return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5kx36_ig.js:10\n        result.push(count_nested_parens(parens_array[i]));\n\
    \               ^\n\nReferenceError: count_nested_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmp5kx36_ig.js:10:16)\n    at test (/tmp/tmp5kx36_ig.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp5kx36_ig.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
