name: HumanEval_6_parse_nested_parens
language: js
results:
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var level\
    \ = 0;\n    var maxlevel = 0;\n    var result = [];\n    for (var i = 0; i < paren_string.length;\
    \ i++){\n        if (paren_string[i] == \"(\"){\n            level += 1;\n   \
    \         if (level > maxlevel){\n                maxlevel = level;\n        \
    \    }\n        }\n        else if (paren_string[i] == \")\"){\n            level\
    \ -= 1;\n        }\n        else if (paren_string[i] == \" \"){\n            result.push(maxlevel);\n\
    \            maxlevel = 0;\n            level = 0;\n        }\n    }\n    result.push(maxlevel);\n\
    \    return result;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let maxCount\
    \ = 0;\n    let nested_parens = [];\n    paren_string.split(' ').forEach(paren\
    \ => {\n        let count = 0;\n        paren.split('').forEach(char => {\n  \
    \          if(char === '('){\n                count++;\n            } else if(char\
    \ === ')'){\n                count--;\n            }\n        });\n        if(count\
    \ > maxCount){\n            maxCount = count;\n        }\n        nested_parens.push(count);\n\
    \    });\n    return nested_parens;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmp7f8co9ko.js:31:10)\n    at Object.<anonymous> (/tmp/tmp7f8co9ko.js:36:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var new_string\
    \ = paren_string.replace(/ /g, '');\n    var stack = [];\n    var count = 0;\n\
    \    var max = 0;\n    var group = [];\n    var last_char = \"\";\n    var last_paren\
    \ = \"\";\n    for (var i = 0; i < new_string.length; i++){\n        var char\
    \ = new_string[i];\n        if (char === \"(\"){\n            stack.push(char);\n\
    \            count++;\n            if (count > max){\n                max = count;\n\
    \            }\n        }\n        else if (char === \")\"){\n            stack.pop();\n\
    \            count--;\n        }\n        if (last_char === \")\" && char ===\
    \ \"(\"){\n            group.push(max);\n            max = 0;\n        }\n   \
    \     last_char = char;\n    }\n    group.push(max);\n    return group;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 1, 3, 1, 3, 2, 0 ]\n\nshould equal\n\
    \n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpea7w4ue5.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpea7w4ue5.js:47:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    2,\
    \ 1, 3, 1,\n    3, 2, 0\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result\
    \ = [];\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ === '('){\n            for(var j = i + 1; j < paren_string.length; j++){\n \
    \               if(paren_string[j] === '('){\n                    result.push(1)\n\
    \                }\n                if(paren_string[j] === ')'){\n           \
    \         result.push(0)\n                }\n            }\n        }\n    }\n\
    \    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 1,\n  0,\n  1,\n  0,\n  0,\n  1,\n  1,\n\
    \  1,\n  0,\n  0,\n  0,\n  1,\n  0,\n  1,\n  1,\n  1,\n  0,\n  0,\n  1,\n  0,\n\
    \  1,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  1,\n  1,\n  1,\n  0,\n  0,\n  0,\n\
    \  1,\n  0,\n  1,\n  1,\n  1,\n  0,\n  0,\n  1,\n  0,\n  1,\n  0,\n  0,\n  0,\n\
    \  0,\n  1,\n  1,\n  1,\n  0,\n  0,\n  0,\n  1,\n  0,\n  1,\n  1,\n  1,\n  0,\n\
    \  0,\n  1,\n  0,\n  1,\n  0,\n  0,\n  1,\n  1,\n  0,\n  0,\n  0,\n  1,\n  0,\n\
    \  1,\n  1,\n  1,\n  0,\n  0,\n  1,\n  0,\n  1,\n  0,\n  0,\n  1,\n  0,\n  0,\n\
    \  0,\n  1,\n  0,\n  1,\n  1,\n  1,\n  0,\n  0,\n  1,\n  0,\n  1,\n  0,\n  0,\n\
    \  0,\n  0,\n  0,\n  1,...\n\nshould equal\n\n[ 2, 3, 1, 3 ]\n    at test (/tmp/tmpq16hbs31.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq16hbs31.js:32:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [\n    1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1,\n\
    \    0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0,\n    1, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0,\
    \ 1,\n    1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,\n    1, 1, 0, 0, 0, 1, 0, 1, 1,\
    \ 1, 0, 0,\n    1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0,\n    1, 1, 1, 0, 0, 1, 0,\
    \ 1, 0, 0, 1, 0,\n    0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1,\n    0, 0, 0, 0,\n \
    \   ... 54 more items\n  ],\n  expected: [ 2, 3, 1, 3 ],\n  operator: 'deepEqual'\n\
    }\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    // your code\
    \ here\n    paren_string = paren_string.split(\" \");\n    var index = 0;\n  \
    \  var indexOne = 0;\n    var indexTwo = 0;\n    var result = [];\n    var count\
    \ = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        index = paren_string[i].indexOf(\"\
    (\");\n        indexOne = paren_string[i].indexOf(\")\");\n        indexTwo =\
    \ paren_string[i].lastIndexOf(\")\");\n        count = 0;\n        while(indexOne\
    \ < indexTwo){\n            count++;\n            indexOne = paren_string[i].indexOf(\"\
    )\", indexOne + 1);\n        }\n        result.push(count);\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (())\
    \ ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 2, 0, 4 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmp7t701wyj.js:32:10)\n    at Object.<anonymous> (/tmp/tmp7t701wyj.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 0, 4 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_array\
    \ = paren_string.split(\" \");\n    var result = [];\n    for(var i = 0; i < paren_array.length;\
    \ i++){\n        var paren_counter = 0;\n        var max_paren_counter = 0;\n\
    \        for(var j = 0; j < paren_array[i].length; j++){\n            if(paren_array[i][j]\
    \ == \"(\"){\n                paren_counter += 1;\n                if(paren_counter\
    \ > max_paren_counter){\n                    max_paren_counter = paren_counter;\n\
    \                }\n            }\n            else if(paren_array[i][j] == \"\
    )\"){\n                paren_counter -= 1;\n            }\n        }\n       \
    \ result.push(max_paren_counter);\n    }\n    return result;\n}\n\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var group\
    \ = paren_string.split(\" \");\n    for(var i = 0; i < group.length; i++){\n \
    \       var max_nest = 0;\n        var nest = 0;\n        for(var j = 0; j < group[i].length;\
    \ j++){\n            if(group[i][j] == '('){\n                nest++;\n      \
    \          if(nest > max_nest){\n                    max_nest = nest;\n      \
    \          }\n            }\n            else if(group[i][j] == ')'){\n      \
    \          nest--;\n            }\n        }\n        group[i] = max_nest;\n \
    \   }\n    return group;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var paren_arr\
    \ = paren_string.split(' ');\n  var result = [];\n  for(var i = 0; i < paren_arr.length;\
    \ i++){\n    result.push(find_nested_parens(paren_arr[i]));\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp6_y3onub.js:10\n    result.push(find_nested_parens(paren_arr[i]));\n\
    \           ^\n\nReferenceError: find_nested_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmp6_y3onub.js:10:12)\n    at test (/tmp/tmp6_y3onub.js:20:20)\n    at\
    \ Object.<anonymous> (/tmp/tmp6_y3onub.js:25:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let answer\
    \ = [];\n    let levels = [];\n    for(let i = 0; i < paren_string.length; i++){\n\
    \        let curr_char = paren_string[i];\n        //if curr_char == '(', then\
    \ we push to the levels stack\n        if(curr_char == '('){\n            levels.push(1);\n\
    \        }\n        // if curr_char == ')', then we subtract from the last index\
    \ in levels\n        else if(curr_char == ')'){\n            if(levels.length\
    \ == 0){\n                levels.push(0);\n            }\n            else{\n\
    \                levels[levels.length - 1] -= 1;\n            }\n        }\n \
    \       // if curr_char == ' ', then we add an element to levels\n        else\
    \ if(curr_char == ' '){\n            answer.push(levels[levels.length - 1]);\n\
    \            levels.push(0);\n        }\n    }\n    return answer;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ -1, -2, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpvdznwy4i.js:38:10)\n    at Object.<anonymous> (/tmp/tmpvdznwy4i.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ -1, -2, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var paren_arr\
    \ = paren_string.split(\" \")\n    var paren_result = []\n    for (var i = 0;\
    \ i < paren_arr.length; i++){\n        paren_result.push(parse_parens(paren_arr[i]))\n\
    \    }\n    return paren_result\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpnlubyir9.js:10\n        paren_result.push(parse_parens(paren_arr[i]))\n\
    \                     ^\n\nReferenceError: parse_parens is not defined\n    at\
    \ parse_nested_parens (/tmp/tmpnlubyir9.js:10:22)\n    at test (/tmp/tmpnlubyir9.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmpnlubyir9.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n\tvar result\
    \ = [];\n\tvar temp = [];\n\tparen_string.split(' ').forEach(function(element,\
    \ index, array){\n\t\ttemp = parse_string(element);\n\t\tresult.push(temp);\n\t\
    });\n\treturn result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_3pwiw3c.js:10\n\t\ttemp = parse_string(element);\n\t\t^\n\nReferenceError:\
    \ parse_string is not defined\n    at /tmp/tmp_3pwiw3c.js:10:3\n    at Array.forEach\
    \ (<anonymous>)\n    at parse_nested_parens (/tmp/tmp_3pwiw3c.js:9:26)\n    at\
    \ test (/tmp/tmp_3pwiw3c.js:21:20)\n    at Object.<anonymous> (/tmp/tmp_3pwiw3c.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  const count\
    \ = [];\n  const openingParens = [\"(\", \"[\", \"{\"];\n  const closingParens\
    \ = [\")\", \"]\", \"}\"];\n  let stack = [];\n  let str = '';\n  for (let i =\
    \ 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \" \") {\n \
    \     count.push(stack.length);\n      stack = [];\n      str = '';\n    } else\
    \ {\n      str += paren_string[i];\n      if (openingParens.includes(paren_string[i]))\
    \ {\n        stack.push(paren_string[i]);\n      } else if (closingParens.includes(paren_string[i]))\
    \ {\n        if (closingParens.indexOf(paren_string[i]) === openingParens.indexOf(stack[stack.length\
    \ - 1])) {\n          stack.pop();\n        } else {\n          throw `Parens\
    \ don't match in ${str}`;\n        }\n      }\n    }\n  }\n  count.push(stack.length);\n\
    \  return count;\n}\n\nmodule.exports = {\n  parse_nested_parens,\n};\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = parse_nested_parens;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpg3h6ljup.js:42:10)\n    at Object.<anonymous> (/tmp/tmpg3h6ljup.js:47:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  var finalArray\
    \ = paren_string.split(\" \");\n  var level = 0;\n  var parenLevels = new Array();\n\
    \  for(var i = 0; i < finalArray.length; i++){\n    level = 0;\n    for(var j\
    \ = 0; j < finalArray[i].length; j++){\n      if(finalArray[i][j] == \"(\"){\n\
    \        level++;\n      }\n      else if(finalArray[i][j] == \")\"){\n      \
    \  level--;\n      }\n    }\n    parenLevels.push(level);\n  }\n  return parenLevels;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 0, 0, 0, 0 ]\n\nshould equal\n\n[ 2, 3,\
    \ 1, 3 ]\n    at test (/tmp/tmpyz7e341q.js:29:10)\n    at Object.<anonymous> (/tmp/tmpyz7e341q.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0, 0 ],\n  expected: [ 2, 3, 1, 3\
    \ ],\n  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n  //create array\
    \ to return\n  var paren_array = paren_string.split(\" \");\n  //array to store\
    \ answers\n  var answers = [];\n  //loop through each paren\n  for(var i = 0;\
    \ i < paren_array.length; i++){\n    //starting count\n    var counter = 0;\n\
    \    //maximum count\n    var max_count = 0;\n    //loop through each paren\n\
    \    for(var j = 0; j < paren_array[i].length; j++){\n      //if it's an open\
    \ paren\n      if(paren_array[i][j] === \"(\"){\n        //add to counter\n  \
    \      counter++;\n        //if counter is greater than max count, replace it\n\
    \        if(counter > max_count){\n          max_count = counter;\n        }\n\
    \      }\n      //if it's a close paren\n      else if(paren_array[i][j] === \"\
    )\"){\n        //subtract from counter\n        counter--;\n      }\n    }\n \
    \   //push current max count to answers array\n    answers.push(max_count);\n\
    \  }\n  //return answers array\n  return answers;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var output\
    \ = [];\n    var start = 0;\n    var end = 0;\n    while(paren_string.length >\
    \ 0){\n        end = paren_string.indexOf(\" \");\n        if(end == -1){\n  \
    \          end = paren_string.length;\n        }\n        var substring = paren_string.substring(start,\
    \ end);\n        paren_string = paren_string.substring(end + 1);\n        output.push(nested_parens(substring));\n\
    \    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmplww3cgkr.js:17\n        output.push(nested_parens(substring));\n\
    \               ^\n\nReferenceError: nested_parens is not defined\n    at parse_nested_parens\
    \ (/tmp/tmplww3cgkr.js:17:16)\n    at test (/tmp/tmplww3cgkr.js:27:20)\n    at\
    \ Object.<anonymous> (/tmp/tmplww3cgkr.js:32:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var arr =\
    \ paren_string.split(\" \");\n    var ret = [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        var leftCount = 0;\n        var rightCount = 0;\n        var\
    \ left = true;\n        var max = 0;\n        for(var j = 0; j < arr[i].length;\
    \ j++){\n            if(arr[i][j] == \"(\"){\n                if(left) leftCount++;\n\
    \                else rightCount++;\n            }\n            else if(arr[i][j]\
    \ == \")\"){\n                if(left) leftCount--;\n                else rightCount--;\n\
    \            }\n            if(leftCount < 0){\n                left = false;\n\
    \                leftCount = 0;\n            }\n            if(rightCount < 0){\n\
    \                left = true;\n                rightCount = 0;\n            }\n\
    \            max = Math.max(max, Math.max(leftCount, rightCount));\n        }\n\
    \        ret.push(max);\n    }\n    return ret;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    let stack\
    \ = [];\n    let ans = [];\n    let max = 0;\n    let current = 0;\n    for(let\
    \ i = 0; i < paren_string.length; i++){\n        if(paren_string[i] == '('){\n\
    \            stack.push(paren_string[i]);\n            current += 1;\n       \
    \     max = Math.max(max, current);\n        }\n        else if(paren_string[i]\
    \ == ')'){\n            stack.pop();\n            current -= 1;\n        }\n \
    \       else{\n            ans.push(max);\n            max = 0;\n            current\
    \ = 0;\n        }\n    }\n    return ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 2, 3, 1 ]\n\nshould equal\n\n[ 2, 3, 1,\
    \ 3 ]\n    at test (/tmp/tmpugh3u3l7.js:35:10)\n    at Object.<anonymous> (/tmp/tmpugh3u3l7.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 1 ],\n  expected: [ 2, 3, 1, 3 ],\n\
    \  operator: 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var result\
    \ = [];\n    var new_string = '';\n    paren_string = paren_string.replace(/\\\
    (\\(/g, '(');\n    for (var i = 0; i < paren_string.length; i++){\n        if\
    \ (paren_string[i] == '(' || paren_string[i] == ')') {\n            new_string\
    \ += paren_string[i];\n        }\n    }\n    var str_array = new_string.split('\
    \ ');\n    console.log(str_array);\n    str_array.forEach(function(elem){\n  \
    \      result.push(parse_parens(elem));\n    });\n    return result;\n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = parse_nested_parens;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[1,\
    \ 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"),[4]);\n}\n\ntest();"
  stdout: "[ '()())(()))()(())()())' ]\n"
  stderr: "/tmp/tmpmc6citfn.js:18\n        result.push(parse_parens(elem));\n    \
    \           ^\n\nReferenceError: parse_parens is not defined\n    at /tmp/tmpmc6citfn.js:18:16\n\
    \    at Array.forEach (<anonymous>)\n    at parse_nested_parens (/tmp/tmpmc6citfn.js:17:15)\n\
    \    at test (/tmp/tmpmc6citfn.js:29:20)\n    at Object.<anonymous> (/tmp/tmpmc6citfn.js:34:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  exit_code: 1
  status: ReferenceError
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    return paren_string.split('\
    \ ').map(i => {\n        var parens = 0;\n        var max_parens = 0;\n      \
    \  for (var j=0; j<i.length; j++){\n            if (i[j] == '('){\n          \
    \      parens++;\n                if (parens > max_parens){\n                \
    \    max_parens = parens;\n                }\n            }\n            else\
    \ if (i[j] == ')'){\n                parens--;\n            }\n        }\n   \
    \     return max_parens;\n    });\n}\n\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "//Input to this function is a string represented multiple groups for nested\
    \ parentheses separated by spaces.\n// For each of the group, output the deepest\
    \ level of nesting of parentheses.\n// E.g. (()()) has maximum two levels of nesting\
    \ while ((())) has three.\n// >>> parse_nested_parens(\"(()()) ((())) () ((())()())\"\
    )\n// [2, 3, 1, 3]\nfunction parse_nested_parens(paren_string){\n    var parens\
    \ = paren_string.split(\" \");\n    var num_parens = [];\n    for (var i = 0;\
    \ i < parens.length; i++){\n        num_parens.push(num_nested_parens(parens[i]));\n\
    \    }\n    return num_parens;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = parse_nested_parens;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[2, 3, 1, 3]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[1, 2, 3, 4]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[4]);\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp_0_e14hs.js:10\n        num_parens.push(num_nested_parens(parens[i]));\n\
    \                   ^\n\nReferenceError: num_nested_parens is not defined\n  \
    \  at parse_nested_parens (/tmp/tmp_0_e14hs.js:10:20)\n    at test (/tmp/tmp_0_e14hs.js:20:20)\n\
    \    at Object.<anonymous> (/tmp/tmp_0_e14hs.js:25:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
