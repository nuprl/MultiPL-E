name: HumanEval_157_right_angle_triangle
language: js
prompt: "//Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
  \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
  \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
  \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
  \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
  \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
completions: ["    if(a**2 + b**2 == c**2 || b**2 + c**2 == a**2 || a**2 + c**2 ==\
    \ b**2) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "    // return a*a + b*b == c*c\n    if (Math.max(a,b,c) == c) {\n     \
    \   return (c*c == a*a + b*b)\n    } else if (Math.max(a,b,c) == b) {\n      \
    \  return (b*b == a*a + c*c)\n    } else {\n        return (a*a == b*b + c*c)\n\
    \    }\n}", "    var ab = a*a + b*b;\n    var bc = b*b + c*c;\n    var ac = a*a\
    \ + c*c;\n    // Make sure to add a comma between each parameter in console.log()\n\
    \    console.log(ab, bc, ac);\n    if (ab == c*c || bc == a*a || ac == b*b){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "   \
    \ if(!isNaN(a) && !isNaN(b) && !isNaN(c)){\n        a = parseInt(a);\n       \
    \ b = parseInt(b);\n        c = parseInt(c);\n        if(a*a == b*b + c*c || b*b\
    \ == a*a + c*c || c*c == a*a + b*b){\n            return true;\n        }\n  \
    \  }\n    return false;\n}", "  if(a*a == b*b + c*c || b*b == a*a + c*c || c*c\
    \ == a*a + b*b){\n    return true;\n  }else{\n    return false;\n  }\n}\n\n",
  "    if(a < b + c && b < a + c && c < a + b){\n        if(Math.pow(a, 2) + Math.pow(b,\
    \ 2) == Math.pow(c, 2) || Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2) ||\
    \ Math.pow(c, 2) + Math.pow(a, 2) == Math.pow(b, 2)){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n", "    // Use the Pythagorean theorem\n\
    \    return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a;\n}\n", " \
    \   // write code here\n    return false;\n}\n", "    let max = Math.max(a, b,\
    \ c);\n    let min = Math.min(a, b, c);\n    let mid = a + b + c - max - min;\n\
    \    return (max ** 2 == mid ** 2 + min ** 2);\n}\n", "    let hypotenuse = Math.max(a,\
    \ b, c);\n    let lengths = [a, b, c].filter(num => num !== hypotenuse);\n   \
    \ let square_sum = lengths.reduce((acc, num) => acc + num ** 2, 0);\n    return\
    \ square_sum === hypotenuse ** 2\n}\n", "  let arr = [];\n  arr.push(a);\n  arr.push(b);\n\
    \  arr.push(c);\n  arr.sort(function(a, b){return a-b});\n  let d1 = arr[0];\n\
    \  let d2 = arr[1];\n  let d3 = arr[2];\n  if (Math.pow(d1, 2) + Math.pow(d2,\
    \ 2) === Math.pow(d3, 2)){\n    return true;\n  } else {\n    return false;\n\
    \  }\n}", "  return (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) ||\n \
    \         (Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2)) ||\n          (Math.pow(b,\
    \ 2) + Math.pow(c, 2) == Math.pow(a, 2));\n}\n", "    if(a == 0 || b == 0 || c\
    \ == 0) return false;\n\n    let max = Math.max(a, b, c);\n    let min1 = Math.min(a,\
    \ b, c);\n    let min2 = a + b + c - (max + min1);\n\n    if(max * max == min1\
    \ * min1 + min2 * min2) return true;\n    return false;\n}\n", "  // return true\
    \ if a right angle triangle, false otherwise\n  if (a ** 2 + b ** 2 === c ** 2)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    // Your\
    \ code goes here!\n    if( a*a + b*b == c*c ){\n        return true;\n    }\n\
    \    else if( a*a + c*c == b*b ){\n        return true;\n    }\n    else if( b*b\
    \ + c*c == a*a ){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n\n", "  var hyp = Math.max(a, b, c);\n  var total = a + b + c;\n  var\
    \ sum = Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2);\n  var diff = total\
    \ - hyp;\n  if (Math.pow(hyp, 2) == sum - Math.pow(diff, 2)){\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "    var a_sq = Math.pow(a, 2);\n \
    \   var b_sq = Math.pow(b, 2);\n    var c_sq = Math.pow(c, 2);\n    var triangle\
    \ = [a_sq, b_sq, c_sq];\n    triangle.sort();\n    if(triangle[0] + triangle[1]\
    \ == triangle[2]){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n", "    if (a * a + b * b == c * c || a * a + c * c == b * b || b *\
    \ b + c * c == a * a)\n        return true;\n    else\n        return false;\n\
    }\n", "    return ((Math.pow(a, 2) + Math.pow(b, 2)) === Math.pow(c, 2));\n}",
  "\t//Write your code here\n\tif(a > 0 && b > 0 && c > 0){\n\t\tvar d = c*c;\n\t\t\
    var e = a*a;\n\t\tvar f = b*b;\n\t\tif(d == e + f){\n\t\t\treturn true;\n\t\t\
    }\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse{\n\t\treturn false;\n\t\
    }\n}\n\n", "  return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}\n",
  "\tvar longest_side;\n\tvar other_sides;\n\tvar other_side1;\n\tvar other_side2;\n\
    \tvar pythag_check;\n\tif(a > b && a > c){\n\t\tlongest_side = a;\n\t\tother_side1\
    \ = b;\n\t\tother_side2 = c;\n\t}\n\telse if(b > a && b > c){\n\t\tlongest_side\
    \ = b;\n\t\tother_side1 = a;\n\t\tother_side2 = c;\n\t}\n\telse if(c > a && c\
    \ > b){\n\t\tlongest_side = c;\n\t\tother_side1 = a;\n\t\tother_side2 = b;\n\t\
    }\n\telse{\n\t\treturn 'Not a triangle';\n\t}\n\tother_sides = other_side1 + other_side2;\n\
    \tpythag_check = longest_side * longest_side;\n\tif(pythag_check === other_sides){\n\
    \t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "    return ((a\
    \ * a) + (b * b) == (c * c))\n}", "    let a2 = Math.pow(a, 2);\n    let b2 =\
    \ Math.pow(b, 2);\n    let c2 = Math.pow(c, 2);\n    if (a2 + b2 == c2 || a2 +\
    \ c2 == b2 || b2 + c2 == a2){\n        return true;\n    }\n    return false;\n\
    }", "\tvar largest = Math.max(a, b, c);\n\tvar sum = a + b + c;\n\treturn (largest\
    \ * largest == (sum - largest) * (sum - largest));\n}", "    var c = a * a + b\
    \ * b;\n    var d = c.toString().split(\"\");\n    var e = parseInt(d[d.length\
    \ - 1]);\n    if (e == 0){\n        return true;\n    }\n    else{\n        return\
    \ false;\n    }\n}\n", "    var right = Math.pow(a, 2) + Math.pow(b, 2);\n   \
    \ if (Math.pow(c, 2) == right) {\n        return true;\n    } else {\n       \
    \ return false;\n    }\n}", "    if (a * a + b * b == c * c || a * a + c * c ==\
    \ b * b || b * b + c * c == a * a)\n        return true;\n    else \n        return\
    \ false;\n}\nvar a = +prompt(\"Enter the first length of triangle\");\nvar b =\
    \ +prompt(\"Enter the second length of triangle\");\nvar c = +prompt(\"Enter the\
    \ third length of triangle\");\ndocument.write(\"The three sides form a right-angled\
    \ triangle is \",right_angle_triangle(a, b, c));\n", "    // get the hypotenuse\n\
    \    var hypotenuse;\n    var res = false;\n    if(a > b && a > c){\n        hypotenuse\
    \ = a;\n        if(Math.pow(hypotenuse, 2) == Math.pow(b, 2) + Math.pow(c, 2)){\n\
    \            res = true;\n        }\n    }\n    else if(b > a && b > c){\n   \
    \     hypotenuse = b;\n        if(Math.pow(hypotenuse, 2) == Math.pow(a, 2) +\
    \ Math.pow(c, 2)){\n            res = true;\n        }\n    }\n    else if(c >\
    \ a && c > b){\n        hypotenuse = c;\n        if(Math.pow(hypotenuse, 2) ==\
    \ Math.pow(a, 2) + Math.pow(b, 2)){\n            res = true;\n        }\n    }\n\
    \    return res;\n}\n", "    var side1 = a*a;\n    var side2 = b*b;\n    var side3\
    \ = c*c;\n    if ((side1 == side2 + side3) || (side2 == side1 + side3) || (side3\
    \ == side1 + side2)) {\n        return true;\n    }\n    else {\n        return\
    \ false;\n    }\n}", "\tif ((a ** 2) + (b ** 2) == (c ** 2)){\n\t\treturn true;\n\
    \t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "    var hypotenuse = Math.max(a,\
    \ b, c);\n    var side_a = a;\n    var side_b = b;\n    var side_c = c;\n    if\
    \ (hypotenuse == side_a){\n        hypotenuse = side_a;\n        side_a = Math.min(b,\
    \ c);\n        side_b = Math.max(b, c);\n    } else if (hypotenuse == side_b){\n\
    \        hypotenuse = side_b;\n        side_b = Math.min(a, c);\n        side_c\
    \ = Math.max(a, c);\n    } else if (hypotenuse == side_c){\n        hypotenuse\
    \ = side_c;\n        side_c = Math.min(a, b);\n        side_b = Math.max(a, b);\n\
    \    }\n    if ((hypotenuse * hypotenuse) == (side_a * side_a) + (side_b * side_b)){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}", "\t//assuming\
    \ that the arguments are side lengths\n\t// if statement test to determine whether\
    \ a triangle is right-angled or not\n\t// if (c^2 - a^2 - b^2) == 0 then it is\
    \ a right-angled triangle.\n\tif ((Math.pow(c, 2) - Math.pow(a, 2) - Math.pow(b,\
    \ 2)) == 0){\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n", " \
    \ // TODO\n}\n", "    return (a ** 2 + b ** 2 === c ** 2) || (a ** 2 + c ** 2\
    \ === b ** 2) || (b ** 2 + c ** 2 === a ** 2);\n}", "    //create array of sorted\
    \ values\n    var values = [a, b, c].sort();\n    //check if squared hypotenuse\
    \ is equal to the squared sum of the two other sides\n    return values[2] **\
    \ 2 === values[0] ** 2 + values[1] ** 2;\n}\n", "    var s1, s2, s3;\n    s1 =\
    \ Math.pow(a, 2);\n    s2 = Math.pow(b, 2);\n    s3 = Math.pow(c, 2);\n    if(s1\
    \ + s2 == s3){\n        return true;\n    }\n    else if(s2 + s3 == s1){\n   \
    \     return true;\n    }\n    else if(s1 + s3 == s2){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n", "  var hyp = Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2));\n  if (c === hyp) {\n    return true;\n  }\n  return false;\n\
    }", "    return (c*c)==(a*a)+(b*b);\n}\n", "  // TODO\n  return false;\n}\n",
  "\tif ( ((a*a)+(b*b)) === (c*c) ){\n\t\treturn true;\n\t} else if ( ((a*a)+(c*c))\
    \ === (b*b) ){\n\t\treturn true;\n\t} else if ( ((b*b)+(c*c)) === (a*a) ){\n\t\
    \treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n", "  var max = Math.max(a,\
    \ b, c);\n  var min = Math.min(a, b, c);\n  var third = (a + b + c) - max - min;\n\
    \  return (Math.pow(max, 2) === Math.pow(min, 2) + Math.pow(third, 2));\n}\n\n",
  "    if(typeof a !== 'number' || typeof b !== 'number' || typeof c !== 'number'){\n\
    \        return false;\n    }\n\n    if(a <= 0 || b <= 0 || c <= 0){\n       \
    \ return false;\n    }\n\n    return ((a*a) + (b*b) === (c*c)) || ((a*a) + (c*c)\
    \ === (b*b)) || ((b*b) + (c*c) === (a*a));\n}\n", "    return Math.pow(a, 2) +\
    \ Math.pow(b, 2) === Math.pow(c, 2) || Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b,\
    \ 2) || Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2);\n}", "  let sides\
    \ = [a, b, c];\n  let side1 = a;\n  let side2 = b;\n  let hypotenuse = c;\n  let\
    \ theta;\n  sides.sort();\n  side1 = sides[0];\n  side2 = sides[1];\n  hypotenuse\
    \ = sides[2];\n  if(isNaN(hypotenuse) || isNaN(side1) || isNaN(side2)){\n    return\
    \ false;\n  }\n  if(side1 < 0 || side2 < 0 || hypotenuse < 0){\n    return false;\n\
    \  }\n  theta = Math.acos(side1/hypotenuse);\n  if(Math.round(theta*180/Math.PI)\
    \ == 90){\n    return true;\n  }\n  return false;\n}\n", "    const arr = [a,\
    \ b, c].sort((a, b) => a - b);\n    const [x, y, z] = arr;\n    return x ** 2\
    \ + y ** 2 === z ** 2;\n}\n", "    if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c,\
    \ 2)) {\n        return true;\n    }\n    else {\n        return false;\n    }\n\
    }", "    return a*a + b*b == c*c;\n}", "    let hyp = [a, b, c].sort()[2]\n  \
    \  let x = hyp*hyp\n    let y = a*a + b*b + c*c\n    if (x === y){\n        return\
    \ true\n    }\n    else{\n        return false\n    }\n}", "    return(Math.pow(a,\
    \ 2) + Math.pow(b, 2) == Math.pow(c, 2));\n}\n", "    return Math.pow(a, 2) +\
    \ Math.pow(b, 2) === Math.pow(c, 2) || Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b,\
    \ 2) || Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2);\n}\n", "    var isRightAngle\
    \ = false;\n    if (a > b && a > c){\n        if (Math.pow(a, 2) == Math.pow(b,\
    \ 2) + Math.pow(c, 2)) {\n            isRightAngle = true;\n        }\n    }\n\
    \    else if (b > a && b > c){\n        if (Math.pow(b, 2) == Math.pow(a, 2) +\
    \ Math.pow(c, 2)) {\n            isRightAngle = true;\n        }\n    }\n    else\
    \ if (c > a && c > b){\n        if (Math.pow(c, 2) == Math.pow(a, 2) + Math.pow(b,\
    \ 2)) {\n            isRightAngle = true;\n        }\n    }\n    return isRightAngle;\n\
    }\n", "    if(a ** 2 + b ** 2 == c ** 2 || a ** 2 + c ** 2 == b ** 2 || b ** 2\
    \ + c ** 2 == a ** 2)\n        return true;\n    else\n        return false;\n\
    }\n", "    var hyp = c;\n    var bs = 0;\n    var lg = 0;\n    if(a > b){\n  \
    \      bs = b;\n        lg = a;\n    }else{\n        bs = a;\n        lg = b;\n\
    \    }\n    if(hyp > lg){\n        var t = hyp;\n        hyp = lg;\n        lg\
    \ = t;\n    }\n    var c = Math.pow(hyp, 2) + Math.pow(bs, 2);\n    var d = Math.pow(lg,\
    \ 2);\n    if(c == d){\n        return true;\n    }else{\n        return false;\n\
    \    }\n}", "\t//check if the sum of two sides squared is equal to the third side\
    \ squared\n\treturn (a*a) + (b*b) === (c*c);\n}\n", "    var h = Math.max(a, b,\
    \ c);\n    var h2 = Math.pow(h, 2);\n    var sum_sqr = Math.pow(a, 2) + Math.pow(b,\
    \ 2) + Math.pow(c, 2);\n    return sum_sqr == h2;\n}", "    return Math.pow(a,\
    \ 2) + Math.pow(b, 2) === Math.pow(c, 2) ? true : false;\n}\n", "    // Your code\
    \ here\n    // Your code here\n    var result = false;\n    if(typeof a === \"\
    number\" && typeof b === \"number\" && typeof c === \"number\"){\n        var\
    \ max = Math.max(a, b, c);\n        var a2 = a * a;\n        var b2 = b * b;\n\
    \        var c2 = c * c;\n        if(max === a){\n            if(b2 + c2 === a2){\n\
    \                result = true;\n            }\n        }\n        else if(max\
    \ === b){\n            if(a2 + c2 === b2){\n                result = true;\n \
    \           }\n        }\n        else if(max === c){\n            if(a2 + b2\
    \ === c2){\n                result = true;\n            }\n        }\n    }\n\
    \    return result;\n}", "  // check if a^2 + b^2 = c^2\n  //if a^2 + b^2 = c^2\
    \ return true\n  //else return false\n  if(Math.pow(a, 2) + Math.pow(b, 2) ===\
    \ Math.pow(c, 2)){\n    return true;\n  }else {\n    return false;\n  }\n}\n",
  "  var result;\n  if(a>b && a>c){\n    result = (b*b + c*c == a*a);\n  }\n  else\
    \ if(b>a && b>c){\n    result = (a*a + c*c == b*b);\n  }\n  else{\n    result\
    \ = (a*a + b*b == c*c);\n  }\n  return result;\n}", "    // your code here...\n\
    }\n", "    var result = false;\n    var triangleArray = [a, b, c];\n    triangleArray.sort(function(a,\
    \ b){return a-b});\n    console.log(triangleArray);\n    var side1 = triangleArray[0];\n\
    \    var side2 = triangleArray[1];\n    var side3 = triangleArray[2];\n    if(Math.pow(side1,\
    \ 2) + Math.pow(side2, 2) === Math.pow(side3, 2)){\n        result = true;\n \
    \   }\n    return result;\n}", "    if(isNaN(a) || isNaN(b) || isNaN(c)){\n  \
    \      return false;\n    }\n    if(a == b && b == c){\n        return false;\n\
    \    }\n    var max = Math.max(a, b, c);\n    var min = Math.min(a, b, c);\n \
    \   var mid = a + b + c - max - min;\n    if(max*max == mid*mid + min*min){\n\
    \        return true;\n    }\n    return false;\n}", "    if(a > 0 && b > 0 &&\
    \ c > 0){\n        return (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2))\
    \ || (Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2)) || (Math.pow(b, 2) +\
    \ Math.pow(c, 2) == Math.pow(a, 2));\n    }\n    return false;\n}\n\n", "    var\
    \ longest = Math.max(a, b, c);\n    var otherTwo = a + b + c - longest;\n    var\
    \ sides = [a, b, c];\n    var longestIndex = sides.indexOf(longest);\n    var\
    \ otherTwoIndex = sides.indexOf(otherTwo);\n    console.log(longest);\n    console.log(otherTwo);\n\
    \    console.log(longestIndex);\n    console.log(otherTwoIndex);\n    var thirdIndex\
    \ = 3 - longestIndex - otherTwoIndex;\n    console.log(thirdIndex);\n    console.log(sides[longestIndex]\
    \ === Math.sqrt(Math.pow(sides[otherTwoIndex], 2) + Math.pow(sides[thirdIndex],\
    \ 2)));\n    return sides[longestIndex] === Math.sqrt(Math.pow(sides[otherTwoIndex],\
    \ 2) + Math.pow(sides[thirdIndex], 2));\n}\n\n\n", "    // This function returns\
    \ the length of the hypotenuse\n    function hypotenuse(a, b){\n        return\
    \ Math.sqrt(a*a + b*b);\n    }\n    if (c == hypotenuse(a, b)){\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}", "\tif (Math.pow(a,\
    \ 2) + Math.pow(b, 2) == Math.pow(c, 2)){\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\n", "  var l1 = a;\n  var l2 = b;\n  var l3 = c;\n  var\
    \ temp = 0;\n  if (l1 > l2){\n      temp = l1;\n      l1 = l2;\n      l2 = temp;\n\
    \  }\n  if (l2 > l3){\n      temp = l2;\n      l2 = l3;\n      l3 = temp;\n  }\n\
    \  if (l1 > l2){\n      temp = l1;\n      l1 = l2;\n      l2 = temp;\n  }\n  return\
    \ (l1*l1 + l2*l2 == l3*l3);\n}\n", "    var sides = [a, b, c];\n    sides.sort();\n\
    \    var sumOfSq = 0;\n    for (var i = 0; i < 2; i++){\n        sumOfSq += sides[i]\
    \ * sides[i];\n    }\n    if (sumOfSq == sides[2] * sides[2]){\n        return\
    \ true;\n    }\n    return false;\n}\n", "    return (a**2 + b**2 == c**2);\n\
    }\n", "    let result;\n    let ab = a**2 + b**2;\n    let bc = b**2 + c**2;\n\
    \    let ac = a**2 + c**2;\n    if(ab == c**2 || bc == a**2 || ac == b**2){\n\
    \        result = true;\n    }else{\n        result = false;\n    }\n    return\
    \ result;\n}", "    const sides = [a, b, c];\n    sides.sort(function(a, b){return\
    \ a-b});\n    return Math.pow(sides[0], 2) + Math.pow(sides[1], 2) === Math.pow(sides[2],\
    \ 2);\n}\n", "    if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) {\n \
    \       return true;\n    } else {\n        return false;\n    }\n}", "    return\
    \ a*a + b*b == c*c\n}\n", "    if(a == b){\n        if(a*a + b*b == c*c){\n  \
    \          return true;\n        }\n    }\n    if(a == c){\n        if(a*a + c*c\
    \ == b*b){\n            return true;\n        }\n    }\n    if(b == c){\n    \
    \    if(b*b + c*c == a*a){\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n", "    if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}", " \
    \   if (a <= 0 || b <= 0 || c <= 0) {\n        return false;\n    }\n    var cond\
    \ = Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2) ||\n                Math.pow(b,\
    \ 2) + Math.pow(c, 2) == Math.pow(a, 2) ||\n                Math.pow(c, 2) + Math.pow(a,\
    \ 2) == Math.pow(b, 2);\n    return cond;\n}\n", "\tif (a>b && a>c){\n\t\tif (a*a===b*b+c*c){\n\
    \t\t\treturn true;\n\t\t}\n\t}else if (b>a && b>c){\n\t\tif (b*b===a*a+c*c){\n\
    \t\t\treturn true;\n\t\t}\n\t}else if (c>a && c>b){\n\t\tif (c*c===a*a+b*b){\n\
    \t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "\tif(Math.sqrt(a*a + b*b)\
    \ == c){\n\t\treturn true;\n\t}\n\telse if(Math.sqrt(a*a + c*c) == b){\n\t\treturn\
    \ true;\n\t}\n\telse if(Math.sqrt(b*b + c*c) == a){\n\t\treturn true;\n\t}\n\t\
    else{\n\t\treturn false;\n\t}\n}", "    // Note that equality testing is difficult\
    \ with floats\n    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2);\n\
    }\n", "  return (a*a + b*b === c*c || a*a + c*c === b*b || b*b + c*c === a*a)\n\
    }\n", "    // your code here\n}", "    var result = false;\n    var d = Math.pow(a,\
    \ 2) + Math.pow(b, 2);\n    if (Math.pow(c, 2) == d){\n        result = true;\n\
    \    }\n    return result;\n}", "  return (Math.pow(a, 2) + Math.pow(b, 2) ==\
    \ Math.pow(c, 2))\n}\n\nright_angle_triangle(3, 4, 5)\n", "    //if the largest\
    \ number is the square of the sum of the other two, then the\n    // triangle\
    \ is a right angle triangle\n    if(Math.max(a, b, c) === Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2) + Math.pow(c, 2))){\n        return true;\n    }\n    return\
    \ false;\n}", "\tif (a>b){\n\t\tif(a>c){\n\t\t\tif (Math.pow(a,2) == Math.pow(b,2)\
    \ + Math.pow(c,2)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif\
    \ (Math.pow(c,2) == Math.pow(a,2) + Math.pow(b,2)){\n\t\t\t\treturn true;\n\t\t\
    \t}\n\t\t}\n\t}\n\telse{\n\t\tif(b>c){\n\t\t\tif (Math.pow(b,2) == Math.pow(a,2)\
    \ + Math.pow(c,2)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif\
    \ (Math.pow(c,2) == Math.pow(a,2) + Math.pow(b,2)){\n\t\t\t\treturn true;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn false;\n}\n", "\tif (Math.pow(a, 2) + Math.pow(b, 2)\
    \ == Math.pow(c, 2)){\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n\
    }\n", "\tif (Math.sqrt(a*a + b*b) == c || Math.sqrt(a*a + c*c) == b || Math.sqrt(b*b\
    \ + c*c) == a) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}",
  "    var sides = {a: a, b: b, c: c};\n    var keys = Object.keys(sides);\n    var\
    \ sorted = keys.sort(function(a, b){\n        return sides[a] - sides[b];\n  \
    \  });\n    if(sides[sorted[0]]*sides[sorted[0]] + sides[sorted[1]]*sides[sorted[1]]\
    \ == sides[sorted[2]]*sides[sorted[2]]){\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n", "  var an = [a, b, c];\n  an.sort();\n  return\
    \ an[0]*an[0] + an[1]*an[1] == an[2]*an[2];\n}\n", "    const degrees = 180;\n\
    \    const rightAngle = 90;\n    const radians = Math.PI / degrees;\n    const\
    \ angleA = Math.acos((b * b + c * c - a * a) / (2 * b * c)) / radians;\n    const\
    \ angleB = Math.acos((a * a + c * c - b * b) / (2 * a * c)) / radians;\n    const\
    \ angleC = Math.acos((a * a + b * b - c * c) / (2 * a * b)) / radians;\n    const\
    \ points = [angleA, angleB, angleC];\n    return points.includes(rightAngle);\n\
    }", "\treturn (a * a + b * b == c * c) || (a * a + c * c == b * b) || (b * b +\
    \ c * c == a * a);\n}", " \n}\n", "  if ((a*a) + (b*b) == (c*c)) {\n    return\
    \ true;\n  }\n  else {\n    return false;\n  }\n}", "    return (c ** 2 == a **\
    \ 2 + b ** 2) ? true : false;\n}", "    if(a>0 && b>0 && c>0){\n        if((Math.pow(a,2)+Math.pow(b,2))==Math.pow(c,2)){\n\
    \            return true;\n        }\n        else if((Math.pow(a,2)+Math.pow(c,2))==Math.pow(b,2)){\n\
    \            return true;\n        }\n        else if((Math.pow(b,2)+Math.pow(c,2))==Math.pow(a,2)){\n\
    \            return true;\n        }\n        else{\n            return false;\n\
    \        }\n    }\n    else{\n        return false;\n    }\n}", "    return (Math.pow(a,\
    \ 2) + Math.pow(b, 2) == Math.pow(c, 2)) ? true : false;\n}\n", "    // YOUR CODE\
    \ HERE\n    return (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) ||\n  \
    \         (Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2)) ||\n           (Math.pow(b,\
    \ 2) + Math.pow(c, 2) == Math.pow(a, 2));\n}\n", "\treturn a*a + b*b == c*c;\n\
    }\n", "    if (a < 0 || b < 0 || c < 0) {\n        return false;\n    }\n    var\
    \ arr = [a, b, c];\n    arr.sort(function(x, y) { return x - y; });\n    var c2\
    \ = arr[0] * arr[0] + arr[1] * arr[1];\n    return c2 == arr[2] * arr[2];\n}\n",
  "    // Here your code\n    if ((a ** 2) + (b ** 2) == (c ** 2)) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    var result;\n\
    \    if(Math.sqrt(a * a + b * b) == c || Math.sqrt(b * b + c * c) == a || Math.sqrt(a\
    \ * a + c * c) == b){\n        result = true;\n    }else{\n        result = false;\n\
    \    }\n    return result;\n}\n", "    if(a>0 && b>0 && c>0){\n        if((a*a\
    \ + b*b) == c*c){\n            return true;\n        }else if((a*a + c*c) == b*b){\n\
    \            return true;\n        }else if((b*b + c*c) == a*a){\n           \
    \ return true;\n        }else{\n            return false;\n        }\n    }else{\n\
    \        return false;\n    }\n}", "    if (Math.pow(a, 2) + Math.pow(b, 2) ==\
    \ Math.pow(c, 2)){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n\n", "    if (a>0 && b>0 && c>0) {\n        var arr = [a, b, c];\n\
    \        arr.sort(function(a, b){return a-b});\n        if (Math.pow(arr[0], 2)\
    \ + Math.pow(arr[1], 2) == Math.pow(arr[2], 2)){\n            return true;\n \
    \       }\n    }\n    return false;\n}\n", "    var triangle=[a,b,c].sort(function(x,y){return\
    \ x-y;});\n    return (triangle[0]*triangle[0]+triangle[1]*triangle[1]==triangle[2]*triangle[2]);\n\
    }\n", "    return (a*a + b*b == c*c) || (a*a + c*c == b*b) || (b*b + c*c == a*a);\n\
    }\n", "    var x = Math.pow(a, 2);\n    var y = Math.pow(b, 2);\n    var z = Math.pow(c,\
    \ 2);\n    if ((x + y) == z || (x + z) == y || (y + z) == x){\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}\n", "  if(a * a +\
    \ b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a){\n    return\
    \ true;\n  }\n  return false;\n}", "  if(isNaN(a) || isNaN(b) || isNaN(c)){\n\
    \    return false;\n  }\n  if(a === b || b === c || a === c){\n    return false;\n\
    \  }\n  if(Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2)){\n    return true;\n\
    \  }\n  if(Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2)){\n    return true;\n\
    \  }\n  if(Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2)){\n    return true;\n\
    \  }\n  return false;\n}\n", "    // Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))\
    \ == c\n    return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) == c\n}\nright_angle_triangle(3,\
    \ 4, 5)\n", "    if ((a**2 + b**2) == c**2)\n    {\n        return true;\n   \
    \ }\n    else{\n        return false;\n    }\n}\n", "    if (c**2 == a**2 + b**2)\
    \ {\n      return true;\n    } else {\n      return false;\n    }\n}\n", "   \
    \ return (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2))\n}", "\tif (Math.pow(a,\
    \ 2) + Math.pow(b, 2) == Math.pow(c, 2)){\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}", "\t// ... your code here ...\n\tvar a2 = a*a;\n\tvar b2\
    \ = b*b;\n\tvar c2 = c*c;\n\tif(a2+b2==c2 || b2+c2==a2 || c2+a2==b2){\n\t\treturn\
    \ true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}", "\tif(a < b + c && b < a +\
    \ c && c < a + b){\n\t\tvar array = [a, b, c].sort(function(a, b){return a - b});\n\
    \t\tconsole.log(array);\n\t\treturn array[0] ** 2 + array[1] ** 2 === array[2]\
    \ ** 2\n\t} else {\n\t\treturn false;\n\t}\n}", "    //condition of a right angle\
    \ triangle\n    // c2 = a2 + b2\n    if(Math.pow(c, 2) == Math.pow(a, 2) + Math.pow(b,\
    \ 2)){\n        return true;\n    }\n    return false;\n}", "    if ((Math.pow(a,\
    \ 2) + Math.pow(b, 2)) == Math.pow(c, 2)){\n        return true;\n    }\n    else\
    \ if ((Math.pow(b, 2) + Math.pow(c, 2)) == Math.pow(a, 2)){\n        return true;\n\
    \    }\n    else if ((Math.pow(a, 2) + Math.pow(c, 2)) == Math.pow(b, 2)){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \ return (a*a+b*b==c*c || a*a+c*c==b*b || b*b+c*c==a*a)\n}", "\tvar right = 90;\n\
    \tif(a >= b && a >= c){\n\t\treturn Math.round(Math.acos((b * b + c * c - a *\
    \ a) / (2 * b * c)) * (180 / Math.PI)) === right;\n\t}\n\telse if(b >= a && b\
    \ >= c){\n\t\treturn Math.round(Math.acos((a * a + c * c - b * b) / (2 * a * c))\
    \ * (180 / Math.PI)) === right;\n\t}\n\telse{\n\t\treturn Math.round(Math.acos((a\
    \ * a + b * b - c * c) / (2 * a * b)) * (180 / Math.PI)) === right;\n\t}\n}\n",
  "    // var a_squared = Math.pow(a, 2);\n    // var b_squared = Math.pow(b, 2);\n\
    \    // var c_squared = Math.pow(c, 2);\n    // if (a_squared + b_squared == c_squared\
    \ || a_squared + c_squared == b_squared || b_squared + c_squared == a_squared){\n\
    \    //     return true;\n    // } else {\n    //     return false;\n    // }\n\
    \    var sides = [a, b, c].sort();\n    if (Math.pow(sides[0], 2) + Math.pow(sides[1],\
    \ 2) == Math.pow(sides[2], 2)){\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "    // Write your code here.\n}\n\n", "  let arr = [a,\
    \ b, c].sort((a, b) => b - a);\n  return Math.pow(arr[0], 2) === Math.pow(arr[1],\
    \ 2) + Math.pow(arr[2], 2);\n}\n", "    return (a*a + b*b == c*c);\n}\n", "  \
    \  const rightAngle = 90;\n    // let sumOfSides = a + b + c;\n    let sumOfSides\
    \ = 0;\n    for (let i = 0; i < arguments.length; i++){\n        sumOfSides +=\
    \ arguments[i];\n    }\n    // calculate the greatest angle\n    let greatestAngle\
    \ = Math.max(a, b, c);\n    let otherSides = sumOfSides - greatestAngle;\n   \
    \ // return the value\n    if (rightAngle === Math.round(Math.acos(otherSides\
    \ / greatestAngle) * 180 / Math.PI)){\n        return true;\n    } else {\n  \
    \      return false;\n    }\n}", "    return true;\n}\n", "\tvar x = a*a;\n\t\
    var y = b*b;\n\tvar z = c*c;\n\tvar sorted = [x, y, z].sort(function(a, b){return\
    \ a-b});\n\tif (Math.sqrt(sorted[0]) + Math.sqrt(sorted[1]) == Math.sqrt(sorted[2])){\n\
    \t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}", "\tvar temp = (a +\
    \ b + c)/2;\n\tvar area = Math.sqrt(temp*(temp-a)*(temp-b)*(temp-c));\n\tif(area\
    \ == 0){\n\t\treturn false;\n\t}else{\n\t\tif((a*a + b*b == c*c) || (a*a + c*c\
    \ == b*b) || (b*b + c*c == a*a)){\n\t\t\treturn true;\n\t\t}else{\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n}\n", "  let tri = [a, b, c];\n  tri.sort(function(a, b){return\
    \ a-b});\n  return (tri[0] ** 2 + tri[1] ** 2 === tri[2] ** 2);\n}\n", "\tvar\
    \ result = Math.pow(a, 2) + Math.pow(b, 2);\n\tvar result = Math.pow(c, 2);\n\t\
    if (result ==  result2){\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}", "    // your code here\n    return a*a+b*b==c*c || b*b+c*c==a*a || a*a+c*c==b*b\n\
    }\n", "    return (c*c === a*a + b*b) || (a*a === b*b + c*c) || (b*b === a*a +\
    \ c*c);\n}\n", "    if (isNaN(a) || isNaN(b) || isNaN(c)) {\n        return \"\
    ERROR: Only Enter Numbers\";\n    } else if ((Math.pow(a, 2) + Math.pow(b, 2))\
    \ === Math.pow(c, 2)) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}", "\treturn (a*a)+(b*b)===(c*c);\n}", "\tif(a * a + b * b == c * c){\n\
    \t\treturn true;\n\t}\n\telse if(a * a + c * c == b * b){\n\t\treturn true;\n\t\
    }\n\telse if(b * b + c * c == a * a){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn\
    \ false;\n\t}\n}\n", "\tvar leg = {};\n\tvar hypotenuse = {};\n\tvar sides = [a,\
    \ b, c];\n\tsides.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\tleg.small\
    \ = sides[0];\n\tleg.large = sides[1];\n\thypotenuse = sides[2];\n\tif (Math.pow(leg.small,\
    \ 2) + Math.pow(leg.large, 2) === Math.pow(hypotenuse, 2)){\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n", "\tvar sides = [a, b, c];\n\tsides.sort();\n\n\treturn\
    \ (sides[0]**2 + sides[1]**2 == sides[2]**2);\n}", "    var ab = Math.pow(a, 2)\
    \ + Math.pow(b, 2);\n    var c = Math.pow(c, 2);\n    if (c === ab){\n       \
    \ return true;\n    }\n    else{\n        return false;\n    }\n}", "    // your\
    \ code goes here\n    \n}\n", "    return a * a + b * b == c * c;\n}\n", "   \
    \ return (a + b > c) && (a + c > b) && (b + c > a) && (Math.pow(a, 2) + Math.pow(b,\
    \ 2) == Math.pow(c, 2))\n}", "\tif(Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c,\
    \ 2)){\n\t\treturn true;\n\t}\n\telse if(Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b,\
    \ 2)){\n\t\treturn true;\n\t}\n\telse if(Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a,\
    \ 2)){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "\tif (a*a\
    \ + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a)\n\t\treturn true;\n\t\
    else\n\t\treturn false;\n}\nright_angle_triangle(3, 4, 5);\nright_angle_triangle(1,\
    \ 2, 3);\n", "    // Put your code here\n    return true;\n}\n", "    var isTrue\
    \ = false;\n    if(Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)){\n     \
    \   isTrue = true;\n    }\n    return isTrue;\n}", "    var c2 = Math.pow(c, 2);\n\
    \    var b2 = Math.pow(b, 2);\n    var a2 = Math.pow(a, 2);\n    if(c2 == (a2\
    \ + b2)){\n        return true;\n    }else{\n        return false;\n    }\n}\n",
  "  // Note to self:\n  // a^2 + b^2 = c^2\n  // y > x && y > z\n  // Math.sqrt()\n\
    \  // Math.pow()\n  let my_array = [a, b, c];\n  //console.log(my_array);\n  let\
    \ first_value = 0;\n  let second_value = 0;\n  let third_value = 0;\n  for (var\
    \ i = 0; i < my_array.length; i++) {\n    if (my_array[i] > first_value) {\n \
    \     third_value = second_value;\n      second_value = first_value;\n      first_value\
    \ = my_array[i];\n    }\n    else if (my_array[i] > second_value) {\n      third_value\
    \ = second_value;\n      second_value = my_array[i];\n    }\n    else if (my_array[i]\
    \ > third_value) {\n      third_value = my_array[i];\n    }\n  }\n  console.log(first_value,\
    \ second_value, third_value);\n  let result = Math.pow(third_value, 2) + Math.pow(second_value,\
    \ 2);\n  if (result == Math.pow(first_value, 2)) {\n    return true;\n  }\n  else\
    \ {\n    return false;\n  }\n}\n", "  // your code here\n  \n}\n", "  if (a *\
    \ a + b * b == c * c || a * a + c * c == b * b || b * b + c * c == a * a) {\n\
    \    return true;\n  }\n  return false;\n}\n", "    let array = [a, b, c].sort();\n\
    \    let a2 = Math.pow(array[0], 2);\n    let b2 = Math.pow(array[1], 2);\n  \
    \  let c2 = Math.pow(array[2], 2);\n    if(a2 + b2 == c2){\n        return true;\n\
    \    }\n    return false;\n}\n", "    // if (a > b && a > c) {\n    //     return\
    \ (a ** 2) === (b ** 2) + (c ** 2);\n    // }else if (b > a && b > c) {\n    //\
    \     return (b ** 2) === (a ** 2) + (c ** 2);\n    // }else if (c > a && c >\
    \ b) {\n    //     return (c ** 2) === (a ** 2) + (b ** 2);\n    // }\n\n    //\
    \ return false;\n\n    const largestSide = Math.max(a, b, c);\n    if (largestSide\
    \ === a) {\n        return (a ** 2) === (b ** 2) + (c ** 2);\n    }else if (largestSide\
    \ === b) {\n        return (b ** 2) === (a ** 2) + (c ** 2);\n    }else if (largestSide\
    \ === c) {\n        return (c ** 2) === (a ** 2) + (b ** 2);\n    }\n}\n", " \
    \   // triangle_inequality_theorem\n    if (a + b > c && a + c > b && b + c >\
    \ a) {\n        let lengths = [a, b, c];\n        lengths.sort(function(a, b){return\
    \ a-b});\n        // Pythagorean theorem\n        if (Math.pow(lengths[0], 2)\
    \ + Math.pow(lengths[1], 2) === Math.pow(lengths[2], 2)) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\n", "    let [big, medium, small]\
    \ = [a, b, c].sort((a, b) => a - b);\n    return big ** 2 === medium ** 2 + small\
    \ ** 2;\n}\n", "    return (Math.sqrt(a * a + b * b) == c) ? true : false;\n}\n",
  "    var result = false;\n    var sides = [a, b, c];\n    sides.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    if (sides[0] ** 2 + sides[1] ** 2 ===\
    \ sides[2] ** 2){\n        result = true;\n    }\n    return result;\n}\n", "\t\
    if(a > b){\n\t\t// a is hypotenuse\n\t\tif(Math.pow(a, 2) == Math.pow(b, 2) +\
    \ Math.pow(c, 2)){\n\t\t\treturn true;\n\t\t}\n\t}else if(b > a){\n\t\t// b is\
    \ hypotenuse\n\t\tif(Math.pow(b, 2) == Math.pow(a, 2) + Math.pow(c, 2)){\n\t\t\
    \treturn true;\n\t\t}\n\t}else if(c > a){\n\t\t// c is hypotenuse\n\t\tif(Math.pow(c,\
    \ 2) == Math.pow(a, 2) + Math.pow(b, 2)){\n\t\t\treturn true;\n\t\t}\n\t}\n\t\
    return false;\n}\nright_angle_triangle(3, 4, 5);\nright_angle_triangle(1, 2, 3);\n",
  "    const sides = [a, b, c];\n    const hypotenuse = Math.max(...sides);\n    const\
    \ legs = sides.filter(side => side !== hypotenuse);\n    const sumOfLegsSquared\
    \ = legs.reduce((acc, side) => acc + Math.pow(side, 2), 0);\n    return Math.pow(hypotenuse,\
    \ 2) === sumOfLegsSquared;\n}\n", "    \n}", "    // Write your code here\n  \
    \  if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)){\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "  // check if a + b = c\n\
    \  // check if a + c = b\n  // check if b + c = a\n  // if any of the above are\
    \ true, return true\n}\n", "  let max = Math.max(a, b, c);\n  let min = Math.min(a,\
    \ b, c);\n  let medium = (a + b + c) - max - min;\n  if ((min ** 2) + (medium\
    \ ** 2) === (max ** 2)){\n    return true;\n  }\n  return false;\n}\n", "    if(a\
    \ ** 2 + b ** 2 == c ** 2 || a ** 2 + c ** 2 == b ** 2 || c ** 2 + b ** 2 == a\
    \ ** 2){\n        return true;\n    }else{\n        return false;\n    }\n}\n",
  "\treturn (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) || (Math.pow(a, 2)\
    \ + Math.pow(c, 2) == Math.pow(b, 2)) || (Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a,\
    \ 2));\n}", "    //Write code here\n    \n}\n", "    if(Math.pow(a, 2) + Math.pow(b,\
    \ 2) == Math.pow(c, 2)){\n        return true;\n    }\n    return false;\n}\n",
  "\tvar max = Math.max(a, b, c);\n\tvar right_angle = false;\n\tif (max == a){\n\t\
    \tif (a*a == b*b + c*c){\n\t\t\tright_angle = true;\n\t\t}\n\t}\n\telse if (max\
    \ == b){\n\t\tif (b*b == a*a + c*c){\n\t\t\tright_angle = true;\n\t\t}\n\t}\n\t\
    else if (max == c){\n\t\tif (c*c == a*a + b*b){\n\t\t\tright_angle = true;\n\t\
    \t}\n\t}\n\treturn right_angle;\n}\n", "  // Write code here\n}\n", "    if(Math.pow(a,\
    \ 2) + Math.pow(b, 2) == Math.pow(c, 2)){\n        return true;\n    }\n    else\
    \ if(Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2)){\n        return true;\n\
    \    }\n    else if(Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2)){\n    \
    \    return true;\n    }\n    else{\n        return false;\n    }\n}", "    if\
    \ (a**2 + b**2 == c**2){\n        return true;\n    }\n    else{\n        return\
    \ false;\n    }\n}\n", "    let result = false;\n    if(a > 0 && b > 0 && c >\
    \ 0){\n        if( Math.pow(a, 2) == Math.pow(b, 2) + Math.pow(c, 2) ){\n    \
    \        result = true;\n        }else if( Math.pow(b, 2) == Math.pow(a, 2) +\
    \ Math.pow(c, 2) ){\n            result = true;\n        }else if( Math.pow(c,\
    \ 2) == Math.pow(a, 2) + Math.pow(b, 2) ){\n            result = true;\n     \
    \   }\n    }\n    return result;\n}\n", "    // put your code here\n}\n", "  \
    \  if(a<=0 || b<=0 || c<=0){\n        return \"All three sides must be greater\
    \ than 0.\";\n    }\n    else if(a==b && b==c){\n        return \"This is an equilateral\
    \ triangle.\";\n    }\n    else if(Math.pow(a,2) + Math.pow(b,2) == Math.pow(c,2)){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   return a*a + b*b == c*c;\n}", "\tif (a < b + c && b < a + c && c < a + b)\
    \ {\n\t\tif (a * a + b * b == c * c || a * a + c * c == b * b || b * b + c * c\
    \ == a * a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "    //create\
    \ a list of the length of sides,\n    //and a list of the squares of the sides\n\
    \    var sides = [a, b, c];\n    var squares = [a*a, b*b, c*c];\n    //sort squares\
    \ in decreasing order\n    var squares_sorted = squares.sort(function(a, b){return\
    \ b-a});\n    //check that the sum of the squares of the smaller two sides\n \
    \   //equals the square of the largest side\n    return (squares_sorted[0] ===\
    \ squares_sorted[1] + squares_sorted[2]);\n}\n", "  // Your code here\n  let hypotenuse\
    \ = Math.max(a, b, c);\n  let sum = Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c,\
    \ 2) - Math.pow(hypotenuse, 2);\n  return (hypotenuse * hypotenuse == sum);\n}",
  "    return a*a+b*b==c*c\n}", "    var hypotenuse;\n    var cathetus1;\n    var\
    \ cathetus2;\n    if (a > b && a > c){\n        hypotenuse = a;\n        cathetus1\
    \ = b;\n        cathetus2 = c;\n    }\n    else if (b > a && b > c){\n       \
    \ hypotenuse = b;\n        cathetus1 = a;\n        cathetus2 = c;\n    }\n   \
    \ else {\n        hypotenuse = c;\n        cathetus1 = a;\n        cathetus2 =\
    \ b;\n    }\n    return Math.pow(hypotenuse, 2) == Math.pow(cathetus1, 2) + Math.pow(cathetus2,\
    \ 2);\n}\n", "    if (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) {\n \
    \       return true;\n    }\n    else {\n        return false;\n    }\n}\n", " \
    \   var maxSide = Math.max(a, b, c);\n    var sumOfOtherTwo = 0;\n    if(maxSide\
    \ === a){\n        sumOfOtherTwo = (b * b) + (c * c);\n    }\n    else if(maxSide\
    \ === b){\n        sumOfOtherTwo = (a * a) + (c * c);\n    }\n    else if(maxSide\
    \ === c){\n        sumOfOtherTwo = (a * a) + (b * b);\n    }\n    var maxSideSquare\
    \ = maxSide * maxSide;\n    if(maxSideSquare === sumOfOtherTwo){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n", "    return Math.pow(a,\
    \ 2) + Math.pow(b, 2) === Math.pow(c, 2)\n}\n", "    let [x, y, z] = [a, b, c].sort((a,\
    \ b) => a - b);\n    return (x ** 2) + (y ** 2) === (z ** 2);\n}\n", "    return\
    \ a*a + b*b == c*c;\n}", "\tvar max_num = Math.max(a, b, c);\n\tvar sum = a +\
    \ b + c;\n\tvar min_side_sum = sum - max_num;\n\tif(max_num * max_num == min_side_sum\
    \ * min_side_sum){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n",
  "\n}\n", "\treturn (Math.sqrt(a*a + b*b) === c || Math.sqrt(a*a + c*c) === b ||\
    \ Math.sqrt(b*b + c*c) === a)\n}\n", "    var b = Math.pow(b, 2);\n    var a =\
    \ Math.pow(a, 2);\n    var c = Math.pow(c, 2);\n    if (b + a == c){\n       \
    \ return true;\n    }\n    else if (b + c == a){\n        return true;\n    }\n\
    \    else if (a + c == b){\n        return true;\n    }\n    else{\n        return\
    \ false;\n    }\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
