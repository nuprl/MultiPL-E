name: HumanEval_157_right_angle_triangle
language: js
prompt: "//Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle(a, b, c){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = right_angle_triangle;\n  assert.deepEqual(candidate(3, 4, 5),true);\n  assert.deepEqual(candidate(1,\
  \ 2, 3),false);\n  assert.deepEqual(candidate(10, 6, 8),true);\n  assert.deepEqual(candidate(2,\
  \ 2, 2),false);\n  assert.deepEqual(candidate(7, 24, 25),true);\n  assert.deepEqual(candidate(10,\
  \ 5, 7),false);\n  assert.deepEqual(candidate(5, 12, 13),true);\n  assert.deepEqual(candidate(15,\
  \ 8, 17),true);\n  assert.deepEqual(candidate(48, 55, 73),true);\n  assert.deepEqual(candidate(1,\
  \ 1, 1),false);\n  assert.deepEqual(candidate(2, 2, 10),false);\n}\n\ntest();"
completions: ["    if(a**2 + b**2 == c**2 || b**2 + c**2 == a**2 || a**2 + c**2 ==\
    \ b**2) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\n", "    // return a*a + b*b == c*c\n    if (Math.max(a,b,c) == c) {\n     \
    \   return (c*c == a*a + b*b)\n    } else if (Math.max(a,b,c) == b) {\n      \
    \  return (b*b == a*a + c*c)\n    } else {\n        return (a*a == b*b + c*c)\n\
    \    }\n}", "    var ab = a*a + b*b;\n    var bc = b*b + c*c;\n    var ac = a*a\
    \ + c*c;\n    // Make sure to add a comma between each parameter in console.log()\n\
    \    console.log(ab, bc, ac);\n    if (ab == c*c || bc == a*a || ac == b*b){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "   \
    \ if(!isNaN(a) && !isNaN(b) && !isNaN(c)){\n        a = parseInt(a);\n       \
    \ b = parseInt(b);\n        c = parseInt(c);\n        if(a*a == b*b + c*c || b*b\
    \ == a*a + c*c || c*c == a*a + b*b){\n            return true;\n        }\n  \
    \  }\n    return false;\n}", "  if(a*a == b*b + c*c || b*b == a*a + c*c || c*c\
    \ == a*a + b*b){\n    return true;\n  }else{\n    return false;\n  }\n}\n\n",
  "    if(a < b + c && b < a + c && c < a + b){\n        if(Math.pow(a, 2) + Math.pow(b,\
    \ 2) == Math.pow(c, 2) || Math.pow(b, 2) + Math.pow(c, 2) == Math.pow(a, 2) ||\
    \ Math.pow(c, 2) + Math.pow(a, 2) == Math.pow(b, 2)){\n            return true;\n\
    \        }\n    }\n    return false;\n}\n", "    // Use the Pythagorean theorem\n\
    \    return a*a + b*b == c*c || a*a + c*c == b*b || b*b + c*c == a*a;\n}\n", " \
    \   // write code here\n    return false;\n}\n", "    let max = Math.max(a, b,\
    \ c);\n    let min = Math.min(a, b, c);\n    let mid = a + b + c - max - min;\n\
    \    return (max ** 2 == mid ** 2 + min ** 2);\n}\n", "    let hypotenuse = Math.max(a,\
    \ b, c);\n    let lengths = [a, b, c].filter(num => num !== hypotenuse);\n   \
    \ let square_sum = lengths.reduce((acc, num) => acc + num ** 2, 0);\n    return\
    \ square_sum === hypotenuse ** 2\n}\n", "  let arr = [];\n  arr.push(a);\n  arr.push(b);\n\
    \  arr.push(c);\n  arr.sort(function(a, b){return a-b});\n  let d1 = arr[0];\n\
    \  let d2 = arr[1];\n  let d3 = arr[2];\n  if (Math.pow(d1, 2) + Math.pow(d2,\
    \ 2) === Math.pow(d3, 2)){\n    return true;\n  } else {\n    return false;\n\
    \  }\n}", "  return (Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)) ||\n \
    \         (Math.pow(a, 2) + Math.pow(c, 2) == Math.pow(b, 2)) ||\n          (Math.pow(b,\
    \ 2) + Math.pow(c, 2) == Math.pow(a, 2));\n}\n", "    if(a == 0 || b == 0 || c\
    \ == 0) return false;\n\n    let max = Math.max(a, b, c);\n    let min1 = Math.min(a,\
    \ b, c);\n    let min2 = a + b + c - (max + min1);\n\n    if(max * max == min1\
    \ * min1 + min2 * min2) return true;\n    return false;\n}\n", "  // return true\
    \ if a right angle triangle, false otherwise\n  if (a ** 2 + b ** 2 === c ** 2)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    // Your\
    \ code goes here!\n    if( a*a + b*b == c*c ){\n        return true;\n    }\n\
    \    else if( a*a + c*c == b*b ){\n        return true;\n    }\n    else if( b*b\
    \ + c*c == a*a ){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n\n", "  var hyp = Math.max(a, b, c);\n  var total = a + b + c;\n  var\
    \ sum = Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2);\n  var diff = total\
    \ - hyp;\n  if (Math.pow(hyp, 2) == sum - Math.pow(diff, 2)){\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "    var a_sq = Math.pow(a, 2);\n \
    \   var b_sq = Math.pow(b, 2);\n    var c_sq = Math.pow(c, 2);\n    var triangle\
    \ = [a_sq, b_sq, c_sq];\n    triangle.sort();\n    if(triangle[0] + triangle[1]\
    \ == triangle[2]){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n", "    if (a * a + b * b == c * c || a * a + c * c == b * b || b *\
    \ b + c * c == a * a)\n        return true;\n    else\n        return false;\n\
    }\n", "    return ((Math.pow(a, 2) + Math.pow(b, 2)) === Math.pow(c, 2));\n}",
  "\t//Write your code here\n\tif(a > 0 && b > 0 && c > 0){\n\t\tvar d = c*c;\n\t\t\
    var e = a*a;\n\t\tvar f = b*b;\n\t\tif(d == e + f){\n\t\t\treturn true;\n\t\t\
    }\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n\telse{\n\t\treturn false;\n\t\
    }\n}\n\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
