name: HumanEval_58_common
language: js
prompt: "//Return sorted unique common elements for two arrays.\n// >>> common([1,\
  \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n// [1, 5, 653]\n// >>> common([5,\
  \ 3, 2, 8], [3, 2])\n// [2, 3]\nfunction common(l1, l2){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = common;\n  assert.deepEqual(candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5,\
  \ 9, 653, 121]),[1, 5, 653]);\n  assert.deepEqual(candidate([5, 3, 2, 8], [3, 2]),[2,\
  \ 3]);\n  assert.deepEqual(candidate([4, 3, 2, 8], [3, 2, 4]),[2, 3, 4]);\n  assert.deepEqual(candidate([4,\
  \ 3, 2, 8], []),[]);\n}\n\ntest();"
completions: ["    var result = []\n    for (var i = 0; i < l1.length; i++){\n   \
    \     for (var j = 0; j < l2.length; j++){\n            if (l1[i] == l2[j]){\n\
    \                result.push(l1[i])\n            }\n        }\n    }\n    return\
    \ result.sort(function(a, b){return a-b});\n}\n", "    var result = [];\n    for(var\
    \ i=0; i<l1.length; i++){\n        for(var j=0; j<l2.length; j++){\n         \
    \   if(l1[i]==l2[j]){\n                if(result.indexOf(l1[i])==-1){\n      \
    \              result.push(l1[i]);\n                }\n            }\n       \
    \ }\n    }\n    return result;\n}\n", "    return [...new Set(l1.filter(n=>l2.includes(n)))].sort();\n\
    }\n", "    let newArray = [];\n    for(let i=0; i<l1.length; i++){\n        for(let\
    \ j=0; j<l2.length; j++){\n            if(l1[i] === l2[j]){\n                newArray.push(l1[i]);\n\
    \            }\n        }\n    }\n    return newArray.sort();\n}\n", "    //var\
    \ result = l1.filter(function(val){ return l2.indexOf(val) > -1; });\n    //return\
    \ result.sort().filter(function(item, pos, ary) { return !pos || item != ary[pos\
    \ - 1]; });\n    return l1.filter(function(val){ return l2.indexOf(val) > -1;\
    \ }).sort().filter(function(item, pos, ary) { return !pos || item != ary[pos -\
    \ 1]; });\n}\n", "    var common_arr = []\n    var st = Math.min(l1.length, l2.length)\n\
    \    var nd = Math.max(l1.length, l2.length)\n    for(var i = 0; i < st; i++){\n\
    \        for(var j = 0; j < nd; j++){\n            if(l1[i] === l2[j]){\n    \
    \            common_arr.push(l1[i])\n            }\n        }\n    }\n    return\
    \ common_arr.sort()\n}\n", "    let commonElements = [];\n    for(let i = 0; i\
    \ < l1.length; i++){\n        for(let j = 0; j < l2.length; j++){\n          \
    \  if(l1[i] === l2[j]){\n                commonElements.push(l1[i]);\n       \
    \     }\n        }\n    }\n    return commonElements.sort((a, b) => {return a\
    \ - b;});\n}\n", "    // let newArr = []\n    // let set = new Set(l1.concat(l2))\n\
    \    // let map = new Map()\n    // for(let item of set){\n    //     map.set(item,\
    \ 0)\n    // }\n    // for(let item of l1){\n    //     if(map.has(item)){\n \
    \   //         map.set(item, map.get(item) + 1)\n    //     }\n    // }\n    //\
    \ for(let item of l2){\n    //     if(map.has(item)){\n    //         map.set(item,\
    \ map.get(item) + 1)\n    //     }\n    // }\n    // for(let item of set){\n \
    \   //     if(map.get(item) == 2){\n    //         newArr.push(item)\n    // \
    \    }\n    // }\n    // return newArr\n    // let arr1 = l1.filter(item => l2.includes(item))\n\
    \    // let arr2 = l2.filter(item => l1.includes(item))\n    // return [...new\
    \ Set(arr1.concat(arr2))]\n    return [...new Set(l1.filter(item => l2.includes(item)))];\n\
    }", "    var commons = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var\
    \ j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n             \
    \   if(commons.indexOf(l1[i]) == -1){\n                    commons.push(l1[i]);\n\
    \                }\n            }\n        }\n    }\n    return commons;\n}\n",
  "    let result = [];\n    l1.forEach(item => l2.includes(item) ? result.push(item)\
    \ : null);\n    return Array.from(new Set(result)).sort((a, b) => a - b);\n}\n",
  "  return [...new Set(l1.filter(x => l2.includes(x)))].sort();\n}", "  const uniq1\
    \ = Array.from(new Set(l1));\n  const uniq2 = Array.from(new Set(l2));\n  let\
    \ results = [];\n  uniq1.forEach(function(item){\n    uniq2.forEach(function(item2){\n\
    \      if(item == item2){\n        results.push(item);\n      }\n    });\n  });\n\
    \  return results.sort();\n}\n", "    let hm = new HashMap();\n    let set1 =\
    \ new Set();\n    let set2 = new Set();\n    for(let el of l1){\n        if(hm.has(el)){\n\
    \            set1.add(el);\n        }\n        else{\n            hm.set(el, true);\n\
    \        }\n    }\n    for(let el of l2){\n        if(hm.has(el)){\n         \
    \   set2.add(el);\n        }\n    }\n    let intersection = new Set([...set1].filter(x\
    \ => set2.has(x)));\n    return [...intersection];\n}", "    var list = l1.concat(l2);\n\
    \    return list.filter(function(item, pos) {\n        return list.indexOf(item)\
    \ == pos;\n    }).sort(function(a, b){return a-b});\n}\n", "    var result=[];\n\
    \    for(var i=0; i<l1.length; i++){\n        for(var j=0; j<l2.length; j++){\n\
    \            if(l1[i]===l2[j]){\n                result.push(l1[i]);\n       \
    \     }\n        }\n    }\n    return unique(result);\n}\n", "  const l1Sorted\
    \ = l1.sort((a, b) => a - b);\n  const l2Sorted = l2.sort((a, b) => a - b);\n\
    \  const l1Set = new Set(l1Sorted);\n  const l2Set = new Set(l2Sorted);\n  const\
    \ l1SetAndL2Set = new Set([...l1Set].filter(val => l2Set.has(val)));\n  return\
    \ [...l1SetAndL2Set];\n}\n\nmodule.exports = {\n  common\n};", "    let arr1 =\
    \ l1.sort(function(a, b){return a-b});\n    let arr2 = l2.sort(function(a, b){return\
    \ a-b});\n    let unique = [];\n    let i = 0;\n    let j = 0;\n    while(i <\
    \ arr1.length && j < arr2.length){\n        if(arr1[i] === arr2[j]){\n       \
    \     unique.push(arr1[i]);\n            i++;\n            j++;\n        }\n \
    \       else if(arr1[i] < arr2[j]){\n            i++;\n        }\n        else{\n\
    \            j++;\n        }\n    }\n    return unique;\n}\n", "  var intersect\
    \ = l1.filter(function(n) {\n   return l2.indexOf(n) !== -1;\n});\n  var unique\
    \ = [];\n  for (var i=0; i<intersect.length; i++){\n    if (unique.indexOf(intersect[i])\
    \ === -1){\n      unique.push(intersect[i]);\n    }\n  }\n  return unique.sort();\n\
    }\n", "    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n    let result\
    \ = new Set([...set1].filter(x => set2.has(x)));\n    return Array.from(result).sort((a,\
    \ b) => a - b);\n}\n", "\treturn l1.filter(x => l2.includes(x));\n}\n\n", "  \
    \  let commonElements = [];\n    l1.forEach(elem1 => {\n        l2.forEach(elem2\
    \ => {\n            if(elem1 === elem2 && !commonElements.includes(elem1)){\n\
    \                commonElements.push(elem1);\n            }\n        });\n   \
    \ });\n    return commonElements.sort();\n}\n", "    return _.sortBy(_.unique(_.intersection(l1,\
    \ l2)));\n}\n", "    l2.sort();\n    l1.sort();\n    var l3 = [];\n    var i=0;\n\
    \    var j=0;\n    while(i<l1.length && j<l2.length){\n        if(l1[i] == l2[j]){\n\
    \            l3.push(l1[i]);\n            i++;\n            j++;\n        }\n\
    \        else if(l1[i] < l2[j]){\n            i++;\n        }\n        else{\n\
    \            j++;\n        }\n    }\n    return l3;\n}", "    let firstList =\
    \ new Set(l1);\n    let secondList = new Set(l2);\n    let common = [];\n    for\
    \ (let n of firstList){\n        if (secondList.has(n)){\n            common.push(n);\n\
    \        }\n    }\n    return common.sort();\n}\n", "  return removeDuplicates(mergeSort(l1).filter(e\
    \ => l2.includes(e)));\n}\n\nlet list1 = [1, 4, 3, 34, 653, 2, 5];\nlet list2\
    \ = [5, 7, 1, 5, 9, 653, 121];", "    let arr = [];\n    for(let i = 0; i < l1.length;\
    \ i++){\n        for(let j = 0; j < l2.length; j++){\n            if(l1[i] ===\
    \ l2[j]){\n                arr.push(l1[i]);\n            }\n        }\n    }\n\
    \    return arr.sort((a, b) => a - b);\n}\n", "    return l1.filter(value => l2.includes(value)).sort((a,\
    \ b) => a - b);\n}\n", "    return Array.from(new Set(l1.filter(x => l2.includes(x)).sort((a,\
    \ b) => a - b)));\n}\n", "  l1.sort();\n  l2.sort();\n  let i = 0;\n  let j =\
    \ 0;\n  let result = [];\n  while(i < l1.length && j < l2.length){\n    if(l1[i]\
    \ === l2[j]){\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if(l1[i]\
    \ < l2[j]){\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n\
    }\n", "\tvar ret = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tfor(var j =\
    \ 0; j < l2.length; j++){\n\t\t\tif(l1[i] == l2[j]){\n\t\t\t\tif(ret.indexOf(l1[i])\
    \ == -1){\n\t\t\t\t\tret.push(l1[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ ret.sort();\n}\n", "\tvar uniquelist1 = unique(l1);\n\tvar uniquelist2 = unique(l2);\n\
    \tvar commonlist = [];\n\tfor (var i = 0; i < uniquelist1.length; i++) {\n\t\t\
    for (var j = 0; j < uniquelist2.length; j++) {\n\t\t\tif (uniquelist1[i] === uniquelist2[j])\
    \ {\n\t\t\t\tcommonlist.push(uniquelist1[i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn commonlist;\n\
    }", "    var l3 = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var\
    \ j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n             \
    \   l3.push(l1[i]);\n            }\n        }\n    }\n    var result = l3.sort();\n\
    \    var unique = [];\n    for(var i = 0; i < result.length; i++){\n        if(result[i]\
    \ != result[i+1]){\n            unique.push(result[i]);\n        }\n    }\n  \
    \  return unique;\n}\n", "    var l3 = [];\n    for(var i=0; i<l1.length; i++){\n\
    \        if(l2.indexOf(l1[i]) > -1){\n            l3.push(l1[i]);\n        }\n\
    \    }\n    return l3;\n}", "\treturn (l1.sort()).filter( function(l){\n\t\treturn\
    \ l2.indexOf(l) != -1\n\t})\n}\n", "  return [...new Set(l1.filter(e => l2.includes(e)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(function(n) {\n        return l2.indexOf(n)\
    \ !== -1;\n    });\n}\n\n", "    var o1 = {}, o2 = {}, result = [];\n    for(var\
    \ i = 0; i < l1.length; i++){\n        o1[l1[i]] = 1;\n    }\n    for(var i =\
    \ 0; i < l2.length; i++){\n        o2[l2[i]] = 1;\n    }\n    for(var i in o1){\n\
    \        if(o2[i]){\n            result.push(i);\n        }\n    }\n    return\
    \ result;\n}\n", "    var common = []\n    l1.forEach(function(x){\n        if\
    \ (l2.indexOf(x) > -1 && common.indexOf(x) == -1){\n            common.push(x)\n\
    \        }\n    })\n    return common\n}\n", "  return Array.from(new Set(l1.filter(el\
    \ => l2.includes(el))))\n}\n", "    return l1.filter(function(val) {\n       \
    \ return l2.indexOf(val) > -1;\n    }).filter(function(item, i, ar){ return ar.indexOf(item)\
    \ === i; }).sort();\n}", "\tlet uniq1 = l1.filter((elem, index, self) => self.indexOf(elem)\
    \ === index);\n\tlet uniq2 = l2.filter((elem, index, self) => self.indexOf(elem)\
    \ === index);\n\tlet s1 = uniq1.sort((a, b) => a-b);\n\tlet s2 = uniq2.sort((a,\
    \ b) => a-b);\n\tlet comm = [];\n\tfor(let i = 0; i < s1.length; i++){\n\t\tif(s2.includes(s1[i])){\n\
    \t\t\tcomm.push(s1[i]);\n\t\t}\n\t}\n\treturn comm;\n}\n", "    l1.sort();\n \
    \   l2.sort();\n    var l3 = [];\n    for(i = 0; i < l1.length; i++){\n      \
    \  for(j = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n        \
    \        l3.push(l1[i]);\n            }\n        }\n    }\n    return l3;\n}",
  "  let s1 = new Set(l1);\n  let s2 = new Set(l2);\n  let common = new Set([...s1].filter(x\
    \ => s2.has(x)));\n  return [...common].sort((a, b) => a - b);\n}\n\n\n", "  return\
    \ l1.filter(function(n) {\n    return l2.indexOf(n) !== -1;\n  }).sort(function(a,\
    \ b) {\n    return a - b;\n  }).filter(function(item, pos, ary) {\n    return\
    \ !pos || item != ary[pos - 1];\n  });\n}\n\nmodule.exports = common;", "  var\
    \ obj = {};\n  var list = [];\n  for(var i = 0; i < l1.length; i++){\n    obj[l1[i]]\
    \ = l1[i];\n  }\n  for(var j = 0; j < l2.length; j++){\n    if(obj[l2[j]] !==\
    \ undefined){\n      list.push(l2[j]);\n    }\n  }\n  return list;\n}\n", "  \
    \  return [...new Set(l1.filter(function(v) { return l2.indexOf(v) !== -1; }))].sort(function(a,\
    \ b){return a-b});\n}\n", "    // ADD CODE HERE\n}\n\n", "    let l = [];\n  \
    \  let unique = [];\n    for(let i = 0; i < l1.length; i++){\n        for(let\
    \ j = 0; j < l2.length; j++){\n            if(l1[i] === l2[j]){\n            \
    \    l.push(l1[i]);\n            }\n        }\n    }\n    for(let i = 0; i < l.length;\
    \ i++){\n        if(!unique.includes(l[i])){\n            unique.push(l[i]);\n\
    \        }\n    }\n    return unique.sort();\n}\n", "    var l = []\n    for(var\
    \ i = 0; i < l1.length; i++){\n        if(l2.indexOf(l1[i]) != -1 && l.indexOf(l1[i])\
    \ == -1){\n            l.push(l1[i])\n        }\n    }\n    return l.sort(function(a,\
    \ b){\n        return a - b\n    })\n}\n", "  return Array.from(new Set(l1.filter(function(element){\n\
    \    return l2.includes(element);\n  }))).sort(function(a, b){\n    return a-b;\n\
    \  });\n}\n", "  var result = [];\n  l1.forEach(function(item){\n    if(l2.indexOf(item)\
    \ > -1 && result.indexOf(item) == -1){\n      result.push(item);\n    }\n  });\n\
    \  return result.sort();\n}\n", "  //get duplicate elements\n  function getDuplicates(arr1,\
    \ arr2) {\n      return arr1.filter(function(item) {\n          return arr2.indexOf(item)\
    \ >= 0;\n      });\n  }\n  return getDuplicates(l1, l2).sort(function(a, b){return\
    \ a-b});\n}\n", "    return l1.filter(function(n) {\n        return l2.indexOf(n)\
    \ !== -1;\n    }).filter(function(item, pos, self) {\n        return self.indexOf(item)\
    \ == pos;\n    }).sort(function(a, b){return a-b});\n}\n", "  return l1.filter(v=>l2.includes(v)).sort().filter((v,i,a)=>v!=a[i-1]);\n\
    }\n", "  var f = function(x,y){ return x - y;};\n  var a1 = l1.sort(f);\n  var\
    \ a2 = l2.sort(f);\n  var i1 = 0;\n  var i2 = 0;\n  var uni = [];\n  while(i1\
    \ < a1.length && i2 < a2.length){\n    if(a1[i1] < a2[i2]){\n      i1++;\n   \
    \ }\n    else if(a1[i1] > a2[i2]){\n      i2++;\n    }\n    else{\n      uni.push(a1[i1]);\n\
    \      i1++;\n      i2++;\n    }\n  }\n  return uni;\n}\n", "    return unique(l1.filter(\
    \ e => l2.includes(e)));\n}\n", "  var list = [];\n  for(var i = 0; i < l1.length;\
    \ i++){\n    if(l2.indexOf(l1[i]) > -1 && list.indexOf(l1[i]) == -1){\n      list.push(l1[i]);\n\
    \    }\n  }\n  return list;\n}\n", "    var L1 = l1.sort();\n    var L2 = l2.sort();\n\
    \    var common = [];\n    var j = 0;\n    var i = 0;\n    while(i < L1.length){\n\
    \        if(L1[i] == L2[j]){\n            common.push(L1[i]);\n            j +=\
    \ 1;\n            i += 1;\n        }\n        else if(L1[i] > L2[j]){\n      \
    \      j += 1;\n        }\n        else{\n            i += 1;\n        }\n   \
    \ }\n    return common;\n}\n", "    let final = [];\n    for(let i = 0; i < l1.length;\
    \ i++){\n        for(let j = 0; j < l2.length; j++){\n            if(l1[i] ===\
    \ l2[j]){\n                final.push(l1[i]);\n            }\n        }\n    }\n\
    \    return final;\n}\n", "    let unique = new Set(l1);\n    let unique2 = new\
    \ Set(l2);\n    for(let item of unique2){\n        unique.add(item);\n    }\n\
    \    let result = new Set(unique);\n    for(let item of unique){\n        for(let\
    \ item2 of unique2){\n            if(item === item2){\n                result.add(item);\n\
    \            }\n        }\n    }\n    let res = Array.from(result);\n    return\
    \ res.sort();\n}\n", "    let uniqL1 = [];\n    let uniqL2 = [];\n    let result\
    \ = [];\n    let i = 0;\n    let j = 0;\n    while(i < l1.length) {\n        if(uniqL1.indexOf(l1[i])\
    \ === -1) {\n            uniqL1.push(l1[i]);\n        }\n        i++;\n    }\n\
    \    while(j < l2.length) {\n        if(uniqL2.indexOf(l2[j]) === -1) {\n    \
    \        uniqL2.push(l2[j]);\n        }\n        j++;\n    }\n    uniqL1.forEach(value\
    \ => {\n        if(uniqL2.indexOf(value) !== -1) {\n            result.push(value);\n\
    \        }\n    });\n    return result;\n}", "\treturn l1.filter(x => l2.includes(x));\n\
    }\n", "    let result = [];\n    l1.forEach(function(el){\n        if(l2.includes(el)\
    \ && !result.includes(el)){\n            result.push(el);\n        }\n    });\n\
    \    return result.sort();\n}\n", "  let set = new Set(l1)\n  let set2 = new Set(l2)\n\
    \  let res = []\n  for(let item of set){\n    if(set2.has(item)){\n      res.push(item)\n\
    \    }\n  }\n  return res.sort((a,b) => a-b)\n}", "  var commonElements = [];\n\
    \  for (var i = 0; i < l1.length; i++) {\n    for (var j = 0; j < l2.length; j++)\
    \ {\n      if (l1[i] === l2[j]) {\n        commonElements.push(l1[i]);\n     \
    \ }\n    }\n  }\n  return commonElements;\n}\n", "    var newList = [];\n    for(var\
    \ i = 0; i < l1.length; i++){\n        for(var j = 0; j < l2.length; j++){\n \
    \           if(l1[i] == l2[j]){\n                newList.push(l1[i]);\n      \
    \      }\n        }\n    }\n    return newList;\n}\n", "  var combined = l1.concat(l2);\n\
    \  var unique = combined.filter(function(value, index, self){\n    return self.indexOf(value)\
    \ === index;\n  });\n  return unique.sort(function(a, b){\n    return a - b;\n\
    \  });\n}\n", "  var newList = [];\n  var sortedList1 = l1.sort(function(a, b){return\
    \ a-b});\n  var sortedList2 = l2.sort(function(a, b){return a-b});\n  var len\
    \ = sortedList1.length > sortedList2.length ? sortedList1.length : sortedList2.length;\n\
    \  for(var i = 0; i < len; i++){\n    if(sortedList1[i] == sortedList2[i]){\n\
    \      newList.push(sortedList1[i]);\n    }\n  }\n  return newList;\n}\n", " \
    \   return l1.filter(el => l2.includes(el)).sort((a, b) => a - b).filter((el,\
    \ i, arr) => arr.indexOf(el) === i);\n}\n", "    if(l1.length == 0)\n        return\
    \ [];\n    var l3 = [];\n    var sort = function(l1, l2){\n        if(l1.length\
    \ == 0)\n            return [];\n        var result = [];\n        for(var i =\
    \ 0; i < l1.length; i++){\n            if(l2.indexOf(l1[i]) != -1){\n        \
    \        result.push(l1[i]);\n            }\n        }\n        return result;\n\
    \    }\n    var sort1 = function(l1){\n        if(l1.length == 0)\n          \
    \  return [];\n        var result = [];\n        for(var i = 0; i < l1.length;\
    \ i++){\n            if(result.indexOf(l1[i]) == -1){\n                result.push(l1[i]);\n\
    \            }\n        }\n        return result;\n    }\n    l3 = sort(l1, l2);\n\
    \    l3 = sort1(l3);\n    return l3;\n}", "  // var filtered = l1.filter(function(item)\
    \ {\n  //   return l2.indexOf(item) != -1;\n  // });\n  var filtered = l1.filter(function(item)\
    \ {\n    return l2.indexOf(item) != -1;\n  });\n  return filtered.sort();\n}",
  "    var common_elements = [];\n    for(var i=0; i<l1.length; i++){\n        if(l2.indexOf(l1[i])\
    \ > -1 && common_elements.indexOf(l1[i]) == -1){\n            common_elements.push(l1[i]);\n\
    \        }\n    }\n    return common_elements;\n}\n", "  const arr1 = l1.sort((a,\
    \ b) => a - b);\n  const arr2 = l2.sort((a, b) => a - b);\n  const newArr = [];\n\
    \  let i = 0;\n  let j = 0;\n  while (i < arr1.length && j < arr2.length) {\n\
    \    if (arr1[i] === arr2[j]) {\n      newArr.push(arr1[i]);\n      i++;\n   \
    \   j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n    \
    \  j++;\n    }\n  }\n  return newArr;\n}\n", "\treturn new Set([...l1].filter(x\
    \ => l2.includes(x)));\n}\n", "  var l3 = new Set(l1);\n  var l4 = new Set(l2);\n\
    \  var l5 = [...l3].filter(x => l4.has(x));\n  return l5;\n}\n", "    let answer\
    \ = [];\n    // your code here\n    for (let i = 0; i < l1.length; i++) {\n  \
    \      if (l2.includes(l1[i])) {\n            answer.push(l1[i]);\n        }\n\
    \    }\n    return answer.sort();\n}", "\n}\n", "    let sortedL1 = l1.sort(function(a,\
    \ b){return a-b});\n    let sortedL2 = l2.sort(function(a, b){return a-b});\n\
    \    let k = 0;\n    let j = 0;\n    let myArray = [];\n    while (k < sortedL1.length\
    \ && j < sortedL2.length){\n        if (sortedL1[k] == sortedL2[j]){\n       \
    \     myArray.push(sortedL1[k]);\n            k++;\n            j++;\n       \
    \ }\n        else if (sortedL1[k] < sortedL2[j]){\n            k++;\n        }\n\
    \        else{\n            j++;\n        }\n    }\n    return myArray;\n}\n",
  "\tlet commonList = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tfor(var j =\
    \ 0; j < l2.length; j++){\n\t\t\tif(l1[i] === l2[j]){\n\t\t\t\tcommonList.push(l1[i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn commonList;\n}\n", "  return Array.from(new Set(l1.filter(x\
    \ => l2.includes(x))))\n}\n", "  let commonArray = [];\n  for (let i = 0; i <\
    \ l1.length; i++){\n    for (let j = 0; j < l2.length; j++){\n      if (l1[i]\
    \ === l2[j]){\n        commonArray.push(l1[i]);\n      }\n    }\n  }\n  let commonArraySorted\
    \ = commonArray.sort(function(a, b){return a-b});\n  let commonArrayUnique = commonArraySorted.filter(function(item,\
    \ pos) {\n    return commonArraySorted.indexOf(item) == pos;\n  })\n  return commonArrayUnique;\n\
    }", "  var l3=[];\n  for(var i=0;i<l1.length;i++){\n    for(var j=0;j<l2.length;j++){\n\
    \      if(l1[i]==l2[j]){\n        l3.push(l1[i]);\n      }\n    }\n  }\n   var\
    \ unique = l3.filter(function(elem, index, self) {\n    return index == self.indexOf(elem);\n\
    \  });\n  unique.sort(function(a, b){return a-b});\n  return unique;\n}", "  \
    \  var l3 = [];\n    for(i = 0; i < l1.length; i++){\n        for(j = 0; j < l2.length;\
    \ j++){\n            if(l1[i] == l2[j]){\n                l3.push(l1[i]);\n  \
    \          }\n        }\n    }\n    return l3;\n}\nvar list1 = [1, 4, 3, 34, 653,\
    \ 2, 5];\nvar list2 = [5, 7, 1, 5, 9, 653, 121];", "    var sorted = [];\n   \
    \ var result = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j\
    \ = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n               \
    \ sorted.push(l1[i]);\n            }\n        }\n    }\n    sorted.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    for(var i = 0; i < sorted.length; i++){\n\
    \        if(result.indexOf(sorted[i]) == -1){\n            result.push(sorted[i]);\n\
    \        }\n    }\n    return result;\n}", "  //let mySet = new Set([...l1]);\n\
    \  return [...new Set(l1)].filter(function(value){return l2.includes(value)});\n\
    }\n", "  var set = new Set(l1);\n  return Array.from(set).filter(n => l2.includes(n));\n\
    }\n", "  return l1.filter(v => l2.includes(v));\n}\n", "    return Array.from(new\
    \ Set(l1.filter(x => l2.includes(x)).sort()));\n}\n", "    var l3 = [];\n    var\
    \ c = 0;\n    for(i = 0; i < l1.length; i++){\n        for(j = 0; j < l2.length;\
    \ j++){\n            if(l1[i] == l2[j]){\n                l3[c] = l1[i];\n   \
    \             c++;\n            }\n        }\n    }\n    return l3;\n}\n", " \
    \   return l1.filter(v => l2.includes(v));\n}\n", "    return l1.filter(value\
    \ => l2.includes(value));\n}\n", "\tl1 = l1.sort(function(a, b){return a-b});\n\
    \tl2 = l2.sort(function(a, b){return a-b});\n\t\n\tvar i = 0;\n\tvar j = 0;\n\t\
    var result = [];\n\twhile(i < l1.length && j < l2.length){\n\t\tif(l1[i] < l2[j]){\n\
    \t\t\ti++;\n\t\t}\n\t\telse if(l1[i] > l2[j]){\n\t\t\tj++;\n\t\t}\n\t\telse{\n\
    \t\t\tresult.push(l1[i]);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\treturn result;\n\
    }\n", "    var result = [];\n    for(var a in l1){\n        for(var b in l2){\n\
    \            if(l1[a] == l2[b]){\n                result.push(l1[a]);\n      \
    \      }\n        }\n    }\n    return result;\n}", "  var result = [];\n  for\
    \ (var i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) !== -1 && result.indexOf(l1[i])\
    \ === -1) {\n      result.push(l1[i]);\n    }\n  }\n  return result;\n}\n", " \
    \ let list = [];\n  let list2 = [];\n  let list3 = [];\n  let list5 = [];\n  let\
    \ list6 = [];\n  let list7 = [];\n  let list8 = [];\n  let list9 = [];\n  let\
    \ list10 = [];\n  let list11 = [];\n  let list12 = [];\n  let list13 = [];\n \
    \ let list14 = [];\n  let list15 = [];\n  let list16 = [];\n  let list17 = [];\n\
    \  let list18 = [];\n  let list19 = [];\n  let list20 = [];\n  let list21 = [];\n\
    \  let list22 = [];\n  let list23 = [];\n  let list24 = [];\n  let list25 = [];\n\
    \  let list26 = [];\n  let list27 = [];\n  let list28 = [];\n  let list29 = [];\n\
    \  let list30 = [];\n  let list31 = [];\n  let list32 = [];\n  let list33 = [];\n\
    \  let list34 = [];\n  let list35 = [];\n  let list36 = [];\n  let list37 = [];\n\
    \  let list38 = [];\n  let list39 = [];\n  let list40 = [];\n  let list41 = [];\n\
    \  let list42 = [];\n  let list43 = [];\n  let list44 = [];\n  let list45 = [];\n\
    \  let list46 = [];\n  let list47 = [];\n  let list48 = [];\n  let list49 = [];\n\
    \  let list50 = [];\n  let list51 = [];\n  let list52 = [];\n  let list53 = [];\n\
    \  let list54 = [];\n  let list55 = [];\n  let list56 = [];\n  let list57 = [];\n\
    \  let list58 = [];\n  let list59 = [];\n  let list60 = [];\n  let list61 = [];\n\
    \  let list62 = [];\n  let list63 = [];\n  let list64 = [];\n  let list65 = [];\n\
    \  let list66 = [];\n  let list67 = [];\n  let list68 = [];\n  let list69 = [];\n\
    \  let list70 = [];\n  let list71 = [];\n  let list72 = [];\n  let list73 = [];\n\
    \  let list74 = [];\n ", "\n}\n\nmodule.exports = {\n    'even_odd_elements':\
    \ even_odd_elements,\n    'even_odd_index': even_odd_index,\n    'common': common\n\
    };", "    var l3 = l1.filter(value => -1 !== l2.indexOf(value));\n    return l3.filter((item,\
    \ pos) => l3.indexOf(item) == pos);\n}", "  let l3 = [];\n  for (let i of l1){\n\
    \    if (l2.includes(i)){\n      l3.push(i);\n    }\n  }\n  return l3.sort((a,\
    \ b) => a - b);\n}\n", "    if(l1.length === 0 || l2.length === 0){\n        return\
    \ [];\n    }\n    if(l1.length < l2.length){\n        var temp = l1;\n       \
    \ l1 = l2;\n        l2 = temp;\n    }\n    return l1.filter(function(e){return\
    \ l2.indexOf(e) !== -1;})\n}\n", "    return l1.filter(function(n) {\n       \
    \ return l2.indexOf(n) != -1;\n    }).sort(function(a, b) {\n        return a\
    \ - b;\n    }).filter(function(item, pos, ary) {\n        return !pos || item\
    \ != ary[pos - 1];\n    });\n}\n", "    const l1_set = new Set(l1);\n    const\
    \ l2_set = new Set(l2);\n    const l3 = Array.from(l1_set);\n    const l4 = Array.from(l2_set);\n\
    \    const common = l3.filter(item => l4.includes(item));\n    return common.sort((a,\
    \ b) => a-b);\n}\n\n\n", "  var unique = unique(l1.concat(l2));\n  var common\
    \ = []\n  for (var i = 0; i < unique.length; i++) {\n    if (l1.indexOf(unique[i])\
    \ > -1 && l2.indexOf(unique[i]) > -1){\n      common.push(unique[i]);\n    }\n\
    \  }\n  return common;\n}\n", "    return l1.filter(function(el){\n      return\
    \ l2.indexOf(el) !== -1\n    })\n  }\n\n\n", "\tl1 = l1.sort();\n\tl2 = l2.sort();\n\
    \tvar l = [];\n\tfor(var i = 0; i < l1.length; i++){\n\t\tfor(var j = 0; j < l2.length;\
    \ j++){\n\t\t\tif(l1[i] == l2[j]){\n\t\t\t\tl.push(l1[i]);\n\t\t\t}\n\t\t}\n\t\
    }\n\tl = unique(l);\n\treturn l;\n}\n", "\treturn _.uniq(l1.concat(l2)).sort((x,\
    \ y) => x - y);\n}\n", "    var set2 = new Set(l2);\n    var res = [...new Set(l1.filter(x\
    \ => set2.has(x)))];\n    return res.sort();\n}", "    return [...new Set(l1.filter(x\
    \ => l2.includes(x)))].sort((a, b) => a - b);\n}\n", "  let list = [];\n  for(let\
    \ i = 0; i < l1.length; i++){\n    for(let j = 0; j < l2.length; j++){\n     \
    \ if(l1[i] === l2[j]){\n        list.push(l1[i]);\n      }\n    }\n  }\n  let\
    \ set = new Set(list);\n  return Array.from(set).sort((a, b) => a - b);\n}\n",
  "    //...\n    var commonArr = [];\n    for(var i = 0; i < l1.length; i++){\n \
    \       for(var j = 0; j < l2.length; j++){\n            if(l1[i] === l2[j]){\n\
    \                commonArr.push(l1[i]);\n            }\n        }\n    }\n   \
    \ return commonArr;\n}", "\tvar unique = uniqueList(l1.concat(l2));\n\treturn\
    \ unique.filter(function(item){\n\t\treturn l1.indexOf(item) !== -1 && l2.indexOf(item)\
    \ !== -1;\n\t});\n}\n", "    let set1 = new Set(l1);\n    let set2 = new Set(l2);\n\
    \    let common_set = new Set();\n    for (let e of set1){\n        if (set2.has(e)){\n\
    \            common_set.add(e);\n        }\n    }\n    return Array.from(common_set).sort();\n\
    }\n", "    return l1.filter(function(n) {\n        return l2.indexOf(n) !== -1;\n\
    \    }).filter(function(elem, pos, arr) {\n        return arr.indexOf(elem) ==\
    \ pos;\n    }).sort(function(a, b){return a-b});\n}\n", "\tvar l3 = l1.concat(l2);\n\
    \treturn l3.filter(function(elem, pos, arr){\n\t\treturn arr.indexOf(elem)==pos;\n\
    \t}).sort(function(a, b){\n\t\treturn a-b;\n\t}).filter(function(elem, pos, arr){\n\
    \t\treturn arr.indexOf(elem)==arr.lastIndexOf(elem);\n\t});\n}", "    return l1.filter(function(value){\n\
    \        return (l2.indexOf(value) > -1)\n    }).sort(function(x, y){\n      \
    \  return x - y;\n    }).filter(function(item, index, array){\n        return\
    \ index == array.indexOf(item);\n    });\n}\n", "    //remove duplicates in both\
    \ arrays\n    let uniq1 = l1.filter((v, i, a) => a.indexOf(v) === i);\n    let\
    \ uniq2 = l2.filter((v, i, a) => a.indexOf(v) === i);\n    //sort both arrays\n\
    \    uniq1.sort((a, b) => a - b);\n    uniq2.sort((a, b) => a - b);\n    //check\
    \ for common elements\n    let result = [];\n    for(let i=0; i<uniq1.length;\
    \ i++){\n        if(uniq2.includes(uniq1[i])){\n            result.push(uniq1[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    var result = [];\n    l1.forEach(function(value){\n\
    \        l2.forEach(function(v){\n            if(value == v){\n              \
    \  result.push(value);\n            }\n        });\n    });\n    return result.sort();\n\
    }\n", "    return l1.filter(function(item){\n        return l2.indexOf(item) !==\
    \ -1;\n    }).sort(function(a, b){\n        return a - b;\n    }).filter(function(item,\
    \ index, arr){\n        return index === arr.indexOf(item);\n    });\n}", "  var\
    \ result = [];\n  for (var i = 0; i < l1.length; i++) {\n    for (var j = 0; j\
    \ < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n\
    \      }\n    }\n  }\n  // remove dups and sort the array before returning\n \
    \ var set = new Set(result);\n  return Array.from(set).sort();\n}\n", "    return\
    \ [...new Set(l1.filter(el => l2.includes(el)))].sort((a, b) => a - b);\n}\n",
  "\tvar\tfirst = common_l1(l1, l2);\n\tvar\tsecond = common_l1(l2, l1);\n\treturn\
    \ first.concat(second).sort(function(a, b){return a - b});\n}", "    return _.uniq(l1.concat(l2)).sort();\n\
    }\n", "  let all_elements = [];\n  let common_elements = [];\n  all_elements =\
    \ [...l1, ...l2];\n  return all_elements.filter((elem, index) => all_elements.indexOf(elem)\
    \ === index);\n}", "    return _.sortBy(_.uniq(_.intersection(l1, l2)));\n}\n\n",
  "    const unique1 = [...new Set(l1)];\n    const unique2 = [...new Set(l2)];\n\
    \    let common = [];\n    for(let i = 0; i < unique1.length; i++){\n        for(let\
    \ j = 0; j < unique2.length; j++){\n            if(unique1[i] === unique2[j]){\n\
    \                common.push(unique1[i]);\n            }\n        }\n    }\n \
    \   return common.sort((a, b) => a - b);\n}\n", "    return [...new Set(l1.filter(item\
    \ => l2.includes(item)))].sort((a, b) => a - b);\n}\n", "  var result = [];\n\
    \  for (var i = 0; i < l1.length; i++) {\n    for (var j = 0; j < l2.length; j++)\
    \ {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n      }\n    }\n\
    \  }\n  return result;\n}", "\treturn arrUnique(l1.filter(x => l2.includes(x))).sort(function(a,\
    \ b){return a-b});\n}\n", "\tvar map = {};\n\tvar res = [];\n\tfor(var i=0; i<l1.length;\
    \ i++){\n\t\tif(map[l1[i]] == undefined){\n\t\t\tmap[l1[i]] = 1;\n\t\t}else{\n\
    \t\t\tmap[l1[i]] += 1;\n\t\t}\n\t}\n\tfor(var i=0; i<l2.length; i++){\n\t\tif(map[l2[i]]\
    \ == undefined){\n\t\t\tmap[l2[i]] = 1;\n\t\t}else{\n\t\t\tmap[l2[i]] += 1;\n\t\
    \t}\n\t}\n\tfor(var k in map){\n\t\tif(map[k]>1){\n\t\t\tres.push(k);\n\t\t}\n\
    \t}\n\treturn res;\n}\n", "    return l1.filter(i => l2.includes(i)).sort((a,\
    \ b) => a - b);\n}\n", "    var commonList = [];\n    for(var i = 0; i < l1.length;\
    \ i++){\n        if(l2.indexOf(l1[i]) !== -1 && commonList.indexOf(l1[i]) ===\
    \ -1){\n            commonList.push(l1[i]);\n        }\n    }\n    return commonList;\n\
    }\n", "    var l3 = l1.filter(function(val) {\n    return l2.indexOf(val) != -1;\n\
    \  });\n   return l3.filter(function(item, pos, self) {\n    return self.indexOf(item)\
    \ == pos;\n})\n}\n", "    var result = [];\n    var intersection = l1.filter(function(element){\n\
    \        return l2.indexOf(element) > -1;\n    });\n    intersection.forEach(function(element){\n\
    \        if(result.indexOf(element) === -1){\n            result.push(element);\n\
    \        }\n    });\n    return result.sort();\n}\n", "    var unique = [];\n\
    \    for(var i = 0; i < l1.length; i++){\n        if(unique.indexOf(l1[i]) ==\
    \ -1){\n            unique.push(l1[i]);\n        }\n    }\n    for(var i = 0;\
    \ i < l2.length; i++){\n        if(unique.indexOf(l2[i]) == -1){\n           \
    \ unique.push(l2[i]);\n        }\n    }\n    unique.sort();\n    console.log(unique);\n\
    }", "    var set = new Set(l1);\n    return l2.filter(item => set.has(item)).sort((a,\
    \ b) => a - b);\n}\n", "    return [...new Set(l1.filter(x => l2.includes(x)))].sort((a,\
    \ b) => a - b);\n}\n", "    return l1.filter(num => l2.includes(num)).sort((a,\
    \ b) => a - b).filter((val, idx, arr) => arr.indexOf(val) === idx);\n}\n", "\t\
    return l1.filter(function(i){\n\t\treturn l2.indexOf(i) !== -1;\n\t}).sort().filter(function(i,\
    \ index, list){\n\t\treturn i !== list[index-1];\n\t});\n}\n", "    var sortedL1\
    \ = l1.sort(sortNumber);\n    var sortedL2 = l2.sort(sortNumber);\n    var result\
    \ = [];\n    var i=0;\n    var j=0;\n    while (i<sortedL1.length && j<sortedL2.length){\n\
    \        if (sortedL1[i]==sortedL2[j]){\n            result.push(sortedL1[i]);\n\
    \            i++;\n            j++;\n        } else if (sortedL1[i]<sortedL2[j]){\n\
    \            i++;\n        } else {\n            j++;\n        }\n    }\n    return\
    \ result;\n}\n", "    return l1.filter(e => l2.includes(e))\n}", "\t\n}\n\n",
  "    return Array.from(new Set(l1.filter(x => l2.includes(x)).sort((a, b) => a -\
    \ b)));\n}\n", "    var common = l1.filter(function(val) {\n        return l2.indexOf(val)\
    \ !== -1;\n    });\n    common.sort(function(a, b){return a-b});\n    return Array.from(new\
    \ Set(common));\n}\n\n", "    return l1.filter(function(a){\n        return l2.indexOf(a)\
    \ >= 0;\n    }).sort(function(a, b){\n        return a - b;\n    });\n}", "  \
    \  let result = [];\n    for(let i = 0; i < l1.length; i++){\n        for(let\
    \ j = 0; j < l2.length; j++){\n            if(l1[i] === l2[j]){\n            \
    \    result.push(l1[i]);\n            }\n        }\n    }\n    return result.sort().filter((a,\
    \ b) => result.indexOf(a) === b);\n}\n", "    let s1 = l1.sort( (a,b) => a - b\
    \ );\n    let s2 = l2.sort( (a,b) => a - b );\n    let i1 = 0;\n    let i2 = 0;\n\
    \    let result = [];\n    while(i1 < s1.length && i2 < s2.length){\n        if(s1[i1]\
    \ == s2[i2]){\n            result.push(s1[i1]);\n            i1++;\n         \
    \   i2++;\n        }\n        else if(s1[i1] < s2[i2]){\n            i1++;\n \
    \       }\n        else{\n            i2++;\n        }\n    }\n    return result;\n\
    }\n", "    var temp = l1.concat(l2);\n    var seen = {};\n    var out = [];\n\
    \    var j = 0;\n    for(var i = 0; i < temp.length; i++) {\n        var item\
    \ = temp[i];\n        if(seen[item] !== 1) {\n            seen[item] = 1;\n  \
    \          out[j++] = item;\n        }\n    }\n    return out.sort();\n}\n", "\t\
    let keys = new Set(l1.concat(l2))\n\tlet dict = {}\n\tlet output = []\n\tfor (var\
    \ key of keys){\n\t\tdict[key] = (dict[key] || 0) + 1\n\t}\n\tfor (var key in\
    \ dict){\n\t\tif (dict[key] > 1){\n\t\t\toutput.push(parseInt(key))\n\t\t}\n\t\
    }\n\treturn output.sort((a, b) => a - b)\n}", "    return l1.filter(val => l2.includes(val)).sort((a,\
    \ b) => a-b).filter((ele, index, self) => self.indexOf(ele) === index);\n}", " \
    \   var res = [];\n    for(var i = 0; i < l1.length; i++){\n        for(var j\
    \ = 0; j < l2.length; j++){\n            if(l1[i] == l2[j]){\n               \
    \ res.push(l1[i]);\n            }\n        }\n    }\n    return res;\n}\n", " \
    \   let i1 = 0;\n    let i2 = 0;\n    let result = [];\n    l1.sort((a, b) =>\
    \ a-b);\n    l2.sort((a, b) => a-b);\n    while(i1 < l1.length && i2 < l2.length){\n\
    \        if(l1[i1] === l2[i2]){\n            result.push(l1[i1]);\n          \
    \  i1++;\n            i2++;\n        } else if(l1[i1] < l2[i2]){\n           \
    \ i1++;\n        } else {\n            i2++;\n        }\n    }\n    return result;\n\
    }\n", "\t// es5 method\n\t// return l1.filter(v => l2.includes(v));\n\tlet a =\
    \ {};\n\tl1.forEach(v => a[v] = v);\n\treturn l2.filter(v => a[v]);\n}\n", " \
    \   return l1.filter(function(n) {\n        return l2.indexOf(n) !== -1;\n   \
    \ }).filter(function(elem, pos, arr) {\n        return arr.indexOf(elem) == pos;\n\
    \    }).sort(function(a, b){return a-b});\n}", "\n}\n", "  var result = [];\n\
    \  for (var i = 0; i < l1.length; i++) {\n    for (var j = 0; j < l2.length; j++)\
    \ {\n      if (l1[i] === l2[j]) {\n        result.push(l1[i]);\n      }\n    }\n\
    \  }\n  return result;\n}", "    // your code here\n    let commonList = [];\n\
    \    for(let i = 0; i < l1.length; i++){\n        for(let j = 0; j < l2.length;\
    \ j++){\n            if(l1[i] === l2[j]){\n                commonList.push(l1[i]);\n\
    \            }\n        }\n    }\n    return commonList;\n}\n", "    var sorted1\
    \ = l1.sort();\n    var sorted2 = l2.sort();\n    var counter = 0;\n    var newArr\
    \ = [];\n    while(counter < sorted1.length){\n        var num = sorted1[counter];\n\
    \        if(sorted2.indexOf(num) > -1){\n            newArr.push(num);\n     \
    \   }\n        counter++;\n    }\n    return newArr;\n}\n", "    return l1.filter(num\
    \ => l2.includes(num)).sort((a, b) => a - b).filter((num, index, self) => index\
    \ === self.indexOf(num));\n}\n", "\t\n\tvar res=[];\n\tvar s=0;\n\tfor(i=0;i<l1.length;i++){\n\
    \t\tfor(j=0;j<l2.length;j++){\n\t\t\tif(l1[i]==l2[j]){\n\t\t\t\tres[s]=l1[i];\n\
    \t\t\t\ts++;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n", "    var result = [];\n\
    \    for(var i=0; i<l1.length; i++){\n        for(var j=0; j<l2.length; j++){\n\
    \            if(l1[i] == l2[j]){\n                result.push(l1[i]);\n      \
    \      }\n        }\n    }\n    return result;\n}", "    let common_elements =\
    \ [];\n    let set_l1 = new Set(l1);\n    let set_l2 = new Set(l2);\n    set_l1.forEach(el\
    \ => {\n        if(set_l2.has(el)){\n            common_elements.push(el);\n \
    \       }\n    });\n    return common_elements.sort((a, b) => a - b);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
