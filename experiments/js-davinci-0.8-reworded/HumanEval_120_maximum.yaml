name: HumanEval_120_maximum
language: js
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>>\
  \ maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4,\
  \ 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
  // [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nfunction maximum(arr, k){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
  \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n\
  \  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n\
  \  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5,\
  \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
  \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
  \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
  \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0],\
  \ 0),[]);\n}\n\ntest();"
completions: ["\tlet sorted = arr.sort(function(a, b){return a - b});\n\tlet reverse\
    \ = sorted.reverse();\n\tlet newArr = [];\n\tfor(let i = 0; i < k; i++){\n\t\t\
    newArr.push(reverse[i]);\n\t}\n\treturn newArr;\n}\n", "    return arr.sort((a,\
    \ b) => a - b).slice(-k);\n}", "\n}\n", "    var len = arr.length;\n    if(len\
    \ === 0) return null;\n    if(len === 1) return arr;\n    // sort function can\
    \ also be used\n    // sort() method sorts the elements of an array in place and\
    \ returns the sorted array.\n    // The default sort order is built upon converting\
    \ the elements into strings, \n    // then comparing their sequences of UTF-16\
    \ code units values.\n    // arr.sort((a, b) => a - b);\n    // var result = [];\n\
    \    // for(var i = len - 1; i >= len - k; i--){\n    //     result.push(arr[i]);\n\
    \    // }\n    // return result;\n    return arr.sort((a, b) => a - b).slice(len\
    \ - k);\n}", "    let newArr = [];\n    arr.forEach(function(num){\n        newArr.push(num)\n\
    \    })\n    let sortedArr = newArr.sort((a,b) => a - b)\n    let output = []\n\
    \    for(let i = sortedArr.length - 1; i >= sortedArr.length - k; i--){\n    \
    \    output.push(sortedArr[i])\n    }\n    return output\n}\n", "    var result\
    \ = [];\n    for(var i = 0; i < k; i++){\n        var max = -1001;\n        var\
    \ index = 0;\n        for(var j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n", "    let results = [];\n    for(let i = 0; i\
    \ < k; i++){\n        let maximum = arr[0];\n        let idx = 0;\n        for(let\
    \ j = 0; j < arr.length; j++){\n            if(arr[j] > maximum){\n          \
    \      maximum = arr[j];\n                idx = j;\n            }\n        }\n\
    \        results.push(maximum);\n        arr.splice(idx, 1);\n    }\n    return\
    \ results;\n}", "    return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nmodule.exports\
    \ = maximum;", "  let max = [];\n  if(k>arr.length){\n    return arr;\n  }\n \
    \ while(max.length<k){\n    let maxIndex = 0;\n    for(let i=0; i<arr.length;\
    \ i++){\n      if(arr[i]>arr[maxIndex]){\n        maxIndex = i;\n      }\n   \
    \ }\n    max.push(arr[maxIndex]);\n    arr.splice(maxIndex, 1);\n  }\n  return\
    \ max;\n}", "    arr.sort((a, b) => b - a);\n    return arr.slice(0, k);\n}\n",
  "    let sortedArr = arr.sort((a, b) => b - a);\n    console.log(sortedArr.slice(0,\
    \ k));\n}\nmaximum([-3, -4, 5], 3);\nmaximum([4, -4, 4], 2);\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1);", "    if(arr.length < k){\n        return 'k should be\
    \ smaller than the size of the array'\n    }else{\n        return arr.sort((a,b)\
    \ => a - b).slice(-k)\n    }\n}", "\t// create a new array with the length of\
    \ k\n\tvar sortedArray = [];\n\tfor(var i = 0; i < k; i++){\n\t\t// find maximum\n\
    \t\tvar maximum = Math.max.apply(null, arr);\n\t\t// put maximum value in array\n\
    \t\tsortedArray.push(maximum);\n\t\t// remove maximum from arr\n\t\tvar index\
    \ = arr.indexOf(maximum);\n\t\tarr.splice(index, 1);\n\t}\n\treturn sortedArray;\n\
    }", "    var max=[];\n    for(var i=0; i<arr.length; i++){\n        if(max.length\
    \ === 0){\n            max.push(arr[i]);\n        }else{\n            for(var\
    \ j=0; j<max.length; j++){\n                if(arr[i] > max[j]){\n           \
    \         max.splice(j, 0, arr[i]);\n                    if(max.length > k){\n\
    \                        max.pop();\n                    }\n                 \
    \   break;\n                }\n            }\n        }\n    }\n    return max;\n\
    }", "    var temp = [];\n    var output = [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        temp.push(arr[i]);\n    }\n    for(var i = 0; i < k; i++){\n\
    \        var max = -1000;\n        var index = -1;\n        for(var j = 0; j <\
    \ temp.length; j++){\n            if(temp[j] > max){\n                max = temp[j];\n\
    \                index = j;\n            }\n        }\n        output.push(max);\n\
    \        temp.splice(index, 1);\n    }\n    return output;\n}\n", "    // Step\
    \ 1: create an empty array, where we will push the desired values into\n    const\
    \ newArr = [];\n    // Step 2: sort the array in descending order\n    arr.sort((a,\
    \ b) => b - a);\n    // Step 3: push the first x elements of the array into the\
    \ new array, where x = k\n    for (let i = 0; i < k; i++){\n        newArr.push(arr[i]);\n\
    \    }\n    // Step 4: return the new array\n    return newArr;\n}", "    let\
    \ result = [];\n    for(let i = 0; i < k; i++){\n        let min = arr[0];\n \
    \       let idx = 0;\n        for(let j = 0; j < arr.length; j++){\n         \
    \   if(arr[j] > min){\n                min = arr[j];\n                idx = j;\n\
    \            }\n        }\n        result.push(min);\n        arr.splice(idx,\
    \ 1);\n    }\n    return result;\n}\n", "  if(k === 0){\n    return [];\n  }\n\
    \  if(k >= arr.length){\n    return arr.sort((a, b) => a - b);\n  }\n  var min\
    \ = arr[0];\n  var minIndex = 0;\n  for(var i = 1; i < k; i++){\n    if(arr[i]\
    \ < min){\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  for(var i =\
    \ k; i < arr.length; i++){\n    if(arr[i] > min){\n      arr[minIndex] = arr[i];\n\
    \      min = arr[i];\n      for(var j = 0; j < k; j++){\n        if(arr[j] < min){\n\
    \          min = arr[j];\n          minIndex = j;\n        }\n      }\n    }\n\
    \  }\n  return arr.slice(0, k).sort((a, b) => a - b);\n}\n", "    // just a comment\n\
    \    let sortedArr = arr.sort((a, b) => a - b);\n    return sortedArr.slice(sortedArr.length\
    \ - k, sortedArr.length);\n}\n\nmodule.exports = maximum;", "    let sortedArr\
    \ = arr.sort((a, b) => b - a);\n    let maxArr = [];\n    for(let i = 0; i < k;\
    \ i++){\n        maxArr.push(sortedArr[i]);\n    }\n    return maxArr;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
