name: HumanEval_120_maximum
language: js
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>>\
  \ maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4,\
  \ 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
  // [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nfunction maximum(arr, k){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = maximum;\n  assert.deepEqual(candidate([-3, -4, 5], 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4,\
  \ -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3, 2, 1, 2, -1, -2, 1], 1),[2]);\n\
  \  assert.deepEqual(candidate([123, -123, 20, 0, 1, 2, -3], 3),[2, 20, 123]);\n\
  \  assert.deepEqual(candidate([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5,\
  \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1,\
  \ 0, 2, 5, 3, -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n\
  \  assert.deepEqual(candidate([4, -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10,\
  \ 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1, 2, 3, -23, 243, -400, 0],\
  \ 0),[]);\n}\n\ntest();"
completions: ["\tlet sorted = arr.sort(function(a, b){return a - b});\n\tlet reverse\
    \ = sorted.reverse();\n\tlet newArr = [];\n\tfor(let i = 0; i < k; i++){\n\t\t\
    newArr.push(reverse[i]);\n\t}\n\treturn newArr;\n}\n", "    return arr.sort((a,\
    \ b) => a - b).slice(-k);\n}", "\n}\n", "    var len = arr.length;\n    if(len\
    \ === 0) return null;\n    if(len === 1) return arr;\n    // sort function can\
    \ also be used\n    // sort() method sorts the elements of an array in place and\
    \ returns the sorted array.\n    // The default sort order is built upon converting\
    \ the elements into strings, \n    // then comparing their sequences of UTF-16\
    \ code units values.\n    // arr.sort((a, b) => a - b);\n    // var result = [];\n\
    \    // for(var i = len - 1; i >= len - k; i--){\n    //     result.push(arr[i]);\n\
    \    // }\n    // return result;\n    return arr.sort((a, b) => a - b).slice(len\
    \ - k);\n}", "    let newArr = [];\n    arr.forEach(function(num){\n        newArr.push(num)\n\
    \    })\n    let sortedArr = newArr.sort((a,b) => a - b)\n    let output = []\n\
    \    for(let i = sortedArr.length - 1; i >= sortedArr.length - k; i--){\n    \
    \    output.push(sortedArr[i])\n    }\n    return output\n}\n", "    var result\
    \ = [];\n    for(var i = 0; i < k; i++){\n        var max = -1001;\n        var\
    \ index = 0;\n        for(var j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n", "    let results = [];\n    for(let i = 0; i\
    \ < k; i++){\n        let maximum = arr[0];\n        let idx = 0;\n        for(let\
    \ j = 0; j < arr.length; j++){\n            if(arr[j] > maximum){\n          \
    \      maximum = arr[j];\n                idx = j;\n            }\n        }\n\
    \        results.push(maximum);\n        arr.splice(idx, 1);\n    }\n    return\
    \ results;\n}", "    return arr.sort((a, b) => b - a).slice(0, k);\n}\n\nmodule.exports\
    \ = maximum;", "  let max = [];\n  if(k>arr.length){\n    return arr;\n  }\n \
    \ while(max.length<k){\n    let maxIndex = 0;\n    for(let i=0; i<arr.length;\
    \ i++){\n      if(arr[i]>arr[maxIndex]){\n        maxIndex = i;\n      }\n   \
    \ }\n    max.push(arr[maxIndex]);\n    arr.splice(maxIndex, 1);\n  }\n  return\
    \ max;\n}", "    arr.sort((a, b) => b - a);\n    return arr.slice(0, k);\n}\n",
  "    let sortedArr = arr.sort((a, b) => b - a);\n    console.log(sortedArr.slice(0,\
    \ k));\n}\nmaximum([-3, -4, 5], 3);\nmaximum([4, -4, 4], 2);\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1);", "    if(arr.length < k){\n        return 'k should be\
    \ smaller than the size of the array'\n    }else{\n        return arr.sort((a,b)\
    \ => a - b).slice(-k)\n    }\n}", "\t// create a new array with the length of\
    \ k\n\tvar sortedArray = [];\n\tfor(var i = 0; i < k; i++){\n\t\t// find maximum\n\
    \t\tvar maximum = Math.max.apply(null, arr);\n\t\t// put maximum value in array\n\
    \t\tsortedArray.push(maximum);\n\t\t// remove maximum from arr\n\t\tvar index\
    \ = arr.indexOf(maximum);\n\t\tarr.splice(index, 1);\n\t}\n\treturn sortedArray;\n\
    }", "    var max=[];\n    for(var i=0; i<arr.length; i++){\n        if(max.length\
    \ === 0){\n            max.push(arr[i]);\n        }else{\n            for(var\
    \ j=0; j<max.length; j++){\n                if(arr[i] > max[j]){\n           \
    \         max.splice(j, 0, arr[i]);\n                    if(max.length > k){\n\
    \                        max.pop();\n                    }\n                 \
    \   break;\n                }\n            }\n        }\n    }\n    return max;\n\
    }", "    var temp = [];\n    var output = [];\n    for(var i = 0; i < arr.length;\
    \ i++){\n        temp.push(arr[i]);\n    }\n    for(var i = 0; i < k; i++){\n\
    \        var max = -1000;\n        var index = -1;\n        for(var j = 0; j <\
    \ temp.length; j++){\n            if(temp[j] > max){\n                max = temp[j];\n\
    \                index = j;\n            }\n        }\n        output.push(max);\n\
    \        temp.splice(index, 1);\n    }\n    return output;\n}\n", "    // Step\
    \ 1: create an empty array, where we will push the desired values into\n    const\
    \ newArr = [];\n    // Step 2: sort the array in descending order\n    arr.sort((a,\
    \ b) => b - a);\n    // Step 3: push the first x elements of the array into the\
    \ new array, where x = k\n    for (let i = 0; i < k; i++){\n        newArr.push(arr[i]);\n\
    \    }\n    // Step 4: return the new array\n    return newArr;\n}", "    let\
    \ result = [];\n    for(let i = 0; i < k; i++){\n        let min = arr[0];\n \
    \       let idx = 0;\n        for(let j = 0; j < arr.length; j++){\n         \
    \   if(arr[j] > min){\n                min = arr[j];\n                idx = j;\n\
    \            }\n        }\n        result.push(min);\n        arr.splice(idx,\
    \ 1);\n    }\n    return result;\n}\n", "  if(k === 0){\n    return [];\n  }\n\
    \  if(k >= arr.length){\n    return arr.sort((a, b) => a - b);\n  }\n  var min\
    \ = arr[0];\n  var minIndex = 0;\n  for(var i = 1; i < k; i++){\n    if(arr[i]\
    \ < min){\n      min = arr[i];\n      minIndex = i;\n    }\n  }\n  for(var i =\
    \ k; i < arr.length; i++){\n    if(arr[i] > min){\n      arr[minIndex] = arr[i];\n\
    \      min = arr[i];\n      for(var j = 0; j < k; j++){\n        if(arr[j] < min){\n\
    \          min = arr[j];\n          minIndex = j;\n        }\n      }\n    }\n\
    \  }\n  return arr.slice(0, k).sort((a, b) => a - b);\n}\n", "    // just a comment\n\
    \    let sortedArr = arr.sort((a, b) => a - b);\n    return sortedArr.slice(sortedArr.length\
    \ - k, sortedArr.length);\n}\n\nmodule.exports = maximum;", "    let sortedArr\
    \ = arr.sort((a, b) => b - a);\n    let maxArr = [];\n    for(let i = 0; i < k;\
    \ i++){\n        maxArr.push(sortedArr[i]);\n    }\n    return maxArr;\n}\n",
  "    var sortedArr = [];\n    var max;\n    var maxIdx;\n    var nextIdx;\n    var\
    \ next;\n    while(sortedArr.length < k){\n        max = Math.max(...arr);\n \
    \       maxIdx = arr.indexOf(max);\n        sortedArr.push(max);\n        arr.splice(maxIdx,\
    \ 1);\n    }\n    return sortedArr;\n}\n", "    let max_arr = [],\n        min_arr\
    \ = [];\n    for(let i = 0; i < arr.length; i++){\n        let node = arr[i];\n\
    \        if(max_arr.length < k){\n            insert(max_arr, node);\n       \
    \ }else{\n            let node1 = max_arr[0];\n            if(node > node1){\n\
    \                min_arr.push(node1);\n                remove(max_arr, node1);\n\
    \                insert(max_arr, node);\n            }else{\n                min_arr.push(node);\n\
    \            }\n        }\n    }\n    return max_arr.concat(min_arr.sort((a, b)\
    \ => b - a));\n}\n", "    return arr.sort((a, b) => a - b).slice(-k);\n}", "\t\
    var arr = arr.sort((a,b) => {return a - b})\n\tconsole.log(arr.slice(arr.length\
    \ - k))\n}\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1,\
    \ 2, -1, -2, 1], 1)", "  let results = [];\n  let sortedArray = arr.sort((a, b)\
    \ => a - b);\n  for(let i = sortedArray.length - 1; i >= sortedArray.length -\
    \ k; i--){\n    results.push(sortedArray[i]);\n  }\n  return results;\n}", "\t\
    let result = arr.sort(function(a, b){\n\t\treturn b - a;\n\t})\n\treturn result.slice(0,\
    \ k);\n}", "\n}\n", "\n}\n", "    arr.sort(function(a, b){\n        return b -\
    \ a;\n    });\n    return arr.slice(0, k);\n}\n", "  return arr.sort((a, b) =>\
    \ b - a).slice(0, k);\n}", "    // Your code here\n}\n", "    if(arr.length ===\
    \ k){\n        return arr;\n    }\n    if(arr.length < k){\n        return [];\n\
    \    }\n    return arr.sort(function(a, b){\n        return b - a;\n    }).slice(0,\
    \ k);\n}\n", "    return arr.sort((a, b) => b - a).slice(0, k);\n  }\n  \n  //print\
    \ output\n  console.log(maximum([-3, -4, 5], 3));\n  console.log(maximum([4, -4,\
    \ 4], 2));\n  console.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));", "    return\
    \ arr.sort((a, b) => b - a).slice(0, k);\n}\n", "    let l = 0;\n    let r = arr.length\
    \ - 1;\n    let index = partition(arr, l, r);\n    while(index !== k - 1){\n \
    \       if(index > k - 1){\n            r = index - 1;\n            index = partition(arr,\
    \ l, r);\n        }\n        else{\n            l = index + 1;\n            index\
    \ = partition(arr, l, r);\n        }\n    }\n    return arr.slice(0, k);\n}\n",
  "  let maxNumbers = [];\n  for(let i = 0; i < k; i++){\n    let max = -1001;\n \
    \   let maxIndex = -1;\n    for(let j = 0; j < arr.length; j++){\n      if(arr[j]\
    \ > max){\n        max = arr[j];\n        maxIndex = j;\n      }\n    }\n    arr.splice(maxIndex,\
    \ 1);\n    maxNumbers.push(max);\n  }\n  return maxNumbers;\n}", "  return arr.sort(function(a,\
    \ b){\n    return b - a;\n  }).slice(0, k);\n}", "    return arr.sort((a, b) =>\
    \ b - a).slice(0, k);\n}\n", "    let sortedArr = arr.sort((a, b) => a - b);\n\
    \    return sortedArr.slice(sortedArr.length - k);\n}\n", "    arr.sort((a, b)\
    \ => a - b);\n    arr.length = k;\n    return arr;\n}\n", "  let highest = arr.sort((a,\
    \ b) => b - a);\n  return highest.slice(0, k);\n}\n", "  // Sorting an array\n\
    \  arr.sort(function(a, b){return a - b});\n  // Return an array with the max\
    \ values\n  return arr.slice(Math.max(arr.length - k, 0))\n}", "  arr.sort(function(a,\
    \ b){return a - b})\n  return arr.slice(arr.length - k)\n}\n", "    arr.sort(function(a,\
    \ b){return a - b});\n    arr.reverse();\n    let res = arr.slice(0, k);\n   \
    \ return res;\n}\n\nlet arr = [-3, -4, 5];\nlet k = 3;", "\tif(k === 0) return\
    \ [];\n\tif(k === arr.length) return arr;\n\tlet tempArr = [];\n\tfor(let i =\
    \ 0; i < k; i++){\n\t\ttempArr.push(arr[i]);\n\t}\n\tfor(let i = k; i < arr.length;\
    \ i++){\n\t\tfor(let j = 0; j < k; j++){\n\t\t\tif(arr[i] > tempArr[j]){\n\t\t\
    \t\ttempArr.splice(j, 0, arr[i]);\n\t\t\t\ttempArr.pop();\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn tempArr;\n}\n", "  arr.sort((a, b) => a - b)\n  return\
    \ arr.slice(arr.length - k)\n}\n", "    //sort first\n    arr.sort(function(a,\
    \ b){return a-b});\n    //slice\n    var slice = arr.slice(arr.length-k);\n  \
    \  return slice;\n}\nvar test1 = [-3, -4, 5];\nvar test2 = [4, -4, 4];\nvar test3\
    \ = [-3, 2, 1, 2, -1, -2, 1];", "\treturn arr.sort(function(a, b){return b-a}).slice(0,\
    \ k);\n}", "  return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "    let n\
    \ = arr.length;\n    if(k >= n){\n        arr.sort(function(a, b){\n         \
    \   return a - b;\n        });\n        return arr;\n    }\n    let heap = [];\n\
    \    let result = [];\n    for(let i = 0; i < k; i++){\n        heap.push(arr[i]);\n\
    \    }\n    for(let i = k; i < n; i++){\n        heap.sort(function(a, b){\n \
    \           return a - b;\n        });\n        if(arr[i] > heap[0]){\n      \
    \      heap[0] = arr[i];\n        }\n    }\n    heap.sort(function(a, b){\n  \
    \      return a - b;\n    });\n    return heap;\n}", "    let sorted = [];\n \
    \   while(sorted.length < k){\n        let max = Math.max(...arr);\n        arr.splice(arr.indexOf(max),\
    \ 1);\n        sorted.push(max);\n    }\n    return sorted;\n}\n", "  if (arr.length\
    \ === k) return arr;\n  const newArr = [];\n  for (let i = 0; i < k; i++) {\n\
    \    let max = arr[0];\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > max) {\n        max = arr[j];\n      }\n    }\n    newArr.push(max);\n   \
    \ arr.splice(arr.indexOf(max), 1);\n  }\n  return newArr;\n}\n", "  var answer\
    \ = [];\n  for(var i = 0; i < k; i++){\n    var max = arr[0];\n    var maxIndex\
    \ = 0;\n    for(var j = 0; j < arr.length; j++){\n      if(arr[j] > max){\n  \
    \      max = arr[j];\n        maxIndex = j;\n      }\n    }\n    answer.push(max);\n\
    \    arr.splice(maxIndex, 1);\n  }\n  return answer;\n}\n", "\tlet result = [];\n\
    \tfor(let i = 0; i < k; i++){\n\t\tlet max = -Infinity;\n\t\tlet idx = -1;\n\t\
    \tfor(let j = 0; j < arr.length; j++){\n\t\t\tif(arr[j] > max){\n\t\t\t\tmax =\
    \ arr[j];\n\t\t\t\tidx = j;\n\t\t\t}\n\t\t}\n\t\tresult.push(max);\n\t\tarr.splice(idx,\
    \ 1);\n\t}\n\treturn result;\n}\n\nlet arr = [-3, -4, 5];\nlet k = 3;\n\nlet arr2\
    \ = [4, -4, 4];\nlet k2 = 2;\n\nlet arr3 = [-3, 2, 1, 2, -1, -2, 1];\nlet k3 =\
    \ 1;\n", "    if(k == 0){\n        return [];\n    }\n    let sorted = arr.sort((a,\
    \ b) => b - a);\n    return sorted.slice(0, k);\n}\n", "\tif(arr.length === 0)\
    \ return null;\n\tif(arr.length === 1) return arr;\n\tif(arr.length === k) return\
    \ arr;\n\tlet temp = arr[0];\n\tfor(let i = 0; i < arr.length; i++){\n\t\tfor(let\
    \ j = i + 1; j < arr.length; j++){\n\t\t\tif(arr[i] > arr[j]){\n\t\t\t\ttemp =\
    \ arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn arr.slice(arr.length - k);\n}", "    let result = []\n    arr.sort((a,b)\
    \ => a-b)\n    for(let i = arr.length-1; i >= arr.length-k; i--){\n        result.push(arr[i])\n\
    \    }\n    return result\n}\n", "\treturn arr.sort((a, b) => a - b).slice(-k);\n\
    }", "    let start = 0;\n    let end = arr.length - 1;\n    let pivot = quickselect(arr,\
    \ start, end, arr.length - k);\n    return arr.slice(pivot + 1, arr.length);\n\
    }\n", "    if(arr.length == 0 || k == 0){\n        return [];\n    }\n    let\
    \ result = [];\n    for(let i = 0; i < k; i++){\n        let maximum = arr[i];\n\
    \        let index = i;\n        for(let j = i; j < arr.length; j++){\n      \
    \      if(arr[j] > maximum){\n                maximum = arr[j];\n            \
    \    index = j;\n            }\n        }\n        result.push(maximum);\n   \
    \     let temp = arr[i];\n        arr[i] = arr[index];\n        arr[index] = temp;\n\
    \    }\n    return result;\n}\nmodule.exports = maximum;", "    if(arr.length\
    \ === k){\n        return arr;\n    }\n    let sorted = arr.sort(function(a, b){return\
    \ a - b;});\n    let max = sorted.slice(arr.length - k);\n    return max;\n}\n\
    maximum([-3, -4, 5], 3);\nmaximum([4, -4, 4], 2);\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1);\nmaximum([-1, -1, -1, -1, -1, 1, 1, 1, 1, 1], 3);", "\tvar result =\
    \ [];\n\t// for(var i = 0; i < arr.length; i++){\n\t// \tfor(var j = 0; j < arr.length;\
    \ j++){\n\t// \t\tif(arr[i] < arr[j]){\n\t// \t\t\tvar temp = arr[i];\n\t// \t\
    \t\tarr[i] = arr[j];\n\t// \t\t\tarr[j] = temp;\n\t// \t\t}\n\t// \t}\n\t// }\n\
    \tarr.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\tif(k > arr.length){\n\t\
    \treturn arr;\n\t}\n\treturn arr.slice(arr.length - k);\n}", "  let len = arr.length\n\
    \  let temp\n  for(let i = 0; i < len; i++){\n    for(let j = 0; j < len - i -\
    \ 1; j++){\n      if(arr[j] > arr[j + 1]){\n        temp = arr[j]\n        arr[j]\
    \ = arr[j + 1]\n        arr[j + 1] = temp\n      }\n    }\n  }\n  return arr.slice(len\
    \ - k, len)\n}\n", "    let unordered = [];\n    for(let i = 0; i < k; i++){\n\
    \        let high = arr[0];\n        let index = 0;\n        for(let j = 0; j\
    \ < arr.length; j++){\n            if(arr[j] > high){\n                high =\
    \ arr[j];\n                index = j;\n            }\n        }\n        unordered.push(high);\n\
    \        arr.splice(index, 1);\n    }\n    return unordered;\n}", "\tarr.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n\treturn arr.slice(arr.length - k);\n}\n", " \
    \ const res = [];\n  while(res.length !== k){\n    res.push(Math.max(...arr));\n\
    \    arr.splice(arr.indexOf(Math.max(...arr)), 1);\n  }\n  return res;\n}\n",
  "\tvar temp = [];\n\tif(arr.length < k){\n\t\treturn arr;\n\t}\n\telse if(arr.length\
    \ === k){\n\t\tarr.sort(function(a, b){return a - b;});\n\t\treturn arr;\n\t}\n\
    \telse{\n\t\tvar left = 0;\n\t\tvar right = 0;\n\t\tfor(var i = 0; i < k; i++){\n\
    \t\t\ttemp.push(arr[i]);\n\t\t}\n\t\ttemp.sort(function(a, b){return a - b;});\n\
    \t\tfor(var j = k; j < arr.length; j++){\n\t\t\tif(arr[j] > temp[left]){\n\t\t\
    \t\ttemp[left] = arr[j];\n\t\t\t\tif(left < right){\n\t\t\t\t\tleft++;\n\t\t\t\
    \t}\n\t\t\t\telse{\n\t\t\t\t\tright++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(arr[j]\
    \ <= temp[right]){\n\t\t\t\ttemp[right] = arr[j];\n\t\t\t\tif(left < right){\n\
    \t\t\t\t\tleft++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tright++;\n\t\t\t\t}\n\t\
    \t\t}\n\t\t}\n\t\ttemp.sort(function(a, b){return a - b;});\n\t\treturn temp;\n\
    \t}\n}\n\nvar testCase1 = [-3, -4, 5];\nvar testCase2 = [4, -4, 4];\nvar testCase3\
    \ = [-3, 2, 1, 2, -1, -2, 1];\n", "\tvar max = arr.sort((a,b) => b-a).slice(0,k);\n\
    \tconsole.log(max);\n}\nmaximum([-3, -4, 5], 3);\nmaximum([4, -4, 4], 2);\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1);", "  // TODO: implement the function\n}\n", "    let\
    \ heap = new MinHeap();\n    for(let num of arr){\n        heap.push(num);\n \
    \       if(heap.size() > k){\n            heap.pop();\n        }\n    }\n    return\
    \ heap.arr.sort((a, b) => a-b);\n}", "    var maxNums = [];\n    for(var i = 0;\
    \ i < k; i++){\n        var max = -Infinity;\n        var maxIdx = -1;\n     \
    \   for(var j = 0; j < arr.length; j++){\n            if(arr[j] > max){\n    \
    \            max = arr[j];\n                maxIdx = j;\n            }\n     \
    \   }\n        maxNums.push(max);\n        arr.splice(maxIdx, 1);\n    }\n   \
    \ return maxNums;\n}\n", "    arr.sort((a, b) => b - a);\n    return arr.slice(0,\
    \ k);\n}\n", "    var temp = []\n    for(var i = 0; i < arr.length; i++){\n  \
    \      temp.push(arr[i])\n    }\n    temp.sort(function(a, b){\n        return\
    \ a - b\n    })\n    var result = []\n    for(var j = temp.length - 1; j >= temp.length\
    \ - k; j--){\n        result.push(temp[j])\n    }\n    return result\n}", "  arr.sort((a,\
    \ b) => a - b)\n  return arr.slice(arr.length - k, arr.length)\n}\n", "    let\
    \ output = arr.sort(function(a, b){return b-a})\n    output = output.slice(0,\
    \ k)\n    return output\n}", "    if(arr.length < k){\n        return arr;\n \
    \   }\n    const sol = [];\n    for(let i = 0; i < k; i++){\n        sol.push(arr[i]);\n\
    \    }\n    sol.sort((a, b) => a - b);\n    for(let i = k; i < arr.length; i++){\n\
    \        for(let j = 0; j < k; j++){\n            if(arr[i] > sol[j]){\n     \
    \           sol.splice(j, 0, arr[i]);\n                sol.pop();\n          \
    \      break;\n            }\n        }\n    }\n    return sol;\n}", "    let\
    \ length = arr.length;\n    let result = [];\n    for(let i = 0; i < length; i++){\n\
    \        let count = 0;\n        for(let j = 0; j < length; j++){\n          \
    \  if(arr[i] < arr[j]){\n                count++;\n            }\n        }\n\
    \        if(count === length - k){\n            result.push(arr[i]);\n       \
    \ }\n    }\n    return result;\n}\n", "    arr.sort(function(a, b){\n        return\
    \ b - a;\n    });\n    let out = arr.slice(0, k);\n    return out;\n}\n", "  //\
    \ const output = arr.sort((a, b) => b - a).slice(0, k);\n  // return output;\n\
    \  return arr.sort((a, b) => b - a).slice(0, k);\n}", "    var max = 0;\n    var\
    \ newArr = [];\n    arr.forEach(element => {\n        if(element > max){\n   \
    \         max = element;\n        }\n    });\n    while(newArr.length < k){\n\
    \        for(var i = 0; i < arr.length; i++){\n            if(arr[i] === max){\n\
    \                newArr.push(arr[i]);\n                arr.splice(i, 1);\n   \
    \             max = 0;\n                break;\n            }\n        }\n   \
    \ }\n    return newArr;\n}", "    return arr.sort((a, b) => a - b).slice(-k);\n\
    }", "    var sorted = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n\
    }\n", "    arr.sort(function(a, b){return a - b})\n    return arr.slice(arr.length\
    \ - k, arr.length)\n}\n", "  arr.sort((a, b) => a-b);\n  return arr.slice(arr.length\
    \ - k);\n}", "  var newArr = [];\n  var largest = 0;\n  var index = 0;\n  if(arr.length\
    \ < k)\n    k = arr.length;\n  for(var i = 0; i < k; i++){\n    for(var j = 0;\
    \ j < arr.length; j++){\n      if(arr[j] > largest){\n        largest = arr[j];\n\
    \        index = j;\n      }\n    }\n    newArr.push(largest);\n    arr.splice(index,\
    \ 1);\n    largest = 0;\n  }\n  return newArr;\n}", "    var result = [];\n  \
    \  for(var i = 0; i < k; i++){\n        var largest = arr[0];\n        var largestIndex\
    \ = 0;\n        for(var j = 1; j < arr.length; j++){\n            if(arr[j] >\
    \ largest){\n                largest = arr[j];\n                largestIndex =\
    \ j;\n            }\n        }\n        result.push(largest);\n        arr.splice(largestIndex,\
    \ 1);\n    }\n    return result;\n}", "  let result = [];\n  arr.sort((a, b) =>\
    \ b - a);\n  for(let i = 0; i < k; i++){\n    result.push(arr[i]);\n  }\n  return\
    \ result;\n}", "\tif(arr.length === 0 || k === 0){\n\t\treturn [];\n\t}\n\tif(arr.length\
    \ <= k){\n\t\treturn arr.sort((a, b) => a - b);\n\t}\n\tlet maxIdx = 0;\n\tlet\
    \ res = [];\n\tfor(let i = 0; i < k; i++){\n\t\tfor(let j = 0; j < arr.length;\
    \ j++){\n\t\t\tif(arr[j] > arr[maxIdx]){\n\t\t\t\tmaxIdx = j;\n\t\t\t}\n\t\t}\n\
    \t\tres.push(arr[maxIdx]);\n\t\tarr[maxIdx] = -Infinity;\n\t}\n\treturn res;\n\
    }", "    let i, j;\n    let n = arr.length;\n    for(i = 0; i < k; i++){\n   \
    \     for(j = i + 1; j < n; j++){\n            if(arr[i] < arr[j]){\n        \
    \        [arr[i], arr[j]] = [arr[j], arr[i]];\n            }\n        }\n    }\n\
    \    return arr.slice(0, k);\n}", "    let firstK = [];\n    for(let i = 0; i\
    \ < k; i++){\n        firstK.push(arr[i]);\n    }\n    let result = heapSort(firstK);\n\
    \    for(let i = k; i < arr.length; i++){\n        if(arr[i] > result[0]){\n \
    \           result[0] = arr[i];\n            result = heapSort(result);\n    \
    \    }\n    }\n    return result;\n}\n", "  return arr.sort((a, b) => b - a).slice(0,\
    \ k);\n}\n", "    // sort ascending\n    // return last k elements\n    return\
    \ arr.sort(function(a, b){\n        return a-b;\n    }).slice(-k);\n}", "    let\
    \ sorted = arr.sort((a, b) => b - a);\n    return sorted.slice(0, k);\n}\n", "\t\
    if(arr.length === 0 || k === 0){\n\t\treturn [];\n\t}\n\n\tif(arr.length === 1){\n\
    \t\treturn arr;\n\t}\n\n\t// case 1: finding the max\n\t// let max = arr[0];\n\
    \t// for(let i = 1; i < arr.length; i++){\n\t// \tif(arr[i] > max){\n\t// \t\t\
    max = arr[i];\n\t// \t}\n\t// }\n\n\t// case 2: finding the min\n\t// let min\
    \ = arr[0];\n\t// for(let i = 1; i < arr.length; i++){\n\t// \tif(arr[i] < min){\n\
    \t// \t\tmin = arr[i];\n\t// \t}\n\t// }\n\n\t// arr.sort(function(a, b){\n\t\
    // \treturn a - b;\n\t// });\n\n\t// let max = arr[arr.length - 1];\n\t// let\
    \ maxIndex = arr.length - 1;\n\t// let output = [];\n\t// for(let i = 0; i < k;\
    \ i++){\n\t// \toutput.push(max);\n\t// \tmaxIndex -= 1;\n\t// \tmax = arr[maxIndex];\n\
    \t// }\n\n\t// return output;\n\n\tlet min = Math.min(...arr);\n\tlet max = Math.max(...arr);\n\
    \tlet buckets = Array(max - min + 1).fill(0);\n\tfor(let i = 0; i < arr.length;\
    \ i++){\n\t\tbuckets[arr[i] - min] += 1;\n\t}\n\n\tlet output = [];\n\tlet i =\
    \ buckets.length - 1;\n\twhile(k > 0){\n\t\twhile(buckets[i] > 0){\n\t\t\toutput.push(i\
    \ + min);\n\t\t\tbuckets[i] -= 1;\n\t\t\tk -= 1;\n\t\t}\n\t\ti -= 1;\n\t}\n\n\t\
    return output;\n}\n", "\n}\n", "    if(arr.length <= k){\n        return arr;\n\
    \    }\n    const result = [];\n    for(let i = 0; i < k; i++){\n        const\
    \ max = findMax(arr);\n        result.push(max);\n        arr.splice(arr.indexOf(max),\
    \ 1);\n    }\n    return result;\n}\n", "    let sortedArr = sort(arr)\n    let\
    \ newArr = []\n    for(let i = arr.length-1; i >= arr.length-k; i--){\n      \
    \  newArr.push(sortedArr[i])\n    }\n    return newArr\n}\n", "    //array where\
    \ I'll store the k largest elements\n    var max_k = [];\n    //sort the array\
    \ in ascending order\n    arr.sort(function(a, b){return a-b});\n    //iterate\
    \ through the sorted array\n    for(var i = arr.length-1; i >= arr.length-k; i--){\n\
    \        //push the last k elements of the sorted array into the new array\n \
    \       max_k.push(arr[i]);\n    }\n    return max_k;\n}", "    let result = [];\n\
    \    while(k > 0){\n        let max = arr[0];\n        let index = 0;\n      \
    \  for(let i = 0; i < arr.length; i++){\n            if(arr[i] > max){\n     \
    \           max = arr[i];\n                index = i;\n            }\n       \
    \ }\n        result.push(max);\n        arr.splice(index, 1);\n        k--;\n\
    \    }\n    return result;\n}\n", "    let heap = [];\n    for(let num of arr){\n\
    \        addToHeap(heap, num, k);\n    }\n    return heap;\n}\n", "    var result\
    \ = arr.slice(0, k);\n    var current;\n    for(var i = k; i < arr.length; i++){\n\
    \        current = arr[i];\n        for(var j = 0; j < k; j++){\n            if(current\
    \ > result[j]){\n                var temp = result[j];\n                result[j]\
    \ = current;\n                current = temp;\n            }\n        }\n    }\n\
    \    return result;\n}\n", "    return arr.sort((a, b) => b - a).slice(0, k);\n\
    }\n", "    arr.sort((a, b) => a - b);\n    let newArr = [];\n    for(let i = 0;\
    \ i < k; i++){\n        newArr.push(arr[arr.length - 1 - i]);\n    }\n    return\
    \ newArr;\n}\n", "    // console.log(arr, k)\n    let temp = []\n    // let new_arr\
    \ = []\n    if(k>arr.length){\n        return arr\n    }\n    while(temp.length<k){\n\
    \        let max = Math.max(...arr)\n        arr.splice(arr.indexOf(max), 1)\n\
    \        temp.push(max)\n    }\n    return temp\n}", "\n}\n", "    let set = new\
    \ Set()\n    for(let i=0; i<arr.length; i++){\n        set.add(arr[i])\n    }\n\
    \    let ans = [...set].sort((a,b)=>b-a)\n    return ans.slice(0,k)\n}", "   \
    \ let sortArr = arr.sort((a, b) => b - a);\n    let newArr = [];\n    for(let\
    \ i = 0; i < k; i++){\n        newArr.push(sortArr[i]);\n    }\n    return newArr;\n\
    }", "    //code\n    arr.sort((a,b) => b-a);\n    return arr.slice(0,k);\n}\n",
  "    var maxk = [];\n    for(let i = 0; i < k; i++){\n        maxk.push(Math.max(...arr));\n\
    \        arr.splice(arr.indexOf(Math.max(...arr)), 1);\n    }\n    return maxk;\n\
    }", "    if(arr.length < k) return arr;\n    return arr.sort(function(a, b){\n\
    \        return b - a;\n    }).slice(0, k);\n}\n", "    // We will loop over the\
    \ array and use a helper function to insert each number\n    // in the resulting\
    \ array, in the correct position.\n    // If the resulting array has more than\
    \ k numbers, we will remove the first element.\n    // This process continues\
    \ until we get to the end of the input array.\n    let result = [];\n    for(let\
    \ num of arr){\n        insert(result, num);\n        if(result.length > k){\n\
    \            result.shift();\n        }\n    }\n    return result;\n}\n", "  return\
    \ arr.sort((a, b) => a - b).slice(-k);\n}", "\tvar max = [];\n\tvar sorted = arr.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n\tfor(var i = 0; i < k; i++){\n\t\tmax.push(sorted[sorted.length\
    \ - i - 1]);\n\t}\n\treturn max;\n}\n", "    let newArr = arr.sort((a, b) => b\
    \ - a)\n    return newArr.slice(0, k)\n}\n", "    let newArr = [];\n    for(let\
    \ i = 0; i < k; i++){\n        let max = Math.max(...arr);\n        newArr.push(max);\n\
    \        let index = arr.indexOf(max);\n        arr.splice(index, 1);\n    }\n\
    \    return newArr;\n}", "    var result = [];\n    if(k > arr.length) return\
    \ arr;\n    for(var i = 0; i < k; i++){\n        var max = arr[0];\n        var\
    \ index = 0;\n        for(var j = 0; j < arr.length; j++){\n            if(arr[j]\
    \ > max){\n                max = arr[j];\n                index = j;\n       \
    \     }\n        }\n        result.push(max);\n        arr.splice(index, 1);\n\
    \    }\n    return result;\n}\n", "  arr.sort((a, b) => a - b);\n  return arr.slice(arr.length\
    \ - k, arr.length);\n}\n", "    arr.sort(function(a, b){return a - b});\n    return\
    \ arr.slice(arr.length - k);\n}", "    // create a empty array to store output\n\
    \    let output = [];\n    // for loop through arr length\n    for(let i = 0;\
    \ i < arr.length; i++){\n        // check if output.length is less then k\n  \
    \      if(output.length < k){\n            // push the last element into output\n\
    \            output.push(arr[i]);\n        }else{\n            // create a variable\
    \ to store the minimum value\n            let min = Math.min(...output);\n   \
    \         // check if arr[i] is greater then the minimum value\n            if(arr[i]\
    \ > min){\n                //replace the minimum value with arr[i]\n         \
    \       output[output.indexOf(min)] = arr[i];\n            }\n        }\n    }\n\
    \    // return the output\n    return output;\n}\n", "  return arr.sort((a, b)\
    \ => b - a).slice(0, k);\n}", "  if(arr.length < k){\n    return arr.sort(function(a,\
    \ b){\n      return a-b;\n    });\n  }\n  return arr.sort(function(a, b){\n  \
    \  return a-b;\n  }).slice(arr.length-k);\n}\n", "    if(arr.length <= k){\n \
    \       return arr.sort((a,b) => b-a);\n    }\n    return [];\n}", "    arr.sort(function(a,\
    \ b){\n        return b - a;\n    });\n    return arr.slice(0, k);\n}", "  arr.sort((a,\
    \ b) => a - b);\n  return arr.slice(arr.length - k);\n}\n", "    let sorted =\
    \ arr.sort(function(a, b){return a - b})\n    return sorted.slice(sorted.length\
    \ - k, sorted.length)\n}\n", "    let sorted = arr.sort((a, b) => a - b);\n  \
    \  let max = sorted.splice(sorted.length - k, k);\n    return max;\n}\nmaximum([-3,\
    \ -4, 5], 3);\nmaximum([4, -4, 4], 2);\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1);\n",
  "  return arr.sort((a, b) => b - a).slice(0, k);\n}\n", "    let sorted = arr.sort((a,\
    \ b) => a - b);\n    let result = sorted.splice(sorted.length - k, k);\n    return\
    \ result;\n}\n\nmodule.exports = maximum;", "    const maxArr = [];\n    for(let\
    \ i = 0; i < k; i++){\n        maxArr.push(Math.max(...arr));\n        let index\
    \ = arr.indexOf(Math.max(...arr));\n        arr.splice(index, 1);\n    }\n   \
    \ return maxArr;\n}\n", "  let result = [...arr].sort((a, b) => b - a).slice(0,\
    \ k);\n  return result;\n}\n", "  var output = [];\n  var temp = [];\n  var j\
    \ = 0;\n  for(var i = 0; i < arr.length; i++){\n    if(j === k){\n      output.sort(function(a,\
    \ b){\n        return a - b;\n      });\n      break;\n    }\n    output.push(arr[i]);\n\
    \    j++;\n  }\n  for(var m = 0; m < output.length; m++){\n    temp.push(output[m]);\n\
    \  }\n  for(var n = 0; n < arr.length; n++){\n    if(output.length < k){\n   \
    \   output.push(arr[n]);\n    }\n    for(var p = 0; p < output.length; p++){\n\
    \      if(output[p] > arr[n]){\n        output.pop();\n        output.push(arr[n]);\n\
    \        break;\n      }\n    }\n  }\n  var result = output.slice(output.length\
    \ - k, output.length);\n  return result;\n}", "    arr.sort((a, b) => b - a);\n\
    \    return arr.slice(0, k);\n}", "  let first = arr.sort((a, b) => b - a);\n\
    \  let result = first.slice(0, k);\n  return result;\n}", "    var results = arr.sort(function(a,\
    \ b){\n        return b - a;\n    });\n    return results.slice(0, k);\n}", " \
    \   var sorted = arr.sort((a, b) => a - b)\n    var max_k = sorted.slice(sorted.length\
    \ - k, sorted.length)\n    return max_k\n}", "\n}\n", "    //declare a new array\
    \ to return\n    let newArr = [];\n    //sort the array by descending order\n\
    \    arr.sort((a, b) => b - a);\n    //looping through the array\n    for(let\
    \ i = 0; i < k; i++){\n        //add the element into the new array\n        newArr.push(arr[i]);\n\
    \    }\n    //return the new array\n    return newArr;\n}", "  // code here\n\
    }\nmodule.exports = maximum;", "    //...\n    arr.sort((a,b) => b-a)\n    return\
    \ arr.slice(0,k)\n}\n", "    let n = arr.length;\n    if(k >= n){\n        return\
    \ arr.sort((a, b) => b - a);\n    }\n    let heap = arr.slice(0, k);\n    heap\
    \ = heap.sort((a, b) => a - b);\n    for(let i = k; i < n; i++){\n        if(arr[i]\
    \ > heap[0]){\n            heap[0] = arr[i];\n            heap.sort((a, b) =>\
    \ a - b);\n        }\n    }\n    return heap.sort((a, b) => b - a);\n}\n", " \
    \ if (arr.length === 0) return [];\n  let i = 0;\n  while (arr.length > k){\n\
    \    if (arr[i] > arr[i+1]){\n      arr.splice(i+1, 1);\n      i = 0;\n    } else\
    \ {\n      i++;\n    }\n  }\n  return arr;\n}\n\nmodule.exports = {\n  maximum\n\
    }", "\tvar result = [];\n\tarr.sort(function(a, b){\n\t\treturn a-b;\n\t});\n\t\
    for(var i = arr.length-1; i > arr.length-k-1; i--){\n\t\tresult.push(arr[i]);\n\
    \t}\n\treturn result;\n}\n", "    let newArr = []\n    for(let i = 0; i < k; i++){\n\
    \        max = arr[0]\n        for(let j = 0; j < arr.length; j++){\n        \
    \    if(arr[j] > max){\n                max = arr[j]\n            }\n        }\n\
    \        newArr.push(max)\n        arr.splice(arr.indexOf(max), 1)\n    }\n  \
    \  return newArr.sort((a, b) => a - b)\n}\n", "  return arr.sort((a, b) => b -\
    \ a).slice(0, k);\n}\nmaximum([-3, -4, 5], 3); // [-4, -3, 5]\nmaximum([4, -4,\
    \ 4], 2); // [4, 4]\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1); // [2]\n", "  return\
    \ arr.sort((a, b) => a - b).slice(-k);\n}", "    var swap = function(array, i,\
    \ j){\n        let temp = array[i];\n        array[i] = array[j];\n        array[j]\
    \ = temp;\n    }\n    let maxHeap = arr.slice(0, k);\n    let n = maxHeap.length;\n\
    \    for(let i = Math.floor(n/2); i >= 0; i--){\n        let maxIndex = i;\n \
    \       let leftChild = 2 * i + 1;\n        let rightChild = 2 * i + 2;\n    \
    \    if(leftChild < n && maxHeap[leftChild] > maxHeap[maxIndex]){\n          \
    \  maxIndex = leftChild;\n        }\n        if(rightChild < n && maxHeap[rightChild]\
    \ > maxHeap[maxIndex]){\n            maxIndex = rightChild;\n        }\n     \
    \   if(maxIndex != i){\n            swap(maxHeap, i, maxIndex);\n        }\n \
    \   }\n    for(let i = k; i < arr.length; i++){\n        if(arr[i] > maxHeap[0]){\n\
    \            maxHeap[0] = arr[i];\n            let maxIndex = 0;\n           \
    \ let leftChild = 2 * maxIndex + 1;\n            let rightChild = 2 * maxIndex\
    \ + 2;\n            if(leftChild < n && maxHeap[leftChild] > maxHeap[maxIndex]){\n\
    \                maxIndex = leftChild;\n            }\n            if(rightChild\
    \ < n && maxHeap[rightChild] > maxHeap[maxIndex]){\n                maxIndex =\
    \ rightChild;\n            }\n            if(maxIndex != i){\n               \
    \ swap(maxHeap, i, maxIndex);\n            }\n        }\n    }\n    return maxHeap;\n\
    }\n", "  arr.sort((a, b) => a - b);\n  const result = [];\n  for (let i = 0; i\
    \ < k; i++){\n    result.push(arr[arr.length - (i + 1)]);\n  }\n  return result;\n\
    }\n", "    var mySet = new Set();\n    var result = new Array(k);\n    for(var\
    \ i = 0; i < arr.length; i++){\n        mySet.add(arr[i]);\n    }\n    var counter\
    \ = 0;\n    for(var j = mySet.size - 1; j >= 0; j--){\n        result[counter]\
    \ = mySet.values[j];\n        counter++;\n    }\n    return result;\n}\n", " \
    \   let sorted = arr.sort((a, b) => a - b);\n    return sorted.slice(sorted.length\
    \ - k);\n}", "    let result = []\n    let maxIndex = 0\n    for(let i = 0; i\
    \ < k; i++){\n        maxIndex = 0\n        for(let j = 0; j < arr.length; j++){\n\
    \            if(arr[j] > arr[maxIndex]){\n                maxIndex = j\n     \
    \       }\n        }\n        result.push(arr[maxIndex])\n        arr.splice(maxIndex,\
    \ 1)\n    }\n    return result\n}", "    let result = [];\n    for(let i = 0;\
    \ i < k; i++){\n        let maxNum = arr[0];\n        let maxNumIndex = 0;\n \
    \       for(let j = 0; j < arr.length; j++){\n            if(arr[j] > maxNum){\n\
    \                maxNum = arr[j];\n                maxNumIndex = j;\n        \
    \    }\n        }\n        result.push(maxNum);\n        arr.splice(maxNumIndex,\
    \ 1);\n    }\n    return result;\n}", "    var maximum = [];\n    for(var i =\
    \ 0; i < k; i++){\n        maximum.push(arr[i]);\n    }\n    maximum.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    for(var i = k; i < arr.length; i++){\n\
    \        if(arr[i] > maximum[0]){\n            maximum[0] = arr[i];\n        \
    \    maximum.sort(function(a, b){\n                return a - b;\n           \
    \ });\n        }\n    }\n    return maximum;\n}", "\tvar arrSort = arr.sort(function(a,\
    \ b){return a - b});\n\tvar arrResult = [];\n\tfor(var i = 0; i < k; i++){\n\t\
    \tarrResult.push(arrSort[arrSort.length - 1 - i]);\n\t}\n\treturn arrResult;\n\
    }", "  //your code goes here\n}\n", "    let result = [];\n    if(k === 0) return\
    \ result;\n    let max = Math.max(...arr);\n    if(k === 1) return [max];\n  \
    \  arr.splice(arr.indexOf(max), 1);\n    let min = Math.min(...arr);\n    if(k\
    \ === 2) return [max, min];\n    for(let i = 0; i < k - 1; i++){\n        if(arr.length\
    \ === 1){\n            result.push(arr[0]);\n            return result;\n    \
    \    }\n        result.push(max);\n        arr.splice(arr.indexOf(max), 1);\n\
    \        max = Math.max(...arr);\n        if(i === k - 2) result.push(max);\n\
    \    }\n    return result;\n}", "    let max = null;\n    for(let i = 0; i < k;\
    \ i++){\n        max = arr[i];\n        for(let j = i; j < arr.length; j++){\n\
    \            if(arr[j] > max){\n                let temp = arr[i];\n         \
    \       arr[i] = arr[j];\n                arr[j] = temp;\n                max\
    \ = arr[i];\n            }\n        }\n    }\n    return arr.slice(0, k);\n}\n",
  "  // your code here\n}\n\nmodule.exports = { maximum };", "    return arr.sort((a,\
    \ b) => b - a).slice(0, k);\n}", "    var sorted = arr.sort((a, b) => b - a);\n\
    \    return sorted.slice(0, k);\n}\n", "    // Your code here\n    var lengthArr\
    \ = arr.length;\n    var arrOuput = [];\n    var arrTemp = [];\n    var index\
    \ = 0;\n    var loopNum = 0;\n    var tempNum = 0;\n    var tempNum2 = 0;\n  \
    \  var indexOfMax = 0;\n    var maxNum = 0;\n    var maxNumTemp = 0;\n    var\
    \ loopNum2 = 0;\n    var lengthArr2 = 0;\n    if(k < lengthArr){\n        for(index;\
    \ index < k; index++){\n            maxNum = 0;\n            for(loopNum = 0;\
    \ loopNum < lengthArr; loopNum++){\n                tempNum = arr[loopNum];\n\
    \                if(tempNum > maxNum){\n                    maxNum = tempNum;\n\
    \                    indexOfMax = loopNum;\n                }\n            }\n\
    \            arrOuput.push(maxNum);\n            arr[indexOfMax] = 0;\n      \
    \  }\n    }else{\n        arrOuput = arr;\n    }\n    return arrOuput;\n}", " \
    \   var sorted = arr.sort(function(a, b){return a - b;});\n    return sorted.slice(sorted.length\
    \ - k, sorted.length);\n}", "  //...\n}\n", "  const sortedArr = arr.sort((a,\
    \ b) => b - a);\n  return sortedArr.slice(0, k);\n}\n", "  let min = arr[0]\n\
    \  let largest = []\n  for(let i = 0; i < arr.length; i++){\n    if(largest.length\
    \ < k){\n      largest.push(arr[i])\n    }\n    if(arr[i] > min){\n      let idx\
    \ = largest.indexOf(min)\n      if(idx === -1){\n        largest.push(arr[i])\n\
    \      }else{\n        largest[idx] = arr[i]\n      }\n    }\n    min = Math.min(...largest)\n\
    \  }\n  return largest\n}\n\nmodule.exports = maximum", "    return arr.sort((a,\
    \ b) => a - b).slice(-k);\n}", "\treturn arr.sort((a, b) => b - a).slice(0, k);\n\
    }", "    let tempArr = arr.slice();\n    let finalArr = [];\n    while(k > 0){\n\
    \        finalArr.push(Math.max(...tempArr));\n        let index = tempArr.indexOf(Math.max(...tempArr));\n\
    \        tempArr.splice(index, 1);\n        k--;\n    }\n    return finalArr;\n\
    }\n", "    let result = []\n    for(let i = 0; i < k; i++){\n        let currentMax\
    \ = arr[0]\n        let currentMaxIndex = 0\n        for(let j = 0; j < arr.length;\
    \ j++){\n            if(arr[j] > currentMax){\n                currentMax = arr[j]\n\
    \                currentMaxIndex = j\n            }\n        }\n        result.push(currentMax)\n\
    \        arr.splice(currentMaxIndex, 1)\n    }\n    return result\n}\n", "   \
    \ let max = [];\n    for(let i = 0; i < k; i++){\n        let maxValue = 0;\n\
    \        let maxIndex = 0;\n        for(let j = 0; j < arr.length; j++){\n   \
    \         if(arr[j] > maxValue){\n                maxValue = arr[j];\n       \
    \         maxIndex = j;\n            }\n        }\n        max.push(maxValue);\n\
    \        arr.splice(maxIndex, 1);\n    }\n    return max;\n}", "\tarr.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n\treturn arr.slice(arr.length - k);\n}\n", " \
    \   //your code here\n}\n", "  arr.sort((a, b) => b - a)\n  arr.length = k\n \
    \ return arr\n}\n", "    return arr.sort((a, b) => a - b).slice(-k);\n}", "  \
    \  return arr.sort((a, b) => b - a).slice(0, k);\n  }\n  \n  console.log(maximum([4,\
    \ -4, 4], 2));", "    let arrOfMaxes = [];\n    for(let i = 0; i < k; i++){\n\
    \        if(arrOfMaxes.length === 0){\n            arrOfMaxes.push(arr[i]);\n\
    \        } else {\n            for(let j = 0; j < arrOfMaxes.length; j++){\n \
    \               if(arr[i] > arrOfMaxes[j]){\n                    arrOfMaxes.splice(j,\
    \ 0, arr[i]);\n                    break;\n                }\n            }\n\
    \        }\n    }\n    return arrOfMaxes;\n}", "    var max = arr.sort((a,b) =>\
    \ a-b).splice(arr.length-k, arr.length);\n    return max;\n}", "  // Write your\
    \ code here\n  \n}", "\tlet result = [];\n\tfor(var i = 0; i < k; i++){\n\t\t\
    result.push(Math.max(...arr));\n\t\tarr.splice(arr.indexOf(Math.max(...arr)),\
    \ 1);\n\t}\n\treturn result;\n}", "    let answer = []\n    arr.sort((a,b) =>\
    \ b-a)\n    for(let i = 0; i < k; i++){\n        answer.push(arr[i])\n    }\n\
    \    return answer\n}", "\t//!solution:\n    let sorted = arr.sort((a, b) => a\
    \ - b)\n    let output = sorted.slice(sorted.length - k, sorted.length)\n    return\
    \ output\n}", "    let result = [];\n    let tempArray = arr.slice(0);\n    for(let\
    \ i = 0; i < k; i++){\n        let maxNum = Math.max(...tempArray);\n        result.push(maxNum);\n\
    \        tempArray.splice(tempArray.indexOf(maxNum), 1);\n    }\n    return result;\n\
    }", "    let sorted = arr.sort((a, b) => b - a);\n    sorted.splice(k, sorted.length\
    \ - k);\n    return sorted;\n}\n", "    // TODO \n    arr.sort(function(a, b){\n\
    \        return a - b;\n    });\n    return arr.slice(arr.length - k, arr.length);\n\
    }", "    arr.sort(function(a, b){\n        return b - a;\n    });\n    return\
    \ arr.slice(0, k);\n}\n", "    for(let i = 0; i < arr.length; i++){\n        let\
    \ j = i;\n        while(j > 0 && arr[j-1] < arr[j]){\n            [arr[j-1], arr[j]]\
    \ = [arr[j], arr[j-1]];\n            j--;\n        }\n    }\n    return arr.slice(arr.length\
    \ - k, arr.length);\n}", "    // sort the array in descending order\n    // slice\
    \ the first k elements\n    return arr.sort((a, b) => b - a).slice(0, k);\n}",
  "    let result = [];\n    if(k >= arr.length) return arr.sort((a,b) => b-a);\n\
    \    for(let i = 0; i < k; i++){\n        let currMax = Math.max(...arr);\n  \
    \      result.push(currMax);\n        arr.splice(arr.indexOf(currMax), 1);\n \
    \   }\n    return result;\n}", "  if (arr.length === 0) return arr;\n  arr.sort((a,\
    \ b) => b - a);\n  let max = arr.slice(0, k);\n  return max;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
