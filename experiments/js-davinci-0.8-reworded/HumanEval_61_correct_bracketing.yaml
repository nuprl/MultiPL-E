name: HumanEval_61_correct_bracketing
language: js
prompt: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
  )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
  (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
  (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
  ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
  ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
  (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
  )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
  ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n\
  }\n\ntest();"
completions: ["    var opens = [];\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            opens.push(brackets[i]);\n  \
    \      }\n        else if (brackets[i] == \")\"){\n            if (opens.length\
    \ > 0){\n                opens.pop();\n            }\n            else {\n   \
    \             return false;\n            }\n        }\n    }\n    if (opens.length\
    \ == 0){\n        return true;\n    }\n    else {\n        return false;\n   \
    \ }\n}", "  var open = 0;\n  for (var i = 0; i < brackets.length; i++) {\n   \
    \ if (brackets[i] == \"(\"){\n      open++;\n    } else if (brackets[i] == \"\
    )\"){\n      open--;\n    } else {\n      return false;\n    }\n    if (open <\
    \ 0){\n      return false;\n    }\n  }\n  return open == 0;\n}\n", "\tvar count\
    \ = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] ==\
    \ \"(\") {\n\t\t\tcount += 1;\n\t\t} else if (brackets[i] == \")\") {\n\t\t\t\
    count -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return count == 0;\n}\n", "  var count = 0;\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      count += 1;\n    } else if (brackets[i]\
    \ === \")\") {\n      count -= 1;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}", "    var left_brackets = 0;\n    for (i=0;\
    \ i<brackets.length; i++){\n        if (brackets[i]==\"(\"){\n            left_brackets\
    \ = left_brackets + 1;\n        }\n        else if (brackets[i]==\")\"){\n   \
    \         left_brackets = left_brackets - 1;\n        }\n        if (left_brackets\
    \ < 0){\n            return false;\n        }\n    }\n    if (left_brackets ==\
    \ 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\n", "    // your code here\n    let count = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === '(') {\n            count += 1;\n      \
    \  } else if (brackets[i] === ')') {\n            count -= 1;\n        }\n   \
    \     if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n", "    var open = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            open += 1;\n        }\n\
    \        else if (brackets[i] == \")\"){\n            open -= 1;\n        }\n\
    \        if (open < 0){\n            return false;\n        }\n    }\n    return\
    \ open == 0;\n}", "  return brackets.replace(/[^()]/g, '').split('').reduce(function(previous,\
    \ current, index, array){\n    if(current == ')') {\n      return previous - 1;\n\
    \    } else {\n      return previous + 1;\n    }\n  }, 0) == 0;\n}\n", "  let\
    \ opened = 0;\n  for (let i = 0; i < brackets.length; i++){\n    if (brackets[i]\
    \ == \"(\"){\n      opened += 1;\n    } else if (brackets[i] == \")\"){\n    \
    \  opened -= 1;\n    }\n    if (opened < 0){\n      return false;\n    }\n  }\n\
    \  return opened == 0;\n}", "    var bracketOpenCount = 0;\n    var bracketCloseCount\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ == \"(\"){\n            bracketOpenCount++;\n        } else if (brackets[i]\
    \ == \")\"){\n            bracketCloseCount++;\n        }\n    }\n    if (bracketOpenCount\
    \ === bracketCloseCount){\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "  var count = 0;\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      count += 1;\n    } else if (brackets[i]\
    \ === \")\") {\n      count -= 1;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "\t// init\n\tvar current_bracket =\
    \ brackets[0];\n\tvar stack = [];\n\tfor (var i = 0; i < brackets.length; i++)\
    \ {\n\t\tcurrent_bracket = brackets[i];\n\t\tif (current_bracket == '(') {\n\t\
    \t\tstack.push(current_bracket);\n\t\t} else if (current_bracket == ')') {\n\t\
    \t\tstack.pop();\n\t\t}\n\t}\n\tif (stack.length == 0) {\n\t\treturn true;\n\t\
    } else {\n\t\treturn false;\n\t}\n}\n\n", "    let bracket_count = 0;\n    let\
    \ result = true;\n    for (let i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] === \"(\") {\n            bracket_count += 1;\n        } else if\
    \ (brackets[i] === \")\") {\n            bracket_count -= 1;\n        }\n    \
    \    if (bracket_count < 0) {\n            result = false;\n        }\n    }\n\
    \    if (bracket_count === 0) {\n        return result;\n    } else {\n      \
    \  return false;\n    }\n}\n", "\treturn !brackets.split(\"\").filter(function(b){\n\
    \t\treturn b == \"(\"\n\t}).reduce(function(s,b){\n\t\treturn s - 1\n\t},0)\n\
    }\n\n", "    var opening = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            opening += 1;\n        }\n  \
    \      else if (brackets[i] == \")\"){\n            opening -= 1;\n        }\n\
    \        if (opening < 0){\n            return false;\n        }\n    }\n    if\
    \ (opening == 0){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n", "    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\") {\n            count++;\n        }\n      \
    \  else if (brackets[i] == \")\") {\n            count--;\n        }\n       \
    \ if (count < 0) {\n            return false;\n        }\n    }\n    return count\
    \ == 0;\n}\n", "    var arr = [];\n    var counter = 0;\n    for(var i = 0; i\
    \ < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            arr.push(brackets[i]);\n\
    \        }\n        else if(brackets[i] == \")\"){\n            if(arr.length\
    \ == 0){\n                return false;\n            }\n            else{\n  \
    \              arr.pop();\n            }\n        }\n    }\n    if(arr.length\
    \ != 0){\n        return false;\n    }\n    return true;\n}", "    var stack =\
    \ [];\n    for (var i = 0; i < brackets.length; i++){\n        var c = brackets[i];\n\
    \        if (c == \"(\") {\n            stack.push(c);\n        } else if (c ==\
    \ \")\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n", "  var count = 0;\n  for (var i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"(\") {\n      count += 1;\n    } else if (brackets[i]\
    \ === \")\") {\n      count -= 1;\n    } else {\n      return false;\n    }\n\
    \    if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n\
    }\n\n", "    // here is my solution...feel free to do it differently!\n    count\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++){\n        char = brackets[i];\n\
    \        if (char == \"(\"){\n            count += 1;\n        }\n        else\
    \ if (char == \")\"){\n            count -= 1;\n        }\n        if (count <\
    \ 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    \n", "    // TODO: implement this!\n    return false;\n}\n", "\tif(brackets.indexOf(\"\
    (\") == -1 && brackets.indexOf(\")\") != -1){\n\t\treturn false;\n\t}\n\tif(brackets.indexOf(\"\
    (\") != -1 && brackets.indexOf(\")\") == -1){\n\t\treturn false;\n\t}\n\t//check\
    \ if the number of \"(\" is not same as \")\"\n\tif(brackets.indexOf(\"(\") !=\
    \ -1 && brackets.indexOf(\")\") != -1){\n\t\tvar left = 0;\n\t\tvar right = 0;\n\
    \t\tfor(var i = 0; i < brackets.length; i++){\n\t\t\tif(brackets[i] == \"(\"){\n\
    \t\t\t\tleft++;\n\t\t\t}\n\t\t\tif(brackets[i] == \")\"){\n\t\t\t\tright++;\n\t\
    \t\t}\n\t\t}\n\t\tif(left != right){\n\t\t\treturn false;\n\t\t}\n\t}\n\t//now\
    \ check if there is a \")\" before a \"(\"\n\tvar flag = true;\n\tfor(var i =\
    \ 0; i < brackets.length; i++){\n\t\tif(brackets[i] == \")\" && brackets[i-1]\
    \ != \"(\"){\n\t\t\tflag = false;\n\t\t}\n\t}\n\treturn flag;\n}\n", "    // base\
    \ case\n    if (brackets.length <= 1){\n        return false;\n    }\n    // recursive\
    \ case\n    var first_char = brackets[0];\n    var sub_string = brackets.slice(1);\n\
    \    if (first_char === '('){\n        return correct_bracketing(sub_string);\n\
    \    }\n    else {\n        // the first character is a ')'\n        if (sub_string[0]\
    \ === ')'){\n            return correct_bracketing(sub_string.slice(1));\n   \
    \     }\n        else {\n            return false;\n        }\n    }\n}\n", " \
    \ if (brackets[0] == \")\"){\n    return false;\n  }\n  for (var i = 1; i < brackets.length;\
    \ i++) {\n    if (brackets[i] == \")\"){\n      if (brackets[i-1] == \"(\"){\n\
    \        brackets = brackets.slice(0,i-1) + brackets.slice(i+1,brackets.length);\n\
    \        i -= 2;\n      }\n      else {\n        return false;\n      }\n    }\n\
    \  }\n  if (brackets.length == 0){\n    return true;\n  }\n  else {\n    return\
    \ false;\n  }\n}\n", "\tvar i = 0;\n\twhile (i < brackets.length){\n\t\tif (brackets[i]\
    \ === \"(\" && brackets[i+1] === \")\"){\n\t\t\tbrackets = brackets.slice(0,i)\
    \ + brackets.slice(i+2, brackets.length);\n\t\t\ti = 0;\n\t\t}\n\t\telse{\n\t\t\
    \ti += 1;\n\t\t}\n\t}\n\tif (brackets.length === 0){\n\t\treturn true;\n\t}\n\t\
    else{\n\t\treturn false;\n\t}\n}\n", "  for (var i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] == \"(\" && brackets[i + 1] == \")\") {\n      brackets\
    \ = brackets.substring(0, i) + brackets.substring(i + 2);\n      i = -1;\n   \
    \ }\n  }\n  if (brackets == \"\") {\n    return true;\n  }\n  else {\n    return\
    \ false;\n  }\n}", "\tif(brackets == \"\"){\n\t\treturn true;\n\t}\n\telse if(brackets[0]\
    \ == \")\" || brackets[brackets.length-1] == \"(\"){\n\t\treturn false;\n\t}\n\
    \telse{\n\t\tvar left_brackets = 0;\n\t\tvar right_brackets = 0;\n\t\tfor(var\
    \ i = 0; i < brackets.length; i++){\n\t\t\tif(brackets[i] == \"(\"){\n\t\t\t\t\
    left_brackets += 1;\n\t\t\t}\n\t\t\telse if(brackets[i] == \")\"){\n\t\t\t\tright_brackets\
    \ += 1;\n\t\t\t}\n\t\t}\n\t\tif(left_brackets == right_brackets){\n\t\t\treturn\
    \ true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n}\n", "    for(let\
    \ char of brackets){\n      brackets.includes(\"(\") && brackets.includes(\")\"\
    ) ? true : false;\n    }\n    return true;\n  }\n  console.log(correct_bracketing(\"\
    ()\"));\n\n\n  //=======================================\n  // Write a function\
    \ that takes a string and returns the same string", "  if (brackets.length % 2\
    \ !== 0) {\n    return false;\n  }\n\n  let count = 0;\n  for (let i = 0; i <\
    \ brackets.length; i++){\n    if (brackets[i] === \"(\") {\n      count += 1;\n\
    \    } else {\n      count -= 1;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "\tvar count=0;\n\tfor(var i=0;i<brackets.length;i++){\n\
    \t\tif(brackets[i]==\"(\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(brackets[i]==\"\
    )\"){\n\t\t\tcount--;\n\t\t}\n\t\tif(count<0){\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif(count==0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n\
    \n", "    // your code here\n    if (brackets.length == 0){\n        return true;\n\
    \    }\n\n    var open_count = 0;\n    var close_count = 0;\n\n    for (var i\
    \ = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n      \
    \      open_count++;\n        }\n        else{\n            close_count++;\n \
    \       }\n    }\n\n    if (open_count != close_count){\n        return false;\n\
    \    }\n\n    return true;\n}\n", "    for(let i = 0; i < brackets.length; i++){\n\
    \        if(brackets[i] === \"(\" && brackets[i+1] === \")\"){\n            brackets\
    \ = brackets.slice(0, i) + brackets.slice(i+2);\n            i = -1;\n       \
    \ }\n    }\n    return brackets === \"\";\n}\n", "\tlet left_par = 0;\n\tlet right_par\
    \ = 0;\n\tfor (let i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == \"\
    (\"){\n\t\t\tleft_par += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\"){\n\t\t\t\
    right_par += 1;\n\t\t}\n\t}\n\tif (left_par == right_par){\n\t\treturn true;\n\
    \t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "\tif (brackets.length % 2 == 1) return\
    \ false;\n\tvar result = 0;\n\tfor (var i = 0; i < brackets.length; i++){\n\t\t\
    if (brackets[i] == \"(\") {\n\t\t\tresult++;\n\t\t} else {\n\t\t\tresult--;\n\t\
    \t}\n\t\tif (result < 0) return false;\n\t}\n\treturn result == 0;\n}\n", "  var\
    \ open = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      open++;\n    } else if (brackets[i] == \")\") {\n      open--;\n\
    \    }\n    if (open < 0) {\n      return false;\n    }\n  }\n  return open ==\
    \ 0;\n}\n", "    //your code here\n}\n", "    var len = brackets.length;\n   \
    \ var braces_count = 0;\n    for(var i = 0; i < len; i++){\n        if(brackets[i]\
    \ == \"(\"){\n            braces_count++;\n        }else if(brackets[i] == \"\
    )\"){\n            braces_count--;\n        }\n        if(braces_count < 0){\n\
    \            return false;\n        }\n    }\n    if(braces_count == 0){\n   \
    \     return true;\n    }else{\n        return false;\n    }\n}\n", "\tvar openCount\
    \ = 0;\n\tvar closeCount = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\
    \t\tif (brackets[i] === \"(\") {\n\t\t\topenCount += 1;\n\t\t}\n\t\telse if (brackets[i]\
    \ === \")\") {\n\t\t\tcloseCount += 1;\n\t\t}\n\t}\n\tif (openCount === closeCount)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\n\n", "    //\
    \ if brackets is empty\n    if(brackets.length == 0){\n        return true;\n\
    \    }\n    // if the length of brackets is odd\n    if(brackets.length % 2 ==\
    \ 1){\n        return false;\n    }\n    // if the first bracket is a closing\
    \ bracket\n    if(brackets[0] == \")\"){\n        return false;\n    }\n    var\
    \ openCount = 0;\n    var closeCount = 0;\n    // loops to count number of open\
    \ and closing brackets\n    for(var i = 0; i < brackets.length; i++){\n      \
    \  if(brackets[i] == \"(\"){\n            openCount++;\n        }\n        if(brackets[i]\
    \ == \")\"){\n            closeCount++;\n        }\n    }\n    // checks to see\
    \ if the number of open brackets equals the number of closing brackets\n    if(openCount\
    \ == closeCount){\n        return true;\n    }\n    return false;\n}\n", "\tlet\
    \ opening = 0;\n\tlet closing = 0;\n\tfor (var i = 0; i < brackets.length; i++)\
    \ {\n\t\tif (brackets[i] == \"(\") {\n\t\t\topening += 1;\n\t\t}\n\t\telse if\
    \ (brackets[i] == \")\") {\n\t\t\tclosing += 1;\n\t\t}\n\t}\n\tif (opening ==\
    \ closing) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}", " \
    \   //\n    // your code here\n    //\n}\n", "\tvar count = 0;\n\tvar lastCount\
    \ = 0;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] == \"\
    (\"){\n\t\t\tcount++;\n\t\t}else if(brackets[i] == \")\"){\n\t\t\tcount--;\n\t\
    \t}\n\t\tif(count < 0){\n\t\t\treturn false;\n\t\t}\n\t\tif(count >= lastCount){\n\
    \t\t\tlastCount = count;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(count\
    \ == 0){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n", "\tfor(var\
    \ i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === \"(\" && brackets[i\
    \ + 1] === \")\"){\n\t\t\treturn true;\n\t\t}\n\t\tif(brackets[i] === \")\"){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n}", "\tvar balance = 0;\n\tfor (var i = 0; i\
    \ < brackets.length; i++){\n\t\tif (brackets[i] === \"(\"){\n\t\t\tbalance +=\
    \ 1;\n\t\t}\n\t\telse if (brackets[i] === \")\"){\n\t\t\tbalance -= 1;\n\t\t}\n\
    \t\tif (balance < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn balance === 0;\n\
    }\n", "\tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif\
    \ (brackets[i] == \"(\") {\n\t\t\tcount += 1;\n\t\t} else if (brackets[i] == \"\
    )\") {\n\t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn count == 0;\n}\n", "  var bracketsArray = brackets.split(\"\
    \");\n  var openBrackets = 0;\n  for (var i = 0; i < bracketsArray.length; i++)\
    \ {\n    if (bracketsArray[i] === \"(\") {\n      openBrackets += 1;\n    }\n\
    \    else if (bracketsArray[i] === \")\") {\n      openBrackets -= 1;\n    }\n\
    \    if (openBrackets < 0) {\n      return false;\n    }\n  }\n  if (openBrackets\
    \ === 0) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n", " \
    \ var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\"){\n      count += 1;\n    } else if (brackets[i] == \")\"){\n     \
    \ count -= 1;\n    }\n    if (count < 0){\n      return false;\n    }\n  }\n \
    \ return count == 0;\n}\n", "    var open = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            open += 1;\n        }\n\
    \        else if (brackets[i] == \")\"){\n            open -= 1;\n        }\n\
    \        if (open < 0){\n            return false;\n        }\n    }\n    return\
    \ open == 0;\n}", "\tvar stack = [];\n\tvar count = 0;\n\tfor(var i = 0; i < brackets.length;\
    \ i++){\n\t\tvar item = brackets[i];\n\t\tif(item == '('){\n\t\t\tstack.push(item);\n\
    \t\t}\n\t\telse if(item == ')'){\n\t\t\tif(stack.length == 0){\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.length\
    \ == 0 && count == 0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t\
    }\n}\n", "    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            open += 1;\n        }\n     \
    \   else if (brackets[i] == \")\"){\n            open -= 1;\n        }\n     \
    \   if (open < 0){\n            return false;\n        }\n    }\n    return open\
    \ == 0;\n}", "    var a=0;\n    for(var i=0;i<brackets.length;i++){\n        if(brackets[i]==\"\
    (\"){\n            a=a+1;\n        }\n        else if(brackets[i]==\")\"){\n \
    \           a=a-1;\n        }\n        if(a<0){\n            return false;\n \
    \       }\n    }\n    if(a==0){\n        return true;\n    }\n    else{\n    \
    \    return false;\n    }\n}", "    var count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            count += 1;\n       \
    \ }\n        else{\n            count -= 1;\n        }\n        if (count < 0){\n\
    \            return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n", "    var open =\
    \ [];\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ == \"(\"){\n            open.push(brackets[i]);\n        } else if (brackets[i]\
    \ == \")\"){\n            if (open.length == 0){\n                return false;\n\
    \            } else {\n                open.pop();\n            }\n        }\n\
    \    }\n    if (open.length == 0){\n        return true;\n    } else {\n     \
    \   return false;\n    }\n}\n", "    var count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"(\") {\n            count += 1;\n     \
    \   } else if (brackets[i] == \")\") {\n            count -= 1;\n        }\n \
    \       if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count == 0;\n}\n", "  var bracketArray = brackets.split(\"\");\n  var count\
    \ = 0;\n  for (var i = 0; i < bracketArray.length; i++) {\n    if (bracketArray[i]\
    \ === \"(\") {\n      count++;\n    } else if (bracketArray[i] === \")\") {\n\
    \      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  if (count === 0) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n", "    var opencount = 0;\n    var closecount = 0;\n    for (var i = 0; i\
    \ < brackets.length; i++){\n      if (brackets[i] == \"(\"){\n        opencount++;\n\
    \      }\n      else if (brackets[i] == \")\"){\n        closecount++;\n     \
    \ }\n    }\n    if (opencount == closecount){\n      return true;\n    }\n   \
    \ else {\n      return false;\n    }\n}\n", "    var parens = 0;\n    for (var\
    \ i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n  \
    \          parens += 1;\n        } else if (brackets[i] == \")\") {\n        \
    \    parens -= 1;\n        }\n        if (parens < 0) {\n            return false;\n\
    \        }\n    }\n    return parens == 0;\n}\n", "  let left = brackets.split('').filter(char\
    \ => char === '(').length;\n  let right = brackets.split('').filter(char => char\
    \ === ')').length;\n  return left === right;\n}\n", "\tvar len = brackets.length;\n\
    \tif(len % 2 != 0)\n\t\treturn false;\n\tif(brackets[0] == \")\")\n\t\treturn\
    \ false;\n\tvar l = 0;\n\tvar r = 0;\n\tfor(var i = 0; i < len; i++){\n\t\tif(brackets[i]\
    \ == \"(\")\n\t\t\tl++;\n\t\telse\n\t\t\tr++;\n\t\tif(r > l)\n\t\t\treturn false;\n\
    \t}\n\tif(l == r)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n", "\tvar opening\
    \ = 0\n\tvar closing = 0\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\t\
    if (brackets[i] == \"(\") {\n\t\t\topening += 1\n\t\t} else if (brackets[i] ==\
    \ \")\") {\n\t\t\tclosing += 1\n\t\t}\n\t}\n\tif (opening == closing) {\n\t\t\
    return true\n\t} else {\n\t\treturn false\n\t}\n}\n", "\t//make a counter and\
    \ start at 0.\n\tvar counter = 0;\n\t//loop through every char in the string.\n\
    \tfor(var i = 0; i < brackets.length; i++){\n\t\t//if the character is an opening\
    \ bracket, add 1 to the counter.\n\t\tif(brackets[i] === \"(\"){\n\t\t\tcounter\
    \ += 1;\n\t\t}\n\t\t//if the character is a closing bracket, subtract 1 from the\
    \ counter.\n\t\telse if(brackets[i] === \")\"){\n\t\t\tcounter -= 1;\n\t\t}\n\t\
    \t//if the counter is ever negative, return false.\n\t\tif(counter < 0){\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\t//if the counter is 0, return true.\n\tif(counter\
    \ === 0){\n\t\treturn true;\n\t}\n\t//if the counter is ever anything else, return\
    \ false.\n\telse{\n\t\treturn false;\n\t}\n}\n\n", "    var bracket_count = 0;\n\
    \    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"\
    (\") {\n            bracket_count++;\n        } else if (brackets[i] == \")\"\
    ) {\n            bracket_count--;\n        }\n        if (bracket_count < 0) {\n\
    \            return false;\n        }\n    }\n    return bracket_count == 0;\n\
    }\n", "\t// if the brackets string is empty, return true\n\tif (brackets === \"\
    \"){\n\t\treturn true;\n\t}\n\t// if the first character is not \"(\" or the last\
    \ character is not \")\", return false\n\tif (brackets[0] !== \"(\" || brackets[brackets.length\
    \ - 1] !== \")\"){\n\t\treturn false;\n\t}\n\t// make an empty bracket count variable\n\
    \tvar bracket_count = 0;\n\t// loop through all the characters in the string\n\
    \tfor (var i = 0; i < brackets.length; i++){\n\t\t// if the character is \"(\"\
    , increment the bracket count\n\t\tif (brackets[i] === \"(\"){\n\t\t\tbracket_count++;\n\
    \t\t}\n\t\t// if the character is \")\", decrement the bracket count\n\t\tif (brackets[i]\
    \ === \")\"){\n\t\t\tbracket_count--;\n\t\t}\n\t\t// if the bracket count is negative,\
    \ return false\n\t\tif (bracket_count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \t// if the bracket count is not 0, return false\n\tif (bracket_count > 0){\n\t\
    \treturn false;\n\t}\n\t// if the string has made it to this point, it is a valid\
    \ bracket string\n\treturn true;\n}\n", "    var stack = [];\n    for (var i =\
    \ 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n        \
    \    stack.push(brackets[i]);\n        }\n        else if (brackets[i] == \")\"\
    ){\n            if (stack.length == 0){\n                return false;\n     \
    \       }\n            else{\n                stack.pop();\n            }\n  \
    \      }\n    }\n    if (stack.length == 0){\n        return true;\n    }\n  \
    \  else{\n        return false;\n    }\n}\n", "  return brackets.split(\"\").reduce(function(total,\
    \ bracket){\n    if(bracket === \"(\"){\n      return total + 1;\n    }\n    else\
    \ if(bracket === \")\"){\n      return total - 1;\n    }\n    else{\n      return\
    \ total;\n    }\n  }, 0) === 0;\n}\n", "  var stack = new Stack();\n  for (var\
    \ i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n     \
    \ stack.push(1);\n    }\n    else if (brackets[i] === \")\") {\n      if (stack.length\
    \ > 0) {\n        stack.pop();\n      }\n      else {\n        return false;\n\
    \      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return\
    \ true;\n}\n", "  var answer = brackets.split(\"\");\n  var count = 0;\n  var\
    \ result = false;\n  for (var i = 0; i < answer.length; i++) {\n    if (answer[i]\
    \ === \"(\") {\n      count += 1;\n    } else if (answer[i] === \")\") {\n   \
    \   count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  if (count === 0) {\n    result = true;\n  }\n  return result;\n}\n", "    //\
    \ YOUR CODE HERE\n    var stack = [];\n    for (var i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"(\") {\n            stack.push(i);\n  \
    \      } else if (brackets[i] == \")\") {\n            if (stack.length == 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    if (stack.length == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "\t//hint: keep track\
    \ of the count of open brackets\n\t//as you traverse the string\n\tvar count=0;\n\
    \tfor(var i=0;i<brackets.length;i++){\n\t\tif(brackets[i]=='('){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(brackets[i]==')'){\n\t\t\tcount--;\n\t\t}\n\t\tif(count<0){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\tif(count==0){\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\n", "    var open = 0;\n    for (var i = 0; i <\
    \ brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n            open++;\n\
    \        } else if (brackets[i] == \")\") {\n            open--;\n        }\n\
    \        if (open < 0) {\n            return false;\n        }\n    }\n    return\
    \ open == 0;\n}\n", "  var count = 0;\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] == \"(\"){\n      count += 1;\n    }\n    else if\
    \ (brackets[i] == \")\"){\n      count -= 1;\n    }\n    if (count < 0){\n   \
    \   return false;\n    }\n  }\n  if (count == 0){\n    return true;\n  }\n  else{\n\
    \    return false;\n  }\n}", "  //replace this for solution\n  var stack = [];\n\
    \  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"(\")\
    \ {\n      stack.push(brackets[i]);\n    } else {\n      stack.pop();\n    }\n\
    \  }\n  return stack.length == 0;\n}\n", "    if(brackets[0] == \")\"){\n    \
    \    return false;\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < brackets.length; i++){\n            if(brackets[i] == \"(\"){\n \
    \               count++;\n            }\n            else{\n                count--;\n\
    \            }\n            if(count < 0){\n                return false;\n  \
    \          }\n        }\n        if(count == 0){\n            return true;\n \
    \       }\n        else{\n            return false;\n        }\n    }\n}\n", " \
    \ let counter = 0;\n  let hasCorresponding = true;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      counter++;\n    } else if (brackets[i]\
    \ === \")\") {\n      counter--;\n    }\n    if (counter < 0) {\n      hasCorresponding\
    \ = false;\n    }\n  }\n  if (counter === 0) {\n    return hasCorresponding;\n\
    \  } else {\n    return false;\n  }\n}\n", "\tif(brackets.indexOf(\"(\")>brackets.indexOf(\"\
    )\")){\n\t\treturn false;\n\t}else{\n\t\treturn true;\n\t}\n}", "    var count=0;\n\
    \    for(var i=0;i<brackets.length;i++){\n        if(brackets[i]==\"(\"){\n  \
    \          count++;\n        }\n        else if(brackets[i]==\")\"){\n       \
    \     count--;\n        }\n        if(count<0){\n            return false;\n \
    \       }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n\n}\n", "    if (brackets.length < 2){\n      \
    \  return false;\n    }\n    var counter = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            counter++;\n        }\n\
    \        else if (brackets[i] == \")\"){\n            counter--;\n        }\n\
    \        if (counter < 0){\n            return false;\n        }\n    }\n    if\
    \ (counter == 0){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n", "    // for let i = 0; i < brackets.length; i++\n        // if brackets[i]\
    \ is (;\n            // count++\n        // else\n            // count--\n   \
    \     // if count is negative, return false\n    // if count is 0 return true\n\
    \    // else return false\n    let count = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] === '('){\n            count++;\n        } else\
    \ if (brackets[i] === ')'){\n            count--;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count === 0){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "  if(brackets.length\
    \ % 2 != 0){\n    return false;\n  }\n  for(var i = 0; i < brackets.length; i+=2){\n\
    \    if(brackets[i] != '('){\n      return false;\n    }\n    if(brackets[i+1]\
    \ != ')'){\n      return false;\n    }\n  }\n  return true;\n}\n", "    var count\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ == \"(\") {\n            count++;\n        } else if (brackets[i] == \")\")\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\n", "    let numOfOpening\
    \ = 0;\n    let numOfClosing = 0;\n    for(let i = 0; i < brackets.length; i++){\n\
    \        if(brackets[i] === '('){\n            numOfOpening++;\n        }\n  \
    \      else{\n            numOfClosing++;\n        }\n    }\n    if(numOfOpening\
    \ == numOfClosing){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}", "  var i;\n  var stack = [];\n  for (i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else\
    \ if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return\
    \ false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if (stack.length\
    \ === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    var\
    \ open_count = 0;\n    var close_count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            open_count += 1;\n  \
    \      }\n        else{\n            close_count += 1;\n        }\n        if\
    \ (close_count > open_count){\n            return false;\n        }\n    }\n \
    \   if (open_count != close_count){\n        return false;\n    }\n    return\
    \ true;\n}\n", "\t//return 0;\n\tvar open = 0;\n\tvar closed = 0;\n\tfor (var\
    \ i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\t\
    open++;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\t\tclosed++;\n\t\t}\n\
    \t}\n\tif (open == closed) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}\n", "    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n  \
    \      }\n        else if (brackets[i] == \")\"){\n            if (stack.length\
    \ == 0){\n                return false;\n            }\n            else{\n  \
    \              stack.pop();\n            }\n        }\n    }\n    if (stack.length\
    \ == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }", "\n}\n", "    var count = 0;\n    for (var i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] == \"(\") {\n            count++;\n        }\n  \
    \      else if (brackets[i] == \")\") {\n            count--;\n        }\n   \
    \     if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count == 0;\n}\n", "\tvar count = 0;\n\tfor (var i = 0; i < brackets.length;\
    \ i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\tcount += 1;\n\t\t}\n\t\telse\
    \ {\n\t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}", "\tvar open=0;\n\tvar closed=0;\n\tfor(var i=0; i<brackets.length; i++){\n\
    \t\tif(brackets[i]===\"(\"){\n\t\t\topen++;\n\t\t}\n\t\telse if(brackets[i]===\"\
    )\"){\n\t\t\tclosed++;\n\t\t}\n\t}\n\tif(open==closed){\n\t\treturn true;\n\t\
    }\n\telse{\n\t\treturn false;\n\t}\n}\n", "  var num = 0;\n  for (var i = 0; i\
    \ < brackets.length; i++) {\n    if (brackets[i] == \"(\") {\n      num++;\n \
    \   }\n    else if (brackets[i] == \")\") {\n      num--;\n    }\n    if (num\
    \ < 0) {\n      return false;\n    }\n  }\n  if (num == 0) {\n    return true;\n\
    \  }\n  else {\n    return false;\n  }\n}\n", "    var len = brackets.length;\n\
    \    var cnt = 0;\n    for(var i = 0; i < len; i++){\n        if(brackets[i] ==\
    \ \"(\"){\n            cnt++;\n        }\n        else if(brackets[i] == \")\"\
    ){\n            cnt--;\n        }\n        if(cnt < 0){\n            return false;\n\
    \        }\n    }\n    if(cnt == 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "    let count = 0;\n    let result = true;\n\
    \    for (let i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"\
    (\"){\n            count++;\n        }\n        else if (brackets[i] == \")\"\
    ){\n            count--;\n        }\n        if (count < 0){\n            result\
    \ = false;\n        }\n    }\n    if (count != 0){\n        result = false;\n\
    \    }\n    return result;\n}\n", "    var br_pairs = brackets.split(\"\");\n\
    \    for (var i = 0; i < br_pairs.length; i++){\n        if (br_pairs[i] == \"\
    (\"){\n            br_pairs[i] = 1;\n        }\n        else{\n            br_pairs[i]\
    \ = -1;\n        }\n    }\n    return _(br_pairs).reduce(function(acc, val){\n\
    \        return acc + val;\n    }, 0) == 0;\n}\n", "    var num = 0;\n    for\
    \ (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n\
    \            num++;\n        } else if (brackets[i] == \")\") {\n            num--;\n\
    \        }\n        if (num < 0) {\n            return false;\n        }\n   \
    \ }\n    return num == 0;\n}\n", "\tvar open_brackets = [];\n\tvar idx = 0;\n\t\
    while (idx < brackets.length){\n\t\tif (brackets[idx] == '('){\n\t\t\topen_brackets.push(idx);\n\
    \t\t} else if (brackets[idx] == ')'){\n\t\t\tif (open_brackets.length == 0){\n\
    \t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\topen_brackets.pop();\n\t\t\t}\n\
    \t\t}\n\t\tidx++;\n\t}\n\treturn open_brackets.length == 0;\n}", "    var open\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ == '(') {\n            open += 1;\n        } else if (brackets[i] == ')') {\n\
    \            open -= 1;\n        }\n        if (open < 0) {\n            return\
    \ false;\n        }\n    }\n    return open == 0;\n}\n", "    let left = 0\n \
    \   let right = 0\n    for (let i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            left += 1\n        } else if (brackets[i]\
    \ == \")\"){\n            right += 1\n        }\n    }\n    if (left == right){\n\
    \        return true\n    } else {\n        return false\n    }\n}\n", "\t//if\
    \ brackets is an empty string\n\tif(brackets.length === 0){\n\t\treturn true;\n\
    \t}\n\t//the number of left brackets must be equal to the number of right brackets\n\
    \t//if more left brackets than right brackets, return false\n\tif(brackets.split(\"\
    (\").length > brackets.split(\")\").length){\n\t\treturn false;\n\t}\n\t//if more\
    \ right brackets than left brackets, return false\n\tif(brackets.split(\")\").length\
    \ > brackets.split(\"(\").length){\n\t\treturn false;\n\t}\n\t//if the first character\
    \ is a right bracket, return false\n\tif(brackets[0] === \")\"){\n\t\treturn false;\n\
    \t}\n\t//if the last character is a left bracket, return false\n\tif(brackets[brackets.length\
    \ - 1] === \"(\"){\n\t\treturn false;\n\t}\n\t//return true if all other checks\
    \ are passed\n\treturn true;\n}\n", "\tif (brackets.length == 0) return true;\n\
    \tif (brackets.charAt(0) == \")\") return false;\n\treturn correct_bracketing(brackets.substring(1))\n\
    }\n\n\n", "    var b = 0;\n    for (var i = 0; i < brackets.length; i++) {\n \
    \       if (brackets[i] == '(') b++;\n        else b--;\n        if (b < 0) return\
    \ false;\n    }\n    return b == 0;\n}\n", "    var left = brackets.replace(/[^\\\
    (]/g,\"\");\n    var right = brackets.replace(/[^\\)]/g,\"\");\n    return left.length\
    \ === right.length;\n}\n", "    var count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n      if (brackets[i] === \"(\"){\n        count = count + 1;\n     \
    \ }\n      else {\n        count = count - 1;\n      }\n      if (count < 0){\n\
    \        return false;\n      }\n    }\n    if (count === 0){\n      return true;\n\
    \    }\n    else {\n      return false;\n    }\n}\n", "  \n  // Use a variable\
    \ to track the number of opening and closing brackets\n  var count = 0;\n  \n\
    \  // Use a for loop to iterate through the string.\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    \n    // If we find an opening bracket, increase the counter.\n\
    \    if (brackets[i] === \"(\") {\n      count += 1;\n    }\n    \n    // If we\
    \ find a closing bracket, decrease the counter.\n    if (brackets[i] === \")\"\
    ) {\n      count -= 1;\n    }\n    \n    // If the counter is ever negative, there\
    \ is a closing bracket without a matching opening one.\n    if (count < 0) {\n\
    \      return false;\n    }\n  }\n  \n  // If the counter is zero, we have the\
    \ same number of opening and closing brackets.\n  return count === 0;\n}", " \
    \   var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n        var\
    \ c = brackets[i];\n        if (c == '('){\n            stack.push(c);\n     \
    \   }\n        else if (c == ')'){\n            if (stack.length === 0){\n   \
    \             return false;\n            }\n            else{\n              \
    \  stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "  if (brackets.length % 2 != 0) {\n    return false;\n  }\n\n  var\
    \ storage = [];\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == '(') {\n      storage.push(i);\n    } else {\n      var top = storage.pop();\n\
    \      if (brackets[top] == ')' || top === undefined) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n", "\tvar stack = [];\n\tfor(var i =\
    \ 0; i < brackets.length; i++){\n\t\tvar s = brackets[i];\n\t\tif(s === \"(\"\
    ){\n\t\t\tstack.push(s);\n\t\t}\n\t\telse{\n\t\t\tif(stack.length === 0){\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t}\n\treturn stack.length\
    \ === 0;\n}\n\n", "\tvar opening =0;\n\tvar closing =0;\n\tfor (var i = 0; i <\
    \ brackets.length; i++) {\n\t\tif (brackets[i]==\"(\") {\n\t\t\topening++;\n\t\
    \t}\n\t\telse if (brackets[i]==\")\") {\n\t\t\tclosing++;\n\t\t}\n\t}\n\tif (opening==closing)\
    \ {\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "    if(brackets.length\
    \ == 0){\n        return true;\n    }\n    else if(brackets.length == 1){\n  \
    \      return false;\n    }\n    else if(brackets[0] == \")\"){\n        return\
    \ false;\n    }\n    else{\n        return correct_bracketing(brackets.slice(1));\n\
    \    }\n}\n", "    let stack = [];\n    for (let i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] === \"(\"){\n            stack.push(i);\n        } else\
    \ if (brackets[i] === \")\"){\n            if (stack.length > 0){\n          \
    \      stack.pop();\n            } else {\n                return false;\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n", "    if (brackets.length\
    \ % 2 === 1){\n        return false;\n    }\n    var opens = 0;\n    for (var\
    \ i = 0; i < brackets.length; i++){\n        if (brackets[i] === \"(\"){\n   \
    \         opens++;\n        } else {\n            opens--;\n        }\n      \
    \  if (opens < 0){\n            return false;\n        }\n    }\n    return opens\
    \ === 0;\n}\n", "    var stack = new Stack();\n    for(var i = 0; i < brackets.length;\
    \ i++){\n        var char = brackets[i];\n        if(char == \"(\"){\n       \
    \     stack.push(char);\n        }else if(char == \")\"){\n            var open_char\
    \ = stack.pop();\n            if(open_char != \"(\"){\n                return\
    \ false;\n            }\n        }\n    }\n    return stack.is_empty();\n}\n\n",
  "\tvar bracket_count = 0;\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif\
    \ (brackets[i] == \"(\"){\n\t\t\tbracket_count++;\n\t\t}\n\t\telse if (brackets[i]\
    \ == \")\"){\n\t\t\tbracket_count--;\n\t\t}\n\t\tif (bracket_count < 0){\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\tif (bracket_count == 0){\n\t\treturn true;\n\t\
    }\n\telse{\n\t\treturn false;\n\t}\n}\n", "    var count = 0;\n    var i = 0;\n\
    \    while (i < brackets.length){\n        if (brackets[i] === \"(\"){\n     \
    \       count += 1;\n        }\n        else if (brackets[i] === \")\"){\n   \
    \         count -= 1;\n        }\n        if (count < 0){\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    return count === 0;\n}\n", " \
    \   let opened = 0;\n    for (let i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\") opened++;\n        else if (brackets[i] == \")\") opened--;\n\
    \        if (opened < 0) return false;\n    }\n    return opened == 0;\n}\n\n",
  "    var open = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] == \"(\") {\n            open += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            open -= 1;\n        }\n        if (open < 0) {\n  \
    \          return false;\n        }\n    }\n    return open == 0;\n}\n", "\tvar\
    \ stack = [];\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i]\
    \ == \"(\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\t\telse if(brackets[i] ==\
    \ \")\"){\n\t\t\tif(stack.length == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\
    else{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.length == 0){\n\t\
    \treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "    var bracket_count\
    \ = 0;\n    var bracket_array = brackets.split(\"\");\n    for (i = 0; i < bracket_array.length;\
    \ i++){\n        if (bracket_array[i] == \"(\" && bracket_array[i] !== \")\"){\n\
    \            bracket_count++;\n        }\n        else if (bracket_array[i] ==\
    \ \")\" && bracket_array[i] !== \"(\"){\n            bracket_count--;\n      \
    \  }\n        else {\n            return false;\n        }\n    }\n    if (bracket_count\
    \ !== 0){\n        return false;\n    }\n    else {\n        return true;\n  \
    \  }\n}", "\tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\
    \tif (brackets[i] === \"(\") {\n\t\t\tcount++;\n\t\t} else if (brackets[i] ===\
    \ \")\") {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count === 0;\n}\n\n", "    if(brackets.length % 2 == 1){\n\
    \        return false;\n    }\n    var right = 0;\n    for(var i = 0; i < brackets.length;\
    \ i++){\n        if(brackets[i] == \"(\"){\n            right = right + 1;\n \
    \       }else{\n            right = right - 1;\n        }\n        if(right <\
    \ 0){\n            return false;\n        }\n    }\n    if(right == 0){\n    \
    \    return true;\n    }else{\n        return false;\n    }\n}\n", "    if (brackets.length\
    \ < 1) return false;\n    let leftBrackets = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] === \"(\"){\n            leftBrackets++;\n  \
    \      } else if (brackets[i] === \")\"){\n            leftBrackets--;\n     \
    \   }\n        if (leftBrackets < 0) return false;\n    }\n    return leftBrackets\
    \ === 0;\n}\n", "    var bracketCount = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            bracketCount += 1;\n\
    \        } else if (brackets[i] == \")\"){\n            bracketCount -= 1;\n \
    \       }\n        if (bracketCount < 0){\n            return false;\n       \
    \ }\n    }\n    if (bracketCount > 0){\n        return false;\n    }\n    return\
    \ true;\n}\n", "    var stack = new Stack();\n    var count = 0;\n    for(var\
    \ i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n     \
    \       stack.push(brackets[i]);\n        }\n        else{\n            if(stack.isEmpty()){\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    }\n    }\n    if(stack.isEmpty()){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "    // loop through the string\n    for\
    \ (var i = 0; i < brackets.length; i++){\n        // create a counter to see if\
    \ they cancel out\n        var open = 0;\n        // if there are more \")\" than\
    \ \"(\" return false\n        if (brackets[i] == \")\" && open == 0){\n      \
    \      return false;\n        }\n        // if there is an opening bracket add\
    \ one to the counter\n        if (brackets[i] == \"(\"){\n            open +=\
    \ 1;\n        }\n        // if there is a closing bracket subtract one to the\
    \ counter\n        if (brackets[i] == \")\"){\n            open -= 1;\n      \
    \  }\n    }\n    // if the counter hits zero return true\n    if (open == 0){\n\
    \        return true;\n    }\n    // else return false\n    else {\n        return\
    \ false;\n    }\n}\n", "\treturn count_char(brackets, '(') == count_char(brackets,\
    \ ')');\n}", "    var count = 0;\n    for (var i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] == \"(\") {\n            count += 1;\n        } else\
    \ if (brackets[i] == \")\") {\n            count -= 1;\n        }\n        if\
    \ (count < 0) {\n            return false;\n        }\n    }\n    return count\
    \ == 0;\n}\n", "  let count = 0;\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '(') {\n      count++;\n    } else if (brackets[i]\
    \ === ')') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "    var counter = 0;\n    for (i =\
    \ 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n        \
    \    counter = counter + 1;\n        }\n        else{\n            counter = counter\
    \ - 1;\n        }\n        if (counter < 0){\n            return false;\n    \
    \    }\n    }\n    if (counter == 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}", "\tvar opening = 0;\n\tvar closing = 0;\n\t\
    for (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\
    \t\t\topening++;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\t\tclosing++;\n\
    \t\t}\n\t}\n\tif (opening == closing) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}\n}\n", "  //set base case\n  if(brackets.length == 0) {\n \
    \   return true;\n  }\n  //make a stack\n  var stack = [];\n  //push the opening\
    \ bracket\n  stack.push(brackets[0]);\n  //loop through the brackets string\n\
    \  for(var i = 1; i < brackets.length; i++) {\n    //if the bracket is an opening\
    \ bracket, push it\n    if(brackets[i] == \"(\") {\n      stack.push(brackets[i]);\n\
    \    }\n    //if the bracket is a closing bracket, pop the stack\n    if(brackets[i]\
    \ == \")\") {\n      stack.pop();\n    }\n  }\n  //if the stack has anything left\
    \ in it, return false\n  if(stack.length > 0) {\n    return false;\n  }\n  //otherwise\
    \ return true\n  return true;\n}", "    // YOUR CODE HERE\n    if(brackets.length\
    \ % 2 != 0){\n        return false;\n    }\n    count = 0;\n    for(var i = 0;\
    \ i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            count++;\n\
    \        }\n        else{\n            count--;\n        }\n        if(count <\
    \ 0){\n            return false;\n        }\n    }\n    if(count == 0){\n    \
    \    return true;\n    }\n    else{\n        return false;\n    }\n}\n", "\tif(brackets.length\
    \ % 2 != 0)\n\t\treturn false;\n\tvar arr = brackets.split(\"\");\n\twhile(arr.length\
    \ > 0){\n\t\tvar first = arr.shift();\n\t\tvar last = arr.pop();\n\t\tif(first\
    \ === \"(\"){\n\t\t\tif(last !== \")\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\
    \t\t\treturn false;\n\t}\n\treturn true;\n}", "\tlet count = 0;\n\tfor (let i\
    \ = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == \"(\"){\n\t\t\tcount\
    \ += 1;\n\t\t}\n\t\telse{\n\t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0){\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn count == 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
