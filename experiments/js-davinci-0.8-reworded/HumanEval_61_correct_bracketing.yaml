name: HumanEval_61_correct_bracketing
language: js
prompt: "//brackets is a string of \"(\" and \")\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
  )\n// false\n// >>> correct_bracketing(\"()\")\n// true\n// >>> correct_bracketing(\"\
  (()())\")\n// true\n// >>> correct_bracketing(\")(()\")\n// false\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"()\"),true);\n  assert.deepEqual(candidate(\"\
  (()())\"),true);\n  assert.deepEqual(candidate(\"()()(()())()\"),true);\n  assert.deepEqual(candidate(\"\
  ()()((()()())())(()()(()))\"),true);\n  assert.deepEqual(candidate(\"((()())))\"\
  ),false);\n  assert.deepEqual(candidate(\")(()\"),false);\n  assert.deepEqual(candidate(\"\
  (\"),false);\n  assert.deepEqual(candidate(\"((((\"),false);\n  assert.deepEqual(candidate(\"\
  )\"),false);\n  assert.deepEqual(candidate(\"(()\"),false);\n  assert.deepEqual(candidate(\"\
  ()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"()()(()())()))()\"),false);\n\
  }\n\ntest();"
completions: ["    var opens = [];\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            opens.push(brackets[i]);\n  \
    \      }\n        else if (brackets[i] == \")\"){\n            if (opens.length\
    \ > 0){\n                opens.pop();\n            }\n            else {\n   \
    \             return false;\n            }\n        }\n    }\n    if (opens.length\
    \ == 0){\n        return true;\n    }\n    else {\n        return false;\n   \
    \ }\n}", "  var open = 0;\n  for (var i = 0; i < brackets.length; i++) {\n   \
    \ if (brackets[i] == \"(\"){\n      open++;\n    } else if (brackets[i] == \"\
    )\"){\n      open--;\n    } else {\n      return false;\n    }\n    if (open <\
    \ 0){\n      return false;\n    }\n  }\n  return open == 0;\n}\n", "\tvar count\
    \ = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] ==\
    \ \"(\") {\n\t\t\tcount += 1;\n\t\t} else if (brackets[i] == \")\") {\n\t\t\t\
    count -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    return count == 0;\n}\n", "  var count = 0;\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      count += 1;\n    } else if (brackets[i]\
    \ === \")\") {\n      count -= 1;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}", "    var left_brackets = 0;\n    for (i=0;\
    \ i<brackets.length; i++){\n        if (brackets[i]==\"(\"){\n            left_brackets\
    \ = left_brackets + 1;\n        }\n        else if (brackets[i]==\")\"){\n   \
    \         left_brackets = left_brackets - 1;\n        }\n        if (left_brackets\
    \ < 0){\n            return false;\n        }\n    }\n    if (left_brackets ==\
    \ 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }\n", "    // your code here\n    let count = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === '(') {\n            count += 1;\n      \
    \  } else if (brackets[i] === ')') {\n            count -= 1;\n        }\n   \
    \     if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n", "    var open = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            open += 1;\n        }\n\
    \        else if (brackets[i] == \")\"){\n            open -= 1;\n        }\n\
    \        if (open < 0){\n            return false;\n        }\n    }\n    return\
    \ open == 0;\n}", "  return brackets.replace(/[^()]/g, '').split('').reduce(function(previous,\
    \ current, index, array){\n    if(current == ')') {\n      return previous - 1;\n\
    \    } else {\n      return previous + 1;\n    }\n  }, 0) == 0;\n}\n", "  let\
    \ opened = 0;\n  for (let i = 0; i < brackets.length; i++){\n    if (brackets[i]\
    \ == \"(\"){\n      opened += 1;\n    } else if (brackets[i] == \")\"){\n    \
    \  opened -= 1;\n    }\n    if (opened < 0){\n      return false;\n    }\n  }\n\
    \  return opened == 0;\n}", "    var bracketOpenCount = 0;\n    var bracketCloseCount\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ == \"(\"){\n            bracketOpenCount++;\n        } else if (brackets[i]\
    \ == \")\"){\n            bracketCloseCount++;\n        }\n    }\n    if (bracketOpenCount\
    \ === bracketCloseCount){\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "  var count = 0;\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      count += 1;\n    } else if (brackets[i]\
    \ === \")\") {\n      count -= 1;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "\t// init\n\tvar current_bracket =\
    \ brackets[0];\n\tvar stack = [];\n\tfor (var i = 0; i < brackets.length; i++)\
    \ {\n\t\tcurrent_bracket = brackets[i];\n\t\tif (current_bracket == '(') {\n\t\
    \t\tstack.push(current_bracket);\n\t\t} else if (current_bracket == ')') {\n\t\
    \t\tstack.pop();\n\t\t}\n\t}\n\tif (stack.length == 0) {\n\t\treturn true;\n\t\
    } else {\n\t\treturn false;\n\t}\n}\n\n", "    let bracket_count = 0;\n    let\
    \ result = true;\n    for (let i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] === \"(\") {\n            bracket_count += 1;\n        } else if\
    \ (brackets[i] === \")\") {\n            bracket_count -= 1;\n        }\n    \
    \    if (bracket_count < 0) {\n            result = false;\n        }\n    }\n\
    \    if (bracket_count === 0) {\n        return result;\n    } else {\n      \
    \  return false;\n    }\n}\n", "\treturn !brackets.split(\"\").filter(function(b){\n\
    \t\treturn b == \"(\"\n\t}).reduce(function(s,b){\n\t\treturn s - 1\n\t},0)\n\
    }\n\n", "    var opening = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            opening += 1;\n        }\n  \
    \      else if (brackets[i] == \")\"){\n            opening -= 1;\n        }\n\
    \        if (opening < 0){\n            return false;\n        }\n    }\n    if\
    \ (opening == 0){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n", "    var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\") {\n            count++;\n        }\n      \
    \  else if (brackets[i] == \")\") {\n            count--;\n        }\n       \
    \ if (count < 0) {\n            return false;\n        }\n    }\n    return count\
    \ == 0;\n}\n", "    var arr = [];\n    var counter = 0;\n    for(var i = 0; i\
    \ < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            arr.push(brackets[i]);\n\
    \        }\n        else if(brackets[i] == \")\"){\n            if(arr.length\
    \ == 0){\n                return false;\n            }\n            else{\n  \
    \              arr.pop();\n            }\n        }\n    }\n    if(arr.length\
    \ != 0){\n        return false;\n    }\n    return true;\n}", "    var stack =\
    \ [];\n    for (var i = 0; i < brackets.length; i++){\n        var c = brackets[i];\n\
    \        if (c == \"(\") {\n            stack.push(c);\n        } else if (c ==\
    \ \")\") {\n            if (stack.length == 0) {\n                return false;\n\
    \            }\n            stack.pop();\n        }\n    }\n    return stack.length\
    \ == 0;\n}\n", "  var count = 0;\n  for (var i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"(\") {\n      count += 1;\n    } else if (brackets[i]\
    \ === \")\") {\n      count -= 1;\n    } else {\n      return false;\n    }\n\
    \    if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n\
    }\n\n", "    // here is my solution...feel free to do it differently!\n    count\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++){\n        char = brackets[i];\n\
    \        if (char == \"(\"){\n            count += 1;\n        }\n        else\
    \ if (char == \")\"){\n            count -= 1;\n        }\n        if (count <\
    \ 0){\n            return false;\n        }\n    }\n    return count == 0;\n}\n\
    \n", "    // TODO: implement this!\n    return false;\n}\n", "\tif(brackets.indexOf(\"\
    (\") == -1 && brackets.indexOf(\")\") != -1){\n\t\treturn false;\n\t}\n\tif(brackets.indexOf(\"\
    (\") != -1 && brackets.indexOf(\")\") == -1){\n\t\treturn false;\n\t}\n\t//check\
    \ if the number of \"(\" is not same as \")\"\n\tif(brackets.indexOf(\"(\") !=\
    \ -1 && brackets.indexOf(\")\") != -1){\n\t\tvar left = 0;\n\t\tvar right = 0;\n\
    \t\tfor(var i = 0; i < brackets.length; i++){\n\t\t\tif(brackets[i] == \"(\"){\n\
    \t\t\t\tleft++;\n\t\t\t}\n\t\t\tif(brackets[i] == \")\"){\n\t\t\t\tright++;\n\t\
    \t\t}\n\t\t}\n\t\tif(left != right){\n\t\t\treturn false;\n\t\t}\n\t}\n\t//now\
    \ check if there is a \")\" before a \"(\"\n\tvar flag = true;\n\tfor(var i =\
    \ 0; i < brackets.length; i++){\n\t\tif(brackets[i] == \")\" && brackets[i-1]\
    \ != \"(\"){\n\t\t\tflag = false;\n\t\t}\n\t}\n\treturn flag;\n}\n", "    // base\
    \ case\n    if (brackets.length <= 1){\n        return false;\n    }\n    // recursive\
    \ case\n    var first_char = brackets[0];\n    var sub_string = brackets.slice(1);\n\
    \    if (first_char === '('){\n        return correct_bracketing(sub_string);\n\
    \    }\n    else {\n        // the first character is a ')'\n        if (sub_string[0]\
    \ === ')'){\n            return correct_bracketing(sub_string.slice(1));\n   \
    \     }\n        else {\n            return false;\n        }\n    }\n}\n", " \
    \ if (brackets[0] == \")\"){\n    return false;\n  }\n  for (var i = 1; i < brackets.length;\
    \ i++) {\n    if (brackets[i] == \")\"){\n      if (brackets[i-1] == \"(\"){\n\
    \        brackets = brackets.slice(0,i-1) + brackets.slice(i+1,brackets.length);\n\
    \        i -= 2;\n      }\n      else {\n        return false;\n      }\n    }\n\
    \  }\n  if (brackets.length == 0){\n    return true;\n  }\n  else {\n    return\
    \ false;\n  }\n}\n", "\tvar i = 0;\n\twhile (i < brackets.length){\n\t\tif (brackets[i]\
    \ === \"(\" && brackets[i+1] === \")\"){\n\t\t\tbrackets = brackets.slice(0,i)\
    \ + brackets.slice(i+2, brackets.length);\n\t\t\ti = 0;\n\t\t}\n\t\telse{\n\t\t\
    \ti += 1;\n\t\t}\n\t}\n\tif (brackets.length === 0){\n\t\treturn true;\n\t}\n\t\
    else{\n\t\treturn false;\n\t}\n}\n", "  for (var i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] == \"(\" && brackets[i + 1] == \")\") {\n      brackets\
    \ = brackets.substring(0, i) + brackets.substring(i + 2);\n      i = -1;\n   \
    \ }\n  }\n  if (brackets == \"\") {\n    return true;\n  }\n  else {\n    return\
    \ false;\n  }\n}", "\tif(brackets == \"\"){\n\t\treturn true;\n\t}\n\telse if(brackets[0]\
    \ == \")\" || brackets[brackets.length-1] == \"(\"){\n\t\treturn false;\n\t}\n\
    \telse{\n\t\tvar left_brackets = 0;\n\t\tvar right_brackets = 0;\n\t\tfor(var\
    \ i = 0; i < brackets.length; i++){\n\t\t\tif(brackets[i] == \"(\"){\n\t\t\t\t\
    left_brackets += 1;\n\t\t\t}\n\t\t\telse if(brackets[i] == \")\"){\n\t\t\t\tright_brackets\
    \ += 1;\n\t\t\t}\n\t\t}\n\t\tif(left_brackets == right_brackets){\n\t\t\treturn\
    \ true;\n\t\t}\n\t\telse{\n\t\t\treturn false;\n\t\t}\n\t}\n}\n", "    for(let\
    \ char of brackets){\n      brackets.includes(\"(\") && brackets.includes(\")\"\
    ) ? true : false;\n    }\n    return true;\n  }\n  console.log(correct_bracketing(\"\
    ()\"));\n\n\n  //=======================================\n  // Write a function\
    \ that takes a string and returns the same string", "  if (brackets.length % 2\
    \ !== 0) {\n    return false;\n  }\n\n  let count = 0;\n  for (let i = 0; i <\
    \ brackets.length; i++){\n    if (brackets[i] === \"(\") {\n      count += 1;\n\
    \    } else {\n      count -= 1;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "\tvar count=0;\n\tfor(var i=0;i<brackets.length;i++){\n\
    \t\tif(brackets[i]==\"(\"){\n\t\t\tcount++;\n\t\t}\n\t\telse if(brackets[i]==\"\
    )\"){\n\t\t\tcount--;\n\t\t}\n\t\tif(count<0){\n\t\t\treturn false;\n\t\t}\n\t\
    }\n\tif(count==0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n\
    \n", "    // your code here\n    if (brackets.length == 0){\n        return true;\n\
    \    }\n\n    var open_count = 0;\n    var close_count = 0;\n\n    for (var i\
    \ = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n      \
    \      open_count++;\n        }\n        else{\n            close_count++;\n \
    \       }\n    }\n\n    if (open_count != close_count){\n        return false;\n\
    \    }\n\n    return true;\n}\n", "    for(let i = 0; i < brackets.length; i++){\n\
    \        if(brackets[i] === \"(\" && brackets[i+1] === \")\"){\n            brackets\
    \ = brackets.slice(0, i) + brackets.slice(i+2);\n            i = -1;\n       \
    \ }\n    }\n    return brackets === \"\";\n}\n", "\tlet left_par = 0;\n\tlet right_par\
    \ = 0;\n\tfor (let i = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == \"\
    (\"){\n\t\t\tleft_par += 1;\n\t\t}\n\t\telse if (brackets[i] == \")\"){\n\t\t\t\
    right_par += 1;\n\t\t}\n\t}\n\tif (left_par == right_par){\n\t\treturn true;\n\
    \t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "\tif (brackets.length % 2 == 1) return\
    \ false;\n\tvar result = 0;\n\tfor (var i = 0; i < brackets.length; i++){\n\t\t\
    if (brackets[i] == \"(\") {\n\t\t\tresult++;\n\t\t} else {\n\t\t\tresult--;\n\t\
    \t}\n\t\tif (result < 0) return false;\n\t}\n\treturn result == 0;\n}\n", "  var\
    \ open = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\") {\n      open++;\n    } else if (brackets[i] == \")\") {\n      open--;\n\
    \    }\n    if (open < 0) {\n      return false;\n    }\n  }\n  return open ==\
    \ 0;\n}\n", "    //your code here\n}\n", "    var len = brackets.length;\n   \
    \ var braces_count = 0;\n    for(var i = 0; i < len; i++){\n        if(brackets[i]\
    \ == \"(\"){\n            braces_count++;\n        }else if(brackets[i] == \"\
    )\"){\n            braces_count--;\n        }\n        if(braces_count < 0){\n\
    \            return false;\n        }\n    }\n    if(braces_count == 0){\n   \
    \     return true;\n    }else{\n        return false;\n    }\n}\n", "\tvar openCount\
    \ = 0;\n\tvar closeCount = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\
    \t\tif (brackets[i] === \"(\") {\n\t\t\topenCount += 1;\n\t\t}\n\t\telse if (brackets[i]\
    \ === \")\") {\n\t\t\tcloseCount += 1;\n\t\t}\n\t}\n\tif (openCount === closeCount)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\n\n", "    //\
    \ if brackets is empty\n    if(brackets.length == 0){\n        return true;\n\
    \    }\n    // if the length of brackets is odd\n    if(brackets.length % 2 ==\
    \ 1){\n        return false;\n    }\n    // if the first bracket is a closing\
    \ bracket\n    if(brackets[0] == \")\"){\n        return false;\n    }\n    var\
    \ openCount = 0;\n    var closeCount = 0;\n    // loops to count number of open\
    \ and closing brackets\n    for(var i = 0; i < brackets.length; i++){\n      \
    \  if(brackets[i] == \"(\"){\n            openCount++;\n        }\n        if(brackets[i]\
    \ == \")\"){\n            closeCount++;\n        }\n    }\n    // checks to see\
    \ if the number of open brackets equals the number of closing brackets\n    if(openCount\
    \ == closeCount){\n        return true;\n    }\n    return false;\n}\n", "\tlet\
    \ opening = 0;\n\tlet closing = 0;\n\tfor (var i = 0; i < brackets.length; i++)\
    \ {\n\t\tif (brackets[i] == \"(\") {\n\t\t\topening += 1;\n\t\t}\n\t\telse if\
    \ (brackets[i] == \")\") {\n\t\t\tclosing += 1;\n\t\t}\n\t}\n\tif (opening ==\
    \ closing) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}", " \
    \   //\n    // your code here\n    //\n}\n", "\tvar count = 0;\n\tvar lastCount\
    \ = 0;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] == \"\
    (\"){\n\t\t\tcount++;\n\t\t}else if(brackets[i] == \")\"){\n\t\t\tcount--;\n\t\
    \t}\n\t\tif(count < 0){\n\t\t\treturn false;\n\t\t}\n\t\tif(count >= lastCount){\n\
    \t\t\tlastCount = count;\n\t\t}else{\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(count\
    \ == 0){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n", "\tfor(var\
    \ i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === \"(\" && brackets[i\
    \ + 1] === \")\"){\n\t\t\treturn true;\n\t\t}\n\t\tif(brackets[i] === \")\"){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n}", "\tvar balance = 0;\n\tfor (var i = 0; i\
    \ < brackets.length; i++){\n\t\tif (brackets[i] === \"(\"){\n\t\t\tbalance +=\
    \ 1;\n\t\t}\n\t\telse if (brackets[i] === \")\"){\n\t\t\tbalance -= 1;\n\t\t}\n\
    \t\tif (balance < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn balance === 0;\n\
    }\n", "\tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif\
    \ (brackets[i] == \"(\") {\n\t\t\tcount += 1;\n\t\t} else if (brackets[i] == \"\
    )\") {\n\t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\treturn count == 0;\n}\n", "  var bracketsArray = brackets.split(\"\
    \");\n  var openBrackets = 0;\n  for (var i = 0; i < bracketsArray.length; i++)\
    \ {\n    if (bracketsArray[i] === \"(\") {\n      openBrackets += 1;\n    }\n\
    \    else if (bracketsArray[i] === \")\") {\n      openBrackets -= 1;\n    }\n\
    \    if (openBrackets < 0) {\n      return false;\n    }\n  }\n  if (openBrackets\
    \ === 0) {\n    return true;\n  }\n  else {\n    return false;\n  }\n}\n", " \
    \ var count = 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == \"(\"){\n      count += 1;\n    } else if (brackets[i] == \")\"){\n     \
    \ count -= 1;\n    }\n    if (count < 0){\n      return false;\n    }\n  }\n \
    \ return count == 0;\n}\n", "    var open = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            open += 1;\n        }\n\
    \        else if (brackets[i] == \")\"){\n            open -= 1;\n        }\n\
    \        if (open < 0){\n            return false;\n        }\n    }\n    return\
    \ open == 0;\n}", "\tvar stack = [];\n\tvar count = 0;\n\tfor(var i = 0; i < brackets.length;\
    \ i++){\n\t\tvar item = brackets[i];\n\t\tif(item == '('){\n\t\t\tstack.push(item);\n\
    \t\t}\n\t\telse if(item == ')'){\n\t\t\tif(stack.length == 0){\n\t\t\t\tcount++;\n\
    \t\t\t}\n\t\t\telse{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.length\
    \ == 0 && count == 0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t\
    }\n}\n", "    var open = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            open += 1;\n        }\n     \
    \   else if (brackets[i] == \")\"){\n            open -= 1;\n        }\n     \
    \   if (open < 0){\n            return false;\n        }\n    }\n    return open\
    \ == 0;\n}", "    var a=0;\n    for(var i=0;i<brackets.length;i++){\n        if(brackets[i]==\"\
    (\"){\n            a=a+1;\n        }\n        else if(brackets[i]==\")\"){\n \
    \           a=a-1;\n        }\n        if(a<0){\n            return false;\n \
    \       }\n    }\n    if(a==0){\n        return true;\n    }\n    else{\n    \
    \    return false;\n    }\n}", "    var count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            count += 1;\n       \
    \ }\n        else{\n            count -= 1;\n        }\n        if (count < 0){\n\
    \            return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n", "    var open =\
    \ [];\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ == \"(\"){\n            open.push(brackets[i]);\n        } else if (brackets[i]\
    \ == \")\"){\n            if (open.length == 0){\n                return false;\n\
    \            } else {\n                open.pop();\n            }\n        }\n\
    \    }\n    if (open.length == 0){\n        return true;\n    } else {\n     \
    \   return false;\n    }\n}\n", "    var count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"(\") {\n            count += 1;\n     \
    \   } else if (brackets[i] == \")\") {\n            count -= 1;\n        }\n \
    \       if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count == 0;\n}\n", "  var bracketArray = brackets.split(\"\");\n  var count\
    \ = 0;\n  for (var i = 0; i < bracketArray.length; i++) {\n    if (bracketArray[i]\
    \ === \"(\") {\n      count++;\n    } else if (bracketArray[i] === \")\") {\n\
    \      count--;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  if (count === 0) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\n", "    var opencount = 0;\n    var closecount = 0;\n    for (var i = 0; i\
    \ < brackets.length; i++){\n      if (brackets[i] == \"(\"){\n        opencount++;\n\
    \      }\n      else if (brackets[i] == \")\"){\n        closecount++;\n     \
    \ }\n    }\n    if (opencount == closecount){\n      return true;\n    }\n   \
    \ else {\n      return false;\n    }\n}\n", "    var parens = 0;\n    for (var\
    \ i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n  \
    \          parens += 1;\n        } else if (brackets[i] == \")\") {\n        \
    \    parens -= 1;\n        }\n        if (parens < 0) {\n            return false;\n\
    \        }\n    }\n    return parens == 0;\n}\n", "  let left = brackets.split('').filter(char\
    \ => char === '(').length;\n  let right = brackets.split('').filter(char => char\
    \ === ')').length;\n  return left === right;\n}\n", "\tvar len = brackets.length;\n\
    \tif(len % 2 != 0)\n\t\treturn false;\n\tif(brackets[0] == \")\")\n\t\treturn\
    \ false;\n\tvar l = 0;\n\tvar r = 0;\n\tfor(var i = 0; i < len; i++){\n\t\tif(brackets[i]\
    \ == \"(\")\n\t\t\tl++;\n\t\telse\n\t\t\tr++;\n\t\tif(r > l)\n\t\t\treturn false;\n\
    \t}\n\tif(l == r)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\n", "\tvar opening\
    \ = 0\n\tvar closing = 0\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\t\
    if (brackets[i] == \"(\") {\n\t\t\topening += 1\n\t\t} else if (brackets[i] ==\
    \ \")\") {\n\t\t\tclosing += 1\n\t\t}\n\t}\n\tif (opening == closing) {\n\t\t\
    return true\n\t} else {\n\t\treturn false\n\t}\n}\n", "\t//make a counter and\
    \ start at 0.\n\tvar counter = 0;\n\t//loop through every char in the string.\n\
    \tfor(var i = 0; i < brackets.length; i++){\n\t\t//if the character is an opening\
    \ bracket, add 1 to the counter.\n\t\tif(brackets[i] === \"(\"){\n\t\t\tcounter\
    \ += 1;\n\t\t}\n\t\t//if the character is a closing bracket, subtract 1 from the\
    \ counter.\n\t\telse if(brackets[i] === \")\"){\n\t\t\tcounter -= 1;\n\t\t}\n\t\
    \t//if the counter is ever negative, return false.\n\t\tif(counter < 0){\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\t//if the counter is 0, return true.\n\tif(counter\
    \ === 0){\n\t\treturn true;\n\t}\n\t//if the counter is ever anything else, return\
    \ false.\n\telse{\n\t\treturn false;\n\t}\n}\n\n", "    var bracket_count = 0;\n\
    \    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"\
    (\") {\n            bracket_count++;\n        } else if (brackets[i] == \")\"\
    ) {\n            bracket_count--;\n        }\n        if (bracket_count < 0) {\n\
    \            return false;\n        }\n    }\n    return bracket_count == 0;\n\
    }\n", "\t// if the brackets string is empty, return true\n\tif (brackets === \"\
    \"){\n\t\treturn true;\n\t}\n\t// if the first character is not \"(\" or the last\
    \ character is not \")\", return false\n\tif (brackets[0] !== \"(\" || brackets[brackets.length\
    \ - 1] !== \")\"){\n\t\treturn false;\n\t}\n\t// make an empty bracket count variable\n\
    \tvar bracket_count = 0;\n\t// loop through all the characters in the string\n\
    \tfor (var i = 0; i < brackets.length; i++){\n\t\t// if the character is \"(\"\
    , increment the bracket count\n\t\tif (brackets[i] === \"(\"){\n\t\t\tbracket_count++;\n\
    \t\t}\n\t\t// if the character is \")\", decrement the bracket count\n\t\tif (brackets[i]\
    \ === \")\"){\n\t\t\tbracket_count--;\n\t\t}\n\t\t// if the bracket count is negative,\
    \ return false\n\t\tif (bracket_count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\
    \t// if the bracket count is not 0, return false\n\tif (bracket_count > 0){\n\t\
    \treturn false;\n\t}\n\t// if the string has made it to this point, it is a valid\
    \ bracket string\n\treturn true;\n}\n", "    var stack = [];\n    for (var i =\
    \ 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n        \
    \    stack.push(brackets[i]);\n        }\n        else if (brackets[i] == \")\"\
    ){\n            if (stack.length == 0){\n                return false;\n     \
    \       }\n            else{\n                stack.pop();\n            }\n  \
    \      }\n    }\n    if (stack.length == 0){\n        return true;\n    }\n  \
    \  else{\n        return false;\n    }\n}\n", "  return brackets.split(\"\").reduce(function(total,\
    \ bracket){\n    if(bracket === \"(\"){\n      return total + 1;\n    }\n    else\
    \ if(bracket === \")\"){\n      return total - 1;\n    }\n    else{\n      return\
    \ total;\n    }\n  }, 0) === 0;\n}\n", "  var stack = new Stack();\n  for (var\
    \ i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n     \
    \ stack.push(1);\n    }\n    else if (brackets[i] === \")\") {\n      if (stack.length\
    \ > 0) {\n        stack.pop();\n      }\n      else {\n        return false;\n\
    \      }\n    }\n  }\n  if (stack.length > 0) {\n    return false;\n  }\n  return\
    \ true;\n}\n", "  var answer = brackets.split(\"\");\n  var count = 0;\n  var\
    \ result = false;\n  for (var i = 0; i < answer.length; i++) {\n    if (answer[i]\
    \ === \"(\") {\n      count += 1;\n    } else if (answer[i] === \")\") {\n   \
    \   count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  if (count === 0) {\n    result = true;\n  }\n  return result;\n}\n", "    //\
    \ YOUR CODE HERE\n    var stack = [];\n    for (var i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"(\") {\n            stack.push(i);\n  \
    \      } else if (brackets[i] == \")\") {\n            if (stack.length == 0)\
    \ {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    if (stack.length == 0) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "\t//hint: keep track\
    \ of the count of open brackets\n\t//as you traverse the string\n\tvar count=0;\n\
    \tfor(var i=0;i<brackets.length;i++){\n\t\tif(brackets[i]=='('){\n\t\t\tcount++;\n\
    \t\t}\n\t\telse if(brackets[i]==')'){\n\t\t\tcount--;\n\t\t}\n\t\tif(count<0){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\tif(count==0){\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\n", "    var open = 0;\n    for (var i = 0; i <\
    \ brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n            open++;\n\
    \        } else if (brackets[i] == \")\") {\n            open--;\n        }\n\
    \        if (open < 0) {\n            return false;\n        }\n    }\n    return\
    \ open == 0;\n}\n", "  var count = 0;\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] == \"(\"){\n      count += 1;\n    }\n    else if\
    \ (brackets[i] == \")\"){\n      count -= 1;\n    }\n    if (count < 0){\n   \
    \   return false;\n    }\n  }\n  if (count == 0){\n    return true;\n  }\n  else{\n\
    \    return false;\n  }\n}", "  //replace this for solution\n  var stack = [];\n\
    \  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"(\")\
    \ {\n      stack.push(brackets[i]);\n    } else {\n      stack.pop();\n    }\n\
    \  }\n  return stack.length == 0;\n}\n", "    if(brackets[0] == \")\"){\n    \
    \    return false;\n    }\n    else{\n        var count = 0;\n        for(var\
    \ i = 0; i < brackets.length; i++){\n            if(brackets[i] == \"(\"){\n \
    \               count++;\n            }\n            else{\n                count--;\n\
    \            }\n            if(count < 0){\n                return false;\n  \
    \          }\n        }\n        if(count == 0){\n            return true;\n \
    \       }\n        else{\n            return false;\n        }\n    }\n}\n", " \
    \ let counter = 0;\n  let hasCorresponding = true;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      counter++;\n    } else if (brackets[i]\
    \ === \")\") {\n      counter--;\n    }\n    if (counter < 0) {\n      hasCorresponding\
    \ = false;\n    }\n  }\n  if (counter === 0) {\n    return hasCorresponding;\n\
    \  } else {\n    return false;\n  }\n}\n", "\tif(brackets.indexOf(\"(\")>brackets.indexOf(\"\
    )\")){\n\t\treturn false;\n\t}else{\n\t\treturn true;\n\t}\n}", "    var count=0;\n\
    \    for(var i=0;i<brackets.length;i++){\n        if(brackets[i]==\"(\"){\n  \
    \          count++;\n        }\n        else if(brackets[i]==\")\"){\n       \
    \     count--;\n        }\n        if(count<0){\n            return false;\n \
    \       }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n\n}\n", "    if (brackets.length < 2){\n      \
    \  return false;\n    }\n    var counter = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            counter++;\n        }\n\
    \        else if (brackets[i] == \")\"){\n            counter--;\n        }\n\
    \        if (counter < 0){\n            return false;\n        }\n    }\n    if\
    \ (counter == 0){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}\n", "    // for let i = 0; i < brackets.length; i++\n        // if brackets[i]\
    \ is (;\n            // count++\n        // else\n            // count--\n   \
    \     // if count is negative, return false\n    // if count is 0 return true\n\
    \    // else return false\n    let count = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] === '('){\n            count++;\n        } else\
    \ if (brackets[i] === ')'){\n            count--;\n        }\n        if (count\
    \ < 0){\n            return false;\n        }\n    }\n    if (count === 0){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n", "  if(brackets.length\
    \ % 2 != 0){\n    return false;\n  }\n  for(var i = 0; i < brackets.length; i+=2){\n\
    \    if(brackets[i] != '('){\n      return false;\n    }\n    if(brackets[i+1]\
    \ != ')'){\n      return false;\n    }\n  }\n  return true;\n}\n", "    var count\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ == \"(\") {\n            count++;\n        } else if (brackets[i] == \")\")\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\n", "    let numOfOpening\
    \ = 0;\n    let numOfClosing = 0;\n    for(let i = 0; i < brackets.length; i++){\n\
    \        if(brackets[i] === '('){\n            numOfOpening++;\n        }\n  \
    \      else{\n            numOfClosing++;\n        }\n    }\n    if(numOfOpening\
    \ == numOfClosing){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}", "  var i;\n  var stack = [];\n  for (i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === \"(\") {\n      stack.push(brackets[i]);\n    } else\
    \ if (brackets[i] === \")\") {\n      if (stack.length === 0) {\n        return\
    \ false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  if (stack.length\
    \ === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    var\
    \ open_count = 0;\n    var close_count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            open_count += 1;\n  \
    \      }\n        else{\n            close_count += 1;\n        }\n        if\
    \ (close_count > open_count){\n            return false;\n        }\n    }\n \
    \   if (open_count != close_count){\n        return false;\n    }\n    return\
    \ true;\n}\n", "\t//return 0;\n\tvar open = 0;\n\tvar closed = 0;\n\tfor (var\
    \ i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\t\
    open++;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\t\tclosed++;\n\t\t}\n\
    \t}\n\tif (open == closed) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}\n", "    var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            stack.push(brackets[i]);\n  \
    \      }\n        else if (brackets[i] == \")\"){\n            if (stack.length\
    \ == 0){\n                return false;\n            }\n            else{\n  \
    \              stack.pop();\n            }\n        }\n    }\n    if (stack.length\
    \ == 0){\n        return true;\n    }\n    else{\n        return false;\n    }\n\
    }", "\n}\n", "    var count = 0;\n    for (var i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] == \"(\") {\n            count++;\n        }\n  \
    \      else if (brackets[i] == \")\") {\n            count--;\n        }\n   \
    \     if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count == 0;\n}\n", "\tvar count = 0;\n\tfor (var i = 0; i < brackets.length;\
    \ i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\tcount += 1;\n\t\t}\n\t\telse\
    \ {\n\t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\tif (count == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}", "\tvar open=0;\n\tvar closed=0;\n\tfor(var i=0; i<brackets.length; i++){\n\
    \t\tif(brackets[i]===\"(\"){\n\t\t\topen++;\n\t\t}\n\t\telse if(brackets[i]===\"\
    )\"){\n\t\t\tclosed++;\n\t\t}\n\t}\n\tif(open==closed){\n\t\treturn true;\n\t\
    }\n\telse{\n\t\treturn false;\n\t}\n}\n", "  var num = 0;\n  for (var i = 0; i\
    \ < brackets.length; i++) {\n    if (brackets[i] == \"(\") {\n      num++;\n \
    \   }\n    else if (brackets[i] == \")\") {\n      num--;\n    }\n    if (num\
    \ < 0) {\n      return false;\n    }\n  }\n  if (num == 0) {\n    return true;\n\
    \  }\n  else {\n    return false;\n  }\n}\n", "    var len = brackets.length;\n\
    \    var cnt = 0;\n    for(var i = 0; i < len; i++){\n        if(brackets[i] ==\
    \ \"(\"){\n            cnt++;\n        }\n        else if(brackets[i] == \")\"\
    ){\n            cnt--;\n        }\n        if(cnt < 0){\n            return false;\n\
    \        }\n    }\n    if(cnt == 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "    let count = 0;\n    let result = true;\n\
    \    for (let i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"\
    (\"){\n            count++;\n        }\n        else if (brackets[i] == \")\"\
    ){\n            count--;\n        }\n        if (count < 0){\n            result\
    \ = false;\n        }\n    }\n    if (count != 0){\n        result = false;\n\
    \    }\n    return result;\n}\n", "    var br_pairs = brackets.split(\"\");\n\
    \    for (var i = 0; i < br_pairs.length; i++){\n        if (br_pairs[i] == \"\
    (\"){\n            br_pairs[i] = 1;\n        }\n        else{\n            br_pairs[i]\
    \ = -1;\n        }\n    }\n    return _(br_pairs).reduce(function(acc, val){\n\
    \        return acc + val;\n    }, 0) == 0;\n}\n", "    var num = 0;\n    for\
    \ (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n\
    \            num++;\n        } else if (brackets[i] == \")\") {\n            num--;\n\
    \        }\n        if (num < 0) {\n            return false;\n        }\n   \
    \ }\n    return num == 0;\n}\n", "\tvar open_brackets = [];\n\tvar idx = 0;\n\t\
    while (idx < brackets.length){\n\t\tif (brackets[idx] == '('){\n\t\t\topen_brackets.push(idx);\n\
    \t\t} else if (brackets[idx] == ')'){\n\t\t\tif (open_brackets.length == 0){\n\
    \t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\topen_brackets.pop();\n\t\t\t}\n\
    \t\t}\n\t\tidx++;\n\t}\n\treturn open_brackets.length == 0;\n}", "    var open\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ == '(') {\n            open += 1;\n        } else if (brackets[i] == ')') {\n\
    \            open -= 1;\n        }\n        if (open < 0) {\n            return\
    \ false;\n        }\n    }\n    return open == 0;\n}\n", "    let left = 0\n \
    \   let right = 0\n    for (let i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            left += 1\n        } else if (brackets[i]\
    \ == \")\"){\n            right += 1\n        }\n    }\n    if (left == right){\n\
    \        return true\n    } else {\n        return false\n    }\n}\n", "\t//if\
    \ brackets is an empty string\n\tif(brackets.length === 0){\n\t\treturn true;\n\
    \t}\n\t//the number of left brackets must be equal to the number of right brackets\n\
    \t//if more left brackets than right brackets, return false\n\tif(brackets.split(\"\
    (\").length > brackets.split(\")\").length){\n\t\treturn false;\n\t}\n\t//if more\
    \ right brackets than left brackets, return false\n\tif(brackets.split(\")\").length\
    \ > brackets.split(\"(\").length){\n\t\treturn false;\n\t}\n\t//if the first character\
    \ is a right bracket, return false\n\tif(brackets[0] === \")\"){\n\t\treturn false;\n\
    \t}\n\t//if the last character is a left bracket, return false\n\tif(brackets[brackets.length\
    \ - 1] === \"(\"){\n\t\treturn false;\n\t}\n\t//return true if all other checks\
    \ are passed\n\treturn true;\n}\n", "\tif (brackets.length == 0) return true;\n\
    \tif (brackets.charAt(0) == \")\") return false;\n\treturn correct_bracketing(brackets.substring(1))\n\
    }\n\n\n", "    var b = 0;\n    for (var i = 0; i < brackets.length; i++) {\n \
    \       if (brackets[i] == '(') b++;\n        else b--;\n        if (b < 0) return\
    \ false;\n    }\n    return b == 0;\n}\n", "    var left = brackets.replace(/[^\\\
    (]/g,\"\");\n    var right = brackets.replace(/[^\\)]/g,\"\");\n    return left.length\
    \ === right.length;\n}\n", "    var count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n      if (brackets[i] === \"(\"){\n        count = count + 1;\n     \
    \ }\n      else {\n        count = count - 1;\n      }\n      if (count < 0){\n\
    \        return false;\n      }\n    }\n    if (count === 0){\n      return true;\n\
    \    }\n    else {\n      return false;\n    }\n}\n", "  \n  // Use a variable\
    \ to track the number of opening and closing brackets\n  var count = 0;\n  \n\
    \  // Use a for loop to iterate through the string.\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    \n    // If we find an opening bracket, increase the counter.\n\
    \    if (brackets[i] === \"(\") {\n      count += 1;\n    }\n    \n    // If we\
    \ find a closing bracket, decrease the counter.\n    if (brackets[i] === \")\"\
    ) {\n      count -= 1;\n    }\n    \n    // If the counter is ever negative, there\
    \ is a closing bracket without a matching opening one.\n    if (count < 0) {\n\
    \      return false;\n    }\n  }\n  \n  // If the counter is zero, we have the\
    \ same number of opening and closing brackets.\n  return count === 0;\n}", " \
    \   var stack = [];\n    for (var i = 0; i < brackets.length; i++){\n        var\
    \ c = brackets[i];\n        if (c == '('){\n            stack.push(c);\n     \
    \   }\n        else if (c == ')'){\n            if (stack.length === 0){\n   \
    \             return false;\n            }\n            else{\n              \
    \  stack.pop();\n            }\n        }\n    }\n    return stack.length ===\
    \ 0;\n}\n", "  if (brackets.length % 2 != 0) {\n    return false;\n  }\n\n  var\
    \ storage = [];\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i]\
    \ == '(') {\n      storage.push(i);\n    } else {\n      var top = storage.pop();\n\
    \      if (brackets[top] == ')' || top === undefined) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\n", "\tvar stack = [];\n\tfor(var i =\
    \ 0; i < brackets.length; i++){\n\t\tvar s = brackets[i];\n\t\tif(s === \"(\"\
    ){\n\t\t\tstack.push(s);\n\t\t}\n\t\telse{\n\t\t\tif(stack.length === 0){\n\t\t\
    \t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t}\n\treturn stack.length\
    \ === 0;\n}\n\n", "\tvar opening =0;\n\tvar closing =0;\n\tfor (var i = 0; i <\
    \ brackets.length; i++) {\n\t\tif (brackets[i]==\"(\") {\n\t\t\topening++;\n\t\
    \t}\n\t\telse if (brackets[i]==\")\") {\n\t\t\tclosing++;\n\t\t}\n\t}\n\tif (opening==closing)\
    \ {\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "    if(brackets.length\
    \ == 0){\n        return true;\n    }\n    else if(brackets.length == 1){\n  \
    \      return false;\n    }\n    else if(brackets[0] == \")\"){\n        return\
    \ false;\n    }\n    else{\n        return correct_bracketing(brackets.slice(1));\n\
    \    }\n}\n", "    let stack = [];\n    for (let i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] === \"(\"){\n            stack.push(i);\n        } else\
    \ if (brackets[i] === \")\"){\n            if (stack.length > 0){\n          \
    \      stack.pop();\n            } else {\n                return false;\n   \
    \         }\n        }\n    }\n    return stack.length === 0;\n}\n", "    if (brackets.length\
    \ % 2 === 1){\n        return false;\n    }\n    var opens = 0;\n    for (var\
    \ i = 0; i < brackets.length; i++){\n        if (brackets[i] === \"(\"){\n   \
    \         opens++;\n        } else {\n            opens--;\n        }\n      \
    \  if (opens < 0){\n            return false;\n        }\n    }\n    return opens\
    \ === 0;\n}\n", "    var stack = new Stack();\n    for(var i = 0; i < brackets.length;\
    \ i++){\n        var char = brackets[i];\n        if(char == \"(\"){\n       \
    \     stack.push(char);\n        }else if(char == \")\"){\n            var open_char\
    \ = stack.pop();\n            if(open_char != \"(\"){\n                return\
    \ false;\n            }\n        }\n    }\n    return stack.is_empty();\n}\n\n",
  "\tvar bracket_count = 0;\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif\
    \ (brackets[i] == \"(\"){\n\t\t\tbracket_count++;\n\t\t}\n\t\telse if (brackets[i]\
    \ == \")\"){\n\t\t\tbracket_count--;\n\t\t}\n\t\tif (bracket_count < 0){\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\tif (bracket_count == 0){\n\t\treturn true;\n\t\
    }\n\telse{\n\t\treturn false;\n\t}\n}\n", "    var count = 0;\n    var i = 0;\n\
    \    while (i < brackets.length){\n        if (brackets[i] === \"(\"){\n     \
    \       count += 1;\n        }\n        else if (brackets[i] === \")\"){\n   \
    \         count -= 1;\n        }\n        if (count < 0){\n            return\
    \ false;\n        }\n        i += 1;\n    }\n    return count === 0;\n}\n", " \
    \   let opened = 0;\n    for (let i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\") opened++;\n        else if (brackets[i] == \")\") opened--;\n\
    \        if (opened < 0) return false;\n    }\n    return opened == 0;\n}\n\n",
  "    var open = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] == \"(\") {\n            open += 1;\n        } else if (brackets[i]\
    \ == \")\") {\n            open -= 1;\n        }\n        if (open < 0) {\n  \
    \          return false;\n        }\n    }\n    return open == 0;\n}\n", "\tvar\
    \ stack = [];\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i]\
    \ == \"(\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\t\telse if(brackets[i] ==\
    \ \")\"){\n\t\t\tif(stack.length == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\
    else{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif(stack.length == 0){\n\t\
    \treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "    var bracket_count\
    \ = 0;\n    var bracket_array = brackets.split(\"\");\n    for (i = 0; i < bracket_array.length;\
    \ i++){\n        if (bracket_array[i] == \"(\" && bracket_array[i] !== \")\"){\n\
    \            bracket_count++;\n        }\n        else if (bracket_array[i] ==\
    \ \")\" && bracket_array[i] !== \"(\"){\n            bracket_count--;\n      \
    \  }\n        else {\n            return false;\n        }\n    }\n    if (bracket_count\
    \ !== 0){\n        return false;\n    }\n    else {\n        return true;\n  \
    \  }\n}", "\tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\
    \tif (brackets[i] === \"(\") {\n\t\t\tcount++;\n\t\t} else if (brackets[i] ===\
    \ \")\") {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn count === 0;\n}\n\n", "    if(brackets.length % 2 == 1){\n\
    \        return false;\n    }\n    var right = 0;\n    for(var i = 0; i < brackets.length;\
    \ i++){\n        if(brackets[i] == \"(\"){\n            right = right + 1;\n \
    \       }else{\n            right = right - 1;\n        }\n        if(right <\
    \ 0){\n            return false;\n        }\n    }\n    if(right == 0){\n    \
    \    return true;\n    }else{\n        return false;\n    }\n}\n", "    if (brackets.length\
    \ < 1) return false;\n    let leftBrackets = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] === \"(\"){\n            leftBrackets++;\n  \
    \      } else if (brackets[i] === \")\"){\n            leftBrackets--;\n     \
    \   }\n        if (leftBrackets < 0) return false;\n    }\n    return leftBrackets\
    \ === 0;\n}\n", "    var bracketCount = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            bracketCount += 1;\n\
    \        } else if (brackets[i] == \")\"){\n            bracketCount -= 1;\n \
    \       }\n        if (bracketCount < 0){\n            return false;\n       \
    \ }\n    }\n    if (bracketCount > 0){\n        return false;\n    }\n    return\
    \ true;\n}\n", "    var stack = new Stack();\n    var count = 0;\n    for(var\
    \ i = 0; i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n     \
    \       stack.push(brackets[i]);\n        }\n        else{\n            if(stack.isEmpty()){\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    }\n    }\n    if(stack.isEmpty()){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "    // loop through the string\n    for\
    \ (var i = 0; i < brackets.length; i++){\n        // create a counter to see if\
    \ they cancel out\n        var open = 0;\n        // if there are more \")\" than\
    \ \"(\" return false\n        if (brackets[i] == \")\" && open == 0){\n      \
    \      return false;\n        }\n        // if there is an opening bracket add\
    \ one to the counter\n        if (brackets[i] == \"(\"){\n            open +=\
    \ 1;\n        }\n        // if there is a closing bracket subtract one to the\
    \ counter\n        if (brackets[i] == \")\"){\n            open -= 1;\n      \
    \  }\n    }\n    // if the counter hits zero return true\n    if (open == 0){\n\
    \        return true;\n    }\n    // else return false\n    else {\n        return\
    \ false;\n    }\n}\n", "\treturn count_char(brackets, '(') == count_char(brackets,\
    \ ')');\n}", "    var count = 0;\n    for (var i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] == \"(\") {\n            count += 1;\n        } else\
    \ if (brackets[i] == \")\") {\n            count -= 1;\n        }\n        if\
    \ (count < 0) {\n            return false;\n        }\n    }\n    return count\
    \ == 0;\n}\n", "  let count = 0;\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    if (brackets[i] === '(') {\n      count++;\n    } else if (brackets[i]\
    \ === ')') {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n", "    var counter = 0;\n    for (i =\
    \ 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n        \
    \    counter = counter + 1;\n        }\n        else{\n            counter = counter\
    \ - 1;\n        }\n        if (counter < 0){\n            return false;\n    \
    \    }\n    }\n    if (counter == 0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}", "\tvar opening = 0;\n\tvar closing = 0;\n\t\
    for (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\
    \t\t\topening++;\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\t\tclosing++;\n\
    \t\t}\n\t}\n\tif (opening == closing) {\n\t\treturn true;\n\t}\n\telse {\n\t\t\
    return false;\n\t}\n}\n", "  //set base case\n  if(brackets.length == 0) {\n \
    \   return true;\n  }\n  //make a stack\n  var stack = [];\n  //push the opening\
    \ bracket\n  stack.push(brackets[0]);\n  //loop through the brackets string\n\
    \  for(var i = 1; i < brackets.length; i++) {\n    //if the bracket is an opening\
    \ bracket, push it\n    if(brackets[i] == \"(\") {\n      stack.push(brackets[i]);\n\
    \    }\n    //if the bracket is a closing bracket, pop the stack\n    if(brackets[i]\
    \ == \")\") {\n      stack.pop();\n    }\n  }\n  //if the stack has anything left\
    \ in it, return false\n  if(stack.length > 0) {\n    return false;\n  }\n  //otherwise\
    \ return true\n  return true;\n}", "    // YOUR CODE HERE\n    if(brackets.length\
    \ % 2 != 0){\n        return false;\n    }\n    count = 0;\n    for(var i = 0;\
    \ i < brackets.length; i++){\n        if(brackets[i] == \"(\"){\n            count++;\n\
    \        }\n        else{\n            count--;\n        }\n        if(count <\
    \ 0){\n            return false;\n        }\n    }\n    if(count == 0){\n    \
    \    return true;\n    }\n    else{\n        return false;\n    }\n}\n", "\tif(brackets.length\
    \ % 2 != 0)\n\t\treturn false;\n\tvar arr = brackets.split(\"\");\n\twhile(arr.length\
    \ > 0){\n\t\tvar first = arr.shift();\n\t\tvar last = arr.pop();\n\t\tif(first\
    \ === \"(\"){\n\t\t\tif(last !== \")\")\n\t\t\t\treturn false;\n\t\t}\n\t\telse\n\
    \t\t\treturn false;\n\t}\n\treturn true;\n}", "\tlet count = 0;\n\tfor (let i\
    \ = 0; i < brackets.length; i++){\n\t\tif (brackets[i] == \"(\"){\n\t\t\tcount\
    \ += 1;\n\t\t}\n\t\telse{\n\t\t\tcount -= 1;\n\t\t}\n\t\tif (count < 0){\n\t\t\
    \treturn false;\n\t\t}\n\t}\n\treturn count == 0;\n}\n", "    var left = 0;\n\
    \    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"\
    (\"){\n            left++;\n        }\n        else if (brackets[i] == \")\"){\n\
    \            left--;\n        }\n        if (left < 0){\n            return false;\n\
    \        }\n    }\n    return left == 0;\n}\n", "    var count = 0;\n    for (var\
    \ i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n    \
    \        count += 1;\n        } else if (brackets[i] == \")\"){\n            count\
    \ -= 1;\n        }\n        if (count < 0){\n            return false;\n     \
    \   }\n    }\n    return count == 0;\n}", "    let level = 0;\n    for (let i\
    \ = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n      \
    \      level += 1;\n        }\n        else if (brackets[i] == \")\"){\n     \
    \       level -= 1;\n        }\n        if (level < 0){\n            return false;\n\
    \        }\n    }\n    return level == 0;\n}\n\n", "\tvar count = 0;\n\tfor (var\
    \ i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\t\
    count += 1;\n\t\t} else if (brackets[i] == \")\") {\n\t\t\tcount -= 1;\n\t\t}\n\
    \t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn (count == 0);\n\
    }\n", "\tvar stack = new Array;\n\tvar i = 0;\n\twhile(i < brackets.length){\n\
    \t\tvar letter = brackets.charAt(i);\n\t\tif(letter == '('){\n\t\t\tstack.push(letter);\n\
    \t\t}else if(letter == ')'){\n\t\t\tif(stack.length == 0){\n\t\t\t\treturn false;\n\
    \t\t\t}else{\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif(stack.length\
    \ == 0){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\n\n", "    var\
    \ open_bracket = 0;\n    for (var i = 0; i < brackets.length; i++) {\n      if\
    \ (brackets[i] == \"(\") {\n        open_bracket++;\n      }\n      else {\n \
    \       open_bracket--;\n      }\n      if (open_bracket < 0) {\n        return\
    \ false;\n      }\n    }\n    if (open_bracket != 0) {\n      return false;\n\
    \    }\n    return true;\n  }\n\n", "\tvar counter = 0;\n\tfor (var i = 0; i <\
    \ brackets.length; i++) {\n\t\tif (brackets[i] == '(') {\n\t\t\tcounter += 1;\n\
    \t\t}\n\t\telse if (brackets[i] == ')') {\n\t\t\tcounter -= 1;\n\t\t}\n\t\tif\
    \ (counter < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (counter == 0) {\n\t\t\
    return true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n", "\tif(brackets.length\
    \ == 0){\n\t\treturn true;\n\t}\n\tvar left_bracket = 0;\n\tvar right_bracket\
    \ = 0;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] == \"\
    (\"){\n\t\t\tleft_bracket += 1;\n\t\t}\n\t\telse if(brackets[i] == \")\"){\n\t\
    \t\tright_bracket += 1;\n\t\t}\n\t\tif(right_bracket > left_bracket){\n\t\t\t\
    return false;\n\t\t}\n\t}\n\tif(left_bracket == right_bracket){\n\t\treturn true;\n\
    \t}\n\telse{\n\t\treturn false;\n\t}\n}", "    var stack=[];\n    var i;\n   \
    \ for(i=0;i<brackets.length;i++){\n        if(brackets[i]===\"(\"){\n        \
    \    stack.push(brackets[i]);\n        }\n        else if(brackets[i]===\")\"\
    ){\n            if(stack.length===0){\n                return false;\n       \
    \     }\n            else{\n                stack.pop();\n            }\n    \
    \    }\n    }\n    if(stack.length===0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "    let count_open = 0;\n    let count_close\
    \ = 0;\n    for (let i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ == \"(\"){\n            count_open++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count_close++;\n        }\n    }\n    if (count_open\
    \ == count_close){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}", "  let x = 0;\n  let b = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    let bracket = brackets[i];\n    if (bracket === \"(\") {\n     \
    \ x++;\n    } else if (bracket === \")\") {\n      b++;\n    }\n  }\n  if (x !==\
    \ b) {\n    return false;\n  } else {\n    return true;\n  }\n}\n", "\tlet b =\
    \ brackets.split(\"\");\n\tlet stack = [];\n\tfor(let i = 0; i < b.length; i++){\n\
    \t\tif(b[i] === \"(\"){\n\t\t\tstack.push(b[i]);\n\t\t}\n\t\telse{\n\t\t\tif(stack.length\
    \ === 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t}\n\t\
    return stack.length === 0;\n}\n", "\tvar result = true;\n\tvar stack = [];\n\t\
    for (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] === \"(\") {\n\
    \t\t\tstack.push(brackets[i]);\n\t\t} else if (brackets[i] === \")\") {\n\t\t\t\
    if (stack.length === 0) {\n\t\t\t\tresult = false;\n\t\t\t\tbreak;\n\t\t\t} else\
    \ {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif (stack.length !== 0) {\n\t\
    \tresult = false;\n\t}\n\treturn result;\n}\n", "\tvar left = 0;\n\tvar right\
    \ = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] ==\
    \ \"(\") {\n\t\t\tleft += 1;\n\t\t}\n\t\telse {\n\t\t\tright += 1;\n\t\t}\n\t\
    }\n\tif (left == right) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}", "    var open = 0;\n    for (var i = 0; i < brackets.length; i++) {\n\
    \        if (brackets[i] == \"(\") {\n            open = open + 1;\n        }\n\
    \        else {\n            open = open - 1;\n        }\n        if (open < 0)\
    \ {\n            return false;\n        }\n    }\n    if (open == 0) {\n     \
    \   return true;\n    }\n    else {\n        return false;\n    }\n}\n\n", "\t\
    var open = 0;\n\tfor (var i = 0; i < brackets.length; i++){\n\t\tif (brackets[i]\
    \ == \"(\"){\n\t\t\topen++;\n\t\t}\n\t\telse if (brackets[i] == \")\"){\n\t\t\t\
    open--;\n\t\t}\n\t\tif (open < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (open\
    \ == 0){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n\n", "\t\
    var stack = [];\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i]\
    \ == \"(\"){\n\t\t\tstack.push(brackets[i]);\n\t\t}\n\t\telse if(brackets[i] ==\
    \ \")\"){\n\t\t\tstack.pop();\n\t\t}\n\t}\n\tif(stack.length == 0){\n\t\treturn\
    \ true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\n", "  var left = 0;\n  for (var\
    \ i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n     \
    \ left += 1;\n    } else if (brackets[i] === \")\") {\n      left -= 1;\n    }\n\
    \    if (left < 0) {\n      return false;\n    }\n  }\n  return left === 0;\n}",
  "    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i] === \")\"\
    ){\n            var j = i-1;\n            while(j >= 0){\n                if(brackets[j]\
    \ === \"(\"){\n                    brackets = brackets.slice(0,j) + brackets.slice(j+1,i)\
    \ + brackets.slice(i+1);\n                    i -= 2;\n                    break;\n\
    \                }\n                j--;\n            }\n            if(j ===\
    \ -1){\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}", "    return brackets.split(\"\").reduce(function(count, bracket){\n\
    \        if (count < 0) return count;\n        if (bracket === \"(\") return count\
    \ + 1;\n        if (bracket === \")\") return count - 1;\n    }, 0) === 0;\n}\n",
  "    var open = [];\n    var close = [];\n    for (i=0; i<brackets.length; i++){\n\
    \        if (brackets[i] == \"(\"){\n            open.push(brackets[i]);\n   \
    \     } else {\n            close.push(brackets[i]);\n        }\n    }\n    if\
    \ (open.length == close.length){\n        return true;\n    } else {\n       \
    \ return false;\n    }\n}\n\n", "\tvar opening_brackets_stack = [];\n\tfor (var\
    \ i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\t\
    opening_brackets_stack.push(brackets[i]);\n\t\t} else if (brackets[i] == \")\"\
    ) {\n\t\t\tif (opening_brackets_stack.length == 0) {\n\t\t\t\treturn false;\n\t\
    \t\t} else {\n\t\t\t\topening_brackets_stack.pop();\n\t\t\t}\n\t\t}\n\t}\n\tif\
    \ (opening_brackets_stack.length == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}", "    if(brackets[0] == \")\") return false;\n    if(brackets[brackets.length-1]\
    \ == \"(\") return false;\n    let count = 0;\n    for(i = 0; i < brackets.length;\
    \ i++){\n        if(brackets[i] == \"(\") count++;\n        if(brackets[i] ==\
    \ \")\") count--;\n        if(count < 0) return false;\n    }\n    return count\
    \ == 0;\n}", "    //create a variable of counter to count the number of \"(\"\
    \ minus the number of \")\"\n    //if counter is positive, it means that the number\
    \ of \"(\" > \")\", if counter is negative, it means that \")\" > \"(\".\n   \
    \ //if counter is not zero at the end, it means that there is an extra pair of\
    \ bracket.\n    //create a variable to check if the first bracket is \"(\".\n\
    \    //return the boolean result of the first bracket is \"(\", counter is 0 and\
    \ last bracket is \")\".\n    //last bracket is \")\" means that the number of\
    \ \"(\" = \")\"\n    var counter = 0;\n    var valid = false;\n    for (var i\
    \ = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n      \
    \      counter++;\n        }\n        else{\n            counter--;\n        }\n\
    \        if (i == 0 && brackets[i] == \"(\"){\n            valid = true;\n   \
    \     }\n    }\n    return valid && counter == 0 && brackets[brackets.length -\
    \ 1] == \")\";\n}\n", "  var left_brackets_count = 0;\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] == \"(\"){\n      left_brackets_count++;\n    }\n\
    \    else{\n      if (left_brackets_count <= 0){\n        return false;\n    \
    \  }\n      left_brackets_count--;\n    }\n  }\n  return left_brackets_count ==\
    \ 0;\n}\n", "\tvar open = 0;\n\tfor (var i = 0; i < brackets.length; i++){\n\t\
    \tif (brackets[i] === \"(\"){\n\t\t\topen += 1;\n\t\t}\n\t\telse if (brackets[i]\
    \ === \")\"){\n\t\t\topen -= 1;\n\t\t}\n\t\tif (open < 0){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn open === 0;\n}\n\n", "    var open = 0;\n    for (var i =\
    \ 0; i < brackets.length; i++) {\n        if (brackets[i] == \"(\") {\n      \
    \      open++;\n        } else if (brackets[i] == \")\") {\n            open--;\n\
    \        }\n        if (open < 0) {\n            return false;\n        }\n  \
    \  }\n    return open == 0;\n}\n", "    let opened = 0;\n    for (let i = 0; i\
    \ < brackets.length; i++){\n        if (brackets[i] == '('){\n            opened++;\n\
    \        }\n        else if (brackets[i] == ')'){\n            opened--;\n   \
    \     }\n        if (opened < 0){\n            return false;\n        }\n    }\n\
    \    return opened == 0;\n}", "\t// your code here\n}\n", "   var stack = new\
    \ Stack();\n   for(var i = 0; i < brackets.length; i++){\n      if(brackets[i]\
    \ == '('){\n         stack.push(brackets[i]);\n      }\n      else if(brackets[i]\
    \ == ')'){\n         if(stack.pop() == undefined){\n            return false;\n\
    \         }\n      }\n   }\n   if(stack.pop() == undefined){\n      return true;\n\
    \   }\n   else{\n      return false;\n   }\n}\n", "    var stack = [];\n    for\
    \ (var i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"){\n\
    \            stack.push(brackets[i]);\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            if (stack.length == 0){\n                return false;\n\
    \            }\n            else{\n                stack.pop();\n            }\n\
    \        }\n    }\n    if (stack.length == 0){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\n", "    let a = brackets.split(\"\
    \");\n    let count = 0;\n    for (let i = 0; i < a.length; i++) {\n        if\
    \ (a[i] === \"(\") {\n            count += 1;\n        } else if (a[i] === \"\
    )\") {\n            count -= 1;\n        }\n        if (count < 0) {\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}", "    var count\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ == \"(\"){\n            count += 1;\n        } else if (brackets[i] == \")\"\
    ){\n            count -= 1;\n        }\n        if (count < 0){\n            return\
    \ false;\n        }\n    }\n    return count == 0;\n}\n", "    var open_count\
    \ = 0;\n    var close_count = 0;\n    for (var bracket in brackets){\n       \
    \ if (brackets[bracket] == \"(\"){\n            open_count++;\n        }\n   \
    \     else if (brackets[bracket] == \")\"){\n            close_count++;\n    \
    \    }\n    }\n    if (open_count == close_count){\n        return true;\n   \
    \ }\n    else {\n        return false;\n    }\n}\n", "\tvar result = true;\n\t\
    // your code here!\n\treturn result;\n}\n", "  let count = 0;\n  for (i = 0; i\
    \ < brackets.length; i++){\n    if (brackets[i] == \"(\") {\n      count++;\n\
    \    } else if (brackets[i] == \")\") {\n      count--;\n    }\n    if (count\
    \ < 0) {\n      return false;\n    }\n  }\n  if (count == 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "\t//write your code here\n\tvar top\
    \ = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] ==\
    \ '(') {\n\t\t\ttop++;\n\t\t}\n\t\telse {\n\t\t\ttop--;\n\t\t}\n\t\tif (top <\
    \ 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif (top == 0) {\n\t\treturn true;\n\
    \t}\n\telse {\n\t\treturn false;\n\t}\n}", "    var str=brackets.split(\"\");\n\
    \    var left=0;\n    var right=0;\n    for(var i=0;i<str.length;i++){\n     \
    \   if(str[i]==\"(\"){\n            left+=1;\n        }\n        else{\n     \
    \       right+=1;\n        }\n    }\n    if(left==right){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n", "  var type = \"\"\n  var\
    \ closingBrackets = 0\n  var openBrackets = 0\n  for (var i = 0; i < brackets.length;\
    \ i++) {\n    type = brackets[i]\n    if (type === \")\") {\n      closingBrackets\
    \ += 1\n    }\n    if (type === \"(\") {\n      openBrackets += 1\n    }\n  }\n\
    \  return closingBrackets === openBrackets\n}\n", "    function correct_bracketing_h(brackets,\
    \ count){\n        if(brackets.length == 0){\n            return count == 0;\n\
    \        }else{\n            var c = brackets[0];\n            var rest = brackets.slice(1);\n\
    \            if(c == \"(\"){\n                return correct_bracketing_h(rest,\
    \ count + 1);\n            }else if(c == \")\"){\n                return correct_bracketing_h(rest,\
    \ count - 1);\n            }else{\n                return false;\n           \
    \ }\n        }\n    }\n    return correct_bracketing_h(brackets, 0);\n}\n", " \
    \   var count = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if\
    \ (brackets[i] == \"(\"){\n            count++;\n        }\n        else if (brackets[i]\
    \ == \")\"){\n            count--;\n        }\n        if (count < 0){\n     \
    \       return false;\n        }\n    }\n    if (count == 0){\n        return\
    \ true;\n    }\n    else{\n        return false;\n    }\n}\n", "  var count =\
    \ 0;\n  for (var i = 0; i < brackets.length; i++) {\n    if (brackets[i] == \"\
    (\") {\n      count++;\n    } else if (brackets[i] == \")\") {\n      count--;\n\
    \    }\n    if (count < 0) {\n      return false;\n    }\n  }\n  return count\
    \ == 0;\n}\n", "\tcount = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\
    \tif (brackets[i] == '(') {\n\t\t\tcount++;\n\t\t}\n\t\telse if (brackets[i] ==\
    \ ')') {\n\t\t\tcount--;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\
    \t}\n\t}\n\tif (count > 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n", " \
    \   var split = brackets.split(\"\");\n    var count = 0;\n    for (var i = 0;\
    \ i < split.length; i++){\n        if (split[i] == \"(\"){\n            count\
    \ += 1;\n        }\n        else if (split[i] == \")\"){\n            count -=\
    \ 1;\n        }\n        if (count < 0){\n            return false;\n        }\n\
    \    }\n    if (count == 0){\n        return true;\n    }\n    else{\n       \
    \ return false;\n    }\n}\n", "    var count = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            count += 1;\n       \
    \ } else if (brackets[i] == \")\"){\n            count -= 1;\n        }\n    \
    \    if (count < 0){\n            return false;\n        }\n    }\n    return\
    \ count == 0;\n}\n", "  var array = brackets.split(\"\");\n  var count = 0;\n\
    \  for (var i = 0; i < array.length; i++) {\n    if (array[i] === \"(\") {\n \
    \     count++;\n    } else if (array[i] === \")\") {\n      count--;\n    }\n\
    \    if (count < 0) {\n      return false;\n    }\n  }\n  if (count === 0) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\n", "    if(brackets[0]==\"\
    )\"){\n        return false;\n    }\n    var count=0;\n    for(var i=0;i<brackets.length;i++){\n\
    \        if(brackets[i]==\"(\"){\n            count+=1;\n        }\n        else{\n\
    \            count-=1;\n        }\n        if(count<0){\n            return false;\n\
    \        }\n    }\n    if(count==0){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "  // check if input is a string\n  if (typeof\
    \ brackets != \"string\"){\n    return \"invalid input\";\n  }\n\n  // check if\
    \ the last character is ) and length is even\n  if (brackets[brackets.length-1]\
    \ == \")\" && brackets.length % 2 == 0){\n    return false;\n  }\n\n  // check\
    \ if the string contains other characters than \"(\" and \")\"\n  for (var i =\
    \ 0; i < brackets.length; i++){\n    if (brackets[i] != \"(\" && brackets[i] !=\
    \ \")\"){\n      return \"invalid input\";\n    }\n  }\n\n  // check if the length\
    \ is odd\n  if (brackets.length % 2 == 1){\n    return false;\n  }\n\n  // check\
    \ if the length is odd\n  if (brackets.length % 2 == 1){\n    return false;\n\
    \  }\n\n  // check if there is an opening bracket at the end\n  if (brackets[brackets.length-1]\
    \ == \"(\"){\n    return false;\n  }\n\n  // check if there is a closing bracket\
    \ at the start\n  if (brackets[0] == \")\"){\n    return false;\n  }\n\n  // initialize\
    \ a counter which helps you count the openning brackets\n  var counter = 0;\n\n\
    \  // check if the number of opening brackets is more than the number of closing\
    \ ones\n  for (var i = 0; i < brackets.length; i++){\n    if (brackets[i] == \"\
    (\"){\n      counter += 1;\n    }else if (brackets[i] == \")\"){\n      counter\
    \ -= 1;\n    }\n    if (counter < 0){\n      return false;\n    }\n  }\n\n  return\
    \ true;\n}\n", "\tvar open_par = 0\n\tvar closed_par = 0\n\tfor (var i = 0; i\
    \ < brackets.length; i++) {\n\t\tif (brackets[i] == \"(\") {\n\t\t\topen_par +=\
    \ 1\n\t\t}\n\t\telse if (brackets[i] == \")\") {\n\t\t\tclosed_par += 1\n\t\t\
    }\n\t\telse {\n\t\t\tconsole.log(\"lol\")\n\t\t}\n\t}\n\tif (open_par == closed_par)\
    \ {\n\t\treturn true\n\t}\n\telse {\n\t\treturn false\n\t}\n}\n", "    var openBrackets\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ == \"(\") {\n            openBrackets += 1;\n        }\n        else if (brackets[i]\
    \ == \")\") {\n            openBrackets -= 1;\n        }\n        if (openBrackets\
    \ < 0) {\n            return false;\n        }\n    }\n    if (openBrackets ==\
    \ 0) {\n        return true;\n    }\n    else {\n        return false;\n    }\n\
    }\n\n", "  let counter = 0;\n  for (let i = 0; i < brackets.length; i++) {\n \
    \   if (brackets[i] === '(') {\n      counter += 1;\n    } else if (brackets[i]\
    \ === ')') {\n      counter -= 1;\n    }\n    if (counter < 0) {\n      return\
    \ false;\n    }\n  }\n  return counter === 0;\n}\n", "    //count brackets\n \
    \   var open = 0;\n    var close = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++){\n        if (brackets[i] == \"(\"){\n            open = open + 1;\n  \
    \      }\n        else{\n            close = close + 1;\n        }\n    }\n  \
    \  //if same number of open and close, return true\n    if (open == close){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \   let stack = [];\n    for (let bracket of brackets){\n        if (bracket ==\
    \ \"(\"){\n            stack.push(bracket);\n        }\n        else if (bracket\
    \ == \")\"){\n            if (stack.length == 0){\n                return false;\n\
    \            }\n            else {\n                stack.pop();\n           \
    \ }\n        }\n    }\n    return stack.length == 0;\n}\n\n", "\t//if open, go\
    \ right\n\t//if close, go left\n\t//if it's at the start, remove it. If you removed\
    \ it, check if the next one is a closing. If it is, remove it too.\n\tvar isCorrect\
    \ = true;\n\tvar curr = 0;\n\tvar bracketArr = brackets.split(\"\");\n\tvar length\
    \ = bracketArr.length;\n\tfor(var i = 0; i < length; i++){\n\t\tvar curr = bracketArr[i];\n\
    \t\tif(curr == \"(\"){\n\t\t\ti++;\n\t\t\twhile(bracketArr[i] == \"(\"){\n\t\t\
    \t\ti++;\n\t\t\t}\n\t\t\tif(bracketArr[i] == \")\"){\n\t\t\t\tbracketArr.splice(i,\
    \ 1);\n\t\t\t\tbracketArr.splice(i-1, 1);\n\t\t\t\ti -= 2;\n\t\t\t}\n\t\t\telse{\n\
    \t\t\t\tisCorrect = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if(curr ==\
    \ \")\"){\n\t\t\tbracketArr.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n\treturn isCorrect;\n\
    }\n", "\t//create an array from the brackets argument\n\tlet bracketsArray = brackets.split(\"\
    \");\n\tlet open = 0;\n\tlet close = 0;\n\t//iterate through the array. increment\
    \ open or close counter depending on whether \"(\" or \")\" encountered.\n\t//return\
    \ false if close counter > open counter at any point\n\tfor (let i = 0; i < bracketsArray.length;\
    \ i++){\n\t\tif (bracketsArray[i] === \"(\"){\n\t\t\topen++;\n\t\t}\n\t\telse\
    \ if (bracketsArray[i] === \")\"){\n\t\t\tclose++;\n\t\t}\n\t\tif (close > open){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\t//return false if close counter != open counter\
    \ at the end\n\tif (close !== open){\n\t\treturn false;\n\t}\n\treturn true;\n\
    }\n", "    if (brackets.charAt(0) === \")\") return false;\n    let stack = [0];\n\
    \n    for (let i = 0; i < brackets.length; i++) {\n        let bracket = brackets.charAt(i);\n\
    \        if (bracket === \"(\") {\n            stack.push(i);\n        } else\
    \ if (bracket === \")\") {\n            if (stack.length === 0) return false;\n\
    \            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}",
  "\tif(brackets === '') return true;\n\tif(brackets[0] === ')' || brackets[brackets.length-1]\
    \ === '(') return false;\n\tvar count = 0;\n\tfor(var i = 0; i < brackets.length;\
    \ i++){\n\t\tif(brackets[i] === '(') count++;\n\t\tif(brackets[i] === ')') count--;\n\
    \t\tif(count < 0) return false;\n\t}\n\treturn count === 0;\n}\n", "\t// your\
    \ code here\n}\n", "    var stack = [];\n    var dict = {'(':')'};\n    for(var\
    \ i=0; i<brackets.length; i++){\n        if(brackets[i] == '('){\n           \
    \ stack.push(brackets[i]);\n        }else{\n            if(dict[stack.pop()] !=\
    \ brackets[i]){\n                return false;\n            }\n        }\n   \
    \ }\n    return true;\n}", "    //the number of opening bracket\n    var length\
    \ = 0;\n    for(var i = 0; i < brackets.length; i++){\n        if(brackets[i]\
    \ === '('){\n            length++;\n        }\n        else if(brackets[i] ===\
    \ ')'){\n            length--;\n        }\n        if(length < 0){\n         \
    \   return false;\n        }\n    }\n    return length === 0;\n}\n", "    return\
    \ true;\n}\n", "\t// TODO: write code here\n\tvar i = 0;\n\tvar numopen = 0;\n\
    \twhile (i < brackets.length){\n\t\tif (brackets[i] === \"(\"){\n\t\t\tnumopen++;\n\
    \t\t} else if (brackets[i] === \")\"){\n\t\t\tnumopen--;\n\t\t}\n\t\tif (numopen\
    \ < 0){\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\tif (numopen === 0){\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n", "    let pos = 0;\n  \
    \  for (let i = 0; i < brackets.length; i++){\n        if (brackets[i] == \"(\"\
    ){\n            pos++;\n        } else {\n            pos--;\n        }\n    \
    \    if (pos < 0){\n            return false;\n        }\n    }\n    return pos\
    \ == 0;\n}\n", "\tvar open_brackets=0;\n\tfor(var i=0;i<brackets.length;i++){\n\
    \t\tif(brackets[i]===\"(\"){\n\t\t\topen_brackets++;\n\t\t}else if(brackets[i]===\"\
    )\"){\n\t\t\topen_brackets--;\n\t\t}\n\t\tif(open_brackets<0){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn open_brackets===0;\n}", "\tvar ans = false;\n\tvar count\
    \ = 0;\n\tfor(var i = 0; i < brackets.length; i++){\n\t\tif(brackets[i] === '('){\n\
    \t\t\tcount++;\n\t\t}else if(brackets[i] === ')'){\n\t\t\tcount--;\n\t\t}\n\t\t\
    if(count < 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\tif(count === 0){\n\t\treturn\
    \ true;\n\t}\n\treturn false;\n}\n", "  var count = 0;\n  for (var i = 0; i <\
    \ brackets.length; i++) {\n    if (brackets[i] == '(')\n      count++;\n    else\
    \ if (brackets[i] == ')')\n      count--;\n    if (count < 0)\n      return false;\n\
    \  }\n  return count == 0;\n}\n", "  if (brackets[0] == \")\"){\n    return false;\n\
    \  }\n  var n = 0;\n  for (var i = 0; i < brackets.length; i++){\n    if (brackets[i]\
    \ == \"(\"){\n      n++;\n    } else {\n      n--;\n    }\n    if (n < 0){\n \
    \     return false;\n    }\n  }\n  if (n == 0){\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\n", "    //TODO: Implement me\n    var count = 0;\n\
    \    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] == \"\
    (\") {\n            count++;\n        } else if (brackets[i] == \")\") {\n   \
    \         count--;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    return (count == 0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
