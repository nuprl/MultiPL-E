name: HumanEval_22_filter_integers
language: js
prompt: "//Filter given array of any jsthon values only for integers\n// >>> filter_integers([\"\
  a\", 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, \"abc\", {}, []])\n// [1,\
  \ 2, 3]\nfunction filter_integers(values){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([4,\
  \ {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3, \"c\"\
  , 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
completions: ["\tvar result = [];\n\tvalues.forEach(function(value){\n\t\tif(typeof\
    \ value === \"number\" && value % 1 === 0){\n\t\t\tresult.push(value);\n\t\t}\n\
    \t});\n\treturn result;\n}\n", "    return values.filter(function(element){\n\
    \        return typeof element === \"number\" && element%1 === 0;\n    });\n}\n",
  "    return values.filter(function(val){\n        return Number.isInteger(val);\n\
    \    });\n}\n", "  let int = [];\n  for(let i = 0; i < values.length; i++){\n\
    \    if(typeof values[i] === \"number\" && isFinite(values[i])){\n      int.push(values[i]);\n\
    \    }\n  }\n  return int;\n}", "\tvar new_values = [];\n\tfor(i=0; i<values.length;\
    \ i++){\n\t\tif(typeof values[i] === \"number\" && values[i] % 1 === 0){\n\t\t\
    \tnew_values.push(values[i]);\n\t\t}\n\t}\n\treturn new_values;\n}", "  var filtered\
    \ = [];\n  for(var i = 0; i < values.length; i++){\n    if(Number.isInteger(values[i])){\n\
    \      filtered.push(values[i]);\n    }\n  }\n  return filtered;\n}\n", "    if(!Array.isArray(values))\n\
    \        throw new Error(\"Values must be an array!\");\n    let ints = [];\n\
    \    values.forEach(value => {\n        if(is_integer(value))\n            ints.push(value);\n\
    \    });\n    return ints;\n}\n", "    return values.filter(value => is_integer(value));\n\
    }\n", "    return values.filter(function(value){\n        return typeof value\
    \ === \"number\" && value % 1 === 0;\n    });\n}\n", "  let filtered_values =\
    \ [];\n  for(let i=0; i<values.length; i++){\n    if(Number.isInteger(values[i])){\n\
    \      filtered_values.push(values[i]);\n    }\n  }\n  return filtered_values;\n\
    }", "    return filter(values, function(x){\n        return typeof x === \"number\"\
    \ && (x % 1 === 0);\n    });\n}\n", "  var integers = [];\n  for (var i = 0; i\
    \ < values.length; i++){\n    if (typeof values[i] === \"number\" && !isNaN(values[i])){\n\
    \      integers.push(values[i]);\n    }\n  }\n  return integers;\n}\n", "    //define\
    \ filter_integers function\n    function filter_integer(value){\n        //define\
    \ filter_integer function\n        if(typeof value === \"number\" && value % 1\
    \ === 0){\n            // check if input value is type number and divisible by\
    \ 1\n            return true;\n            // returns true if above condition\
    \ is true\n        }\n        else{\n            return false;\n            //returns\
    \ false if above condition is false\n        }\n    }\n    return values.filter(filter_integer);\n\
    \    //return the array after filtering\n}", "    function is_integer(n){\n  \
    \      return n % 1 === 0;\n    }\n    var int_array = [];\n    for(var i = 0;\
    \ i < values.length; i++){\n        if(is_integer(values[i])){\n            int_array.push(values[i]);\n\
    \        }\n    }\n    return int_array;\n}\n", "    return values.filter(is_int);\n\
    }\n", "    return values.filter(function(n){\n        return typeof n === \"number\"\
    \ && n === Math.floor(n);\n    });\n}\nvar my_array = [\"a\", 3.14, 5];", "  \
    \  return values.filter(x => typeof x === \"number\");\n}\n", "  var result =\
    \ [];\n  for (var i=0; i<values.length; i++){\n    if (typeof values[i] == \"\
    number\" && values[i] % 1 == 0){\n      result.push(values[i]);\n    }\n  }\n\
    \  return result;\n}\n", "\treturn values.filter(function(num){\n\t\treturn (typeof\
    \ num === \"number\" && num % 1 === 0);\n\t});\n}\n", "\tvar filteredArray = [];\n\
    \tfor(var i = 0; i < values.length; i++){\n\t\tif(typeof values[i] === \"number\"\
    \ && values[i] % 1 === 0){\n\t\t\tfilteredArray.push(values[i]);\n\t\t}\n\t}\n\
    \treturn filteredArray;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
