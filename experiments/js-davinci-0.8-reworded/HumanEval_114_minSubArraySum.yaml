name: HumanEval_114_minSubArraySum
language: js
prompt: "//Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n// of nums.\n// Example\n// >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n\
  // 1\n// >>> minSubArraySum([-1, -2, -3])\n// -6\nfunction minSubArraySum(nums){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
  \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
  \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
  \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
  \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
  \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
completions: ["    // code here\n}\nmodule.exports = minSubArraySum;", "    let minSum\
    \ = Number.MAX_SAFE_INTEGER;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        minSum = Math.min(minSum, sum);\n  \
    \      if(sum < 0){\n            sum = 0;\n        }\n    }\n    return minSum;\n\
    }\n\nmodule.exports = minSubArraySum;", "    let sum = 0;\n    let minSum = nums[0];\n\
    \    for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        if(sum\
    \ < minSum){\n            minSum = sum;\n        }\n        if(sum > 0){\n   \
    \         sum = 0;\n        }\n    }\n    return minSum;\n}\n", "    let minSum\
    \ = 0;\n    for(let i = 0; i < nums.length; i++){\n        let sum = 0;\n    \
    \    for(let j = i; j < nums.length; j++){\n            sum += nums[j];\n    \
    \        if(sum < minSum){\n                minSum = sum;\n            }\n   \
    \     }\n    }\n    return minSum;\n}", "    if (nums.length === 0) return 0;\n\
    \    if (nums.length === 1) return nums[0];\n    var min = 0;\n    var max = 0;\n\
    \    var currentSum = 0;\n    var i = 0;\n    while (i < nums.length) {\n    \
    \    currentSum += nums[i];\n        if (currentSum > max) {\n            max\
    \ = currentSum;\n        }\n        if (currentSum < min) {\n            min =\
    \ currentSum;\n        }\n        i++;\n    }\n    return min;\n}", "  let minSum\
    \ = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  let i = 0;\n  while(i < nums.length){\n\
    \    let j = i;\n    sum = 0;\n    while(j < nums.length){\n      sum += nums[j];\n\
    \      minSum = Math.min(minSum, sum);\n      j++;\n    }\n    i++;\n  }\n  return\
    \ minSum;\n}\n", "    let minSum = Infinity;\n    let currentSum = 0;\n    for(let\
    \ i = 0; i < nums.length; i++){\n        currentSum += nums[i];\n        if(currentSum\
    \ < minSum){\n            minSum = currentSum;\n        }\n        if(currentSum\
    \ > 0){\n            currentSum = 0;\n        }\n    }\n    return minSum;\n}\n",
  "    // Write your code here.\n    let minimum = nums[0];\n    let sum = 0;\n  \
    \  for(let i = 0; i < nums.length; i++){\n        sum += nums[i];\n        if(sum\
    \ < minimum){\n            minimum = sum;\n        }\n        if(sum > 0){\n \
    \           sum = 0;\n        }\n    }\n    return minimum;\n}\n", "  let cur\
    \ = nums[0];\n  let min = cur;\n  for (let i = 1; i < nums.length; i++) {\n  \
    \  cur = Math.min(nums[i], cur + nums[i]);\n    min = Math.min(min, cur);\n  }\n\
    \  return min;\n}\n", "    let minSum = Number.MAX_SAFE_INTEGER;\n    let currSum\
    \ = 0;\n    for(let i = 0; i < nums.length; i++){\n        currSum += nums[i];\n\
    \        if(currSum < minSum){\n            minSum = currSum;\n        }\n   \
    \     if(currSum > 0){\n            currSum = 0;\n        }\n    }\n    return\
    \ minSum;\n}\n", "  let minSum = Number.MAX_SAFE_INTEGER;\n  let currentSum =\
    \ 0;\n  let startIndex = 0;\n  let endIndex = 0;\n  while(endIndex < nums.length){\n\
    \    currentSum += nums[endIndex];\n    if(currentSum < minSum){\n      minSum\
    \ = currentSum;\n    }\n    if(currentSum < 0){\n      currentSum = 0;\n     \
    \ startIndex = endIndex + 1;\n    }\n    endIndex++;\n  }\n  return minSum;\n}",
  "    let currentSum = nums[0];\n    let minSum = nums[0];\n    for(let i = 1; i\
    \ < nums.length; i++){\n        currentSum = Math.min(currentSum + nums[i], nums[i]);\n\
    \        minSum = Math.min(currentSum, minSum);\n    }\n    return minSum;\n}\n\
    minSubArraySum([2, 3, 4, 1, 2, 4]);", "\tlet min = nums[0];\n\tlet sum = nums[0];\n\
    \tfor(let i = 1; i < nums.length; i++){\n\t\tsum = Math.min(nums[i], sum + nums[i]);\n\
    \t\tmin = Math.min(min, sum);\n\t}\n\treturn min;\n}", "    let minSum = 0;\n\
    \    let minCount = Infinity;\n    let sum = 0;\n    for(let i = 0; i < nums.length;\
    \ i++){\n        sum += nums[i];\n        if(sum < minSum){\n            minSum\
    \ = sum;\n            minCount = i + 1;\n        }\n    }\n    return nums.slice(minCount\
    \ - nums.length).reduce((a, b) => a + b);\n}\n", "\n}\n", "    // find minimum\
    \ sum of any subarray of nums\n    let total = 0;\n    let minSum = 0;\n    let\
    \ min = Infinity;\n    for (let i = 0; i < nums.length; i++) {\n        total\
    \ += nums[i];\n        min = Math.min(min, total - minSum);\n        minSum =\
    \ Math.min(minSum, total);\n    }\n    return min;\n}\n", "    let minSum = Infinity;\n\
    \    let sum = 0;\n    let i = 0;\n    let j = 0;\n    while(j < nums.length){\n\
    \        sum += nums[j];\n        j++;\n        while(sum >= 0){\n           \
    \ minSum = Math.min(minSum, sum);\n            sum -= nums[i];\n            i++;\n\
    \        }\n    }\n    return minSum;\n}\n", "    let start = 0;\n    let end\
    \ = 0;\n    let minimum = Infinity;\n    let currentSum = 0;\n    while(start\
    \ < nums.length){\n        if(currentSum < 0){\n            start = end;\n   \
    \         currentSum = 0;\n        }\n        currentSum += nums[end];\n     \
    \   minimum = Math.min(minimum, currentSum);\n        end++;\n    }\n    return\
    \ minimum;\n}", "    // check for empty array\n    if(nums.length === 0) return\
    \ 0;\n    let minSum = nums[0];\n    let tempSum = nums[0];\n    for(let i = 1;\
    \ i < nums.length; i++){\n        tempSum = Math.min(tempSum + nums[i], nums[i]);\n\
    \        minSum = Math.min(minSum, tempSum);\n    }\n    return minSum;\n}", " \
    \ var minSum = 0;\n  var sum = 0;\n  var i = 0;\n  var j = 0;\n  var k = 0;\n\
    \  var iValue = 0;\n  var jValue = 0;\n  for (i; i < nums.length; i++) {\n   \
    \ iValue = nums[i];\n    for (j = i; j < nums.length; j++) {\n      jValue = nums[j];\n\
    \      sum += jValue;\n      if (sum < minSum || k === 0) {\n        minSum =\
    \ sum;\n      }\n      k++;\n    }\n    sum = 0;\n  }\n  return minSum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
