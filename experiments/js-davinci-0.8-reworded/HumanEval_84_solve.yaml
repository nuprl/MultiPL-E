name: HumanEval_84_solve
language: js
prompt: "//Given a positive integer N, return the total sum of its digits in binary.\n\
  // Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>>\
  \ solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264\
  \ N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"\
  110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"\
  1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();"
completions: ["  //your code here\n}", "    //..\n    return N.toString(2).split('').reduce((sum,val)=>sum+parseInt(val),0);\n\
    };\n", "  var sN = N.toString();\n  var binary = [];\n  for (var i = 0; i < sN.length;\
    \ i++) {\n    binary.push(parseInt(sN[i],10).toString(2));\n  }\n  var binaryString\
    \ = binary.join('');\n  var sum = 0;\n  for (var i = 0; i < binaryString.length;\
    \ i++) {\n    sum += Number(binaryString[i]);\n  }\n  return sum.toString();\n\
    }\n", "    if(N === 0) return 0;\n    return N % 2 + solve(parseInt(N / 2));\n\
    }", "\tvar bin = N.toString(2);\n\tvar sum = 0;\n\tfor (var i = 0; i < bin.length;\
    \ i++) {\n\t\tsum += Number(bin[i]);\n\t}\n\treturn sum.toString();\n}\n", " \
    \   return N.toString(2).split('').reduce((acc, curr) => acc + +curr, 0);\n}",
  "\tvar bin = [];\n\tvar r;\n\tvar sum = \"\";\n\twhile(N > 0){\n\t\tr = N % 2;\n\
    \t\tif(r == 1){\n\t\t\tbin.push(1);\n\t\t}\n\t\telse{\n\t\t\tbin.push(0);\n\t\t\
    }\n\t\tN = (N - r) / 2;\n\t}\n\tfor(var i = bin.length - 1; i >= 0; i--){\n\t\t\
    sum += bin[i];\n\t}\n\treturn sum;\n}\n\nN = 147;", "// your code here!\nlet B\
    \ = [];\nlet sum = 0;\nfor(let i = 0; i < N.length; i++){\nB.push(N[i] % 2);\n\
    B.push(Math.floor(N[i] / 2));\n}\nB.reverse();\nfor(let i = 0; i < B.length; i++){\n\
    sum += B[i];\n}\nreturn sum;\n}", "    let result = \"\";\n    while(N){\n   \
    \     result = N % 2 + result;\n        N = Math.floor(N / 2);\n    }\n    return\
    \ result;\n}", "  //..\n}", "  // Write your code here\n  return parseInt(N, 10).toString(2).split('').reduce((a,\
    \ b) => +a + +b);\n}\n\nN = 1000;", "  return N.toString(2);\n}", "    return\
    \ Number(N).toString(2).split('').reduce((a,c)=>a+Number(c),0);\n}", "  return\
    \ (N).toString(2).split('').reduce((a,b)=>a*1+b*1,0)\n}", "  let binary = N.toString(2)\n\
    \  console.log(binary)\n  let sum = 0\n  for (let i = 0; i < binary.length; i++)\
    \ {\n    sum += Number(binary[i])\n  }\n  return sum\n}", "    //..\n    var ans\
    \ = N.toString(2);\n    var total = 0;\n    for (var i = 0; i < ans.length; i++)\
    \ {\n        total += Number(ans[i]);\n    }\n    return total.toString();\n}\n",
  "    return N.toString(2);\n}", "    return (N.toString(2)).split('').reduce((a,\
    \ b) => +a + +b)\n}", "    return N.toString(2);\n}", "    //x = N.toString(2);\n\
    \    let x = (+N).toString(2);\n    let sum = 0;\n    for (let i = 0; i < x.length;\
    \ i++) {\n        sum += parseInt(x[i]);\n    }\n    return sum;\n};", "    let\
    \ binaryN = (N >>> 0).toString(2);\n    let sumOfBinary = 0;\n    for (let i =\
    \ 0; i < binaryN.length; i++) {\n        sumOfBinary += Number(binaryN[i]);\n\
    \    }\n    return sumOfBinary.toString();\n}\n", "  //your code here\n}", " \
    \   let str = \"\";\n    if(N < 0){\n        return \"Error, N is less than 0.\"\
    ;\n    }\n    if(N > 10000){\n        return \"Error, N is greater than 10000.\"\
    ;\n    }\n    while(N > 0){\n        str = N % 2 + str;\n        N = Math.floor(N\
    \ / 2);\n    }\n    return str;\n}\n", "    // binary number\n    let binaryNum\
    \ = [];\n    // if not 0 divide N by 2 and if it is the whole number push 0 to\
    \ binaryNum, otherwise push 1 to binaryNum\n    while (N > 0) {\n        binaryNum.push(N\
    \ % 2);\n        N = Math.floor(N / 2);\n    }\n    // returns 0\n    return binaryNum.reverse().join('');\n\
    }", "\n}\n", "    //..\n    return (N >>> 0).toString(2);\n}", "    let str;\n\
    \    let sum = 0;\n    let count = 0;\n    if(N === 0){\n        return 0;\n \
    \   }\n    if(N > 0){\n        str = N.toString(2);\n        while(count < str.length){\n\
    \            sum += parseInt(str[count]);\n            count++;\n        }\n \
    \   }\n    return sum;\n}", "    return (N >>> 0).toString(2).split('').reduce((a,\
    \ b) => +a + +b, 0);\n}\n", "    return N.toString(2);\n}\nmodule.exports = {\n\
    \    solve : solve\n}", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0).toString();\n\
    }", "  // ...\n  var result = \"\";\n  for (var i = N; i > 0; i = Math.floor(i\
    \ / 2)) {\n      result = (i % 2) + result;\n  }\n  return result;\n}\n\nsolve(1000);\n\
    solve(150);\nsolve(147);", "    var result = '';\n    while(N>0){\n        result\
    \ = N%2 + result;\n        N = Math.floor(N/2);\n    }\n    return result;\n}",
  "  //..\n}\n\nmodule.exports = {\n  solve: solve,\n  attendance: \"much words\"\n\
    }", "    //..\n    return N.toString(2);\n};\n", "    var total = 0;\n    var\
    \ bin = [];\n    while(N > 0){\n        var temp = Math.floor(N%2);\n        bin.push(temp);\n\
    \        N = N/2;\n    }\n    for(var i = 0; i < bin.length; i++){\n        total\
    \ += bin[i];\n    }\n    return total;\n}", "    let newN = N.toString();\n  \
    \  let total = 0;\n    for(let i = 0; i < newN.length; i++){\n        let digit\
    \ = newN[i];\n        total += parseInt(digit);\n    }\n    return total.toString(2);\n\
    }", "    if (N === 0) {\n        return '0';\n    }\n    var binaryNumber = '';\n\
    \    while (N > 0) {\n        var binaryDigit = N % 2;\n        binaryNumber =\
    \ binaryDigit + binaryNumber;\n        N = Math.floor(N / 2);\n    }\n    return\
    \ binaryNumber;\n}\n", "  return N.toString(2);\n}\nmodule.exports = {\n  solve\
    \ : solve,\n  attendance : \"much words\" \n};", "  return (N).toString(2).split('').reduce((sum,\
    \ value) => {\n    return sum + Number(value);\n  }, 0);\n}", "  // Your code\
    \ here\n  let binary;\n  let decimal = N.toString(2);\n  let decimal_length =\
    \ decimal.length;\n  let res = 0;\n  for(let i = 0; i < decimal_length; i++){\n\
    \    res += parseInt(decimal[i]);\n  }\n  return res.toString();\n}\n", "    var\
    \ sum = 0;\n    var k = 0;\n    var sum2 = 0;\n    var temp = N;\n    var bin\
    \ = \"\";\n    while(temp!=0){\n        var a = temp%2;\n        temp = parseInt(temp/2);\n\
    \        bin += a;\n    }\n    for(var i = 0; i < bin.length; i++){\n        sum\
    \ += parseInt(bin[i]);\n    }\n    for(var j = bin.length-1; j >= 0; j--){\n \
    \       sum2 += parseInt(bin[j])*Math.pow(2,k);\n        k++;\n    }\n    return\
    \ sum2;\n}", "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    }\n", "  let n = N.toString(2);\n  let sum = 0;\n  for (let i = 0; i < n.length;\
    \ i++) {\n    sum += parseInt(n[i]);\n  }\n  return sum.toString();\n}", "  return\
    \ Number(N).toString(2);\n}\nsolve(1000);", "  if (N === 1) {\n    return 1;\n\
    \  } else {\n    return (N % 2) + 10 * solve(Math.floor(N / 2));\n  }\n}\n\nsolve(1000);",
  "  return N.toString(2);\n}", "  let arr = [];\n  // let i = N;\n  let result =\
    \ '';\n  while(N > 0){\n    // Divides N by 2 and stores the remainder in array\n\
    \    arr.push(N % 2);\n    // Divides N by 2 and rounds down to the nearest integer\n\
    \    N = Math.floor(N / 2);\n  }\n  // Result is the array in reverse order\n\
    \  result = arr.reverse().join('');\n  return result;\n}", "    let result = '';\n\
    \    while(N > 0){\n        result = N % 2 + result;\n        N = Math.floor(N\
    \ / 2);\n    }\n    return result;\n}", "    let result = N.toString(2).split('').reduce((total,curr)=>{\n\
    \        return total += parseInt(curr);\n    },0);\n    return result;\n}\n",
  "    var number = N.toString(2);\n    var sum = 0;\n    for (var i = 0; i < number.length;\
    \ i++) {\n        sum += parseInt(number[i]);\n    }\n    return sum.toString();\n\
    }\nsolve(1000);\n", "  let answer = '';\n  while (N > 0) {\n    answer = (N %\
    \ 2) + answer;\n    N = Math.floor(N / 2);\n  }\n  return answer;\n}\n", "\n}\n",
  "    //coding and coding..\n    var result = 0;\n    var str = N.toString(2);\n\
    \    for (var i = 0; i < str.length; i++) {\n        result += parseInt(str[i]);\n\
    \    }\n    return result.toString();\n}\n", "    let sum = 0;\n    let n = N.toString(2);\n\
    \    for (let i = 0; i < n.length; i++) {\n        sum += parseInt(n[i]);\n  \
    \  }\n    return sum.toString();\n}", "    let sum = 0;\n    let binary = (N >>>\
    \ 0).toString(2);\n    for (let i = 0; i < binary.length; i++) {\n        sum\
    \ += +binary[i];\n    }\n    return sum.toString();\n}", "    // Write your code\
    \ here\n}\n", "    var total = N.toString(2).split('');\n    var sum = 0;\n  \
    \  for(var i = 0; i < total.length; i++){\n        sum += Number(total[i]);\n\
    \    }\n    return sum.toString();\n}", "  if(typeof N !== 'number') {\n    throw\
    \ new Error('Input should be a number');\n  }\n  var binary = (N >>> 0).toString(2);\n\
    \  var len = binary.length;\n  var sum = 0;\n  for(var i = 0; i < len; i++) {\n\
    \    sum += Number(binary[i]);\n  }\n  return sum.toString();\n}\nmodule.exports\
    \ = {\n  solve: solve\n};", "    return (N >>> 0).toString(2);\n}", "\tvar binaryNumber\
    \ = Number(N).toString(2);\n\tvar sum = binaryNumber.split('').reduce(function(a,b){return\
    \ parseInt(a) + parseInt(b)});\n\treturn sum;\n}\n", "  return parseInt(N.toString(2)).toString().split('').reduce((acc,\
    \ curr) => {return parseInt(acc) + parseInt(curr)}, 0).toString();\n}\n", "  \
    \  return N.toString(2).split('').reduce((a,b)=>+a+ +b)\n}", "    let binary =\
    \ parseInt(N, 10).toString(2);\n    let binaryArray = binary.split('');\n    let\
    \ sum = 0;\n    for (let i = 0; i < binaryArray.length; i++) {\n        sum +=\
    \ parseInt(binaryArray[i]);\n    }\n    return sum.toString();\n};\n", "  var\
    \ bNum = N.toString(2);\n  var sum = 0;\n  for (var i = 0; i < bNum.length; i++)\
    \ {\n    sum += Number(bNum[i]);\n  }\n  return sum.toString();\n}", "    //..\n\
    }", "\treturn (N >>> 0).toString(2);\n}\n\nconst assert = require('assert');\n\
    assert.equal(solve(1000), \"1\");\nassert.equal(solve(150), \"110\");\nassert.equal(solve(147),\
    \ \"1100\");", "  let binary = parseInt(N, 10).toString(2);\n  let total = 0;\n\
    \  for (let i = 0; i < binary.length; i++) {\n    total += parseInt(binary[i],\
    \ 2);\n  }\n  return total.toString();\n}\n", "    return (N >>> 0).toString(2);\n\
    \  }", "// we use getBinary to convert number to binary\n  let b = getBinary(N);",
  "  let number = N.toString(2);\n  let total = 0;\n  for (let i = 0; i < number.length;\
    \ i++) {\n    total += parseInt(number[i]);\n  }\n  return total.toString();\n\
    }", "    //convert number to a binary string\n    var bin = N.toString(2);\n \
    \   //define an empty string that is going to be return\n    var newBin = \"\"\
    ;\n    //for loop\n    for(i=0; i<bin.length; i++){\n        //if condition\n\
    \        if(bin[i] == 1){\n            //if its one add 1 to the string newBin\n\
    \            newBin += \"1\";\n        }else{\n            //else add 0 to the\
    \ string newBin\n            newBin += \"0\";\n        }\n    }\n    //finally\
    \ return newBin\n    return newBin;\n};\n", "    let num = N.toString(2);\n  \
    \  let sum = 0;\n    for(let i = 0; i < num.length; i++){\n        sum += parseInt(num[i],\
    \ 10);\n    }\n    return sum.toString();\n}", "    // Your Code Here\n}\n", " \
    \   // convert N to binary\n    let Nb = N.toString(2);\n    let sum = 0;\n  \
    \  // loop to add up all digits\n    for (let i = 0; i < Nb.length; i++){\n  \
    \      sum += parseInt(Nb[i]);\n    }\n    return sum.toString();\n}\n", "let\
    \ total = N.toString(2);\nlet final = 0;\nfor (i = 0; i < total.length; i++) {\n\
    \  final += parseInt(total[i]);\n}\nreturn final;\n};", "    return N.toString(2).split('').reduce((a,\
    \ b) => a + b * 1, 0);\n}\n", "  var str = N.toString(2);\n  var sum = 0;\n  for\
    \ (var i = 0; i < str.length; i++) {\n    sum += parseInt(str[i]);\n  }\n  return\
    \ sum.toString();\n}\n", "    var bits = (N).toString(2);\n    var sum = 0;\n\
    \    for (var i = 0; i < bits.length; i++) {\n        sum += parseInt(bits[i]);\n\
    \    }\n    return sum;\n};", "    //vars\n    let counter = N;\n    let newNum\
    \ = \"\";\n    let binNum = 0;\n    let total = 0;\n    //loop through counter\
    \ until counter is zero\n    while(counter > 0){\n        //get the right most\
    \ number of the integer\n        newNum = counter % 2;\n        //update counter\n\
    \        counter = parseInt(counter / 2);\n        //make the newNum a string\
    \ and append to binNum\n        binNum += newNum.toString();\n    }\n    //iterate\
    \ over binNum\n    for(let i = 0; i < binNum.length; i++){\n        //add the\
    \ current number to total\n        total += parseInt(binNum[i]);\n    }\n    //return\
    \ total\n    return total;\n}", "    // Convert given number to a string\n   \
    \ var str = N.toString();\n    // Convert that string to an array\n    var array\
    \ = str.split(\"\");\n    // Convert each number in the array to a decimal number\
    \ and add them\n    // together to get the decimal number that needs to be converted\
    \ to binary\n    var decimal = array.reduce(function(a, b) {\n        return parseInt(a)\
    \ + parseInt(b);\n    }, 0);\n    // Convert the decimal number to a binary string\
    \ and then split it into an array\n    var binary = decimal.toString(2).split(\"\
    \");\n    // Filter out the zeros from the array and join the ones to return a\
    \ string\n    var result = binary.filter(function(a) {\n        return a == \"\
    1\";\n    }).join(\"\");\n    return result;\n}\n", "    //..\n    return N.toString(2);\n\
    }", "  //..\n  return (N).toString(2).split('').reduce((x,y) => +x + +y)\n}",
  "  return N.toString(2).split('').reduce((a,c)=>(+a)+(+c));\n}", "  return N.toString(2).split('').reduce((a,b)=>\
    \ a+parseInt(b),0)\n}", "  let numToBinary = [];\n  let number = N;\n  while (number\
    \ >= 1) {\n    if (number % 2 === 0) {\n      numToBinary.push(0);\n    } else\
    \ {\n      numToBinary.push(1);\n    }\n    number = Math.floor(number / 2);\n\
    \  }\n  let binaryToDecimal = [];\n  for (let i = 0; i < numToBinary.length; i++)\
    \ {\n    if (numToBinary[i] === 1) {\n      binaryToDecimal.push(2 ** i);\n  \
    \  }\n  }\n  let total = 0;\n  for (let i = 0; i < binaryToDecimal.length; i++)\
    \ {\n    total += binaryToDecimal[i];\n  }\n  return total.toString();\n}\n",
  "  return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n}\n",
  "    //..\n    let num = Number(N).toString(2)\n    let sum = num.split('').reduce((acc,\
    \ next) => Number(acc) + Number(next))\n    return sum.toString()\n}\n", "   \
    \ // Your code here.\n    var binary = '';\n    while(N !== 0){\n      binary\
    \ = (N % 2) + binary;\n      N = Math.floor(N / 2);\n    }\n    return binary;\n\
    }\n", "  return N.toString(2).split('').reduce((a, b) => Number(a) + Number(b))\n\
    }", "\tvar digits = []\n\tvar num = N\n\tvar len = Math.floor(Math.log2(N))\n\t\
    var den = Math.pow(2, len)\n\tvar digit = 0\n\tvar sum = 0\n\t\n\tfor (var i =\
    \ 0; i <= len; i++) {\n\t\tdigits.push(0)\n\t}\n\t\n\twhile (num != 0) {\n\t\t\
    digit = Math.floor(num / den)\n\t\tdigits[len - den + 1] = digit\n\t\tnum -= digit\
    \ * den\n\t\tden = Math.floor(den / 2)\n\t}\n\t\n\treturn digits.join('')\n}\n",
  "    let num = N;\n    let sum = 0;\n    let factor = 1;\n    while(num > 0){\n\
    \        if(num % 2 === 1){\n            sum += factor;\n        }\n        factor\
    \ *= 10;\n        num = Math.floor(num / 2);\n    }\n    return sum.toString();\n\
    }", "    let i = 0;\n    let binary = \"\";\n    if(N < 2){\n        return binary\
    \ += N.toString();\n    }\n    while(Math.pow(2, i) <= N){\n        i++;\n   \
    \ }\n    let number = Math.pow(2, i-1);\n    while(number > 0){\n        if(N\
    \ - number >= 0){\n            binary += \"1\";\n            N -= number;\n  \
    \      }\n        else{\n            binary += \"0\";\n        }\n        number\
    \ /= 2;\n    }\n    return binary;\n}", "  return N.toString(2).split('').reduce((a,b)=>a+parseInt(b),0);\n\
    }", "    const bN = Number(N).toString(2)\n    return bN.split('').reduce((acc,\
    \ curr) => acc + +curr, 0)\n}\n", "\tvar result = N.toString(2);\n\tvar sum =\
    \ 0;\n\tfor (var i = 0; i < result.length; i++) {\n\t\tsum += Number(result[i]);\n\
    \t}\n\treturn sum;\n}\n", "  var arr = N.toString(2).split('')\n  var sum = 0\n\
    \  for(var i = 0; i < arr.length; i++){\n    sum += parseInt(arr[i])\n  }\n  return\
    \ sum.toString()\n}\n", "    //enter code here\n}", "    // Write your code here\n\
    \    //N = N.toString(2);\n    let binary = N.toString(2);\n    let binaryArray\
    \ = binary.split('');\n    let result = binaryArray.reduce((acc, value) => acc\
    \ + Number(value), 0);\n    return result;\n  }\n  console.log(solve(1000));",
  "  //..\n}", "    let num = N.toString(2);\n    let arr = num.split('');\n    let\
    \ sum = 0;\n    for(let i = 0; i < arr.length; i++){\n        sum += parseInt(arr[i]);\n\
    \    }\n    return sum.toString();\n}\n", "    return N.toString(2).split('').reduce((p,\
    \ c) => p += +c, 0)\n}\n", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b));\n\
    \  }\n  console.log(solve(100000));", "    return N.toString(2);\n}", "    //your\
    \ code here\n    let x = parseInt(N, 10).toString(2)\n    // console.log(x)\n\
    \    let y = x.split('')\n    let z = y.reduce((a,b) => +a + +b)\n    // console.log(z)\n\
    \    return z.toString()\n  }", "    // your code here\n    return parseInt(N,\
    \ 10).toString(2);\n}\n", "  let sum = 0;\n  let newSum = '';\n  let sumArray\
    \ = [];\n  let num = N;\n  while(num > 0){\n    let remainder = num % 2;\n   \
    \ newSum = newSum + remainder;\n    num = Math.floor(num / 2);\n  }\n  sumArray\
    \ = newSum.split('');\n  sumArray.forEach(num => {\n    sum += parseInt(num);\n\
    \  });\n  return sum;\n}", "  //..\n}", "\tlet result = (N >>> 0).toString(2);\n\
    \tlet sum = 0;\n\tfor (let i = 0; i < result.length; i++) {\n\t\tsum += parseInt(result[i]);\n\
    \t}\n\treturn sum.toString();\n}\n", "  // var arr = [];\n  // var count = 0;\n\
    \  // var num = N;\n  // while(count < num){\n  //   arr.push(count);\n  //  \
    \ count = count + num;\n  // }\n  // console.log(arr);\n  // var binary = arr.map(x\
    \ => x.toString(2));\n  // console.log(binary);\n  // var sum = binary.reduce((x,y)\
    \ => x + y, 0);\n  // return sum;\n  var binary = N.toString(2);\n  console.log(binary);\n\
    \  var sum = binary.split('').reduce((x,y) => +x + +y, 0);\n  return sum;\n}",
  "    //..\n}\n", "    //..\n    var bin = N.toString(2);\n    var sum = 0;\n   \
    \ for (var i = 0; i < bin.length; i++) {\n        sum += Number(bin[i]);\n   \
    \ }\n    return sum.toString();\n};\n", "  var num = N.toString(2).split('');\n\
    \  var sum = 0;\n  for(var i = 0; i < num.length; i++){\n    sum += parseInt(num[i]);\n\
    \  }\n  return sum.toString();\n}\n\nsolve(1000);\nsolve(150);\nsolve(147);",
  "    let decimal = N.toString();\n    let binary = decimal.toString(2);\n    return\
    \ binary.toString().split('').reduce((x,y) => Number(x) + Number(y)).toString();\n\
    }\n", "    //..\n    return N.toString(2).split('').reduce((a, b) => parseInt(a)\
    \ + parseInt(b))\n  }", "  return (N).toString(2);\n}", "  return N.toString(2).split('').reduce((a,b)=>Number(a)+Number(b));\n\
    }", "    let x = N.toString(2)\n    let sum = 0\n    for(let i = 0; i < x.length;\
    \ i++){\n        sum += parseInt(x[i])\n    }\n    return sum.toString()\n}\n",
  "  return Number(N).toString(2);\n}\nsolve(1000);\nsolve(150);\nsolve(147);", " \
    \ var sum = 0;\n  var bin = N.toString(2);\n  for (var i = 0; i < bin.length;\
    \ i++) {\n    sum += parseInt(bin[i]);\n  }\n  return sum.toString();\n}", " \
    \ // your code here\n  var r = N.toString(2);\n  return r;\n}\nvar result = solve(1000);",
  "    //..\n    var binary = (N >>> 0).toString(2);\n    var sum = 0;\n    for (var\
    \ i = 0; i < binary.length; i++) {\n        sum += Number(binary[i]);\n    }\n\
    \    return sum.toString();\n}", "    // Write your code here\n    return N.toString(2);\n\
    }", "  //..\n  return parseInt(N.toString(2)).toString().split('').reduce((a,b)\
    \ => parseInt(a) + parseInt(b))\n}", "    return N.toString(2).split('').reduce((s,\
    \ e) => s+Number(e), 0);\n}", "  //..\n  var binary = '';\n  while(N > 0){\n \
    \   binary = (N % 2) + binary;\n    N = Math.floor(N / 2);\n  }\n  return binary;\n\
    }", "  // Write your code here\n}", "  let binary = (N >>> 0).toString(2);\n \
    \ let counter = 0;\n  for (let i=0; i<binary.length; i++){\n    counter += Number(binary[i]);\n\
    \  }\n  return counter;\n}\n", "    return N.toString(2);\n}\n", "  //..\n  return\
    \ (N >>> 0).toString(2);\n}\n", "    let decimalToBinary = (N).toString(2)\n \
    \   let sumOfDigits = 0\n    for (let i = 0; i < decimalToBinary.length; i++)\
    \ {\n        sumOfDigits += parseInt(decimalToBinary[i])\n    }\n    return sumOfDigits.toString(2)\n\
    }", "    return (N >>> 0).toString(2);\n}\nsolve(1000);\nsolve(150);\nsolve(147);",
  "  var binary = '';\n  var sumBinary = 0;\n  var sum = 0;\n  while(N > 0){\n   \
    \ binary += N % 2;\n    N = Math.floor(N / 2);\n  }\n  for(var i = 0; i < binary.length;\
    \ i++){\n    sumBinary += parseInt(binary[i]);\n  }\n  sum += sumBinary;\n  return\
    \ sum;\n}", "  var N = N.toString(2);\n  var sum = 0;\n  for (var i = 0; i < N.length;\
    \ i++) {\n      sum += Number(N[i]);\n  }\n  return sum;\n}", "    let sum = 0;\n\
    \    let digits = (\"\"+N).split(\"\");\n    for(let i = 0; i < digits.length;\
    \ i++){\n        let binary = parseInt(digits[i], 10).toString(2);\n        let\
    \ bi_sum = 0;\n        for(let j = 0; j < binary.length; j++){\n            bi_sum\
    \ += parseInt(binary[j]);\n        }\n        sum += bi_sum;\n    }\n    return\
    \ sum;\n}\nsolve(1000);", "    var binary = []\n    for(var i = 0; i < N; i++){\n\
    \        var num = i;\n        var temp = [];\n        while(num > 0){\n     \
    \       temp.push(num % 2);\n            num = Math.floor(num / 2);\n        }\n\
    \        binary.push(temp.reverse().join(''));\n    }\n    return binary.reduce((a,\
    \ b) => parseInt(a) + parseInt(b)).toString();\n}", "    var out = '';\n    while(N){\n\
    \        var r = N % 2;\n        out = r + out;\n        N = Math.floor(N / 2);\n\
    \    }\n    return out;\n}\nsolve(150);\nsolve(147);\nsolve(1000);", "    //..\n\
    \    let binaryValue = (N >>> 0).toString(2);\n    let sum = 0;\n    for (let\
    \ i = 0; i < binaryValue.length; i++) {\n        sum += parseInt(binaryValue[i]);\n\
    \    }\n    return String(sum);\n}\n", "  return N.toString(2).split('').reduce((a,b)=>+a+\
    \ +b,0);\n}", "  let number = (N).toString(2); //convert N to binary\n  let sum\
    \ = number.split('').reduce((a,b) => parseInt(a) + parseInt(b), 0); //split N\
    \ to array of string numbers, then reduce to sum.\n  return (sum).toString();\n\
    }\n", "    const arr = N.toString(2).split('')\n    return arr.reduce((acc, curr)\
    \ => acc + Number(curr), 0)\n}\n", "    var newArray = N.toString(2).split('');\n\
    \    var sum = 0;\n    for(var i = 0; i < newArray.length; i++){\n      sum +=\
    \ parseInt(newArray[i]);\n    }\n    return sum.toString();\n};\n\nsolve(1000);",
  "  var string = N.toString(2);\n  var sum = 0;\n  for (var i = 0; i < string.length;\
    \ i++) {\n    sum += parseInt(string[i]);\n  }\n  return sum.toString();\n}\n",
  "    // Write your code here\n    return (N >>> 0).toString(2);\n}\nsolve(1000);\n\
    solve(150);\nsolve(147);\nsolve(0);\nsolve(256);\nsolve(1000);\nsolve(1111);\n\
    solve(123);\nsolve(1);\nsolve(256);\nsolve(212);\nsolve(256);\nsolve(100);\nsolve(0);\n\
    solve(9999);\nsolve(256);\nsolve(0);\nsolve(256);\nsolve(1000);\nsolve(1000);\n\
    solve(1000);\nsolve(0);\nsolve(0);\nsolve(256);\nsolve(1000);\nsolve(1111);\n\
    solve(1000);\nsolve(1000);\nsolve(1000);\nsolve(1000);\nsolve(256);\nsolve(256);\n\
    solve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\n\
    solve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\n\
    solve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\n\
    solve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\n\
    solve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\n\
    solve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\n\
    solve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\n\
    solve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\nsolve(256);\n\
    solve(256);\nsolve(", "    // your code here\n    return parseInt(N, 10).toString(2);\n\
    \  }", "    const bin = N.toString(2);\n    let sum = 0;\n    for (let i = 0;\
    \ i < bin.length; i++) {\n        sum += Number(bin[i]);\n    }\n    return sum.toString();\n\
    }\n", "    return N.toString(2).split('').reduce((a, b) => a + b * 1, 0);\n}\n",
  "  //..\n}", "  return N.toString(2).split('').reduce((a,b)=>+a + +b)\n}", "   \
    \ // Write your code here\n    return (N >>> 0).toString(2)\n}\n", "  //your code\
    \ here\n  var arr = [];\n  // EDGE CASE\n  if (N === 0) {\n    return \"0\";\n\
    \  }\n  // TERMINATION CONDITION:\n  // keep dividing N by 2, and push to arr\
    \ until N = 0\n  while (N > 0) {\n    // N % 2: remainder after dividing by 2,\
    \ AKA the binary number.\n    arr.push(N % 2);\n    // N = N / 2: dividing by\
    \ 2, rounds to the nearest integer.\n    N = Math.floor(N / 2);\n  }\n  // reverse\
    \ the array because we have been working from the last digit first.\n  var binary\
    \ = arr.reverse().join(\"\");\n  return binary;\n}\n", "    return parseInt(N.toString(2))\n\
    \        .toString()\n        .split('')\n        .reduce((a,b) => parseInt(a)\
    \ + parseInt(b), 0)\n        .toString();\n}", "\tvar str = \"\"\n\tvar num =\
    \ N\n\tvar binary = 1\n\tvar count = 0\n\twhile(binary <= num){\n\t\tbinary *=\
    \ 2\n\t\tcount += 1\n\t}\n\tbinary /= 2\n\tcount -= 1\n\tfor(var i = count; i\
    \ >= 0; i--){\n\t\tif(binary <= num){\n\t\t\tstr += \"1\"\n\t\t\tnum -= binary\n\
    \t\t}\n\t\telse{\n\t\t\tstr += \"0\"\n\t\t}\n\t\tbinary /= 2\n\t}\n\treturn str\n\
    }\n", "  var sum = 0;\n  while(N > 0){\n    sum += N % 2;\n    N = Math.floor(N\
    \ / 2);\n  }\n  return sum;\n}\n\nvar test = solve(1000);", "  return N.toString(2).split('').reduce((x,y)=>Number(x)+Number(y),0)\n\
    }\n", "  return N.toString(2).split('').reduce((a, b) => parseInt(a) + parseInt(b));\n\
    }", "  // Your code here\n  let ret = '';\n  let count = 1;\n  let curr = N;\n\
    \  for (let i = 0; i < 10; i++) {\n    if (curr >= Math.pow(2,i)) {\n      count\
    \ = i + 1;\n    }\n  }\n  let old = count;\n  while (count > 0) {\n    let diff\
    \ = 0;\n    while (Math.pow(2,diff + 1) <= curr) {\n      diff++;\n    }\n   \
    \ curr -= Math.pow(2,diff);\n    count -= diff + 1;\n    for (let i = 0; i < old\
    \ - count - 1; i++) {\n      ret += '0';\n    }\n    ret += '1';\n  }\n  return\
    \ ret;\n}\n", "    // good luck!\n    // 1) convert N to binary number, and store\
    \ it as string \n    // 2) convert to array of binary digits\n    // 3) sum all\
    \ binary digits\n    // 4) return the sum\n    let binaryNum = (N).toString(2);\n\
    \    let sum = 0;\n    for (let i = 0; i < binaryNum.length; i++) {\n        sum\
    \ += parseInt(binaryNum[i]);\n    }\n    return sum;\n}", "    return N.toString(2).split('').reduce((a,b)=>parseInt(a)+parseInt(b))\n\
    \  }", "  return parseInt(N.toString(2).split('').reduce((a,b)=> parseInt(a)+parseInt(b)));\n\
    }\n", "    let result = N.toString(2);\n    let sum = 0;\n    for(let i = 0; i\
    \ < result.length; i++){\n        sum += Number(result[i]);\n    }\n    return\
    \ sum.toString();\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
