name: HumanEval_84_solve
language: js
prompt: "//Given a positive integer N, return the total sum of its digits in binary.\n\
  // Example\n// >>> solve(1000)\n// \"1\"\n// >>> solve(150)\n// \"110\"\n// >>>\
  \ solve(147)\n// \"1100\"\n// Variables:\n// @N integer\n// Constraints: 0 \u2264\
  \ N \u2264 10000.\n// Output:\n// a string of binary number\nfunction solve(N){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n  assert.deepEqual(candidate(150),\"\
  110\");\n  assert.deepEqual(candidate(147),\"1100\");\n  assert.deepEqual(candidate(333),\"\
  1001\");\n  assert.deepEqual(candidate(963),\"10010\");\n}\n\ntest();"
completions: ["  //your code here\n}", "    //..\n    return N.toString(2).split('').reduce((sum,val)=>sum+parseInt(val),0);\n\
    };\n", "  var sN = N.toString();\n  var binary = [];\n  for (var i = 0; i < sN.length;\
    \ i++) {\n    binary.push(parseInt(sN[i],10).toString(2));\n  }\n  var binaryString\
    \ = binary.join('');\n  var sum = 0;\n  for (var i = 0; i < binaryString.length;\
    \ i++) {\n    sum += Number(binaryString[i]);\n  }\n  return sum.toString();\n\
    }\n", "    if(N === 0) return 0;\n    return N % 2 + solve(parseInt(N / 2));\n\
    }", "\tvar bin = N.toString(2);\n\tvar sum = 0;\n\tfor (var i = 0; i < bin.length;\
    \ i++) {\n\t\tsum += Number(bin[i]);\n\t}\n\treturn sum.toString();\n}\n", " \
    \   return N.toString(2).split('').reduce((acc, curr) => acc + +curr, 0);\n}",
  "\tvar bin = [];\n\tvar r;\n\tvar sum = \"\";\n\twhile(N > 0){\n\t\tr = N % 2;\n\
    \t\tif(r == 1){\n\t\t\tbin.push(1);\n\t\t}\n\t\telse{\n\t\t\tbin.push(0);\n\t\t\
    }\n\t\tN = (N - r) / 2;\n\t}\n\tfor(var i = bin.length - 1; i >= 0; i--){\n\t\t\
    sum += bin[i];\n\t}\n\treturn sum;\n}\n\nN = 147;", "// your code here!\nlet B\
    \ = [];\nlet sum = 0;\nfor(let i = 0; i < N.length; i++){\nB.push(N[i] % 2);\n\
    B.push(Math.floor(N[i] / 2));\n}\nB.reverse();\nfor(let i = 0; i < B.length; i++){\n\
    sum += B[i];\n}\nreturn sum;\n}", "    let result = \"\";\n    while(N){\n   \
    \     result = N % 2 + result;\n        N = Math.floor(N / 2);\n    }\n    return\
    \ result;\n}", "  //..\n}", "  // Write your code here\n  return parseInt(N, 10).toString(2).split('').reduce((a,\
    \ b) => +a + +b);\n}\n\nN = 1000;", "  return N.toString(2);\n}", "    return\
    \ Number(N).toString(2).split('').reduce((a,c)=>a+Number(c),0);\n}", "  return\
    \ (N).toString(2).split('').reduce((a,b)=>a*1+b*1,0)\n}", "  let binary = N.toString(2)\n\
    \  console.log(binary)\n  let sum = 0\n  for (let i = 0; i < binary.length; i++)\
    \ {\n    sum += Number(binary[i])\n  }\n  return sum\n}", "    //..\n    var ans\
    \ = N.toString(2);\n    var total = 0;\n    for (var i = 0; i < ans.length; i++)\
    \ {\n        total += Number(ans[i]);\n    }\n    return total.toString();\n}\n",
  "    return N.toString(2);\n}", "    return (N.toString(2)).split('').reduce((a,\
    \ b) => +a + +b)\n}", "    return N.toString(2);\n}", "    //x = N.toString(2);\n\
    \    let x = (+N).toString(2);\n    let sum = 0;\n    for (let i = 0; i < x.length;\
    \ i++) {\n        sum += parseInt(x[i]);\n    }\n    return sum;\n};"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
