name: HumanEval_93_encode
language: js
results:
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    // your code here\n\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmpmrztbmjc.js:21:10)\n    at Object.<anonymous> (/tmp/tmpmrztbmjc.js:28:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar letters = message.split(\"\");\n\tvar encodedMessage = \"\";\n\tfor(var\
    \ i = 0; i < letters.length; i++){\n\t\tvar letter = letters[i];\n\t\tif(letter\
    \ == letter.toUpperCase()){\n\t\t\tencodedMessage += letter.toLowerCase();\n\t\
    \t}\n\t\telse{\n\t\t\tencodedMessage += letter.toUpperCase();\n\t\t}\n\t}\n\t\
    for(var i = 0; i < encodedMessage.length; i++){\n\t\tvar letter = encodedMessage[i];\n\
    \t\tif(letter == \"a\"){\n\t\t\tencodedMessage = encodedMessage.replace(letter,\
    \ \"c\");\n\t\t}\n\t\telse if(letter == \"e\"){\n\t\t\tencodedMessage = encodedMessage.replace(letter,\
    \ \"g\");\n\t\t}\n\t\telse if(letter == \"i\"){\n\t\t\tencodedMessage = encodedMessage.replace(letter,\
    \ \"k\");\n\t\t}\n\t\telse if(letter == \"o\"){\n\t\t\tencodedMessage = encodedMessage.replace(letter,\
    \ \"m\");\n\t\t}\n\t\telse if(letter == \"u\"){\n\t\t\tencodedMessage = encodedMessage.replace(letter,\
    \ \"q\");\n\t\t}\n\t}\n\treturn encodedMessage;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'mUDASIR'\n\nshould equal\n\n'mWDCSKR'\n\
    \    at test (/tmp/tmpye7ayryg.js:49:10)\n    at Object.<anonymous> (/tmp/tmpye7ayryg.js:55:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'mUDASIR',\n  expected: 'mWDCSKR',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var encodedMessage = \"\";\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    // start at 1 because you don't need to encode the first letter\n    for\
    \ (var i = 1; i < message.length; i++) {\n        // if letter is a vowel\n  \
    \      if (isVowel(message[i])) {\n            // find the index of the letter\
    \ you're supposed to encode to\n            var indexOfEncodedLetter = alphabet.indexOf(message[i])\
    \ + 2;\n            // check if the encoded letter is past the end of the alphabet\n\
    \            if (indexOfEncodedLetter > alphabet.length - 1) {\n             \
    \   // if it is, wrap it back around\n                var encodedLetter = alphabet[indexOfEncodedLetter\
    \ - alphabet.length];\n            } else {\n                // if it's not, return\
    \ the regular encoded letter\n                var encodedLetter = alphabet[indexOfEncodedLetter];\n\
    \            }\n            // then add the letter to the encoded message\n  \
    \          encodedMessage += encodedLetter;\n        } else {\n            //\
    \ if it's not a vowel just append the letter to the message\n            encodedMessage\
    \ += message[i];\n        }\n    }\n    // return a new encoded message with the\
    \ first letter capitalized\n    return message[0] + encodedMessage;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmpy5h_urgm.js:17\n        if (isVowel(message[i])) {\n        ^\n\
    \nReferenceError: isVowel is not defined\n    at encode (/tmp/tmpy5h_urgm.js:17:9)\n\
    \    at test (/tmp/tmpy5h_urgm.js:44:20)\n    at Object.<anonymous> (/tmp/tmpy5h_urgm.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var newMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n  \
    \      var newChar = \"\";\n        var char = message[i];\n        if(char ==\
    \ char.toUpperCase()){\n            newChar = char.toLowerCase();\n        } else\
    \ {\n            newChar = char.toUpperCase();\n        }\n        if(char ==\
    \ \"a\"){\n            newChar = \"c\";\n        } else if(char == \"e\"){\n \
    \           newChar = \"g\";\n        } else if(char == \"i\"){\n            newChar\
    \ = \"k\";\n        } else if(char == \"o\"){\n            newChar = \"q\";\n\
    \        } else if(char == \"u\"){\n            newChar = \"y\";\n        }\n\
    \        newMessage += newChar;\n    }\n    return newMessage;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'test'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpafzxryq2.js:42:10)\n    at Object.<anonymous> (/tmp/tmpafzxryq2.js:49:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    var result = '';\n    for\
    \ (var i = 0; i < message.length; i++){\n        var current_letter = message[i];\n\
    \        if (current_letter === current_letter.toUpperCase()){\n            var\
    \ index = alphabet.indexOf(current_letter.toLowerCase());\n            var encoded_index\
    \ = (index + 2) % 26;\n            result += alphabet[encoded_index].toUpperCase();\n\
    \        } else {\n            var index = alphabet.indexOf(current_letter);\n\
    \            var encoded_index = (index + 2) % 26;\n            result += alphabet[encoded_index];\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'VGUV'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpgdi856ts.js:34:10)\n    at Object.<anonymous> (/tmp/tmpgdi856ts.js:41:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar al = \"abcdefghijklmnopqrstuvwxyz\";\n\tvar enc = \"\";\n\tfor(var i = 0;\
    \ i < message.length; i++){\n\t\tvar index = al.indexOf(message[i].toLowerCase());\n\
    \t\tif(index > -1){\n\t\t\tif(message[i] === message[i].toUpperCase()){\n\t\t\t\
    \tenc += al[(index + 2) % 26].toUpperCase();\n\t\t\t} else {\n\t\t\t\tenc += al[(index\
    \ + 2) % 26];\n\t\t\t}\n\t\t} else {\n\t\t\tenc += message[i];\n\t\t}\n\t}\n\t\
    return enc;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n\
    \  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'VGUV'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpaehhtrdm.js:33:10)\n    at Object.<anonymous> (/tmp/tmpaehhtrdm.js:40:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'VGUV',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var encodedStr = \"\";\n    var vowels = ['a', 'e', 'i', 'o', 'u'];\n   \
    \ var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    for(var i = 0; i < message.length;\
    \ i++){\n        if(vowels.indexOf(message[i]) !== -1){\n            var vowelIndex\
    \ = vowels.indexOf(message[i]);\n            var newVowelIndex = (vowelIndex +\
    \ 2) % 5;\n            var newVowel = vowels[newVowelIndex];\n            encodedStr\
    \ += newVowel;\n        } else {\n            if(message[i] === message[i].toUpperCase()){\n\
    \                var letterIndex = alphabet.indexOf(message[i].toLowerCase());\n\
    \                var encodedLetter = alphabet[letterIndex].toUpperCase();\n  \
    \              encodedStr += encodedLetter;\n            } else {\n          \
    \      var letterIndex = alphabet.indexOf(message[i]);\n                var encodedLetter\
    \ = alphabet[letterIndex].toLowerCase();\n                encodedStr += encodedLetter;\n\
    \            }\n        }\n    }\n    return encodedStr;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp9hj38lr2.js:41:10)\n    at Object.<anonymous> (/tmp/tmp9hj38lr2.js:48:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var str = message.toLowerCase();\n  var count = 0;\n  var encodedMessage =\
    \ \"\";\n  var letter;\n  var int;\n  while(count < str.length){\n    if(str[count]\
    \ === \"a\"){\n      letter = \"c\";\n    }\n    else if(str[count] === \"e\"\
    ){\n      letter = \"g\";\n    }\n    else if(str[count] === \"i\"){\n      letter\
    \ = \"k\";\n    }\n    else if(str[count] === \"o\"){\n      letter = \"q\";\n\
    \    }\n    else if(str[count] === \"u\"){\n      letter = \"y\";\n    }\n   \
    \ else if(str[count] === \"y\"){\n      letter = \"a\";\n    }\n    else{\n  \
    \    letter = str[count];\n    }\n    if(str[count] === letter.toUpperCase()){\n\
    \      letter = letter.toUpperCase();\n    }\n    encodedMessage += letter;\n\
    \    count += 1;\n  }\n  return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'mydcskr'\n\nshould equal\n\n'mWDCSKR'\n\
    \    at test (/tmp/tmppx2q68m8.js:54:10)\n    at Object.<anonymous> (/tmp/tmppx2q68m8.js:60:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'mydcskr',\n  expected: 'mWDCSKR',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var vowels = 'aeiou';\n  var encoded = '';\n  var letter = '';\n  for (var\
    \ i = 0; i < message.length; i++) {\n    letter = message[i];\n    if (letter\
    \ === letter.toUpperCase()) {\n      letter = letter.toLowerCase();\n      if\
    \ (vowels.indexOf(letter) >= 0) {\n        letter = vowels[(vowels.indexOf(letter)\
    \ + 2) % 5];\n      }\n      letter = letter.toUpperCase();\n    } else {\n  \
    \    if (vowels.indexOf(letter) >= 0) {\n        letter = vowels[(vowels.indexOf(letter)\
    \ + 2) % 5];\n      }\n    }\n    encoded += letter;\n  }\n  return encoded;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TOST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpslr3ojmo.js:38:10)\n    at Object.<anonymous> (/tmp/tmpslr3ojmo.js:45:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var result = \"\";\n  var vowels = \"aeiou\";\n  var num = 0;\n  var message_array\
    \ = message.split(\"\");\n  for (var i = 0; i < message_array.length; i++) {\n\
    \    if (vowels.indexOf(message_array[i]) !== -1) {\n      if (message_array[i]\
    \ === \"u\") {\n        result += \"a\";\n      } else {\n        num = message_array[i].charCodeAt(0);\n\
    \        result += String.fromCharCode(num + 2);\n      }\n    } else {\n    \
    \  result += message_array[i];\n    }\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TEST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpfsxggdfu.js:36:10)\n    at Object.<anonymous> (/tmp/tmpfsxggdfu.js:43:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TEST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar message = message.toUpperCase().split(\"\");\n\tvar newMessage = \"\";\n\
    \tvar vowels = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n\tfor (var i = 0; i < message.length;\
    \ i++) {\n\t\tif (vowels.indexOf(message[i]) !== -1) {\n\t\t\tif (message[i] ===\
    \ \"U\") {\n\t\t\t\tnewMessage += \"A\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnewMessage\
    \ += vowels[vowels.indexOf(message[i]) + 1];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\
    \tnewMessage += message[i];\n\t\t}\n\t}\n\treturn newMessage;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TIST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp93wql1kl.js:35:10)\n    at Object.<anonymous> (/tmp/tmp93wql1kl.js:42:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TIST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  var messageV = message.split(\"\");\n  for(var i = 0; i < messageV.length;\
    \ i++){\n    var asciiV = messageV[i].charCodeAt(0);\n    if(asciiV > 64 && asciiV\
    \ < 91){\n      asciiV += 33;\n    }\n    else if(asciiV > 96 && asciiV < 123){\n\
    \      asciiV -= 31;\n    }\n    messageV[i] = String.fromCharCode(asciiV);\n\
    \  }\n  return messageV.join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'uftu'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpl70kth7c.js:31:10)\n    at Object.<anonymous> (/tmp/tmpl70kth7c.js:38:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'uftu',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar letters = message.split(\"\");\n\tvar encodedMessage = \"\";\n\tvar charCode;\n\
    \tvar char;\n\tfor(var i = 0; i < letters.length; i++){\n\t\tcharCode = letters[i].charCodeAt(0);\n\
    \t\tif(charCode >= 97 && charCode <= 122){\n\t\t\tif(charCode >= 97 && charCode\
    \ <= 100){\n\t\t\t\tcharCode = charCode + 22;\n\t\t\t}\n\t\t\telse{\n\t\t\t\t\
    charCode = charCode - 4;\n\t\t\t}\n\t\t}\n\t\telse if(charCode >= 65 && charCode\
    \ <= 90){\n\t\t\tif(charCode >= 65 && charCode <= 68){\n\t\t\t\tcharCode = charCode\
    \ + 22;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcharCode = charCode - 4;\n\t\t\t}\n\t\t\
    }\n\t\telse{\n\t\t\tcharCode = charCode;\n\t\t}\n\t\tchar = String.fromCharCode(charCode);\n\
    \t\tencodedMessage = encodedMessage + char;\n\t}\n\treturn encodedMessage;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'PAOP'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmprbfxwnpz.js:47:10)\n    at Object.<anonymous> (/tmp/tmprbfxwnpz.js:54:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'PAOP',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    //write your code here\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"\
    tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"\
    YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS\
    \ C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"\
    k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\nundefined\n\nshould equal\n\n'tgst'\n  \
    \  at test (/tmp/tmp_q2nq2qj.js:19:10)\n    at Object.<anonymous> (/tmp/tmp_q2nq2qj.js:26:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: undefined,\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar c;\n\tvar swap = '';\n\tvar encryptVowel = '';\n\tvar message = message.toLowerCase();\n\
    \tfor (var i = 0; i < message.length; i++) {\n\t\tc = message.charAt(i);\n\t\t\
    if (c === 'a') {\n\t\t\tencryptVowel += 'c';\n\t\t}\n\t\telse if (c === 'e') {\n\
    \t\t\tencryptVowel += 'g';\n\t\t}\n\t\telse if (c === 'i') {\n\t\t\tencryptVowel\
    \ += 'k';\n\t\t}\n\t\telse if (c === 'o') {\n\t\t\tencryptVowel += 'm';\n\t\t\
    }\n\t\telse if (c === 'u') {\n\t\t\tencryptVowel += 'p';\n\t\t}\n\t\telse if (c\
    \ === ' ') {\n\t\t\tencryptVowel += ' ';\n\t\t}\n\t\telse {\n\t\t\tencryptVowel\
    \ += c;\n\t\t}\n\t}\n\tfor (var j = 0; j < encryptVowel.length; j++) {\n\t\tif\
    \ (encryptVowel.charAt(j) === encryptVowel.charAt(j).toUpperCase()) {\n\t\t\t\
    swap += encryptVowel.charAt(j).toLowerCase();\n\t\t}\n\t\telse {\n\t\t\tswap +=\
    \ encryptVowel.charAt(j).toUpperCase();\n\t\t}\n\t}\n\treturn swap;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'TGST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp1mg9rxo6.js:55:10)\n    at Object.<anonymous> (/tmp/tmp1mg9rxo6.js:62:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var encodedMessage = \"\";\n    for(var i = 0; i < message.length; i++){\n\
    \        if(isVowel(message[i])){\n            encodedMessage += (encodeVowel(message[i]));\n\
    \        } else if(isLetter(message[i])){\n            encodedMessage += (encodeLetter(message[i]));\n\
    \        } else {\n            encodedMessage += message[i];\n        }\n    }\n\
    \    return encodedMessage;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/tmp/tmp1ce4j4uv.js:14\n        if(isVowel(message[i])){\n        ^\n\n\
    ReferenceError: isVowel is not defined\n    at encode (/tmp/tmp1ce4j4uv.js:14:9)\n\
    \    at test (/tmp/tmp1ce4j4uv.js:30:20)\n    at Object.<anonymous> (/tmp/tmp1ce4j4uv.js:37:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  exit_code: 1
  status: ReferenceError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  //Let's create a function that iterates through each character\n  // in a message,\
    \ and changes its case.\n  var encodedMessage = \"\";\n  var messageAsArray =\
    \ message.split(\"\");\n  for (var i = 0; i < messageAsArray.length; i++) {\n\
    \    if (messageAsArray[i] == messageAsArray[i].toUpperCase()) {\n      encodedMessage\
    \ += messageAsArray[i].toLowerCase();\n    } else {\n      encodedMessage += messageAsArray[i].toUpperCase();\n\
    \    }\n  }\n  //Now let's create a function that iterates through each character\n\
    \  // in a message, and checks whether it is a vowel. If it is, then\n  // it\
    \ needs to be replaced with the character that is 2 characters\n  // later in\
    \ the alphabet.\n  // First, let's create an array with the vowels in it.\n  var\
    \ vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  for (var i = 0; i < encodedMessage.length;\
    \ i++) {\n    for (var j = 0; j < vowels.length; j++) {\n      if (encodedMessage[i]\
    \ == vowels[j]) {\n        encodedMessage = encodedMessage.replace(encodedMessage[i],\
    \ encodedMessage[i+2]);\n      }\n    }\n  }\n  return encodedMessage;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'ttst'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp4n9u2u4w.js:44:10)\n    at Object.<anonymous> (/tmp/tmp4n9u2u4w.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'ttst',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \tvar vowels = \"aeiou\";\n\tvar result = \"\";\n\tfor(var i = 0; i < message.length;\
    \ i++){\n\t\tvar letter = message[i];\n\t\tif(vowels.indexOf(letter.toLowerCase())\
    \ !== -1){\n\t\t\tvar index = vowels.indexOf(letter.toLowerCase());\n\t\t\tvar\
    \ newIndex = (index + 2) % 5;\n\t\t\tresult += vowels[newIndex];\n\t\t}\n\t\t\
    else{\n\t\t\tresult += letter;\n\t\t}\n\t}\n\treturn result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n\
    \  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'ToST'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp_v9zyr6c.js:32:10)\n    at Object.<anonymous> (/tmp/tmp_v9zyr6c.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \  if (message == \"\"){\n    return message;\n  }\n  message = message.toLowerCase();\n\
    \  var messageList = message.split(\"\");\n  var newMessage = [];\n  var vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  for (var i = 0; i < messageList.length;\
    \ i++){\n    if (messageList[i] == \" \"){\n      newMessage.push(\" \");\n  \
    \  }\n    else if (messageList[i] == \"z\"){\n      newMessage.push(\"b\");\n\
    \    }\n    else if (messageList[i] == \"y\"){\n      newMessage.push(\"a\");\n\
    \    }\n    else if (vowels.indexOf(messageList[i]) > -1){\n      newMessage.push(vowels[(vowels.indexOf(messageList[i])\
    \ + 2) % 5]);\n    }\n    else{\n      newMessage.push(String.fromCharCode(messageList[i].charCodeAt(0)\
    \ + 2));\n    }\n  }\n  return newMessage.join(\"\");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"\
    TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n\
    \  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'vouv'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmp3ximrs9n.js:44:10)\n    at Object.<anonymous> (/tmp/tmp3ximrs9n.js:51:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'vouv',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
- program: "//Write a function that takes a message, and encodes in such a \n// way\
    \ that it swaps case of all letters, replaces all vowels in \n// the message with\
    \ the letter that appears 2 places ahead of that \n// vowel in the english alphabet.\
    \ \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\
    \n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction encode(message){\n\
    \    var vowels = 'aeiou';\n    var answer = '';\n    for (var i = 0; i < message.length;\
    \ i++){\n        var currentLetter = message[i];\n        if (vowels.indexOf(currentLetter)\
    \ > -1){\n            answer += String.fromCharCode(currentLetter.charCodeAt(0)\
    \ + 2);\n        } else if (currentLetter === currentLetter.toUpperCase()){\n\
    \            answer += currentLetter.toLowerCase();\n        } else {\n      \
    \      answer += currentLetter.toUpperCase();\n        }\n    }\n    return answer;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"\
    Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"\
    This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"\
    I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();"
  stdout: ''
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'test'\n\nshould equal\n\n'tgst'\n    at\
    \ test (/tmp/tmpj3_5smvu.js:32:10)\n    at Object.<anonymous> (/tmp/tmpj3_5smvu.js:39:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator:\
    \ 'deepEqual'\n}\n"
  exit_code: 1
  status: AssertionError
