name: HumanEval_144_simplify
language: js
prompt: "//Your task is to implement a function that will simplify the expression\n\
  // x * n. The function returns true if x * n evaluates to a whole number and false\n\
  // otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n// <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n// You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n// >>> simplify(\"1/5\", \"5/1\")\n// true\n\
  // >>> simplify(\"1/6\", \"2/1\")\n// false\n// >>> simplify(\"7/10\", \"10/2\"\
  )\n// false\nfunction simplify(x, n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = simplify;\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n  assert.deepEqual(candidate(\"\
  1/6\", \"2/1\"),false);\n  assert.deepEqual(candidate(\"5/1\", \"3/1\"),true);\n\
  \  assert.deepEqual(candidate(\"7/10\", \"10/2\"),false);\n  assert.deepEqual(candidate(\"\
  2/10\", \"50/10\"),true);\n  assert.deepEqual(candidate(\"7/2\", \"4/2\"),true);\n\
  \  assert.deepEqual(candidate(\"11/6\", \"6/1\"),true);\n  assert.deepEqual(candidate(\"\
  2/3\", \"5/2\"),false);\n  assert.deepEqual(candidate(\"5/2\", \"3/5\"),false);\n\
  \  assert.deepEqual(candidate(\"2/4\", \"8/4\"),true);\n  assert.deepEqual(candidate(\"\
  2/4\", \"4/2\"),true);\n  assert.deepEqual(candidate(\"1/5\", \"5/1\"),true);\n\
  \  assert.deepEqual(candidate(\"1/5\", \"1/5\"),false);\n}\n\ntest();"
completions: ["    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator\
    \ = parseInt(x.split('/')[1]);\n    let nNumerator = parseInt(n.split('/')[0]);\n\
    \    let nDenominator = parseInt(n.split('/')[1]);\n    let xTimesN = xNumerator\
    \ * nNumerator / (xDenominator * nDenominator);\n    return Number.isInteger(xTimesN);\n\
    }\n", "  let [xNumerator, xDenominator] = x.split('/');\n  let [nNumerator, nDenominator]\
    \ = n.split('/');\n  return xNumerator*nDenominator % xDenominator*nNumerator\
    \ === 0;\n}\n", "  return (x.split('/')[0] * n.split('/')[1]) % (x.split('/')[1]\
    \ * n.split('/')[0]) === 0;\n}\n", "    x= x.split(\"/\");\n    n= n.split(\"\
    /\");\n    return (x[0]*n[1])%(x[1]*n[0])===0\n}\n", "  var x_num = x.split(\"\
    /\")[0];\n  var x_den = x.split(\"/\")[1];\n  var n_num = n.split(\"/\")[0];\n\
    \  var n_den = n.split(\"/\")[1];\n  var prod_num = x_num * n_num;\n  var prod_den\
    \ = x_den * n_den;\n  if (prod_num % prod_den == 0){\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n\
    \  let xProduct = xArr[0] * nArr[0];\n  let nProduct = xArr[1] * nArr[1];\n  if(xProduct\
    \ % nProduct === 0){\n    return true;\n  } else {\n    return false;\n  }\n}",
  "    if(x.length === 1 && n.length === 1){\n        return true;\n    }\n    if(x.length\
    \ === 1 && n.length > 1){\n        if(x === n[0]){\n            return true;\n\
    \        }\n        else{\n            return false;\n        }\n    }\n    if(x.length\
    \ > 1 && n.length === 1){\n        if(n === x[0]){\n            return true;\n\
    \        }\n        else{\n            return false;\n        }\n    }\n    if(x.length\
    \ > 1 && n.length > 1){\n        if(x[2] === n[2]){\n            let denom = parseInt(x[2]);\n\
    \            let num1 = parseInt(x[0]);\n            let num2 = parseInt(n[0]);\n\
    \            for(let i = 1; i < denom; i++){\n                if(num1 * i ===\
    \ num2 || num2 * i === num1){\n                    return true;\n            \
    \    }\n            }\n            return false;\n        }\n        else{\n \
    \           return false;\n        }\n    }\n}\n", "  x = x.split('/');\n  n =\
    \ n.split('/');\n  var result = (parseInt(x[0]) * parseInt(n[1])) % (parseInt(x[1])\
    \ * parseInt(n[0]));\n  if(result) return false;\n  return true;\n}\n", "  var\
    \ xNum = Number(x.split('/')[0]);\n  var xDen = Number(x.split('/')[1]);\n  var\
    \ nNum = Number(n.split('/')[0]);\n  var nDen = Number(n.split('/')[1]);\n  return\
    \ (xNum * nDen) % (xDen * nNum) === 0;\n}\n", "  // your code here\n}\n", "  \
    \  let [num1, den1] = x.split('/');\n    let [num2, den2] = n.split('/');\n  \
    \  return num1 * den2 === num2 * den1;\n}\n", "  let [numerator1, denominator1]\
    \ = x.split('/').map(num => +num);\n  let [numerator2, denominator2] = n.split('/').map(num\
    \ => +num);\n  return Math.floor(numerator1 / denominator1 * numerator2 / denominator2)\
    \ === (numerator1 / denominator1 * numerator2 / denominator2);\n}", "    var xNumerator\
    \ = +x.split('/')[0],\n        xDenominator = +x.split('/')[1],\n        nNumerator\
    \ = +n.split('/')[0],\n        nDenominator = +n.split('/')[1];\n\n    var result\
    \ = (xNumerator / xDenominator) * (nNumerator / nDenominator);\n    if (result\
    \ % 1 === 0) {\n        return true;\n    } else {\n        return false;\n  \
    \  }\n}", "    return Number(x.split('/')[0]) * Number(n.split('/')[1]) % Number(x.split('/')[1])\
    \ === 0;\n}", "  if (x.includes('/') && n.includes('/')) {\n    let xNumerator\
    \ = x.split('/')[0];\n    let xDenominator = x.split('/')[1];\n    let nNumerator\
    \ = n.split('/')[0];\n    let nDenominator = n.split('/')[1];\n    let result\
    \ = xNumerator * nNumerator / (xDenominator * nDenominator);\n    return Number.isInteger(result);\n\
    \  }\n}\n", "    var reduce = function(x, y){\n        while(y) {\n          \
    \  var t = y;\n            y = x % y;\n            x = t;\n        }\n       \
    \ return x;\n    };\n    var gcd = function(x, y){\n        var num1 = +x.split('/')[0];\n\
    \        var den1 = +x.split('/')[1];\n        var num2 = +y.split('/')[0];\n\
    \        var den2 = +y.split('/')[1];\n        return reduce(num1*den2, den1*num2);\n\
    \    };\n    var result = (gcd(x, n) === 1);\n    return result;\n}", "    let\
    \ xNumerator = parseInt(x.slice(0, x.indexOf('/')));\n    let xDenominator = parseInt(x.slice(x.indexOf('/')\
    \ + 1));\n    let nNumerator = parseInt(n.slice(0, n.indexOf('/')));\n    let\
    \ nDenominator = parseInt(n.slice(n.indexOf('/') + 1));\n    let product = xNumerator\
    \ * nNumerator;\n    let denominator = xDenominator * nDenominator;\n    if(product\
    \ % denominator === 0){\n        return true;\n    }\n    return false;\n}", " \
    \   x = x.split('/');\n    n = n.split('/');\n    let denominator = Number(x[1])\
    \ * Number(n[1]);\n    let numerator = Number(x[0]) * Number(n[0]);\n    return\
    \ numerator % denominator === 0;\n}", "    let numeratorX = Number(x.split('/')[0]);\n\
    \    let denominatorX = Number(x.split('/')[1]);\n    let numeratorN = Number(n.split('/')[0]);\n\
    \    let denominatorN = Number(n.split('/')[1]);\n    return (numeratorX * denominatorN)\
    \ % (denominatorX * numeratorN) === 0;\n}", "    var product = multiply(x, n);\n\
    \    return product[1] == 1;\n}\n", "  const xArr = x.split('/');\n  const nArr\
    \ = n.split('/');\n  let greater = xArr[1] >= nArr[1] ? xArr[1] : nArr[1];\n \
    \ const xNum = xArr[0] * greater / xArr[1];\n  const nNum = nArr[0] * greater\
    \ / nArr[1];\n  return xNum % nNum === 0 && nNum % xNum === 0;\n}\n", "    //\
    \ code here\n}", "\tvar x = x.split(\"/\");\n\tvar n = n.split(\"/\");\n\tvar\
    \ x = x[0]/x[1];\n\tvar n = n[0]/n[1];\n\treturn Number.isInteger(x*n);\n}\n",
  "    let xNum = parseInt(x.split('/')[0]);\n    let xDen = parseInt(x.split('/')[1]);\n\
    \    let nNum = parseInt(n.split('/')[0]);\n    let nDen = parseInt(n.split('/')[1]);\n\
    \    if((xNum/xDen)*(nNum/nDen) % 1 == 0){\n        return true;\n    }\n    return\
    \ false;\n}\n", "  let product = x.split('/')[0] * n.split('/')[0]\n  let factor\
    \ = x.split('/')[1] * n.split('/')[1]\n  return (product % factor) == 0\n}\n",
  "  var getVal = function(str){\n    var num = str.split('/');\n    return {\n  \
    \    n: parseInt(num[0]),\n      d: parseInt(num[1])\n    };\n  };\n  var xVal\
    \ = getVal(x);\n  var nVal = getVal(n);\n  return xVal.n * nVal.d % xVal.d ===\
    \ 0 && xVal.n * nVal.d / xVal.d % nVal.d === 0;\n}", "  let x1 = x.split('/');\n\
    \  let n1 = n.split('/');\n  return ((x1[0] * n1[1]) % (x1[1] * n1[0]) === 0);\n\
    }\n", "  const [xNumerator, xDenominator] = x.split('/').map(val => Number(val));\n\
    \  const [nNumerator, nDenominator] = n.split('/').map(val => Number(val));\n\
    \  return !(xNumerator * nDenominator * nNumerator * xDenominator % nDenominator\
    \ * xDenominator);\n}\n", "    let arr = [];\n    let arr2 = [];\n    let result\
    \ = 0;\n    let result2 = 0;\n    let factor = 0;\n    let factor2 = 0;\n    let\
    \ resultStr = '';\n    let resultStr2 = '';\n    let arr3 = [];\n    let arr4\
    \ = [];\n    let result3 = 0;\n    let result4 = 0;\n    let factor3 = 0;\n  \
    \  let factor4 = 0;\n    let resultStr3 = '';\n    let resultStr4 = '';\n    let\
    \ result5 = 0;\n    let result6 = 0;\n    let result7 = 0;\n    let result8 =\
    \ 0;\n    let result9 = 0;\n    let result10 = 0;\n    let result11 = 0;\n   \
    \ let result12 = 0;\n    let result13 = 0;\n    let result14 = 0;\n    let result15\
    \ = 0;\n    let result16 = 0;\n    let result17 = 0;\n    let result18 = 0;\n\
    \    let result19 = 0;\n    let result20 = 0;\n    let result21 = 0;\n    let\
    \ result22 = 0;\n    let result23 = 0;\n    let result24 = 0;\n    let result25\
    \ = 0;\n    let result26 = 0;\n    let result27 = 0;\n    let result28 = 0;\n\
    \    let result29 = 0;\n    let result30 = 0;\n    let result31 = 0;\n    let\
    \ result32 = 0;\n    let result33 = 0;\n    let result34 = 0;\n    let result35\
    \ = 0;\n    let result36 = 0;\n    let result37 = 0;\n    let result38 = 0;\n\
    \    let result39 = 0;\n    let result40 = 0;\n    let result41 = 0;\n    let\
    \ result42 = 0;\n    let result43 = 0;\n    let result44 = 0;\n    let result45\
    \ = 0;\n    let result46 = 0;\n    let result47 = 0;\n    let result48 = 0;\n\
    \    let result49 = 0;\n    let result50 = 0;\n    let result51 = 0;\n    let\
    \ result52 = 0;\n    let result", "    x = x.split('/');\n    n = n.split('/');\n\
    \    let num = x[0] * n[1];\n    let den = x[1] * n[0];\n    return num % den\
    \ === 0;\n}", "  x = fraction(x);\n  n = fraction(n);\n  return  (x[0]*n[1]) %\
    \ (x[1]*n[0]) == 0;\n}\n", "  var xArr = x.split('/');\n  var nArr = n.split('/');\n\
    \  var xNumerator = xArr[0];\n  var xDenominator = xArr[1];\n  var nNumerator\
    \ = nArr[0];\n  var nDenominator = nArr[1];\n  var multipliedNumerator = xNumerator\
    \ * nNumerator;\n  var multipliedDenominator = xDenominator * nDenominator;\n\
    \  var result = multipliedNumerator / multipliedDenominator;\n  if(result % 1\
    \ === 0){\n    return true;\n  } else {\n    return false;\n  }\n}", "  let [xn,\
    \ xd] = x.split('/')\n  let [nn, nd] = n.split('/')\n  let lcm = findLCM(xd, nd)\n\
    \  let num = (lcm/xd * xn) * (lcm/nd * nn)\n  if (num % lcm == 0) {\n    return\
    \ true\n  } else {\n    return false\n  }\n}\n", "  var xn = x.split('/');\n \
    \ var nn = n.split('/');\n  var a = xn[0]*nn[1];\n  var b = xn[1]*nn[0];\n  return\
    \ a%b === 0;\n}\n", "    let xArray = x.split('/');\n    let nArray = n.split('/');\n\
    \    let numeratorResult = xArray[0] * nArray[1];\n    let denominatorResult =\
    \ xArray[1] * nArray[0];\n    if (denominatorResult === 0) {\n        return false;\n\
    \    }\n    if (numeratorResult % denominatorResult === 0) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\n", "  var xArr = x.split('/');\n\
    \  var nArr = n.split('/');\n  return (Number(xArr[0]) * Number(nArr[1])) % (Number(xArr[1])\
    \ * Number(nArr[0])) === 0;\n}\n", "  var firstNumerator = x.split('/')[0];\n\
    \  var firstDenominator = x.split('/')[1];\n  var secondNumerator = n.split('/')[0];\n\
    \  var secondDenominator = n.split('/')[1];\n  if ((firstNumerator * secondDenominator)\
    \ === (firstDenominator * secondNumerator)) {\n    return true;\n  } else {\n\
    \    return false;\n  }\n}\n", "  var x_num = Number(x.split('/')[0]);\n  var\
    \ x_den = Number(x.split('/')[1]);\n  var n_num = Number(n.split('/')[0]);\n \
    \ var n_den = Number(n.split('/')[1]);\n  var product = (x_num*n_num)/(x_den*n_den);\n\
    \  return product%1===0;\n}", "    let xNumerator = x.split('/')[0]\n    let xDenominator\
    \ = x.split('/')[1]\n    let nNumerator = n.split('/')[0]\n    let nDenominator\
    \ = n.split('/')[1]\n    if (xNumerator * nDenominator % xDenominator === 0 &&\
    \ nNumerator * xDenominator % nDenominator === 0) {\n        return true\n   \
    \ } else {\n        return false\n    }\n}", "\tvar xNumerator = x.split(\"/\"\
    )[0];\n\tvar xDenominator = x.split(\"/\")[1];\n\tvar nNumerator = n.split(\"\
    /\")[0];\n\tvar nDenominator = n.split(\"/\")[1];\n\tvar result = (xNumerator*nDenominator)\
    \ * (nNumerator*xDenominator);\n\tconsole.log(result);\n\treturn Number.isInteger(result);\n\
    }\nsimplify(\"1/6\", \"2/1\");", "    // x * n = (x / 1) * (n / 1) = x * n/1 *\
    \ 1/1 = x * n\n    let arr1 = x.split('/');\n    let arr2 = n.split('/');\n  \
    \  return Number.isInteger(arr1[0] * arr2[0] / (arr1[1] * arr2[1]));\n}\n", " \
    \   let [xNum, xDen] = x.split('/')\n    let [nNum, nDen] = n.split('/')\n   \
    \ let GCD = gcd(xNum, xDen)\n    xNum = xNum / GCD\n    xDen = xDen / GCD\n  \
    \  if (xNum === xDen){\n        return true\n    }\n    if (nNum !== '1' || nDen\
    \ !== '1'){\n        GCD = gcd(nNum, nDen)\n        nNum = nNum / GCD\n      \
    \  nDen = nDen / GCD\n    }\n    if (xNum === nNum && xDen === nDen){\n      \
    \  return true\n    }\n    if (xNum * nDen === xDen * nNum){\n        return true\n\
    \    }\n    return false\n}", "    let den = eval(n.split('/')[1])\n    let num\
    \ = eval(n.split('/')[0])\n    let gcd = gcd_two_numbers(num, den)\n    num /=\
    \ gcd\n    den /= gcd\n    let result = num / den\n    return (eval(x) * result)\
    \ % 1 === 0 ? true : false\n}", "  var xNum = Number(x.split('/')[0])\n  var xDen\
    \ = Number(x.split('/')[1])\n  var nNum = Number(n.split('/')[0])\n  var nDen\
    \ = Number(n.split('/')[1])\n  var totalNum = (xNum * nDen) * (nNum * xDen)\n\
    \  var totalDen = xDen * nDen\n  var gcd = function(a, b) {\n    if ( ! b) {\n\
    \        return a;\n    }\n\n    return gcd(b, a % b);\n};\n  var greatCommonDivisor\
    \ = gcd(totalNum, totalDen)\n  var simplifiedNum = totalNum / greatCommonDivisor\n\
    \  var simplifiedDen = totalDen / greatCommonDivisor\n  var simplifiedExpression\
    \ = simplifiedNum + \"/\" + simplifiedDen\n  if (isInt(simplifiedNum/simplifiedDen)){\n\
    \    return true\n  }\n  else {\n    return false\n  }\n}", "  let xArray = x.split('/');\n\
    \  let nArray = n.split('/');\n  let top = parseInt(xArray[0]) * parseInt(nArray[1]);\n\
    \  let bottom = parseInt(xArray[1]) * parseInt(nArray[0]);\n  let result = top\
    \ / bottom;\n  if (result % 1 === 0) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}", "  var arr1 = x.split('/');\n  var arr2 = n.split('/');\n \
    \ var xNumerator = arr1[0];\n  var xDenominator = arr1[1];\n  var nNumerator =\
    \ arr2[0];\n  var nDenominator = arr2[1];\n  if (xNumerator * nDenominator * nNumerator\
    \ * xDenominator % (xDenominator * nDenominator) === 0){\n    return true;\n \
    \ } else {\n    return false;\n  }\n}\n", "  const xN = x.split('/');\n  const\
    \ nN = n.split('/');\n  const xd = xN[1];\n  const nd = nN[1];\n  const xNumerator\
    \ = xN[0];\n  const nNumerator = nN[0];\n  if((xd * nd) % nNumerator !== 0){\n\
    \    return false;\n  }\n  return true;\n}\n", "    let r;\n    if (x.indexOf('/')\
    \ === -1) {\n        r = (x * n).toString();\n    } else {\n        let first\
    \ = x.split('/');\n        let second = n.split('/');\n        let num1 = first[0];\n\
    \        let den1 = first[1];\n        let num2 = second[0];\n        let den2\
    \ = second[1];\n        let baseNum = num1 * num2;\n        let baseDen = den1\
    \ * den2;\n        let gcd = getGCD(baseNum, baseDen);\n        r = gcd > 1 ?\
    \ (baseNum / gcd) + '/' + (baseDen / gcd) : baseNum + '/' + baseDen;\n    }\n\
    \    return r === Math.floor(r).toString();\n}\n", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let xNumerator = parseInt(xArr[0]);\n    let\
    \ xDenominator = parseInt(xArr[1]);\n    let nNumerator = parseInt(nArr[0]);\n\
    \    let nDenominator = parseInt(nArr[1]);\n    let xFraction = xNumerator / xDenominator;\n\
    \    let nFraction = nNumerator / nDenominator;\n    let multiple = xFraction\
    \ * nFraction;\n    if(multiple%1 !== 0){\n        return false;\n    }\n    return\
    \ true;\n}", "\tx = x.split('/');\n\tn = n.split('/');\n\tconst top = x[0] * n[1];\n\
    \tconst bottom = x[1] * n[0];\n\tconst gcd = function(a, b){\n\t\tif(b === 0){\n\
    \t\t\treturn a;\n\t\t} else {\n\t\t\treturn gcd(b, a % b);\n\t\t}\n\t};\n\tconst\
    \ g = gcd(top, bottom);\n\treturn bottom / g === 1;\n}", "  if (!x || !n) return\
    \ false;\n  var xnum = parseInt(x.split('/')[0]);\n  var xden = parseInt(x.split('/')[1]);\n\
    \  var nnum = parseInt(n.split('/')[0]);\n  var nden = parseInt(n.split('/')[1]);\n\
    \  return (xnum * nden) % (xden * nnum) === 0;\n}", "  var xParts = x.split('/');\n\
    \  var nParts = n.split('/');\n  var nNumerator = Number(nParts[0]);\n  var nDenominator\
    \ = Number(nParts[1]);\n  var xNumerator = Number(xParts[0]);\n  var xDenominator\
    \ = Number(xParts[1]);\n  var result = (xNumerator * nDenominator) / (xDenominator\
    \ * nNumerator);\n  return Number.isInteger(result);\n}\n", "  var X = x.split('/')\n\
    \  var N = n.split('/')\n  var num = X[0] * N[1]\n  var den = X[1] * N[0]\n  if\
    \ (num % den == 0){\n    return true\n  } else {\n    return false\n  }\n}", " \
    \ // Your code here!\n}\n", "    const xNum = x.split('/')[0]\n    const xDen\
    \ = x.split('/')[1]\n    const nNum = n.split('/')[0]\n    const nDen = n.split('/')[1]\n\
    \    const top = xNum * nDen\n    const bottom = xDen * nNum\n    const first\
    \ = top / bottom\n    const second = bottom / top\n    return first % 1 === 0\
    \ || second % 1 === 0 ? true : false\n}\n", "    let xNum = parseInt(x.split('/')[0]);\n\
    \    let xDen = parseInt(x.split('/')[1]);\n    let nNum = parseInt(n.split('/')[0]);\n\
    \    let nDen = parseInt(n.split('/')[1]);\n    let r = xNum * nDen * nNum * xDen;\n\
    \    if(r % (xDen * nDen) == 0){\n        return true;\n    }\n    return false;\n\
    }", "    var x_numerator = parseInt(x.split(\"/\")[0]);\n    var x_denominator\
    \ = parseInt(x.split(\"/\")[1]);\n    var n_numerator = parseInt(n.split(\"/\"\
    )[0]);\n    var n_denominator = parseInt(n.split(\"/\")[1]);\n    var result =\
    \ x_numerator * n_numerator;\n    if(result % x_denominator === 0){\n        return\
    \ true;\n    }else{\n        return false;\n    }\n}", "    let nNumerator = parseInt(n.split('/')[0])\n\
    \    let nDenominator = parseInt(n.split('/')[1])\n    let xNumerator = parseInt(x.split('/')[0])\n\
    \    let xDenominator = parseInt(x.split('/')[1])\n    if(xNumerator * nDenominator\
    \ % (xDenominator * nNumerator) === 0){\n        return true\n    }\n    return\
    \ false\n}\n", "  var x_num = parseInt(x.split('/')[0]);\n  var x_den = parseInt(x.split('/')[1]);\n\
    \  var n_num = parseInt(n.split('/')[0]);\n  var n_den = parseInt(n.split('/')[1]);\n\
    \  return !(x_num * n_den % (x_den * n_num));\n}", "    let numerator = ((x.split('/')[0]\
    \ * n.split('/')[1]) * (n.split('/')[0] * x.split('/')[1]))/((x.split('/')[1]\
    \ * n.split('/')[1]));\n    if(Number.isInteger(numerator)){\n        return true;\n\
    \    }else{\n        return false;\n    }\n}", "    let fracs = [x, n].map(f =>\
    \ {\n        let [a, b] = f.split('/').map(n => parseInt(n, 10));\n        return\
    \ {a, b};\n    });\n    let [fracX, fracN] = fracs;\n    // x * n = (a / b) *\
    \ (c / d) = ac / bd\n    let ac = fracX.a * fracN.a;\n    let bd = fracX.b * fracN.b;\n\
    \    let [gcd, lcm] = [ac, bd].map(n => {\n        let gcd = (a, b) => b === 0\
    \ ? a : gcd(b, a % b);\n        let lcm = (a, b) => a * b / gcd(a, b);\n     \
    \   return gcd(bd, ac);\n    });\n    // finally, we check if product is whole\
    \ number by checking if (ac / bd) % 1 === 0\n    return (ac / bd) % 1 === 0;\n\
    }", "    // your code here\n    let arr1 = x.split('/');\n    let arr2 = n.split('/');\n\
    \    let y = (arr1[0]*arr2[1])/(arr1[1]*arr2[0]);\n    if(y%1 === 0){\n      \
    \  return true;\n    }\n    return false;\n}\n", "  var xNum = x.split('/')[0];\n\
    \  var xDen = x.split('/')[1];\n  var nNum = n.split('/')[0];\n  var nDen = n.split('/')[1];\n\
    \  var total = (xNum * nNum)/(xDen * nDen);\n  if(total % 1 == 0){\n    return\
    \ true;\n  }\n  else{\n    return false;\n  }\n}", "  let xNumerator = parseInt(x.split('/')[0]);\n\
    \  let xDenominator = parseInt(x.split('/')[1]);\n  let nNumerator = parseInt(n.split('/')[0]);\n\
    \  let nDenominator = parseInt(n.split('/')[1]);\n  //let xDenominator = parseInt(xDenominator);\n\
    \  //let nDenominator = parseInt(nDenominator);\n  let finalDenominator = xDenominator\
    \ * nDenominator;\n  let finalNumerator = xNumerator * nNumerator;\n  let result\
    \ = finalNumerator / finalDenominator;\n  return Number.isInteger(result);\n}\n",
  "    var xNumerator = parseInt(x.split(\"/\")[0]);\n    var xDenominator = parseInt(x.split(\"\
    /\")[1]);\n    var nNumerator = parseInt(n.split(\"/\")[0]);\n    var nDenominator\
    \ = parseInt(n.split(\"/\")[1]);\n    var result = (xNumerator * nDenominator)\
    \ / (xDenominator * nNumerator);\n    return (result % 1 == 0);\n}\n", "\tlet\
    \ x_numerator = x.split('/')[0];\n\tlet x_denominator = x.split('/')[1];\n\tlet\
    \ n_numerator = n.split('/')[0];\n\tlet n_denominator = n.split('/')[1];\n\tlet\
    \ result = (x_numerator * n_numerator) / (x_denominator * n_denominator);\n\t\
    if (result % 1 == 0) return true;\n\telse return false;\n}\n", "    let num1 =\
    \ x.split('/')[0];\n    let den1 = x.split('/')[1];\n    let num2 = n.split('/')[0];\n\
    \    let den2 = n.split('/')[1];\n    let lcm = (den1 * den2) / gcd(den1, den2);\n\
    \    let num = (num1 * (lcm / den1)) * (num2 * (lcm / den2));\n    return !(num\
    \ % lcm);\n}", "  var x_arr = x.split('/');\n  var n_arr = n.split('/');\n  var\
    \ sum = Number(x_arr[0]) * Number(n_arr[1]) * Number(n_arr[0]) * Number(x_arr[1]);\n\
    \  return Number.isInteger(sum);\n}", "    let a = x.split('/');\n    let b =\
    \ n.split('/');\n    let n1 = (a[0]*b[1])*(b[0]*a[1]);\n    return Number.isInteger(n1);\n\
    }\n", "    let X = x.split('/')\n    let N = n.split('/')\n    let numerator =\
    \ +X[0] * +N[1]\n    let denominator = +X[1] * +N[0]\n    console.log(numerator,\
    \ denominator)\n    if(numerator % denominator == 0) {\n        return true\n\
    \    }\n    return false\n}", "    let res = []\n    let xNumerator = x.split('/')[0]\n\
    \    let xDenominator = x.split('/')[1]\n    let nNumerator = n.split('/')[0]\n\
    \    let nDenominator = n.split('/')[1]\n    let gcd = function(a, b){\n     \
    \   if(!b){\n            return a\n        }\n        return gcd(b, a % b)\n \
    \   }\n    let gcdX = gcd(xNumerator, xDenominator)\n    let gcdN = gcd(nNumerator,\
    \ nDenominator)\n    if(((xNumerator / gcdX) * (nDenominator / gcdN)) % 1 ===\
    \ 0){\n        return true\n    } else {\n        return false\n    }\n}\n", " \
    \   let result = false;\n    let numX = parseInt(x.split('/')[0]);\n    let denX\
    \ = parseInt(x.split('/')[1]);\n    let numN = parseInt(n.split('/')[0]);\n  \
    \  let denN = parseInt(n.split('/')[1]);\n    let gcDen = gcd(denX, denN);\n \
    \   let denProduct = (denX / gcDen) * (denN / gcDen);\n    let numResult = (numX\
    \ * (denN / gcDen)) + (numN * (denX / gcDen));\n    if(numResult % denProduct\
    \ === 0){\n        result = true;\n    }\n    return result;\n}\n", "    let xNumerator\
    \ = x.split('/')[0];\n    let xDenominator = x.split('/')[1];\n    let nNumerator\
    \ = n.split('/')[0];\n    let nDenominator = n.split('/')[1];\n    let xValue\
    \ = xNumerator / xDenominator;\n    let nValue = nNumerator / nDenominator;\n\
    \    let result = xValue * nValue;\n    if(Number.isInteger(result)){\n      \
    \  return true;\n    }\n    return false;\n}", "    const factor = gcd(x, n);\n\
    \    if(factor === 1){\n        return true;\n    }\n    return false;\n}\n",
  "  var Fraction = require('fraction.js');\n  var x = new Fraction(x);\n  var n =\
    \ new Fraction(n);\n  var result = x.mul(n);\n  return result % 1 === 0;\n}\n",
  "    // x = n.split(\"/\");\n    // n = n.split(\"/\");\n    // let result = (x[0]\
    \ * n[1]) / (x[1] * n[0]);\n    // return Number.isInteger(result);\n    return\
    \ !(parseInt(x.split(\"/\")[0]) * parseInt(n.split(\"/\")[1]) % (parseInt(x.split(\"\
    /\")[1]) * parseInt(n.split(\"/\")[0])));\n}", "  var xArray = x.split(\"/\");\n\
    \  var nArray = n.split(\"/\");\n  var xNumerator = xArray[0];\n  var xDenominator\
    \ = xArray[1];\n  var nNumerator = nArray[0];\n  var nDenominator = nArray[1];\n\
    \  var multiplyFraction = (xNumerator * nNumerator) / (xDenominator * nDenominator);\n\
    \  return Number.isInteger(multiplyFraction);\n}", "  x=x.split('/');\n  n=n.split('/');\n\
    \  var x_num=+x[0]*+n[1];\n  var x_den=+x[1]*+n[0];\n  if(x_num%x_den===0){\n\
    \    return true;\n  }else{\n    return false;\n  }\n}", "  const [x_num, x_den]\
    \ = x.split('/').map(i => parseInt(i, 10));\n  const [n_num, n_den] = n.split('/').map(i\
    \ => parseInt(i, 10));\n  const result = (x_num * n_num) / (x_den * n_den);\n\
    \  return Number.isInteger(result);\n}\n", "  let first = x.split('/');\n  let\
    \ second = n.split('/');\n  if(Number(first[0]) * Number(second[1]) % Number(first[1])\
    \ === 0 &&\n     Number(second[0]) * Number(first[1]) % Number(second[1]) ===\
    \ 0){\n    return true;\n  }\n  return false;\n}", "    let num = x.split('/')[0]\
    \ / n.split('/')[0]\n    let den = x.split('/')[1] / n.split('/')[1]\n    return\
    \ num / den == parseInt(num / den)\n}\n", "  let x_numerator = Number(x.split('/')[0]);\n\
    \  let x_denominator = Number(x.split('/')[1]);\n  let n_numerator = Number(n.split('/')[0]);\n\
    \  let n_denominator = Number(n.split('/')[1]);\n  let result_numerator = x_numerator\
    \ * n_numerator;\n  let result_denominator = x_denominator * n_denominator;\n\
    \  return Number.isInteger(result_numerator / result_denominator);\n}\n", "\t\
    let [xNum, xDen] = x.split('/');\n\tlet [nNum, nDen] = n.split('/');\n\tlet num\
    \ = xNum * nDen;\n\tlet den = xDen * nNum;\n\treturn (num % den === 0);\n}\n",
  "    if(x.split('/')[1] * n.split('/')[0] % n.split('/')[1] == 0){\n        return\
    \ true;\n    }\n    return false;\n}\n", "    const numbers = x.split('/');\n\
    \    const first = numbers[0];\n    const second = numbers[1];\n    const firstnum\
    \ = n.split('/');\n    const secnum = firstnum[0];\n    const thirdnum = firstnum[1];\n\
    \    const solution = (first*secnum) / (second*thirdnum);\n    return Number.isInteger(solution);\n\
    }\n", "  var xArr = x.split('/');\n  var nArr = n.split('/');\n  var final = (parseInt(xArr[0])\
    \ * parseInt(nArr[1])) / (parseInt(xArr[1]) * parseInt(nArr[0]));\n  return Number.isInteger(final);\n\
    }\n", "  var xNum = Number(x.split('/')[0]);\n  var xDen = Number(x.split('/')[1]);\n\
    \  var nNum = Number(n.split('/')[0]);\n  var nDen = Number(n.split('/')[1]);\n\
    \  var isWholeNumber = (xNum * nDen) / (xDen * nNum);\n  if (Number.isInteger(isWholeNumber)){\n\
    \    return true;\n  } else {\n    return false;\n  }\n}", "    // Your code here\n\
    \    let a = x.split('/');\n    let b = n.split('/');\n    let denum = a[1] *\
    \ b[1];\n    let num = a[0] * b[1] + b[0] * a[1];\n    if(num % denum === 0){\n\
    \        return true;\n    }else{\n        return false;\n    }\n}", "    let\
    \ firstFrac = x.split('/');\n    let secondFrac = n.split('/');\n    let first\
    \ = +firstFrac[0] * +secondFrac[1];\n    let second = +firstFrac[1] * +secondFrac[0];\n\
    \    return first === second;\n}", "  var [xn, xd] = x.split('/').map(Number);\n\
    \  var [nn, nd] = n.split('/').map(Number);\n  var prodNum = xn * nn;\n  var prodDen\
    \ = xd * nd;\n  var prodFrac = prodNum + '/' + prodDen;\n  var prod = prodNum\
    \ / prodDen;\n  return !(prod - Math.floor(prod));\n}\n", "  let [x_numerator,\
    \ x_denominator] = x.split('/');\n  let [n_numerator, n_denominator] = n.split('/');\n\
    \  let fractional_part = x_numerator*n_denominator/x_denominator*n_numerator;\n\
    \  if (fractional_part%1 !== 0) {\n    return false;\n  }\n  return true;\n}\n",
  "    let xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    let product = xNumerator * nNumerator;\n    let result = product / (xDenominator\
    \ * nDenominator);\n    return Number.isInteger(result);\n}", "    let arrX =\
    \ x.split('/');\n    let arrN = n.split('/');\n    return (arrX[0] * arrN[1])\
    \ % (arrX[1] * arrN[0]) === 0;\n}", "  // make into array\n  x = x.split('/');\n\
    \  n = n.split('/');\n  // make the denom have a common factor\n  var common =\
    \ gcd(x[1], n[1]);\n  // see if the numerator can be divided by the common\n \
    \ if (common % (x[0] * n[0]) === 0) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n", "  let xNum = x.split('/')[0];\n  let xDen = x.split('/')[1];\n\
    \  let nNum = n.split('/')[0];\n  let nDen = n.split('/')[1];\n  if((xNum * nDen)\
    \ === (xDen * nNum)){\n    return true;\n  }\n  return false;\n}\n", "  var xVal\
    \ = (x.split(\"/\")[0]/x.split(\"/\")[1])*n.split(\"/\")[0];\n  var xVal = xVal/n.split(\"\
    /\")[1];\n  var xVal = xVal.toString();\n  if(!xVal.includes(\".\")){\n    return\
    \ true;\n  }\n  return false;\n}", "    x = x.split('/');\n    n = n.split('/');\n\
    \    var num = parseInt(x[0]) * parseInt(n[1]);\n    var den = parseInt(x[1])\
    \ * parseInt(n[0]);\n    var numDen = num/den;\n    return (numDen % 1 == 0) ?\
    \ true : false;\n}", "  return Number.isInteger(parseFloat(x) * parseFloat(n));\n\
    }", "    // get the numerator of x and n\n    var xNum = parseInt(x.split(\"/\"\
    )[0]);\n    var nNum = parseInt(n.split(\"/\")[0]);\n    // get the denominator\
    \ of x and n\n    var xDen = parseInt(x.split(\"/\")[1]);\n    var nDen = parseInt(n.split(\"\
    /\")[1]);\n    // multiply the numerators and the denominators\n    var num =\
    \ xNum * nNum;\n    var den = xDen * nDen;\n    // if the numerator of the product\
    \ is a whole number then return true\n    if(num % den === 0){\n        return\
    \ true;\n    }\n    // else return false\n    else{\n        return false;\n \
    \   }\n}\n", "\tfunction toNumber(fr){\n\t\tvar [num, den] = fr.split('/');\n\t\
    \treturn num / den;\n\t}\n\treturn toNumber(x) * toNumber(n) % 1 === 0;\n}\n",
  "  var x = x.split('/');\n  var n = n.split('/');\n  var num = x[0]*n[1];\n  var\
    \ den = x[1]*n[0];\n  var gcd = findGCD(num, den);\n  num = num/gcd;\n  den =\
    \ den/gcd;\n  console.log(num, den);\n  return num%den === 0;\n}\n", "    let\
    \ xNumerator = parseInt(x.split('/')[0]);\n    let xDenominator = parseInt(x.split('/')[1]);\n\
    \    let nNumerator = parseInt(n.split('/')[0]);\n    let nDenominator = parseInt(n.split('/')[1]);\n\
    \    return ((xNumerator * nDenominator) / (xDenominator * nNumerator)) % 1 ===\
    \ 0;\n}\n", "  var xSplit = x.split('/'),\n      nSplit = n.split('/'),\n    \
    \  xMult = parseInt(xSplit[0]) * parseInt(nSplit[1]),\n      nMult = parseInt(nSplit[0])\
    \ * parseInt(xSplit[1]);\n  return xMult === nMult;\n}\n", "    var x_numerator\
    \ = Number(x.split(\"/\")[0]);\n    var x_denominator = Number(x.split(\"/\")[1]);\n\
    \    var n_numerator = Number(n.split(\"/\")[0]);\n    var n_denominator = Number(n.split(\"\
    /\")[1]);\n    return (x_numerator * n_denominator) % (x_denominator * n_numerator)\
    \ === 0;\n}\n", "\tvar xInt = parseInt(x);\n\tvar nInt = parseInt(n);\n\tvar xEval\
    \ = xInt * nInt;\n\tif(xEval % 1 == 0){\n\t\treturn true;\n\t}\n\telse{\n\t\t\
    return false;\n\t}\n}\n", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n\
    \  let xNum = xArr[0] * nArr[1];\n  let nNum = nArr[0] * xArr[1];\n  if(xNum %\
    \ nNum === 0){\n    return true;\n  } else {\n    return false;\n  }\n}", "\t\
    let first = x.split('/');\n\tlet second = n.split('/');\n\tlet firstNumerator\
    \ = parseInt(first[0]);\n\tlet firstDenominator = parseInt(first[1]);\n\tlet secondNumerator\
    \ = parseInt(second[0]);\n\tlet secondDenominator = parseInt(second[1]);\n\tlet\
    \ multiply = firstNumerator * secondNumerator;\n\tlet denominator = firstDenominator\
    \ * secondDenominator;\n\tlet result = multiply / denominator;\n\treturn Number.isInteger(result);\n\
    }", "    let [xn, xd] = x.split('/');\n    let [nn, nd] = n.split('/');\n    let\
    \ result = (parseInt(xn) * parseInt(nd)) / (parseInt(xd) * parseInt(nn));\n  \
    \  return result % 1 === 0;\n}\n", "  var a = x.split('/'),\n      b = n.split('/'),\n\
    \      c = a[0] * b[1],\n      d = a[1] * b[0];\n  return c % d === 0;\n}\n",
  "  const xArr = x.split('/');\n  const nArr = n.split('/');\n  const xNumerator\
    \ = parseInt(xArr[0]);\n  const xDenominator = parseInt(xArr[1]);\n  const nNumerator\
    \ = parseInt(nArr[0]);\n  const nDenominator = parseInt(nArr[1]);\n  const simplified\
    \ = (xNumerator * nDenominator) * (nNumerator * xDenominator);\n  if (simplified\
    \ % 1 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n", " \
    \   let xFrac = x.split('/');\n    let nFrac = n.split('/');\n    let xWhole =\
    \ xFrac[0] / xFrac[1];\n    let nWhole = nFrac[0] / nFrac[1];\n    return (xWhole\
    \ * nWhole) % 1 === 0;\n}\n", "  return x*n===(x*n)<<0;\n}\n", "  var x_numerator\
    \ = parseInt(x.split('/')[0]);\n  var x_denominator = parseInt(x.split('/')[1]);\n\
    \  var n_numerator = parseInt(n.split('/')[0]);\n  var n_denominator = parseInt(n.split('/')[1]);\n\
    \  var whole = x_numerator * n_numerator;\n  var numerator = x_denominator * n_denominator;\n\
    \  var decimal = whole / numerator;\n  if (decimal % 1 === 0) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n", "  // // n = n.split('/')\n  // let\
    \ nNom = n.split('/')[0]\n  // let nDenom = n.split('/')[1]\n  // let xNom = x.split('/')[0]\n\
    \  // let xDenom = x.split('/')[1]\n  // console.log(nNom, nDenom, xNom, xDenom)\n\
    \  // let num = (nNom * xDenom) + (xNom * nDenom)\n  // let denom = nDenom * xDenom\n\
    \  // console.log(num, denom)\n  // return num / denom\n  return Number.isInteger(Number(x)\
    \ * Number(n))\n}", "    if(!x || !n) return false;\n    x = x.split('/');\n \
    \   n = n.split('/');\n    if(!x[1] || !n[1]) return false;\n    return ((x[0]\
    \ * n[1]) % (x[1] * n[0]) === 0);\n}", "  return true;\n}", "    let xFraction\
    \ = x.split('/')\n    let nFraction = n.split('/')\n    let xNum = Number(xFraction[0])\n\
    \    let xDen = Number(xFraction[1])\n    let nNum = Number(nFraction[0])\n  \
    \  let nDen = Number(nFraction[1])\n    let isWholeNumber = ((xNum * nDen * nNum)\
    \ / (xDen * nDen)) % 1 === 0\n    return isWholeNumber\n}", "    let numerator,\
    \ deno;\n    numerator = x.split('/')[0];\n    deno = x.split('/')[1];\n    if(deno\
    \ % n === 0){\n        return true;\n    }else{\n        return false;\n    }\n\
    }\n", "    let multiplyX = x.split('/');\n    let multiplyN = n.split('/');\n\
    \    let xNum = multiplyX[0];\n    let xDen = multiplyX[1];\n    let nNum = multiplyN[0];\n\
    \    let nDen = multiplyN[1];\n    let multiplication = Number(xNum) * Number(nNum)\
    \ / Number(xDen) * Number(nDen);\n    if(Number.isInteger(multiplication)){\n\
    \        return true;\n    }\n    return false;\n}\n", "    let xD = x.split('/');\n\
    \    let nD = n.split('/');\n    let num = xD[0] * nD[1];\n    let den = xD[1]\
    \ * nD[0];\n    return (num % den === 0) ? true : false;\n}", "  var xNumerator\
    \ = parseInt(x.split('/')[0]);\n  var xDenominator = parseInt(x.split('/')[1]);\n\
    \  var nNumerator = parseInt(n.split('/')[0]);\n  var nDenominator = parseInt(n.split('/')[1]);\n\
    \  return (xNumerator * nDenominator) % (xDenominator * nNumerator) === 0;\n}\n",
  "\n}\n", "    let x_numerator = parseInt(x.slice(0, x.indexOf('/')));\n    let x_denominator\
    \ = parseInt(x.slice(x.indexOf('/') + 1));\n    let n_numerator = parseInt(n.slice(0,\
    \ n.indexOf('/')));\n    let n_denominator = parseInt(n.slice(n.indexOf('/') +\
    \ 1));\n    return x_numerator * n_denominator === x_denominator * n_numerator;\n\
    }\n", "  var xNumerator = +x.split('/')[0];\n  var xDenominator = +x.split('/')[1];\n\
    \  var nNumerator = +n.split('/')[0];\n  var nDenominator = +n.split('/')[1];\n\
    \  var xNum = (xNumerator * nDenominator);\n  var nNum = (nNumerator * xDenominator);\n\
    \  return (xNum % nNum) === 0;\n}", "    let test = x.split('/');\n    let test2\
    \ = n.split('/');\n    let result = (test[0] * test2[1]) * (test2[0] * test[1]);\n\
    \    let result2 = result / (test[1] * test2[1]);\n    if(result2 % 1 === 0){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}", "    let\
    \ xn = `${x}/${n}`;\n    xn = xn.split('/').reduce((acc, cur) => (acc / cur));\n\
    \    if (xn % 1 === 0) {\n        return true;\n    }\n    return false;\n}",
  "    var a = x.split(\"/\");\n    var b = n.split(\"/\");\n    var c = Number(a[0])*Number(b[1]);\n\
    \    var d = Number(a[1])*Number(b[0]);\n    if(c % d == 0){\n        return true;\n\
    \    }else{\n        return false;\n    }\n}", "    return isWholeNum(multiplyFrac(parseFrac(x),\
    \ parseFrac(n)));\n}\n", "  if (x.split('/')[1] === n.split('/')[1]){\n    return\
    \ true;\n  } else if (x.split('/')[1] % n.split('/')[1] === 0){\n    return true;\n\
    \  } else if (n.split('/')[1] % x.split('/')[1] === 0){\n    return true;\n  }\
    \ else if (x.split('/')[1] % n.split('/')[1] !== 0){\n    return false;\n  } else\
    \ if (n.split('/')[1] % x.split('/')[1] !== 0){\n    return false;\n  }\n}\n",
  "  let x_parts = x.split('/');\n  let n_parts = n.split('/');\n  let x_numerator\
    \ = parseInt(x_parts[0]);\n  let x_denominator = parseInt(x_parts[1]);\n  let\
    \ n_numerator = parseInt(n_parts[0]);\n  let n_denominator = parseInt(n_parts[1]);\n\
    \  let x_numerator_copy = x_numerator;\n  let x_denominator_copy = x_denominator;\n\
    \  let n_numerator_copy = n_numerator;\n  let n_denominator_copy = n_denominator;\n\
    \  let left_num_is_factor;\n  let left_den_is_factor;\n  let right_num_is_factor;\n\
    \  let right_den_is_factor;\n  let num_factor = 2;\n  let den_factor = 2;\n  let\
    \ common_numerator;\n  let common_denominator;\n  let gcd_numerator;\n  let gcd_denominator;\n\
    \  let left_num_product;\n  let left_den_product;\n  let right_num_product;\n\
    \  let right_den_product;\n  let product_numerator;\n  let product_denominator;\n\
    \  let result;\n  while (num_factor <= x_numerator && num_factor <= n_numerator)\
    \ {\n    if (x_numerator % num_factor === 0 && n_numerator % num_factor === 0)\
    \ {\n      x_numerator /= num_factor;\n      n_numerator /= num_factor;\n    \
    \  left_num_is_factor = true;\n    } else {\n      num_factor++;\n      left_num_is_factor\
    \ = false;\n    }\n  }\n  while (den_factor <= x_denominator && den_factor <=\
    \ n_denominator) {\n    if (x_denominator % den_factor === 0 && n_denominator\
    \ % den_factor === 0) {\n      x_denominator /= den_factor", "    let xArr = x.split('/');\n\
    \    let nArr = n.split('/');\n    let answer = false;\n    let result = parseInt(xArr[0])*parseInt(nArr[1])*parseInt(nArr[0])*parseInt(xArr[1]);\n\
    \    if(result % 1 === 0){\n        answer = true;\n    }\n    return answer;\n\
    }", "    var num1, num2, den1, den2;\n    var i;\n    for(i = 0; i < x.length;\
    \ i++){\n        if(x[i] === '/'){\n            num1 = Number(x.slice(0, i));\n\
    \            den1 = Number(x.slice(i + 1));\n            break;\n        }\n \
    \   }\n    for(i = 0; i < n.length; i++){\n        if(n[i] === '/'){\n       \
    \     num2 = Number(n.slice(0, i));\n            den2 = Number(n.slice(i + 1));\n\
    \            break;\n        }\n    }\n    return ((num1 * den2) % (num2 * den1))\
    \ === 0;\n}", "  let num1 = +x.split('/')[0]\n  let den1 = +x.split('/')[1]\n\
    \  let num2 = +n.split('/')[0]\n  let den2 = +n.split('/')[1]\n  let newNum =\
    \ num1 * num2\n  let newDen = den1 * den2\n  let gcd = gcdCaculator(newNum, newDen)\n\
    \  let newNumerator = newNum / gcd\n  let newDenominator = newDen / gcd\n  if\
    \ (newNumerator === newDenominator){\n    return true\n  } else {\n    return\
    \ false\n  }\n}", "  var a = x.split('/')\n  var b = n.split('/')\n  var c = \
    \ a[0]*b[1]\n  var d =  a[1]*b[0]\n  return c==d\n}", "    if(x==='0/1' || n==='0/1')\
    \ return false;\n    var xn = x.split('/'),\n        nn = n.split('/');\n    var\
    \ newNum = xn[0]*nn[1],\n        newDen = xn[1]*nn[0];\n    return Math.abs(newNum)%Math.abs(newDen)===0;\n\
    }\n", "    let [xn, xd] = x.split('/').map(Number);\n    let [nn, nd] = n.split('/').map(Number);\n\
    \    let g = xd * nd;\n    let prod = xn * nn;\n    return (prod % g) === 0;\n\
    }\n", "  var x_numerator = Number(x.split('/')[0]);\n  var x_denominator = Number(x.split('/')[1]);\n\
    \  var n_numerator = Number(n.split('/')[0]);\n  var n_denominator = Number(n.split('/')[1]);\n\
    \  var x_calc = x_numerator * n_denominator;\n  var n_calc = n_numerator * x_denominator;\n\
    \  if(x_calc % n_calc === 0){\n    return true;\n  } else {\n    return false;\n\
    \  }\n}", "  let numeratorX = Number(x.split('/')[0]);\n  let denominatorX = Number(x.split('/')[1]);\n\
    \  let numeratorN = Number(n.split('/')[0]);\n  let denominatorN = Number(n.split('/')[1]);\n\
    \  let answer = (numeratorX * denominatorN) / (denominatorX * numeratorN);\n \
    \ return Number.isInteger(answer);\n}\n", "  let g = gcd(x, n);\n  return Math.abs(x\
    \ / g) % 1 === 0;\n}", "\tx = x.split('/')\n\tn = n.split('/')\n\t\n\tlet xNum\
    \ = Number(x[0])\n\tlet xDen = Number(x[1])\n\tlet nNum = Number(n[0])\n\tlet\
    \ nDen = Number(n[1])\n\t\n\tlet resNum = xNum * nNum\n\tlet resDen = xDen * nDen\n\
    \t\n\tif(resNum % resDen === 0){\n\t\treturn true\n\t} else {\n\t\treturn false\n\
    \t}\n}\n", "    var xNum = parseInt(x.split(\"/\")[0]);\n    var xDen = parseInt(x.split(\"\
    /\")[1]);\n    var nNum = parseInt(n.split(\"/\")[0]);\n    var nDen = parseInt(n.split(\"\
    /\")[1]);\n    return (xNum / xDen) * (nNum / nDen) % 1 === 0;\n}", "    let xa\
    \ = x.split('/');\n    let na = n.split('/');\n    let a = xa[0] * na[1];\n  \
    \  let b = xa[1] * na[0];\n    return a % b === 0;\n}", "  let [xN, xD] = x.split('/');\n\
    \  let [nN, nD] = n.split('/');\n  return  (xN * nD) % (xD * nN) === 0;\n}\n",
  "    const xSplit = x.split('/');\n    const nSplit = n.split('/');\n    const xNumerator\
    \ = parseInt(xSplit[0]);\n    const xDenominator = parseInt(xSplit[1]);\n    const\
    \ nNumerator = parseInt(nSplit[0]);\n    const nDenominator = parseInt(nSplit[1]);\n\
    \    const product = xNumerator * nNumerator / (xDenominator * nDenominator);\n\
    \    return Number.isInteger(product);\n}\n", "    var xVal = x.split(\"/\");\n\
    \    var nVal = n.split(\"/\");\n    var xNumerator = parseInt(xVal[0]);\n   \
    \ var xDenominator = parseInt(xVal[1]);\n    var nNumerator = parseInt(nVal[0]);\n\
    \    var nDenominator = parseInt(nVal[1]);\n    var resultNumerator = xNumerator\
    \ * nNumerator;\n    var resultDenominator = xDenominator * nDenominator;\n  \
    \  var simplifyNumerator = true;\n    var simplifyDenominator = true;\n    var\
    \ n = 2;\n    while(simplifyNumerator || simplifyDenominator){\n        if(simplifyNumerator){\n\
    \            if(resultNumerator % n === 0 && resultDenominator % n === 0){\n \
    \               resultNumerator = resultNumerator / n;\n                resultDenominator\
    \ = resultDenominator / n;\n            }\n            else{\n               \
    \ simplifyNumerator = false;\n            }\n        }\n        else if(simplifyDenominator){\n\
    \            if(resultNumerator % n === 0 && resultDenominator % n === 0){\n \
    \               resultNumerator = resultNumerator / n;\n                resultDenominator\
    \ = resultDenominator / n;\n            }\n            else{\n               \
    \ simplifyDenominator = false;\n            }\n        }\n        n++;\n    }\n\
    \    if(resultNumerator === resultDenominator){\n        return true;\n    }\n\
    \    else{\n        return false;\n    }\n}\n", "  var xNumerator = parseInt(x.split('/')[0],\
    \ 10);\n  var xDenominator = parseInt(x.split('/')[1], 10);\n  var nNumerator\
    \ = parseInt(n.split('/')[0], 10);\n  var nDenominator = parseInt(n.split('/')[1],\
    \ 10);\n  var number = xNumerator * nDenominator * nNumerator * xDenominator;\n\
    \  if (number % 10 === 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}", "    let xNum = x.split('/')[0];\n    let xDen = x.split('/')[1];\n\
    \    let nNum = n.split('/')[0];\n    let nDen = n.split('/')[1];\n    let xProduct\
    \ = xNum * nNum;\n    let nProduct = xDen * nDen;\n    return xProduct % nProduct\
    \ === 0;\n}\n", "    const [fracXnum, fracXdenom] = x.split('/').map(Number);\n\
    \    const [fracNnum, fracNdenom] = n.split('/').map(Number);\n    const prodFracNum\
    \ = fracXnum * fracNnum;\n    const prodFracDenom = fracXdenom * fracNdenom;\n\
    \    if (Number.isInteger(prodFracNum / prodFracDenom)){\n        return true;\n\
    \    }\n    return false;\n}", "  var xSplit = x.split('/');\n  var nSplit = n.split('/');\n\
    \  var product = parseInt(xSplit[0]) * parseInt(nSplit[0]) / (parseInt(xSplit[1])\
    \ * parseInt(nSplit[1]));\n  return Number.isInteger(product);\n}\n", "  var frac1\
    \ = x.split(\"/\")\n  var frac2 = n.split(\"/\")\n  var numerator = Number(frac1[0])\
    \ * Number(frac2[1])\n  var denominator = Number(frac1[1]) * Number(frac2[0])\n\
    \  return numerator % denominator === 0\n}\n", "  let xArr = x.split('/');\n \
    \ let nArr = n.split('/');\n  let xNumerator = Number(xArr[0]);\n  let xDenominator\
    \ = Number(xArr[1]);\n  let nNumerator = Number(nArr[0]);\n  let nDenominator\
    \ = Number(nArr[1]);\n  let numerator = xNumerator * nDenominator;\n  let denominator\
    \ = xDenominator * nNumerator;\n  let simplifyNum = numerator / denominator;\n\
    \  if(simplifyNum % 1 === 0){\n    return true;\n  } else {\n    return false;\n\
    \  }\n}", "  let xNum = Number(x.split('/')[0]);\n  let xDen = Number(x.split('/')[1]);\n\
    \  let nNum = Number(n.split('/')[0]);\n  let nDen = Number(n.split('/')[1]);\n\
    \  let xProd = xNum * nDen;\n  let nProd = nNum * xDen;\n  if(xProd % xDen ===\
    \ 0 && nProd % nDen === 0){\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "  if (x === n) {\n    return true;\n  }\n  return false;\n}\n", " \
    \ let x_numerator = x.split('/')[0]\n  let x_denominator = x.split('/')[1]\n \
    \ let n_numerator = n.split('/')[0]\n  let n_denominator = n.split('/')[1]\n \
    \ let product = (parseInt(x_numerator) * parseInt(n_numerator)) / (parseInt(x_denominator)\
    \ * parseInt(n_denominator))\n  return product % 1 === 0\n}", "    let fracN =\
    \ n.split('/');\n    let fracX = x.split('/');\n    let nNum = Number(fracN[0]);\n\
    \    let nDen = Number(fracN[1]);\n    let xNum = Number(fracX[0]);\n    let xDen\
    \ = Number(fracX[1]);\n    let result = xNum * nNum / (xDen * nDen);\n    if(result\
    \ == Math.floor(result)){\n        return true;\n    } else{\n        return false;\n\
    \    }\n}\n", "  // console.log(x,n);\n  var xt = x.split('/');\n  var nt = n.split('/');\n\
    \  // console.log(xt,nt);\n  var xn = (parseInt(xt[0]) * parseInt(nt[1])) / (parseInt(xt[1])\
    \ * parseInt(nt[0]));\n  // console.log(xn);\n  return !(xn % 1);\n}\n", "  let\
    \ xNumerator = x.slice(0, x.indexOf('/'));\n  let xDenominator = x.slice(x.indexOf('/')\
    \ + 1);\n  let nNumerator = n.slice(0, n.indexOf('/'));\n  let nDenominator =\
    \ n.slice(n.indexOf('/') + 1);\n  let totalNumerator = parseInt(xNumerator) *\
    \ parseInt(nDenominator);\n  let totalDenominator = parseInt(xDenominator) * parseInt(nNumerator);\n\
    \  if (totalNumerator % totalDenominator === 0) {\n    return true;\n  } else\
    \ {\n    return false;\n  }\n}\n", "\tvar xn = x.split(\"/\");\n\tvar nn = n.split(\"\
    /\");\n\tvar div = xn[1]*nn[1];\n\tvar res = xn[0]*nn[1] - nn[0]*xn[1];\n\treturn\
    \ !(res%div);\n}", "  let xArr = x.split('/');\n  let nArr = n.split('/');\n \
    \ let denominator = xArr[1] * nArr[1];\n  let numerator = xArr[0] * nArr[1] +\
    \ nArr[0] * xArr[1];\n  let gcd = commonDenominator(numerator, denominator);\n\
    \  return denominator/gcd !== 1;\n}\n", "    return (x.split('/')[0]*n.split('/')[1])\
    \ % (x.split('/')[1]*n.split('/')[0]) == 0;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
