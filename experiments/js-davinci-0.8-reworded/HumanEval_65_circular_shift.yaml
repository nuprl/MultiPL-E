name: HumanEval_65_circular_shift
language: js
prompt: "//Circular shift the digits of the integer x, shift the digits right by shift\n\
  // and return the result as a string.\n// If shift > number of digits, return digits\
  \ reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunction circular_shift(x, shift){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = circular_shift;\n  assert.deepEqual(candidate(100, 2),\"001\");\n  assert.deepEqual(candidate(12,\
  \ 2),\"12\");\n  assert.deepEqual(candidate(97, 8),\"79\");\n  assert.deepEqual(candidate(12,\
  \ 1),\"21\");\n  assert.deepEqual(candidate(11, 101),\"11\");\n}\n\ntest();"
completions: ["    x = String(x);\n    if (shift > x.length){\n        return reverse(x);\n\
    \    }\n    else{\n        return x.slice(shift, x.length) + x.slice(0, shift);\n\
    \    }\n}\n", "\t//Parse the integer and reverse order\n\tx = x.toString().split(\"\
    \").reverse();\n\t//For loop to shift the digits around\n\tfor(var i = 0; i <\
    \ shift; i++){\n\t\t//Pop the last item off the end\n\t\tvar temp = x.pop();\n\
    \t\t//Unshift the popped off item to the front\n\t\tx.unshift(temp);\n\t}\n\t\
    //Return reversed digits\n\treturn x.reverse().join(\"\");\n}\n", "  var digits\
    \ = reverse_digits(x);\n  shift = shift % digits.length;\n  var first = digits.slice(0,shift);\n\
    \  var last = digits.slice(shift);\n  return first.concat(last).join(\"\");\n\
    }\n", "\tx = String(x);\n\tlet y = '';\n\tfor (let i = 0; i < x.length; i++){\n\
    \t\ty += x[(x.length - shift + i) % x.length];\n\t}\n\treturn y;\n}\n", "    let\
    \ digits = num_to_array(x);\n    while(shift > 0){\n        digits.unshift(digits.pop());\n\
    \        shift -= 1;\n    }\n    return array_to_num(digits);\n}\n", "    //Convert\
    \ integer to a string\n    var str_val = x.toString();\n    //Return the result\
    \ of shift > number of digits\n    if(shift > str_val.length){\n        return\
    \ str_val.split(\"\").reverse().join(\"\");\n    }\n\n    var res = str_val.slice(shift);\n\
    \    res += str_val.slice(0, shift);\n    return res;\n}\n\n", "  var y = x.toString();\n\
    \  var n = y.length;\n  //console.log(\"n: \" + n);\n  if (shift < n){\n    var\
    \ last = y.substring(n-shift, n);\n    var first = y.substring(0, n-shift);\n\
    \    return last + first;\n  }\n  else{\n    return y.split(\"\").reverse().join(\"\
    \");\n  }\n}\n", "    var x_str = x.toString();\n    var arr = [];\n    if (shift\
    \ >= x_str.length){\n        var new_str = x_str.split(\"\").reverse().join(\"\
    \");\n        return new_str;\n    }\n    else{\n        for (var i = 0; i < x_str.length;\
    \ i++){\n            arr.push(x_str[i]);\n        }\n        var temp = arr[arr.length\
    \ - shift];\n        for (var i = arr.length - shift; i > 0; i--){\n         \
    \   arr[i] = arr[i - 1];\n        }\n        arr[0] = temp;\n        var new_str\
    \ = arr.join(\"\");\n        return new_str;\n    }\n}\n\n", "    //TODO\n   \
    \ shift = shift % String(x).length;\n\n    var list = String(x).split(\"\");\n\
    \    var right = list.splice(0, list.length - shift);\n    var left = list.splice(0,\
    \ list.length);\n\n    return left.concat(right).join(\"\");\n}", "    var str\
    \ = x.toString();\n    if (shift >= str.length){\n        str = str.split(\"\"\
    ).reverse().join(\"\");\n    }\n    else{\n        str = str.slice(shift)+str.slice(0,shift);\n\
    \    }\n    return str;\n}\n", "\tvar x_str = x.toString();\n\tif (shift >= x_str.length){\n\
    \t\treturn x_str.split(\"\").reverse().join(\"\");\n\t}\n\treturn x_str.slice(shift)\
    \ + x_str.slice(0, shift);\n}\n", "  var str = x.toString();\n  return str.substring(shift)\
    \ + str.substring(0, shift);\n}\n", "\tvar str = x.toString();\n\tvar len = str.length;\n\
    \tvar res = '';\n\tif(len < shift){\n\t\tfor(var i = len-1; i >= 0; i--){\n\t\t\
    \tres += str[i];\n\t\t}\n\t}else{\n\t\tres = str.substring(len-shift) + str.substring(0,\
    \ len-shift);\n\t}\n\treturn res;\n}\n", "  return x.toString().split('').map(function(e){\n\
    \    return e.charCodeAt(0) - 48;\n  }).reduce(function(a,b){\n    var carry =\
    \ b;\n    for(var i = 0; i < shift; i++){\n      carry = (carry % 10) * 10 + Math.floor(carry\
    \ / 10);\n    }\n    return a * 100 + carry;\n  }).toString();\n}\n", "  var x_digits\
    \ = x.toString().split('').reverse();\n  if (shift >= x_digits.length){\n    return\
    \ x_digits.reverse().join('');\n  }\n  var shifted_digits = x_digits.slice(0,\
    \ shift).reverse().join('');\n  var remaining_digits = x_digits.slice(shift, x_digits.length).reverse().join('');\n\
    \  return shifted_digits + remaining_digits;\n}\n", "    let arr = x.toString().split('');\n\
    \    while(shift > 0){\n        let dig = arr.pop();\n        arr.unshift(dig);\n\
    \        shift -= 1;\n    }\n    return arr.join('');\n}\n", "\treturn x.toString().split('').reverse().join('').substring(0,\
    \ shift).split('').reverse().join('');\n}\n", "\n}\n", "    var str = x.toString();\n\
    \    if (shift <= str.length){\n        return str.slice(shift) + str.slice(0,\
    \ shift);\n    }\n    else{\n        return str.split(\"\").reverse().join(\"\"\
    );\n    }\n}\n", "  var str = Math.abs(x).toString();\n  shift = shift % str.length;\n\
    \  if (shift === 0) return str;\n  return str.slice(shift) + str.slice(0, shift);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
