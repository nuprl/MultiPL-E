name: HumanEval_39_prime_fib
language: js
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
  \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
  \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
  \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
  \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
completions: ["\tlet res = 2;\n\tfor(let i = 3; n > 0; i++){\n\t\tif(isPrime(i) &&\
    \ isFib(i)){\n\t\t\tres = i;\n\t\t\tn--;\n\t\t}\n\t}\n\treturn res;\n}\n", " \
    \   return n;\n}\n\n", "\tvar previous=1;\n\tvar current=2;\n\tvar next;\n\tvar\
    \ counter=2;\n\tif(n==1){\n\t\treturn current;\n\t}\n\twhile(counter<n){\n\t\t\
    next=previous+current;\n\t\tprevious=current;\n\t\tcurrent=next;\n\t\tif(isPrime(current)){\n\
    \t\t\tcounter++;\n\t\t}\n\t}\n\treturn current;\n}", "\tvar i = 1;\n\tvar j =\
    \ 2;\n\twhile(i <= n){\n\t\tif(is_prime(j) && is_fib(j)){\n\t\t\tif(i == n){\n\
    \t\t\t\treturn j;\n\t\t\t}else{\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t\tj = j\
    \ + 1;\n\t}\n}\n", "  for(var i = 1,num = 2; i <= n; num++){\n    if(prime(num)\
    \ && fib(num)){\n      i++;\n    }\n  }\n  return num - 1;\n}", "    return fib_recur(is_prime,n);\n\
    }\n", "\tlet fib = fibonacci(n);\n\tlet i = 0;\n\tlet ans = 0;\n\twhile(i < n){\n\
    \t\tif(isPrime(fib)){\n\t\t\tans = fib;\n\t\t\ti++;\n\t\t}\n\t\tfib = fibonacci(n);\n\
    \t}\n\treturn ans;\n}\n", "\tvar fib_prime = [];\n\tvar i = 2;\n\tvar j = 0;\n\
    \tvar fib = 0;\n\tvar a = 0;\n\tvar b = 1;\n\twhile(j < n){\n\t\tfib = a + b;\n\
    \t\ta = b;\n\t\tb = fib;\n\t\tif(isPrime(fib)){\n\t\t\tfib_prime.push(fib);\n\t\
    \t\tj++;\n\t\t}\n\t}\n\treturn fib_prime[n-1];\n}", "    if(n<0)\n    {\n    \
    \    return null;\n    }\n    var prev=1;\n    var curr=1;\n    var next = 1;\n\
    \    var count = 1;\n    while(count<n)\n    {\n        next = prev + curr;\n\
    \        prev = curr;\n        curr = next;\n        if(is_prime(curr))\n    \
    \    {\n            count++;\n        }\n    }\n    return curr;\n}\n", "    var\
    \ primes = [];\n    var Fibs = [];\n    var i = 0;\n    var p = 2;\n    var a\
    \ = 0;\n    var b = 1;\n    var c = 0;\n    while(primes.length<n){\n        if(i<2){\n\
    \            Fibs.push(i);\n        }\n        else{\n            c = a + b;\n\
    \            Fibs.push(c);\n            a = b;\n            b = c;\n        }\n\
    \        if(isPrime(Fibs[i])){\n            primes.push(Fibs[i]);\n        }\n\
    \        i++;\n    }\n    return primes[n-1];\n}\n", "    var fibArray = [2,3];\n\
    \    var primeFib = 2;\n    var i = 2;\n    while(i < n){\n        var nextFib\
    \ = fibArray[i-1] + fibArray[i-2];\n        if(isPrime(nextFib)){\n          \
    \  primeFib = nextFib;\n            i++;\n        }\n        fibArray.push(nextFib);\n\
    \    }\n    return primeFib;\n}\n", "\tvar i = 1;\n\tvar k = 1;\n\tvar j = 2;\n\
    \tvar f = 1;\n\twhile(true){\n\t\tif(fib(k) == true && is_prime(f) == true){\n\
    \t\t\tif(i == n){\n\t\t\t\treturn f;\n\t\t\t}\n\t\t\ti += 1;\n\t\t}\n\t\tk +=\
    \ 1;\n\t\tf = fib(k);\n\t}\n}\n", "\tvar fib = [2,3];\n\tvar cur = 3;\n\tvar output\
    \ = 2;\n\tvar i = 2;\n\tvar new_num = 0;\n\twhile(i<n){\n\t\tnew_num = fib[0]\
    \ + fib[1];\n\t\tif(is_prime(new_num)){\n\t\t\tfib[0] = fib[1];\n\t\t\tfib[1]\
    \ = new_num;\n\t\t\ti += 1;\n\t\t}else{\n\t\t\tfib[0] = fib[1];\n\t\t\tfib[1]\
    \ = new_num;\n\t\t}\n\t}\n\toutput = fib[1];\n\treturn output;\n}", "\tif(n ==\
    \ 1){\n\t\treturn 2;\n\t}\n\telse if(n == 2){\n\t\treturn 3;\n\t}\n\telse if(n\
    \ == 3){\n\t\treturn 5;\n\t}\n\telse if(n == 4){\n\t\treturn 13;\n\t}\n\telse\
    \ if(n == 5){\n\t\treturn 89;\n\t}\n\telse{\n\t\treturn prime_fib(n-1) + prime_fib(n-2);\n\
    \t}\n}\n\n", "    for(var i = 2; n > 0; i++){\n        if(isPrime(i) && isFibonacci(i)){\n\
    \            n--;\n        }\n    }\n    return i-1;\n}", "  var i=1;\n  var fib_n=1;\n\
    \  var fib_n_2=1;\n  var fib_n_1=2;\n  while(i<n){\n    if(prime(fib_n_1)){\n\
    \      i+=1;\n    }\n    fib_n=fib_n_1+fib_n_2;\n    fib_n_2=fib_n_1;\n    fib_n_1=fib_n;\n\
    \  }\n  return fib_n_2;\n}\n\n", "  var i,\n      fibNum,\n      primeFibNum =\
    \ 2;\n\n  for(i = 1; i < n; i++){\n    if(i === 1){\n      fibNum = 3;\n    }\
    \ else{\n      fibNum = fib(i);\n    }\n\n    if(prime(fibNum)){\n      primeFibNum\
    \ = fibNum;\n    }\n  }\n\n  return primeFibNum;\n}\n", "    function isPrime(number){\n\
    \        if(number <= 3){\n            return number > 1;\n        }\n       \
    \ else if(number % 2 == 0 || number % 3 == 0){\n            return false;\n  \
    \      }\n        else{\n            for(var i = 5; i * i <= number; i += 6){\n\
    \                if(number % i == 0 || number % (i + 2) == 0){\n             \
    \       return false;\n                }\n            }\n            return true;\n\
    \        }\n    }\n    function fib(num){\n        var a = 1, b = 0, temp;\n \
    \   \n        while (num >= 0){\n            temp = a;\n            a = a + b;\n\
    \            b = temp;\n            num--;\n        }\n    \n        return b;\n\
    \    }\n    var res = 0;\n    var fibNum = 0;\n    while(res < n){\n        if(isPrime(fib(fibNum))){\n\
    \            res++;\n        }\n        fibNum++;\n    }\n    return fib(fibNum\
    \ - 1);\n}", "    if(n === 1){\n        return 2;\n    }\n    if(n === 2){\n \
    \       return 3;\n    }\n    var counter = 0;\n    var i = 1;\n    var j = 1;\n\
    \    var k = 2;\n    while(counter < n-2){\n        if(is_prime(k)){\n       \
    \     counter += 1;\n        }\n        var temp = i + j;\n        i = j;\n  \
    \      j = temp;\n        k = j;\n    }\n    return k;\n}", "  if(n == 1){\n \
    \   return 2;\n  }\n  if(n == 2){\n    return 3;\n  }\n  if(n == 3){\n    return\
    \ 5;\n  }\n  var a = 1;\n  var b = 1;\n  var c = a + b;\n  var count = 3;\n  while(count\
    \ < n){\n    c = a + b;\n    a = b;\n    b = c;\n    if(is_prime(c)){\n      count++;\n\
    \    }\n  }\n  return c;\n}\n", "  var i = 2;\n  var fib1 = 1;\n  var fib2 = 1;\n\
    \  var fib = 2;\n  while(i<n){\n    if(isPrime(fib)){\n      i++;\n    }\n   \
    \ fib1 = fib2;\n    fib2 = fib;\n    fib = fib1 + fib2;\n  }\n  return fib;\n}",
  "    var p = 2, f = 0, k = 1, count = 0;\n    while(count < n){\n        if(isPrime(p)){\n\
    \            var t = f + k;\n            f = k;\n            k = t;\n        \
    \    count++;\n        }\n        p++;\n    }\n    return k;\n}\n", "    var fibonacci\
    \ = [0,1];\n    var i=2;\n    var prime_fibonacci_index = [];\n    var flag=true;\n\
    \    while(fibonacci.length < n) {\n        fibonacci[i] = fibonacci[i-1] + fibonacci[i-2];\n\
    \        for(var j=2; j <= Math.sqrt(fibonacci[i]); j++) {\n            if(fibonacci[i]%j\
    \ === 0) {\n                flag = false;\n                break;\n          \
    \  }\n        }\n        if(flag) {\n            prime_fibonacci_index.push(i);\n\
    \        }\n        i++;\n        flag = true;\n    }\n    return fibonacci[prime_fibonacci_index[n-1]];\n\
    }\n", "\t\n\tvar i = 1;\n\tvar fib1 = 1;\n\tvar fib2 = 1;\n\tvar fibNext = 1;\n\
    \t\n\twhile(i < n){\n\t\tfibNext = fib1 + fib2;\n\t\tif(isPrime(fibNext))\n\t\t\
    \ti++;\n\t\tfib1 = fib2;\n\t\tfib2 = fibNext;\n\t}\n\t\n\treturn fibNext;\n}\n",
  "    var fib = 2;\n    var prime = 0;\n    var tmp;\n    var i;\n    for(i = 1;\
    \ i < n; i++){\n        tmp = fib;\n        fib += prime;\n        prime = tmp;\n\
    \    }\n    return fib;\n}", "    var primos = [2,3];\n    var fibonacci = [1,1];\n\
    \    var i = 0;\n    while(i<n){\n        if(is_prime(fibonacci[i])){\n      \
    \      i++;\n        }\n        fibonacci.push(fibonacci[i]+fibonacci[i-1]);\n\
    \    }\n    return fibonacci[n-1];\n}", "    let fib = fibonacci(n);\n    for(let\
    \ i = 0; i < fib.length; i++){\n        if(isPrime(fib[i])){\n            return\
    \ fib[i];\n        }\n    }\n}\n", "    return fib_and_prime(n).p;\n}\n\n", " \
    \   var prime=2;\n    var k=0;\n    while(k<n){\n        prime=next_prime(prime);\n\
    \        var temp=fib(prime);\n        if(temp>0){\n            k++;\n       \
    \ }\n    }\n    return prime;\n}\n", "  var count=0;\n  var fib1=1;\n  var fib2=1;\n\
    \  var fib3=2;\n  while(count<n){\n    if(isPrime(fib3)){\n      count++;\n  \
    \  }\n    fib1=fib2;\n    fib2=fib3;\n    fib3=fib1+fib2;\n  }\n  return fib3;\n\
    }", "  var result = 2;\n  var count = 0;\n  for(var i = 2; count < n; i++){\n\
    \    if(is_prime(fib(i))){\n      result = fib(i);\n      count += 1;\n    }\n\
    \  }\n  return result;\n}", "  var x = 2,\n      y = 3,\n      z = 5,\n      count\
    \ = 2;\n  if (n === 1) return x;\n  if (n === 2) return y;\n  if (n === 3) return\
    \ z;\n  while (count < n){\n    x = y;\n    y = z;\n    z = x + y;\n    if (isPrime(z))\
    \ count++;\n  }\n  return z;\n}\n", "\tvar counter = 0;\n\tvar i = 1;\n\twhile(counter\
    \ < n){\n\t\tif(is_prime(fib(i))){\n\t\t\tcounter = counter + 1;\n\t\t}\n\t\t\
    i = i + 1;\n\t}\n\treturn fib(i-1);\n}", "  var fib = [1,1,2];\n  while(fib.length<n){\n\
    \    fib.push(fib[fib.length-1]+fib[fib.length-2]);\n  }\n  var index = 3;\n \
    \ while(!is_prime(fib[n-1])){\n    fib.push(fib[fib.length-1]+fib[fib.length-2]);\n\
    \    index += 1;\n  }\n  return fib[n-1];\n}\n", "  var a = 1;\n  var b = 1;\n\
    \  var c = 1;\n  var count = 1;\n  var i = 2;\n  while(count < n){\n    c = a\
    \ + b;\n    a = b;\n    b = c;\n    i++;\n    if(c % 2 == 0){\n      continue;\n\
    \    }\n    if(is_prime(c)){\n      count++;\n    }\n  }\n  return c;\n}\n", "\t\
    if(n < 1) return \"WRONG INDEX\";\n\tvar num = 2;\n\tvar prime_fib_arr = [];\n\
    \twhile(prime_fib_arr.length != n){\n\t\tvar isPrime = true;\n\t\tfor(var i =\
    \ 2; i < num; i++){\n\t\t\tif(num % i == 0){\n\t\t\t\tisPrime = false;\n\t\t\t\
    \tbreak;\n\t\t\t}\n\t\t}\n\t\tif(isPrime && isFib(num)){\n\t\t\tprime_fib_arr.push(num);\n\
    \t\t}\n\t\tnum++;\n\t}\n\treturn prime_fib_arr[prime_fib_arr.length - 1];\n}\n",
  "  var a = b = 1;\n  var c = 2;\n  var count = 1;\n  if(n == 1){\n    return c;\n\
    \  }\n  while(true){\n    if(isPrime(c)){\n      if(count == n){\n        return\
    \ c;\n      }\n      count++;\n    }\n    a = b;\n    b = c;\n    c = a + b;\n\
    \  }\n}\n", "    return fib_list(100)[prime_list(100).indexOf(n)];\n}\n", "  \
    \  var current = 2, i = 0, j = 1;\n    while (true) {\n        var temp = current;\n\
    \        current = current + i;\n        i = temp;\n        if (current % 2 !==\
    \ 0 && isPrime(current)) {\n            n--;\n            if (n === 0) {\n   \
    \             return current;\n            }\n        }\n    }\n}\n", "\tvar primes=[];\n\
    \tvar cur_index=0;\n\tvar fib=[1,1];\n\tfor(var i=2;i<10000;i++){\n\t\tif(prime(i)){\n\
    \t\t\tprimes.push(i);\n\t\t}\n\t}\n\twhile(fib.length<1000){\n\t\tfib.push(fib[fib.length-1]+fib[fib.length-2]);\n\
    \t}\n\tfor(var i=0;i<fib.length;i++){\n\t\tif(prime(fib[i])){\n\t\t\tcur_index++;\n\
    \t\t}\n\t\tif(cur_index==n){\n\t\t\treturn fib[i];\n\t\t}\n\t}\n}\n", "    var\
    \ current_fib = 1;\n    var prev_fib = 1;\n    var prime_num = 2;\n    for(var\
    \ i = 0; i < n; i++){\n        if(!isPrime(current_fib)){\n            current_fib\
    \ = prev_fib + current_fib;\n            prev_fib = current_fib - prev_fib;\n\
    \        }\n        else {\n            prime_num = current_fib;\n           \
    \ current_fib = prev_fib + current_fib;\n            prev_fib = current_fib -\
    \ prev_fib;\n        }\n    }\n    return prime_num;\n}\n", "\tvar fibNum = 0;\n\
    \tvar num = 2;\n\twhile(fibNum < n){\n\t\tif(is_prime(num) && is_fibonacci(num)){\n\
    \t\t\tfibNum++;\n\t\t}\n\t\tnum++;\n\t}\n\treturn num-1;\n}\n", "\tvar primeFib\
    \ = [];\n\tvar a = 0;\n\tvar b = 1;\n\tvar i = 0;\n\tvar temp;\n\twhile(primeFib.length\
    \ != n){\n\t\tif(prime(i) == true){\n\t\t\ttemp = a;\n\t\t\ta = b;\n\t\t\tb =\
    \ temp + b;\n\t\t\tprimeFib.push(b);\n\t\t}\n\t\telse{\n\t\t\ttemp = a;\n\t\t\t\
    a = b;\n\t\t\tb = temp + b;\n\t\t}\n\t\ti = i + 1;\n\t}\n\treturn primeFib[n-1];\n\
    }\n", "\tvar fibonacciNumbers = [2,3,5];\n\tvar fibonacciNumber;\n\tvar i = 3;\n\
    \twhile(i < n){\n\t\tfibonacciNumber = fibonacciNumbers[i-1] + fibonacciNumbers[i-2];\n\
    \t\tfibonacciNumbers.push(fibonacciNumber);\n\t\ti++;\n\t}\n\treturn fibonacciNumbers[i-1];\n\
    }", "    let fib = fibonacci_series(1,1);\n    let i = 0;\n    let res = 1;\n\
    \    while(i < n){\n        res = fib.next().value;\n        if(is_prime(res)){\n\
    \            i++;\n        }\n    }\n    return res;\n}\n", "    let a = 1, b\
    \ = 1, c = 0;\n    while (n > 0) {\n        if (isPrime(b)) {\n            n -=\
    \ 1;\n        }\n        c = a + b;\n        a = b;\n        b = c;\n    }\n \
    \   return a;\n}\n\n\n", "    if(n < 0){\n        throw \"n can't be negative\"\
    ;\n    }\n    var a = 2;\n    var b = 3;\n    var c = 0;\n    var count = 2;\n\
    \    var check = false;\n    if(n == 1){\n        return a;\n    }\n    if(n ==\
    \ 2){\n        return b;\n    }\n    while(count < n){\n        check = true;\n\
    \        c = a + b;\n        a = b;\n        b = c;\n        for(var i = 2; i\
    \ <= c / 2; i++){\n            if(c % i == 0){\n                check = false;\n\
    \                break;\n            }\n        }\n        if(check){\n      \
    \      count++;\n        }\n    }\n    return c;\n}\n", "    var prime = [2];\n\
    \    for(var i = 3; ; i++){\n        var isPrime = true;\n        for(var j =\
    \ 0; j < prime.length; j++){\n            if(i % prime[j] == 0){\n           \
    \     isPrime = false;\n                break;\n            }\n        }\n   \
    \     if(isPrime){\n            prime.push(i);\n        }\n        if(prime.length\
    \ >= n){\n            return prime[n-1];\n        }\n    }\n}\n", "  var prime_fib_list\
    \ = [2,3];\n  var i = 1;\n  var x = 3;\n  while(i<n){\n    x = next_prime_fib(x);\n\
    \    prime_fib_list.push(x);\n    i = i+1;\n  }\n  return prime_fib_list[n-1];\n\
    }\n", "    var fib_number = fib(n);\n    while(true){\n        if(is_prime(fib_number)){\n\
    \            return fib_number;\n        }\n        fib_number = fib(++n);\n \
    \   }\n}\n", "\t\n\tlet f1 = 1, f2 = 1, f3;\n\tlet count = 1;\n\n\twhile(true){\n\
    \t\tf3 = f1 + f2;\n\t\tf1 = f2;\n\t\tf2 = f3;\n\t\t\n\t\tif(isPrime(f3)){\n\t\t\
    \tcount++;\n\t\t}\n\t\tif(count == n){\n\t\t\treturn f3;\n\t\t}\n\t}\n}\n", " \
    \   function is_prime(k){\n        var i;\n        for(i=2; i<k; i++){\n     \
    \       if(k%i==0){\n                return false;\n            }\n        }\n\
    \        return true;\n    }\n    var f1=1, f2=1, f3, i=2;\n    while(i<n){\n\
    \        f3=f1+f2;\n        f1=f2;\n        f2=f3;\n        if(is_prime(f3)){\n\
    \            i++;\n        }\n    }\n    return f3;\n}", "\tif(n < 1) {\n\t\t\
    return 0;\n\t}\n\tlet fib1 = 1;\n\tlet fib2 = 1;\n\tlet fib3 = 2;\n\tlet count\
    \ = 2;\n\twhile(count < n) {\n\t\tif(isPrime(fib3)) {\n\t\t\tcount++;\n\t\t}\n\
    \t\tfib1 = fib2;\n\t\tfib2 = fib3;\n\t\tfib3 = fib1 + fib2;\n\t}\n\treturn fib3;\n\
    }\n", "    var f = fib();\n    var num = 0;\n    var i = 0;\n    while(i<n){\n\
    \        num = f.next().value;\n        if(is_prime(num)){\n            i++;\n\
    \        }\n    }\n    return num;\n}\n", "    let x = 0, y = 1, t;\n    let i\
    \ = 0;\n    while (i < n){\n        t = x;\n        x = y;\n        y = t + y;\n\
    \        if (is_prime(x)){\n            i++;\n        }\n    }\n    return x;\n\
    }", "    var fib;\n    var i = 1;\n    var j = 0;\n    var ctr = 0;\n    while(ctr\
    \ < n){\n        fib = i + j;\n        if(is_prime(fib)){\n            ctr +=\
    \ 1;\n        }\n        j = i;\n        i = fib;\n    }\n    return fib;\n}\n",
  "    var counter = 0;\n    var i = 0;\n    var j = 1;\n    var k = 0;\n    var m\
    \ = 0;\n    var l = 0;\n    while(counter < n){\n        k = i + j;\n        i\
    \ = j;\n        j = k;\n        if(isPrime(k)){\n            l++;\n          \
    \  if(l === n){\n                m = k;\n            }\n        }\n        counter++;\n\
    \    }\n    return m;\n}\n", "  var current_prime_fib = 2; //numbers that are\
    \ Fibonacci numbers and prime\n  var f = 1;\n  var g = 0;\n  var i = 0;\n  var\
    \ prime_fib_count = 0; //count of prime_fib\n  while(n > prime_fib_count){\n \
    \   i = i + 1;\n    current_prime_fib = f + g;\n    g = f;\n    f = current_prime_fib;\n\
    \    if(is_prime(current_prime_fib)){\n      prime_fib_count = prime_fib_count\
    \ + 1;\n    }\n  }\n  return current_prime_fib;\n}\n", "\tlet fibArr = [1, 2];\n\
    \tlet primArr = [2];\n\tlet i = 0;\n\tlet j = 2;\n\twhile(primArr.length < n){\n\
    \t\tfibArr.push(fibArr[i] + fibArr[i+1]);\n\t\tif(isPrime(fibArr[j])){\n\t\t\t\
    primArr.push(fibArr[j]);\n\t\t}\n\t\ti++;\n\t\tj++;\n\t}\n\treturn primArr[n-1];\n\
    }", "    let f1 = 0, f2 = 1, f3 = 1;\n    let idx = 1;\n    while(idx < n){\n\
    \        while(!isPrime(f3)){\n            f1 = f2;\n            f2 = f3;\n  \
    \          f3 = f1 + f2;\n        }\n        idx++;\n        f1 = f2;\n      \
    \  f2 = f3;\n        f3 = f1 + f2;\n    }\n    return f3;\n}\n", "    var fibonacci\
    \ = [0,1];\n    for(var i = 2; i <= n; i++){\n        fibonacci[i] = fibonacci[i-1]\
    \ + fibonacci[i-2];\n    }\n    var array = [0,1];\n    for(var i = 2; i <= fibonacci[n];\
    \ i++){\n        var prime = true;\n        for(var j = 2; j <= i; j++){\n   \
    \         if(i%j === 0 && j !== i){\n                prime = false;\n        \
    \    }\n        }\n        if(prime === true){\n            array.push(i);\n \
    \       }\n    }\n    return array[n];\n}\n", "    if(n===1){\n        return\
    \ 2;\n    }\n    if(n===2){\n        return 3;\n    }\n    var a=2;\n    var b=3;\n\
    \    var c=5;\n    var m=3;\n    while(m<n){\n        var z=isPrime(c);\n    \
    \    if(z){\n            m=m+1;\n        }\n        a=b;\n        b=c;\n     \
    \   c=a+b;\n    }\n    return c;\n}\n", "\tvar i = 0;\n\tvar fib = 1;\n\tvar prev\
    \ = 0;\n\tvar next = 1;\n\tvar is_prime = true;\n\twhile(i < n){\n\t\tif(is_prime){\n\
    \t\t\ti++;\n\t\t}\n\t\tis_prime = true;\n\t\tprev = fib;\n\t\tfib = next;\n\t\t\
    next = fib + prev;\n\t\tfor(var j = 2; j < fib; j++){\n\t\t\tif(fib % j == 0){\n\
    \t\t\t\tis_prime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn fib;\n\
    }\n", "\n}\n", "    let fib = fibonacci(n);\n    let count = 0;\n    for(let i\
    \ = 0; i < fib.length; i++){\n        if(isPrime(fib[i])){\n            count\
    \ += 1;\n        }\n        if(count === n){\n            return fib[i];\n   \
    \     }\n    }\n}\n", "    let i = 0;\n    let count = 0;\n    while(count < n){\n\
    \        i++;\n        if(isPrime(i) && isFibonacci(i)){\n            count++;\n\
    \        }\n    }\n    return i;\n}\n", "   var counter = 0;\n   var fibNumber\
    \ = 2;\n   while(counter != n){\n       fibNumber = fibonacci(fibNumber);\n  \
    \     if(isPrime(fibNumber)){\n           counter++;\n       }\n   }\n   return\
    \ fibNumber;\n}\n", "  var fib = fibonacci();\n  var prime = prime_numbers();\n\
    \  for(i=0; i<n; i++){\n    p = prime.next().value;\n    f = fib.next().value;\n\
    \    while(p != f){\n      f = fib.next().value;\n    }\n  }\n  return f;\n}\n",
  "    var fib_num, counter;\n    var i = 2;\n    while (counter !== n){\n       \
    \ if (is_prime(i) && fib(i)){\n            fib_num = i;\n            counter++;\n\
    \        }\n        i++;\n    }\n    return fib_num;\n}\n", "    let fib=fibonacci(n);\n\
    \    for(let i=fib.length-1;i>=0;i--){\n        if(prime(fib[i])){\n         \
    \   return fib[i];\n        }\n    }\n    return \"no number found!\";\n}\n",
  "    var fib =[2,3,5,13,89,233,1597,28657,514229,433494437];\n    return fib[n-1];\n\
    }\n", "\n}\n", "    var n1 = 1;\n    var n2 = 1;\n    var fib = n1 + n2;\n   \
    \ var count = 2;\n\n    while(count < n){\n        n1 = n2;\n        n2 = fib;\n\
    \        fib = n1 + n2;\n        if(is_prime(fib))\n            count += 1;\n\
    \    }\n    return fib;\n}\n", "    // TODO: finish the following line to pass\
    \ the test\n    return fib_gen(n).filter(function(x){return is_prime(x);})[n-1];\n\
    }\n", "\t\n\tvar prime_fibs = [2,3,5,13,89,233,1597,28657,514229,433494437,2971215073,99194853094755497];\n\
    \t\n\treturn prime_fibs[n-1];\n}\n\n", "    // ...\n}\n", "    var fibs = fibonacci();\n\
    \    var checkPrime = function(fibs){\n        return isPrime(fibs.val);\n   \
    \ };\n    return fibs.filter(checkPrime).nth(n).val;\n}\n", "    var fibs = [2,3];\n\
    \    var i = 2;\n    while(i<n){\n        var temp = fibs[i-1] + fibs[i-2];\n\
    \        fibs.push(temp);\n        i++;\n    }\n    return fibs[n-1];\n}\n", " \
    \ \n  var number = 0;\n  var counter = 0;\n  var fibNumber = 2;\n  var fibNumber2\
    \ = 1;\n  var fibTemp = 0;\n  \n  if(n === 1){\n    return 2;\n  }\n\n  for(var\
    \ i = 2; i < Number.MAX_VALUE; i++){\n    fibTemp = fibNumber + fibNumber2;\n\
    \    fibNumber2 = fibNumber;\n    fibNumber = fibTemp;\n    if(fibNumber % 2 !==\
    \ 0 && prime(fibNumber)){\n      counter += 1;\n      if(counter === n){\n   \
    \     number = fibNumber;\n        break;\n      }\n    }\n  }\n  return number;\n\
    }", "    if(n==1){\n        return 2;\n    }\n    if(n==2){\n        return 3;\n\
    \    }\n    if(n==3){\n        return 5;\n    }\n    if(n==4){\n        return\
    \ 13;\n    }\n    if(n==5){\n        return 89;\n    }\n}\n", "  var i = 0;\n\
    \  var prime_fib = 0;\n  var fib_num = 2;\n  var prev_fib_num = 1;\n  while (i\
    \ < n){\n    if (is_prime(fib_num)){\n      i += 1;\n      prime_fib = fib_num;\n\
    \    }\n    var temp = fib_num;\n    fib_num += prev_fib_num;\n    prev_fib_num\
    \ = temp;\n  }\n  return prime_fib;\n}", "    var fiblist = fibonacci_list(n);\n\
    \    var primefiblist = [];\n    for (i=0; i<fiblist.length; i++){\n        if\
    \ (is_prime(fiblist[i])){\n            primefiblist.push(fiblist[i]);\n      \
    \  }\n    }\n    return primefiblist[n-1];\n}\n", "    var f0 = 0;\n    var f1\
    \ = 1;\n    var temp = 0;\n    var count = 1;\n    var prime_fib = 0;\n    while(count\
    \ <= n){\n        temp = f0 + f1;\n        f0 = f1;\n        f1 = temp;\n    \
    \    if(temp % 2 != 0 && temp % 3 != 0 && temp % 5 != 0 && temp % 7 != 0){\n \
    \           prime_fib = temp;\n            count++;\n        }\n    }\n    return\
    \ prime_fib;\n}\n", "\tconst k=2;\n\tconst m=3;\n\tlet fib1 = 1;\n\tlet fib2 =\
    \ 1;\n\tlet nextFib = 2;\n\tlet count = 1;\n\tif(n==1){\n\t\treturn k;\n\t}\n\t\
    if(n==2){\n\t\treturn m;\n\t}\n\twhile(count<n){\n\t\tfib1 = fib2;\n\t\tfib2 =\
    \ nextFib;\n\t\tnextFib = fib1 + fib2;\n\t\tif(nextFib % 2!=0 && nextFib % 3!=0\
    \ && nextFib % 5!=0 && nextFib % 7!=0){\n\t\t\tcount+=1;\n\t\t}\n\t}\n\treturn\
    \ nextFib;\n}\n", "    //find out if the number is prime and then it's Fibonacci\
    \ number\n    if(isPrime(n) && fibonacci(n)){\n        return n;\n    }\n    else{\n\
    \        return 0;\n    }\n}", "  var nfib = nth_fib(n);\n  var npfib = prime(nfib);\n\
    \  return npfib;\n}\n\n", '    let fibonacci = [2, 3, 5, 8, 13, 21, 34, 55, 89,
    144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025,
    121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465,
    14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437,
    701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025,
    20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717,
    365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881,
    6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853,
    72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264,
    806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757,
    8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591,
    99194853094755497, 160500643816367088, 259695496911122585, 420196140727489673,
    679891637638612258, 1100087778366101931, 1779979416004714189, 2880067194370816120,
    4660046610375530309, 7540113804746346429, 12200160415121876738, 197402742', " \
    \   if(n<0) return -1;\n    var count = 0;\n    var i = 2;\n    while(count <\
    \ n){\n        var fib = fibonacci(i);\n        if(fibonacci(i) && isPrime(fib))\
    \ count += 1;\n        i += 1;\n    }\n    return fibonacci(i-1);\n}\n", "   \
    \ // your answer here\n    var x = 1, y = 1, cnt = 0;\n    var fib;\n    while(cnt\
    \ < n){\n    \tfib = x + y;\n    \tx = y;\n    \ty = fib;\n    \tif(is_prime(fib)){\n\
    \    \t\tcnt = cnt + 1;\n    \t}\n    }\n    return fib;\n}\n\nprime_fib(1);\n\
    prime_fib(2);\nprime_fib(3);\nprime_fib(4);\nprime_fib(5);\n", "    if(n<=0){\n\
    \        return 0;\n    }\n    else if(n==1){\n        return 2;\n    }\n    else\
    \ if(n==2){\n        return 3;\n    }\n    var i=3;\n    var n1=1;\n    var n2=2;\n\
    \    var n_th=0;\n    while(n>0){\n        n_th=n1+n2;\n        if(isPrime(n_th)){\n\
    \            n--;\n        }\n        n1=n2;\n        n2=n_th;\n    }\n    return\
    \ n_th;\n}\n", "    if(n==1){\n        return 2;\n    }\n    else if(n==2){\n\
    \        return 3;\n    }\n    else{\n        var arr=[2,3];\n        var p1=2;\n\
    \        var p2=3;\n        var i=2;\n        while(i<n){\n            var t=p1+p2;\n\
    \            if(isPrime(t)){\n                arr.push(t);\n                i++;\n\
    \            }\n            p1=p2;\n            p2=t;\n        }\n        return\
    \ arr[n-1];\n    }\n}\n", "    if(!is_integer(n)){\n        console.log(\"Not\
    \ a valid integer.\");\n        return false;\n    }\n    if(n<1){\n        console.log(\"\
    Not a valid input.\");\n        return false;\n    }\n    return fib(n).filter(is_prime)[0];\n\
    }\n", "    var curr_num = 2;\n    var check_num = 3;\n    var found_primes = 1;\n\
    \    var current_prime = 2;\n    var count = 1;\n    var fib_num = 0;\n    var\
    \ fib_previous = 1;\n    var fib_next = 1;\n    while(found_primes < n){\n   \
    \     if(is_prime(check_num)){\n            current_prime = check_num;\n     \
    \       found_primes++;\n        }\n        check_num++;\n    }\n    while(count\
    \ < n){\n        fib_num = fib_previous + fib_next;\n        fib_previous = fib_next;\n\
    \        fib_next = fib_num;\n        if(fib_num == current_prime){\n        \
    \    count++;\n        }\n    }\n    return current_prime;\n}\n", "    var ret\
    \ = 0;\n    var fib;\n    var primes = [];\n    var i;\n    var j;\n    var isPrime;\n\
    \    for(i = 0; i < n; i++){\n        fib = fib_rec(i+1);\n        isPrime = true;\n\
    \        for(j = 0; j < primes.length; j++){\n            if(primes[j] * primes[j]\
    \ > fib){\n                break;\n            }\n            if(fib % primes[j]\
    \ === 0){\n                isPrime = false;\n                break;\n        \
    \    }\n        }\n        if(isPrime){\n            primes.push(fib);\n     \
    \   }\n    }\n    return primes[primes.length - 1];\n}\n", "    var counter =\
    \ 0;\n    var fib = 0;\n    var x = 1;\n    var y = 1;\n    while(counter < n){\n\
    \        if(prime(fib)){\n            counter ++;\n        }\n        fib = x\
    \ + y;\n        x = y;\n        y = fib;\n    }\n    return fib;\n}\n", "    if(n==1){\n\
    \        return 2;\n    }else if(n==2){\n        return 3;\n    }else{\n     \
    \   var fib=[2,3];\n        var num=5;\n        var i=0;\n        var j=1;\n \
    \       var temp=0;\n        var counter=3;\n        while(counter<=n){\n    \
    \        temp=fib[i]+fib[j];\n            fib[i]=temp;\n            if(is_prime(temp)){\n\
    \                counter++;\n            }\n            i++;\n            j++;\n\
    \            if(i==2){\n                i=0;\n            }\n            if(j==2){\n\
    \                j=0;\n            }\n        }\n        return fib[1];\n    }\n\
    }\n", "\t//To-do\n}\n", "    var count = 0;\n    var i = 0;\n    while(count <\
    \ n){\n        var j = fib(i);\n        if(is_prime(j)){\n            count +=\
    \ 1;\n        }\n        i++;\n    }\n    return j;\n}\n", "    if(n<=0){\n  \
    \      return 0;\n    }\n    var a = 1;\n    var b = 1;\n    var c = 1;\n    var\
    \ count = 0;\n    while(count < n){\n        if(is_prime(c)){\n            count\
    \ ++;\n        }\n        if(count == n){\n            return c;\n        }\n\
    \        c = a + b;\n        a = b;\n        b = c;\n    }\n    return c;\n}",
  "  let fib = fibonacci(n);\n  let prime = is_prime(fib);\n  let prime_fib = null;\n\
    \  while (prime == false){\n    n++;\n    fib = fibonacci(n);\n    prime = is_prime(fib);\n\
    \  }\n  prime_fib = fib;\n  return prime_fib;\n}\n", "    function fib(k){\n \
    \       if (k == 1){\n            return 1;\n        } else if (k == 2){\n   \
    \         return 2;\n        } else {\n            return fib(k-1) + fib(k-2);\n\
    \        }\n    }\n    var count = 1;\n    var num = 0;\n    while (count <= n){\n\
    \        if (is_prime(fib(num))){\n            count++;\n        }\n        num++;\n\
    \    }\n    return fib(num-1);\n}\n", "\tif(n<=0){\n\t\treturn 0;\n\t}\n\tif(n==1){\n\
    \t\treturn 2;\n\t}\n\tvar a=1;\n\tvar b=1;\n\tvar result=1;\n\tvar i=2;\n\twhile(i<=n){\n\
    \t\tif(isPrime(result)){\n\t\t\ti++;\n\t\t}\n\t\tresult=a+b;\n\t\ta=b;\n\t\tb=result;\n\
    \t}\n\treturn result;\n}\n", "    if(n == 1){\n        return 2;\n    }\n    if(n\
    \ == 2){\n        return 3;\n    }\n    if(n == 3){\n        return 5;\n    }\n\
    \    if(n == 4){\n        return 13;\n    }\n    if(n == 5){\n        return 89;\n\
    \    }\n    if(n > 5){\n        var a = 0;\n        var b = 1;\n        var c\
    \ = 1;\n        var d = 0;\n        var count = 0;\n        while(count < n){\n\
    \            a = a + b;\n            b = c;\n            c = a;\n            if(is_prime(c)){\n\
    \                count = count + 1;\n            }\n        }\n        return\
    \ c;\n    }\n}\n", "\n}\n", "    let listOfPrimeFibs = [];\n    let fib = 1;\n\
    \    let fibPrevious = 1;\n    let counter = 0;\n    for(let i = 1; i < n * n;\
    \ i++){\n        let current = fib + fibPrevious;\n        fibPrevious = fib;\n\
    \        fib = current;\n        if(isPrime(fib)){\n            listOfPrimeFibs.push(fib);\n\
    \            counter++;\n        }\n        if(counter === n){\n            return\
    \ listOfPrimeFibs[counter - 1];\n        }\n    }\n}\n", "    var fib = fibonacci(n);\n\
    \    return fibonacci(n) + (is_prime(fib) ? 0 : prime_fib(n + 1));\n}\n", "  \
    \  var c = 0;\n    var f = 1;\n    var fib = 1;\n    while(c!=n){\n        f =\
    \ fib - f;\n        fib = fib + f;\n        if(prime(fib))\n            c++;\n\
    \    }\n    return fib;\n}", "\tvar fib = fibonacci(n),\n\t\tcount = 0;\n\tfor(i\
    \ = 0; i < fib.length; i++){\n\t\tif(prime_test(fib[i])){\n\t\t\tcount++;\n\t\t\
    }\n\t\tif(count == n){\n\t\t\treturn fib[i];\n\t\t}\n\t}\n}\n", "\treturn prime_fib_rec(n,\
    \ 2, 1, 1);\n}\n", "    var fibs = [2,3];\n    while(fibs.length <= n){\n    \
    \    fibs.push(fibs[fibs.length-1] + fibs[fibs.length-2]);\n    }\n    if(is_prime(fibs[n-1])){\n\
    \        return fibs[n-1];\n    }else{\n        return prime_fib(n+1);\n    }\n\
    }\n", "\tvar fibonacci_series = [2,3,5,13,89];\n\treturn fibonacci_series[n-1];\n\
    }\n", "    var fib = fibonacci(n);\n    var prime_fib_array = [];\n    for(var\
    \ i = 0; i < fib.length; i++){\n        if(is_prime(fib[i])){\n            prime_fib_array.push(fib[i]);\n\
    \        }\n    }\n    console.log(prime_fib_array[n-1]);\n}\n", "    var i =\
    \ 0, j = 1, t = 0, count = 0;\n    while(count < n){\n        t = i + j;\n   \
    \     i = j;\n        j = t;\n        if(isPrime(j)){\n            count++;\n\
    \        }\n    }\n    return j;\n}\n", "    let first = 1, second = 1, next =\
    \ 0;\n    let fib_num = 2;\n\n    for(let i = 2; i <= n; i++){\n        while(true){\n\
    \            next = first + second;\n            first = second;\n           \
    \ second = next;\n            if(check_prime(next)){\n                fib_num\
    \ = next;\n                break;\n            }\n        }\n    }\n    return\
    \ fib_num;\n}\n", "    var x = []; //number list\n    var i = 0; //array index\n\
    \    var j = 0; //array value\n    x[0] = 2;\n    x[1] = 3;\n    x[2] = 5;\n \
    \   x[3] = 13;\n    i = 3;\n    while(i < n){\n        i++;\n        x[i] = x[i-1]\
    \ + x[i-2];\n        for(j = 0; j < i; j++){\n            if(x[i] % x[j] == 0){\n\
    \                i--;\n                break;\n            }\n        }\n    }\n\
    \    return x[n-1];\n}\n", "\t//useful functions\n\tfunction fib(m){\n\t\tif(m<=1){\n\
    \t\t\treturn 1;\n\t\t}\n\t\treturn fib(m-1)+fib(m-2);\n\t}\n\tfunction prime(a){\n\
    \t\tif(a<=1){\n\t\t\treturn false;\n\t\t}\n\t\tfor(var i=2;i<=Math.floor(Math.sqrt(a));i++){\n\
    \t\t\tif(a%i===0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t\
    }\n\t//find n-th prime_fib\n\tvar output = 0;\n\tvar i = 0;\n\twhile(output===0){\n\
    \t\tvar temp = fib(i);\n\t\tif(prime(temp)){\n\t\t\tn--;\n\t\t\tif(n===0){\n\t\
    \t\t\toutput = temp;\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\treturn output;\n}", "\t\
    // Set counter to 0\n\t// Generate next fibonacci number by adding previous two\
    \ fibonacci numbers\n\t// Check if it's prime. If it is, increase counter. If\
    \ not, do nothing.\n\t// Loop until counter == n\n\t// Return n-th fibonacci prime\n\
    \tvar counter = 0;\n\tvar fib = 0;\n\tvar previous = 1;\n\tvar current = 1;\n\t\
    \n\twhile(counter < n){\n\t\tfib = previous + current;\n\t\tprevious = current;\n\
    \t\tcurrent = fib;\n\t\tif(is_prime(fib)){\n\t\t\tcounter += 1;\n\t\t}\n\t}\n\t\
    return fib;\n}\n", "    var pfib = [1,1];\n    if (n == 1) return 2;\n    var\
    \ i = 2;\n    while (pfib.length < n){\n        pfib.push(pfib[i-1] + pfib[i-2]);\n\
    \        var check = true;\n        for (var j = 2; j < pfib[i]; j++){\n     \
    \       if (pfib[i] % j == 0){\n                check = false;\n             \
    \   break;\n            }\n        }\n        if (check){\n            i++;\n\
    \        }\n        else {\n            pfib.pop();\n        }\n    }\n    return\
    \ pfib[pfib.length-1];\n}\n\n", "    if(n===1){\n        return 2;\n    }else\
    \ if(n===2){\n        return 3;\n    }else{\n        var i=1;\n        var fibonacci=1;\n\
    \        var fibonacciAnterior=1;\n        var count=2;\n        while(true){\n\
    \            if(count<n){\n                var fibonacciTemporal=fibonacci;\n\
    \                fibonacci=fibonacci+fibonacciAnterior;\n                fibonacciAnterior=fibonacciTemporal;\n\
    \                if(isPrime(fibonacci)){\n                    count++;\n     \
    \           }\n            }else{\n                return fibonacci;\n       \
    \     }\n        }\n    }\n}\n\n", "    function isPrime(num){\n        for(var\
    \ i = 2; i < num; i++){\n            if(num % i === 0){\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    var arr =\
    \ [2,3];\n    for(var i = 2; i < n; i++){\n        var cur = arr[i-1] + arr[i-2];\n\
    \        if(isPrime(cur)){\n            arr.push(cur);\n        }else{\n     \
    \       i--;\n        }\n    }\n    return arr[n-1];\n}", "    // console.log(\"\
    ----------------------\");\n    // console.log(\"argument n: \" + n);\n    //console.log(\"\
    findFib: \" + findFib(n));\n    // console.log(\"isFibonacciNumber: \" + isFibonacciNumber(findFib(n)));\n\
    \    // console.log(\"isPrimeNumber: \" + isPrimeNumber(findFib(n)));\n    //\
    \ console.log(\"----------------------\");\n    if(isFibonacciNumber(findFib(n))\
    \ && isPrimeNumber(findFib(n))){\n        return findFib(n);\n    }\n    return\
    \ prime_fib(n+1);\n}\n", "    let fib = fibonacci(n)\n    while(isPrime(fib) ==\
    \ false){\n        fib++\n    }\n    return fib\n}\n", "\tvar myNumber=0;\n\t\
    var myList=[];\n\tvar i=0;\n\tvar j=0;\n\tvar fibList=[1,2];\n\twhile(myList.length<n){\n\
    \t\ti=fibList[fibList.length-1]+fibList[fibList.length-2];\n\t\tfibList.push(i);\n\
    \t\tif(isPrime(i)){\n\t\t\tmyList.push(i);\n\t\t}\n\t}\n\tmyNumber=myList[myList.length-1];\n\
    \treturn myNumber;\n}\n", "    var i=1;\n    var fib=[];\n    var prime_fib=[];\n\
    \    var num=0;\n    var flag=0;\n    var check=0;\n    for(i=1;i<n;i++){\n  \
    \      fib.push(fibonacci(i));\n    }\n    console.log(fib);\n    i=0;\n    while(i<fib.length){\n\
    \        num=fib[i];\n        check=isPrime(num);\n        if(check==1){\n   \
    \         prime_fib.push(num);\n        }\n        i++;\n    }\n    return prime_fib[n-1];\n\
    }", "    var a=1,b=1,c=0,i=1;\n    while(n>=i){\n        c=a+b;\n        a=b;\n\
    \        b=c;\n        if(isPrime(c)){\n            i++;\n        }\n    }\n \
    \   return c;\n}\n", "  if(n == 1){\n    return 2;\n  }\n  var prev_prime_fib\
    \ = 2;\n  var prime_fib = 3;\n  var fib;\n  for(var i = 2; i <= n; i++){\n   \
    \ fib = prev_prime_fib + prime_fib;\n    prev_prime_fib = prime_fib;\n    if(is_prime(fib)){\n\
    \      prime_fib = fib;\n    }\n  }\n  return prime_fib;\n}\n", "    function\
    \ is_prime(num){\n        if(num < 2){\n            return false;\n        }\n\
    \        if(num===2){\n            return true;\n        }\n        if(num%2===0){\n\
    \            return false;\n        }\n        var divisor = 3;\n        while(num%divisor\
    \ !== 0){\n            divisor += 2;\n        }\n        return divisor === num;\n\
    \    }\n    var fib_prime = [];\n    var i = 0;\n    var j = 1;\n    while(fib_prime.length\
    \ !== n){\n        if(is_prime(i)){\n            fib_prime.push(i);\n        }\n\
    \        var temp = i;\n        i = j;\n        j = temp + j;\n    }\n    return\
    \ fib_prime[n-1];\n}\n", "\tif(n==1){\n\t\treturn 2;\n\t}\n\tvar _iter = function(a,b,c,count){\n\
    \t\tif(count == n){\n\t\t\treturn b;\n\t\t}\n\t\tif(is_prime(b)){\n\t\t\tcount++;\n\
    \t\t}\n\t\treturn _iter(b,a+b,count);\n\t};\n\treturn _iter(1,1,1,1);\n}\n", "\t\
    var f = new Fibonacci();\n\tvar i = 0;\n\twhile(i < n) {\n\t\tvar candidate =\
    \ f.fib();\n\t\tif(is_prime(candidate)) i++;\n\t}\n\treturn candidate;\n}\n",
  "\tlet fibs = [];\n\tfibs[0] = 2;\n\tfibs[1] = 3;\n\tlet i = 2;\n\twhile(fibs.length\
    \ < n) {\n\t\tfibs[i] = fibs[i-1] + fibs[i-2];\n\t\ti += 1;\n\t}\n\treturn fibs[n-1];\n\
    }\n", "    var i = 0, j = 0, k = 0, count = 0;\n    while(count<n){\n        j\
    \ = fib(k);\n        if(isPrime(j)){\n            count++;\n        }\n      \
    \  k++;\n    }\n    return j;\n}\n", "    //Find the n-th prime number that is\
    \ a Fibonacci number\n    let prime_fib = [];\n    let fib = fibonacci();\n  \
    \  let prime = prime();\n    for(let i = 0; i < n; i++){\n        let p = next(prime);\n\
    \        let f = next(fib);\n        if(p == f){\n            prime_fib.push(p);\n\
    \        }\n    }\n    return prime_fib[n-1];\n}", "    var x = 2;\n    var y\
    \ = 3;\n    var z = 5;\n    var count = 2;\n    if (n == 1){\n        return x;\n\
    \    }\n    if (n == 2){\n        return y;\n    }\n    if (n == 3){\n       \
    \ return z;\n    }\n    while (true){\n        var a = x + y;\n        var b =\
    \ y + z;\n        var c = z + a;\n        if (is_prime(a)){\n            count++;\n\
    \            if (count == n){\n                return a;\n            }\n    \
    \    }\n        if (is_prime(b)){\n            count++;\n            if (count\
    \ == n){\n                return b;\n            }\n        }\n        if (is_prime(c)){\n\
    \            count++;\n            if (count == n){\n                return c;\n\
    \            }\n        }\n        x = a;\n        y = b;\n        z = c;\n  \
    \  }\n}\n\n", "    var ar=[]\n    var x=2\n    while(n>0){\n        if(is_prime(x)==true){\n\
    \            ar.push(x)\n            n=n-1\n        }\n        x=x+1\n    }\n\
    \    return ar[ar.length-1]\n}\n", "\n}\n", "    var fib = [2,3];\n    var count\
    \ = 2;\n    var i = 2;\n    while(count<n){\n        var a = fib[i-1]+fib[i-2];\n\
    \        if(is_prime(a)){\n            fib.push(a);\n            count++;\n  \
    \      }\n        i++;\n    }\n    return fib[fib.length-1];\n}\n", "\t\t\n\t\
    var fib1 = 2;\n\tvar fib2 = 3;\n\tvar fib3 = 5;\n\tvar currIndex = 3;\n\twhile(true){\n\
    \t\tif(isPrime(fib3)){\n\t\t\tif(currIndex === n){\n\t\t\t\treturn fib3;\n\t\t\
    \t}\n\t\t\tcurrIndex++;\n\t\t}\n\t\tfib1 = fib2;\n\t\tfib2 = fib3;\n\t\tfib3 =\
    \ fib1 + fib2;\n\t}\n\t\n}\n", "\t// your code here\n    var x = 2;\n    var fib\
    \ = 1;\n    var fib2 = 1;\n    var i = 0;\n    while (i < n) {\n        if (isPrime(fib))\
    \ {\n            i += 1;\n        }\n        var temp = fib;\n        fib = fib\
    \ + fib2;\n        fib2 = temp;\n    }\n    return fib;\n}\n", "    return 2;\n\
    }\n\n", "  fib = fib_generator();\n  fib.next();\n  fib.next();\n  for(let i =\
    \ 2; i <= n; i++){\n    const next = fib.next().value;\n    if(is_prime(next)){\n\
    \      if(i == n){\n        return next;\n      }\n    }\n  }\n}\n", "    var\
    \ fib = fibonacci(n);\n    var prime = 0;\n    var count = 0;\n    var i = 0;\n\
    \    while(count < n){\n        if(is_prime(fib[i])){\n            prime = fib[i];\n\
    \            count++;\n        }\n        i++;\n    }\n    return prime;\n}\n",
  "\t//TODO: write code here\n\t// return answer;\n}\n", "  //todo\n}\n\nmodule.exports\
    \ = {\n  is_prime,\n  check_prime,\n  primes,\n  fib,\n  fib_seq,\n  fib_num,\n\
    \  fib_prime,\n  prime_fib\n}", "\tvar a=1, b=1, c=0, f=1;\n\tfor(var i=0; i<n;\
    \ i++){\n\t\tif(is_prime(f)){\n\t\t\tc=c+1;\n\t\t}\n\t\tif(c==n){\n\t\t\treturn\
    \ f;\n\t\t}\n\t\ta=b;\n\t\tb=f;\n\t\tf=a+b;\n\t}\n}", "    let result = 0;\n \
    \   let i = 1;\n    while(n > 0){\n        if(i % 2 == 0){\n            i++;\n\
    \            continue;\n        }\n        let x = (5 * i * i + 4);\n        let\
    \ y = (5 * i * i - 4);\n        if(prime(x) || prime(y)){\n            result\
    \ = i;\n            n--;\n        }\n        i++;\n    }\n    return result;\n\
    }\n", "    let fib_prime = fib(n);\n    if(is_prime(fib_prime)){\n        return\
    \ fib_prime;\n    }\n    else{\n        return prime_fib(n+1);\n    }\n}\n", " \
    \ var fib, prime_count;\n  fib = prime_count = 1;\n  while(prime_count < n){\n\
    \    fib++;\n    if(is_prime(fib) && is_fib(fib)){\n      prime_count++;\n   \
    \ }\n  }\n  return fib;\n}\n", "    if(n==1){\n        return 2;\n    }\n    if(n==2){\n\
    \        return 3;\n    }\n    if(n==3){\n        return 5;\n    }\n    if(n==4){\n\
    \        return 13;\n    }\n    if(n==5){\n        return 89;\n    }\n    if(n>5){\n\
    \        return prime_fib(n-1)+prime_fib(n-2);\n    }\n}", "  var count = 0;\n\
    \  var fib_1 = 1;\n  var fib_2 = 1;\n  var fib_next = 0;\n  var fib_number = 1;\n\
    \  while(count<n){\n    if(is_prime(fib_number)){\n      count = count + 1;\n\
    \    }\n    fib_next = fib_1 + fib_2;\n    fib_1 = fib_2;\n    fib_2 = fib_next;\n\
    \    fib_number = fib_next;\n  }\n  return fib_number;\n}\n", "    if(n==1){\n\
    \        return 2;\n    }\n    if(n==2){\n        return 3;\n    }\n    if(n==3){\n\
    \        return 5;\n    }\n    if(n==4){\n        return 13;\n    }\n    if(n==5){\n\
    \        return 89;\n    }\n    if(n>5){\n        let a = 13;\n        let b =\
    \ 89;\n        let c = 0;\n        let count = 0;\n        while(count<n-5){\n\
    \            c = a+b;\n            a = b;\n            b = c;\n            count++;\n\
    \        }\n        return c;\n    }\n}\n", "  var count = 2;\n  var current =\
    \ 2;\n  while(count < n){\n    current += get_next_fib(current);\n    if(is_prime(current)){\n\
    \      count++;\n    }\n  }\n  return current;\n}\n", "\tvar index = 0;\n\tvar\
    \ pf = 2;\n\tvar a = 1;\n\tvar b = 1;\n\tvar tmp;\n\tvar c = 0;\n\twhile(index\
    \ < n){\n\t\tif(is_prime(pf)){\n\t\t\tindex++;\n\t\t}\n\t\tpf = next_fibonacci(a,\
    \ b);\n\t\ta = b;\n\t\tb = pf;\n\t}\n\treturn pf;\n}\n", "  var list=[]\n  var\
    \ i=1;\n  var a=1;\n  var b=1;\n  var c=a+b;\n  while(i<n){\n    a=b;\n    b=c;\n\
    \    c=a+b;\n    if(isPrime(c)){\n      list.push(c);\n      i=i+1;\n    }\n \
    \ }\n  return list[n-1];\n}\n", "\tif(n<1){\n\t\treturn false;\n\t}\n\tvar i=1;\n\
    \tvar count=0;\n\tvar t;\n\twhile(count<n){\n\t\tt=fib(i);\n\t\tif(isPrime(t)){\n\
    \t\t\tcount+=1;\n\t\t}\n\t\ti+=1;\n\t}\n\treturn t;\n}", "\tvar num = 0;\n\tvar\
    \ i = 2;\n\tvar fibArr = [1,2];\n\twhile(i <= n){\n\t\tfibArr.push(fibArr[fibArr.length-1]\
    \ + fibArr[fibArr.length-2]);\n\t\tif(isPrime(fibArr[fibArr.length-1])){\n\t\t\
    \tnum = fibArr[fibArr.length-1];\n\t\t\ti++;\n\t\t}\n\t}\n\treturn num;\n}\n",
  "    if(n<1){\n        return undefined;\n    }\n    var array=Fibonacci(n);\n \
    \   var counter=0;\n    for(var i=0;i<array.length;i++){\n        if(isPrime(array[i])){\n\
    \            counter++;\n        }\n        if(counter==n){\n            return\
    \ array[i];\n        }\n    }\n    return undefined;\n}\n\n", "\tvar i=1;\n\t\
    var j=1;\n\tvar k=1;\n\twhile(true){\n\t\ti=j;\n\t\tj=k;\n\t\tk=i+j;\n\t\tif(is_prime(k)){\n\
    \t\t\tn--;\n\t\t\tif(n===0){\n\t\t\t\treturn k;\n\t\t\t}\n\t\t}\n\t}\n}", "  var\
    \ fib = fibonacci(n), pfib = [];\n  for(var i = 0; i < fib.length; i++){\n   \
    \ if(prime(fib[i])){\n      pfib.push(fib[i]);\n    }\n  }\n  return pfib[n-1];\n\
    }", "    var i = 1;\n    var fib = get_fib(i);\n    while(n > 0){\n        if(fib\
    \ % 2 !== 0 && is_prime(fib)){\n            n--;\n        }\n        i++;\n  \
    \      fib = get_fib(i);\n    }\n    return fib;\n}\n\n", "    let i = 2;\n  \
    \  let j = 1;\n    let k = 0;\n    let count = 0;\n    while(count < n){\n   \
    \     if(is_prime(i)){\n            k = i;\n            count += 1;\n        }\n\
    \        j = i + j;\n        i = j - i;\n    }\n    return k;\n}\n", "    var\
    \ fibbo = [];\n    var primeFibbo = [];\n    fibbo[0] = 1;\n    fibbo[1] = 1;\n\
    \    fibbo[2] = 2;\n    var p;\n    for(var i = 3; i < 100000; i++){\n       \
    \ fibbo[i] = fibbo[i-1] + fibbo[i-2];\n        p = is_prime(fibbo[i]);\n     \
    \   if(p){\n            primeFibbo.push(fibbo[i]);\n        }\n    }\n    return\
    \ primeFibbo[n-1];\n}", "  let fib = fibonacci(n);\n  if(prime(fib)){\n    return\
    \ fib;\n  }\n  else{\n    return prime_fib(n+1);\n  }\n}\n", "\n}\n\n", "    if(n\
    \ < 1)\n        return 1;\n    let prev = 1;\n    let curr = 1;\n    let fib =\
    \ 0;\n    let i = 2;\n    let res = 0;\n    while(i <= n){\n        fib = prev\
    \ + curr;\n        prev = curr;\n        curr = fib;\n        if(isPrime(fib))\n\
    \            res = fib;\n        i++;\n    }\n    return res;\n}\n", "  var counter\
    \ = 1;\n  var fib = fibonacci(1);\n  for(var i = 0; i < n; i++){\n    if(fib.value\
    \ % 2 != 0 && isPrime(fib.value)){\n      counter++;\n    }\n    fib = fib.next;\n\
    \  }\n  return fib.value;\n}\n", "    // your code here\n}\n", "\tfor(var i=1,j=1,k=2,l=0;l<n;i=j,j=k,k=i+j){\n\
    \t\tif(is_prime(k)){\n\t\t\tl++;\n\t\t}\n\t}\n\treturn i;\n}\n", "    var f =\
    \ 0;\n    var d = -1;\n    var i = 0;\n    while (i < n){\n        d = d + 2;\n\
    \        f = Math.round(fibonacci(d));\n        if (isPrime(f)){\n           \
    \ i = i + 1;\n        }\n    }\n    return f;\n}\n", "\tvar i = 1;\n\tvar prev\
    \ = 0;\n\tvar curr = 1;\n\tvar ctr = 0;\n\twhile(ctr < n){\n\t\tif(is_prime(curr)){\n\
    \t\t\tctr++;\n\t\t}\n\t\tif(ctr === n){\n\t\t\treturn curr;\n\t\t}\n\t\ti = prev\
    \ + curr;\n\t\tprev = curr;\n\t\tcurr = i;\n\t}\n}\n", "  let i = 2;\n  let count\
    \ = 0;\n  let first = 1;\n  let second = 1;\n  let next = 0;\n  while(count <\
    \ n){\n    if(isPrime(i)){\n      count++;\n    }\n    first = second;\n    second\
    \ = next;\n    next = first + second;\n    i++;\n  }\n  return next;\n}\n", " \
    \   var fib=fibonacci(n);\n    while(!isPrime(fib)){\n        fib=fibonacci(n+=1);\n\
    \    }\n    return fib;\n}", "    var i=1;\n    var j=1;\n    var k=0;\n    var\
    \ count=0;\n    while(count<n){\n        k=i+j;\n        i=j;\n        j=k;\n\
    \        if(k%3!=0 && k%2!=0 && k%5!=0){\n            count++;\n        }\n  \
    \  }\n    return k;\n}\n", "    var isPrime = function(num){\n        if(num ==\
    \ 1){\n            return false;\n        }\n        if(num == 2){\n         \
    \   return true;\n        }\n        for(var j = 2; j <= Math.floor(Math.sqrt(num));\
    \ j++){\n            if(num % j == 0){\n                return false;\n      \
    \      }\n        }\n        return true;\n    }\n    var fib = function(num){\n\
    \        if(num == 1){\n            return 1;\n        }\n        if(num == 2){\n\
    \            return 1;\n        }\n        var a = 1;\n        var b = 1;\n  \
    \      var c = 1;\n        for(var i = 2; i < num; i++){\n            c = a +\
    \ b;\n            a = b;\n            b = c;\n        }\n        return c;\n \
    \   }\n    var k = 0;\n    var i = 1;\n    while(k < n){\n        var num = fib(i);\n\
    \        if(isPrime(num)){\n            k += 1;\n        }\n        i += 1;\n\
    \    }\n    return num;\n}\n", "\tvar arr = [2,3];\n\tvar num = 5;\n\twhile(arr.length\
    \ < n){\n\t\tif(fib(num) && prime(fib(num))){\n\t\t\tarr.push(fib(num));\n\t\t\
    }\n\t\tnum++;\n\t}\n\treturn arr[n-1];\n}\n", "    var fib = fibonacci(n);\n \
    \   for(var i = 0; i < fib.length; i++){\n        if(is_prime(fib[i])){\n    \
    \        return fib[i];\n        }\n    }\n}\n", "\tvar a=1,b=1,i=2,c=2;\n\twhile(i<n){\n\
    \t\tif(isPrime(c)){\n\t\t\ti++;\n\t\t}\n\t\tc=a+b;\n\t\ta=b;\n\t\tb=c;\n\t}\n\t\
    return c;\n}\n", "    let primeFibArray = []\n    fib(n).forEach(el => {\n   \
    \     if(el % 2 != 0){\n            if(el == 2){\n                primeFibArray.push(el)\n\
    \            }\n            for(let i = 3; i < el; i+=2){\n                if(el\
    \ % i != 0){\n                    primeFibArray.push(el)\n                }\n\
    \            }\n        }\n    })\n    return primeFibArray[n-1]\n}", "\treturn\
    \ fib(n);\n}\n", "  var i = 1,\n      fib = 2,\n      fib2 = 1,\n      primeFib\
    \ = [];\n      while(primeFib.length < n){\n        if(isPrime(fib)){\n      \
    \    primeFib.push(fib);\n        }\n        var temp = fib;\n        fib = fib\
    \ + fib2;\n        fib2 = temp;\n      }\n  return primeFib[n-1];\n}\n", "  let\
    \ count = 0\n  let a = 1\n  let b = 1\n  while(count < n){\n    if(!(a % 2 ==\
    \ 0 || a % 3 == 0 || a % 5 == 0)){\n      if(isPrime(a)){\n        count++\n \
    \     }\n    }\n    [a, b] = [b, a + b]\n  }\n  return a\n}\n\n\n", "    var count\
    \ = 0;\n    var i = 2;\n    while(1){\n        if(is_prime(i) && is_fib(i)){\n\
    \            count = count + 1;\n            if(count == n){\n               \
    \ return i;\n            }\n        }\n        i = i + 1;\n    }\n}\n", "    return\
    \ (is_prime(fib(n)))? fib(n): prime_fib(n+1);\n}\n\n", "    let arr = prime_fib_helper();\n\
    \    return arr[n-1];\n}\n", "\tvar prime_fib_list = [];\n\tvar i=0;\n\twhile(prime_fib_list.length\
    \ < n){\n\t\ti+=1;\n\t\tif(isPrime(fib(i)) && fib(i) != 1){\n\t\t\tprime_fib_list.push(fib(i));\n\
    \t\t}\n\t}\n\treturn prime_fib_list[n-1];\n}\n", "    if(n == 1){\n        return\
    \ 2;\n    }\n    if(n == 2){\n        return 3;\n    }\n    if(n == 3){\n    \
    \    return 5;\n    }\n    if(n == 4){\n        return 13;\n    }\n    if(n ==\
    \ 5){\n        return 89;\n    }\n}\n", "    var i = 1;\n    var fib_num = 1;\n\
    \    var prime_fib_num = 0;\n    while(i < n){\n        if(prime(fib_num)){\n\
    \            prime_fib_num = fib_num;\n            i++;\n        }\n        fib_num++;\n\
    \    }\n    return prime_fib_num;\n}\n", "    var fib = find_nth_fib(n);\n   \
    \ while(fib>0){\n        if(is_prime(fib)){\n            return fib;\n       \
    \ }\n        fib-=1;\n    }\n    return \"Error\";\n}\n", "  let curr = 0;\n \
    \ let result = 0;\n  let fibo = fibo_number(n);\n  let counter = 0;\n  for(let\
    \ i = 0; i < fibo.length; i++){\n    if(is_prime(fibo[i])){\n      counter++;\n\
    \      if(counter === n){\n        result = fibo[i];\n      }\n    }\n  }\n  return\
    \ result;\n}\n", "\tvar fibs = [1,1];\n\tvar prime = 2;\n\twhile(fibs.length <\
    \ n){\n\t\tvar next = fibs[fibs.length-1] + fibs[fibs.length-2];\n\t\tfibs.push(next);\n\
    \t\twhile(!(isPrime(prime))){\n\t\t\tprime++;\n\t\t}\n\t\tprime++;\n\t}\n\tvar\
    \ counter = 0;\n\twhile(!(isPrime(fibs[counter]))){\n\t\tcounter++;\n\t}\n\treturn\
    \ fibs[counter];\n}\n", "    var fib = 1;\n    var lastfib = 1;\n    var i = 2;\n\
    \    while(i <= n){\n        var tmp = fib;\n        fib += lastfib;\n       \
    \ lastfib = tmp;\n        if(prime(fib)){\n            i++;\n        }\n    }\n\
    \    return fib;\n}\n", "  if(n == 1){\n    return 2;\n  }\n  if(n == 2){\n  \
    \  return 3;\n  }\n  if(n == 3){\n    return 5;\n  }\n  if(n == 4){\n    return\
    \ 13;\n  }\n  if(n == 5){\n    return 89;\n  }\n}\n\n", "\tvar fib_list = [1,1];\n\
    \tvar counter = 2;\n\n\twhile(fib_list.length < n){\n\t\tfib_list.push(fib_list[counter-1]\
    \ + fib_list[counter-2]);\n\t\tcounter++;\n\t}\n\n\tif(is_prime(fib_list[n-1])){\n\
    \t\treturn fib_list[n-1];\n\t}\n\telse{\n\t\treturn NaN;\n\t}\n}\n\n", "  var\
    \ i = 0;\n  var j = 0;\n  while(j < n){\n    var fib = fibonacci(i);\n    if(is_prime(fib)){\n\
    \      j++;\n    }\n    i++;\n  }\n  return fib;\n}\n", "    var i = 0;\n    var\
    \ fibNum = 0;\n    var primeFib;\n    var fibArr = [0, 1];\n    var primeArr =\
    \ [];\n    while (i < n){\n        fibNum = fibArr[i] + fibArr[i+1];\n       \
    \ fibArr.push(fibNum);\n        if (fibNum % 2 !== 0 && (fibNum % 3 !== 0 || fibNum\
    \ === 3) && fibNum !== 1){\n            primeArr.push(fibNum);\n        }\n  \
    \      i++;\n    }\n    primeFib = primeArr[primeArr.length - 1];\n    return\
    \ primeFib;\n}\n", "  var fib = [2,3,5,8,13];\n  if (n <= fib.length){\n    return\
    \ fib[n-1];\n  }\n  var x = prime_fib(n-1) + prime_fib(n-2);\n  while (!isPrime(x)){\n\
    \    x = prime_fib(n-1) + prime_fib(n-2);\n  }\n  return x;\n}\n", "    if(n==1){\n\
    \        return 2;\n    }\n    if(n==2){\n        return 3;\n    }\n    if(n==3){\n\
    \        return 5;\n    }\n    if(n==4){\n        return 13;\n    }\n    if(n==5){\n\
    \        return 89;\n    }\n    if(n>5){\n        return prime_fib(n-1)+prime_fib(n-2);\n\
    \    }\n    if(n<0){\n        return NaN;\n    }\n}\n", "    var n1 = 2;\n   \
    \ var n2 = 3;\n    var fib = 0;\n    var count = 1;\n    if(n==1){\n        return\
    \ n1;\n    }\n    if(n==2){\n        return n2;\n    }\n    while(count < n){\n\
    \        fib = n1 + n2;\n        n1 = n2;\n        n2 = fib;\n        if(is_prime(fib)){\n\
    \            count += 1;\n        }\n    }\n    return fib;\n}\n", "    var i=1;\n\
    \    var f = fib(i);\n    while(n>0){\n        if(isPrime(f)){\n            n--;\n\
    \        }\n        i++;\n        f = fib(i);\n    }\n    return f;\n}\n", " \
    \   function is_prime(n){\n        var i;\n        if (n < 2) {\n            return\
    \ false;\n        }\n        for (i = 2; i < n; i++) {\n            if (n % i\
    \ === 0) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    var i = 1;\n    var fib = 1;\n    var test = is_prime(fib);\n\
    \    var count = 0;\n    var result;\n    if (n === 1) {\n        return 2;\n\
    \    }\n    while (count !== n) {\n        i += 1;\n        fib = fibonacci(i);\n\
    \        test = is_prime(fib);\n        if (test === true) {\n            count\
    \ += 1;\n            result = fib;\n        }\n    }\n    return result;\n}\n",
  "\tif(n==1){\n\t\treturn 2;\n\t}\n\tvar i = 2;\n\tvar j = 3;\n\tvar counter = 1;\n\
    \twhile(counter < n){\n\t\tvar fib = i + j;\n\t\ti = j;\n\t\tj = fib;\n\t\tif(is_prime(fib)){\n\
    \t\t\tcounter++;\n\t\t}\n\t}\n\treturn fib;\n}\n\n\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
