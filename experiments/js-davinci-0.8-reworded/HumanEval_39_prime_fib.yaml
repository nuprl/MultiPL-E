name: HumanEval_39_prime_fib
language: js
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prime_fib;\n  assert.deepEqual(candidate(1),2);\n  assert.deepEqual(candidate(2),3);\n\
  \  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n  assert.deepEqual(candidate(5),89);\n\
  \  assert.deepEqual(candidate(6),233);\n  assert.deepEqual(candidate(7),1597);\n\
  \  assert.deepEqual(candidate(8),28657);\n  assert.deepEqual(candidate(9),514229);\n\
  \  assert.deepEqual(candidate(10),433494437);\n}\n\ntest();"
completions: ["\tlet res = 2;\n\tfor(let i = 3; n > 0; i++){\n\t\tif(isPrime(i) &&\
    \ isFib(i)){\n\t\t\tres = i;\n\t\t\tn--;\n\t\t}\n\t}\n\treturn res;\n}\n", " \
    \   return n;\n}\n\n", "\tvar previous=1;\n\tvar current=2;\n\tvar next;\n\tvar\
    \ counter=2;\n\tif(n==1){\n\t\treturn current;\n\t}\n\twhile(counter<n){\n\t\t\
    next=previous+current;\n\t\tprevious=current;\n\t\tcurrent=next;\n\t\tif(isPrime(current)){\n\
    \t\t\tcounter++;\n\t\t}\n\t}\n\treturn current;\n}", "\tvar i = 1;\n\tvar j =\
    \ 2;\n\twhile(i <= n){\n\t\tif(is_prime(j) && is_fib(j)){\n\t\t\tif(i == n){\n\
    \t\t\t\treturn j;\n\t\t\t}else{\n\t\t\t\ti = i + 1;\n\t\t\t}\n\t\t}\n\t\tj = j\
    \ + 1;\n\t}\n}\n", "  for(var i = 1,num = 2; i <= n; num++){\n    if(prime(num)\
    \ && fib(num)){\n      i++;\n    }\n  }\n  return num - 1;\n}", "    return fib_recur(is_prime,n);\n\
    }\n", "\tlet fib = fibonacci(n);\n\tlet i = 0;\n\tlet ans = 0;\n\twhile(i < n){\n\
    \t\tif(isPrime(fib)){\n\t\t\tans = fib;\n\t\t\ti++;\n\t\t}\n\t\tfib = fibonacci(n);\n\
    \t}\n\treturn ans;\n}\n", "\tvar fib_prime = [];\n\tvar i = 2;\n\tvar j = 0;\n\
    \tvar fib = 0;\n\tvar a = 0;\n\tvar b = 1;\n\twhile(j < n){\n\t\tfib = a + b;\n\
    \t\ta = b;\n\t\tb = fib;\n\t\tif(isPrime(fib)){\n\t\t\tfib_prime.push(fib);\n\t\
    \t\tj++;\n\t\t}\n\t}\n\treturn fib_prime[n-1];\n}", "    if(n<0)\n    {\n    \
    \    return null;\n    }\n    var prev=1;\n    var curr=1;\n    var next = 1;\n\
    \    var count = 1;\n    while(count<n)\n    {\n        next = prev + curr;\n\
    \        prev = curr;\n        curr = next;\n        if(is_prime(curr))\n    \
    \    {\n            count++;\n        }\n    }\n    return curr;\n}\n", "    var\
    \ primes = [];\n    var Fibs = [];\n    var i = 0;\n    var p = 2;\n    var a\
    \ = 0;\n    var b = 1;\n    var c = 0;\n    while(primes.length<n){\n        if(i<2){\n\
    \            Fibs.push(i);\n        }\n        else{\n            c = a + b;\n\
    \            Fibs.push(c);\n            a = b;\n            b = c;\n        }\n\
    \        if(isPrime(Fibs[i])){\n            primes.push(Fibs[i]);\n        }\n\
    \        i++;\n    }\n    return primes[n-1];\n}\n", "    var fibArray = [2,3];\n\
    \    var primeFib = 2;\n    var i = 2;\n    while(i < n){\n        var nextFib\
    \ = fibArray[i-1] + fibArray[i-2];\n        if(isPrime(nextFib)){\n          \
    \  primeFib = nextFib;\n            i++;\n        }\n        fibArray.push(nextFib);\n\
    \    }\n    return primeFib;\n}\n", "\tvar i = 1;\n\tvar k = 1;\n\tvar j = 2;\n\
    \tvar f = 1;\n\twhile(true){\n\t\tif(fib(k) == true && is_prime(f) == true){\n\
    \t\t\tif(i == n){\n\t\t\t\treturn f;\n\t\t\t}\n\t\t\ti += 1;\n\t\t}\n\t\tk +=\
    \ 1;\n\t\tf = fib(k);\n\t}\n}\n", "\tvar fib = [2,3];\n\tvar cur = 3;\n\tvar output\
    \ = 2;\n\tvar i = 2;\n\tvar new_num = 0;\n\twhile(i<n){\n\t\tnew_num = fib[0]\
    \ + fib[1];\n\t\tif(is_prime(new_num)){\n\t\t\tfib[0] = fib[1];\n\t\t\tfib[1]\
    \ = new_num;\n\t\t\ti += 1;\n\t\t}else{\n\t\t\tfib[0] = fib[1];\n\t\t\tfib[1]\
    \ = new_num;\n\t\t}\n\t}\n\toutput = fib[1];\n\treturn output;\n}", "\tif(n ==\
    \ 1){\n\t\treturn 2;\n\t}\n\telse if(n == 2){\n\t\treturn 3;\n\t}\n\telse if(n\
    \ == 3){\n\t\treturn 5;\n\t}\n\telse if(n == 4){\n\t\treturn 13;\n\t}\n\telse\
    \ if(n == 5){\n\t\treturn 89;\n\t}\n\telse{\n\t\treturn prime_fib(n-1) + prime_fib(n-2);\n\
    \t}\n}\n\n", "    for(var i = 2; n > 0; i++){\n        if(isPrime(i) && isFibonacci(i)){\n\
    \            n--;\n        }\n    }\n    return i-1;\n}", "  var i=1;\n  var fib_n=1;\n\
    \  var fib_n_2=1;\n  var fib_n_1=2;\n  while(i<n){\n    if(prime(fib_n_1)){\n\
    \      i+=1;\n    }\n    fib_n=fib_n_1+fib_n_2;\n    fib_n_2=fib_n_1;\n    fib_n_1=fib_n;\n\
    \  }\n  return fib_n_2;\n}\n\n", "  var i,\n      fibNum,\n      primeFibNum =\
    \ 2;\n\n  for(i = 1; i < n; i++){\n    if(i === 1){\n      fibNum = 3;\n    }\
    \ else{\n      fibNum = fib(i);\n    }\n\n    if(prime(fibNum)){\n      primeFibNum\
    \ = fibNum;\n    }\n  }\n\n  return primeFibNum;\n}\n", "    function isPrime(number){\n\
    \        if(number <= 3){\n            return number > 1;\n        }\n       \
    \ else if(number % 2 == 0 || number % 3 == 0){\n            return false;\n  \
    \      }\n        else{\n            for(var i = 5; i * i <= number; i += 6){\n\
    \                if(number % i == 0 || number % (i + 2) == 0){\n             \
    \       return false;\n                }\n            }\n            return true;\n\
    \        }\n    }\n    function fib(num){\n        var a = 1, b = 0, temp;\n \
    \   \n        while (num >= 0){\n            temp = a;\n            a = a + b;\n\
    \            b = temp;\n            num--;\n        }\n    \n        return b;\n\
    \    }\n    var res = 0;\n    var fibNum = 0;\n    while(res < n){\n        if(isPrime(fib(fibNum))){\n\
    \            res++;\n        }\n        fibNum++;\n    }\n    return fib(fibNum\
    \ - 1);\n}", "    if(n === 1){\n        return 2;\n    }\n    if(n === 2){\n \
    \       return 3;\n    }\n    var counter = 0;\n    var i = 1;\n    var j = 1;\n\
    \    var k = 2;\n    while(counter < n-2){\n        if(is_prime(k)){\n       \
    \     counter += 1;\n        }\n        var temp = i + j;\n        i = j;\n  \
    \      j = temp;\n        k = j;\n    }\n    return k;\n}", "  if(n == 1){\n \
    \   return 2;\n  }\n  if(n == 2){\n    return 3;\n  }\n  if(n == 3){\n    return\
    \ 5;\n  }\n  var a = 1;\n  var b = 1;\n  var c = a + b;\n  var count = 3;\n  while(count\
    \ < n){\n    c = a + b;\n    a = b;\n    b = c;\n    if(is_prime(c)){\n      count++;\n\
    \    }\n  }\n  return c;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
