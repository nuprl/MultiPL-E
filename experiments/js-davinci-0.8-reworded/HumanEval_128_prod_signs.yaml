name: HumanEval_128_prod_signs
language: js
prompt: "//You are given an array arr of integers and you need to return\n// sum of\
  \ magnitudes of integers multiplied by product of all signs\n// of each number in\
  \ the array, represented by 1, -1 or 0.\n// Note: return undefined for empty arr.\n\
  // Example:\n// >>> prod_signs([1, 2, 2, -4])\n// 9\n// >>> prod_signs([0, 1])\n\
  // 0\n// >>> prod_signs([])\n// undefined\nfunction prod_signs(arr){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prod_signs;\n  assert.deepEqual(candidate([1, 2, 2, -4]),-9);\n  assert.deepEqual(candidate([0,\
  \ 1]),0);\n  assert.deepEqual(candidate([1, 1, 1, 2, 3, -1, 1]),-10);\n  assert.deepEqual(candidate([]),undefined);\n\
  \  assert.deepEqual(candidate([2, 4, 1, 2, -1, -1, 9]),20);\n  assert.deepEqual(candidate([-1,\
  \ 1, -1, 1]),4);\n  assert.deepEqual(candidate([-1, 1, 1, 1]),-4);\n  assert.deepEqual(candidate([-1,\
  \ 1, 1, 0]),0);\n}\n\ntest();"
completions: ["    // start here\n}\n", "   var total = 0;\n   var len = arr.length;\n\
    \   var pro = 1;\n   if(len == 0){\n       return undefined;\n   }\n   else{\n\
    \       for(var i = 0; i < len; i++){\n           total += Math.abs(arr[i]);\n\
    \           if(arr[i] < 0){\n               pro *= -1;\n           }\n       \
    \    else if(arr[i] == 0){\n               pro *= 0;\n           }\n       }\n\
    \       total *= pro;\n       return total;\n   }\n}\n", "  return arr.length\
    \ ? arr.map(function(el){\n    if(el > 0) return 1;\n    if(el < 0) return -1;\n\
    \    return 0;\n  }).reduce(function(product, element){\n    return product *\
    \ element;\n  }) * arr.map(function(el){\n    return Math.abs(el);\n  }).reduce(function(sum,\
    \ elem){\n    return sum + elem;\n  }) : undefined;\n}\n", "    var result = 1;\n\
    \    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ === 0){\n            arr[i] = 1;\n        }else if(arr[i] < 0){\n          \
    \  arr[i] = -1;\n        }\n        sum += Math.abs(arr[i]);\n        result *=\
    \ arr[i];\n    }\n    return sum * result;\n}", "    if (arr.length === 0) return\
    \ undefined;\n    let prod = arr.map(a => a<0 ? -1 : a>0 ? 1 : 0).reduce((x,y)\
    \ => x*y);\n    let sum = arr.map(Math.abs).reduce((x,y) => x+y);\n    return\
    \ prod*sum;\n}\n", "    if(arr.length === 0){\n        return undefined;\n   \
    \ }\n    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < arr.length;\
    \ i++){\n        if(arr[i] < 0){\n            sum += -arr[i];\n            product\
    \ *= -1;\n        }\n        else if(arr[i] > 0){\n            sum += arr[i];\n\
    \        }\n    }\n    return sum * product;\n}", "    if (arr.length === 0) return\
    \ undefined;\n    var product = 1;\n    var sum = 0;\n    for (var i = 0; i <\
    \ arr.length; i++){\n        sum += Math.abs(arr[i]);\n        product *= Math.sign(arr[i]);\n\
    \    }\n    return sum * product;\n}\n", "  if(arr.length === 0){\n    return\
    \ undefined;\n  }\n  var prod = 1;\n  var sum = 0;\n  for(var i = 0; i < arr.length;\
    \ i++){\n    if(arr[i] === 0){\n      prod *= 1;\n    }\n    else if(arr[i] >\
    \ 0){\n      prod *= 1;\n      sum += arr[i];\n    }\n    else{\n      prod *=\
    \ -1;\n      sum += Math.abs(arr[i]);\n    }\n  }\n  return sum * prod;\n}", " \
    \ var a = 1;\n  var b = 0;\n  if (arr.length == 0){\n    return undefined;\n \
    \ }\n  for (i = 0; i < arr.length; i++){\n    if (arr[i] > 0){\n      a = a *\
    \ 1;\n      b = b + arr[i];\n    }\n    else if (arr[i] < 0){\n      a = a * -1;\n\
    \      b = b + Math.abs(arr[i]);\n    }\n    else{\n      b = b + 0;\n    }\n\
    \  }\n  return a * b;\n}", "    var res = undefined;\n    if (arr.length == 0)\
    \ return res;\n    var prod = 1;\n    var sum = 0;\n    for (var i=0; i<arr.length;\
    \ i++){\n        if (arr[i] == 0) {\n            prod = prod * 0;\n          \
    \  sum = sum + 0;\n        }\n        else if (arr[i] > 0) {\n            prod\
    \ = prod * 1;\n            sum = sum + arr[i];\n        }\n        else if (arr[i]\
    \ < 0) {\n            prod = prod * -1;\n            sum = sum + arr[i] * -1;\n\
    \        }\n    }\n    res = prod * sum;\n    return res;\n}", "  if(arr.length\
    \ == 0){\n    return;\n  }\n  var res = 0;\n  var prod = 1;\n  for(var i = 0;\
    \ i < arr.length; i++){\n    if(arr[i] > 0){\n      res += arr[i];\n      prod\
    \ *= 1;\n    }\n    else if(arr[i] < 0){\n      res += arr[i] * -1;\n      prod\
    \ *= -1;\n    }\n    else{\n      res += 0;\n      prod *= 0;\n    }\n  }\n  return\
    \ res * prod;\n}\n", "    if (arr.length === 0) {\n        return undefined;\n\
    \    }\n    let product = 1;\n    let sum = 0;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        let el = arr[i];\n        let el_sign = Math.sign(el);\n   \
    \     if (el_sign === 0) {\n            continue;\n        }\n        product\
    \ *= el_sign;\n        sum += Math.abs(el);\n    }\n    return product * sum;\n\
    }\n\n\n", "  if(arr.length<1){\n    return undefined;\n  }\n  var sum = 0;\n \
    \ var product = 1;\n  for(var i = 0; i < arr.length; i++){\n    if(arr[i]!=0){\n\
    \      if(arr[i]>0){\n        sum+= arr[i];\n        product*=1;\n      }else{\n\
    \        sum+= Math.abs(arr[i]);\n        product*=-1;\n      }\n    }\n  }\n\
    \  return sum*product;\n}", "\t//TODO: Write code here\n\tvar sum = 0;\n\tvar\
    \ product = 1;\n\tvar count = 0;\n\tfor(var i = 0; i < arr.length; i++){\n\t\t\
    if(arr[i] > 0){\n\t\t\tsum += arr[i];\n\t\t\tproduct *= 1;\n\t\t}else if(arr[i]\
    \ < 0){\n\t\t\tsum += arr[i];\n\t\t\tproduct *= -1;\n\t\t}else{\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\tif(count === arr.length){\n\t\treturn 0;\n\t}else if(count === arr.length-1){\n\
    \t\treturn 0;\n\t}else{\n\t\treturn sum * product;\n\t}\n\tif(arr.length === 0){\n\
    \t\treturn undefined;\n\t}\n}\n", "    var prod_signs = 0;\n    for(var i = 0;\
    \ i < arr.length; i++){\n        if(arr[i] > 0){\n            prod_signs += 1\
    \ * Math.abs(arr[i]);\n        }else if(arr[i] < 0){\n            prod_signs -=\
    \ 1 * Math.abs(arr[i]);\n        }else{\n            prod_signs += 0;\n      \
    \  }\n    }\n    return prod_signs;\n}\n", "    if(arr.length===0){\n        return;\n\
    \    }\n    return arr.map(Math.abs).reduce((a, b) => a + b, 0) * arr.reduce((a,\
    \ b) => a * b, 1);\n}", "  if (arr.length == 0) {\n    return undefined;\n  }\n\
    \  var sum = 0;\n  var prod = 1;\n  for (var i = 0; i < arr.length; i++) {\n \
    \   if (arr[i] == 0) {\n      continue;\n    }\n    else if (arr[i] > 0) {\n \
    \     sum += arr[i];\n      prod *= 1;\n    }\n    else {\n      sum += arr[i]\
    \ * -1;\n      prod *= -1;\n    }\n  }\n  return sum * prod;\n}", "    var res\
    \ = 1;\n    var sum = 0;\n    for(var i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ > 0){\n            res *= 1;\n            sum += arr[i];\n        }else if(arr[i]\
    \ < 0){\n            res *= -1;\n            sum += arr[i] * -1;\n        }else{\n\
    \            res *= 0;\n        }\n    }\n    return sum * res;\n}", "    if(arr.length\
    \ === 0){\n        return undefined;\n    }\n    var res = 0;\n    for(var i =\
    \ 0; i < arr.length; i++){\n        res += arr[i] * getSign(arr[i]);\n    }\n\
    \    return res;\n}\n", "  if(arr.length == 0){\n    return undefined;\n  }\n\
    \  var prod = 1;\n  var sum = 0;\n  for(var i = 0; i < arr.length; i++){\n   \
    \ if(arr[i] < 0){\n      prod *= -1;\n    }else if(arr[i] > 0){\n      prod *=\
    \ 1;\n    }else{\n      prod *= 0;\n    }\n    sum += Math.abs(arr[i]);\n  }\n\
    \  return sum * prod;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
