name: HumanEval_87_get_row
language: js
prompt: "//You are given a 2 dimensional data, as a nested arrays,\n// which is similar\
  \ to matrix, however, unlike matrices,\n// each row may contain a different number\
  \ of columns.\n// Given lst, and integer x, find integers x in the array,\n// and\
  \ return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array is a\
  \ coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by\
  \ rows in ascending order.\n// Also, sort coordinates of the row by columns in descending\
  \ order.\n// Examples:\n// >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1)\n// [[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]\n// >>> get_row([],\
  \ 1)\n// []\n// >>> get_row([[], [1], [1, 2, 3]], 3)\n// [[2, 2]]\nfunction get_row(lst,\
  \ x){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_row;\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1,\
  \ 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0], [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1],\
  \ [5, 1]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6],\
  \ [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1, 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6],\
  \ [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2, 1], [2, 0], [3, 2], [3, 0], [4, 3],\
  \ [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n  assert.deepEqual(candidate([], 1),[]);\n\
  \  assert.deepEqual(candidate([[1]], 2),[]);\n  assert.deepEqual(candidate([[],\
  \ [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
completions: ["\tvar flat_list = lst.reduce(function(a, b) {return a.concat(b);});\n\
    \tvar pos = [];\n\tvar start = 0;\n\twhile (true) {\n\t\tvar found = flat_list.indexOf(x,\
    \ start);\n\t\tif (found == -1) break;\n\t\tpos.push(found);\n\t\tstart = found\
    \ + 1;\n\t}\n\tvar row = [];\n\tvar row_no = 0;\n\tvar count = 0;\n\tfor (i=0;\
    \ i<pos.length; i++) {\n\t\tif (pos[i] >= count) {\n\t\t\trow.push([row_no, pos[i]-count]);\n\
    \t\t} else {\n\t\t\trow_no += 1;\n\t\t\tcount += lst[row_no-1].length;\n\t\t\t\
    row.push([row_no, pos[i]-count]);\n\t\t}\n\t}\n\trow.sort(function(a, b) {return\
    \ a[0] > b[0];});\n\tvar result = [];\n\tfor (i=0; i<row.length; i++) {\n\t\t\
    if (result.length == 0) {\n\t\t\tresult.push([row[i]]);\n\t\t} else if (result[result.length-1][0][0]\
    \ == row[i][0]) {\n\t\t\tresult[result.length-1].push(row[i]);\n\t\t} else {\n\
    \t\t\tresult.push([row[i]]);\n\t\t}\n\t}\n\tfor (i=0; i<result.length; i++) {\n\
    \t\tresult[i].sort(function(a, b) {return a[1] < b[1];});\n\t}\n\treturn result;\n\
    }", "    let coordinates = [];\n    for (let i = 0; i < lst.length; i++){\n  \
    \      let array = lst[i];\n        for (let j = 0; j < array.length; j++){\n\
    \            if (lst[i][j] === x){\n                coordinates.push([i, j]);\n\
    \            }\n        }\n    }\n    return coordinates.sort(function(a, b){\n\
    \        return a[0] - b[0] || b[1] - a[1];\n    });\n}\n", "  let arr_row = [];\n\
    \  let arr_col = [];\n  let arr_empty = [];\n  let arr_sort = [];\n  for (let\
    \ i = 0; i < lst.length; i++){\n    for (let j = 0; j < lst[i].length; j++){\n\
    \      if (lst[i][j] === x){\n        arr_row.push(i);\n        arr_col.push(j);\n\
    \      }\n    }\n  }\n  for (let i = 0; i < arr_row.length; i++){\n    for (let\
    \ j = i + 1; j < arr_row.length; j++){\n      if (arr_row[i] > arr_row[j]){\n\
    \        let temp_row = arr_row[i];\n        arr_row[i] = arr_row[j];\n      \
    \  arr_row[j] = temp_row;\n        let temp_col = arr_col[i];\n        arr_col[i]\
    \ = arr_col[j];\n        arr_col[j] = temp_col;\n      }\n    }\n  }\n  for (let\
    \ i = 0; i < arr_row.length; i++){\n    for (let j = i + 1; j < arr_row.length;\
    \ j++){\n      if (arr_row[i] === arr_row[j]){\n        if (arr_col[i] < arr_col[j]){\n\
    \          let temp_col = arr_col[i];\n          arr_col[i] = arr_col[j];\n  \
    \        arr_col[j] = temp_col;\n        }\n      }\n    }\n  }\n  for (let i\
    \ = 0; i < arr_row.length; i++){\n    arr_sort.push([arr_row[i], arr_col[i]]);\n\
    \  }\n  return arr_sort;\n}\n", "\tif(lst.length == 0){\n\t\treturn [];\n\t}\n\
    \tvar result = [];\n\tfor(var i = 0; i < lst.length; i++){\n\t\tfor(var j = 0;\
    \ j < lst[i].length; j++){\n\t\t\tif(lst[i][j] == x){\n\t\t\t\tresult.push([i,\
    \ j]);\n\t\t\t}\n\t\t}\n\t}\n\tvar sorted = result.sort(function(a, b){\n\t\t\
    if(a[0] == b[0]){\n\t\t\treturn b[1] - a[1];\n\t\t}\n\t\treturn a[0] - b[0];\n\
    \t});\n\treturn sorted;\n}\n", "    let res = [];\n    for (let i = 0; i < lst.length;\
    \ i++){\n        for (let j = 0; j < lst[i].length; j++){\n            if (lst[i][j]\
    \ === x){\n                res.push([i, j]);\n            }\n        }\n    }\n\
    \    return res.sort((a, b) => {\n        if (a[0] < b[0]){\n            return\
    \ -1;\n        }\n        if (a[0] > b[0]){\n            return 1;\n        }\n\
    \        if (a[1] > b[1]){\n            return -1;\n        }\n        if (a[1]\
    \ < b[1]){\n            return 1;\n        }\n        return 0;\n    });\n}\n",
  "    var coords = [];\n    for (var i = 0; i < lst.length; i++){\n        for (var\
    \ j = 0; j < lst[i].length; j++){\n            if (lst[i][j] == x){\n        \
    \        coords.push([i, j]);\n            }\n        }\n    }\n    coords.sort(function(a,\
    \ b){\n        if (a[0] != b[0]){\n            return a[0] - b[0];\n        }\
    \ else {\n            return b[1] - a[1];\n        }\n    });\n    return coords;\n\
    }", "    let searchArray = [];\n    let i = 0;\n    while (i < lst.length){\n\
    \        let j = 0;\n        while (j < lst[i].length){\n            if (lst[i][j]\
    \ === x){\n                searchArray.push([i, j]);\n            }\n        \
    \    j++;\n        }\n        i++;\n    }\n    // sort by rows\n    let rows =\
    \ searchArray.map(function(subArray){\n        return subArray[0];\n    });\n\
    \    let sortedRows = rows.sort(function(a, b){\n        return a - b;\n    });\n\
    \    // sort by columns\n    let columns = searchArray.map(function(subArray){\n\
    \        return subArray[1];\n    });\n    let sortedColumns = columns.sort(function(a,\
    \ b){\n        return b - a;\n    });\n    // combine rows and columns in the\
    \ same order\n    let newArray = [];\n    i = 0;\n    while (i < searchArray.length){\n\
    \        let j = 0;\n        while (j < searchArray.length){\n            if (searchArray[i][0]\
    \ === sortedRows[j]){\n                newArray.push(searchArray[i]);\n      \
    \      }\n            j++;\n        }\n        i++;\n    }\n    return newArray;\n\
    }\n", "    let result = [];\n    for (let i = 0; i < lst.length; i++){\n     \
    \   for (let j = 0; j < lst[i].length; j++){\n            if (lst[i][j] === x){\n\
    \                result.push([i, j]);\n            }\n        }\n    }\n    return\
    \ result.sort(function(a, b){\n        if (a[0] !== b[0]){\n            return\
    \ a[0] - b[0];\n        } else {\n            return b[1] - a[1];\n        }\n\
    \    });\n}\n", "  let coordinates = [];\n  for (let i = 0; i < lst.length; i++){\n\
    \    for (let j = 0; j < lst[i].length; j++){\n      if (lst[i][j] === x){\n \
    \       coordinates.push([i, j]);\n      }\n    }\n  }\n  return coordinates.sort((a,\
    \ b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n \
    \   if (a[1] > b[1]) return -1;\n    if (a[1] < b[1]) return 1;\n    return 0;\n\
    \  });\n}", "    //your code here\n}\n", "    let res = []\n    lst.forEach((item,\
    \ index) => {\n        item.forEach((item, ind) => {\n            if (item ===\
    \ x) res.push([index, ind])\n        })\n    })\n    return res.sort((a, b) =>\
    \ {\n        if (a[0] === b[0]) {\n            return b[1] - a[1]\n        } else\
    \ {\n            return a[0] - b[0]\n        }\n    })\n}", "  var final = [];\n\
    \  for(var i = 0; i < lst.length; i++){\n    for(var j = 0; j < lst[i].length;\
    \ j++){\n      if(lst[i][j] == x){\n        final.push([i, j]);\n      }\n   \
    \ }\n  }\n  final.sort(function(a, b){\n    if(a[0] < b[0]){\n      return -1;\n\
    \    }\n    if(a[0] > b[0]){\n      return 1;\n    }\n    return b[1] - a[1];\n\
    \  });\n  return final;\n}\n", "    var ar = [];\n    for(var i = 0; i < lst.length;\
    \ i++){\n        for(var j = 0; j < lst[i].length; j++){\n            if(lst[i][j]\
    \ == x){\n                ar.push([i, j]);\n            }\n        }\n    }\n\
    \    return ar;\n}\n", "\tvar row = lst.length;\n\tvar lst2 = [];\n\tvar lst3\
    \ = [];\n\tvar lst4 = [];\n\tvar lst5 = [];\n\tvar lst6 = [];\n\tvar num = 0;\n\
    \tvar num1 = 0;\n\tvar num2 = 0;\n\tfor(var i = 0; i < row; i++){\n\t\tlst2.push(lst[i].length);\n\
    \t}\n\tfor(var i = 0; i < row; i++){\n\t\tfor(var j = 0; j < lst2[i]; j++){\n\t\
    \t\tif(lst[i][j] == x){\n\t\t\t\tlst3.push(i);\n\t\t\t\tlst4.push(j);\n\t\t\t\
    }\n\t\t}\n\t}\n\tif(lst3.length == 0){\n\t\treturn [];\n\t}\n\tfor(var i = 0;\
    \ i < lst3.length; i++){\n\t\tfor(var j = 0; j < lst3.length - 1; j++){\n\t\t\t\
    if(lst3[j] > lst3[j + 1]){\n\t\t\t\tnum = lst3[j];\n\t\t\t\tlst3[j] = lst3[j +\
    \ 1];\n\t\t\t\tlst3[j + 1] = num;\n\t\t\t\tnum1 = lst4[j];\n\t\t\t\tlst4[j] =\
    \ lst4[j + 1];\n\t\t\t\tlst4[j + 1] = num1;\n\t\t\t}\n\t\t}\n\t}\n\tfor(var i\
    \ = 0; i < lst3.length; i++){\n\t\tfor(var j = 0; j < lst3.length - 1; j++){\n\
    \t\t\tif(lst3[j] == lst3[j + 1]){\n\t\t\t\tif(lst4[j] < lst4[j + 1]){\n\t\t\t\t\
    \tnum2 = lst4[j];\n\t\t\t\t\tlst4[j] =", "    // YOUR CODE HERE\n    let ans =\
    \ [];\n    for (let i = 0; i < lst.length; i++){\n        for (let j = 0; j <\
    \ lst[i].length; j++){\n            if (lst[i][j] == x){\n                ans.push([i,\
    \ j]);\n            }\n        }\n    }\n    ans.sort(function(a, b){\n      \
    \  if (a[0] === b[0]){\n            return b[1] - a[1];\n        }\n        return\
    \ a[0] - b[0];\n    });\n    return ans;\n}\n\n", "    var result = [];\n    for(var\
    \ i = 0; i < lst.length; i++){\n        for(var j = 0; j < lst[i].length; j++){\n\
    \            if(lst[i][j] == x){\n                result.push([i, j]);\n     \
    \       }\n        }\n    }\n    if(result.length == 0){\n        return result;\n\
    \    }\n    result.sort(function(x, y){\n        if(x[0] > y[0]){\n          \
    \  return 1;\n        }\n        else if(x[0] < y[0]){\n            return -1;\n\
    \        }\n        else{\n            if(x[1] > y[1]){\n                return\
    \ -1;\n            }\n            else if(x[1] < y[1]){\n                return\
    \ 1;\n            }\n            else{\n                return 0;\n          \
    \  }\n        }\n    });\n    return result;\n}\n", "    // your code here\n}",
  "\treturn lst.reduce(function(result, row, row_index){\n\t\trow.reduce(function(column_index,\
    \ x){\n\t\t\tif(x === x){\n\t\t\t\tresult.push([row_index, column_index]);\n\t\
    \t\t}\n\t\t\treturn column_index + 1;\n\t\t}, 0);\n\t\treturn result;\n\t}, []).sort(function(a,\
    \ b){\n\t\tif(a[0] > b[0]){\n\t\t\treturn 1;\n\t\t}else if(a[0] < b[0]){\n\t\t\
    \treturn -1;\n\t\t}else{\n\t\t\tif(a[1] > b[1]){\n\t\t\t\treturn -1;\n\t\t\t}else\
    \ if(a[1] < b[1]){\n\t\t\t\treturn 1;\n\t\t\t}else{\n\t\t\t\treturn 0;\n\t\t\t\
    }\n\t\t}\n\t});\n}", "  var rows = [];\n  for (var row = 0; row < lst.length;\
    \ row++){\n    for (var col = 0; col < lst[row].length; col++){\n      if (lst[row][col]\
    \ === x){\n        rows.push([row, col]);\n      }\n    }\n  }\n  return rows.sort().reverse();\n\
    }\n", "    let res = [];\n    let y = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        for(let j = 0; j < lst[i].length; j++){\n            if(lst[i][j] ===\
    \ x){\n                res.push([i,j]);\n            }\n        }\n    }\n   \
    \ return res.sort((a,b) => {\n        if(a[0] > b[0]){\n            return 1;\n\
    \        }\n        else if(a[0] < b[0]){\n            return -1;\n        }\n\
    \        else{\n            if(a[1] > b[1]){\n                return -1;\n   \
    \         }\n            else if(a[1] < b[1]){\n                return 1;\n  \
    \          }\n            else{\n                return 0;\n            }\n  \
    \      }\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
