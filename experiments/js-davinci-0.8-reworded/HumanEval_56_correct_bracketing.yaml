name: HumanEval_56_correct_bracketing
language: js
prompt: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
  <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
  ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
  >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n\
  }\n\ntest();"
completions: ["    if(brackets[0]===\">\"){\n        return false;\n    }\n    if(brackets.length===0){\n\
    \        return true;\n    }\n    if(brackets[0]===\"<\"){\n        if(brackets[brackets.length-1]===\"\
    >\"){\n            return correct_bracketing(brackets.slice(1,brackets.length-1));\n\
    \        }else{\n            return false;\n        }\n    }\n}", "\tvar opens\
    \ = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] ===\
    \ \"<\") {\n\t\t\topens++;\n\t\t}\n\t\telse if (brackets[i] === \">\") {\n\t\t\
    \topens--;\n\t\t}\n\t\tif (opens < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ opens === 0;\n}\n", "    let n = brackets.length\n    let i = 0\n    let count\
    \ = 0\n    while (i < n){\n        if (brackets[i] == \"<\") {\n            count\
    \ = count + 1\n        } else {\n            count = count - 1\n        }\n  \
    \      if (count < 0) {\n            return false\n        }\n        i = i +\
    \ 1\n    }\n    return count == 0\n}", "    var numOpen = 0;\n    var numClose\
    \ = 0;\n    for (var i = 0; i < brackets.length; i++){\n        if (brackets[i]\
    \ == \"<\"){\n            numOpen = numOpen + 1;\n        }\n        else if (brackets[i]\
    \ == \">\"){\n            numClose = numClose + 1;\n        }\n    }\n    if (numOpen\
    \ == numClose){\n        return true;\n    }\n    else{\n        return false;\n\
    \    }\n}", "    var balance = 0;\n    for (var i = 0; i < brackets.length; i++){\n\
    \        if (brackets[i] == \"<\"){\n            balance++;\n        }\n     \
    \   else if (brackets[i] == \">\"){\n            balance--;\n        }\n     \
    \   if (balance < 0){\n            return false;\n        }\n    }\n    return\
    \ balance == 0;\n}\n", "\tvar stack = []\n\tfor (var i = 0; i < brackets.length;\
    \ i++) {\n\t\tvar c = brackets[i]\n\t\tif (c === '<') {\n\t\t\tstack.push(c)\n\
    \t\t}\n\t\telse {\n\t\t\tif (stack.length === 0) {\n\t\t\t\treturn false\n\t\t\
    \t}\n\t\t\tstack.pop()\n\t\t}\n\t}\n\treturn stack.length === 0\n}\n", "    let\
    \ count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === \"<\"){\n            count++;\n        } else if (brackets[i] === \">\"\
    ){\n            count--;\n        }\n        if (count < 0){\n            return\
    \ false;\n        }\n    }\n    return count === 0;\n}\n", "    var stack = [];\n\
    \    for(var i = 0; i < brackets.length; i++){\n      if(brackets[i] == \"<\"\
    ){\n        stack.push(i);\n      }else{\n        if(stack.length == 0){\n   \
    \       return false;\n        }else{\n          stack.pop();\n        }\n   \
    \   }\n    }\n    if(stack.length == 0){\n      return true;\n    }else{\n   \
    \   return false;\n    }\n}\n", "  var stack = [];\n  for(var i = 0; i < brackets.length;\
    \ i++){\n    if(brackets[i] === \"<\"){\n      stack.push(brackets[i]);\n    }\
    \ else if(brackets[i] === \">\"){\n      if(stack.length > 0){\n        stack.pop();\n\
    \      } else {\n        return false;\n      }\n    }\n  }\n  return stack.length\
    \ === 0;\n}", "    var count=0;\n    for(var i=0;i<brackets.length;i++){\n   \
    \     if(brackets[i]===\"<\")\n            count++;\n        else\n          \
    \  count--;\n        if(count<0)\n            return false;\n    }\n    return\
    \ count===0;\n}\n", "    let counter = 0;\n    for (let char of brackets){\n \
    \       if (char == \"<\"){\n            counter += 1;\n        } else if (char\
    \ == \">\"){\n            counter -= 1;\n        }\n        if (counter < 0){\n\
    \            return false;\n        }\n    }\n    return counter == 0;\n}\n",
  "\tif (brackets.length % 2 != 0) {\n\t\treturn false;\n\t}\n\tvar otherSide = {\n\
    \t\t\"<\" : \">\",\n\t\t\">\" : \"<\"\n\t};\n\tfor (var i = 0; i < brackets.length\
    \ / 2; i++) {\n\t\tif (brackets[i] != otherSide[brackets[brackets.length - 1 -\
    \ i]]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    if (brackets.length\
    \ % 2 === 1) {\n        return false;\n    }\n    var l = 0;\n    var r = 0;\n\
    \    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ '<') {\n            l += 1;\n        } else {\n            r += 1;\n       \
    \ }\n        if (r > l) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}", "    var i = 0;\n    var stack = [];\n    var char;\n    while(i\
    \ < brackets.length){\n        char = brackets[i];\n        if(char === \"<\"\
    ){\n            stack.push(char);\n        }\n        else if(char === \">\"){\n\
    \            if(stack.length === 0){\n                return false;\n        \
    \    }\n            else{\n                stack.pop();\n            }\n     \
    \   }\n        i++;\n    }\n    if(stack.length === 0){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n", "\tvar open = 0;\n\tfor\
    \ (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i] === \"<\") {\n\t\
    \t\topen += 1;\n\t\t} else if (brackets[i] === \">\") {\n\t\t\topen -= 1;\n\t\t\
    }\n\t\tif (open < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn open === 0;\n\
    }\n", "    if(brackets.length == 0){\n        return true;\n    }\n    var pairs\
    \ = 0;\n    var i = 0;\n    while(i < brackets.length && pairs >= 0){\n      \
    \  if(brackets[i] == \"<\"){\n            pairs++;\n        }else{\n         \
    \   pairs--;\n        }\n        i++;\n    }\n    return pairs == 0;\n}\n", " \
    \   var open = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] == \"<\") {\n            open++;\n        } else {\n          \
    \  open--;\n        }\n        if (open < 0) {\n            return false;\n  \
    \      }\n    }\n    return open == 0;\n}\n", "  var left = brackets.replace(/>/g,\
    \ '').length;\n  var right = brackets.replace(/</g, '').length;\n  return left\
    \ === right;\n}\n", "\treturn brackets.indexOf('<') == brackets.lastIndexOf('>');\n\
    }", "\tvar count = 0;\n\tfor (var i = 0; i < brackets.length; i++) {\n\t\tif (brackets[i]\
    \ == \"<\") {\n\t\t\tcount += 1;\n\t\t} else if (brackets[i] == \">\") {\n\t\t\
    \tcount -= 1;\n\t\t}\n\t\tif (count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\t\
    if (count == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
