name: HumanEval_121_solution
language: js
prompt: "//Given a non-empty array of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n\
  // >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\n\
  function solution(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = solution;\n  assert.deepEqual(candidate([5, 8, 7, 1]),12);\n  assert.deepEqual(candidate([3,\
  \ 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30, 13, 24, 321]),0);\n  assert.deepEqual(candidate([5,\
  \ 9]),5);\n  assert.deepEqual(candidate([2, 4, 8]),0);\n  assert.deepEqual(candidate([30,\
  \ 13, 23, 32]),23);\n  assert.deepEqual(candidate([3, 13, 2, 9]),3);\n}\n\ntest();"
completions: ["  let result = 0;\n  for (let i = 0; i < lst.length; i++){\n    if\
    \ (i % 2 === 0){\n      if (lst[i] % 2 === 1){\n        result += lst[i];\n  \
    \    }\n    }\n  }\n  return result;\n}", "    //return Math.ceil(lst.filter((l,i)=>\
    \ l%2 ==1 && i%2 ==0).reduce((s,e)=>s+e,0)/2);\n    return Math.ceil(lst.filter((l,i)=>\
    \ i%2 ==0).filter(e=>e%2 ==1).reduce((s,e)=>s+e,0)/2);\n}\n", "    let sum = 0;\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 != 0 && i % 2\
    \ == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", " \
    \ let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0\
    \ && lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}",
  "    let sum = 0;\n    for(let i = 0; i < lst.length; i++) {\n        if(i % 2 ===\
    \ 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n", "  var sum = 0;\n  for (var i = 0; i < lst.length; i++){\n\
    \    if (i % 2 == 0 && lst[i] % 2 == 1){\n      sum += lst[i];\n    }\n  }\n \
    \ return sum;\n}", "  return lst.filter((item,i)=>i%2==0).filter(item=>item%2!=0).reduce((sum,x)=>sum+x,0)\n\
    }", "    let i = 0;\n    let sum = 0;\n    for(let j = 0; j < lst.length; j++)\
    \ {\n        if (lst[j] % 2 === 0 && i % 2 === 0) {\n            sum += lst[j];\n\
    \        }\n        i++;\n    }\n    return sum;\n}\n", "  let result = 0;\n \
    \ let counter = 0;\n  while(counter < lst.length){\n    if(lst[counter] % 2 !==\
    \ 0 && counter % 2 === 0){\n      result += lst[counter];\n    }\n    counter++;\n\
    \  }\n  return result;\n}\n", "  return lst.filter((v,i)=> i%2==0 && v%2==1).reduce((a,b)=>a+b,0)\n\
    }", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        if(lst[i] % 2 !== 0 && i % 2 === 0){\n            sum += lst[i];\n  \
    \      }\n    }\n    return sum;\n}", "    var newArr = [];\n    var total = 0;\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(i % 2 === 0){\n        \
    \    newArr.push(lst[i]);\n        }\n    }\n    for(var j = 0; j < newArr.length;\
    \ j++){\n        if(newArr[j] % 2 !== 0){\n            total += newArr[j];\n \
    \       }\n    }\n    return total;\n}", "    let sum = 0;\n    for(let i = 0;\
    \ i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n   \
    \         sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    return\
    \ lst.filter((e, i) => i % 2 === 0 && e % 2 === 1).reduce((a, b) => a + b, 0);\n\
    }", "  var oe = [];\n  for(var i = 0; i < lst.length; i++){\n    if (i % 2 !==\
    \ 0){\n      if (lst[i] % 2 === 0){\n        oe.push(lst[i]);\n      }\n    }\n\
    \  }\n  return oe.reduce(function(acc,val){\n    return acc + val;\n  },0);\n\
    }\n", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n", "  let counter = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      counter += lst[i];\n\
    \    }\n  }\n  return counter;\n}\n", "    let newLst = []\n    let sum = 0\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] %\
    \ 2 === 1){\n            newLst.push(lst[i])\n        }\n    }\n    for(let j\
    \ = 0; j < newLst.length; j++){\n        sum += newLst[j]\n    }\n    return sum\n\
    }\n", "    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n       \
    \ if(i % 2 === 0 && lst[i] % 2 !== 0){\n            result += lst[i];\n      \
    \  }\n    }\n    return result;\n}\n", "    let sum = 0;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 === 1){\n        \
    \    sum += lst[i];\n        }\n    }\n    return sum;\n}", "\tvar sum = 0;\n\t\
    for (var i = 0; i < lst.length; i++) {\n\t\tif (i % 2 !== 0 && lst[i] % 2 !==\
    \ 0) {\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\n", "  let evenIndexOddSum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i]\
    \ % 2 !== 0) {\n      evenIndexOddSum += lst[i];\n    }\n  }\n  return evenIndexOddSum;\n\
    }", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n   \
    \ }\n    return sum;\n}\n", "  // Your solution here\n  let oddValues = lst.filter(function(item,\
    \ index) {\n    return (item % 2 !== 0 && index % 2 === 0);\n  });\n  return oddValues.reduce((a,\
    \ b) => a + b, 0);\n}\n", "  return lst.filter((x,i)=>i%2===0).filter(x=>x%2!==0).reduce((a,b)=>a+b,0)\n\
    }\n", "  //coding and coding..\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] % 2 !== 0 && i % 2 === 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "    var evenPosition = [];\n    var\
    \ odd = [];\n    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    if(i % 2 === 0){\n            evenPosition.push(lst[i]);\n        }\n   \
    \ }\n    for(var j = 0; j < evenPosition.length; j++){\n        if(evenPosition[j]\
    \ % 2 !== 0){\n            odd.push(evenPosition[j]);\n        }\n    }\n    for(var\
    \ k = 0; k < odd.length; k++){\n        sum += odd[k];\n    }\n    return sum;\n\
    }", "  // Write your code here\n}\n", "  //coding and coding..\n  let final =\
    \ 0;\n  lst.forEach((num, index) => {\n    if (index % 2 !== 0 && num % 2 !==\
    \ 0) {\n      final += num;\n    }\n  });\n  return final;\n}\n", "let sum = 0;\n\
    for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0 && lst[i] % 2 == 1)\
    \ {\n        sum += lst[i];\n    }\n}\nreturn sum;\n}\n", "    return lst.filter((x,i)=>i%2==0).filter(x=>x%2==1).reduce((a,b)=>a+b,0)\n\
    }", "  return lst.filter((item, i) => i % 2 !== 0).filter(i => i % 2 !== 0).reduce((total,\
    \ i) => total + i, 0)\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "\n}\n", "    let sum = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i] % 2 !== 0){\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}", "  return\
    \ lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) => a + b, 0);\n\
    }", "    return lst.filter((ele, idx) => idx % 2 === 0 && ele % 2 !== 0).reduce((acc,\
    \ val) => acc + val, 0)\n}\n", "  let sum = 0;\n  for (var i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n", "    var l = lst.length\n    var sum = 0\n  \
    \  for (var i = 0; i < l; i++){\n        if (i % 2 == 0 && lst[i] % 2 != 0){\n\
    \            sum += lst[i]\n        }\n    }\n    return sum\n}", "  if (lst.length\
    \ < 1) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n \
    \ return sum;\n}\n", "  let result = 0;\n  for (let i = 0; i < lst.length; i +=\
    \ 2) {\n    if (lst[i] % 2 != 0) {\n      result += lst[i];\n    }\n  }\n  return\
    \ result;\n}", "  //coding and coding..\n}", "    let sum = 0;\n    for(let i\
    \ = 0; i < lst.length; i++){\n        if(lst[i] % 2 != 0 && i % 2 == 0){\n   \
    \         sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "  var count\
    \ = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 !== 0 && lst[i] %\
    \ 2 !== 0){\n      count += lst[i];\n    }\n  }\n  return count;\n}\n", "    let\
    \ count = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0\
    \ && lst[i] % 2 === 1){\n            count = count + lst[i];\n        }\n    }\n\
    \    return count;\n}\n", "    let result = 0;\n    for(let i = 0; i < lst.length;\
    \ i += 2){\n        if(lst[i] % 2 === 1){\n            result += lst[i];\n   \
    \     }\n    }\n    return result;\n}", "  return lst.filter((e, i) => i % 2 ===\
    \ 0 && e % 2 === 1).reduce((a, b) => a + b, 0);\n}\n", "  var sum = 0;\n  for\
    \ (var i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0)\
    \ {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}", "    let sum = 0;\n\
    \    for(let i = 0; i < lst.length; i++) {\n        if(i % 2 == 0 && lst[i] %\
    \ 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
  "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 ===\
    \ 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "    return lst.filter((v,i)=>v%2===1&&i%2===0).reduce((s,v)=>s+v,0)\n\
    }\n", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 === 1 && i % 2 === 0){\n            sum += lst[i];\n        }\n    }\n \
    \   return sum;\n}\n", "    return lst.filter((v,i)=>i%2===0&&v%2!==0).reduce((a,b)=>a+b,0)\n\
    }\n", "    //Code here\n}\n", "    let total = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] % 2 !== 0 && i % 2 === 0){\n            total += lst[i];\n\
    \        }\n    }\n    return total;\n}\n", "    // add something to the solution\n\
    \    let output = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i\
    \ % 2 == 0 && lst[i] % 2 == 1) {\n            output += lst[i];\n        }\n \
    \   }\n    return output;\n}\n", "    return lst.filter((e,i)=>i%2!==0&&e%2===1).reduce((acc,cur)=>acc+cur,0)\n\
    }\n", "    let counter = 0;\n    for(let i = 0; i < lst.length; i+=2){\n     \
    \   if(lst[i] % 2 !== 0){\n            counter += lst[i];\n        }\n    }\n\
    \    return counter;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "  var sum = 0;\n  for (var i = 0; i\
    \ < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 === 1) {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}", "    let sum = 0;\n    for(let i\
    \ = 0; i < lst.length; i++) {\n        if(lst[i] % 2 !== 0 && i % 2 === 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "  let answer\
    \ = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (i % 2 !== 0 && lst[i]\
    \ % 2 !== 0){\n      answer += lst[i];\n    }\n  }\n  return answer;\n}", "  //\
    \ Code here\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n   \
    \ if (i % 2 == 0 && lst[i] % 2 != 0) {\n      result += lst[i];\n    }\n  }\n\
    \  return result;\n}", "    let sum = 0;\n    for(i=0; i<lst.length; i++){\n \
    \       if(i%2 === 0 && lst[i]%2 === 1){\n            sum += lst[i];\n       \
    \ }\n    }\n    return sum;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0 && lst[i] % 2 == 1){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}", "    if (lst.length === 0) return 0;\n\
    \    let sum = 0;\n    for (let i = 0; i < lst.length; i += 2) {\n        if (lst[i]\
    \ % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "  //coding and coding..\n  return lst.filter((e,i)=>(i+1)%2===0).filter(e=>e%2===1).reduce((sum,e)=>sum+e,0);\n\
    }", "  return lst.filter((num,idx)=>{\n    return num%2!==0 && idx%2===0\n  }).reduce((acc,cur)=>{\n\
    \    return acc+cur\n  },0)\n}\n", "  var sum = 0;\n  var count = 0;\n  while\
    \ (count < lst.length){\n    if(lst[count] % 2 == 1 && count % 2 == 0){\n    \
    \  sum += lst[count];\n    }\n    count++;\n  }\n  return sum;\n}", "  return\
    \ lst.filter((x,i)=>i%2!==0).filter(x=>x%2===1).reduce((a,b)=>a+b,0)\n}\n", " \
    \   let sum = 0;\n    for(let i = 0; i < lst.length; i++) {\n        if(i % 2\
    \ === 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n", "  let temp = [];\n  for(let i = 0; i < lst.length; i++){\n\
    \    if(i % 2 === 0 && lst[i] % 2 === 1){\n      temp.push(lst[i]);\n    }\n \
    \ }\n  return temp.reduce((acc, ele) => acc + ele, 0);\n}", "  return lst.filter((e,\
    \ i) => i % 2 === 0 && e % 2 !== 0).reduce((a, b) => a + b, 0);\n}", "    let\
    \ sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if (i % 2 === 0\
    \ && lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "    //coding and coding..\n    var res = 0;\n    for (var i = 0;\
    \ i < lst.length; i++) {\n        if ((i + 1) % 2 === 0 && lst[i] % 2 === 1) {\n\
    \            res += lst[i];\n        }\n    }\n    return res;\n}\n", "  // Your\
    \ code here\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "    return lst.filter((item, i) => item % 2 === 1 && i % 2 ===\
    \ 0).reduce((s, item) => s + item, 0);\n}", "    var oddSum = 0;\n    for (var\
    \ i = 0; i < lst.length; i++) {\n        if (i % 2 == 0 && lst[i] % 2 != 0) {\n\
    \            oddSum += lst[i];\n        }\n    }\n    return oddSum;\n}", "  //\
    \ TODO: write your code here\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n\nvar test1 = [5, 8, 7, 1];\nvar test2 = [3, 3,\
    \ 3, 3, 3];\nvar test3 = [30, 13, 24, 321];", "  return lst.filter((n,i)=> i%2\
    \ !== 0 && n%2 === 1).reduce((a,b)=> a+b,0)\n}", "    return lst.filter((e, i)\
    \ => i % 2 == 0 && e % 2 !== 0).reduce((acc, cur) => acc + cur, 0)\n}", "    //coding\
    \ and coding..\n    var result = 0;\n    for (var i = 0; i < lst.length; i++)\
    \ {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}", "  let sum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++){\n    if (i % 2 == 0){\n      if (lst[i] % 2 == 1){\n \
    \       sum += lst[i];\n      }\n    }\n  }\n  return sum;\n}\n", "    var sum\
    \ = 0;\n    for(var i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 &&\
    \ lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "  let sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if(i\
    \ % 2 == 0 && lst[i] % 2 == 1){\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "    let sum = 0;\n    for(let i = 0; i < lst.length; i += 2){\n       \
    \ if(lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "  // TODO: complete\n  let counter = 0;\n  let result = 0;\n  while\
    \ (counter < lst.length) {\n    if (lst[counter] % 2 === 1 && counter % 2 ===\
    \ 0) {\n      result += lst[counter];\n    }\n    counter += 1;\n  }\n  return\
    \ result;\n}\n", "  return lst.filter((e, i) => i % 2 === 0 && e % 2 !== 0).reduce((a,\
    \ e) => a + e, 0);\n}\n\nmodule.exports = {\n  solution\n}", "    var sum = 0;\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 != 0 && i % 2\
    \ == 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}", "\t\
    var sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tif(i % 2 != 0 && lst[i]\
    \ % 2 != 0){\n\t\t\tsum += lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nvar lst = [5,\
    \ 8, 7, 1];\nvar val = solution(lst);", "\tif(lst.length > 0){\n\t\treturn lst.reduce((total,\
    \ value, index) => {\n\t\t\tif(index % 2 !== 0 && value % 2 !== 0){\n\t\t\t\t\
    return total + value;\n\t\t\t} else {\n\t\t\t\treturn total;\n\t\t\t}\n\t\t},\
    \ 0);\n\t} else {\n\t\treturn 0;\n\t}\n}", "  // TODO: Get the sum of all the\
    \ odd elements in even positions\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++){\n    if(lst[i] % 2 != 0 && i % 2 == 0){\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "  let ans = 0;\n  let pos = 0;\n  while(pos < lst.length){\n\
    \    if(lst[pos] % 2 == 1 && pos % 2 == 0){\n      ans += lst[pos];\n    }\n \
    \   pos++;\n  }\n  return ans;\n}\n", "    let sum = 0;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] % 2 != 0 && i % 2 == 0){\n          \
    \  sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let i = 0;\n\
    \    let sum = 0;\n    for(let num of lst){\n        if(num % 2 == 1 && i % 2\
    \ == 0){\n            sum += num;\n        }\n        i++;\n    }\n    return\
    \ sum;\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n  \
    \      if(i % 2 == 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n      \
    \  }\n    }\n    return sum;\n}\n", "    return lst.filter((number, idx) => idx\
    \ % 2 !== 0 && number % 2 !== 0).reduce((acc, number) => acc + number, 0)\n}",
  "    let newList = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 == 0 && lst[i] % 2 != 0){\n            newList.push(lst[i]);\n        }\n\
    \    }\n    return newList.reduce((acc, x) => acc + x);\n}\n", "  var sum = 0;\n\
    \  for (var i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 != 0) {\n   \
    \   sum += lst[i];\n    }\n  }\n  return sum;\n}", "    let x = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 == 0 && lst[i] % 2 != 0){\n \
    \           x += lst[i];\n        }\n    }\n    return x;\n}\n", "    return lst.filter((_,\
    \ i) => i % 2 == 0).filter(i => i % 2 !== 0).reduce((a, b) => a + b, 0)\n}\n",
  "  let acc = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (i % 2 == 0 &&\
    \ lst[i] % 2 == 1){\n      acc += lst[i];\n    }\n  }\n  return acc;\n}\n", " \
    \   let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 ===\
    \ 0 && lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "  if(lst.length == 0) return 0;\n  var sum = 0;\n  for(let i =\
    \ 0; i < lst.length; i++){\n    if(i % 2 == 0){\n      if(lst[i] % 2 != 0){\n\
    \        sum += lst[i];\n      }\n    }\n  }\n  return sum;\n}", "  // Your code\
    \ here\n}\n", "    let odd=0\n    let ind=0\n    while(ind<lst.length){\n    \
    \    if(lst[ind]%2!==0){\n            odd+=lst[ind]\n        }\n        ind+=2\n\
    \    }\n    return odd\n}", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}", "    return lst.filter((v,i)=> i%2!==0 && v%2!==0).reduce((a,b)=>a+b,0)\n\
    }\n\nsolution([5, 8, 7, 1])\nsolution([3, 3, 3, 3, 3])\nsolution([30, 13, 24,\
    \ 321])", "  // Your code here...\n  var result = 0;\n  for(var i = 0; i < lst.length;\
    \ i++){\n    if(lst[i] % 2 !== 0 && i % 2 === 0){\n      result += lst[i];\n \
    \   }\n  }\n  return result;\n}", "  //coding and coding..\n  let counter = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 ===\
    \ 1) {\n      counter += lst[i];\n    }\n  }\n  return counter;\n}", "    return\
    \ lst.filter((val, idx) => val % 2 === 1 && idx % 2 === 0).reduce((acc, curr)\
    \ => acc + curr, 0);\n}\n\nmodule.exports = {\n    solution\n}", "  let result\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0 && lst[i]\
    \ % 2 != 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\n", " \
    \   var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 ===\
    \ 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}", "    return lst.filter((num, idx) => idx % 2 !== 0 && num % 2 !==\
    \ 0).reduce((a,b) => a + b, 0)\n}\n", "    return lst.filter((n, i) => i % 2 !==\
    \ 0 && n % 2 === 1).reduce((acc, cur) => acc + cur, 0);\n}", "  var sum = 0;\n\
    \  for (var i = 0; i < lst.length; i++) {\n    if (i % 2 == 0 && lst[i] % 2 ==\
    \ 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    let sum =\
    \ 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0 && lst[i]\
    \ % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "  //..\n  let count = 0;\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      count += lst[i];\n    }\n  }\n\
    \  return count;\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n", "  return lst.filter((e,i)=>i%2==0&&e%2==1).reduce((a,b)=>a+b,0)\n\
    }", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n        }\n   \
    \ }\n    return sum;\n}", "  if(lst.length===0){\n    return 'Array is empty';\n\
    \  }\n  var total = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i%2===0\
    \ && lst[i]%2===1){\n      total += lst[i];\n    }\n  }\n  return total;\n}\n",
  "  var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if (i % 2 == 0 &&\
    \ lst[i] % 2 != 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", " \
    \   var result = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(i %\
    \ 2 == 0 && lst[i] % 2 != 0){\n            result += lst[i];\n        }\n    }\n\
    \    return result;\n}\n", "  return lst.filter((x, i) => i % 2 === 0 && x % 2\
    \ === 1).reduce((a, b) => a + b, 0);\n}", "  let sum = 0;\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\n", "    return lst.filter((element,\
    \ index) => index % 2 != 0).filter(element => element % 2 != 0).reduce((acc, val)\
    \ => acc + val, 0);\n}", "  var sum = 0;\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 == 0 && lst[i] % 2 == 1) {\n      sum += lst[i];\n    }\n \
    \ }\n  return sum;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++) {\n        if(lst[i] % 2 !== 0 && i % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}", "    let sum = 0;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        if(i % 2 !== 0 && lst[i] % 2 !== 0){\n      \
    \      sum += lst[i];\n        }\n    }\n    return sum;\n}", "    //coding and\
    \ coding..\n    var sum = 0;\n    var isOdd = true;\n    for (var i = 0; i < lst.length;\
    \ i++) {\n        if (isOdd) {\n            sum += lst[i];\n        }\n      \
    \  isOdd = !isOdd;\n    }\n    return sum;\n}\n\nvar lst = [5, 8, 7, 1];\nvar\
    \ sum = solution(lst);", "  let sum = 0;\n  for (let i = 0; i < lst.length; i\
    \ += 2) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\n", "    return lst.filter((x, index) => index % 2 === 0 && x % 2 ===\
    \ 1).reduce((a,b) => a + b, 0)\n}\n", "    let sum = 0;\n    let index = 0;\n\
    \    while(index < lst.length){\n        if(index % 2 == 0 && lst[index] % 2 !=\
    \ 0){\n            sum += lst[index];\n        }\n        index ++;\n    }\n \
    \   return sum;\n}\n", "  //coding and coding..\n  if(lst.length === 0) {\n  \
    \  return 0;\n  }\n  var sum = 0;\n  var i = 0;\n  while(i < lst.length) {\n \
    \   if(lst[i] % 2 === 1 && i % 2 === 0) {\n      sum += lst[i];\n    }\n    i++;\n\
    \  }\n  return sum;\n}", "    return lst.filter((x, idx) => x % 2 !== 0 && idx\
    \ % 2 === 0).reduce((x,y) => x + y, 0)\n}\n", "    var sum = 0;\n    for(var i\
    \ = 0; i < lst.length; i++){\n        if(i % 2 != 0 && lst[i] % 2 != 0){\n   \
    \         sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "  var sum\
    \ = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 !== 0 && i\
    \ % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nsolution([5,\
    \ 8, 7, 1]);", "    // my code here\n    if (lst.length === 0) return 0;\n   \
    \ let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2\
    \ !== 0 && lst[i] % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n\
    \    return sum;\n}\n", "    //coding and coding..\n    let result = [];\n   \
    \ for(let i = 0; i < lst.length; i++) {\n        if(i % 2 !== 0 && lst[i] % 2\
    \ !== 0) {\n            result.push(lst[i]);\n        }\n    }\n    return result.reduce((a,\
    \ b) => a + b, 0);\n}", "    // Write your code here...\n    let evens = lst.filter((el,\
    \ index) => index % 2 == 0);\n    return evens.reduce((acc, el) => el % 2 ? acc\
    \ + el : acc, 0);\n  }\n  \n  // Tests\n  const test = require('./_test');\n \
    \ const testNum = [1];\n  let input, expected;\n  const func = solution;\n  const\
    \ sortedFunc = (...args) => func(...args).sort();                   // used when\
    \ the order of the output does not matter\n  const modFunc = (...args) => func(...args)\
    \ % 1000000007;                // used when the output is very large\n  const\
    \ lowestTest = 0 || 0;\n  const highestTest = 0 || Infinity;\n  \n  // Test case\
    \ 1\n  input = {\n    lst: [5, 8, 7, 1],\n  };\n  expected = 12;\n  test(func,\
    \ input, expected, testNum, lowestTest, highestTest);\n  \n  // Test case 2\n\
    \  input = {\n    lst: [3, 3, 3, 3, 3],\n  };\n  expected = 9;\n  test(func, input,\
    \ expected, testNum, lowestTest, highestTest);\n  \n  // Test case 3\n  input\
    \ = {\n    lst: [30, 13, 24, 321],\n  };\n  expected = 0;\n  test(func, input,\
    \ expected, testNum, lowestTest, highestTest);\n  \n  // Test case 4\n  input\
    \ = {\n    lst: [],\n  };\n  expected = 0;\n  test(func, input, expected, testNum,\
    \ lowestTest, highestTest);\n  \n  // Test case 5\n  input = {\n    lst: [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10],\n  };\n  expected = 25;\n  test(func, input, expected,\
    \ testNum, lowestTest, highestTest);\n  \n  // Test case 6\n  input = {\n    lst:\
    \ [3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n  };\n  expected = 0;\n", "    var sum =\
    \ 0;\n    for(var i = 0; i < lst.length; i+=2){\n        if(lst[i] % 2 != 0){\n\
    \            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n", "    let sum\
    \ = 0;\n    lst.forEach((num, i) => {\n        if (i % 2 === 0 && num % 2 !==\
    \ 0) {\n            sum += num;\n        }\n    });\n    return sum;\n}\n", " \
    \   return lst.filter((x, i) => i % 2 !== 0).filter(x => x % 2 !== 0).reduce((acc,\
    \ item) => acc + item, 0)\n}", "\treturn lst.filter((e,i)=>i%2&&e%2).reduce((a,b)=>a+b,0)\n\
    }", "    return lst.filter((item, index) => index % 2 === 0 && item % 2 !== 0).reduce((acc,\
    \ item) => acc + item, 0)\n}\n", "  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\n\
    \  //use reduce to add up the odd numbers in even position\n  return lst.reduce(function(total,\
    \ num, index){\n    if (num % 2 === 1 && index % 2 === 0){\n      return total\
    \ + num;\n    }\n    return total;\n  }, 0);\n}\n\nmodule.exports = {\n  solution:\
    \ solution\n};", "    return lst.filter((e,i)=>i%2==0&&e%2==1).reduce((a,b)=>a+b)\n\
    }", "  var sum = 0;\n  for (var i = 0; i < lst.length; i += 2) {\n    if (lst[i]\
    \ % 2 == 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    let\
    \ count = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 === 0\
    \ && lst[i] % 2 === 1){\n            count += lst[i];\n        }\n    }\n    return\
    \ count;\n}\n", "  return lst.filter((i, index) => index % 2 === 0 && i % 2 ===\
    \ 1).reduce((a, b) => a + b, 0);\n}\n", "    let sum = 0;\n    let counter = 0;\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 !== 0 && counter\
    \ % 2 === 0){\n            sum += lst[i];\n        }\n        counter++;\n   \
    \ }\n    return sum;\n}\n", "    let odd_sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i+=2) {\n        if (lst[i] % 2 !== 0) {\n            odd_sum += lst[i];\n \
    \       }\n    }\n    return odd_sum;\n}\n", "  let evens = [];\n  let odds =\
    \ [];\n  lst.forEach((v, i) => {\n    if (i % 2 === 0) {\n      evens.push(v);\n\
    \    } else {\n      odds.push(v);\n    }\n  });\n  return odds.reduce((a, b)\
    \ => a + b, 0);\n}", "\tlet sum = 0;\n\tlet counter = 0;\n\twhile(counter < lst.length){\n\
    \t\tif(counter % 2 === 0 && lst[counter] % 2 !== 0){\n\t\t\tsum += lst[counter];\n\
    \t\t}\n\t\tcounter++;\n\t}\n\treturn sum;\n}", "  var sum = 0;\n  var idx = 0;\n\
    \  while (idx < lst.length) {\n    if (lst[idx] % 2 != 0 && idx % 2 == 0) {\n\
    \      sum += lst[idx];\n    }\n    idx += 1;\n  }\n  return sum;\n}\n", "   \
    \ // Your code here\n    sum=0;\n    for(let i=0;i<lst.length;i++)\n    {\n  \
    \      if(i%2==0)\n        {\n            if(lst[i]%2!=0)\n            {\n   \
    \             sum+=lst[i];\n            }\n        }\n    }\n    return sum;\n\
    }\n", "    var sum = 0;\n    var index = 0;\n    while(index < lst.length){\n\
    \        if(lst[index] % 2 == 1 && index % 2 == 0){\n            sum += lst[index];\n\
    \        }\n        index += 1;\n    }\n    return sum;\n}", "    var sum = 0;\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(lst[i] % 2 !== 0 && i %\
    \ 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
  "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i % 2 ==\
    \ 0 && lst[i] % 2 != 0){\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "let sum = 0;\nfor(let i = 0; i < lst.length; i++){\n    if(i %\
    \ 2 === 0 && lst[i] % 2 !== 0){\n        sum += lst[i];\n    }\n}\nreturn sum;\n\
    }", "let sum = 0;\nfor(let i = 0; i < lst.length; i++){\n  if(i % 2 === 0 && lst[i]\
    \ % 2 !== 0){\n    sum = sum + lst[i];\n  }\n}\nreturn sum;\n}", "  var count\
    \ = 0;\n  for(var i = 0; i < lst.length; i++){\n    if(i % 2 === 0 && lst[i] %\
    \ 2 === 1){\n      count += lst[i];\n    }\n  }\n  return count;\n}\n", "    var\
    \ sum = 0;\n    lst.forEach(function(ele, index){\n        if(ele % 2 !== 0 &&\
    \ index % 2 === 0){\n            sum += ele;\n        }\n    });\n    return sum;\n\
    }\n", "  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      oddSum += lst[i];\n    }\n  }\n  return\
    \ oddSum;\n}", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++) {\n\
    \        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n  \
    \      }\n    }\n    return sum;\n}\n", "    return lst.filter((num, index) =>\
    \ index % 2 === 0 && num % 2 === 1).reduce((sum, num) => sum + num, 0);\n}", " \
    \ // i dont remember how to use the filter method, but i know how to do it without\n\
    \  let sum = 0;\n  for (let i = 0; i < lst.length; i++){\n    if (i % 2 === 0){\n\
    \      if (lst[i] % 2 === 1){\n        sum += lst[i];\n      }\n    }\n  }\n \
    \ return sum;\n}", "  let result = 0;\n  for (let i = 0; i < lst.length; i++){\n\
    \    if (i % 2 === 0 && lst[i] % 2 !== 0){\n      result += lst[i];\n    }\n \
    \ }\n  return result;\n}", "    let sum = 0;\n    let index = 0;\n    for(let\
    \ i=0; i<lst.length; i++){\n        if(i%2!==0){\n            if(lst[i]%2===0){\n\
    \                sum+=lst[i];\n            }\n        }\n    }\n    return sum;\n\
    }", "    // TODO: write your code here\n}\n\nmodule.exports = { solution }", "\t\
    return lst.filter((a, i) => a % 2 === 1 && i % 2 === 0).reduce((a, b) => a + b,\
    \ 0);\n}", "    var res = 0;\n    for(var i = 0; i < lst.length; i++){\n     \
    \   if(lst[i] % 2 == 1 && i % 2 == 0){\n            res += lst[i];\n        }\n\
    \    }\n    return res;\n}", "    let sum = 0;\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] % 2 !== 0 && i % 2 === 0){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < lst.length; i += 2) {\n    if (lst[i] % 2 !== 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}", "    var sum = 0;\n    var i = 0;\n    while (i\
    \ < lst.length){\n        if (lst[i] % 2 == 1 && i % 2 == 0){\n            sum\
    \ += lst[i];\n        }\n        i += 1;\n    }\n    return sum;\n}", "  let sum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 && lst[i]\
    \ % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    let\
    \ result = 0;\n    let arr = []\n    for(let i = 0; i < lst.length; i++){\n  \
    \      arr.push(lst[i])\n    }\n    for(let i = 0; i < arr.length; i += 2){\n\
    \        if(arr[i] % 2 === 1){\n            result += arr[i]\n        }\n    }\n\
    \    return result\n  }\n  // solution([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  //\
    \ solution([5, 8, 7, 1])\n  // solution([3, 3, 3, 3, 3])\n  // solution([30, 13,\
    \ 24, 321])\n\n\n  //Given an array of numbers and a single number, return the\
    \ index of the first matching number.\n  // Examples\n  // >>> solution([2, 3,\
    \ 4, 5, 6, 1], 6)\n  // 4\n  // >>> solution([2, 3, 4, 5, 6, 1], 9)\n  // -1\n\
    \  // >>> solution([2, 3, 4, 5, 6, 1], 1)\n  // 5\n  function solution(lst, target){\n\
    \    for(let i = 0; i < lst.length; i++){\n        if(lst[i] === target){\n  \
    \          return i\n        }\n    }\n    return -1\n  }\n  // solution([2, 3,\
    \ 4, 5, 6, 1], 6)\n  // solution([2, 3, 4, 5, 6, 1], 9)\n  // solution([2, 3,\
    \ 4, 5, 6, 1], 1)\n  // solution([2, 3, 4, 5, 6, 1], 2)\n\n\n  //Given an array\
    \ of numbers and an index, return the index of the nearest number in the array\
    \ to the given index that is larger than the number at the given index.\n  //\
    \ Examples\n  // >>> solution([1, 2, 3, 2, 1], 2)\n  // 2\n  // >>> solution([1,\
    \ 2, 4, 4, 2, 1], 2)\n  // 4\n  // >>> solution([1, 2, 3, 4, 5, 6, 7, 8, 9,",
  "    return lst.filter((val, idx) => idx % 2 === 0).filter(x => x % 2 != 0).reduce((acc,\
    \ val) => acc + val, 0)\n}", "  // good luck!\n  let solution = 0;\n  for (let\
    \ i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 1) {\n      solution\
    \ += lst[i];\n    }\n  }\n  return solution;\n}\n", "  return lst.filter((num,\
    \ index) => index % 2 === 0 && num % 2 === 1).reduce((a, b) => a + b);\n}", "\t\
    var result = 0;\n\tfor (var i = 0; i < lst.length; i++) {\n\t\tif(i % 2 === 0\
    \ && lst[i] % 2 !== 0){\n\t\t\tresult += lst[i];\n\t\t}\n\t}\n\treturn result;\n\
    }", "    let result = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 === 0 && lst[i] % 2 !== 0){\n            result += lst[i];\n        }\n\
    \    }\n    return result;\n}", "    //coding and coding..\n    let oddArr = [];\n\
    \    let sum = 0;\n    lst.forEach((e,i) => {\n        if(e % 2 !== 0 && i % 2\
    \ === 0){\n            oddArr.push(e);\n        }\n    });\n    oddArr.forEach(e\
    \ => {\n        sum += e;\n    });\n    return sum;\n}", "    return lst.filter((_,\
    \ i) => i % 2 !== 0 && _ % 2 !== 0).reduce((acc, v) => acc + v, 0)\n}", "    //coding\
    \ and coding..\n    return lst.filter((item, index) => index % 2 === 0 && item\
    \ % 2 !== 0).reduce((a,b) => a + b, 0);\n}", "\treturn lst.filter((num,i)=>i%2==0).filter(num=>num%2==1).reduce((acc,val)=>acc+val,0)\n\
    }", "    //Code goes here\n    return lst.filter((e, i) => i % 2 == 0).filter(e\
    \ => e % 2 == 1).reduce((a, b) => a + b, 0);\n}\n", "  // Write your code here\n\
    \  let counter = 0;\n  for (let i = 0; i < lst.length; i++){\n    if(i % 2 ===\
    \ 0 && lst[i] % 2 !== 0){\n      counter += lst[i];\n    }\n  }\n  return counter;\n\
    }", "  let sum = 0;\n  lst.map((ele, idx) => {\n    idx % 2 === 0 && ele % 2 !==\
    \ 0 ? sum += ele : 0;\n  });\n  return sum;\n}", "  return lst.filter((val, index)\
    \ => index % 2 === 0 && val % 2 !== 0).reduce((acc, curr) => acc + curr);\n}",
  "    var sum = 0;\n    for(var i = 0; i < lst.length; i++) {\n        if(i % 2 ==\
    \ 0 && lst[i] % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return\
    \ sum;\n}\n", "    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n  \
    \      if(i % 2 === 0 && lst[i] % 2 !== 0){\n            sum += lst[i];\n    \
    \    }\n    }\n    return sum;\n}", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0 && lst[i] % 2 !== 0) {\n      sum += lst[i];\n \
    \   }\n  }\n  return sum;\n}\n", "     let new_list = [];\n     for(let i = 0;\
    \ i < lst.length; i++){\n          if(i % 2 == 0 && lst[i] % 2 != 0){\n      \
    \         new_list.push(lst[i]);\n          }\n     }\n     return new_list.reduce((a,b)\
    \ => a + b);\n}", "  return lst.filter((x, i) => i % 2 != 0 && x % 2 != 0).reduce((x,\
    \ y) => x + y, 0);\n}", "  var sum = 0;\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 === 0 && lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
