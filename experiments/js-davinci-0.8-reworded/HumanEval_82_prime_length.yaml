name: HumanEval_82_prime_length
language: js
prompt: "//Write a function that takes a string and returns true if the string\n//\
  \ length is a prime number or false otherwise\n// Examples\n// >>> prime_length(\"\
  Hello\")\n// true\n// >>> prime_length(\"abcdcba\")\n// true\n// >>> prime_length(\"\
  kittens\")\n// true\n// >>> prime_length(\"orange\")\n// false\nfunction prime_length(string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = prime_length;\n  assert.deepEqual(candidate(\"Hello\"),true);\n  assert.deepEqual(candidate(\"\
  abcdcba\"),true);\n  assert.deepEqual(candidate(\"kittens\"),true);\n  assert.deepEqual(candidate(\"\
  orange\"),false);\n  assert.deepEqual(candidate(\"wow\"),true);\n  assert.deepEqual(candidate(\"\
  world\"),true);\n  assert.deepEqual(candidate(\"MadaM\"),true);\n  assert.deepEqual(candidate(\"\
  Wow\"),true);\n  assert.deepEqual(candidate(\"\"),false);\n  assert.deepEqual(candidate(\"\
  HI\"),true);\n  assert.deepEqual(candidate(\"go\"),true);\n  assert.deepEqual(candidate(\"\
  gogo\"),false);\n  assert.deepEqual(candidate(\"aaaaaaaaaaaaaaa\"),false);\n  assert.deepEqual(candidate(\"\
  Madam\"),true);\n  assert.deepEqual(candidate(\"M\"),false);\n  assert.deepEqual(candidate(\"\
  0\"),false);\n}\n\ntest();"
completions: ["    var prime = true;\n    for(i=2; i<string.length; i++){\n      \
    \  if(string.length % i == 0){\n            prime = false;\n        }\n    }\n\
    \    return prime;\n}\n", "    let length = string.length;\n    let primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199];\n    if (primes.includes(length)){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}", "  const\
    \ length = string.length;\n  return is_prime(length);\n}\n", "    var len = string.length;\n\
    \    for(var i = 2; i < len; i++){\n        if(len % i === 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}", "    const result = string.length;\n\
    \    let prime = true;\n    if (result === 1 || result === 0) {\n        prime\
    \ = false;\n    }\n    else {\n        for (let i = 2; i < result; i++) {\n  \
    \          if (result % i === 0) {\n                prime = false;\n         \
    \   }\n        }\n    }\n    return prime;\n}\n", "    var num = string.length;\n\
    \    if (num % 2 == 0) {\n        return false;\n    }\n    for (var i = 3; i\
    \ <= Math.sqrt(num); i += 2) {\n        if (num % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "    if(is_prime(string.length)){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\n", " \
    \ if (string.length % 2 === 0) {\n    return false;\n  }\n  return true;\n}\n",
  "\tvar length = string.length;\n\tvar i = 2;\n\tif (length === 1){\n\t\treturn false;\n\
    \t}\n\twhile (i<length){\n\t\tif (length%i===0){\n\t\t\treturn false;\n\t\t}\n\
    \t\ti+=1;\n\t}\n\treturn true;\n}", "  var prime = false;\n  var length = string.length;\n\
    \  if (length == 2 || length == 3 || length == 5 || length == 7){\n    prime =\
    \ true;\n  }\n  return prime;\n}\n", "  // body...\n  var length = string.length;\n\
    \  for (var i = length - 1; i >= 2; i--) {\n    if (length % i === 0) {\n    \
    \  return false;\n    }\n  }\n  return true;\n}\n", "    if(string.length == 2\
    \ || string.length == 3 || string.length == 5 || string.length == 7) {\n     \
    \   return true;\n    } else {\n        return false;\n    }\n}\n", "\tvar string\
    \ = string.length;\n\tfor(var i = 2; i < string - 1; i++){\n\t\tif(string % i\
    \ === 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\n", "\tvar length\
    \ = string.length;\n\tfor(var i = 2; i < length; i++){\n\t\tif(length % i ===\
    \ 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "\tif (string.length%2===0\
    \ || string.length%3===0 || string.length%5===0) {\n\t\treturn false;\n\t} else\
    \ {\n\t\treturn true;\n\t}\n}", "  if (string.length == 2 || string.length ==\
    \ 3 || string.length == 5) {\n    return true;\n  }\n  return false;\n}", "  \
    \  let str = string.length;\n    let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199];\n    if (primes.includes(str)){\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}", "    // your code here\n}\n", "    function\
    \ isPrime(num){\n        var divisor = 2;\n        while (num > divisor){\n  \
    \          if(num % divisor == 0){\n             return false;\n            }\n\
    \            else\n                divisor++;\n        }\n        return true;\n\
    \    }\n    if(isPrime(string.length)){\n        return true;\n    }\n    else{\n\
    \        return false;\n    }\n}\n", "  if (is_prime(string.length)){\n    return\
    \ true;\n  }\n  else{\n    return false;\n  }\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
