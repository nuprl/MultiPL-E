name: HumanEval_130_tri
language: js
prompt: "//Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n// the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n// Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n\
  // tri(n) = 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) =\
  \ 3\n// tri(3) = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given\
  \ a non-negative integer number n, you have to a return an array of the \n// first\
  \ n + 1 numbers of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// [1,\
  \ 3, 2, 8]\nfunction tri(n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = tri;\n  assert.deepEqual(candidate(3),[1, 3, 2, 8]);\n  assert.deepEqual(candidate(4),[1,\
  \ 3, 2, 8, 3]);\n  assert.deepEqual(candidate(5),[1, 3, 2, 8, 3, 15]);\n  assert.deepEqual(candidate(6),[1,\
  \ 3, 2, 8, 3, 15, 4]);\n  assert.deepEqual(candidate(7),[1, 3, 2, 8, 3, 15, 4, 24]);\n\
  \  assert.deepEqual(candidate(8),[1, 3, 2, 8, 3, 15, 4, 24, 5]);\n  assert.deepEqual(candidate(9),[1,\
  \ 3, 2, 8, 3, 15, 4, 24, 5, 35]);\n  assert.deepEqual(candidate(20),[1, 3, 2, 8,\
  \ 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]);\n  assert.deepEqual(candidate(0),[1]);\n\
  \  assert.deepEqual(candidate(1),[1, 3]);\n}\n\ntest();"
completions: ["  var triArray = [1, 3, 2, 8];\n  var triN = 0;\n  if (n < triArray.length)\
    \ {\n    return triArray.slice(0, n + 1);\n  } else {\n    while (triArray.length\
    \ <= n) {\n      if (triArray.length % 2 === 0) {\n        triN = 1 + triArray.length\
    \ / 2;\n      } else {\n        triN = triArray[triArray.length - 3] + triArray[triArray.length\
    \ - 2] + triArray[triArray.length - 1];\n      }\n      triArray.push(triN);\n\
    \    }\n    return triArray;\n  }\n}", "  //your code here\n  var result = [];\n\
    \  var count = 1;\n  while(count <= n){\n    if(count === 1){\n      result.push(3);\n\
    \    }\n    else if(count === 2){\n      result.push(2);\n    }\n    else if(count\
    \ === 3){\n      result.push(8);\n    }\n    else if(count % 2 === 0){\n     \
    \ result.push(result[count - 2] + result[count - 1] + result[count - 3] );\n \
    \   }\n    else{\n      result.push(1 + (count / 2));\n    }\n    count++;\n \
    \ }\n  return result;\n}", "  var Tribonacci = [0,1,3,2];\n  for(var i = 0; i\
    \ < n; i++){\n    Tribonacci.push(Tribonacci[i] + Tribonacci[i+1] + Tribonacci[i+2])\n\
    \  }\n  return Tribonacci.slice(0,n+1);\n}", "  let t = [1, 3, 2];\n  if (n ===\
    \ 1) { return [1] }\n  if (n === 2) { return [1, 3] }\n  if (n === 3) { return\
    \ [1, 3, 2] }\n  if (n > 3) {\n    for (let i = 4; i <= n; i++) {\n      if (i\
    \ % 2 === 0) {\n        t.push(1 + i / 2);\n      } else {\n        t.push(t[i\
    \ - 2] + t[i - 1] + t[i - 4]);\n      }\n    }\n  }\n  return t;\n}", "\tif(n\
    \ === 1){\n\t\treturn [1, 3]\n\t}\n\tif(n === 2){\n\t\treturn [1, 3, 2]\n\t}\n\
    \tif(n === 3){\n\t\treturn [1, 3, 2, 8]\n\t}\n\telse{\n\t\tlet answer = [1, 3,\
    \ 2, 8]\n\t\tfor(i = 4; i <= n; i++){\n\t\t\tif(i % 2 === 0){\n\t\t\t\tanswer.push(1\
    \ + (i / 2))\n\t\t\t}\n\t\t\telse{\n\t\t\t\tanswer.push(answer[i - 1] + answer[i\
    \ - 2] + answer[i + 1])\n\t\t\t}\n\t\t}\n\t\treturn answer\n\t}\n}\n", "  var\
    \ arr = [];\n  var seq = function(num){\n    if(num === 0){\n      return 1;\n\
    \    }\n    if(num % 2 === 0){\n      return 1 + num / 2;\n    }\n    return seq(num\
    \ - 1) + seq(num - 2) + seq(num + 1);\n  };\n  for(var i = 0; i <= n; i++){\n\
    \    arr.push(seq(i));\n  }\n  return arr;\n}\n", "    if(n === 0) return [1];\n\
    \    if(n === 1) return [1, 3];\n    if(n === 2) return [1, 3, 2];\n    let result\
    \ = [1, 3, 2];\n    for(let i = 3; i <= n; i++){\n        let newValue = 0;\n\
    \        if(i % 2 === 0){\n            newValue = 1 + (i / 2);\n        } else\
    \ {\n            newValue = result[i - 1] + result[i - 2] + result[i + 1];\n \
    \       }\n        result.push(newValue);\n    }\n    return result;\n}", "\t\
    var output = [1, 3, 2];\n\tvar flag = 1;\n\twhile(output.length < n + 1){\n\t\t\
    var value = output[output.length - 1] + output[output.length - 2] + output[output.length\
    \ - 3];\n\t\toutput.push(value);\n\t}\n\treturn output;\n}\n", "  // inicializamos\
    \ el array a devolver con los 3 primeros numeros de la serie\n  let tri = [1,\
    \ 3, 2];\n  // si el numero es 0 (0! = 1)\n  if(n === 0){\n    // devolvemos el\
    \ array solo con un elemento (1)\n    return [1];\n  }\n  // si el numero es 1\
    \ (1! = 1)\n  if(n === 1){\n    // devolvemos el array solo con un elemento (1)\n\
    \    return [1, 1];\n  }\n  // si el numero es 2 (2! = 2)\n  if(n === 2){\n  \
    \  // devolvemos el array solo con dos elementos (1, 1)\n    return [1, 1, 1];\n\
    \  }\n  // si el numero es 3 (3! = 6)\n  if(n === 3){\n    // devolvemos el array\
    \ con los tres primeros numeros de la serie\n    return [1, 1, 1, 3];\n  }\n \
    \ // si el numero es mayor que 3\n  if(n > 3){\n    // iteramos desde el numero\
    \ 4 hasta el numero que se paso como parametro\n    for(let i = 4; i <= n; i++){\n\
    \      // si el numero es par\n      if(i % 2 === 0){\n        // calculamos el\
    \ numero de la serie\n        let num = 1 + i / 2;\n        // a\xF1adimos el\
    \ numero al array\n        tri.push(num);\n      }\n      // si el numero es impar\n\
    \      if(i % 2 === 1){\n        // calculamos el numero de la serie\n       \
    \ let num = tri[i - 1] + tri[i - 2] + tri[i + 1];\n        // a\xF1adimos el numero\
    \ al array\n        tri.push(num);\n      }\n    }\n  }\n  // devolvemos el array\n\
    \  return tri;\n}", "  let arr = []\n  for(let i = 0; i <= n; i++){\n    if(i\
    \ === 0){\n      arr.push(1)\n    } else if(i === 1){\n      arr.push(3)\n   \
    \ } else if(i === 2){\n      arr.push(2)\n    } else if(i % 2 !== 0){\n      arr.push(arr[i\
    \ - 3] + arr[i - 2] + arr[i - 1])\n    } else if(i % 2 === 0){\n      arr.push(1\
    \ + i / 2)\n    }\n  }\n  return arr\n}\n", "  if (n === 0) {\n    return [1];\n\
    \  }\n  if (n === 1) {\n    return [1, 3];\n  }\n  if (n === 2) {\n    return\
    \ [1, 3, 2];\n  }\n  return [1, 3, 2, tri(n - 1)[tri(n - 1).length - 1] + tri(n\
    \ - 1)[tri(n - 1).length - 2] + tri(n - 1)[tri(n - 1).length - 3]];\n}\n", " \
    \   let arr = [1, 3, 2, 8];\n    for(let i = 4; i <= n; i++){\n        arr.push(i\
    \ % 2 ? arr[i - 1] + arr[i - 2] + arr[i + 1] : 1 + i / 2);\n    }\n    return\
    \ arr.slice(0, n + 1);\n}", "    if(n === 0) return []\n    if(n === 1) return\
    \ [1]\n    if(n === 2) return [1, 1]\n    return [1, 1, 1, 2, 4, 7, 13, 24, 44,\
    \ 81, 149, 274, 504, 927, 1705, 3136, 5768, 10609, 19513, 35890, 66012, 121415,\
    \ 223317, 410744, 755476, 1389537, 2555757, 4700770, 8646064, 15902591, 29249425,\
    \ 53798080, 98950096, 181997601, 334745777, 615693474, 1132436852, 2082876103]\n\
    }", "  let arr = [0, 1, 3, 2, 8];\n  for (let i = 5; i <= n; i++) {\n    arr[i]\
    \ = arr[i - 1] + arr[i - 2] + arr[i - 3];\n  }\n  return arr.slice(0, n + 1);\n\
    }", "    if(n <= 0) return [];\n    var arr = [1, 3, 2];\n    for(var i = 3; i\
    \ <= n; i++){\n        arr.push( i % 2 == 0 ? Math.floor( 1 + i / 2 ) : arr[i\
    \ - 2] + arr[i - 1] + arr[i + 1]);\n    }\n    return arr;\n}\n", "    let result\
    \ = [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 === 0) {\n\
    \            result.push(1 + i / 2);\n        } else {\n            result.push(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n        }\n    }\n    return result;\n\
    }", "  var tribonacci = [1, 3, 2];\n  for (var i = 3; i <= n; i++) {\n    if (n\
    \ % 2 === 0) {\n      tribonacci.push(1 + n / 2);\n    } else {\n      tribonacci.push(tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i + 1]);\n    }\n  }\n  return tribonacci;\n\
    }", "  var arr = [1, 3, 2];\n  var i = 1;\n  while (arr.length - 1 < n) {\n  \
    \  if (i % 2 === 0) {\n      arr.push(i / 2 + 1);\n    } else {\n      arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1]);\n    }\n    i++;\n  }\n  return arr;\n}", " \
    \ let seq = [];\n  for (let i = 1; i <= n; i++) {\n    seq.push(tribonacci(i));\n\
    \  }\n  return seq;\n}\n", "    let temp = n;\n    let tria = [];\n    for(let\
    \ i = 0; i < n + 1; i++){\n        if(temp == 1){\n            tria.push(3);\n\
    \        }else if(temp % 2 == 0){\n            tria.push(1 + temp / 2);\n    \
    \    }else{\n            tria.push(tria[tria.length - 1] + tria[tria.length -\
    \ 2] + tria[tria.length - 3]);\n        }\n        temp--;\n    }\n    return\
    \ tria;\n}", "\tlet arr = [1, 3, 2, 8];\n\tif (n == 0) return [1];\n\tif (n <=\
    \ 3) return arr.slice(0, n + 1);\n\tfor (let i = 4; i <= n; i++) {\n\t\tarr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i - 3]);\n\t}\n\treturn arr;\n}\n", "    var tribonacci\
    \ = [1, 3, 2];\n    if (n <= 2) {\n        return tribonacci.slice(0, n + 1);\n\
    \    } else {\n        for (var i = 3; i <= n; i++) {\n            if (i % 2 ===\
    \ 0) {\n                tribonacci.push(1 + i / 2);\n            } else {\n  \
    \              tribonacci.push(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i\
    \ + 1]);\n            }\n        }\n    }\n    return tribonacci;\n}\n", "var\
    \ tribonacci =[1,3,2];\n    for(var i=3; i<=n; i++){\n        tribonacci.push(tribonacci[i-1]+tribonacci[i-2]+tribonacci[i-3]);\n\
    \    }\n    return tribonacci;\n}", "\tlet result = [];\n\tfunction tribonacci(n)\
    \ {\n\t\tif (n === 1) {\n\t\t\treturn 3;\n\t\t} else if (n === 2) {\n\t\t\treturn\
    \ 2;\n\t\t} else if (n === 3) {\n\t\t\treturn 1;\n\t\t} else if (n%2 === 0) {\n\
    \t\t\treturn tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3);\n\t\t} else\
    \ {\n\t\t\treturn 1 + n/2;\n\t\t}\n\t}\n\tif (n === 0) {\n\t\treturn [1];\n\t\
    } else {\n\t\tfor (let i = 1; i <= n+1; i++) {\n\t\t\tresult.push(tribonacci(i));\n\
    \t\t}\n\t\treturn result;\n\t}\n}", "  let index = 3;\n  let triSeq = [1,3,2];\n\
    \  while(index <= n){\n    if(index % 2 == 0){\n      triSeq.push(1 + (index /\
    \ 2));\n    } else {\n      triSeq.push(triSeq[index - 1] + triSeq[index - 2]\
    \ + triSeq[index + 1]);\n    }\n    index++;\n  }\n  return triSeq;\n}", "  if\
    \ (n === 0) {\n    return [1];\n  } else if (n === 1) {\n    return [1, 3];\n\
    \  } else if (n === 2) {\n    return [1, 3, 2];\n  } else {\n    let arr = [1,\
    \ 3, 2];\n    while (arr.length <= n) {\n      let count = 0;\n      for (let\
    \ i = arr.length - 1; i >= arr.length - 3; i--) {\n        count += arr[i];\n\
    \      }\n      arr.push(count);\n    }\n    return arr;\n  }\n}\n", "  var result\
    \ = [];\n  for (var i = 0; i <= n; i++) {\n    if (i === 0) {\n      result.push(1);\n\
    \    } else if (i === 1) {\n      result.push(3);\n    } else if (i === 2) {\n\
    \      result.push(2);\n    } else if (i % 2 === 0) {\n      result.push(1 + (i\
    \ / 2));\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n    }\n  }\n  return result;\n}", "    var res = [];\n    var arr =\
    \ [1,3,2];\n    if(n === 0){\n        return [1];\n    }\n    if(n === 1){\n \
    \       return [1,3];\n    }\n    if(n === 2){\n        return [1,3,2];\n    }\n\
    \    for(var i = 0; i < n; i++){\n        var next = arr[0] + arr[1] + arr[2];\n\
    \        arr.push(next);\n        arr.shift();\n    }\n    res = [1,3,2];\n  \
    \  for(var j = 0; j < n; j++){\n        res.push(arr[j]);\n    }\n    return res;\n\
    }", "  var seq = [];\n  for (var i = 0; i <= n; i++) {\n    if (i === 0) {\n \
    \     seq.push(1);\n    } else if (i === 1) {\n      seq.push(3);\n    } else\
    \ if (i === 2) {\n      seq.push(2);\n    } else if (i % 2 === 0) {\n      seq.push(1\
    \ + i / 2);\n    } else {\n      seq.push(seq[i - 1] + seq[i - 2] + seq[i + 1]);\n\
    \    }\n  }\n  return seq;\n}\n", "  var result = [];\n  if (n == 1) {\n    result.push(1);\n\
    \    result.push(3);\n    return result;\n  }\n  if (n == 2) {\n    result.push(1);\n\
    \    result.push(3);\n    result.push(2);\n    return result;\n  }\n  if (n ==\
    \ 3) {\n    result.push(1);\n    result.push(3);\n    result.push(2);\n    result.push(8);\n\
    \    return result;\n  }\n  result.push(1);\n  result.push(3);\n  result.push(2);\n\
    \  result.push(8);\n  var odd = true;\n  var prev1 = 2;\n  var prev2 = 8;\n  var\
    \ next = 11;\n  for (var i = 4; i <= n; i++) {\n    if (odd) {\n      next = i\
    \ + (i / 2);\n      odd = false;\n    } else {\n      next = prev1 + prev2 + next;\n\
    \      odd = true;\n    }\n    result.push(next);\n    prev2 = prev1;\n    prev1\
    \ = next;\n  }\n  return result;\n}", "  const arr = [1, 3, 2, 8];\n  const isEven\
    \ = n => n % 2 === 0;\n  if (n === 0) return [1];\n  if (n === 1) return [1, 3];\n\
    \  if (n === 2) return [1, 3, 2];\n  if (n === 3) return [1, 3, 2, 8];\n  let\
    \ nextNum;\n  for (let i = 4; i <= n; i++) {\n    if (isEven(i)) {\n      nextNum\
    \ = 1 + i / 2;\n    } else {\n      nextNum = arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1];\n    }\n    arr.push(nextNum);\n  }\n  return arr;\n}\n", "    if(n ===\
    \ 0) {\n        return [1]\n    }\n    if(n === 1) {\n        return [1, 3]\n\
    \    }\n    if(n === 2) {\n        return [1, 3, 2]\n    }\n    let arr = [1,\
    \ 3, 2]\n    for(let i = 3; i <= n; i++) {\n        if(i % 2 !== 0) {\n      \
    \      arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3])\n        } else {\n    \
    \        arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1])\n        }\n    }\n  \
    \  return arr\n}", "\tvar tribonacci = [];\n\tfor (var i = 0; i <= n; i++) {\n\
    \t\tif (i < 2) {\n\t\t\ttribonacci.push(1);\n\t\t} else if (i === 2) {\n\t\t\t\
    tribonacci.push(3);\n\t\t} else if (i % 2 === 0) {\n\t\t\ttribonacci.push(1 +\
    \ i / 2);\n\t\t} else {\n\t\t\ttribonacci.push(tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i + 1]);\n\t\t}\n\t}\n\treturn tribonacci;\n}\n", "  var i\
    \ = 1;\n  var triArr = [1, 3, 2];\n  var lastThree = [1, 3, 2];\n  var tribonacci\
    \ = 0;\n  for (i; i < n; i++) {\n    if (i % 2 == 0) {\n      tribonacci = 1 +\
    \ i / 2;\n    } else {\n      tribonacci = lastThree[0] + lastThree[1] + lastThree[2];\n\
    \      lastThree[0] = lastThree[1];\n      lastThree[1] = lastThree[2];\n    \
    \  lastThree[2] = tribonacci;\n    }\n    triArr.push(tribonacci);\n  }\n  return\
    \ triArr;\n}", "  // your code here\n  if(n === 0) return [1];\n  if(n === 1)\
    \ return [1, 3];\n  if(n === 2) return [1, 3, 2];\n  let arr = [1, 3, 2];\n  let\
    \ next = 1 + 2/2;\n  for(let i = 3; i <= n; i++){\n    if(i % 2 === 0){\n    \
    \  next = 1 + i/2;\n    } else {\n      next = arr[i-1] + arr[i-2] + arr[i-3];\n\
    \    }\n    arr.push(next);\n  }\n  return arr;\n}\n", "    if(n === 0) return\
    \ [1];\n    let arr = [1, 3, 2];\n    let i = 0;\n    while(i < n - 2){\n    \
    \    if(i % 2 === 0){\n            arr.push(arr[i] + arr[i + 1] + arr[i + 2]);\n\
    \        }else{\n            arr.push(arr[i] + arr[i + 1] + arr[i - 1]);\n   \
    \     }\n        i++;\n    }\n    return arr;\n}", "    let output = [1, 3, 2];\n\
    \    let last = 2;\n    let beforeLast = 3;\n    let secondToLast = 1;\n    if\
    \ (n === 0) return [];\n    if (n < 3) return output.slice(0, n + 1);\n    for\
    \ (let i = 3; i <= n; i++) {\n        if (i % 2 !== 0) {\n            last = last\
    \ + beforeLast + secondToLast;\n            output.push(last);\n            secondToLast\
    \ = beforeLast;\n            beforeLast = last;\n        } else {\n          \
    \  last = 1 + i / 2;\n            output.push(last);\n            secondToLast\
    \ = beforeLast;\n            beforeLast = last;\n        }\n    }\n    return\
    \ output;\n}\n", "    var tribonacci = [1, 3, 2];\n    if (n >= 3) {\n       \
    \ for (i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                tribonacci.push(1\
    \ + i / 2);\n            } else {\n                tribonacci.push(tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i + 1]);\n            }\n        }\n \
    \   }\n    return tribonacci;\n}\n", "  var arr = [];\n  for (var i = 0; i <=\
    \ n; i++) {\n    if (i == 0) {\n      arr.push(1);\n    } else if (i == 1) {\n\
    \      arr.push(3);\n    } else if (i == 2) {\n      arr.push(2);\n    } else\
    \ if (i % 2 == 0) {\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}", "    let fib=[1,3,2];\n\
    \    for(let i=3;i<=n;i++){\n      if(i%2==0){\n        fib.push(1+i/2);\n   \
    \   }\n      else{\n        fib.push(fib[i-1]+fib[i-2]+fib[i+1]);\n      }\n \
    \   }\n    return fib;\n}", "  var fib = [];\n  if (n <= 0) {\n    return fib;\n\
    \  }\n  else if (n == 1) {\n    fib.push(1);\n    fib.push(3);\n    return fib;\n\
    \  }\n  else if (n == 2) {\n    fib.push(1);\n    fib.push(3);\n    fib.push(2);\n\
    \    return fib;\n  }\n  else {\n    fib.push(1);\n    fib.push(3);\n    fib.push(2);\n\
    \    var last3 = [1, 3, 2];\n    for (var i = 3; i <= n; i++) {\n      if (i %\
    \ 2 == 0) {\n        fib.push(1 + (i / 2));\n        last3.push(1 + (i / 2));\n\
    \        last3.shift();\n      }\n      else {\n        fib.push(last3[0] + last3[1]\
    \ + last3[2]);\n        last3.push(last3[0] + last3[1] + last3[2]);\n        last3.shift();\n\
    \      }\n    }\n    return fib;\n  }\n}", "    if(n===0){\n        return []\n\
    \    }\n    if(n===1){\n        return [1]\n    }\n    if(n===2){\n        return\
    \ [1,3]\n    }\n    let arr = [1,3,2,8]\n    for(let i = 4; i <= n; i++){\n  \
    \      arr.push(arr[i-1] + arr[i-2] + arr[i-3])\n    }\n    return arr\n}\n",
  "  let tribs = [];\n  let tri = function(n){\n    if(n <= 0){\n      return 0;\n\
    \    } else if(n == 1){\n      return 3;\n    } else if(n == 2){\n      return\
    \ 2;\n    } else if(n % 2 == 0){\n      return 1 + n / 2;\n    } else if(n % 2\
    \ == 1){\n      return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    }\n  }\n  for(let\
    \ i = 0; i <= n; i++){\n    tribs.push(tri(i));\n  }\n  return tribs;\n}", " \
    \   var array = [1, 3, 2];\n    for (var i = 0; i < n - 2; i++) {\n        array.push(array[i]\
    \ + array[i + 1] + array[i + 2]);\n    }\n    return array;\n}", "  var trib =\
    \ [1, 3, 2];\n  if (n < 2) {\n    return [1];\n  }\n  else if (n < 3) {\n    return\
    \ [1, 3];\n  }\n  else if (n < 4) {\n    return [1, 3, 2];\n  }\n  else {\n  \
    \  for (var i = 3; i < n + 1; i++) {\n      if (i % 2 === 0) {\n        trib.push(1\
    \ + (i / 2));\n      }\n      else {\n        trib.push(trib[i - 1] + trib[i -\
    \ 2] + trib[i + 1]);\n      }\n    }\n  }\n  return trib;\n}\n", "  //your code\
    \ here\n  var tribArray = [];\n  if (n === 1) {\n    tribArray.push(1, 3, 2);\n\
    \  } else if (n === 2) {\n    tribArray.push(1, 3, 2, 8);\n  } else if (n ===\
    \ 3) {\n    tribArray.push(1, 3, 2, 8, 6);\n  } else if (n === 4) {\n    tribArray.push(1,\
    \ 3, 2, 8, 6, 12);\n  } else if (n === 5) {\n    tribArray.push(1, 3, 2, 8, 6,\
    \ 12, 20);\n  } else if (n === 6) {\n    tribArray.push(1, 3, 2, 8, 6, 12, 20,\
    \ 32);\n  } else if (n === 7) {\n    tribArray.push(1, 3, 2, 8, 6, 12, 20, 32,\
    \ 52);\n  } else if (n === 8) {\n    tribArray.push(1, 3, 2, 8, 6, 12, 20, 32,\
    \ 52, 84);\n  } else if (n === 9) {\n    tribArray.push(1, 3, 2, 8, 6, 12, 20,\
    \ 32, 52, 84, 136);\n  } else if (n === 10) {\n    tribArray.push(1, 3, 2, 8,\
    \ 6, 12, 20, 32, 52, 84, 136, 220);\n  } else if (n === 11) {\n    tribArray.push(1,\
    \ 3, 2, 8, 6, 12, 20, 32, 52, 84, 136, 220, 356);\n  } else if (n === 12) {\n\
    \    tribArray.push(1, 3, 2, 8, 6, 12, 20, 32, 52, 84, 136, 220, 356, 576);\n\
    \  } else if (n === 13) {\n    tribArray.push(1, 3, 2, 8, 6, 12, 20, 32, 52, 84,\
    \ 136, 220, 356, 576, 936);\n  } else if (n === 14) {\n    tribArray.push(1, 3,\
    \ 2, 8, 6, 12,", "    if(n == 0) return []\n    if(n == 1) return [1]\n    if(n\
    \ == 2) return [1, 3]\n    var arr = [1, 3, 2]\n    while(arr.length <= n){\n\
    \        if(arr.length % 2 == 0){\n            arr.push(arr[arr.length - 1] +\
    \ arr[arr.length - 2] + arr[arr.length - 3])\n        }\n        else{\n     \
    \       arr.push(1 + arr.length / 2)\n        }\n    }\n    return arr\n}", "\t\
    let result = [1, 3, 2];\n\tif (n > 2) {\n\t\tfor (let i = 3; i <= n; i++) {\n\t\
    \t\tif (i % 2 === 0) {\n\t\t\t\tresult.push(1 + i / 2);\n\t\t\t} else {\n\t\t\t\
    \tresult.push(result[i - 1] + result[i - 2] + result[i + 1]);\n\t\t\t}\n\t\t}\n\
    \t}\n\treturn result;\n}", "    var tribonacci = [1, 3, 2];\n    for (var i =\
    \ 3; i <= n; i++) {\n        tribonacci[i] = tribonacci[i - 1] + tribonacci[i\
    \ - 2] + tribonacci[i - 3];\n    }\n    return tribonacci;\n}\n", "\tlet result\
    \ = [];\n\tfor(var i = 0; i <= n; i++){\n\t\tif(i === 0){\n\t\t\tresult.push(1);\n\
    \t\t}else if(i === 1){\n\t\t\tresult.push(3);\n\t\t}else if(i === 2){\n\t\t\t\
    result.push(2);\n\t\t}else if(i%2 === 0){\n\t\t\tresult.push(result[i-2]+1+Math.floor(i/2));\n\
    \t\t}else{\n\t\t\tresult.push(result[i-1]+result[i-2]+result[i-3]);\n\t\t}\n\t\
    }\n\treturn result;\n}", "  var result = [];\n  result.push(1);\n  if (n === 0)\
    \ return result;\n  result.push(3);\n  if (n === 1) return result;\n  result.push(2);\n\
    \  if (n === 2) return result;\n  for (var i = 3; i <= n; i++) {\n    if (i %\
    \ 2 === 0) {\n      result.push(1 + (i / 2));\n    } else {\n      result.push(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n  return result;\n}", " \
    \ if (n < 1) return [];\n  if (n === 1) return [1, 3];\n  if (n === 2) return\
    \ [1, 3, 2];\n  if (n === 3) return [1, 3, 2, 8];\n  let arr = [1, 3, 2, 8];\n\
    \  for (let i = 4; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1]);\n    } else {\n      arr.push(Math.floor(1\
    \ + i / 2));\n    }\n  }\n  return arr;\n}", "    let triArray = [];\n    for\
    \ (let i = 0; i <= n; i++) {\n        if (i == 0) {\n            triArray.push(1);\n\
    \        } else if (i == 1) {\n            triArray.push(3);\n        } else if\
    \ (i == 2) {\n            triArray.push(2);\n        } else if (i % 2 == 0) {\n\
    \            triArray.push(1 + (i / 2));\n        } else {\n            triArray.push(triArray[i\
    \ - 1] + triArray[i - 2] + triArray[i + 1]);\n        }\n    }\n    return triArray;\n\
    }", "    var arr = [1, 3, 2, 8];\n    if (n < 3) {\n        return arr.slice(0,\
    \ n + 1);\n    }\n    for (var i = 3; i < n; i++) {\n        if (i % 2 === 0)\
    \ {\n            arr.push(1 + (i / 2));\n        } else {\n            arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}\n", " \
    \ let arr = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 == 0)\
    \ {\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\n", "    if(n === 0) return\
    \ []\n    let arr = [1, 3, 2]\n    while(arr.length <= n){\n        if(arr.length\
    \ % 2 === 0){\n            arr.push(1 + arr.length / 2)\n        }else{\n    \
    \        arr.push(arr[arr.length - 1] + arr[arr.length - 2] + arr[arr.length -\
    \ 3])\n        }\n    }\n    return arr\n}", "  if (n === 0) { return [1] }\n\
    \  if (n === 1) { return [1, 3] }\n  if (n === 2) { return [1, 3, 2] }\n  let\
    \ arr = [1, 3, 2]\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n\
    \      arr.push(1 + i / 2)\n    } else {\n      arr.push(arr[i - 1] + arr[i -\
    \ 2] + arr[i + 1])\n    }\n  }\n  return arr\n}\n", "  let finalArray = [];\n\
    \  let current = 1;\n  while (current <= n) {\n    if (current === 1) {\n    \
    \  finalArray.push(3);\n    } else if (current % 2 === 0) {\n      finalArray.push(1\
    \ + (current / 2));\n    } else {\n      let currentNum = finalArray[current -\
    \ 1] + finalArray[current - 2] + finalArray[current + 1];\n      finalArray.push(currentNum);\n\
    \    }\n    current++;\n  }\n  return finalArray;\n}", "    // TODO: implement\n\
    \    var triArr = [];\n    for (let i = 0; i <= n; i++) {\n      if (i === 0)\
    \ {\n        triArr.push(1);\n      } else if (i === 1) {\n        triArr.push(3);\n\
    \      } else if (i === 2) {\n        triArr.push(2);\n      } else if (i % 2\
    \ === 0) {\n        triArr.push(1 + (i / 2));\n      } else {\n        var x =\
    \ triArr[i - 1] + triArr[i - 2] + triArr[i - 3];\n        triArr.push(x);\n  \
    \    }\n    }\n    return triArr;\n  }\n  console.log(tri(3));\n  console.log(tri(6));",
  "  var arr = [1, 3, 2];\n  var a = 1;\n  var b = 3;\n  var c = 2;\n  var counter\
    \ = 3;\n  while(counter < n){\n    var triNum = a + b + c;\n    if(triNum % 2\
    \ == 0){\n      arr.push(1 + triNum / 2);\n    } else {\n      arr.push(a + b\
    \ + c);\n    }\n    a = b;\n    b = c;\n    c = triNum;\n    counter++;\n  }\n\
    \  return arr;\n}", "\tvar ans = [];\n\tans[0] = 1;\n\tif (n == 0) {\n\t\treturn\
    \ ans;\n\t}\n\tans[1] = 3;\n\tif (n == 1) {\n\t\treturn ans;\n\t}\n\tans[2] =\
    \ 2;\n\tif (n == 2) {\n\t\treturn ans;\n\t}\n\tfor (var i = 3; i <= n; i++) {\n\
    \t\tif (i % 2 == 0) {\n\t\t\tans[i] = ans[i / 2];\n\t\t}\n\t\telse {\n\t\t\tans[i]\
    \ = ans[i - 1] + ans[i - 2] + ans[i + 1];\n\t\t}\n\t}\n\treturn ans;\n}\n", " \
    \   var seq = [1, 3, 2];\n    for (var i = 3; i <= n; i++) {\n        seq.push(triIter(i,\
    \ seq));\n    }\n    return seq;\n}\n", "    let arr = [1, 3, 2];\n    if(n ===\
    \ 0) return [];\n    if(n === 1) return [1];\n    if(n === 2) return [1, 3];\n\
    \    if(n === 3) return [1, 3, 2];\n    while(arr.length <= n) {\n        let\
    \ counter = arr.length;\n        let next = 0;\n        if(counter % 2 === 0)\
    \ {\n            next = 1 + counter / 2;\n        } else {\n            next =\
    \ arr[counter - 1] + arr[counter - 2] + arr[counter - 3];\n        }\n       \
    \ arr.push(next);\n    }\n    return arr;\n}\n", "    if(n===0){\n        return\
    \ []\n    }\n    if(n===1){\n        return [1]\n    }\n    if(n===2){\n     \
    \   return [1, 3]\n    }\n    let arr = [1, 3, 2]\n    for(let i = 4; i <= n+1;\
    \ i++){\n        if(i%2===0){\n            arr.push(1+i/2)\n        }else{\n \
    \           arr.push(arr[i-2]+arr[i-3]+arr[i-1])\n        }\n    }\n    return\
    \ arr\n}", "    var even = n => 1 + (n / 2);\n    var odd = n => tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1);\n    var tribonacci = n => n % 2 === 0 ? even(n) :\
    \ odd(n);\n    var answer = [];\n    for (let i = 1; i <= n; i++) {\n        answer.push(tribonacci(i));\n\
    \    }\n    return answer;\n}", "  if (n === 0) { return [] };\n  var result =\
    \ [1, 3, 2];\n  if (n <= 3) { return result.slice(0, n + 1) };\n  for (var i =\
    \ 3; i < n; i++) {\n    result.push(result[i - 1] + result[i - 2] + result[i -\
    \ 3]);\n  }\n  return result;\n}", "\tif(n === 0) return [1];\n\tif(n === 1) return\
    \ [1, 3];\n\tif(n === 2) return [1, 3, 2];\n\tvar result = [1, 3, 2];\n\tfor(var\
    \ i = 3; i <= n; i++){\n\t\tif(i % 2 === 0){\n\t\t\tresult.push(1 + i / 2);\n\t\
    \t} else {\n\t\t\tresult.push(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \t\t}\n\t}\n\treturn result;\n}", "    const result = [1, 3, 2];\n    for (let\
    \ i = 3; i <= n; i++) {\n        result.push(result[i - 3] + result[i - 2] + result[i\
    \ - 1]);\n    }\n    return result;\n}\n", "    let fibNums = [];\n    let i =\
    \ 0;\n    while(i <= n){\n        if(i === 0){\n            fibNums.push(1);\n\
    \        }\n        else if(i === 1){\n            fibNums.push(3);\n        }\n\
    \        else if(i === 2){\n            fibNums.push(2);\n        }\n        else\
    \ if(i % 2 === 0){\n            fibNums.push(1 + (i / 2));\n        }\n      \
    \  else{\n            fibNums.push(fibNums[i - 1] + fibNums[i - 2] + fibNums[i\
    \ + 1]);\n        }\n        i++;\n    }\n    return fibNums;\n}", "  let ar =\
    \ [];\n  if(n==0){\n    return ar;\n  }\n  if(n==1){\n    ar.push(1);\n    return\
    \ ar;\n  }\n  if(n==2){\n    ar.push(1);\n    ar.push(3);\n    return ar;\n  }\n\
    \  if(n==3){\n    ar.push(1);\n    ar.push(3);\n    ar.push(2);\n    return ar;\n\
    \  }\n  if(n>3){\n    ar.push(1);\n    ar.push(3);\n    ar.push(2);\n    for(let\
    \ i=4;i<=n;i++){\n      ar.push(ar[i-2]+ar[i-3]+ar[i-4]);\n    }\n    return ar;\n\
    \  }\n}\n", "    var arr = [];\n    for(var i = 0; i <= n; i++){\n        if(i\
    \ === 0) arr.push(1);\n        else if(i === 1) arr.push(3);\n        else if(i\
    \ === 2) arr.push(2);\n        else if(i % 2 === 0) arr.push(1 + i / 2);\n   \
    \     else arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    }\n    return\
    \ arr;\n}", "  let result = [1, 3, 2];\n  if (n < 3) {\n    return result.slice(0,\
    \ n + 1);\n  }\n  for (let i = 3; i <= n; i++) {\n    result.push(result[i - 1]\
    \ + result[i - 2] + result[i - 3]);\n  }\n  return result;\n}", "\tvar result\
    \ = [1, 3, 2];\n\tfor (var i = 3; i <= n; i++) {\n\t\tif (i % 2 === 0) {\n\t\t\
    \tresult.push(1 + i / 2);\n\t\t} else {\n\t\t\tresult.push(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n\t\t}\n\t}\n\treturn result;\n}\n", "    let array =\
    \ [1, 3, 2];\n    let i = 3;\n    while(i <= n){\n        if(i % 2 == 0){\n  \
    \          array.push(1 + i / 2);\n        }else{\n            array.push(array[i\
    \ - 1] + array[i - 2] + array[i + 1]);\n        }\n        i++;\n    }\n    return\
    \ array;\n}", "    var tri = [];\n    for(var i = 0; i <= n; i++){\n        if(i\
    \ === 0){\n            tri.push(1);\n        }\n        else if(i % 2 === 0){\n\
    \            tri.push(1 + (i / 2));\n        }\n        else{\n            tri.push(tri[i\
    \ - 1] + tri[i - 2] + tri[i + 1]);\n        }\n    }\n    return tri;\n}\n", " \
    \ if (n === 0) {\n    return [1];\n  } else if (n === 1) {\n    return [1, 3];\n\
    \  } else if (n === 2) {\n    return [1, 3, 2];\n  } else {\n    var result =\
    \ [1, 3, 2];\n    for (var i = 3; i <= n; i++) {\n      if (i % 2 === 0) {\n \
    \       result.push(Math.floor(1 + i / 2));\n      } else {\n        result.push(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n      }\n    }\n    return result;\n\
    \  }\n}", "    // TODO\n    let arr = [];\n    for(let i = 0; i <= n; i++){\n\
    \        if(i == 0){\n            arr.push(1);\n        }else if(i == 1){\n  \
    \          arr.push(3);\n        }else if(i == 2){\n            arr.push(2);\n\
    \        }else if(i % 2 == 0){\n            arr.push(1 + i / 2);\n        }else{\n\
    \            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n\
    \    return arr;\n}\n", "\tvar arr = [1, 3, 2, 8];\n\tif (n <= 3) {\n\t\treturn\
    \ arr.slice(0, n + 1);\n\t}\n\tfor (var i = 3; i < n; i++) {\n\t\tif (i % 2 ==\
    \ 0) {\n\t\t\tarr.push(1 + i / 2);\n\t\t} else {\n\t\t\tarr.push(arr[i] + arr[i\
    \ - 1] + arr[i + 1]);\n\t\t}\n\t}\n\treturn arr;\n}", "    \n    let arr = [];\n\
    \    for(let i = 0; i <= n; i++){\n        if(i == 0){\n            arr.push(1);\n\
    \        }else if(i == 1){\n            arr.push(3);\n        }else if(i == 2){\n\
    \            arr.push(2);\n        }else if(i % 2 == 0){\n            arr.push(1\
    \ + i / 2);\n        }else{\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1]);\n        }\n    }\n    return arr;\n}\ntri(3);\n", "  if (n == 1) return\
    \ [1, 3];\n  var result = [1, 3, 2];\n  var tri_rec = function(n) {\n    var odd\
    \ = n % 2;\n    if (odd == 0) {\n      result.push(1 + n / 2);\n    } else {\n\
    \      var num = result[result.length - 1] + result[result.length - 2] + result[result.length\
    \ - 3];\n      result.push(num);\n    }\n    if (result.length == n + 1) {\n \
    \     return result;\n    } else {\n      return tri_rec(n - 1);\n    }\n  }\n\
    \  return tri_rec(n);\n}", "  if (n === 0) {\n    return [];\n  }\n  if (n ===\
    \ 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n  }\n  let\
    \ sequence = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0)\
    \ {\n      sequence.push(1 + i / 2);\n    } else {\n      sequence.push(sequence[i\
    \ - 1] + sequence[i - 2] + sequence[i + 1]);\n    }\n  }\n  return sequence;\n\
    }\n", "  let arr = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    if (i % 2\
    \ === 0) {\n      arr.push(Math.floor(1 + i / 2));\n    } else {\n      arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\n", "\tvar num\
    \ = [1, 3, 2, 8];\n\tif (n <= 3) {\n\t\treturn num.slice(0, n+1);\n\t}\n\telse\
    \ {\n\t\tfor (var i = 4; i <= n; i++) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tnum.push(1\
    \ + i / 2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnum.push(num[i-1] + num[i-2] + num[i+1]);\n\
    \t\t\t}\n\t\t}\n\t\treturn num;\n\t}\n}\n", "  var result=[1,3,2];\n  if(n===0){\n\
    \    return [];\n  }\n  if(n===1){\n    return [1];\n  }\n  if(n===2){\n    return\
    \ [1,3];\n  }\n  if(n===3){\n    return [1,3,2];\n  }\n  else{\n    for(var i=3;i<n;i++){\n\
    \      if(i%2===0){\n        result.push(1+i/2);\n      }\n      else{\n     \
    \   result.push(result[i-1]+result[i-2]+result[i+1]);\n      }\n    }\n  }\n \
    \ return result;\n}\ntri(7);", "    if(n == 0) return [];\n    if(n == 1) return\
    \ [1];\n    if(n == 2) return [1, 3];\n    let arr = [1, 3, 2, 8];\n    if(n ==\
    \ 3) return arr;\n    let temp = 8;\n    for(let i = 4; i <= n; i++){\n      \
    \  if(i % 2 == 0){\n            temp = 1 + (i / 2);\n        }\n        else{\n\
    \            temp = arr[i - 1] + arr[i - 2] + arr[i + 1];\n        }\n       \
    \ arr.push(temp);\n    }\n    return arr;\n}", "  \n}\n", "\tlet arr = []\n\t\
    if(n > 0){\n\t\tfor(let i = 1; i <= n; i++){\n\t\t\tif(i == 1){\n\t\t\t\tarr.push(3)\n\
    \t\t\t}else if(i % 2 == 0){\n\t\t\t\tarr.push(1 + (i / 2))\n\t\t\t}else{\n\t\t\
    \t\tarr.push(arr[i - 2] + arr[i - 3] + arr[i - 1])\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ arr\n}", "    if(n === 0) return [1];\n    if(n === 1) return [1, 3];\n    if(n\
    \ === 2) return [1, 3, 2];\n    let out = [1, 3, 2];\n    for(let i = 3; i <=\
    \ n; i++){\n        if(i % 2 === 0){\n            out.push(1 + i / 2);\n     \
    \   } else {\n            out.push(out[i - 1] + out[i - 2] + out[i + 1]);\n  \
    \      }\n    }\n    return out;\n}\n", "  var arr = [];\n  for(var i = 0; i <=\
    \ n; i++){\n    if(i === 0){\n      arr.push(1);\n    } else if(i === 1){\n  \
    \    arr.push(3);\n    } else if(i === 2){\n      arr.push(2);\n    } else {\n\
    \      arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n  }\n  return arr;\n\
    }", "    if(n==0){\n        return [1];\n    }\n    let result = [1,3,2];\n  \
    \  let i = 3;\n    while(i<=n){\n        if(i%2==0){\n            result.push(1+(i/2));\n\
    \        }\n        else{\n            result.push(result[i-1]+result[i-2]+result[i+1]);\n\
    \        }\n        i++;\n    }\n    return result;\n}", "  if (n === 0) {\n \
    \   return [];\n  } else if (n === 1) {\n    return [1];\n  } else if (n === 2)\
    \ {\n    return [1, 3];\n  } else if (n === 3) {\n    return [1, 3, 2];\n  } else\
    \ {\n    var ans = [1, 3, 2];\n    for (var i = 3; i < n; i++) {\n      if (i\
    \ % 2 === 0) {\n        ans.push(1 + i / 2);\n      } else {\n        ans.push(ans[i\
    \ - 1] + ans[i - 2] + ans[i + 1]);\n      }\n    }\n    return ans;\n  }\n}\n",
  "  let sequence = [];\n  for (let i = 1; i <= n; i++) {\n    if (i == 1) {\n   \
    \   sequence.push(3);\n    } else if (i == 2) {\n      sequence.push(2);\n   \
    \ } else if (i == 3) {\n      sequence.push(8);\n    } else if (i % 2 == 0) {\n\
    \      sequence.push(1 + i / 2);\n    } else {\n      sequence.push(sequence[i\
    \ - 1] + sequence[i - 2] + sequence[i - 3]);\n    }\n  }\n  return sequence;\n\
    }\n", "  var t = [1, 3, 2];\n  for (var i = 3; i <= n; i++) {\n    t[i] = (i %\
    \ 2 == 0 ? 1 + (i / 2) : t[i - 1] + t[i - 2] + t[i + 1]);\n  }\n  return t;\n\
    }\ntri(3);", "  // var arr = [];\n  // var odd = true;\n  // var even = false;\n\
    \  // if(n%2==0){\n  // \tarr.push(n/2);\n  // \teven = true;\n  // }\n  // else{\n\
    \  // \tarr.push(1);\n  // \todd = true;\n  // }\n  // return arr;\n  var a =\
    \ 1, b = 3, c = 2;\n  var output = [a, b, c];\n  for(var i = 3; i < n; i++){\n\
    \    var d = a + b + c;\n    output.push(d);\n    a = b;\n    b = c;\n    c =\
    \ d;\n  }\n  return output;\n}", "   var a = 1;\n   var b = 3;\n   var c = 2;\n\
    \   var res = [a, b, c];\n   if(n == 1){\n      return [a];\n   }\n   else if(n\
    \ == 2){\n      return [a, b];\n   }\n   else if(n == 3){\n      return [a, b,\
    \ c];\n   }\n   else{\n      for(var i = 1; i < n - 2; i++){\n         var temp\
    \ = a + b + c;\n         a = b;\n         b = c;\n         c = temp;\n       \
    \  res.push(c);\n      }\n      return res;\n   }\n}", "\tvar res = [];\n\tvar\
    \ a = 1;\n\tvar b = 3;\n\tvar c = 2;\n\tvar d = 0;\n\tvar count = 0;\n\tvar i\
    \ = 0;\n\tvar sum = 0;\n\tif(n % 2 == 0){\n\t\tsum = (n / 2);\n\t}\n\telse{\n\t\
    \tsum = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\t}\n\twhile(count < n){\n\t\t\
    if(i % 2 == 0){\n\t\t\td = a + sum;\n\t\t\tres.push(d);\n\t\t\ta = b;\n\t\t\t\
    b = c;\n\t\t\tc = d;\n\t\t\tcount++;\n\t\t}\n\t\telse{\n\t\t\td = b + c + a;\n\
    \t\t\tres.push(d);\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc = d;\n\t\t\tcount++;\n\
    \t\t}\n\t\ti++;\n\t}\n\treturn res;\n}\ntri(3);\n\n", "    let trib = [1, 3, 2];\n\
    \    if (n >= 3) {\n        for (let i = 3; i <= n; i++) {\n            let a\
    \ = trib[i - 1] + trib[i - 2] + trib[i - 3];\n            trib.push(a);\n    \
    \    }\n    }\n    return trib;\n}", "  var array = [1, 3, 2];\n  for (var i =\
    \ 0; i < n; i++) {\n    array.push(array[i] + array[i + 1] + array[i + 2]);\n\
    \  }\n  return array;\n}\n", "\tif(n == 0){\n\t\treturn []\n\t}\n\tif(n == 1){\n\
    \t\treturn [1]\n\t}\n\tif(n == 2){\n\t\treturn [1, 3]\n\t}\n\tif(n == 3){\n\t\t\
    return [1, 3, 2]\n\t}\n\tvar arr = tri(n - 1)\n\tarr.push(arr[n - 1] + arr[n -\
    \ 2] + arr[n])\n\treturn arr\n}\nvar arr = tri(4)", "\tvar ans = [3];\n\tfor(var\
    \ i = 1; i <= n; i++){\n\t\tif(i === 1){\n\t\t\tans.push(3);\n\t\t}\n\t\telse\
    \ if(i % 2 === 0){\n\t\t\tans.push(1 + i / 2);\n\t\t}\n\t\telse{\n\t\t\tans.push(ans[i\
    \ - 1] + ans[i - 2] + ans[i + 1]);\n\t\t}\n\t}\n\treturn ans;\n}", "    let tri\
    \ = [1, 3, 2];\n    for (let i = 3; i <= n; i++) {\n        if (i % 2 == 0) {\n\
    \            tri.push(1 + i / 2);\n        } else {\n            tri.push(tri[i\
    \ - 1] + tri[i - 2] + tri[i + 1]);\n        }\n    }\n    return tri;\n}\n", " \
    \ var arr = [1, 3, 2];\n  for (var i = 3; i <= n; i++) {\n    if (i % 2 === 0)\
    \ {\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\n", "  if (n === 0) {\n  \
    \  return [];\n  } else if (n === 1) {\n    return [1];\n  } else if (n === 2)\
    \ {\n    return [1, 3];\n  } else if (n === 3) {\n    return [1, 3, 2];\n  } else\
    \ {\n    let seq = [1, 3, 2];\n    for (let i = 3; i < n; i++) {\n      seq.push(seq[i\
    \ - 1] + seq[i - 2] + seq[i - 3]);\n    }\n    return seq;\n  }\n}\n", "  if (n\
    \ <= 1) {\n    return [1, 3, 2, 8];\n  }\n  let sequence = [1, 3, 2, 8];\n  for\
    \ (let i = 4; i <= n; i++) {\n    if (i % 2 === 0) {\n      sequence.push(1 +\
    \ i / 2);\n    } else {\n      sequence.push(sequence[i - 1] + sequence[i - 2]\
    \ + sequence[i + 1]);\n    }\n  }\n  return sequence;\n}", "\tvar result = [1,\
    \ 3, 2, 8];\n\tfor(var i = 4; i <= n; i++){\n\t\tresult.push(i % 2 == 0 ? result[i\
    \ - 1] + result[i - 2] + result[i - 3] : 1 + i / 2);\n\t}\n\treturn result;\n\
    }\n", "    if(n == 0) return [];\n    if(n == 1) return [1];\n    if(n == 2) return\
    \ [1,3];\n    let arr = [1,3,2];\n    let i = 3;\n    while(i <= n){\n       \
    \ if(i % 2 == 0){\n            arr.push(1 + i / 2);\n        }\n        else {\n\
    \            arr.push(arr[i - 2] + arr[i - 1] + arr[i + 1]);\n        }\n    \
    \    i++;\n    }\n    return arr;\n}", "    let arr = [1, 3, 2, 8];\n    for(let\
    \ i = 4; i <= n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i /\
    \ 2);\n        } else {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1]);\n        }\n    }\n    return arr;\n}\n", "  let output = [1, 3, 2];\n\
    \  if (n === 0) {\n    return [1];\n  } else if (n === 1) {\n    return [1, 3];\n\
    \  } else if (n === 2) {\n    return [1, 3, 2];\n  } else {\n    for (var i =\
    \ 3; i <= n; i++) {\n      if (i % 2 === 0) {\n        output.push(1 + i / 2);\n\
    \      } else {\n        output.push(output[i - 1] + output[i - 2] + output[i\
    \ + 1]);\n      }\n    }\n  }\n  return output;\n}", "    let arr = [1, 3, 2];\n\
    \    for(let i = 3; i <= n; i++){\n        arr.push(arr[i - 1] + arr[i - 2] +\
    \ arr[i - 3]);\n    }\n    return arr;\n}", "  let arr = [1, 3, 2];\n  for (let\
    \ i = 3; i <= n; i++) {\n    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n\
    \  }\n  return arr;\n}", "  if (n == 0) return [1];\n  let result = [];\n  for\
    \ (let i = 1; i <= n; i++) {\n    result.push(tri[i]);\n  }\n  return result;\n\
    }", "\tvar array = [1, 3, 2, 8];\n\tif (n < 4) {\n\t\treturn array.slice(0, n\
    \ + 1);\n\t} else {\n\t\tfor (var i = 4; i <= n; i++) {\n\t\t\tif (i % 2 === 0)\
    \ {\n\t\t\t\tarray.push(1 + i / 2);\n\t\t\t} else {\n\t\t\t\tarray.push(array[i\
    \ - 1] + array[i - 2] + array[i + 1]);\n\t\t\t}\n\t\t}\n\t\treturn array;\n\t\
    }\n}", "    var arr = [1, 3, 2];\n    if (n == 0) {\n        return [1];\n   \
    \ }\n    if (n == 1) {\n        return [1, 3];\n    }\n    if (n == 2) {\n   \
    \     return [1, 3, 2];\n    }\n    for (var i = 3; i <= n; i++) {\n        if\
    \ (i % 2 == 0) {\n            arr.push(Math.floor(1 + i / 2));\n        } else\
    \ {\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n\
    \    }\n    return arr;\n}\n", "\tvar x = [1, 3, 2, 8]\n\tvar y = 0;\n\tfor(i\
    \ = 4; i <= n; i++){\n\t\tif(i % 2 == 0){\n\t\t\ty = i/2;\n\t\t\tx.push(y);\n\t\
    \t}else{\n\t\t\ty = x[i-1] + x[i-2] + x[i+1];\n\t\t\tx.push(y);\n\t\t}\n\t}\n\t\
    return x;\n}", "    var arr = [];\n    for(let i = 0; i <= n; i++){\n        if(i\
    \ === 0){\n            arr.push(1);\n        }else if(i === 1){\n            arr.push(3);\n\
    \        }else if(i === 2){\n            arr.push(2);\n        }else if(i % 2\
    \ === 0){\n            arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}", "\t\
    //if n is 0 \n\tif(n===0){\n\t\treturn [];\n\t}\n\t//if n is 1 \n\tif(n===1){\n\
    \t\treturn [1];\n\t}\n\t//if n is 2\n\tif(n===2){\n\t\treturn [1,3];\n\t}\n\t\
    //if n is 3\n\tif(n===3){\n\t\treturn [1,3,2];\n\t}\n\tvar arr = [1,3,2];\n\t\
    //if n is greater than 3\n\tfor(i=3;i<n;i++){\n\t\tarr.push(arr[i-1]+arr[i-2]+arr[i-3]);\n\
    \t}\n\treturn arr;\n}", "    let arr = [1, 3, 2, 8];\n    for(let i = 4; i <=\
    \ n; i++){\n        if(i % 2 === 0){\n            arr.push(1 + i / 2);\n     \
    \   }else{\n            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    \
    \    }\n    }\n    return arr;\n}", "  if (n == 0) return [];\n  var a = 0, b\
    \ = 1, c = 3, t;\n  var ret = [b, c];\n  while (ret.length <= n) {\n    if (ret.length\
    \ % 2 == 0) {\n      t = c;\n      c = 1 + c / 2;\n      a = b;\n      b = t;\n\
    \    } else {\n      t = c;\n      c = a + b + c;\n      a = b;\n      b = t;\n\
    \    }\n    ret.push(c);\n  }\n  return ret;\n}\n", "    let arr = [1, 3, 2, 8];\n\
    \    let num = 8;\n    if(n < 4){\n        return arr.slice(0, n + 1);\n    }\n\
    \    while(arr.length - 1 !== n){\n        num = arr[arr.length - 1] + arr[arr.length\
    \ - 2] + arr[arr.length - 3];\n        arr.push(num);\n    }\n    return arr;\n\
    }\n", "    var result = [1, 3, 2];\n    if (n <= 0) {\n        return [1];\n \
    \   } else if (n === 1) {\n        return [1, 3];\n    } else if (n === 2) {\n\
    \        return [1, 3, 2];\n    } else {\n        for (let i = 3; i <= n; i++)\
    \ {\n            if (i % 2 === 0) {\n                result.push(1 + i / 2);\n\
    \            } else {\n                result.push(result[i - 2] + result[i -\
    \ 1] + result[i + 1]);\n            }\n        }\n    }\n    return result;\n\
    }\n", "  let tribonacci = [1, 3, 2]\n  if (n < 2) return tribonacci\n  if (n ===\
    \ 2) return tribonacci.slice(0, 3)\n  for (let i = 2; i < n; i++) {\n    let [first,\
    \ second, third] = tribonacci.slice(-3)\n    let next = second + third + first\n\
    \    tribonacci.push(next)\n  }\n  return tribonacci\n}\n", "    let answer =\
    \ [1, 3, 2];\n    if (n < 3) return answer.slice(0, n + 1);\n    for (let i =\
    \ 3; i <= n; i++) {\n        if (i % 2 === 0) {\n            answer.push(1 + i\
    \ / 2);\n        } else {\n            answer.push(answer[i - 1] + answer[i -\
    \ 2] + answer[i + 1]);\n        }\n    }\n    return answer;\n}", "  var result\
    \ = [];\n  for (var i = 0; i <= n; i++) {\n    if (i === 0) {\n      result.push(1);\n\
    \    } else if (i === 1) {\n      result.push(3);\n    } else if (i === 2) {\n\
    \      result.push(2);\n    } else if (i % 2 === 0) {\n      result.push(1 + i\
    \ / 2);\n    } else {\n      result.push(result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n    }\n  }\n  return result;\n}", "    // your code here\n    if(n ===\
    \ 0){\n        return [1]\n    }else if(n === 1){\n        return [1, 3]\n   \
    \ }else if(n === 2){\n        return [1, 3, 2]\n    }else{\n        let arr =\
    \ [1, 3, 2]\n        for(let i = 3; i <= n; i++){\n            if(i % 2 === 0){\n\
    \                arr.push(1 + i / 2)\n            }else{\n                arr.push(arr[i\
    \ - 1] + arr[i - 2] + arr[i + 1])\n            }\n        }\n        return arr\n\
    \    }\n}", "  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return\
    \ [1, 3];\n  }\n  if (n === 2) {\n    return [1, 3, 2];\n  }\n  return [1, 3,\
    \ 2, 8];\n}\n", "    if(n == 0) return [1];\n    let trib = [1,3,2];\n    if(n\
    \ <= 2) return trib.slice(0,n+1);\n    for(let i = 3; i <= n; i++){\n        if(i\
    \ % 2 == 0) trib.push(1 + (i / 2));\n        else trib.push(trib[i-1] + trib[i-2]\
    \ + trib[i+1]);\n    }\n    return trib;\n}", "  let result = [];\n  for (let\
    \ i = 0; i <= n; i++) {\n    if (i === 0) {\n      result.push(1);\n    } else\
    \ if (i === 1) {\n      result.push(3);\n    } else if (i === 2) {\n      result.push(2);\n\
    \    } else if (i % 2 === 0) {\n      result.push(1 + (i / 2));\n    } else {\n\
    \      result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n\
    \  return result;\n}", "\tlet arr = [1, 3, 2];\n\tif(n < 0) return 0;\n\tif(n\
    \ < 2) return [1, 3];\n\tif(n < 3) return [1, 3, 2];\n\tfor(let i = 3; i <= n;\
    \ i++){\n\t\tif(i % 2 === 0){\n\t\t\tarr.push(1 + i / 2);\n\t\t}else{\n\t\t\t\
    arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n\t\t}\n\t}\n\treturn arr;\n}",
  "  let start = [1, 3, 2];\n  if (n < 3) return start.slice(0, n + 1);\n  let i =\
    \ 3;\n  while (i <= n) {\n    start.push(start[i - 1] + start[i - 2] + start[i\
    \ - 3]);\n    i++;\n  }\n  return start;\n}", "\tif(n == 1){\n\t\treturn [1, 3]\n\
    \t}else if(n == 2){\n\t\treturn [1, 3, 2]\n\t}else if(n == 3){\n\t\treturn [1,\
    \ 3, 2, 8]\n\t}else{\n\t\treturn tri(n - 1).concat([tri(n - 1)[n - 1] + tri(n\
    \ - 1)[n - 2] + tri(n - 1)[n - 3]])\n\t}\n}", "    let result = [1, 3, 2, 8];\n\
    \    if (n < 4) {\n        return result.slice(0, n+1);\n    }\n    for (let i\
    \ = 4; i <= n; i++) {\n        if (i % 2 === 0) {\n            result.push(Math.floor(1\
    \ + i / 2));\n        } else {\n            result.push(result[i-1] + result[i-2]\
    \ + result[i+1]);\n        }\n    }\n    return result;\n}", "    let triArray\
    \ = [1, 3, 2];\n    let i = 2;\n    while (i < n) {\n        if (i % 2 == 0) {\n\
    \            let value = 1 + i / 2;\n            triArray.push(value);\n     \
    \   } else {\n            let value = triArray[i - 1] + triArray[i - 2] + triArray[i\
    \ + 1];\n            triArray.push(value);\n        }\n        i++;\n    }\n \
    \   return triArray;\n}", "    if(n==0){\n        return [1]\n    }\n    if(n==1){\n\
    \        return [1,3]\n    }\n    if(n==2){\n        return [1,3,2]\n    }\n \
    \   if(n==3){\n        return [1,3,2,8]\n    }\n    let res = [1,3,2,8]\n    for(let\
    \ i=4;i<=n;i++){\n        if(i%2==0){\n            res.push(1+i/2)\n        }else{\n\
    \            res.push(res[i-1]+res[i-2]+res[i+1])\n        }\n    }\n    return\
    \ res\n}", "    var arr = [1, 3, 2];\n    for(var i = 3; i <= n; i++){\n     \
    \   if(i % 2 == 0){\n            arr.push(1 + i / 2);\n        }\n        else{\n\
    \            arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n        }\n    }\n\
    \    return arr;\n}\n", "    if(n == 1){\n        return [1, 3];\n    }else if(n\
    \ == 2){\n        return [1, 3, 2];\n    }else if(n == 3){\n        return [1,\
    \ 3, 2, 8];\n    }else{\n        var arr = [1, 3, 2, 8];\n        var index =\
    \ 4;\n        while(index <= n){\n            if(index % 2 == 0){\n          \
    \      arr.push(1 + index / 2);\n            }else{\n                arr.push(arr[index\
    \ - 1] + arr[index - 2] + arr[index + 1]);\n            }\n            index++;\n\
    \        }\n        return arr;\n    }\n}", "\treturn n<2 ? n===0 ? [0] : [1,1]\
    \ : [1,1,1].slice(0,n+1);\n}\n", "  let arr = [];\n  for (let i = 0; i <= n; i++)\
    \ {\n    if (i === 0) {\n      arr.push(1);\n    } else if (i === 1) {\n     \
    \ arr.push(3);\n    } else if (i === 2) {\n      arr.push(2);\n    } else if (i\
    \ % 2 === 0) {\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i\
    \ - 3] + arr[i - 2] + arr[i - 1]);\n    }\n  }\n  return arr;\n}", "  let arr\
    \ = [1, 3, 2, 8]\n  for(let i = arr.length; i <= n; i++){\n    let sum = 0\n \
    \   if(i % 2 == 0){\n      sum = arr[i - 1] + arr[i - 2] + arr[i - 3]\n    } else\
    \ {\n      sum = 1 + i / 2\n    }\n    arr.push(sum)\n  }\n  return arr\n}\n",
  "    var result = [1, 3, 2];\n    for (var i = 3; i <= n; i++) {\n        if (i\
    \ % 2 == 0) {\n            result.push(1 + i / 2);\n        } else {\n       \
    \     result.push(result[i - 2] + result[i - 1] + result[i + 1]);\n        }\n\
    \    }\n    return result;\n}\n", "  // your code here.\n  if (n < 1) return [];\n\
    \  let arr = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0)\
    \ {\n      arr.push(1 + i / 2);\n    } else {\n      arr.push(arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}\n", "  const tribonacciSequence\
    \ = [1, 3, 2];\n  let nextNum = 0;\n  let i = 3;\n  while (i <= n) {\n    nextNum\
    \ = tribonacciSequence[i - 1] + tribonacciSequence[i - 2] + tribonacciSequence[i\
    \ - 3];\n    tribonacciSequence.push(nextNum);\n    i++;\n  }\n  return tribonacciSequence;\n\
    }", "  let sequence = [1, 3, 2];\n  for (let i = 0; i < n; i++) {\n    sequence.push(sequence[i]\
    \ + sequence[i + 1] + sequence[i + 2]);\n  }\n  return sequence;\n}", "    if(n\
    \ === 0) return [1];\n    if(n === 1) return [1, 3];\n    if(n === 2) return [1,\
    \ 3, 2];\n    let result = [1, 3, 2];\n    for(let i = 3; i <= n; i++){\n    \
    \    if(i % 2 === 0){\n            result.push(1 + i / 2);\n        } else {\n\
    \            result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n   \
    \     }\n    }\n    return result;\n}", "  if (n === 0) {\n    return [];\n  }\n\
    \  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n    return [1, 3];\n\
    \  }\n  if (n === 3) {\n    return [1, 3, 2];\n  }\n  let seq = [1, 3, 2];\n \
    \ for (let i = 4; i <= n; i++) {\n    let nextNum = 0;\n    if (i % 2 === 0) {\n\
    \      nextNum = seq[i - 1] + seq[i - 2] + seq[i - 3];\n    } else {\n      nextNum\
    \ = 1 + (i / 2);\n    }\n    seq.push(nextNum);\n  }\n  return seq;\n}\n", " \
    \ var arr = [1, 3, 2];\n  for (var i = 3; i <= n; i++) {\n    if (i % 2 === 0)\
    \ {\n      arr.push(1 + (i / 2));\n    } else {\n      arr.push(arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1]);\n    }\n  }\n  return arr;\n}", "  if (n === 0) {\n    return\
    \ [1]\n  }\n  if (n === 1) {\n    return [1, 3]\n  }\n  if (n === 2) {\n    return\
    \ [1, 3, 2]\n  }\n  let res = [1, 3, 2]\n  for (let i = 3; i <= n; i++) {\n  \
    \  if (i % 2 === 0) {\n      res.push(1 + i / 2)\n    } else {\n      res.push(res[i\
    \ - 1] + res[i - 2] + res[i + 1])\n    }\n  }\n  return res\n}\n", "    if(n <\
    \ 1) return [];\n    const tribo = [3,2,1];\n    for(let i = 0; i < n; i++){\n\
    \        tribo.push(tribo[i] + tribo[i+1] + tribo[i+2]);\n    }\n    return tribo;\n\
    }", "  var t = [1, 3, 2];\n  for (var i = 0; i < n; i++) {\n    if (i % 2 == 0)\
    \ {\n      t.push(1 + i / 2);\n    } else {\n      t.push(t[i - 1] + t[i - 2]\
    \ + t[i + 1]);\n    }\n  }\n  return t;\n}\n", "  if (n === 0) {\n    return [1];\n\
    \  }\n  let sequence = [1,3,2];\n  for (let i = 3; i <= n; i++) {\n    if (i %\
    \ 2 === 0) {\n      sequence.push(1 + i / 2);\n    } else {\n      sequence.push(sequence[i\
    \ - 1] + sequence[i - 2] + sequence[i + 1]);\n    }\n  }\n  return sequence;\n\
    }", "    //assigns an empty array with length n\n    let arr = new Array(n+1);\n\
    \    //assigns the first element of the array\n    arr[0] = 1;\n    //assigns\
    \ the second element of the array\n    arr[1] = 3;\n    //assigns the third element\
    \ of the array\n    arr[2] = 2;\n    //loop to assign the rest of the elements\
    \ of the array\n    for(let i = 3; i <= n; i++){\n        if(i % 2 == 0){\n  \
    \          arr[i] = arr[i-1] + arr[i-2] + 1 + i/2;\n        }else{\n         \
    \   arr[i] = arr[i-1] + arr[i-2] + arr[i-3];\n        }\n    }\n    return arr;\n\
    }", "  let seq = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    let result\
    \ = seq[i - 1] + seq[i - 2] + seq[i - 3];\n    seq.push(result);\n  }\n  return\
    \ seq;\n}\n", "\tvar arr = [1, 3, 2, 8];\n\tfor(var i = 4; i <= n; i++){\n\t\t\
    arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n\t}\n\treturn arr;\n}\n", " \
    \   var res = [1, 3, 2, 8];\n    for (var i = 4; i <= n; i++) {\n        if (i\
    \ % 2 == 0) {\n            res.push(1 + i / 2);\n        } else {\n          \
    \  res.push(res[i - 1] + res[i - 2] + res[i + 1]);\n        }\n    }\n    return\
    \ res;\n}", "    let res = [1, 3, 2];\n    if (n < 1) return [];\n    if (n <\
    \ 3) return res.slice(0, n + 1);\n    for (let i = 3; i <= n; i++){\n        if\
    \ (i % 2 == 0) res.push(1 + i / 2);\n        else res.push(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n    }\n    return res;\n}", "    if(n===0){\n      return\
    \ [1];\n    }\n    if(n===1){\n      return [1,3];\n    }\n    if(n===2){\n  \
    \    return [1,3,2];\n    }\n    else{\n      let arr = [1,3,2];\n      for(let\
    \ i=3;i<=n;i++){\n        if(i%2==0){\n          arr.push(1+i/2);\n        }\n\
    \        else{\n          arr.push(arr[i-1]+arr[i-2]+arr[i+1]);\n        }\n \
    \     }\n      return arr;\n    }\n  }\n  // console.log(tri(3));\n  \n  \n  //\
    \ For example, given a = \"abcd\" and b = \"cdabcdab\".\n  // The longest repeatable\
    \ substring is \"cdab\"\n  // The second longest repeatable substring is \"abcd\"\
    .\n  // Your task is to find the longest repeatable substring in a given string\
    \ a.\n  // Input Format\n  // Input has two lines. The first line contains a string\
    \ a and the second line contains \n  // another string b. The strings are non-empty\
    \ and contain only lower-case Latin letters.\n  // Output Format\n  // You should\
    \ print the longest repeatable substring in a.\n  // Sample Input 0\n  // abcd\n\
    \  // cdabcdab\n  // Sample Output 0\n  // cdab\n  // Explanation 0\n  // The\
    \ best repeatable substring is cdab. The other repeatable substrings are \n  //\
    \ abcd, cdabcdab and ad.\n  // Sample Input 1\n  // abracadabra\n  // rabcadabra\n\
    \  // Sample Output 1\n  // abra\n  // Explanation 1\n  // The best repeatable\
    \ substring is abra. The other repeatable substrings are \n  // racadabra, bracadabra\
    \ and abracadabra.\n  function longest_repeatable_substring(a, b) {\n    // Write\
    \ your code here\n    let i=0;\n    let j=0;\n    let longest=\"\";\n    let current=\"\
    \";", "    var trib = [1, 3, 2];\n    if (n === 0) {\n      return [1];\n    }\
    \ else if (n === 1) {\n      return [1, 3];\n    } else if (n === 2) {\n     \
    \ return [1, 3, 2];\n    } else {\n      for (var i = 2; i < n; i++) {\n     \
    \   trib.push(trib[i] + trib[i - 1] + trib[i - 2]);\n      }\n    }\n    return\
    \ trib;\n  }\n  \n  console.log(tri(6));", "    var f1 = 1, f2 = 3, f3 = 2, fn\
    \ = 0;\n    var arr = [f1, f2, f3];\n    for(var i = 3; i <= n; i++){\n      \
    \  if(i % 2 == 0){\n            fn = 1 + i / 2;\n        }else{\n            fn\
    \ = f1 + f2 + f3;\n        }\n        f1 = f2;\n        f2 = f3;\n        f3 =\
    \ fn;\n        arr.push(fn);\n    }\n    return arr;\n}", "\tvar res = [];\n\t\
    for(var i = 0; i <= n; i++){\n\t\tif( i == 0){\n\t\t\tres.push(1);\n\t\t}\n\t\t\
    else if(i == 1){\n\t\t\tres.push(3);\n\t\t}\n\t\telse if(i == 2){\n\t\t\tres.push(2);\n\
    \t\t}\n\t\telse if(i % 2 == 0){\n\t\t\tres.push(1 + i / 2);\n\t\t}\n\t\telse{\n\
    \t\t\tres.push(res[i - 1] + res[i - 2] + res[i + 1]);\n\t\t}\n\t}\n\treturn res;\n\
    }", "    //your code here\n    if(n==0){\n      return [1];\n    }\n    if(n==1){\n\
    \      return [1,3];\n    }\n    if(n==2){\n      return [1,3,2];\n    }\n   \
    \ var ar=tri(n-1);\n    var last=ar[ar.length-1];\n    var secLast=ar[ar.length-2];\n\
    \    var first=ar[ar.length-3];\n    var sum=0;\n    if(n%2==0){\n      sum=1+n/2;\n\
    \    }\n    else{\n      sum=last+secLast+first;\n    }\n    return ar.concat(sum);\n\
    \  }\n  console.log(tri(3));\n  // [1, 3, 2, 8]\n  console.log(tri(4));\n  //\
    \ [1, 3, 2, 8, 6]\n  \n  ///////////////////////////////////////////////////////////////////////////////////////////////////////\n\
    \  \n  //A binary gap within a positive integer N is any maximal sequence of consecutive\
    \ zeros that is \n  // surrounded by ones at both ends in the binary representation\
    \ of N.\n  // For example, number 9 has binary representation 1001 and contains\
    \ a binary gap of length 2. \n  // The number 529 has binary representation 1000010001\
    \ and contains two binary gaps: one of length 4 \n  // and one of length 3. The\
    \ number 20 has binary representation 10100 and contains one binary gap of \n\
    \  // length 1. The number 15 has binary representation 1111 and has no binary\
    \ gaps. The number 32 has \n  // binary representation 100000 and has no binary\
    \ gaps.\n  // Write a function:\n  // function solution(N);\n  // that, given\
    \ a positive integer N, returns the length of its longest binary gap. The function\
    \ \n  // should return 0 if N doesn't contain a binary gap.\n  // For example,\
    \ given N = 1041 the function should return 5, because N has binary representation\
    \ \n  // 10000010001 and so its longest binary gap is of length 5. Given N = 32\
    \ the function should return 0, \n  // because N has binary representation '100000'\
    \ and thus no binary gaps.\n  // Write an efficient algorithm for the following\
    \ assumptions", "    var c = [1, 3, 2];\n    for (i = 3; i <= n; i++) {\n    \
    \    var x = c[i - 1] + c[i - 2] + c[i - 3];\n        c.push(x);\n    }\n    return\
    \ c;\n}\ntri(3);\n", "  let triArray = [];\n  for (let i = 0; i <= n; i++) {\n\
    \    if (i === 0) {\n      triArray.push(1);\n    } else if (i === 1) {\n    \
    \  triArray.push(3);\n    } else if (i === 2) {\n      triArray.push(2);\n   \
    \ } else if (i % 2 === 0) {\n      triArray.push(1 + i / 2);\n    } else {\n \
    \     triArray.push(triArray[i - 1] + triArray[i - 2] + triArray[i + 1]);\n  \
    \  }\n  }\n  return triArray;\n}\n", "    let arr = [1, 3, 2];\n    if(n < 3)\
    \ return arr.slice(0, n + 1);\n    for(let i = 3; i <= n; i++){\n        arr.push(triRecursive(i,\
    \ arr));\n    }\n    return arr;\n}\n", "\tif(n < 1) return [];\n\tif(n === 1)\
    \ return [1, 3];\n\tif(n === 2) return [1, 3, 2];\n\tlet [a, b, c] = [1, 3, 2];\n\
    \tlet arr = [a, b, c];\n\tfor(let i = 3; i <= n; i++){\n\t\tlet temp = (i % 2\
    \ === 0) ? 1 + (i / 2) : a + b + c;\n\t\ta = b;\n\t\tb = c;\n\t\tc = temp;\n\t\
    \tarr.push(temp);\n\t}\n\treturn arr;\n}", "  if (n <= 1) {\n    return [1, 3,\
    \ 2];\n  }\n  const sequence = [1, 3, 2];\n  while (sequence.length < n + 1) {\n\
    \    let last = sequence[sequence.length - 1];\n    let secondToLast = sequence[sequence.length\
    \ - 2];\n    let thirdToLast = sequence[sequence.length - 3];\n    if (last %\
    \ 2 === 0) {\n      sequence.push(1 + last / 2);\n    } else {\n      sequence.push(last\
    \ + secondToLast + thirdToLast);\n    }\n  }\n  return sequence;\n}", "  if (n\
    \ == 1) return [1, 3];\n  if (n == 2) return [1, 3, 2];\n  return [1, 3, 2].concat(tri(n\
    \ - 1).slice(-2).concat(sum(tri(n - 1).slice(-3))));\n}\n", "    var result =\
    \ []\n    for(var i = 0; i < n; i++){\n        if(i===0){\n            result.push(1)\n\
    \        }\n        else if(i===1){\n            result.push(3)\n        }\n \
    \       else if(i===2){\n            result.push(2)\n        }\n        else if(i%2===0){\n\
    \            result.push(1 + (i/2))\n        }\n        else if(i%2 !== 0){\n\
    \            result.push(result[i-1] + result[i-2] + result[i+1])\n        }\n\
    \    }\n    return result\n}", "  let t = [1, 3, 2];\n  for (let i = 3; i <= n;\
    \ i++) {\n    t[i] = t[i - 1] + t[i - 2] + t[i + 1];\n  }\n  return t;\n}", " \
    \ if (n < 1) {\n    return [1];\n  } else if (n < 2) {\n    return [1, 3];\n \
    \ } else if (n < 3) {\n    return [1, 3, 2];\n  }\n  let nums = [1, 3, 2];\n \
    \ let res = 0;\n  for (let i = 3; i <= n; i++) {\n    if (i % 2 === 0) {\n   \
    \   res = 1 + i / 2;\n    } else {\n      res = nums[i - 1] + nums[i - 2] + nums[i\
    \ + 1];\n    }\n    nums.push(res);\n  }\n  return nums;\n}", "  // your code\
    \ here\n  var tribonacci = [];\n  tribonacci[0] = 1;\n  tribonacci[1] = 3;\n \
    \ tribonacci[2] = 2;\n  for (var i = 3; i <= n; i++) {\n    tribonacci[i] = (i\
    \ % 2 === 0) ? \n    1 + i / 2 : tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i\
    \ + 1];\n  }\n  return tribonacci;\n}\n", "    var arr = [];\n    for(var i =\
    \ 0; i <= n; i++){\n        if(i === 0) arr.push(1);\n        else if(i === 1)\
    \ arr.push(3);\n        else if(i === 2) arr.push(2);\n        else if(i % 2 ===\
    \ 0) arr.push(1 + (i / 2));\n        else arr.push(arr[i - 1] + arr[i - 2] + arr[i\
    \ + 1]);\n    }\n    return arr;\n}", "  let sequence = [];\n  for (let i = 1;\
    \ i <= n; i++) {\n    if (i === 1) {\n      sequence.push(3);\n    } else if (i\
    \ % 2 === 0) {\n      sequence.push(1 + (i / 2));\n    } else {\n      sequence.push(sequence[i\
    \ - 2] + sequence[i - 3] + sequence[i - 1]);\n    }\n  }\n  return sequence;\n\
    }", "  var arr = [1, 3, 2];\n  if (n < 0) {\n    return [];\n  }\n  if (n ===\
    \ 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 3];\n  }\n  if\
    \ (n === 2) {\n    return [1, 3, 2];\n  }\n  for (var i = 0; i < n - 2; i++) {\n\
    \    if (arr[i + 2] % 2 === 0) {\n      arr.push(1 + (arr[i + 2] / 2));\n    }\
    \ else {\n      arr.push(arr[i] + arr[i + 1] + arr[i + 2]);\n    }\n  }\n  return\
    \ arr;\n}", "    return [1, 3, 2, 8]\n}", "  var arr = [1, 3, 2];\n  if (n ===\
    \ 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 3];\n  }\n  if\
    \ (n === 2) {\n    return [1, 3, 2];\n  }\n  if (n === 3) {\n    return [1, 3,\
    \ 2, 8];\n  }\n  if (n > 3) {\n    for (var i = 3; i < n; i++) {\n      var sum\
    \ = 0;\n      if (i % 2 === 0) {\n        sum = 1 + i / 2;\n      } else {\n \
    \       sum = arr[i - 1] + arr[i - 2] + arr[i + 1];\n      }\n      arr.push(sum);\n\
    \    }\n  }\n  return arr;\n}", "  var result = [1, 3, 2];\n  for (var i = 2;\
    \ i < n; i++) {\n    result.push(result[i] + result[i - 1] + result[i - 2]);\n\
    \  }\n  return result;\n}", "\tvar ret = [0, 1, 3];\n\tfor(var i = 3; i <= n;\
    \ i++){\n\t\tret[i] = ret[i - 1] + ret[i - 2] + ret[i + 1];\n\t}\n\treturn ret;\n\
    }", "  let arr = [];\n  let i = 0;\n  while(i < n + 1){\n    if(i == 0){\n   \
    \   arr.push(1);\n    }\n    else if(i == 1){\n      arr.push(3);\n    }\n   \
    \ else if(i == 2){\n      arr.push(2);\n    }\n    else if(i % 2 == 0){\n    \
    \  arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);\n    }\n    else{\n      arr.push(Math.floor(i\
    \ / 2) + 1);\n    }\n    i++;\n  }\n  return arr;\n}\n", "    var arr = [1, 3,\
    \ 2];\n    for(var i = 3; i <= n; i++){\n        if(i % 2 === 0){\n          \
    \  arr.push(1 + i / 2);\n        }else{\n            arr.push(arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1]);\n        }\n    }\n    return arr;\n}", "    var fib = [1,\
    \ 3, 2, 8];\n    for (var i = 4; i <= n; i++) {\n        fib[i] = (i % 2 === 0)\
    \ ? (1 + i / 2) : (fib[i - 1] + fib[i - 2] + fib[i + 1]);\n    }\n    return fib;\n\
    }", "  let triArr = [0, 1, 3, 2];\n  let i = 4;\n  while (i <= n) {\n    if (i\
    \ % 2 === 0) {\n      triArr.push(1 + i / 2);\n    } else {\n      triArr.push(triArr[i\
    \ - 1] + triArr[i - 2] + triArr[i + 1]);\n    }\n    i++;\n  }\n  return triArr;\n\
    }", "\tvar arr = [];\n\tfor(var i = 0; i <= n; i++){\n\t\tif(i == 0){\n\t\t\t\
    arr.push(1);\n\t\t}\n\t\telse if(i == 1){\n\t\t\tarr.push(3);\n\t\t}\n\t\telse\
    \ if(i == 2){\n\t\t\tarr.push(2);\n\t\t}\n\t\telse if(i % 2 == 0){\n\t\t\tarr.push(1\
    \ + i / 2);\n\t\t}\n\t\telse if(i % 2 == 1){\n\t\t\tarr.push(arr[i - 1] + arr[i\
    \ - 2] + arr[i + 1]);\n\t\t}\n\t}\n\treturn arr;\n}", "  var arr = [1, 3, 2];\n\
    \  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [1, 3];\n\
    \  }\n  if (n === 2) {\n    return [1, 3, 2];\n  }\n  for (var i = 0; i < n; i++)\
    \ {\n    if (arr[i] % 2 === 0) {\n      arr.push(1 + (arr[i] / 2));\n    } else\
    \ {\n      arr.push(arr[i-1] + arr[i-2] + arr[i+1]);\n    }\n  }\n  return arr;\n\
    }", "  let arr = [1, 3, 2];\n  for (let i = 3; i <= n; i++) {\n    if (i % 2)\
    \ {\n      arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);\n    } else {\n   \
    \   arr.push(1 + i / 2);\n    }\n  }\n  return arr;\n}\n", "  var tri = [1, 3,\
    \ 2];\n  var i = 4;\n  if (n === 1) {\n    return [1];\n  }\n  if (n === 2) {\n\
    \    return [1, 3];\n  }\n  if (n === 3) {\n    return [1, 3, 2];\n  }\n  while\
    \ (i <= n + 1) {\n    if (i % 2 === 0) {\n      tri.push(1 + (i / 2));\n    }\
    \ else {\n      tri.push(tri[i - 2] + tri[i - 3] + tri[i - 1]);\n    }\n    i++;\n\
    \  }\n  return tri;\n}", "  var result = [1, 3, 2];\n  for (var i = 3; i <= n;\
    \ i++) {\n    if (i % 2 === 0) {\n      result.push(1 + i / 2);\n    } else {\n\
    \      result.push(result[i - 1] + result[i - 2] + result[i + 1]);\n    }\n  }\n\
    \  return result;\n}\n", "    var a = 1;\n    var b = 3;\n    var c = 2;\n   \
    \ var answer = [a, b, c];\n    var i = 3;\n    while (i <= n) {\n        if (i\
    \ % 2 == 0) {\n            var temp = 1 + (i / 2);\n            answer.push(temp);\n\
    \        } else {\n            var temp = answer[i - 1] + answer[i - 2] + answer[i\
    \ + 1];\n            answer.push(temp);\n        }\n        i++;\n    }\n    return\
    \ answer;\n}\n", "\tlet tribonacci = [1, 3, 2];\n\tif (n < 3) {\n\t\treturn tribonacci.slice(0,\
    \ n + 1);\n\t}\n\tfor (let i = 3; i <= n; i++) {\n\t\tif (i % 2 === 0) {\n\t\t\
    \ttribonacci.push(1 + i / 2);\n\t\t} else {\n\t\t\ttribonacci.push(tribonacci[i\
    \ - 1] + tribonacci[i - 2] + tribonacci[i + 1]);\n\t\t}\n\t}\n\treturn tribonacci;\n\
    }\n", "  if (n == 0) return [];\n  const arr = [1, 3, 2];\n  while (arr.length\
    \ < n + 1) {\n    let next = (arr.length + 1) % 2 === 0 ? 1 + (arr.length + 1)\
    \ / 2 : \n    arr[arr.length - 1] + arr[arr.length - 2] + arr[arr.length - 3];\n\
    \    arr.push(next);\n  }\n  return arr;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
