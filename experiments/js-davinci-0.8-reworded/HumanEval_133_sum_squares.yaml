name: HumanEval_133_sum_squares
language: js
prompt: "//You are given an array of numbers.\n// You need to return the sum of squared\
  \ numbers in the given array,\n// round each element in the array to the upper int(Ceiling)\
  \ first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0,\
  \ 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n\
  // 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4,\
  \ 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0,\
  \ 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n\
  \  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4,\
  \ 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n\
  \  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();"
completions: ["    return lst.map(num => Math.ceil(num)).reduce((sum, num) => sum\
    \ + num ** 2, 0);\n}", "    let newList = lst.map(x => Math.ceil(x));\n    let\
    \ sumList = newList.map(x => x * x);\n    return sumList.reduce((x, y) => x +\
    \ y, 0);\n}", "    var sum=0;\n    for(var i=0;i<lst.length;i++){\n        var\
    \ x=Math.ceil(lst[i]);\n        sum=sum+(x*x);\n    }\n    return sum;\n}", " \
    \   return lst.map(function(element){\n        return Math.ceil(element);\n  \
    \  }).reduce(function(total, element){\n        return total + (element * element);\n\
    \    });\n}\n", "    return lst.map(Math.ceil).reduce((a,b) => a + b*b, 0);\n}",
  "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i])\
    \ * Math.ceil(lst[i]);\n    }\n    return sum;\n}\n", "    let lst_new = []\n\
    \    for (let i = 0; i < lst.length; i++){\n        lst_new.push(Math.ceil(lst[i]))\n\
    \    }\n    let sum = 0\n    for (let i = 0; i < lst_new.length; i++){\n     \
    \   sum += lst_new[i] ** 2\n    }\n    return sum\n}", "    return lst.map(function(elem){\n\
    \        return Math.ceil(elem) * Math.ceil(elem);\n    }).reduce(function(a,\
    \ b){\n        return a + b;\n    });\n}\n", "    return lst.map(element => Math.ceil(element)).reduce((a,b)\
    \ => a + b**2);\n};", "    return lst.map(el => Math.ceil(el)**2).reduce((acc,el)\
    \ => acc + el, 0);\n}", "  return lst.map(function(x){return Math.ceil(x)}).reduce(function(x,y){return\
    \ x+y})\n}", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n   \
    \     var ceil = Math.ceil(lst[i]);\n        sum += ceil * ceil;\n    }\n    return\
    \ sum;\n}", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      sum += Math.ceil(lst[i])**2;\n    }\n    return sum;\n}\n", "    let result\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        result += Math.ceil(lst[i])\
    \ * Math.ceil(lst[i]);\n    }\n    return result;\n}\n", "  var sum=0;\n  for(var\
    \ i=0;i<lst.length;i++){\n    sum+=Math.pow(Math.ceil(lst[i]),2);\n  }\n  return\
    \ sum;\n}\n", "  return lst.map(Math.ceil).reduce((prev, curr) => prev + curr\
    \ * curr, 0);\n}", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n\
    \        sum += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n}", " \
    \ if(typeof lst !== \"object\"){\n    return false;\n  }\n  var result = 0;\n\
    \  for(var i = 0; i < lst.length; i++){\n    result += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n\
    \  }\n  return result;\n}\n", "    return lst.map(Math.ceil).reduce((sum, x) =>\
    \ sum + x*x, 0);\n}", "    var sum=0;\n    for(var i=0;i<lst.length;i++){\n  \
    \      sum+=Math.ceil(lst[i])*Math.ceil(lst[i]);\n    }\n    return sum;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
