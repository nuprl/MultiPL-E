name: HumanEval_133_sum_squares
language: js
prompt: "//You are given an array of numbers.\n// You need to return the sum of squared\
  \ numbers in the given array,\n// round each element in the array to the upper int(Ceiling)\
  \ first.\n// Examples:\n// >>> lst([1.0, 2.0, 3.0])\n// 14\n// >>> lst([1.0, 4.0,\
  \ 9.0])\n// 98\n// >>> lst([1.0, 3.0, 5.0, 7.0])\n// 84\n// >>> lst([1.4, 4.2, 0.0])\n\
  // 29\n// >>> lst([-2.4, 1.0, 1.0])\n// 6\nfunction sum_squares(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0, 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4,\
  \ 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4, 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0,\
  \ 1.0, 15.0, 2.0]),10230);\n  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n\
  \  assert.deepEqual(candidate([-1.4, 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4,\
  \ 17.9, 18.9, 19.9]),1086);\n  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n\
  \  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();"
completions: ["    return lst.map(num => Math.ceil(num)).reduce((sum, num) => sum\
    \ + num ** 2, 0);\n}", "    let newList = lst.map(x => Math.ceil(x));\n    let\
    \ sumList = newList.map(x => x * x);\n    return sumList.reduce((x, y) => x +\
    \ y, 0);\n}", "    var sum=0;\n    for(var i=0;i<lst.length;i++){\n        var\
    \ x=Math.ceil(lst[i]);\n        sum=sum+(x*x);\n    }\n    return sum;\n}", " \
    \   return lst.map(function(element){\n        return Math.ceil(element);\n  \
    \  }).reduce(function(total, element){\n        return total + (element * element);\n\
    \    });\n}\n", "    return lst.map(Math.ceil).reduce((a,b) => a + b*b, 0);\n}",
  "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i])\
    \ * Math.ceil(lst[i]);\n    }\n    return sum;\n}\n", "    let lst_new = []\n\
    \    for (let i = 0; i < lst.length; i++){\n        lst_new.push(Math.ceil(lst[i]))\n\
    \    }\n    let sum = 0\n    for (let i = 0; i < lst_new.length; i++){\n     \
    \   sum += lst_new[i] ** 2\n    }\n    return sum\n}", "    return lst.map(function(elem){\n\
    \        return Math.ceil(elem) * Math.ceil(elem);\n    }).reduce(function(a,\
    \ b){\n        return a + b;\n    });\n}\n", "    return lst.map(element => Math.ceil(element)).reduce((a,b)\
    \ => a + b**2);\n};", "    return lst.map(el => Math.ceil(el)**2).reduce((acc,el)\
    \ => acc + el, 0);\n}", "  return lst.map(function(x){return Math.ceil(x)}).reduce(function(x,y){return\
    \ x+y})\n}", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n   \
    \     var ceil = Math.ceil(lst[i]);\n        sum += ceil * ceil;\n    }\n    return\
    \ sum;\n}", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n  \
    \      sum += Math.ceil(lst[i])**2;\n    }\n    return sum;\n}\n", "    let result\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        result += Math.ceil(lst[i])\
    \ * Math.ceil(lst[i]);\n    }\n    return result;\n}\n", "  var sum=0;\n  for(var\
    \ i=0;i<lst.length;i++){\n    sum+=Math.pow(Math.ceil(lst[i]),2);\n  }\n  return\
    \ sum;\n}\n", "  return lst.map(Math.ceil).reduce((prev, curr) => prev + curr\
    \ * curr, 0);\n}", "    var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n\
    \        sum += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n}", " \
    \ if(typeof lst !== \"object\"){\n    return false;\n  }\n  var result = 0;\n\
    \  for(var i = 0; i < lst.length; i++){\n    result += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n\
    \  }\n  return result;\n}\n", "    return lst.map(Math.ceil).reduce((sum, x) =>\
    \ sum + x*x, 0);\n}", "    var sum=0;\n    for(var i=0;i<lst.length;i++){\n  \
    \      sum+=Math.ceil(lst[i])*Math.ceil(lst[i]);\n    }\n    return sum;\n}",
  "    let squaredLst = lst.map(el=> {\n        return Math.ceil(el) ** 2;\n    });\n\
    \    let total = squaredLst.reduce((acc,el)=>{\n        return acc + el;\n   \
    \ },0);\n    return total;\n}\n", "    return lst.map(e=>Math.ceil(e)).reduce((s,e)=>s+e*e,0);\n\
    }", "    return lst.map(val => Math.ceil(val)**2).reduce((prev, next) => prev\
    \ + next);\n}", "    const square = [];\n    let total = 0;\n    for(let i = 0;\
    \ i < lst.length; i++){\n        let x = Math.ceil(lst[i]);\n        square.push(x);\n\
    \    }\n    console.log(square);\n    for(let i = 0; i < square.length; i++){\n\
    \        total += square[i] ** 2;\n    }\n    return total;\n}", "    let result\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        result += Math.ceil(lst[i])\
    \ ** 2;\n    }\n    return result;\n}\nlet lst = [1.0, 3.0, 5.0, 7.0];", "   \
    \ return lst.map(Math.ceil).reduce((a, b) => a + b**2, 0);\n}", "    var result\
    \ = lst.map(x => Math.ceil(x));\n    var sum = 0;\n    for (var i = 0; i < result.length;\
    \ i++){\n        sum += result[i] * result[i];\n    }\n    return sum;\n}", " \
    \ return lst.map(x => Math.ceil(x)).reduce((x,y) => x + y**2, 0);\n}\n", "   \
    \ // var r = 0;\n    // for (var i = 0; i < lst.length; i++) {\n    //     r +=\
    \ Math.ceil(lst[i]) * Math.ceil(lst[i]);\n    // }\n    // return r;\n    // \u5229\
    \u7528\u6570\u7EC4\u7684\u65B9\u6CD5\n    return lst.map(Math.ceil).map(function\
    \ (e) {\n        return e * e;\n    }).reduce(function (a, b) {\n        return\
    \ a + b;\n    })\n}\n", "    let upperInt = lst.map(x => Math.ceil(x))\n    let\
    \ square = upperInt.map(x => x * x)\n    let sum = square.reduce((x, y) => x +\
    \ y)\n    return sum\n}\n", "  let res = 0;\n  let arr = [];\n  lst.forEach(function(i){\n\
    \    let num = Math.ceil(i);\n    arr.push(num);\n  });\n  let resArr = arr.map(function(i){\n\
    \    return i ** 2;\n  });\n  resArr.forEach(function(i){\n    res += i;\n  });\n\
    \  return res;\n}\n", "    var sum = 0;\n    for (var i = 0; i < lst.length; i++){\n\
    \        if (lst[i] < 0){\n            sum += Math.ceil(lst[i]) ** 2;\n      \
    \  } else {\n            sum += Math.floor(lst[i]) ** 2;\n        }\n    }\n \
    \   return sum;\n}\n", "    let num = 0;\n    for(let i = 0; i < lst.length; i++){\n\
    \        num += Math.ceil(lst[i]) ** 2;\n    }\n    return num;\n}", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((sum, x) => sum + x * x, 0);\n}", "    var\
    \ sum = 0;\n    lst.forEach(function(element) {\n        element = Math.ceil(element);\n\
    \        sum += element * element;\n    }, this);\n    return sum;\n}\n", "  \
    \  let output = 0;\n    for (let i = 0; i < lst.length; i++){\n        let item\
    \ = lst[i];\n        if (item < 0){\n            output += Math.ceil(item) * Math.ceil(item);\n\
    \        } else {\n            output += Math.floor(item) * Math.floor(item);\n\
    \        }\n    }\n    return output;\n}\nsum_squares([1.0, 2.0, 3.0]);\nsum_squares([1.0,\
    \ 4.0, 9.0]);\nsum_squares([1.0, 3.0, 5.0, 7.0]);\nsum_squares([1.4, 4.2, 0.0]);\n\
    sum_squares([-2.4, 1.0, 1.0]);", "    let result = 0;\n    for (let i=0; i<lst.length;\
    \ i++){\n        result += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return\
    \ result;\n}", "    return lst.map(function(e){return Math.ceil(e);}).reduce(function(a,\
    \ b){return a*a + b*b;});\n}\n", "    return lst.map(function(i){\n        return\
    \ Math.ceil(i);\n    }).reduce(function(sum,i){\n        return sum + i*i;\n \
    \   },0);\n}\n", "  let upperInt = lst.map(function(e){\n    return Math.ceil(e);\n\
    \  });\n  let squares = upperInt.map(function(e){\n    return e * e;\n  });\n\
    \  let sum = squares.reduce(function(a, b){\n    return a + b;\n  });\n  return\
    \ sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        sum += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n}\n",
  "    var total = 0;\n    for(var i = 0; i < lst.length; i++){\n        total +=\
    \ Math.ceil(lst[i]) * Math.ceil(lst[i]);\n    }\n    return total;\n}", "\treturn\
    \ lst.map(function(el){\n\t\treturn Math.ceil(el)\n\t}).reduce(function(sum, el){\n\
    \t\treturn sum + el*el\n\t}, 0)\n}\n", "    var arr = [];\n    for (var i = 0;\
    \ i < lst.length; i++){\n        arr.push(Math.ceil(lst[i]));\n    }\n    var\
    \ sum = 0;\n    for (var i = 0; i < arr.length; i++){\n        sum += arr[i] *\
    \ arr[i];\n    }\n    return sum;\n}\n", "    return lst.map(el => Math.ceil(el)).reduce((sum,el)\
    \ => sum += el**2,0);\n}\n", "    let array = lst.map(x => Math.ceil(x));\n  \
    \  let count = 0;\n    for (let i = 0; i < array.length; i++){\n        count\
    \ += array[i] * array[i];\n    }\n    return count;\n}\n", "    var new_lst =\
    \ lst.map(Math.ceil)\n    var squared_lst = new_lst.map(Math.pow);\n    return\
    \ squared_lst.reduce(function(x,y){return x+y})\n}\n", "    return lst.map(Math.ceil).reduce((acc,\
    \ curr) => acc + curr * curr, 0);\n}", "    return lst.map(x => Math.ceil(x))\n\
    \        .map(x => x*x)\n        .reduce((acc, x) => acc + x, 0);\n}", "  var\
    \ sum = 0;\n  for(var i = 0; i < lst.length; i++){\n    sum += Math.ceil(lst[i])*Math.ceil(lst[i]);\n\
    \  }\n  return sum;\n}\n", "    lst = lst.map(function(a){\n        return Math.ceil(a);\n\
    \    });\n    var result = 0;\n    for(var i = 0; i < lst.length; i++){\n    \
    \    result += Math.pow(lst[i], 2);\n    }\n    return result;\n}\n", "  var sum_\
    \ = 0;\n  for(var i = 0; i < lst.length; i++){\n    var num = lst[i];\n    sum_\
    \ += Math.ceil(num) * Math.ceil(num);\n  }\n  return sum_;\n}\n", "    return\
    \ lst.map(x => Math.ceil(x)).reduce((sum, x) => sum + x * x, 0);\n}\n", "    let\
    \ max = 0;\n    let result = 0;\n    lst.forEach(function(item){\n        max\
    \ = Math.ceil(item);\n        result += max * max;\n    });\n    return result;\n\
    }", "    var sum = 0;\n    lst.forEach(element => {\n        element = Math.ceil(element);\n\
    \        sum += Math.pow(element, 2);\n    });\n    return sum;\n}", "  var sum\
    \ = 0;\n  for(var i = 0; i < lst.length; i++){\n    lst[i] = Math.ceil(lst[i]);\n\
    \    sum += lst[i] ** 2;\n  }\n  return sum;\n}\n", "  lst = lst.map(n => Math.ceil(n));\n\
    \  return lst.reduce((a, b) => (a + b ** 2), 0);\n}\n", "   return lst.map(num\
    \ => Math.ceil(num)).reduce((a,b) => a + b * b, 0);\n}\n", "  return lst.map(x\
    \ => Math.ceil(x) ** 2).reduce((x, y) => x + y);\n}", "  return lst.map(x => Math.ceil(x)).reduce((acc,\
    \ val) => acc + val * val, 0);\n}\n", "  var l = lst.map(Math.ceil);\n  var result\
    \ = l.reduce(function(sum, current) {\n    return sum + current * current;\n \
    \ }, 0);\n  return result;\n}", "    if(lst.length === 0){\n        return 0;\n\
    \    }else{\n        lst = lst.map(x => Math.ceil(x));\n        return lst.reduce((acc,\
    \ x) => x*x + acc, 0);\n    }\n}", "    return lst.map(x => x=Math.ceil(x)).reduce((a,\
    \ b) => a + b*b, 0);\n}", "    return lst.map(Math.ceil).reduce((a,c)=>a+c*c,0);\n\
    }", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum\
    \ += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n}", "    let sum\
    \ = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let num = Math.ceil(lst[i]);\n\
    \        sum += num ** 2;\n    }\n    return sum;\n}\n", "\tlet result = 0;\n\t\
    for (const number of lst) {\n\t\tresult += Math.ceil(number) ** 2;\n\t}\n\treturn\
    \ result;\n}\n", "\tvar result = 0;\n\tfor (var i = 0; i < lst.length; i++) {\n\
    \t\tresult += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n\t}\n\treturn result;\n\
    }\n", "    return lst.map(function(element){\n        return Math.pow(Math.ceil(element),\
    \ 2);\n    }).reduce(function(sum, cur){\n        return sum + cur;\n    });\n\
    }\n", "    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n     \
    \   result += Math.ceil(lst[i])**2;\n    }\n    return result;\n}", "    let result\
    \ = 0;\n    for (let i=0; i<lst.length; i++){\n        result += Math.ceil(lst[i])**2;\n\
    \    }\n    return result;\n}", "  return lst.map(Math.ceil).reduce((x,y) => x\
    \ + y*y, 0);\n}\n", "  var result = 0;\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    result += Math.ceil(lst[i]) ** 2;\n  }\n  return result;\n}", "    return\
    \ lst.map(Math.ceil).reduce((sum,x)=>sum+x*x,0);\n}\n", "\tvar arr = [];\n\tvar\
    \ sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\t\tarr.push(Math.ceil(lst[i]));\n\
    \t}\n\tfor(var j = 0; j < arr.length; j++){\n\t\tsum += arr[j] * arr[j];\n\t}\n\
    \treturn sum;\n}", "    let newArr = lst.map(x => Math.ceil(x));\n    let mapResult\
    \ = newArr.map(x => x ** 2);\n    let result = mapResult.reduce((a, b) => a +\
    \ b, 0);\n    return result;\n}\n", "    return lst.map(value => Math.ceil(value)).reduce((acc,\
    \ value) => acc + value**2, 0);\n}\nlet list = [1.0, 2.0, 3.0];", "    var  sum\
    \ = 0;\n    for (var i = 0; i < lst.length; i++) {\n        sum += Math.ceil(lst[i])\
    \ * Math.ceil(lst[i]);\n    }\n    return sum;\n}\n", "    var lst2 = lst.map(function(e){return\
    \ Math.ceil(e)});\n    return lst2.reduce(function(x,y){return x + y * y}, 0);\n\
    }", "    return lst.map(x => Math.ceil(x))\n              .map(x => x * x)\n \
    \             .reduce((acc, x) => acc + x);\n}\n", "    return lst.map(Math.ceil).reduce((acc,\
    \ cur) => acc + Math.pow(cur, 2), 0);\n}\n", "    let squared = lst.map(Math.ceil).map(e\
    \ => e*e)\n    let reducer = (accumulator, currentValue) => accumulator + currentValue;\n\
    \    return squared.reduce(reducer)\n}\n", "    var sum = 0;\n    for(var i=0;\
    \ i<lst.length; i++){\n        sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n\
    \    }\n    return sum;\n}", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n    }\n    return\
    \ sum;\n}", "    lst=lst.map(Math.ceil);\n    let sum=0;\n    for(let i of lst){\n\
    \        sum+=i*i;\n    }\n    return sum;\n}", "    var sum = 0;\n    for(var\
    \ i=0; i<lst.length; i++){\n        sum += Math.ceil(lst[i])**2;\n    }\n    return\
    \ sum;\n}\n", "    return lst.map(x => Math.ceil(x)).reduce((a,b) => a + b*b,\
    \ 0);\n}\n", "    var square = 0;\n    for(var i = 0; i < lst.length; i++){\n\
    \        square += Math.ceil(lst[i]) ** 2;\n    }\n    return square;\n}\n", " \
    \   var result = 0;\n    for (var i = 0; i < lst.length; i++){\n        lst[i]\
    \ = Math.ceil(lst[i]);\n        result += lst[i]*lst[i];\n    }\n    return result;\n\
    }", "    return lst.map(x => Math.ceil(x)).reduce((sum,x) => sum + x*x,0);\n}\n",
  "    return lst.map(function(item){\n        return Math.ceil(item) * Math.ceil(item);\n\
    \    }).reduce(function(a, b){\n        return a + b;\n    });\n}", "    return\
    \ lst.map(Math.ceil).reduce((sum, current) => sum + current**2, 0);\n}", "  return\
    \ lst.map(function(elem){\n    return Math.ceil(elem);\n  }).reduce(function(a,b){\n\
    \    return a + b*b;\n  },0);\n}\n", "   return lst.map(x => Math.ceil(x)).reduce((a,b)\
    \ => a + (b * b), 0);\n}", "  var ans = 0;\n  for(var i = 0; i < lst.length; i++){\n\
    \    var temp = Math.ceil(lst[i]);\n    ans += temp * temp;\n  }\n  return ans;\n\
    }", "    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ let item = Math.ceil(lst[i]);\n        result += item ** 2;\n    }\n    return\
    \ result;\n}\n", "  return lst.map(Math.ceil).reduce((a,c)=>a+(c*c),0);\n}\n",
  "    return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b**2, 0);\n}", "   \
    \ var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        sum += Math.ceil(lst[i])\
    \ * Math.ceil(lst[i]);\n    }\n    return sum;\n}\n", "  let square_sum = 0;\n\
    \  for (var i = 0; i < lst.length; i++) {\n    square_sum += Math.ceil(lst[i])**2;\n\
    \  }\n  return square_sum;\n}", "    return lst.map(x => Math.ceil(x)).reduce((acc,\
    \ next) => acc + Math.pow(next, 2), 0);\n}", "    let a=lst.map(Math.ceil)\n \
    \   return a.reduce((a,b)=>a+b**2,0)\n}\n", "    let sum = 0;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n\
    \    }\n    return sum;\n}", "    return lst.map(n => Math.ceil(n)).reduce((a,b)\
    \ => a + b**2, 0);\n}\n", "  var sum = 0;\n  var ceil = [];\n  for(var i = 0;\
    \ i < lst.length; i++){\n    ceil.push(Math.ceil(lst[i]));\n  }\n  for(var i =\
    \ 0; i < ceil.length; i++){\n    sum += Math.pow(ceil[i], 2);\n  }\n  return sum;\n\
    }\n", "    return lst.map(Math.ceil).reduce((acc,curr)=>acc+curr**2,0)\n}", " \
    \   return lst.map(x => Math.ceil(x))\n              .map(x => x ** 2)\n     \
    \         .reduce((a, b) => a + b);\n}", "    return lst.map(Math.ceil).reduce((s,\
    \ e) => s + e*e, 0);\n}\n", "  var sum = 0;\n  for(var i = 0; i < lst.length;\
    \ i++){\n    sum += Math.ceil(lst[i]) ** 2;\n  }\n  return sum;\n}\n", "    var\
    \ newArray = [];\n    var sumSquares = 0;\n    for (var i = 0; i < lst.length;\
    \ i++){\n        newArray.push(Math.ceil(lst[i]));\n    }\n    for (var j = 0;\
    \ j < newArray.length; j++){\n        sumSquares += newArray[j] * newArray[j];\n\
    \    }\n    return sumSquares;\n}", "    let newArr = [];\n    for(let i = 0;\
    \ i < lst.length; i++){\n        newArr.push(Math.ceil(lst[i]));\n    }\n    let\
    \ squaredArr = newArr.map(num => num ** 2);\n    return squaredArr.reduce((sum,\
    \ item) => sum + item);\n}", "    return lst.map(function(el){\n        return\
    \ Math.ceil(el);\n    }).reduce(function(el, acc){\n        return el*el + acc;\n\
    \    });\n}\n", "    return lst.map(Math.ceil).reduce((x,y)=> x + y**2, 0);\n\
    }\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum\
    \ += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n    }\n    return sum;\n}\n", " \
    \   return lst.map(function(el){\n        return Math.ceil(el)\n    }).reduce(function(acc,\
    \ elem){\n        return acc + elem * elem\n    }, 0)\n}\n", "    var res = 0;\n\
    \    for (var i=0; i<lst.length; i++){\n        res += Math.ceil(lst[i])**2;\n\
    \    }\n    return res;\n}\n", "  return lst.map(x => Math.ceil(x)**2).reduce((a,b)\
    \ => a+b, 0);\n}", "    // Enter code here\n    return\n}", "    return lst.map(x\
    \ => Math.ceil(x) ** 2).reduce((a, b) => a + b);\n}\n", "    return lst.map(function(x){\n\
    \        return Math.ceil(x);\n    }).reduce(function(acc, curr){\n        return\
    \ acc + curr**2;\n    }, 0);\n}", "    var sum = 0;\n    lst.forEach(function(x){\n\
    \        sum = sum + Math.ceil(x)*Math.ceil(x);\n    });\n    return sum;\n}",
  "    return lst.map(el => Math.ceil(el)).reduce((sum, num) => sum + Math.pow(num,\
    \ 2), 0);\n}", "    var answer = 0;\n    for (var i = 0; i < lst.length; i++){\n\
    \        answer += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n    }\n    return answer;\n\
    }", "    return lst.map(Math.ceil).reduce((a,b) => a+(b*b),0);\n}\n", "    //\
    \ let lst = [1.0, 2.0, 3.0];\n    // let lst = [1.0, 4.0, 9.0];\n    // let lst\
    \ = [1.0, 3.0, 5.0, 7.0];\n    // let lst = [1.4, 4.2, 0.0];\n    // let lst =\
    \ [-2.4, 1.0, 1.0];\n    let sum = 0;\n    let newLst = [];\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        newLst.push(Math.ceil(lst[i]));\n    }\n\
    \    for (let i = 0; i < newLst.length; i++) {\n        sum += Math.pow(newLst[i],\
    \ 2);\n    }\n    console.log(sum);\n}\n", "    return lst.map(e=>Math.ceil(e)).reduce((total,e)=>total+e*e,0);\n\
    }\n", "    return lst.map(Math.ceil).reduce((a, b) => a + b ** 2, 0);\n}\n", " \
    \   return lst.map(Math.ceil).reduce((acc, i) => acc + i*i, 0);\n}\n", "  return\
    \ lst.map(Math.ceil).reduce((a, b) => a + Math.pow(b, 2), 0);\n}", "    let sum\
    \ = 0;\n    lst.forEach(function(element) {\n        sum += Math.ceil(element)\
    \ * Math.ceil(element);\n    }, this);\n    return sum;\n}", "  if (lst.length\
    \ === 0) return 0;\n  var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n\
    \    sum += Math.pow(Math.ceil(lst[i]), 2);\n  }\n  return sum;\n}", "    var\
    \ result = 0;\n    for (var i = 0; i < lst.length; i++){\n        lst[i] = Math.ceil(lst[i]);\n\
    \        result += lst[i] * lst[i];\n    }\n    return result;\n}\n", "    let\
    \ res = 0;\n    for (let i = 0; i < lst.length; i++) {\n        res += Math.ceil(lst[i])**2;\n\
    \    }\n    return res;\n}\nlet lst = [-1.4, 1.0, 1.0];", "    var square = 0;\n\
    \    for(var i = 0; i < lst.length; i++){\n        square += Math.ceil(lst[i])*Math.ceil(lst[i]);\n\
    \    }\n    return square;\n}\n", "\treturn lst.map(function(e){return Math.ceil(e)})\n\
    \t\t\t  .map(function(e){return e*e})\n\t\t\t  .reduce(function(acc, e){return\
    \ acc+e}, 0);\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        sum += Math.ceil(lst[i]) ** 2;\n    }\n    return sum;\n}", "   \
    \ let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.ceil(lst[i])\
    \ ** 2;\n    }\n    return sum;\n}\n", "    let result = 0;\n    for (let i=0;\
    \ i<lst.length; i++){\n        lst[i] = Math.ceil(lst[i]);\n        result +=\
    \ lst[i]*lst[i];\n    }\n    return result;\n}", "    return lst.map(x => Math.ceil(x)).reduce((acc,\
    \ curr) => acc + Math.pow(curr, 2), 0);\n}", "    let result = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        let lstElements = Math.ceil(lst[i])\n\
    \        let square = lstElements*lstElements\n        result = result + square\n\
    \    }\n    return result\n}", "    var result = 0;\n    for (var i = 0; i < lst.length;\
    \ i++){\n        result += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n    }\n   \
    \ return result;\n}", "    return lst.map(Math.ceil).reduce((a, b) => a + b**2,\
    \ 0);\n}\n", "    var result = 0;\n    for (var i = 0; i < lst.length; i++){\n\
    \        result += Math.ceil(lst[i]) ** 2;\n    }\n    return result;\n}\n", " \
    \ let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >=\
    \ 0) {\n      result += Math.ceil(lst[i]) * Math.ceil(lst[i]);\n    } else {\n\
    \      result += Math.floor(lst[i]) * Math.floor(lst[i]);\n    }\n  }\n  return\
    \ result;\n}\n", "  return lst.map(Math.ceil).reduce((acc, next) => acc + next\
    \ * next, 0);\n}", "    return lst.map(x => Math.ceil(x)).reduce((x,y) => x+y**2,0)\n\
    }\n", "   return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n\
    }\n", "    var result = 0;\n    for (var i = 0; i < lst.length; i++){\n      \
    \  lst[i] = Math.ceil(lst[i]);\n        result += lst[i] * lst[i];\n    }\n  \
    \  return result;\n}", "    return lst.map(function(x){\n        return Math.ceil(x);\n\
    \    }).reduce(function(a,b){\n        return a + b*b;\n    });\n}\n", "    let\
    \ result = 0;\n    for (let i=0; i<lst.length; i++){\n        result += Math.pow(Math.ceil(lst[i]),\
    \ 2);\n    }\n    return result;\n}", "    let array = []\n    for(let i = 0;\
    \ i < lst.length; i++){\n        let num = lst[i]\n        array.push(Math.ceil(num))\n\
    \    }\n    let squared = 0\n    for(let i = 0; i < array.length; i++){\n    \
    \    let num = array[i]\n        squared += Math.pow(num, 2)\n    }\n    return\
    \ squared\n}", "    return lst.map(val => Math.ceil(val)**2).reduce((acc, val)\
    \ => acc + val);\n}", "  return lst.map(e => Math.ceil(e)**2).reduce((a, b) =>\
    \ a + b, 0);\n}\n", "    let result = 0;\n    for (let i=0; i<lst.length; i++){\n\
    \        let num = Math.ceil(lst[i]);\n        result = result + (num * num);\n\
    \    }\n    return result;\n}", "  return lst.map(Math.ceil).reduce((a,b) => a\
    \ + b*b, 0);\n}\n", "    let lst_len = lst.length;\n    let sum_squares = 0;\n\
    \    for (i = 0; i < lst_len; i++){\n        sum_squares += Math.ceil(lst[i])\
    \ ** 2;\n    }\n    return sum_squares;\n}", "    return lst.map(function(element){\n\
    \        return Math.ceil(element);\n    }).reduce(function(accumulator, current){\n\
    \        return accumulator + Math.pow(current, 2);\n    }, 0);\n}\n", "    lst\
    \ = lst.map(num => Math.ceil(num));\n    return lst.reduce((sum, num) => sum +\
    \ Math.pow(num, 2), 0);\n}", "    return lst.map(Math.ceil).reduce((acc, n) =>\
    \ acc + n ** 2, 0);\n}\n", "    var sum = 0;\n    for(var i = 0; i < lst.length;\
    \ i++){\n        sum += Math.pow(Math.ceil(lst[i]), 2);\n    }\n    return sum;\n\
    }", "    let newList = lst.map(x => Math.ceil(x)).map(x => x * x);\n    let total\
    \ = newList.reduce((sum, x) => sum + x);\n    return total;\n}\n", "   return\
    \ lst.map(x => Math.ceil(x)).reduce((acc,x) => acc + x*x,0);\n}", "    let result\
    \ = lst.map(x => Math.ceil(x)).map(x => x * x).reduce((acc, x) => acc + x);\n\
    \    return result;\n}\n", "    let result = 0;\n    for (let num of lst){\n \
    \       result += Math.pow(Math.ceil(num), 2);\n    }\n    return result;\n}",
  "  return lst.map(Math.ceil).reduce((acc, curr) => acc + Math.pow(curr, 2), 0);\n\
    }", "    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n       \
    \ let a = lst[i];\n        a = Math.ceil(a);\n        a = a * a;\n        result\
    \ += a;\n    }\n    return result;\n}", "    return lst.map(x => x**2).reduce((a,\
    \ b) => a + b, 0);\n}\n", "    return lst.map(a => Math.ceil(a)).reduce((a, b)\
    \ => a + b * b, 0);\n}\n", "    return lst.map(el => Math.ceil(el))\n        .map(el\
    \ => el ** 2)\n        .reduce((acc, el) => acc + el, 0);\n}", "    let sum =\
    \ 0;\n    for (let i=0; i<lst.length; i++){\n        sum += Math.ceil(lst[i])\
    \ ** 2;\n    }\n    return sum;\n}\n", "let myArray =[];\nlet sum = 0;\nfor(let\
    \ i = 0; i < lst.length; i++){\n  let item = Math.ceil(lst[i]);\n  let square\
    \ = Math.pow(item, 2);\n  myArray.push(square);\n  sum += square;\n}\nreturn sum;\n\
    }", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        let\
    \ num = Math.ceil(lst[i]);\n        sum += Math.pow(num, 2);\n    }\n    return\
    \ sum;\n}", "    let sum = 0;\n    lst.forEach(x => {\n        let squared = Math.ceil(x)*Math.ceil(x);\n\
    \        sum += squared;\n    });\n    return sum;\n}\n\n", "    return lst.map(el\
    \ => Math.ceil(el)).reduce((ac,el) => ac + el*el,0);\n}\n", "    return lst.map(Math.ceil).reduce((a,b)\
    \ => a + b * b, 0);\n}", "    return lst.map(x => Math.ceil(x)).reduce((acc, x)\
    \ => acc + x * x, 0);\n}", "    return lst.map(x => Math.ceil(x)).reduce((acc,x)\
    \ => acc + x * x, 0);\n}\n", "    return lst.map(function(x){return Math.ceil(x)}).reduce(function(acc,cur){return\
    \ acc+cur*cur},0)\n}\n", "    var total=0;\n    for(var i=0;i<lst.length;i++){\n\
    \        total+=Math.pow(Math.ceil(lst[i]),2);\n    }\n    return total;\n}\n\
    var arr=[1.0, 2.0, 3.0];", "    var sum = 0;\n    for (var i = 0; i < lst.length;\
    \ i++){\n        sum += Math.ceil(lst[i]) ** 2;\n    }\n    return sum;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    lst[i] = Math.ceil(lst[i]);\n\
    \    sum += lst[i] ** 2;\n  }\n  return sum;\n}\n", "    let total = 0;\n    for(let\
    \ i = 0; i < lst.length; i++){\n        let rounded = Math.ceil(lst[i]);\n   \
    \     total += rounded * rounded;\n    }\n    return total;\n}", "    return lst.map(e\
    \ => Math.ceil(e)).reduce((s,e) => s + e**2, 0);\n}", "    let newList = [];\n\
    \    let result = 0;\n    for (let i = 0; i < lst.length; i++){\n        newList.push(Math.ceil(lst[i]));\n\
    \    }\n    for (let i = 0; i < newList.length; i++){\n        result += Math.pow(newList[i],\
    \ 2);\n    }\n    return result;\n}\n", "  return lst.map(Math.ceil).reduce((a,b)\
    \ => a + (b * b), 0);\n}\n", "    var newArray = [];\n    var i = 0;\n    while\
    \ (i < lst.length){\n        newArray.push(Math.ceil(lst[i]));\n        i++;\n\
    \    }\n    var sum = 0;\n    var j = 0;\n    while (j < newArray.length){\n \
    \       sum += newArray[j] * newArray[j];\n        j++;\n    }\n    return sum;\n\
    }\n", "    var sum = 0;\n    for (var i=0; i<lst.length; i++){\n        var num\
    \ = Math.ceil(lst[i]);\n        sum += Math.pow(num, 2);\n    }\n    return sum;\n\
    }", "    var sum = 0;\n    for (var i=0; i<lst.length; i++){\n        sum += Math.ceil(lst[i])**2;\n\
    \    }\n    return sum;\n}", "    var sum = 0;\n    for (i = 0; i < lst.length;\
    \ i++){\n        sum += Math.ceil(lst[i])**2;\n    }\n    return sum;\n}\n", " \
    \   let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += Math.ceil(lst[i])\
    \ * Math.ceil(lst[i]);\n    }\n    return sum;\n}", "    return Math.pow(Math.ceil(lst[0]),2)\
    \ + Math.pow(Math.ceil(lst[1]),2) + Math.pow(Math.ceil(lst[2]),2);\n}", "    return\
    \ lst.map(Number).map(Math.ceil).map(x => x*x).reduce((a, b) => a + b);\n}\n",
  "    return lst.map(Math.ceil).reduce((acc, el) => acc + el**2, 0);\n}\n", "   \
    \ return lst.map(x => Math.ceil(x)).reduce((a, b) => a + b ** 2, 0);\n}\n", " \
    \   return lst.map(function(num){\n        return Math.ceil(num);\n    }).reduce(function(a,b){\n\
    \        return Math.pow(a,2) + Math.pow(b,2);\n    });\n}", "    var result =\
    \ 0;\n    for (let i = 0; i < lst.length; i++) {\n        let new_num = Math.ceil(lst[i]);\n\
    \        result += new_num ** 2;\n    }\n    return result;\n}\n", "  var sum\
    \ = 0;\n  for(var i = 0; i < lst.length; i++){\n    lst[i] = Math.ceil(lst[i]);\n\
    \    sum += lst[i] * lst[i];\n  }\n  return sum;\n}\nsum_squares([1.0, 2.0, 3.0]);",
  "    return lst.map(x => Math.ceil(x))\n        .map(x => x * x)\n        .reduce((a,\
    \ b) => a + b);\n}", "\tvar sum = 0;\n\tfor(var i = 0; i < lst.length; i++){\n\
    \t\tvar tmp = Math.ceil(lst[i]);\n\t\tsum += tmp * tmp;\n\t}\n\treturn sum;\n\
    }\n", "    var l = lst.map(function(a){return Math.ceil(a)});\n    return l.reduce(function(a,b){return\
    \ a+b*b},0);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
