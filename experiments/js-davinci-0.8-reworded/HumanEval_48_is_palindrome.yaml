name: HumanEval_48_is_palindrome
language: js
prompt: "//Checks if given string is a palindrome\n// >>> is_palindrome(\"\")\n//\
  \ true\n// >>> is_palindrome(\"aba\")\n// true\n// >>> is_palindrome(\"aaaaa\")\n\
  // true\n// >>> is_palindrome(\"zbcd\")\n// false\nfunction is_palindrome(text){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = is_palindrome;\n  assert.deepEqual(candidate(\"\"),true);\n  assert.deepEqual(candidate(\"\
  aba\"),true);\n  assert.deepEqual(candidate(\"aaaaa\"),true);\n  assert.deepEqual(candidate(\"\
  zbcd\"),false);\n  assert.deepEqual(candidate(\"xywyx\"),true);\n  assert.deepEqual(candidate(\"\
  xywyz\"),false);\n  assert.deepEqual(candidate(\"xywzx\"),false);\n}\n\ntest();"
completions: ["    return text == text.split(\"\").reverse().join(\"\");\n}\n", " \
    \   var reverse = text.split(\"\").reverse().join(\"\");\n    if (text === reverse){\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\n\n", " \
    \   if (text.length === 0) {\n        return true;\n    }\n    else if (text.length\
    \ === 1) {\n        return true;\n    }\n    else if (text[0] !== text[text.length\
    \ - 1]) {\n        return false;\n    }\n    else {\n        return is_palindrome(text.slice(1,\
    \ text.length - 1));\n    }\n}\n", "  var reversed = text.split(\"\").reverse().join(\"\
    \");\n  if (text == reversed){\n    return true;\n  }\n  else {\n    return false;\n\
    \  }\n}\n", "    var r = rev(text);\n    if (r == text){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n", "\tif (text === '') {\n\
    \t\treturn true;\n\t}\n\tif (text[0] === text[text.length - 1]) {\n\t\treturn\
    \ is_palindrome(text.slice(1, text.length - 1));\n\t}\n\treturn false;\n}\n",
  "\tif (text.length === 0) {\n\t\treturn true;\n\t}\n\t\n\tif (text.length === 1)\
    \ {\n\t\treturn true;\n\t}\n\t\n\tif (text[0] === text[text.length - 1]) {\n\t\
    \treturn is_palindrome(text.slice(1, text.length - 1));\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\n", "  console.log(text);\n  if(text.length <= 1){\n    return\
    \ true;\n  } else {\n    if(text[0] === text[text.length - 1]){\n      return\
    \ is_palindrome(text.slice(1, text.length - 1));\n    } else {\n      return false;\n\
    \    }\n  }\n}\n", "  //if first letter equals last letter, move 1 up and down\
    \ and check if the same and then return that.\n  var first,last;\n  var half =\
    \ Math.floor(text.length/2);\n  if(text.length === 0){\n    return true;\n  }\n\
    \  else{\n    for(var i = 0; i < half; i++){\n      first = text[i];\n      last\
    \ = text[text.length - i - 1];\n      if(first !== last){\n        return false;\n\
    \      }\n    }\n    return true;\n  }\n}\n", "\tvar textLength = text.length;\n\
    \tvar textHalf = textLength/2;\n\tvar textLengthInt = parseInt(textHalf);\n\t\
    var isPalindrome = true;\n\tfor(var i = 0; i < textLengthInt; i++){\n\t\tif(text[i]\
    \ != text[textLength-1-i]){\n\t\t\tisPalindrome = false;\n\t\t}\n\t}\n\treturn\
    \ isPalindrome;\n}\n", "    if (text.length <= 1) return true;\n    if (text[0]\
    \ != text[text.length-1]) return false;\n    else return is_palindrome(text.slice(1,text.length-1));\n\
    }", "    if (text == text.split(\"\").reverse().join(\"\")){\n        return true;\n\
    \    }\n    else {\n        return false;\n    }\n}\n", "    return text === text.split(\"\
    \").reverse().join(\"\");\n}", "\t//Convert string to array\n\tvar text_array\
    \ = str_to_array(text);\n\t//Convert array to reverse array\n\tvar reverse_array\
    \ = array_reverse(text_array);\n\t//Convert array to string\n\tvar reverse_string\
    \ = array_to_str(reverse_array);\n\t//Compare string and reverse string\n\tif(text\
    \ == reverse_string){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n",
  "\t//Here we use the reverse() function defined in Exercise 4\n\treturn text ==\
    \ reverse(text);\n}\n", "    if (text == \"\") {\n        return true;\n    }\
    \ else if (text.length == 1) {\n        return true;\n    } else if (text.charAt(0)\
    \ == text.charAt(text.length - 1)) {\n        return is_palindrome(text.substring(1,\
    \ text.length - 1));\n    } else {\n        return false;\n    }\n}\n\n", "  return\
    \ (text === text.split(\"\").reverse().join(\"\"));\n}\n", "\tfor(var i = 0; i\
    \ < text.length/2; i++){\n\t\tif(text[i] != text[text.length-1-i]){\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n", "    // if (text == ''){\n    // \
    \    return true;\n    // }else if (text[0] === text[text.length-1]){\n    //\
    \     return is_palindrome(text.slice(1,text.length-1));\n    // }else{\n    //\
    \     return false;\n    // }\n    return text == text.split('').reverse().join('');\n\
    }\n", "    if (text.length <= 1) return true;\n    if (text[0] !== text[text.length\
    \ - 1]) return false;\n    return is_palindrome(text.slice(1, text.length - 1));\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
