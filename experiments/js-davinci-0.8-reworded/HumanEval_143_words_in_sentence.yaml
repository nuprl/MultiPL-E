name: HumanEval_143_words_in_sentence
language: js
prompt: "//You are given a string representing a sentence,\n// the sentence contains\
  \ some words separated by a space,\n// and you have to return a string that contains\
  \ the words from the original sentence,\n// whose lengths are prime numbers,\n//\
  \ the order of the words in the new string should be the same as the original one.\n\
  // Example 1:\n// >>> words_in_sentence(\"This is a test\")\n// \"is\"\n// Example\
  \ 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n// \"go for\"\n// Constraints:\n\
  // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = words_in_sentence;\n  assert.deepEqual(candidate(\"This is a test\"),\"is\"\
  );\n  assert.deepEqual(candidate(\"lets go for swimming\"),\"go for\");\n  assert.deepEqual(candidate(\"\
  there is no place available here\"),\"there is no place\");\n  assert.deepEqual(candidate(\"\
  Hi I am Hussein\"),\"Hi am Hussein\");\n  assert.deepEqual(candidate(\"go for it\"\
  ),\"go for it\");\n  assert.deepEqual(candidate(\"here\"),\"\");\n  assert.deepEqual(candidate(\"\
  here is\"),\"is\");\n}\n\ntest();"
completions: ["    let sentenceArray = sentence.split(\" \");\n    let ans = \"\"\
    ;\n    for(let i = 0; i < sentenceArray.length; i++){\n        if(isPrime(sentenceArray[i].length)){\n\
    \            ans += \" \" + sentenceArray[i];\n        }\n    }\n    return ans.substring(1);\n\
    }\n", "  var str = \"\";\n  var res = \"\";\n  var words = sentence.split(\" \"\
    );\n  for(var i = 0; i < words.length; i++){\n    if(isPrime(words[i].length)){\n\
    \      res += words[i] + \" \";\n    }\n  }\n  return res.trim();\n}\n", "   \
    \ let res = \"\";\n    let words = sentence.split(\" \");\n    for(let i = 0;\
    \ i < words.length; i++){\n        if(isPrime(words[i].length)){\n           \
    \ res = res + words[i] + \" \";\n        }\n    }\n    res = res.trim();\n   \
    \ return res;\n}", "    let arr = sentence.split(\" \");\n    let answerArr =\
    \ [];\n    let currentNum = 0;\n    for(let i = 0; i < arr.length; i++){\n   \
    \     currentNum = arr[i].length;\n        if(currentNum === 1){\n           \
    \ answerArr.push(arr[i]);\n        }\n        for(let j = 2; j < currentNum; j++){\n\
    \            if(currentNum % j === 0){\n                break;\n            }\n\
    \            if(j === currentNum - 1){\n                answerArr.push(arr[i]);\n\
    \            }\n        }\n    }\n    return answerArr.join(\" \");\n}", "   \
    \ // var words = sentence.split(' ');\n    // var result = '';\n    // var isPrime\
    \ = true;\n    // for(var i = 0; i < words.length; i++){\n    //     if(words[i].length\
    \ > 1){\n    //         for(var j = 2; j < words[i].length; j++){\n    //    \
    \         if(words[i].length % j === 0){\n    //                 isPrime = false;\n\
    \    //                 break;\n    //             }\n    //         }\n    //\
    \         if(isPrime){\n    //             result += words[i] + ' ';\n    // \
    \        }\n    //         isPrime = true;\n    //     }\n    // }\n    // return\
    \ result.trim();\n    return sentence.split(' ').filter(word => {\n        var\
    \ number = word.length;\n        var isPrime = true;\n        if(number === 1\
    \ || number === 0){\n            return false;\n        }\n        for(var i =\
    \ 2; i < number; i++){\n            if(number % i === 0){\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        return isPrime;\n\
    \    }).join(' ');\n}", "    return sentence.split(' ').filter(word => isPrime(word.length)).join('\
    \ ');\n}", "  // code here\n\n}\n", "    var arr = sentence.split(\" \");\n  \
    \  var res = \"\";\n    for(var i = 0; i < arr.length; i++){\n        if(isPrime(arr[i].length)){\n\
    \            res += arr[i] + \" \";\n        }\n    }\n    return res.trim();\n\
    }\n", "    // My code:\n    // var result = \"\";\n    // var words = sentence.split(\"\
    \ \");\n    // for (var i = 0; i < words.length; i++) {\n    //     if (isPrime(words[i].length))\
    \ {\n    //         result += words[i] + \" \";\n    //     }\n    // }\n    //\
    \ return result.trim();\n    // My code:\n    var result = \"\";\n    var words\
    \ = sentence.split(\" \");\n    for (var i = 0; i < words.length; i++) {\n   \
    \     if (isPrime(words[i].length)) {\n            result += words[i] + \" \"\
    ;\n        }\n    }\n    return result.trim();\n}\n", "    let arr = sentence.split(\"\
    \ \");\n    let result = [];\n    for(let i=0; i<arr.length; i++){\n        let\
    \ counter = 0;\n        for(let j=1; j<=arr[i].length; j++){\n            if(arr[i].length\
    \ % j === 0){\n                counter++;\n            }\n        }\n        if(counter\
    \ === 2){\n            result.push(arr[i]);\n        }\n    }\n    return result.join(\"\
    \ \");\n}", "    // Write your code here!\n}\n", "  let primeWords = [];\n  let\
    \ words = sentence.split(\" \");\n  for (let i = 0; i < words.length; i++) {\n\
    \    if (isPrime(words[i].length)) {\n      primeWords.push(words[i]);\n    }\n\
    \  }\n  return primeWords.join(\" \");\n}", "    let words=sentence.split(\" \"\
    );\n    let prime_words=\"\";\n    let k=0;\n    for(let i=0;i<words.length;i++){\n\
    \        let len=words[i].length;\n        let flag=0;\n        for(let j=2;j<len;j++){\n\
    \            if(len%j==0){\n                flag=1;\n                break;\n\
    \            }\n        }\n        if(flag==0){\n            if(k==0){\n     \
    \           prime_words=prime_words+words[i];\n                k=1;\n        \
    \    }\n            else{\n                prime_words=prime_words+\" \"+words[i];\n\
    \            }\n        }\n    }\n    return prime_words;\n}", "    var arrayOfWords\
    \ = sentence.split(\" \");\n    var wordsPrimeLength = arrayOfWords.filter(function(word){\n\
    \        return isPrime(word.length);\n    });\n    var newSentence = wordsPrimeLength.join(\"\
    \ \");\n    return newSentence;\n}", "    var arr = sentence.split(\" \");\n \
    \   var result = \"\";\n    var isPrime = function(num){\n        for(var i =\
    \ 2; i < num; i++){\n            if(num % i === 0){\n                return false;\n\
    \            }\n        }\n        return true;\n    };\n    for(var j = 0; j\
    \ < arr.length; j++){\n        if(isPrime(arr[j].length)){\n            result\
    \ += arr[j];\n            result += \" \";\n        }\n    }\n    return result.trim();\n\
    }\n", "    var arr = sentence.split(\" \");\n    var result = [];\n    for(var\
    \ i = 0; i < arr.length; i++){\n        var flag = true;\n        for(var j =\
    \ 2; j < arr[i].length; j++){\n            if(arr[i].length % j == 0){\n     \
    \           flag = false;\n                break;\n            }\n        }\n\
    \        if(flag){\n            result.push(arr[i]);\n        }\n    }\n    return\
    \ result.join(\" \");\n}", "    const sentenceArr = sentence.split(' ');\n   \
    \ const isPrime = num => {\n        for(let i = 2, s = Math.sqrt(num); i <= s;\
    \ i++)\n            if(num % i === 0) return false;\n        return num > 1;\n\
    \    }\n    return sentenceArr.filter(x => isPrime(x.length)).join(' ');\n}",
  "  // your code here\n  let res = '';\n  let arr = sentence.split(' ');\n  for(let\
    \ i=0; i<arr.length; i++){\n    if(isPrime(arr[i].length)){\n      res += arr[i]\
    \ + ' ';\n    }\n  }\n  return res.trim();\n}", "    var res = \"\";\n    var\
    \ arr = sentence.split(\" \");\n    for(var i = 0; i < arr.length; i++){\n   \
    \     if(isPrime(arr[i].length)){\n            res += arr[i] + \" \";\n      \
    \  }\n    }\n    return res.trim();\n}\n", "  var words = sentence.split(\" \"\
    );\n  var returnedWords = [];\n  for(var i = 0; i < words.length; i++){\n    if(isPrime(words[i].length)){\n\
    \      returnedWords.push(words[i]);\n    }\n  }\n  return returnedWords.join(\"\
    \ \");\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
