name: HumanEval_122_add_elements
language: js
prompt: "//Given a non-empty array of integers arr and an integer k, return\n// the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  // Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n// 24\n\
  // Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\nfunction\
  \ add_elements(arr, k){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
  \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
  \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
  \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
  }\n\ntest();"
completions: ["  let result = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] >=\
    \ 10 && arr[i] < 100){\n      result += arr[i];\n    }\n  }\n  return result;\n\
    }", "  var sum = 0;\n  for(var i = 0; i < k; i++){\n    if(arr[i] < 100){\n  \
    \    sum += arr[i];\n    }\n  }\n  return sum;\n}\n", "  return arr.slice(0, k).reduce((a,\
    \ b) => {\n    if (b > 9 && b < 100) {\n      return a + b;\n    } else {\n  \
    \    return a;\n    }\n  }, 0);\n}", "    let sum = 0;\n    for(let i = 0; i <\
    \ k; i++){\n        if(arr[i] < 10){\n            sum += arr[i];\n        }else\
    \ if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n    return\
    \ sum;\n}", "\tlet added = 0;\n\tfor(let i = 0; i < k; i++){\n\t\tif(arr[i] <\
    \ 100){\n\t\t\tadded += arr[i];\n\t\t}\n\t}\n\treturn added;\n}\n", "    let total\
    \ = 0;\n    let firstK = arr.slice(0, k);\n    firstK.forEach(element => {\n \
    \       if (element.toString().length <= 2){\n            total += element;\n\
    \        }\n    });\n    return total;\n}\n", "\tvar i = 0;\n\tvar sum = 0;\n\t\
    while(i < k){\n\t\tif(arr[i] < 100){\n\t\t\tsum += arr[i];\n\t\t}\n\t\ti++;\n\t\
    }\n\treturn sum;\n}\n", "    let k_length = [];\n    let new_arr = [];\n    for(let\
    \ i = 0; i < k; i++){\n        if(arr[i] > 9 && arr[i] < 100){\n            k_length.push(arr[i]);\n\
    \        }\n    }\n    let sum = 0;\n    for(let num of k_length){\n        sum\
    \ += num;\n    }\n    return sum;\n}", "  let finalSum = 0;\n  for(let i = 0;\
    \ i < k; i++){\n    if(arr[i] >= 10 && arr[i] < 100){\n      finalSum += arr[i];\n\
    \    }\n  }\n  return finalSum;\n}\n", "    let arr2 = arr.filter(x => x < 100);\n\
    \    console.log(arr2);\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n \
    \       sum += arr2[i];\n    }\n    return sum;\n}", "    let len = arr.length;\n\
    \    if(1 <= len && len <= 100 && 1 <= k && k <= len){\n        let sum = 0;\n\
    \        let all_add = 0;\n        let count = 0;\n        while(count < k){\n\
    \            let num = arr[count].toString();\n            if(num.length <= 2){\n\
    \                sum += arr[count];\n            }\n            count += 1;\n\
    \        }\n        return sum;\n    }\n}\n", "\tlet new_arr = arr.filter(ele\
    \ => ele >= 10 && ele <= 99);\n\treturn new_arr.slice(0, k).reduce((a, b) => a\
    \ + b);\n}", "    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i]\
    \ <= 99){\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n",
  "  let total = 0;\n  for (let i = 0; i < k; i++){\n    let num = arr[i];\n    if\
    \ (num > 99 || num < 0){\n      break;\n    }\n    total += num;\n  }\n  return\
    \ total;\n}", "    if(arr.length < 1 || arr.length > 100){\n        return \"\
    Array length invalid\"\n    }\n    if(k < 1 || k > arr.length){\n        return\
    \ \"k invalid\"\n    }\n    let num = 0;\n    for(let i = 0; i < k; i++){\n  \
    \      if(arr[i] < 10 || arr[i] > 99){\n            num += arr[i];\n        }\n\
    \    }\n    return num;\n}\n", "    let sum = 0;\n    for(let i = 0; i < k; i++){\n\
    \        if(arr[i] < 100){\n            sum += arr[i];\n        }\n    }\n   \
    \ return sum;\n}", "    //assuming arr has at least k elements\n    let sum =\
    \ 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i] < 100){\n           \
    \ sum += arr[i];\n        }\n    }\n    return sum;\n}\n", "    const new_arr\
    \ = arr.filter(element => element < 100);\n    const sum = new_arr.slice(0, k).reduce((acc,\
    \ curr) => acc + curr);\n    return sum;\n}", "  var newArr = [];\n  var sum =\
    \ 0;\n  for(var i = 0; i < k; i++){\n    if(arr[i] <= 99){\n      newArr.push(arr[i]);\n\
    \    }\n  }\n  for(var j = 0; j < newArr.length; j++){\n    sum += newArr[j];\n\
    \  }\n  return sum;\n}\nadd_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4);",
  "  let ret = 0;\n  for(let i = 0; i < k; i++){\n    if(arr[i] < 100){\n      ret\
    \ += arr[i];\n    }\n  }\n  return ret;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
