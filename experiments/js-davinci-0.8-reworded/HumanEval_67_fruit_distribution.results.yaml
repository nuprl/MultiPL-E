language: js
name: HumanEval_67_fruit_distribution
results:
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let [a, o] = s.split(' ').map(x => parseInt(x));\n\
    \    return n - a - o;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpivkjje_9.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpivkjje_9.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let split_s = s.split(\" \");\n    let num_of_apples\
    \ = parseInt(split_s[0]);\n    let num_of_oranges = parseInt(split_s[3]);\n  \
    \  let sum = num_of_apples + num_of_oranges;\n    return n - sum;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let [apples, oranges] = s.split(\" and \").map(a\
    \ => parseInt(a.split(\" \")[0]))\n    return n - (apples + oranges)\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tvar s = s.split(\" \");\n\tvar a = parseInt(s[0]);\n\
    \tvar o = parseInt(s[2]);\n\treturn (n - a - o);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmptlt7m8dw.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptlt7m8dw.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let x = s.split(\" \")\n    let apples = x[0]\n\
    \    let oranges = x[3]\n    let sum = apples + oranges;\n    return n - sum;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-37\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpq3u7q5nz.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpq3u7q5nz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -37,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    // Your code goes here\n    var o=Number(s.split(\"\
    \ \")[3]);\n    var a=Number(s.split(\" \")[0]);\n    var sum=o+a;\n    var m=n-sum;\n\
    \    return m;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let s2 = s.replace(/apples/g, '').replace(/oranges/g,\
    \ '').replace(/and/g, '').replace(/ /g, '').split('');\n    let sum = 0;\n   \
    \ for(let i = 0; i < s2.length; i++){\n        sum += Number(s2[i]);\n    }\n\
    \    return n - sum;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n118\n\nshould\
    \ loosely deep-equal\n\n19\n    at test (/tmp/tmpqqrew08u.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqqrew08u.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 118,\n  expected:\
    \ 19,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tvar arr = s.split(\" \");\n\tvar s_s = arr[0];\n\
    \tvar s_o = arr[3];\n\tvar n_s = n - s_s - s_o;\n\treturn n_s;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    const part = s.split(\" \");\n    let sum = 0;\n\
    \    for(let el of part){\n        if(el==\"apples\" || el==\"oranges\") continue;\n\
    \        sum += parseInt(el);\n    }\n    return n - sum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpbkel2ps7.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbkel2ps7.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    //your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmprdlef153.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmprdlef153.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tlet distribution = s.split(\" \");\n\tlet apples\
    \ = parseInt(distribution[0]);\n\tlet oranges = parseInt(distribution[3]);\n\t\
    return n - (apples + oranges);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var newstr = s.split(' ');\n    var apples =\
    \ newstr[0];\n    var oranges = newstr[4];\n    var total = parseInt(apples) +\
    \ parseInt(oranges);\n    var mango = n - total;\n    return mango;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpl6n9ertv.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl6n9ertv.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tlet fruits = s.split(\" and \")\n\tlet apples =\
    \ Number(fruits[0].split(\" \")[0])\n\tlet oranges = Number(fruits[1].split(\"\
    \ \")[0])\n\tlet mango = n - apples - oranges\n\treturn mango\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var t = s.split(\" \");\n    var sum = parseInt(t[0])\
    \ + parseInt(t[2]);\n    return n - sum;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp0q_cy7c3.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0q_cy7c3.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let sArr = s.split(\" \")\n    let apples = Number(sArr[0])\n\
    \    let oranges = Number(sArr[3])\n    let basket = n - apples - oranges;\n \
    \   return basket\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var orange = 0;\n    var apple = 0;\n    var\
    \ mango = 0;\n    var info = s.split(\" \");\n    if(s.indexOf(\"orange\") >=\
    \ 0){\n        orange = Number(info[0]);\n    }\n    if(s.indexOf(\"apple\") >=\
    \ 0){\n        apple = Number(info[0]);\n    }\n    var fruit = orange + apple;\n\
    \    mango = n - fruit;\n    return mango;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpxzvpd7ex.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxzvpd7ex.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \")\n    let n2 = n - (parseInt(arr[0])\
    \ + parseInt(arr[3]))\n    return n2\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let firstWords = s.split(\" \")[0];\n    let\
    \ fruitsNumber = n - s.match(/\\d/g).reduce((a,b) => parseInt(a) + parseInt(b),\
    \ 0);\n    return fruitsNumber;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n118\n\nshould\
    \ loosely deep-equal\n\n19\n    at test (/tmp/tmp78if7sp0.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp78if7sp0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 118,\n  expected:\
    \ 19,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tvar arr = s.split(\" \")\n\tvar num1 = arr[0]\n\
    \tvar num2 = arr[3]\n\tvar sum = parseInt(num1) + parseInt(num2)\n\tvar diff =\
    \ n - sum\n\treturn diff\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n  var num = s.split(\" \")\n  var a = parseInt(num[0])\n\
    \  var o = parseInt(num[3])\n  return n - (a + o)\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpaye7x1xq.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpaye7x1xq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n  const x = s.split(' ');\n  let y = 0;\n  const\
    \ apples = x[0];\n  const oranges = x[4];\n  y = n - (apples + oranges);\n  return\
    \ y;\n};\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpindfs1xy.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpindfs1xy.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var orange = parseInt(s.split(\"and\")[1].split(\"\
    \ \")[1]);\n    var apple = parseInt(s.split(\"and\")[0].split(\" \")[0]);\n \
    \   return n - (orange + apple);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tlet nums = s.split(' ').map(Number);\n\treturn\
    \ n - nums[0] - nums[4];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp31y6igsw.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp31y6igsw.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\ts = s.split(\" \");\n\treturn (n - (parseInt(s[0])\
    \ + parseInt(s[4])));\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpv_yca5w5.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpv_yca5w5.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tvar result = n;\n\tvar array = s.split(\" \");\n\
    \tvar sum = parseInt(array[0]) + parseInt(array[4]);\n\treturn result - sum;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp94gox1oy.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp94gox1oy.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\treturn n - (parseInt(s.split(\" \")[0]) + parseInt(s.split(\"\
    \ \")[4]));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp4tit_y41.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp4tit_y41.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let apples_number = s.substring(0,s.indexOf(\"\
    apple\"));\n    let oranges_number = s.substring(s.indexOf(\"and\")+3,s.indexOf(\"\
    orange\"));\n    let sum_fruit = Number(apples_number) + Number(oranges_number);\n\
    \    let mango_number = n - sum_fruit;\n    return mango_number;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var s = s.split(\" \")\n    return n - s[0] -\
    \ s[4]\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpuiar5sdg.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuiar5sdg.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var a = s.split(\" \");\n    var x = a[0];\n\
    \    var y = a[3];\n    var ap = x.replace(\"apples\", \"\");\n    var or = y.replace(\"\
    oranges\", \"\");\n    var total = Number(ap) + Number(or);\n    var result =\
    \ n - total;\n    return result;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\t// write your code here\n}\n\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpfxippaf_.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfxippaf_.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let a = s.split(\" \");\n    let ans = n - (parseInt(a[0])\
    \ + parseInt(a[3]));\n    return ans;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\treturn  n - s.match(/\\d+/g).reduce((a,b) => a\
    \ + parseInt(b), 0);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    const a = s.split(\" apples and \")[0]\n    const\
    \ o = s.split(\" apples and \")[1].split(\" oranges\")[0]\n    return n - parseInt(a)\
    \ - parseInt(o)\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tlet apples = parseInt(s.split(\" \")[0]);\n\tlet\
    \ oranges = parseInt(s.split(\" \")[4]);\n\treturn n - (apples + oranges);\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpl8m11hzy.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl8m11hzy.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n  var apples = s.match(/\\d+/g)[0];\n  var oranges\
    \ = s.match(/\\d+/g)[1];\n  return n - apples - oranges;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apples = Number(arr[0]);\n\
    \    var oranges = Number(arr[4]);\n    var sum = apples + oranges;\n    var result\
    \ = n - sum;\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpw46qhf46.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpw46qhf46.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n  var nums = s.split(\" \");\n  return n - parseInt(nums[0])\
    \ - parseInt(nums[4]);\n}\nfruit_distribution(\"0 apples and 1 oranges\", 3);\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpt7gblayo.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpt7gblayo.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var apples = 0;\n    var oranges = 0;\n    s\
    \ = s.split(\" \");\n    for(var i = 0; i < s.length; i++){\n        if(s[i] ==\
    \ \"apples\"){\n            apples = parseInt(s[i-1]);\n        }else if(s[i]\
    \ == \"oranges\"){\n            oranges = parseInt(s[i-1]);\n        }\n    }\n\
    \    var mango = n - (apples + oranges);\n    return mango;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let count = s.split(\" \");\n    let apple =\
    \ parseInt(count[0]);\n    let orange = parseInt(count[count.length-2]);\n   \
    \ return n - (apple + orange);\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var s = s.split(\" \");\n    var apples = s[0];\n\
    \    var oranges = s[4];\n    var mangoes = n - parseInt(apples) - parseInt(oranges);\n\
    \    return mangoes;\n}\nfruit_distribution(\"100 apples and 1 oranges\", 120);\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp292a7j0r.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp292a7j0r.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var r = s.split(\" and \")\n    var r2 = r[0].split(\"\
    \ \")\n    var r3 = r[1].split(\" \")\n    var apple = parseInt(r2[0])\n    var\
    \ orange = parseInt(r3[0])\n    var total_fruits = apple + orange\n    var mango\
    \ = n - total_fruits\n    return mango\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    s = s.split(\" \");\n    var apples = parseInt(s[0]);\n\
    \    var oranges = parseInt(s[3]);\n    return n - apples - oranges;\n}\nfruit_distribution(\"\
    5 apples and 6 oranges\", 19);\nfruit_distribution(\"0 apples and 1 oranges\"\
    , 3);\nfruit_distribution(\"2 apples and 3 oranges\", 100);\nfruit_distribution(\"\
    100 apples and 1 oranges\", 120);\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let fruits = s.split(\" \");\n    let apples\
    \ = Number(fruits[0]);\n    let oranges = Number(fruits[3]);\n    let mango =\
    \ n - apples - oranges;\n    return mango;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    return n-s.split(\" \")[0]-s.split(\" \")[4]\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpcytqf9d4.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcytqf9d4.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tlet fruits = s.split(\" \");\n\tlet n_apple = Number(fruits[0]);\n\
    \tlet n_orange = Number(fruits[3]);\n\tlet mango = n - n_apple - n_orange;\n\t\
    return mango;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    console.log(s)\n    var splited = s.split(\"\
    \ \")\n    return n - (parseInt(splited[0]) + parseInt(splited[4]))\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp_eba7642.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_eba7642.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '5 apples and 6 oranges

    '
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    // your code here\n    let fruitsArray = s.split('\
    \ ');\n    let totalFruitsCount = 0;\n    for (let i = 0; i < fruitsArray.length;\
    \ i++) {\n        if (isNaN(fruitsArray[i])) {\n            continue;\n      \
    \  }\n        totalFruitsCount += Number(fruitsArray[i]);\n    }\n    return n\
    \ - totalFruitsCount;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var total = s.split(\" \")\n    return Math.abs(n\
    \ - (Number(total[0]) + Number(total[2])))\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp2vnpfvky.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2vnpfvky.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let pattern = /\\d+/g;\n    let nums = s.match(pattern);\n\
    \    let sum = 0;\n    for(let i = 0; i < nums.length; i++){\n        sum += Number(nums[i]);\n\
    \    }\n    return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    // BEGIN (write your solution here)\n    var\
    \ sArr = s.split(' ');\n    var sumAppleOrange = parseInt(sArr[0]) + parseInt(sArr[3]);\n\
    \    var mango = n - sumAppleOrange;\n    return mango;\n    // END\n  }\n  \n\
    \  //export default fruit_distribution;\n  // teacher solution\n  function fruit_distribution(s,\
    \ n) {\n    const [apple, orange] = s.split(' ').map(Number);\n    return n -\
    \ apple - orange;\n  }\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpkveca8_7.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpkveca8_7.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let count = 0;\n\
    \    for(let i = 0; i < arr.length; i++) {\n        if(arr[i] == \"apples\") {\n\
    \            count += Number(arr[i-1]);\n        }\n        if(arr[i] == \"oranges\"\
    ) {\n            count += Number(arr[i-1]);\n        }\n    }\n    return n -\
    \ count;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    //write your code here\n    let num = s.split('\
    \ ');\n    let num1 = parseInt(num[0]);\n    let num2 = parseInt(num[2]);\n  \
    \  let sum = num1 + num2;\n    let res = n - sum;\n    return res;\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpuzldzw5y.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuzldzw5y.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tconst reg = /\\d+/g;\n\tlet [apples, oranges] =\
    \ s.match(reg).map(el => parseInt(el));\n\tlet mangos = n - apples - oranges;\n\
    \treturn mangos;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tvar ss = s.split(\" and \");\n\tvar numApples =\
    \ ss[0].split(\" \")[0];\n\tvar numOranges = ss[1].split(\" \")[0];\n\tvar totalfruits\
    \ = parseInt(numApples) + parseInt(numOranges);\n\tvar mannum = n - totalfruits;\n\
    \treturn mannum;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = +arr[0]\
    \ + +arr[4];\n    return n - sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpeawv51xe.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpeawv51xe.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    //get the number of the apples\n    var apples_number\
    \ = parseInt(s.substring(0, s.indexOf(\" \")));\n    var oranges_number = parseInt(s.substring(s.indexOf(\"\
    \ \") + 1, s.lastIndexOf(\" \")));\n    var mango_number = n - apples_number -\
    \ oranges_number;\n    return mango_number;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp3f119au8.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp3f119au8.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let sum = 0;\n    for(let char of s){\n     \
    \   if(Number(char)){\n            sum += Number(char);\n        }\n    }\n  \
    \  return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n118\n\nshould\
    \ loosely deep-equal\n\n19\n    at test (/tmp/tmp6nkofqcw.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6nkofqcw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 118,\n  expected:\
    \ 19,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var nums = s.split(\" \");\n    var sum = 0;\n\
    \    for(var i = 0; i < nums.length; i++){\n        if(Number(nums[i])){\n   \
    \         sum += Number(nums[i]);\n        }\n    }\n    return n - sum;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let oranges =\
    \ parseInt(arr[3]);\n    let apples = parseInt(arr[0]);\n    return n - oranges\
    \ - apples;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var n = n;\n    var apples = s.substring(0, s.indexOf(\"\
    \ \"));\n    var oranges = s.substring(s.indexOf(\"and\") + 4, s.indexOf(\" \"\
    , s.indexOf(\"and\") + 4));\n    var sum = Number(apples) + Number(oranges);\n\
    \    var mango = n - sum;\n    console.log(mango);\n}\nfruit_distribution(\"5\
    \ apples and 6 oranges\", 19);\nfruit_distribution(\"0 apples and 1 oranges\"\
    , 3);\nfruit_distribution(\"2 apples and 3 oranges\", 100);\nfruit_distribution(\"\
    100 apples and 1 oranges\", 120);\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpquxopu9c.js:33:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpquxopu9c.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '8

    2

    95

    19

    8

    '
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    // your code here\n    let array = s.split(\"\
    \ \");\n    let size = array.length;\n    let a = array[0];\n    let sum;\n  \
    \  if(size > 4){\n        sum = 2 * parseInt(a);\n    }\n    else {\n        sum\
    \ = parseInt(a);\n    }\n    return n - sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpuznezz8t.js:35:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuznezz8t.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    return n-(+s.split(\" \")[0]+ +s.split(\" \"\
    )[3])\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    // get number of apples\n    s = s.split(\" \"\
    );\n    var a = parseInt(s[0]);\n    var o = parseInt(s[4]);\n    return n - a\
    \ - o;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpsn_9kq9m.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsn_9kq9m.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    n = n - s.split(\"and\")[0].split(\" \")[0] -\
    \ s.split(\"and\")[1].split(\" \")[1]\n    return n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tif(n < 1){\n\t\treturn 0;\n\t}\n\tvar a = s.split(\"\
    \ \");\n\tvar x = Number(a[0]);\n\tvar y = Number(a[3]);\n\tvar total = x + y;\n\
    \tvar mango = n - total;\n\treturn mango;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n  // your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpd37enkq_.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpd37enkq_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    return \"\";\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmpehu85w5g.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpehu85w5g.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n  \n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpwieg6c8l.js:23:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpwieg6c8l.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let x = s.split(\" \");\n    let numApple = parseInt(x[0]);\n\
    \    let numOrange = parseInt(x[2]);\n    return n - (numApple + numOrange);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpcjr64mhe.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpcjr64mhe.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let total = 0;\n    let arr = s.split(\" \");\n\
    \    let num = 0;\n    for(let i = 0; i < arr.length; i++){\n        if(arr[i]\
    \ == \"and\"){\n            num = parseInt(arr[i+1]);\n        }\n    }\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] == \"apples\"){\n          \
    \  total += parseInt(arr[i-1]);\n        }else if(arr[i] == \"oranges\"){\n  \
    \          total += parseInt(arr[i-1]);\n        }\n    }\n    total = n - total;\n\
    \    return total;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    if (typeof s === \"string\" && typeof n === \"\
    number\"){\n        let str = s.split(\" \");\n        let str_arr = [];\n   \
    \     let number_arr = [];\n        for (let i = 0; i < str.length; i++) {\n \
    \           if (isNaN(str[i])) {\n                str_arr.push(str[i]);\n    \
    \        }\n            else {\n                number_arr.push(str[i]);\n   \
    \         }\n        }\n        let total_fruit = n - (number_arr[0]*1) - (number_arr[2]*1);\n\
    \        return total_fruit;\n    }\n    else {\n        return \"Not a valid\
    \ string or integer.\";\n    }\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpsgbek00n.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsgbek00n.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n  // your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpd37enkq_.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpd37enkq_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tlet arr = s.split(\" \");\n\tlet apples = arr[0]\
    \ * 1;\n\tlet oranges = arr[3] * 1;\n\treturn n - (apples + oranges);\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n  var s= s.split(\" \")\n  var a = parseInt(s[0])\n\
    \  var o = parseInt(s[3])\n  var sum = a+o\n  var m = n-sum\n  return m\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var temp = s.split(\" \");\n    var total_fruits\
    \ = parseInt(temp[0]) + parseInt(temp[2]);\n    return n - total_fruits;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpk5tgvwv_.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpk5tgvwv_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var number_of_apples = s.split(\" \")[0];\n \
    \   var number_of_oranges = s.split(\" \")[4];\n    return n - (number_of_apples\
    \ + number_of_oranges);\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpbp2ew5qh.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbp2ew5qh.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let sum = 0;\n\
    \    for(i in arr){\n        if(arr[i] != \"apples\" && arr[i] != \"oranges\"\
    \ && arr[i] != \"and\"){\n            sum += parseInt(arr[i]);\n        }\n  \
    \  }\n    return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var applesAndOranges = s.split(\" and \");\n\
    \    var basket = n;\n    var oranges = parseInt(applesAndOranges[1].slice(0,applesAndOranges[1].length-1));\n\
    \    var apples = parseInt(applesAndOranges[0].slice(0,applesAndOranges[0].length-1));\n\
    \    return basket - apples - oranges;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    // return n - (string_to_int(s) + string_to_int(s.split(\"\
    and\")[1]))\n    return n - (string_to_int(s.split(\"and\")[0]) + string_to_int(s.split(\"\
    and\")[1]))\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbu_yuj12.js:17\n    return n - (string_to_int(s.split(\"and\")[0])\
    \ + string_to_int(s.split(\"and\")[1]))\n    ^\n\nReferenceError: string_to_int\
    \ is not defined\n    at fruit_distribution (/tmp/tmpbu_yuj12.js:17:5)\n    at\
    \ test (/tmp/tmpbu_yuj12.js:25:20)\n    at Object.<anonymous> (/tmp/tmpbu_yuj12.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    // Write your code here\n    var sa = s.split(\"\
    \ \");\n    var num_apples = parseInt(sa[0], 10);\n    var num_oranges = parseInt(sa[3],\
    \ 10);\n    return n - num_apples - num_oranges;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tvar totalFruits = s.split(\" \");\n\tvar apple\
    \ = Number(totalFruits[0]);\n\tvar orange = Number(totalFruits[2]);\n\treturn\
    \ (n - (apple + orange));\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpqev_o86r.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqev_o86r.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let s_list = s.split(\" \");\n    let number_of_oranges\
    \ = parseInt(s_list[0]);\n    let number_of_apples = parseInt(s_list[2]);\n  \
    \  let basket_size = number_of_oranges + number_of_apples;\n    let number_of_mangoes\
    \ = n - basket_size;\n    return number_of_mangoes;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp8wyc4gkz.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp8wyc4gkz.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n   var index = s.indexOf(\" and \");\n    var numOfApples\
    \ = Number(s.substring(0, index));\n    var numOfOranges = Number(s.substring(index\
    \ + 5));\n    var numOfMangoes = n - numOfApples - numOfOranges;\n    return numOfMangoes;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpvqnkph0f.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpvqnkph0f.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tvar apples = parseInt(s.split(\" \")[0])\n\tvar\
    \ oranges = parseInt(s.split(\" \")[4])\n\tvar mango = n - apples - oranges\n\t\
    return mango\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpqb33e8gs.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqb33e8gs.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\ts = s.split(\" \");\n\treturn n-parseInt(s[0])-parseInt(s[s.length-2]);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var apple=parseInt(s.slice(0,1))+parseInt(s.slice(6,7));\n\
    \    return n-apple;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpxd82v_m1.js:24:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpxd82v_m1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    s = s.split(\" \");\n    let apples = parseInt(s[0]);\n\
    \    let oranges = parseInt(s[4]);\n    return n - apples - oranges;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmptzgl7j9j.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptzgl7j9j.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    return n - (parseInt(s.slice(0, s.indexOf(\"\
    \ \"))) + parseInt(s.slice(s.lastIndexOf(\" \")+1)))\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp6ooewv1i.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6ooewv1i.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    const s2 = s.split(' ');\n    const m = (n -\
    \ parseInt(s2[0]) - parseInt(s2[4]));\n    return m;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpsxp4ugc7.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpsxp4ugc7.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var apples = arr[0];\n\
    \    var oranges = arr[4];\n    var total = n - (parseInt(apples) + parseInt(oranges));\n\
    \    return total;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpiuq6exzg.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpiuq6exzg.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var app = parseInt(arr[0]);\n\
    \    var org = parseInt(arr[3]);\n    return n - app - org;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n  let total = s.split(\" and \").map(x => x.split(\"\
    \ \").map(x => x.replace(/[^a-z]/gi, \"\")));\n  let t1 = total[0][0];\n  let\
    \ t2 = total[1][0];\n  return (n - (parseInt(t1) + parseInt(t2)));\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpl53vq5no.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpl53vq5no.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    if(n === 0) return 0;\n    var sum = 0;\n   \
    \ var nums = s.match(/\\d+/g);\n    for(var i = 0; i < nums.length; i++){\n  \
    \      sum += parseInt(nums[i]);\n    }\n    return n - sum;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var a = parseInt(s.substring(0, s.indexOf(\"\
    \ apples and \")));\n    var o = parseInt(s.substring(s.indexOf(\" apples and\
    \ \") + 11, s.indexOf(\" oranges\")));\n    return n - a - o;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let total = s.split(\" and \").reduce((acc,val)=>{\n\
    \        return acc + parseInt(val.split(\" \")[0]);\n    },0);\n    return n\
    \ - total;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    // your code here..\n    var text = s.split(\"\
    \ \");\n    var apples = parseInt(text[0]);\n    var oranges = parseInt(text[3]);\n\
    \    return n - (apples + oranges);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let s_arr = s.split(\" \");\n    let mango =\
    \ n;\n    let apples = parseInt(s_arr[0]);\n    let oranges = parseInt(s_arr[2]);\n\
    \    mango -= apples;\n    mango -= oranges;\n    return mango;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpffdv70bw.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpffdv70bw.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    const num = (s.split(\" and \")[0]).split(\"\
    \ \")[0];\n    const num2 = (s.split(\" and \")[1]).split(\" \")[0];\n    const\
    \ total = Number(num) + Number(num2);\n    console.log(n - total);\n}\n\nfruit_distribution(\"\
    5 apples and 6 oranges\", 19);\nfruit_distribution(\"0 apples and 1 oranges\"\
    , 3);\nfruit_distribution(\"2 apples and 3 oranges\", 100);\nfruit_distribution(\"\
    100 apples and 1 oranges\", 120);\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpqdsfct7r.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpqdsfct7r.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '8

    2

    95

    19

    8

    '
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var i=0;\n    var apples=0;\n    var oranges=0;\n\
    \    while(s[i]!=' '){\n        if(s[i]!='a'){\n            apples=apples*10+parseInt(s[i]);\n\
    \        }\n        i++;\n    }\n    while(s[i]!=' '){\n        i++;\n    }\n\
    \    i=i+5;\n    while(s[i]!=' '){\n        if(s[i]!='a'){\n            oranges=oranges*10+parseInt(s[i]);\n\
    \        }\n        i++;\n    }\n    return n-(apples+oranges);\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpch0z1mwk.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpch0z1mwk.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var fruits = s.split(\" \");\n    var totalFruits\
    \ = parseInt(fruits[0]) + parseInt(fruits[2]);\n    return n - totalFruits;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp0a6nse_0.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0a6nse_0.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tvar totalFruits = s.split(\" \");\n\tvar totalApple\
    \ = totalFruits[0];\n\tvar totalOrange = totalFruits[4];\n\tvar total = n - (totalApple\
    \ * 1 + totalOrange * 1);\n\treturn total;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpqc3m85j_.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqc3m85j_.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let sum = 0;\n    let flag = false;\n    let\
    \ current = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] == 'a'){\n\
    \            sum += Number(current);\n            current = 0;\n            flag\
    \ = false;\n        }else if(s[i] == 'o'){\n            sum += Number(current);\n\
    \            current = 0;\n            flag = false;\n        }else if(!isNaN(s[i])){\n\
    \            current += s[i];\n            flag = true;\n        }else if(s[i]\
    \ == ' ' && flag){\n            sum += Number(current);\n            current =\
    \ 0;\n            flag = false;\n        }\n    }\n    return n - sum;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpbqjh48o5.js:44:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpbqjh48o5.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var i = 0;\n    var fruit = s.split(\" \");\n\
    \    for(let i = 0; i < fruit.length; i++) {\n        if(fruit[i] == \"apples\"\
    ) {\n            var apples = parseInt(fruit[i-1]);\n        }\n        if(fruit[i]\
    \ == \"oranges\") {\n            var oranges = parseInt(fruit[i-1]);\n       \
    \ }\n    }\n    return n - (apples + oranges);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    return n - s.replace(/[^0-9]/g, \"\") * 1\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-37\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpmr338pc2.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpmr338pc2.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -37,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let arr = s.split(\" \");\n    let numOfMangos\
    \ = 0;\n    if(arr[0].split(\"\").length == 2){\n        numOfMangos = (parseInt(arr[0].split(\"\
    \")[0]) * 10) + parseInt(arr[0].split(\"\")[1]);\n    }\n    else{\n        numOfMangos\
    \ = parseInt(arr[0].split(\"\")[0]);\n    }\n    return numOfMangos;\n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp_gzi4tcx.js:33:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp_gzi4tcx.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var arr = s.split(\" \");\n    var app = parseInt(arr[0]);\n\
    \    var ora = parseInt(arr[3]);\n    return n - app - ora;\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\treturn n-s.replace(/[a-z]/g, \"\").split(\" \"\
    ).reduce((x,y)=> parseInt(x)+parseInt(y));\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpy4i71tcr.js:23:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpy4i71tcr.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tvar temp = s.split(\" \");\n\tvar num_apples =\
    \ Number(temp[0]);\n\tvar num_oranges = Number(temp[3]);\n\tvar total_fruits =\
    \ num_apples + num_oranges;\n\tvar mangoes = n - total_fruits;\n\treturn mangoes;\n\
    \n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n  // your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n8\n    at test (/tmp/tmpd37enkq_.js:24:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpd37enkq_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821078
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    s = s.split(\" \");\n    let [apples, oranges]\
    \ = [Number(s[0]), Number(s[4])];\n    return n - apples - oranges;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmplmzqf12t.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmplmzqf12t.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    s = s.split(\" \");\n    let fruits = n - parseInt(s[0])\
    \ - parseInt(s[3]);\n    return fruits;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var apples = 0;\n    var oranges = 0;\n    var\
    \ arr = s.split(\" \");\n    apples = arr[0];\n    oranges = arr[3];\n    total\
    \ = parseInt(apples) + parseInt(oranges);\n    return n - total;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var res = s.split(\" \");\n    var newStr = res[0].split(\"\
    \").join(\"\");\n    var newStr1 = res[2].split(\"\").join(\"\");\n    var sum\
    \ = Number(newStr) + Number(newStr1);\n    var result = n - sum;\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 21),10);\n\
    \  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\"\
    , 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\", 120),19);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpgiwxpxri.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpgiwxpxri.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var s_arr = s.split(\" \");\n    var temp = s_arr[0]\
    \ + s_arr[1];\n    var total_fruit = n - parseInt(temp);\n    return total_fruit;\n\
    }\nfruit_distribution(\"2 apples and 3 oranges\", 100);\nfruit_distribution(\"\
    100 apples and 1 oranges\", 120);\nfruit_distribution(\"5 apples and 6 oranges\"\
    , 19);\nfruit_distribution(\"0 apples and 1 oranges\", 3);\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n8\n    at test (/tmp/tmp2whn8lb5.js:31:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp2whn8lb5.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let a = s.split(\" and \");\n    let apples =\
    \ a[0].slice(0, -7);\n    let oranges = a[1].slice(0, -7);\n    return n - apples\
    \ - oranges;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var sArray = s.split(\" \");\n    var numApples\
    \ = parseInt(sArray[0]);\n    var numOranges = parseInt(sArray[2]);\n    var numMangos\
    \ = n - numApples - numOranges;\n    return numMangos;\n}\nvar result2 = fruit_distribution(\"\
    5 apples and 6 oranges\", 19);\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmpfnvtfqfh.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfnvtfqfh.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let fruits = s.split(\" \");\n    let sum = 0;\n\
    \    for(let i = 0; i < fruits.length; i++){\n        if(fruits[i] == \"apples\"\
    ){\n            sum += Number(fruits[i-1]);\n        }\n        else if(fruits[i]\
    \ == \"oranges\"){\n            sum += Number(fruits[i-1]);\n        }\n    }\n\
    \    return n - sum;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tvar arr = s.split(\" \");\n\tvar a = +arr[0];\n\
    \tvar o = +arr[3];\n\treturn n - (a + o);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let a = Number(s.split(\" and \")[0].split(\"\
    \ \")[0]);\n    let o = Number(s.split(\" and \")[1].split(\" \")[0]);\n    return\
    \ n - a - o;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var total = s.split(\" \");\n    var apple =\
    \ parseInt(total[0]);\n    var orange = parseInt(total[3]);\n    return n - apple\
    \ - orange;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let str = s.split(\" \");\n    let sum = +str[0]\
    \ + +str[3];\n    return n - sum;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    //find how many apples in s\n    var x = s.indexOf(\"\
    apples\");\n    var y = s.indexOf(\"and\");\n    var z = s.indexOf(\"oranges\"\
    );\n    //console.log(x,y,z);\n    var a = parseInt(s.substring(0,x-1));\n   \
    \ var b = parseInt(s.substring(y+4,z-1));\n    //console.log(a,b);\n    var total\
    \ = a+b;\n    var r = n-total;\n    return r;\n}\nvar s = \"20 apples and 20 oranges\"\
    ;\nvar n = 60;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples\
    \ and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var apples = parseInt(s.split(\"apples\")[0]);\n\
    \    var oranges = parseInt(s.split(\"apples\")[1].split(\"oranges\")[0]);\n \
    \   return n - (apples + oranges);\n}\nvar n = prompt(\"Enter The number of Fruit\"\
    );\nvar s = prompt(\"Enter The type of Fruit\");\ndocument.write(fruit_distribution(s,\
    \ n));\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and 6 oranges\"\
    , 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\", 3),2);\n\
    \  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpe4wingbo.js:20\nvar n = prompt(\"Enter The number of Fruit\");\n\
    \        ^\n\nReferenceError: prompt is not defined\n    at Object.<anonymous>\
    \ (/tmp/tmpe4wingbo.js:20:9)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    var apples = s.split(\" apples\")[0];\n    var\
    \ oranges = s.split(\"and \")[1].split(\" oranges\")[0];\n    return n - (parseInt(apples)\
    \ + parseInt(oranges));\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    return n - s.split(\" and \").reduce((a,b) =>\
    \ a + Number(b.split(\" \")[0]), 0)\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n  let first_number = parseInt(s.slice(0,1));\n  let\
    \ second_number = parseInt(s.slice(16,17));\n  let number_of_apples = n - (first_number\
    \ + second_number);\n  return number_of_apples;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp9rkazsyr.js:27:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9rkazsyr.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n  let strArr = s.split(\" \");\n  let apples = parseInt(strArr[0]);\n\
    \  let oranges = parseInt(strArr[3]);\n  let totFruits = apples + oranges;\n \
    \ let mango = n - totFruits;\n  return mango;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let a = parseInt(s.split(\" \")[0]);\n    let\
    \ o = parseInt(s.split(\" \")[3]);\n    return n - a - o;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fruit_distribution;\n\
    \  assert.deepEqual(candidate(\"5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and\
    \ 1 oranges\", 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 100),95);\n\
    \  assert.deepEqual(candidate(\"2 apples and 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"\
    1 apples and 100 oranges\", 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    let a = s.split(\" \")[0];\n    let o = s.split(\"\
    \ \")[3];\n    return n - (parseInt(a) + parseInt(o));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 0
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n    const fruits = s.split(\" and \");\n    const\
    \ apples = fruits[0].split(\" \")[0];\n    const oranges = fruits[1].split(\"\
    \ \")[0];\n    return n - (apples * 1 + oranges * 1);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821079
- exit_code: 1
  program: "//In this task, you will be given a string that represents a number of\
    \ apples and oranges \n// that are distributed in a basket of fruit this basket\
    \ contains \n// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n// in the basket return the number of the mango\
    \ fruits in the basket.\n// for examble:\n// >>> fruit_distribution(\"5 apples\
    \ and 6 oranges\", 19)\n// 8\n// >>> fruit_distribution(\"0 apples and 1 oranges\"\
    , 3)\n// 2\n// >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n// 95\n\
    // >>> fruit_distribution(\"100 apples and 1 oranges\", 120)\n// 19\nfunction\
    \ fruit_distribution(s, n){\n\tvar arr = s.split(\" \");\n\tvar numApples = arr[0];\n\
    \tvar numOranges = arr[4];\n\tvar numMangos = n - (parseInt(numApples) + parseInt(numOranges));\n\
    \treturn numMangos;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fruit_distribution;\n  assert.deepEqual(candidate(\"\
    5 apples and 6 oranges\", 19),8);\n  assert.deepEqual(candidate(\"5 apples and\
    \ 6 oranges\", 21),10);\n  assert.deepEqual(candidate(\"0 apples and 1 oranges\"\
    , 3),2);\n  assert.deepEqual(candidate(\"1 apples and 0 oranges\", 3),2);\n  assert.deepEqual(candidate(\"\
    2 apples and 3 oranges\", 100),95);\n  assert.deepEqual(candidate(\"2 apples and\
    \ 3 oranges\", 5),0);\n  assert.deepEqual(candidate(\"1 apples and 100 oranges\"\
    , 120),19);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n8\n    at test (/tmp/tmp0mxq8qay.js:28:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0mxq8qay.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 8,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821079
