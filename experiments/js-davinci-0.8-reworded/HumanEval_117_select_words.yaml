name: HumanEval_117_select_words
language: js
prompt: "//Given a string s and a natural number n, you have been tasked to implement\
  \ \n// a function that returns an array of all words from string s that contain\
  \ exactly \n// n consonants, in order these words appear in the string s.\n// If\
  \ the string s is empty then the function should return an empty array.\n// Note:\
  \ you may assume the input string contains only letters and spaces.\n// Examples:\n\
  // >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"\
  Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple\
  \ white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"\
  ]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s,\
  \ n){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = select_words;\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 4),[\"\
  little\"]);\n  assert.deepEqual(candidate(\"Mary had a little lamb\", 3),[\"Mary\"\
  , \"lamb\"]);\n  assert.deepEqual(candidate(\"simple white space\", 2),[]);\n  assert.deepEqual(candidate(\"\
  Hello world\", 4),[\"world\"]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"\
  Uncle\"]);\n  assert.deepEqual(candidate(\"\", 4),[]);\n  assert.deepEqual(candidate(\"\
  a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]);\n}\n\ntest();"
completions: ["    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const words = s.split('\
    \ ');\n    const result = [];\n    for(const word of words){\n        let consonants\
    \ = 0;\n        for(const letter of word){\n            if(!vowels.includes(letter)){\n\
    \                consonants++;\n            }\n        }\n        if(consonants\
    \ === n){\n            result.push(word);\n        }\n    }\n    return result;\n\
    }", "  let words = s.split(' ').filter(e => e != '');\n  let selected = words.filter(e\
    \ => e.match(/[bcdfghjklmnpqrstvwxyz]/gi) != null);\n  if(n > 0){\n    return\
    \ selected.filter(e => e.match(/[bcdfghjklmnpqrstvwxyz]/gi).length == n);\n  }else{\n\
    \    return [];\n  }\n}\n", "\n}", "\tvar vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n\
    \tvar sArr = s.split(' ');\n\tvar result = [];\n\tfor(var i = 0; i < sArr.length;\
    \ i++){\n\t\tvar word = sArr[i];\n\t\tvar counter = 0;\n\t\tfor(var j = 0; j <\
    \ word.length; j++){\n\t\t\tif(vowels.indexOf(word[j].toLowerCase()) === -1){\n\
    \t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t\tif(counter === n){\n\t\t\tresult.push(word);\n\
    \t\t}\n\t}\n\treturn result;\n}", "  var str = s.split(\" \");\n  var answer =\
    \ [];\n  for(var i = 0; i < str.length; i++){\n    var j = 0;\n    var counter\
    \ = 0;\n    while(j < str[i].length){\n      if(str[i][j] == \"a\" || str[i][j]\
    \ == \"e\" || str[i][j] == \"i\" || str[i][j] == \"o\" || str[i][j] == \"u\"){\n\
    \        counter++;\n      }\n      j++;\n    }\n    if(counter == n){\n     \
    \ answer.push(str[i]);\n    }\n  }\n  return answer;\n}", "  var wordArray = s.split(\"\
    \ \");\n  var newArray = [];\n  var count = 0;\n  wordArray.forEach(function(word){\n\
    \    for(var i = 0; i < word.length; i++){\n      if(isConsonant(word[i])){\n\
    \        count++;\n      }\n    }\n    if(count === n){\n      newArray.push(word);\n\
    \    }\n    count = 0;\n  });\n  return newArray;\n}\n", "    // Your code here\n\
    \    var str = s.split(\" \");\n    var arr = [];\n    for(var i = 0; i < str.length;\
    \ i++){\n        var cons = 0;\n        for(var j = 0; j < str[i].length; j++){\n\
    \            var a = str[i].charAt(j);\n            if (a == \"a\" || a == \"\
    e\" || a == \"i\" || a == \"o\" || a == \"u\"){\n                continue;\n \
    \           }\n            else{\n                cons++;\n            }\n   \
    \     }\n        if(cons == n){\n            arr.push(str[i]);\n        }\n  \
    \  }\n    return arr;\n}\n", "\tlet selected = [];\n\tlet words = s.split(\" \"\
    );\n\t\n\tfor(let i = 0; i < words.length; i++){\n\t\tlet consonants = words[i].replace(/[aeiou]/gi,\
    \ \"\");\n\t\tif(consonants.length === n){\n\t\t\tselected.push(words[i]);\n\t\
    \t}\n\t}\n\treturn selected;\n}\n", "\tvar words = s.split(\" \");\n\tvar result\
    \ = [];\n\tfor(var i = 0; i < words.length; i++){\n\t\tvar consonants = 0;\n\t\
    \tfor(var j = 0; j < words[i].length; j++){\n\t\t\tif(words[i][j] != \"a\" &&\
    \ words[i][j] != \"e\" && words[i][j] != \"i\" && \n\t\t\t\twords[i][j] != \"\
    o\" && words[i][j] != \"u\" && words[i][j] != \"y\"){\n\t\t\t\tconsonants++;\n\
    \t\t\t}\n\t\t}\n\t\tif(consonants == n){\n\t\t\tresult.push(words[i]);\n\t\t}\n\
    \t}\n\treturn result;\n}", "\tlet answer = [];\n\tlet arr = s.split(\" \");\n\t\
    for(let i = 0; i < arr.length; i++){\n\t\tlet temp = arr[i].split(\"\");\n\t\t\
    let counter = 0;\n\t\tfor(let j = 0; j < temp.length; j++){\n\t\t\tif(temp[j]\
    \ == \"a\" || temp[j] == \"e\" || temp[j] == \"i\" || temp[j] == \"o\" || temp[j]\
    \ == \"u\"){\n\t\t\t\tcounter++;\n\t\t\t}\n\t\t}\n\t\tif(counter == n){\n\t\t\t\
    answer.push(arr[i]);\n\t\t}\n\t}\n\treturn answer;\n}", "    let words = s.split(\"\
    \ \")\n    let output = []\n    for(let word of words){\n        let count = 0\n\
    \        for(let i = 0; i < word.length; i++){\n            if(\"aoeiuAEIOU\"\
    .indexOf(word[i]) === -1){\n                count++\n            }\n        }\n\
    \        if(count === n){\n            output.push(word)\n        }\n    }\n \
    \   return output\n}", "    const consonants = 'bcdfghjklmnpqrstvwxyz';\n    const\
    \ vowels = 'aeiou';\n    let arr = s.split(' ');\n    for(let i = 0; i < arr.length;\
    \ i++){\n        let count = 0;\n        for(let j = 0; j < arr[i].length; j++){\n\
    \            if(consonants.includes(arr[i][j])){\n                count++;\n \
    \           }\n        }\n        if(count !== n){\n            arr.splice(i,\
    \ 1);\n            i--;\n        }\n    }\n    return arr;\n}", "  let consonants\
    \ = \"qwrtypsdfghjklzxcvbnm\".split(\"\");\n  let selectedWords = [];\n  let words\
    \ = s.split(\" \");\n  for(let word of words){\n    let count = 0;\n    for(let\
    \ letter of word){\n      if(consonants.includes(letter.toLowerCase())){\n   \
    \     count++;\n      }\n    }\n    if(count === n){\n      selectedWords.push(word);\n\
    \    }\n  }\n  return selectedWords;\n}", "    let words = s.split(\" \"), result\
    \ = [];\n    for(let i = 0; i < words.length; i++){\n        let temp = words[i];\n\
    \        if(no_of_consonants(temp) == n){\n            result.push(temp);\n  \
    \      }\n    }\n    return result;\n}\n", "  return s.split(' ').filter(w =>\
    \ n == count_consonants(w));\n}\n", "  const result = [];\n  let chars = s.split('');\n\
    \  let consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n  for(let i = 0; i < chars.length;\
    \ i++){\n    if(consonants.includes(chars[i])){\n      if(chars[i] == ' '){\n\
    \        let word = chars.splice(0,i).join('');\n        chars.shift();\n    \
    \    i = 0;\n        let n_count = 0;\n        let word_copy = word.split('');\n\
    \        for(let j = 0; j < word_copy.length; j++){\n          if(consonants.includes(word_copy[j])){\n\
    \            n_count++;\n          }\n        }\n        if(n_count == n){\n \
    \         result.push(word);\n        }\n      }\n    }\n  }\n  return result;\n\
    }\n", "    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let words = s.split('\
    \ ');\n    return words.filter(word => {\n        let nConsonants = 0;\n     \
    \   word.split('').forEach(letter => {\n            if (!vowels.includes(letter)){\n\
    \                nConsonants++;\n            }\n        });\n        return nConsonants\
    \ === n;\n    });\n}\n", "\tvar str = s.split(\" \");\n\tvar arr = [];\n\tvar\
    \ result = [];\n\tstr.forEach(function(elem){\n\t\tvar cons = 0;\n\t\tfor(var\
    \ i = 0; i < elem.length; i++){\n\t\t\tif(elem[i] != \"a\" && elem[i] != \"e\"\
    \ && elem[i] != \"i\" && elem[i] != \"o\" && elem[i] != \"u\"){\n\t\t\t\tcons++;\n\
    \t\t\t}\n\t\t}\n\t\tif(cons == n){\n\t\t\tarr.push(elem);\n\t\t}\n\t});\n\treturn\
    \ arr;\n}", "  var arr = s.split(\" \");\n  var result = [];\n  for(var i = 0;\
    \ i < arr.length; i++){\n    var c = 0;\n    var word = arr[i];\n    for(var j\
    \ = 0; j < word.length; j++){\n      if(!\"aeiouAEIOU\".includes(word[j])){\n\
    \        c++;\n      }\n    }\n    if(c === n){\n      result.push(word);\n  \
    \  }\n  }\n  return result;\n}", "    return s.split(\" \").filter(word => word.replace(/[aeiou]/gi,\
    \ \"\").length === n);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
