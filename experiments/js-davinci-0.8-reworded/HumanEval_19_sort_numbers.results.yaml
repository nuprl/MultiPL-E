language: js
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  //your code here\n  var numString = numbers.split(\"\
    \ \");\n  var numMap = {\n      \"zero\": 0,\n      \"one\": 1,\n      \"two\"\
    : 2,\n      \"three\": 3,\n      \"four\": 4,\n      \"five\": 5,\n      \"six\"\
    : 6,\n      \"seven\": 7,\n      \"eight\": 8,\n      \"nine\": 9\n  };\n  numString.sort(function(a,\
    \ b){\n    return numMap[a] - numMap[b];\n  });\n  numString = numString.join(\"\
    \ \");\n  return numString;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var numbersArr = numbers.split(\" \");\n\
    \    var numbersSorted = [];\n    for (i=0; i<numbersArr.length; i++){\n     \
    \   if (numbersArr[i] == \"zero\"){\n            numbersSorted.push(0);\n    \
    \    }\n        else if (numbersArr[i] == \"one\"){\n            numbersSorted.push(1);\n\
    \        }\n        else if (numbersArr[i] == \"two\"){\n            numbersSorted.push(2);\n\
    \        }\n        else if (numbersArr[i] == \"three\"){\n            numbersSorted.push(3);\n\
    \        }\n        else if (numbersArr[i] == \"four\"){\n            numbersSorted.push(4);\n\
    \        }\n        else if (numbersArr[i] == \"five\"){\n            numbersSorted.push(5);\n\
    \        }\n        else if (numbersArr[i] == \"six\"){\n            numbersSorted.push(6);\n\
    \        }\n        else if (numbersArr[i] == \"seven\"){\n            numbersSorted.push(7);\n\
    \        }\n        else if (numbersArr[i] == \"eight\"){\n            numbersSorted.push(8);\n\
    \        }\n        else if (numbersArr[i] == \"nine\"){\n            numbersSorted.push(9);\n\
    \        }\n    }\n    numbersSorted.sort(function(a, b){return a-b});\n    console.log(numbersSorted);\n\
    \    for (i=0; i<numbersSorted.length; i++){\n        if (numbersSorted[i] ==\
    \ 0){\n            numbersSorted[i] = \"zero\";\n        }\n        else if (numbersSorted[i]\
    \ == 1){\n            numbersSorted[i] = \"one\";\n        }\n        else if\
    \ (numbersSorted[i] == 2){\n            numbersSorted[i] = \"two\";\n        }\n\
    \        else if (numbersSorted[i] == 3){\n            numbersSorted[i] = \"three\"\
    ;\n        }\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmptpuudo4_.js:68\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var numbers_array = numbers.split(\" \");\n\
    \  var number_values = {\n    'zero':0,\n    'one':1,\n    'two':2,\n    'three':3,\n\
    \    'four':4,\n    'five':5,\n    'six':6,\n    'seven':7,\n    'eight':8,\n\
    \    'nine':9\n  };\n  numbers_array.sort(function(a,b){\n    return number_values[a]\
    \ - number_values[b];\n  });\n  return numbers_array.join(\" \");\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar a = numbers.split(\" \");\n\tvar b = {zero:\
    \ 0, one: 1, two: 2, three: 3, four: 4, five: 5, six: 6, seven: 7, eight: 8, nine:\
    \ 9};\n\tvar c = a.map(function(val){\n\t\treturn b[val];\n\t});\n\tvar d = c.sort(function(a,\
    \ b){\n\t\treturn a - b;\n\t});\n\tvar e = d.map(function(val){\n\t\tfor(var i\
    \ in b){\n\t\t\tif(b[i] === val){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t});\n\t\
    return e.join(\" \");\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar lst = numbers.split(\" \")\n\tvar nums\
    \ = {\"zero\":0, \"one\":1, \"two\":2, \"three\":3, \"four\":4, \"five\":5, \"\
    six\":6, \"seven\":7, \"eight\":8, \"nine\":9}\n\tvar out = \"\"\n\tlst.sort(function(a,b){\n\
    \t\treturn nums[a] - nums[b]\n\t})\n\tout = lst.join(\" \")\n\treturn out\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    if(numbers == ''){\n        return '';\n\
    \    }\n\n    var number_list = numbers.split(' ');\n    var word_to_digit = {\n\
    \        'zero':0,\n        'one':1,\n        'two':2,\n        'three':3,\n \
    \       'four':4,\n        'five':5,\n        'six':6,\n        'seven':7,\n \
    \       'eight':8,\n        'nine':9\n    };\n\n    number_list.sort(function(a,b){\n\
    \        return word_to_digit[a] - word_to_digit[b];\n    });\n\n    for(var i\
    \ = 0; i < number_list.length; i++){\n        var j = 0;\n        for(var number\
    \ in word_to_digit){\n            if(word_to_digit[number] == number_list[i]){\n\
    \                number_list[i] = number;\n                break;\n          \
    \  }\n        }\n    }\n\n    return number_list.join(' ');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  numbers = numbers.split(\" \");\n  numbers.sort(function(a,b){return\
    \ numeralToNumber(a) - numeralToNumber(b)});\n  return numbers.join(\" \");\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5b0wk6v2.js:8\n  numbers.sort(function(a,b){return numeralToNumber(a)\
    \ - numeralToNumber(b)});\n                             ^\n\nReferenceError: numeralToNumber\
    \ is not defined\n    at /tmp/tmp5b0wk6v2.js:8:30\n    at Array.sort (<anonymous>)\n\
    \    at sort_numbers (/tmp/tmp5b0wk6v2.js:8:11)\n    at test (/tmp/tmp5b0wk6v2.js:19:20)\n\
    \    at Object.<anonymous> (/tmp/tmp5b0wk6v2.js:24:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var number_map = {\n        'zero': 0,\n\
    \        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n\
    \        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    var numbers_to_sort = numbers.split(' ');\n\
    \    numbers_to_sort.sort(function(a, b){\n        return number_map[a] - number_map[b];\n\
    \    });\n    return numbers_to_sort.join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var sorted_numbers = \"\";\n  var array_numbers\
    \ = numbers.split(\" \");\n  for (var i = 0; i < array_numbers.length; i++) {\n\
    \    if (array_numbers[i] === \"zero\") {\n      array_numbers[i] = 0;\n    }\
    \ else if (array_numbers[i] === \"one\") {\n      array_numbers[i] = 1;\n    }\
    \ else if (array_numbers[i] === \"two\") {\n      array_numbers[i] = 2;\n    }\
    \ else if (array_numbers[i] === \"three\") {\n      array_numbers[i] = 3;\n  \
    \  } else if (array_numbers[i] === \"four\") {\n      array_numbers[i] = 4;\n\
    \    } else if (array_numbers[i] === \"five\") {\n      array_numbers[i] = 5;\n\
    \    } else if (array_numbers[i] === \"six\") {\n      array_numbers[i] = 6;\n\
    \    } else if (array_numbers[i] === \"seven\") {\n      array_numbers[i] = 7;\n\
    \    } else if (array_numbers[i] === \"eight\") {\n      array_numbers[i] = 8;\n\
    \    } else if (array_numbers[i] === \"nine\") {\n      array_numbers[i] = 9;\n\
    \    }\n  }\n  array_numbers.sort(function(a, b){return a-b});\n  for (var i =\
    \ 0; i < array_numbers.length; i++) {\n    if (array_numbers[i] === 0) {\n   \
    \   array_numbers[i] = \"zero\";\n    } else if (array_numbers[i] === 1) {\n \
    \     array_numbers[i] = \"one\";\n    } else if (array_numbers[i] === 2) {\n\
    \      array_numbers[i] = \"two\";\n    } else if (array_numbers[i] === 3) {\n\
    \      array_numbers[i] = \"three\";\n    } else\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpkmnulswc.js:43\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at wrapSafe (internal/modules/cjs/loader.js:979:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1027:27)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    //create hash table of numberals\n    var\
    \ numeral_hash = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\"\
    : 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n    \
    \    \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\"\
    : 9\n    };\n    //split string into array of numberals\n    var numeral_array\
    \ = numbers.split(\" \");\n    //sort array numerically\n    numeral_array.sort(function(a,\
    \ b){\n        return numeral_hash[a] - numeral_hash[b];\n    });\n    //join\
    \ array into space-delimited string\n    return numeral_array.join(\" \");\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  let numeral_map = new Map([['zero',0],['one',1],['two',2],['three',3],['four',4],['five',5],['six',6],['seven',7],['eight',8],['nine',9]]);\n\
    \  let parsed_numbers = numbers.split(' ').map(x => numeral_map.get(x));\n  let\
    \ sorted_numbers = parsed_numbers.sort((a,b) => a-b);\n  let sorted_numeral_list\
    \ = sorted_numbers.map(x => Array.from(numeral_map.keys())[Array.from(numeral_map.values()).indexOf(x)]);\n\
    \  return sorted_numeral_list.join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  numbers_arr = numbers.split(\" \");\n  numbers_arr.sort();\n\
    \  return numbers_arr.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'five nine three'\n\nshould equal\n\n'three\
    \ five nine'\n    at test (/tmp/tmp7p850hyj.js:19:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp7p850hyj.js:24:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'five nine\
    \ three',\n  expected: 'three five nine',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tlet validInput = true;\n\tnumbers = numbers.split(\"\
    \ \");\n\tconst dict = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\t\t'two': 2,\n\t\t'three':\
    \ 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\t\t'seven': 7,\n\t\t'eight':\
    \ 8,\n\t\t'nine': 9\n\t};\n\tfor (let i = 0; i < numbers.length; i++){\n\t\tif\
    \ (!(numbers[i] in dict)){\n\t\t\tvalidInput = false;\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\tif (validInput){\n\t\tnumbers = numbers.map( (num) => dict[num] );\n\t\t\
    numbers.sort( (a, b) => a - b );\n\t\tnumbers = numbers.map( (num) => Object.keys(dict).find(key\
    \ => dict[key] === num) );\n\t\treturn numbers.join(\" \");\n\t}\n\telse{\n\t\t\
    return false;\n\t}\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar sorted = [];\n\tvar unSorted = numbers.split(\"\
    \ \");\n\tvar numbersMap = new Map();\n\tnumbersMap.set(\"zero\", 0);\n\tnumbersMap.set(\"\
    one\", 1);\n\tnumbersMap.set(\"two\", 2);\n\tnumbersMap.set(\"three\", 3);\n\t\
    numbersMap.set(\"four\", 4);\n\tnumbersMap.set(\"five\", 5);\n\tnumbersMap.set(\"\
    six\", 6);\n\tnumbersMap.set(\"seven\", 7);\n\tnumbersMap.set(\"eight\", 8);\n\
    \tnumbersMap.set(\"nine\", 9);\n\tfor(i=0; i<unSorted.length; i++){\n\t\tsorted.push(numbersMap.get(unSorted[i]));\n\
    \t}\n\tsorted.sort(function(a, b){return a-b});\n\tfor(i=0; i<sorted.length; i++){\n\
    \t\tsorted[i] = Array.from(numbersMap.keys())[Array.from(numbersMap.values()).indexOf(sorted[i])];\n\
    \t}\n\treturn sorted.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    //parse the string\n    var numArray = numbers.split(\"\
    \ \");\n    var numbersObject = {\n        \"zero\":0,\n        \"one\":1,\n \
    \       \"two\":2,\n        \"three\":3,\n        \"four\":4,\n        \"five\"\
    :5,\n        \"six\":6,\n        \"seven\":7,\n        \"eight\":8,\n        \"\
    nine\":9\n    };\n    //find the numberals\n    var numSort = numArray.map(function(numeral){\n\
    \        return numbersObject[numeral];\n    });\n    //sort the numberals\n \
    \   numSort.sort(function(a,b){\n        return a-b;\n    });\n    //change back\
    \ to text\n    var numWord = numSort.map(function(number){\n        for(var key\
    \ in numbersObject){\n            if(numbersObject[key] === number){\n       \
    \         return key;\n            }\n        }\n    });\n    //convert back to\
    \ string\n    var numString = numWord.join(\" \");\n    return numString;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    let numbers_array = numbers.split(\" \");\n\
    \    numbers_array.sort(function(x, y){\n        return numberals[x] - numberals[y];\n\
    \    });\n    return numbers_array.join(\" \");\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqhaxfa8k.js:9\n        return numberals[x] - numberals[y];\n  \
    \      ^\n\nReferenceError: numberals is not defined\n    at /tmp/tmpqhaxfa8k.js:9:9\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmpqhaxfa8k.js:8:19)\n\
    \    at test (/tmp/tmpqhaxfa8k.js:20:20)\n    at Object.<anonymous> (/tmp/tmpqhaxfa8k.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n"
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    let numbers_array = numbers.split(\" \")\n\
    \    let num_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\"\
    : 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n    \
    \    \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\"\
    : 9\n    }\n    let numbers_array_num = numbers_array.map(function(num){\n   \
    \     return num_map[num]\n    })\n    numbers_array_num.sort(function(a, b){\n\
    \        return a - b\n    })\n    let numbers_array_num_word = numbers_array_num.map(function(num){\n\
    \        for (let word in num_map){\n            if (num_map[word] === num){\n\
    \                return word\n            }\n        }\n    })\n    let sorted_string\
    \ = numbers_array_num_word.join(\" \")\n    return sorted_string\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var num_map = {\"zero\":0, \"one\":1, \"\
    two\":2, \"three\":3, \"four\":4, \"five\":5, \"six\":6, \"seven\":7, \"eight\"\
    :8, \"nine\":9};\n    var num_list = numbers.split(\" \");\n    num_list.sort(function(a,b){return\
    \ num_map[a] - num_map[b]});\n    return num_list.join(\" \");\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tnumbers = numbers.split(\" \");\n\tif(numbers.length\
    \ == 0){\n\t\treturn \"\";\n\t}\n\telse{\n\t\t//not necessary\n\t\tif(numbers.length\
    \ == 1){\n\t\t\treturn numbers[0];\n\t\t}\n\t\t//separate numbers and words\n\t\
    \tvar sort_num = [], sort_word = [];\n\t\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\t\tif(Number(numbers[i])){\n\t\t\t\tsort_num.push(Number(numbers[i]));\n\t\t\
    \t}\n\t\t\telse{\n\t\t\t\tsort_word.push(numbers[i]);\n\t\t\t}\n\t\t}\n\t\tif(sort_num.length\
    \ == 0){\n\t\t\treturn sort_word.join(\" \");\n\t\t}\n\t\tif(sort_word.length\
    \ == 0){\n\t\t\treturn sort_num.join(\" \");\n\t\t}\n\t\t//sort\n\t\tsort_num.sort(function(a,\
    \ b){\n\t\t\treturn a - b;\n\t\t});\n\t\t//match sort_num and sort_word\n\t\t\
    for(var i = 0; i < sort_num.length; i++){\n\t\t\tfor(var j = 0; j < sort_word.length;\
    \ j++){\n\t\t\t\tif(sort_num[i] == words_to_number(sort_word[j])){\n\t\t\t\t\t\
    sort_num[i] = sort_word[j];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\
    return sort_num.join(\" \");\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n'five zero four seven nine eight'\n\nshould\
    \ equal\n\n'zero four five seven eight nine'\n    at test (/tmp/tmpr_foyvym.js:57:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr_foyvym.js:61:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: 'five zero four seven nine eight',\n  expected:\
    \ 'zero four five seven eight nine',\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  let num_map = {zero: 0, one: 1, two: 2, three:\
    \ 3, four: 4, five: 5, six: 6, seven: 7, eight: 8, nine: 9}\n  let num_list =\
    \ numbers.split(\" \");\n  let num_array = num_list.map(num => num_map[num]);\n\
    \  return num_array.sort().map(num => num_map[num]);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ undefined ]\n\nshould equal\n\n''\n  \
    \  at test (/tmp/tmpj9gp5kef.js:18:10)\n    at Object.<anonymous> (/tmp/tmpj9gp5kef.js:25:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ undefined ],\n  expected: '',\n  operator:\
    \ 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar num = {\n\t\t'zero': 0,\n\t\t'one': 1,\n\
    \t\t'two': 2,\n\t\t'three': 3,\n\t\t'four': 4,\n\t\t'five': 5,\n\t\t'six': 6,\n\
    \t\t'seven': 7,\n\t\t'eight': 8,\n\t\t'nine': 9\n\t};\n\tvar num_array = numbers.split('\
    \ ');\n\tfor (var i = 0; i < num_array.length; i++) {\n\t\tnum_array[i] = num[num_array[i]];\n\
    \t}\n\tnum_array.sort(function(a, b){\n\t\treturn a - b;\n\t});\n\tfor (var i\
    \ = 0; i < num_array.length; i++) {\n\t\tnum_array[i] = Object.keys(num)[num_array[i]];\n\
    \t}\n\treturn num_array.join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    let digits = {'zero': 0, 'one': 1, 'two':\
    \ 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine':\
    \ 9};\n    let output = [];\n    numbers = numbers.split(' ');\n    for (let i\
    \ = 0; i < numbers.length; i++){\n        output.push(digits[numbers[i]]);\n \
    \   }\n    output.sort(function(a, b){return a-b});\n    for (let i = 0; i < output.length;\
    \ i++){\n        output[i] = numbers[output[i]];\n    }\n    return output.join('\
    \ ');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'three'\n    at test (/tmp/tmptztk368e.js:26:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptztk368e.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var numbers_array = numbers.split(\" \");\n\
    \    //console.log(numbers_array);\n    var numbers_value = [];\n    for (var\
    \ i = 0; i < numbers_array.length; i++){\n        if (numbers_array[i] == \"zero\"\
    ){\n            numbers_value.push(0);\n        }\n        else if (numbers_array[i]\
    \ == \"one\"){\n            numbers_value.push(1);\n        }\n        else if\
    \ (numbers_array[i] == \"two\"){\n            numbers_value.push(2);\n       \
    \ }\n        else if (numbers_array[i] == \"three\"){\n            numbers_value.push(3);\n\
    \        }\n        else if (numbers_array[i] == \"four\"){\n            numbers_value.push(4);\n\
    \        }\n        else if (numbers_array[i] == \"five\"){\n            numbers_value.push(5);\n\
    \        }\n        else if (numbers_array[i] == \"six\"){\n            numbers_value.push(6);\n\
    \        }\n        else if (numbers_array[i] == \"seven\"){\n            numbers_value.push(7);\n\
    \        }\n        else if (numbers_array[i] == \"eight\"){\n            numbers_value.push(8);\n\
    \        }\n        else if (numbers_array[i] == \"nine\"){\n            numbers_value.push(9);\n\
    \        }\n    }\n    //console.log(numbers_value);\n    numbers_value.sort(function(a,\
    \ b){return a-b});\n    //console.log(numbers_value);\n    var ordered_numbers\
    \ = [];\n    for (var j = 0; j < numbers_value.length; j++){\n        if (numbers_value[j]\
    \ == 0){\n            ordered_numbers.push(\"zero\");\n        }\n        else\
    \ if (numbers_value[j] == 1){\n            ordered_numbers.push(\"one\");\n  \
    \      }\n        else if (numbers_value[j] == 2){\n            ordered_numbers.push(\"\
    two\");\n       \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpo35g8tw8.js:68\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    let nums = numbers.split(\" \");\n    let\
    \ result = [];\n    nums.forEach(num => {\n        switch(num){\n            case\
    \ \"zero\":\n                result.push(0);\n                break;\n       \
    \     case \"one\":\n                result.push(1);\n                break;\n\
    \            case \"two\":\n                result.push(2);\n                break;\n\
    \            case \"three\":\n                result.push(3);\n              \
    \  break;\n            case \"four\":\n                result.push(4);\n     \
    \           break;\n            case \"five\":\n                result.push(5);\n\
    \                break;\n            case \"six\":\n                result.push(6);\n\
    \                break;\n            case \"seven\":\n                result.push(7);\n\
    \                break;\n            case \"eight\":\n                result.push(8);\n\
    \                break;\n            case \"nine\":\n                result.push(9);\n\
    \                break;\n        }\n    });\n    result.sort(function(a, b){return\
    \ a-b});\n    console.log(result);\n    let translated = [];\n    result.forEach(num\
    \ => {\n        switch(num){\n            case 0:\n                translated.push(\"\
    zero\");\n                break;\n            case 1:\n                translated.push(\"\
    one\");\n                break;\n            case 2:\n                translated.push(\"\
    two\");\n                break;\n            case 3:\n                translated.push(\"\
    three\");\n                break;\n            case 4:\n                translated.push(\"\
    four\");\n                break;\n            case 5:\n                translated.push(\"\
    five\");\n                break;\n            case 6:\n                translated.push(\"\
    six\");\n                break;\n            case 7:\n                translated.push(\"\
    seven\");\n                break;\n            case 8:\n                translated.push(\"\
    eight\");\n                break;\n            case 9:\n                translated.push(\"\
    nine\");\n                break;\n        }\n    });\n    console.log(translated);\n\
    \    let res = translated.join(\" \");\n    console.log(res);\n    return res;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "[]\n[]\n\n[ 3 ]\n[ 'three' ]\nthree\n[ 3, 5, 9 ]\n[ 'three', 'five', 'nine'\
    \ ]\nthree five nine\n[ 0, 4, 5, 7, 8, 9 ]\n[ 'zero', 'four', 'five', 'seven',\
    \ 'eight', 'nine' ]\nzero four five seven eight nine\n[\n  0, 1, 2, 3,\n  4, 5,\
    \ 6\n]\n[\n  'zero', 'one',\n  'two',  'three',\n  'four', 'five',\n  'six'\n\
    ]\nzero one two three four five six\n"
  timestamp: 1659821013
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\t// if(numbers.length === 0) {\n\t// \treturn\
    \ numbers;\n\t// }\n\tvar numbersAsNumbers = numbers.split(\" \").map(function(numeral){\n\
    \t\treturn numerals[numeral];\n\t});\n\tnumbersAsNumbers.sort(function(num1, num2){\n\
    \t\treturn num1 - num2;\n\t});\n\treturn numbersAsNumbers.map(function(number){\n\
    \t\tfor(var numeral in numerals){\n\t\t\tif(numerals[numeral] === number){\n\t\
    \t\t\treturn numeral;\n\t\t\t}\n\t\t}\n\t}).join(\" \");\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpwddc39sv.js:11\n\t\treturn numerals[numeral];\n\t\t^\n\nReferenceError:\
    \ numerals is not defined\n    at /tmp/tmpwddc39sv.js:11:3\n    at Array.map (<anonymous>)\n\
    \    at sort_numbers (/tmp/tmpwddc39sv.js:10:44)\n    at test (/tmp/tmpwddc39sv.js:30:20)\n\
    \    at Object.<anonymous> (/tmp/tmpwddc39sv.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  const numbers_arr = numbers.split(' ');\n \
    \ const sorted_numbers = numbers_arr.sort((a, b) => NUMERAL_MAP[a] - NUMERAL_MAP[b]);\n\
    \  return sorted_numbers.join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpuns1cixw.js:8\n  const sorted_numbers = numbers_arr.sort((a, b)\
    \ => NUMERAL_MAP[a] - NUMERAL_MAP[b]);\n                                     \
    \                              ^\n\nReferenceError: NUMERAL_MAP is not defined\n\
    \    at /tmp/tmpuns1cixw.js:8:68\n    at Array.sort (<anonymous>)\n    at sort_numbers\
    \ (/tmp/tmpuns1cixw.js:8:38)\n    at test (/tmp/tmpuns1cixw.js:19:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpuns1cixw.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    let nums = numbers.split(\" \");\n    let\
    \ numbers_as_ints = []\n    let out_string = \"\"\n    for (let i=0; i<nums.length;\
    \ i++){\n        switch(nums[i]){\n            case \"zero\":\n              \
    \  numbers_as_ints.push(0);\n                break;\n            case \"one\"\
    :\n                numbers_as_ints.push(1);\n                break;\n        \
    \    case \"two\":\n                numbers_as_ints.push(2);\n               \
    \ break;\n            case \"three\":\n                numbers_as_ints.push(3);\n\
    \                break;\n            case \"four\":\n                numbers_as_ints.push(4);\n\
    \                break;\n            case \"five\":\n                numbers_as_ints.push(5);\n\
    \                break;\n            case \"six\":\n                numbers_as_ints.push(6);\n\
    \                break;\n            case \"seven\":\n                numbers_as_ints.push(7);\n\
    \                break;\n            case \"eight\":\n                numbers_as_ints.push(8);\n\
    \                break;\n            case \"nine\":\n                numbers_as_ints.push(9);\n\
    \                break;\n        }\n    }\n    numbers_as_ints.sort(function(a,\
    \ b){return a-b});\n    for (let i=0; i<numbers_as_ints.length; i++){\n      \
    \  switch(numbers_as_ints[i]){\n            case 0:\n                out_string\
    \ = out_string + \"zero \";\n                break;\n            case 1:\n   \
    \             out_string = out_string + \"one \";\n                break;\n  \
    \          case 2:\n                out_string = out_string + \"two \";\n    \
    \            break;\n            case 3:\n                out_string = out_string\
    \ + \"three \";\n                break;\n            case 4:\n               \
    \ out_string = out_string + \"four \";\n                break;\n            case\
    \ 5:\n                out_string = out_string + \"five \";\n                break;\n\
    \            case 6:\n                out_string = out_string + \"six \";\n  \
    \              break;\n            case 7:\n                out\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpy2rza7tp.js:82\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var a = numbers.split(\" \");\n    var b\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"];\n    var c = [];\n    for (var i = 0; i < a.length; i++){\n\
    \        for (var j = 0; j < b.length; j++){\n            if (a[i] == b[j]){\n\
    \                c.push(j);\n            }\n        }\n    }\n    c.sort(function(a,\
    \ b){return a-b});\n    for (var i = 0; i < c.length; i++){\n        c[i] = b[c[i]];\n\
    \    }\n    return c.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar nums = {zero:0, one:1, two:2, three:3,\
    \ four:4, five:5, six:6, seven:7, eight:8, nine:9}\n\tvar arr = numbers.split(\"\
    \ \");\n\tvar ans = [];\n\tfor(var i=0; i<arr.length; i++){\n\t\tans.push(nums[arr[i]]);\n\
    \t}\n\tans.sort(function(a,b){return a-b});\n\tfor(var i=0; i<ans.length; i++){\n\
    \t\tfor(var j in nums){\n\t\t\tif(nums[j]==ans[i]){\n\t\t\t\tans[i]=j;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn ans.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var nums = numbers.split(\" \");\n    var\
    \ numObj = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6,\
    \ 'seven':7, 'eight':8, 'nine':9};\n    var numArr = [];\n    var sortedArr =\
    \ [];\n    for(var i = 0; i < nums.length; i++){\n        numArr.push(numObj[nums[i]]);\n\
    \    }\n    numArr.sort(function(a,b){return a-b});\n    for(var i = 0; i < numArr.length;\
    \ i++){\n        for(var key in numObj){\n            if(numObj[key] === numArr[i]){\n\
    \                sortedArr.push(key);\n            }\n        }\n    }\n    return\
    \ sortedArr.join(\" \");\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar numeral_dict = {\n\t\t\"zero\": 0,\n\t\t\
    \"one\": 1,\n\t\t\"two\": 2,\n\t\t\"three\": 3,\n\t\t\"four\": 4,\n\t\t\"five\"\
    : 5,\n\t\t\"six\": 6,\n\t\t\"seven\": 7,\n\t\t\"eight\": 8,\n\t\t\"nine\": 9\n\
    \t};\n\tvar numbers_arr = numbers.split(\" \");\n\tvar output = [];\n\tfor (var\
    \ i = 0; i < numbers_arr.length; i++){\n\t\tvar curr_num = numeral_dict[numbers_arr[i]];\n\
    \t\tif (output.length > 0){\n\t\t\tfor (var j = 0; j < output.length; j++){\n\t\
    \t\t\tif (curr_num < output[j]){\n\t\t\t\t\toutput.splice(j, 0, curr_num);\n\t\
    \t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (j == output.length - 1){\n\t\t\t\t\toutput.push(curr_num);\n\
    \t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\toutput.push(curr_num);\n\
    \t\t}\n\t}\n\tvar numbers_arr = output.map(function(num){\n\t\tfor (var k in numeral_dict){\n\
    \t\t\tif (numeral_dict[k] == num){\n\t\t\t\treturn k;\n\t\t\t}\n\t\t}\n\t});\n\
    \treturn numbers_arr.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar nums = numbers.split(\" \");\n\tvar nums2\
    \ = [];\n\tvar nums3 = [];\n\tvar nums4 = [];\n\tvar nums5 = [];\n\tvar nums6\
    \ = [];\n\tvar nums7 = [];\n\tvar nums8 = [];\n\tvar nums9 = [];\n\tfor (var i\
    \ = 0; i < nums.length; i++) {\n\t\tswitch(nums[i]){\n\t\t\tcase \"zero\":\n\t\
    \t\t\tnums2.push(nums[i]);\n\t\t\t\tbreak;\n\t\t\tcase \"one\":\n\t\t\t\tnums3.push(nums[i]);\n\
    \t\t\t\tbreak;\n\t\t\tcase \"two\":\n\t\t\t\tnums4.push(nums[i]);\n\t\t\t\tbreak;\n\
    \t\t\tcase \"three\":\n\t\t\t\tnums5.push(nums[i]);\n\t\t\t\tbreak;\n\t\t\tcase\
    \ \"four\":\n\t\t\t\tnums6.push(nums[i]);\n\t\t\t\tbreak;\n\t\t\tcase \"five\"\
    :\n\t\t\t\tnums7.push(nums[i]);\n\t\t\t\tbreak;\n\t\t\tcase \"six\":\n\t\t\t\t\
    nums8.push(nums[i]);\n\t\t\t\tbreak;\n\t\t\tcase \"seven\":\n\t\t\t\tnums9.push(nums[i]);\n\
    \t\t\t\tbreak;\n\t\t\tcase \"eight\":\n\t\t\t\tnums2.push(nums[i]);\n\t\t\t\t\
    break;\n\t\t\tcase \"nine\":\n\t\t\t\tnums2.push(nums[i]);\n\t\t\t\tbreak;\n\t\
    \t}\n\t}\n\treturn nums2.join(\" \") + \" \" + nums3.join(\" \") + \" \" + nums4.join(\"\
    \ \") + \" \" + nums5.join(\" \") + \" \" + nums6.join(\" \") + \" \" + nums7.join(\"\
    \ \") + \" \" + nums8.join(\" \") + \" \" + nums\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpeguv1gjf.js:63\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  if(!numbers) return numbers;\n  var nums =\
    \ numbers.split(' ');\n  var sorted_nums = nums.sort(function(a,b){\n    return\
    \ getNumber(a) - getNumber(b);\n  });\n  return sorted_nums.join(' ');\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmph0fz4jse.js:10\n    return getNumber(a) - getNumber(b);\n    ^\n\
    \nReferenceError: getNumber is not defined\n    at /tmp/tmph0fz4jse.js:10:5\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmph0fz4jse.js:9:26)\n\
    \    at test (/tmp/tmph0fz4jse.js:21:20)\n    at Object.<anonymous> (/tmp/tmph0fz4jse.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\t\tvar numHash = {\n\t\t\t'zero': 0,\n\t\t\t\
    'one': 1,\n\t\t\t'two': 2,\n\t\t\t'three': 3,\n\t\t\t'four': 4,\n\t\t\t'five':\
    \ 5,\n\t\t\t'six': 6,\n\t\t\t'seven': 7,\n\t\t\t'eight': 8,\n\t\t\t'nine': 9\n\
    \t\t};\n\t\tvar str = numbers.split(' ');\n\t\tvar num = str.map(function(x){\n\
    \t\t\treturn numHash[x];\n\t\t});\n\t\tnum.sort(function(a,b){\n\t\t\treturn a-b;\n\
    \t\t});\n\t\tvar out = num.map(function(x){\n\t\t\tfor(key in numHash){\n\t\t\t\
    \tif(numHash[key] == x){\n\t\t\t\t\treturn key;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\
    \t\treturn out.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var map = {'zero': 0, 'one': 1, 'two': 2,\
    \ 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine':\
    \ 9};\n    var nums = numbers.split(' ');\n    nums.sort(function(a, b){\n   \
    \     return map[a] - map[b];\n    });\n    return nums.join(' ');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var array = numbers.split(\" \");\n    var\
    \ numeral = [];\n    for(var i = 0; i < array.length; i++){\n        numeral.push(toNumeral(array[i]));\n\
    \    }\n    numeral.sort(function(a, b){return a-b});\n    for(var i = 0; i <\
    \ numeral.length; i++){\n        numeral[i] = toEnglish(numeral[i]);\n    }\n\
    \    return numeral.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmk4yxhbh.js:10\n        numeral.push(toNumeral(array[i]));\n  \
    \              ^\n\nReferenceError: toNumeral is not defined\n    at sort_numbers\
    \ (/tmp/tmpmk4yxhbh.js:10:17)\n    at test (/tmp/tmpmk4yxhbh.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpmk4yxhbh.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var numeral_map = {'zero': 0, 'one': 1, 'two':\
    \ 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine':\
    \ 9};\n    var nums = numbers.split(' ');\n    var nums_numbers = [];\n    for\
    \ (var i = 0; i < nums.length; i++){\n        nums_numbers.push(numeral_map[nums[i]]);\n\
    \    }\n    var nums_sorted = nums_numbers.sort(function(a, b){\n        return\
    \ a - b;\n    });\n    for (var i = 0; i < nums_sorted.length; i++){\n       \
    \ for (key in numeral_map){\n            if (numeral_map[key] == nums_sorted[i]){\n\
    \                nums_sorted[i] = key;\n            }\n        }\n    }\n    return\
    \ nums_sorted.join(' ');\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    return sort_numbers_helper(numbers.split(\"\
    \ \"));\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpt9p_9e6z.js:7\n    return sort_numbers_helper(numbers.split(\"\
    \ \"));\n    ^\n\nReferenceError: sort_numbers_helper is not defined\n    at sort_numbers\
    \ (/tmp/tmpt9p_9e6z.js:7:5)\n    at test (/tmp/tmpt9p_9e6z.js:15:20)\n    at Object.<anonymous>\
    \ (/tmp/tmpt9p_9e6z.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    return numbers.split(' ').sort(function(a,\
    \ b){\n        return a - b;\n    }).join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'five zero four\
    \ seven nine eight'\n\nshould loosely deep-equal\n\n'zero four five seven eight\
    \ nine'\n    at test (/tmp/tmpqah33xic.js:20:10)\n    at Object.<anonymous> (/tmp/tmpqah33xic.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'five zero\
    \ four seven nine eight',\n  expected: 'zero four five seven eight nine',\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    numeral_to_num = {'zero': 0, 'one': 1, 'two':\
    \ 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine':\
    \ 9}\n    numbers = numbers.split(' ')\n    numbers = numbers.map(numeral => numeral_to_num[numeral])\n\
    \    numbers.sort()\n    numbers = numbers.map(num => Object.keys(numeral_to_num).find(key\
    \ => numeral_to_num[key] === num))\n    return numbers.join(' ')\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    if(numbers === \"\"){\n        return \"\"\
    ;\n    }\n    var numbers = numbers.split(\" \");\n    var numArr = [];\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(numbers[i] === \"zero\"){\n   \
    \         numArr.push(0);\n        }\n        if(numbers[i] === \"one\"){\n  \
    \          numArr.push(1);\n        }\n        if(numbers[i] === \"two\"){\n \
    \           numArr.push(2);\n        }\n        if(numbers[i] === \"three\"){\n\
    \            numArr.push(3);\n        }\n        if(numbers[i] === \"four\"){\n\
    \            numArr.push(4);\n        }\n        if(numbers[i] === \"five\"){\n\
    \            numArr.push(5);\n        }\n        if(numbers[i] === \"six\"){\n\
    \            numArr.push(6);\n        }\n        if(numbers[i] === \"seven\"){\n\
    \            numArr.push(7);\n        }\n        if(numbers[i] === \"eight\"){\n\
    \            numArr.push(8);\n        }\n        if(numbers[i] === \"nine\"){\n\
    \            numArr.push(9);\n        }\n    }\n    numArr.sort(function(a, b){return\
    \ a-b});\n    for(var j = 0; j < numArr.length; j++){\n        if(numArr[j] ===\
    \ 0){\n            numArr[j] = \"zero\";\n        }\n        if(numArr[j] ===\
    \ 1){\n            numArr[j] = \"one\";\n        }\n        if(numArr[j] === 2){\n\
    \            numArr[j] = \"two\";\n        }\n        if(numArr[j] === 3){\n \
    \           numArr[j] = \"three\";\n        }\n        if(numArr[j] === 4){\n\
    \            numArr[j] = \"four\";\n        }\n        if(num\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmphig7a4x9.js:62\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  if(numbers.length === 0){\n    return '';\n\
    \  } else {\n    var myArray = numbers.split(' ');\n    var sortedArray = myArray.sort(function(a,\
    \ b){\n      var myObject = {\n        'zero':0,\n        'one':1,\n        'two':2,\n\
    \        'three':3,\n        'four':4,\n        'five':5,\n        'six':6,\n\
    \        'seven':7,\n        'eight':8,\n        'nine':9\n      };\n      return\
    \ myObject[a] - myObject[b];\n    });\n    return sortedArray.join(' ');\n  }\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    const VALID_INPUTS = {\n        'zero': 0,\n\
    \        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n\
    \        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    // Your code here...\n    var order = numbers.split(\"\
    \ \");\n    var array = [];\n    for (var i=0; i<order.length; i++){\n       \
    \ array.push(VALID_INPUTS[order[i]]);\n    }\n    array.sort();\n    for (var\
    \ i=0; i<array.length; i++){\n        for (var j in VALID_INPUTS){\n         \
    \   if (VALID_INPUTS[j] == array[i]){\n                array[i] = j;\n       \
    \     }\n        }\n    }\n    return array.join(\" \");\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821013
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar numDict = {\"zero\":0, \"one\":1, \"two\"\
    :2, \"three\":3, \"four\":4, \"five\":5, \"six\":6, \"seven\":7, \"eight\":8,\
    \ \"nine\":9};\n\tvar numberArray = numbers.split(\" \");\n\tvar numberIntArray\
    \ = numberArray.map(function(num){\n\t\treturn numDict[num];\n\t});\n\treturn\
    \ numberIntArray.sort(function(a,b){\n\t\treturn a-b;\n\t}).map(function(num){\n\
    \t\tfor(var key in numDict){\n\t\t\tif(numDict[key] === num){\n\t\t\t\treturn\
    \ key;\n\t\t\t}\n\t\t}\n\t}).join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar numerals = {\n\t\t'zero':0,\n\t\t'one':1,\n\
    \t\t'two':2,\n\t\t'three':3,\n\t\t'four':4,\n\t\t'five':5,\n\t\t'six':6,\n\t\t\
    'seven':7,\n\t\t'eight':8,\n\t\t'nine':9\n\t};\n\tvar nums = [];\n\tvar nums_sorted\
    \ = [];\n\tnumbers = numbers.split(' ');\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tnums.push(numerals[numbers[i]]);\n\t}\n\tnums_sorted = nums.sort(function(a,b){return\
    \ a-b});\n\tfor(var i = 0; i < nums_sorted.length; i++){\n\t\tfor(var key in numerals){\n\
    \t\t\tif(numerals[key] === nums_sorted[i]){\n\t\t\t\tnums_sorted[i] = key;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn nums_sorted.join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var numMap = {\n        'zero': 0,\n    \
    \    'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n \
    \       'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n\
    \        'nine': 9\n    };\n    var nums = numbers.split(' ');\n    var numsSorted\
    \ = nums.sort(function(a, b){\n        return numMap[a] - numMap[b];\n    });\n\
    \    var numsStr = '';\n    numsSorted.forEach(function(num, index){\n       \
    \ if(index < numsSorted.length - 1){\n            numsStr += num + ' ';\n    \
    \    } else {\n            numsStr += num;\n        }\n    });\n    return numsStr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tlet number_list = numbers.split(\" \");\n\t\
    number_list.sort(function(a, b){\n\t\treturn number_dict[a] - number_dict[b];\n\
    \t});\n\treturn number_list.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp13c8329e.js:9\n\t\treturn number_dict[a] - number_dict[b];\n\t\t\
    ^\n\nReferenceError: number_dict is not defined\n    at /tmp/tmp13c8329e.js:9:3\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmp13c8329e.js:8:14)\n\
    \    at test (/tmp/tmp13c8329e.js:21:20)\n    at Object.<anonymous> (/tmp/tmp13c8329e.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  return numbers.split(' ').sort(function(a,\
    \ b){\n    return word_to_number(a) - word_to_number(b);\n  }).join(' ');\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp5btsict_.js:8\n    return word_to_number(a) - word_to_number(b);\n\
    \    ^\n\nReferenceError: word_to_number is not defined\n    at /tmp/tmp5btsict_.js:8:5\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmp5btsict_.js:7:29)\n\
    \    at test (/tmp/tmp5btsict_.js:18:20)\n    at Object.<anonymous> (/tmp/tmp5btsict_.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar numbersArray = numbers.split(\" \");\n\t\
    var numberDict = {};\n\tvar sortedDict = {};\n\tnumberDict[\"zero\"] = 0;\n\t\
    numberDict[\"one\"] = 1;\n\tnumberDict[\"two\"] = 2;\n\tnumberDict[\"three\"]\
    \ = 3;\n\tnumberDict[\"four\"] = 4;\n\tnumberDict[\"five\"] = 5;\n\tnumberDict[\"\
    six\"] = 6;\n\tnumberDict[\"seven\"] = 7;\n\tnumberDict[\"eight\"] = 8;\n\tnumberDict[\"\
    nine\"] = 9;\n\tvar index = 0;\n\tvar sortedIndex = 0;\n\tvar sortedNumbers =\
    \ [];\n\tfor (var i = 0; i < numbersArray.length; i++) {\n\t\tindex = numberDict[numbersArray[i]];\n\
    \t\tsortedDict[sortedIndex] = index;\n\t\tsortedIndex++;\n\t}\n\tfor (var k =\
    \ 0; k < numbersArray.length; k++) {\n\t\tsortedNumbers.push(sortedDict[k]);\n\
    \t}\n\tsortedNumbers.sort(function(a, b){return a-b});\n\tvar numStr = '';\n\t\
    for (var j = 0; j < sortedNumbers.length; j++) {\n\t\tfor (var key in numberDict)\
    \ {\n\t\t\tif (numberDict[key] === sortedNumbers[j]) {\n\t\t\t\tnumStr += key\
    \ + ' ';\n\t\t\t}\n\t\t}\n\t}\n\treturn numStr.trim();\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var num_array = numbers.split(\" \");\n \
    \   var num_dict = {\"zero\":0, \"one\":1, \"two\":2, \"three\":3, \"four\":4,\
    \ \"five\":5, \"six\":6, \"seven\":7, \"eight\":8, \"nine\":9};\n    var result\
    \ = \"\";\n    var sorted_array = num_array.sort(function(a,b){\n        return\
    \ num_dict[a] - num_dict[b];\n    });\n    for (var i = 0; i < sorted_array.length;\
    \ i++){\n        result += sorted_array[i] + \" \";\n    }\n    return result.slice(0,\
    \ -1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar arr = numbers.split(\" \"),\n\t\tswap =\
    \ true,\n\t\ttemp;\n\twhile(swap){\n\t\tswap = false;\n\t\tfor(var i = 0; i <\
    \ arr.length - 1; i++){\n\t\t\tif(convert(arr[i]) > convert(arr[i+1])){\n\t\t\t\
    \ttemp = arr[i];\n\t\t\t\tarr[i] = arr[i+1];\n\t\t\t\tarr[i+1] = temp;\n\t\t\t\
    \tswap = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn arr.join(\" \");\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpl_b6ji8l.js:13\n\t\t\tif(convert(arr[i]) > convert(arr[i+1])){\n\
    \t\t\t^\n\nReferenceError: convert is not defined\n    at sort_numbers (/tmp/tmpl_b6ji8l.js:13:4)\n\
    \    at test (/tmp/tmpl_b6ji8l.js:31:20)\n    at Object.<anonymous> (/tmp/tmpl_b6ji8l.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  const words = numbers.split(' ');\n  const\
    \ lookup = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n\
    \    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight':\
    \ 8,\n    'nine': 9\n  };\n  const numbers_arr = words.map(word => lookup[word]);\n\
    \  return numbers_arr.sort((a, b) => a - b).map(num => words[num]).join(' ');\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'three'\n    at test (/tmp/tmp9gtgjn8k.js:30:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9gtgjn8k.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  return numbers.split(' ').sort(function(a,\
    \ b){\n    var numberals = {\n      zero: 0,\n      one: 1,\n      two: 2,\n \
    \     three: 3,\n      four: 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n\
    \      eight: 8,\n      nine: 9\n    };\n    return numberals[a] - numberals[b];\n\
    \  }).join(' ');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar numeral_array = numbers.split(\" \");\n\
    \tvar numeral_to_number = {\n\t\t\"zero\":0,\n\t\t\"one\":1,\n\t\t\"two\":2,\n\
    \t\t\"three\":3,\n\t\t\"four\":4,\n\t\t\"five\":5,\n\t\t\"six\":6,\n\t\t\"seven\"\
    :7,\n\t\t\"eight\":8,\n\t\t\"nine\":9\n\t};\n\tvar number_array = [];\n\tvar sorted_number_array\
    \ = [];\n\tfor (var i = 0; i < numeral_array.length; i++) {\n\t\tnumber_array.push(numeral_to_number[numeral_array[i]]);\n\
    \t};\n\tsorted_number_array = number_array.sort(function(a,b){return a-b;});\n\
    \tconsole.log(sorted_number_array);\n\tvar number_to_numeral = {\n\t\t0:\"zero\"\
    ,\n\t\t1:\"one\",\n\t\t2:\"two\",\n\t\t3:\"three\",\n\t\t4:\"four\",\n\t\t5:\"\
    five\",\n\t\t6:\"six\",\n\t\t7:\"seven\",\n\t\t8:\"eight\",\n\t\t9:\"nine\"\n\t\
    };\n\tvar sorted_numeral_array = [];\n\tfor (var i = 0; i < sorted_number_array.length;\
    \ i++) {\n\t\tsorted_numeral_array.push(number_to_numeral[sorted_number_array[i]]);\n\
    \t};\n\treturn sorted_numeral_array.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: "[ undefined ]\n[ 3 ]\n[ 3, 5, 9 ]\n[ 0, 4, 5, 7, 8, 9 ]\n[\n  0, 1, 2,\
    \ 3,\n  4, 5, 6\n]\n"
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  // Your code here\n  var result = '';\n  var\
    \ num = 0;\n  var arr = numbers.split(' ');\n  for(i=0; i<arr.length; i++){\n\
    \    switch(arr[i]){\n      case 'zero':\n        num = 0;\n        break;\n \
    \     case 'one':\n        num = 1;\n        break;\n      case 'two':\n     \
    \   num = 2;\n        break;\n      case 'three':\n        num = 3;\n        break;\n\
    \      case 'four':\n        num = 4;\n        break;\n      case 'five':\n  \
    \      num = 5;\n        break;\n      case 'six':\n        num = 6;\n       \
    \ break;\n      case 'seven':\n        num = 7;\n        break;\n      case 'eight':\n\
    \        num = 8;\n        break;\n      case 'nine':\n        num = 9;\n    \
    \    break;\n    }\n    result += num;\n  }\n  var result2 = result.split('').sort();\n\
    \  var result3 = '';\n  for(j=0; j<result2.length; j++){\n    switch(result2[j]){\n\
    \      case '0':\n        result3 += 'zero ';\n        break;\n      case '1':\n\
    \        result3 += 'one ';\n        break;\n      case '2':\n        result3\
    \ += 'two ';\n        break;\n      case '3':\n        result3 += 'three ';\n\
    \        break;\n      case '4':\n        result3 += 'four ';\n        break;\n\
    \      case '5':\n        result3 += 'five ';\n        break;\n      case '6':\n\
    \        result3 += 'six ';\n        break;\n      case '7':\n        result3\
    \ += 'seven ';\n        break;\n      case '8':\n        result3 += 'eight ';\n\
    \        break;\n      case '9':\n        result3 += 'nine ';\n        break;\n\
    \    }\n  }\n  return result3.slice(0, -1);\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'zero'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmpfpkwwm4h.js:90:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpfpkwwm4h.js:97:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'zero',\n\
    \  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    let nums = numbers.split(\" \");\n    nums.sort((a,b)\
    \ => {\n        let aNum = convert_to_number(a);\n        let bNum = convert_to_number(b);\n\
    \        return aNum - bNum;\n    });\n    return nums.join(\" \");\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpqfdl33zu.js:9\n        let aNum = convert_to_number(a);\n     \
    \              ^\n\nReferenceError: convert_to_number is not defined\n    at /tmp/tmpqfdl33zu.js:9:20\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmpqfdl33zu.js:8:10)\n\
    \    at test (/tmp/tmpqfdl33zu.js:23:20)\n    at Object.<anonymous> (/tmp/tmpqfdl33zu.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    // base case\n    if (numbers === \"\"){\n\
    \        return numbers;\n    }\n    // create object/map to store numbers\n \
    \   let map = {zero: 0, one: 1, two: 2, three: 3, four: 4, five: 5, six: 6, seven:\
    \ 7, eight: 8, nine: 9};\n    // split string into array\n    let arr = numbers.split(\"\
    \ \");\n    // convert each string in the array to its corresponding number\n\
    \    for (let i = 0; i < arr.length; i++){\n        arr[i] = map[arr[i]];\n  \
    \  }\n    // sort the numbers\n    arr.sort((a, b) => a - b);\n    // convert\
    \ the numbers back to strings\n    for (let i = 0; i < arr.length; i++){\n   \
    \     for (let key in map){\n            if (map[key] === arr[i]){\n         \
    \       arr[i] = key;\n            }\n        }\n    }\n    // join the array\
    \ back into a string\n    return arr.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var nums = numbers.split(\" \");\n  var numsMap\
    \ = {\"zero\":0, \"one\":1, \"two\":2, \"three\":3, \"four\":4, \"five\":5, \"\
    six\":6, \"seven\":7, \"eight\":8, \"nine\":9};\n  for(var i = 0; i < nums.length;\
    \ i++){\n    nums[i] = numsMap[nums[i]];\n  }\n  nums.sort(function(a,b){return\
    \ a-b});\n  for(var i = 0; i < nums.length; i++){\n    for(var key in numsMap){\n\
    \      if(numsMap[key] == nums[i]){\n        nums[i] = key;\n      }\n    }\n\
    \  }\n  return nums.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var num = numbers.split(\" \");\n  var nums\
    \ = num.map(function(elem){\n    switch(elem){\n      case \"zero\":\n       \
    \ return 0;\n      case \"one\":\n        return 1;\n      case \"two\":\n   \
    \     return 2;\n      case \"three\":\n        return 3;\n      case \"four\"\
    :\n        return 4;\n      case \"five\":\n        return 5;\n      case \"six\"\
    :\n        return 6;\n      case \"seven\":\n        return 7;\n      case \"\
    eight\":\n        return 8;\n      case \"nine\":\n        return 9;\n    }\n\
    \  });\n  return nums.sort().join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'3'\n\nshould\
    \ loosely deep-equal\n\n'three'\n    at test (/tmp/tmpc1lmgpco.js:41:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpc1lmgpco.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '3',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    const numMap = {\n        zero: 0,\n    \
    \    one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five:\
    \ 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9\n\
    \    }\n    let nums = numbers.split(' ')\n    nums = nums.map(num => numMap[num])\n\
    \    nums.sort((a, b) => a - b)\n    nums = nums.map(num => Object.keys(numMap).find(key\
    \ => numMap[key] === num))\n    return nums.join(' ')\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  numbers = numbers.split(\" \");\n  var numeral_array\
    \ = { \"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4, \"five\"\
    : 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9};\n  var sorted_numbers\
    \ = [];\n  for (var i = 0; i < numbers.length; i++) {\n    sorted_numbers.push(numeral_array[numbers[i]]);\n\
    \  }\n  sorted_numbers.sort(function(a, b){return a-b});\n  for (var i = 0; i\
    \ < sorted_numbers.length; i++) {\n    for (var j = 0; j < numeral_array.length;\
    \ j++) {\n      if (sorted_numbers[i] === numeral_array[j]) {\n        sorted_numbers[i]\
    \ = j;\n      }\n    }\n  }\n  return sorted_numbers.join(\" \");\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'3'\n\nshould\
    \ loosely deep-equal\n\n'three'\n    at test (/tmp/tmp52fekvf_.js:29:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp52fekvf_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '3',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var numArr = numbers.split(\" \");\n    var\
    \ num = 0;\n    for(var i = 0; i < numArr.length; i++){\n        if(numArr[i]\
    \ == \"zero\"){\n            numArr[i] = num;\n        }\n        else if(numArr[i]\
    \ == \"one\"){\n            numArr[i] = 1;\n        }\n        else if(numArr[i]\
    \ == \"two\"){\n            numArr[i] = 2;\n        }\n        else if(numArr[i]\
    \ == \"three\"){\n            numArr[i] = 3;\n        }\n        else if(numArr[i]\
    \ == \"four\"){\n            numArr[i] = 4;\n        }\n        else if(numArr[i]\
    \ == \"five\"){\n            numArr[i] = 5;\n        }\n        else if(numArr[i]\
    \ == \"six\"){\n            numArr[i] = 6;\n        }\n        else if(numArr[i]\
    \ == \"seven\"){\n            numArr[i] = 7;\n        }\n        else if(numArr[i]\
    \ == \"eight\"){\n            numArr[i] = 8;\n        }\n        else if(numArr[i]\
    \ == \"nine\"){\n            numArr[i] = 9;\n        }\n    }\n    numArr.sort(function(a,\
    \ b){return a-b});\n    for(var i = 0; i < numArr.length; i++){\n        if(numArr[i]\
    \ == 0){\n            numArr[i] = \"zero\";\n        }\n        else if(numArr[i]\
    \ == 1){\n            numArr[i] = \"one\";\n        }\n        else if(numArr[i]\
    \ == 2){\n            numArr[i] = \"two\";\n        }\n        else if(numArr[i]\
    \ == 3){\n            numArr[i] = \"three\";\n        }\n        else if(numArr[i]\
    \ == 4){\n           \nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp2auiw4g9.js:69\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var obj = {\n    zero:0, one:1, two:2, three:3,\
    \ four:4, five:5, six:6, seven:7, eight:8, nine:9\n  };\n  numbers = numbers.split('\
    \ ');\n  var numberArr = numbers.map(function(x){\n    return obj[x];\n  });\n\
    \  numberArr.sort(function(a,b){\n    return a - b;\n  });\n  numberArr = numberArr.map(function(x){\n\
    \    for(var i in obj){\n      if(obj[i] === x){\n        return i;\n      }\n\
    \    }\n  });\n  return numberArr.join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var nums = numbers.split(\" \");\n  var nums_vals\
    \ = [];\n  for (var i = 0; i < nums.length; i++){\n    nums_vals.push(num_to_val(nums[i]));\n\
    \  }\n  var sorted_vals = nums_vals.sort(function(a, b){return a-b});\n  var sorted_nums\
    \ = [];\n  for (var i = 0; i < sorted_vals.length; i++){\n    sorted_nums.push(val_to_num(sorted_vals[i]));\n\
    \  }\n  return sorted_nums.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpvmn1v_hz.js:10\n    nums_vals.push(num_to_val(nums[i]));\n    \
    \          ^\n\nReferenceError: num_to_val is not defined\n    at sort_numbers\
    \ (/tmp/tmpvmn1v_hz.js:10:15)\n    at test (/tmp/tmpvmn1v_hz.js:25:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpvmn1v_hz.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var n = 'zero one two three four five six\
    \ seven eight nine ten'.split(' ');\n    var arr = numbers.split(' ');\n    var\
    \ sarr = [];\n    for(i=0;i<arr.length;i++){\n        sarr.push(n.indexOf(arr[i]));\n\
    \    }\n    return sarr.sort(function(a,b){return a-b;}).join(' ');\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'-1'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmpspwwnd05.js:20:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpspwwnd05.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '-1',\n  expected:\
    \ '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    let numObj = {\n        \"zero\": 0,\n  \
    \      \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\"\
    : 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n     \
    \   \"eight\": 8,\n        \"nine\": 9\n    }\n    return numbers.split(\" \"\
    ).sort((a,b) => numObj[a] - numObj[b]).join(\" \");\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var array_numbers = numbers.split(\" \");\n\
    \    var numbers_array = [];\n    var sorted_numbers = \"\";\n    var result =\
    \ \"\";\n    for (var i = 0; i < array_numbers.length; i++){\n        if (array_numbers[i]\
    \ == \"zero\"){\n            numbers_array.push(0);\n        } else if (array_numbers[i]\
    \ == \"one\"){\n            numbers_array.push(1);\n        } else if (array_numbers[i]\
    \ == \"two\"){\n            numbers_array.push(2);\n        } else if (array_numbers[i]\
    \ == \"three\"){\n            numbers_array.push(3);\n        } else if (array_numbers[i]\
    \ == \"four\"){\n            numbers_array.push(4);\n        } else if (array_numbers[i]\
    \ == \"five\"){\n            numbers_array.push(5);\n        } else if (array_numbers[i]\
    \ == \"six\"){\n            numbers_array.push(6);\n        } else if (array_numbers[i]\
    \ == \"seven\"){\n            numbers_array.push(7);\n        } else if (array_numbers[i]\
    \ == \"eight\"){\n            numbers_array.push(8);\n        } else if (array_numbers[i]\
    \ == \"nine\"){\n            numbers_array.push(9);\n        }\n    }\n    sorted_numbers\
    \ = numbers_array.sort(function(a, b){return a-b});\n    for (var j = 0; j < sorted_numbers.length;\
    \ j++){\n        if (sorted_numbers[j] == 0){\n            result += \"zero \"\
    ;\n        } else if (sorted_numbers[j] == 1){\n            result += \"one \"\
    ;\n        } else if (sorted_numbers[j] == 2){\n            result += \"two \"\
    ;\n        } else if (sorted_numbers[j] == 3){\n            result += \"three\
    \ \";\n        } else if (sorted_numbers[j] == 4){\n            result += \"four\
    \ \";\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpi_o9lyze.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var numbers_array = numbers.split(\" \");\n\
    \    var numbers_dictionary = {\n        \"zero\": 0,\n        \"one\": 1,\n \
    \       \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\"\
    : 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n    \
    \    \"nine\": 9\n    };\n    var number_values = numbers_array.map(function(number){\n\
    \        return numbers_dictionary[number];\n    });\n    var sorted_values =\
    \ number_values.sort(function(a, b){\n        return a - b;\n    });\n    var\
    \ sorted_array = sorted_values.map(function(value){\n        var key = null;\n\
    \        for(key in numbers_dictionary){\n            if(numbers_dictionary[key]\
    \ === value){\n                return key;\n            }\n        }\n    });\n\
    \    return sorted_array.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tlet list = numbers.split(\" \");\n\tlet map\
    \ = new Map();\n\tlet res = \"\";\n\t\n\tmap.set(\"zero\", 0);\n\tmap.set(\"one\"\
    , 1);\n\tmap.set(\"two\", 2);\n\tmap.set(\"three\", 3);\n\tmap.set(\"four\", 4);\n\
    \tmap.set(\"five\", 5);\n\tmap.set(\"six\", 6);\n\tmap.set(\"seven\", 7);\n\t\
    map.set(\"eight\", 8);\n\tmap.set(\"nine\", 9);\n\t\n\tlet mapped = list.map(x\
    \ => map.get(x));\n\tlet sorted = mapped.sort((a, b) => a - b);\n\tfor(let i =\
    \ 0; i < sorted.length; i++){\n\t\tif(i == sorted.length - 1){\n\t\t\tres += [...map.keys()][[...map.values()].indexOf(sorted[i])];\n\
    \t\t}\n\t\telse{\n\t\t\tres += [...map.keys()][[...map.values()].indexOf(sorted[i])]\
    \ + \" \";\n\t\t}\n\t}\n\treturn res;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefined'\n\n\
    should loosely deep-equal\n\n''\n    at test (/tmp/tmpysbc8emt.js:41:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpysbc8emt.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefined',\n\
    \  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    return numbers.split(' ').sort(function(a,\
    \ b){\n        return translate(a) - translate(b);\n    }).join(' ');\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpsbkjmyts.js:8\n        return translate(a) - translate(b);\n  \
    \      ^\n\nReferenceError: translate is not defined\n    at /tmp/tmpsbkjmyts.js:8:9\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmpsbkjmyts.js:7:31)\n\
    \    at test (/tmp/tmpsbkjmyts.js:19:20)\n    at Object.<anonymous> (/tmp/tmpsbkjmyts.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    let myNums = numbers.split(\" \");\n    for(let\
    \ i = 0; i < myNums.length; i++){\n        myNums[i] = convertToNum(myNums[i]);\n\
    \    }\n    myNums.sort(function(a, b){return a-b});\n    let str = \"\";\n  \
    \  for(let i = 0; i < myNums.length; i++){\n        str += myNums[i] + \" \";\n\
    \    }\n    return str;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpp_5zwwhx.js:9\n        myNums[i] = convertToNum(myNums[i]);\n \
    \              ^\n\nReferenceError: convertToNum is not defined\n    at sort_numbers\
    \ (/tmp/tmpp_5zwwhx.js:9:16)\n    at test (/tmp/tmpp_5zwwhx.js:23:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpp_5zwwhx.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  //Sort an array of strings with numbers\n \
    \ var arr = numbers.split(\" \");\n  var n = arr.length;\n  var j;\n  var tmp;\n\
    \  for(var i = 1; i < n; i++){\n    j = i;\n    while(j > 0 && arr[j-1] > arr[j]){\n\
    \      tmp = arr[j];\n      arr[j] = arr[j-1];\n      arr[j-1] = tmp;\n      j--;\n\
    \    }\n  }\n  //format the output\n  var result = \"\";\n  for(var i = 0; i <\
    \ n; i++){\n    result += arr[i] + \" \";\n  }\n  return result.trim();\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'five nine three'\n\
    \nshould loosely deep-equal\n\n'three five nine'\n    at test (/tmp/tmpt5s89gbh.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpt5s89gbh.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'five nine\
    \ three',\n  expected: 'three five nine',\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    return numbers.split(' ').sort(function(a,\
    \ b){\n      return toNum(a) - toNum(b);\n    }).join(' ');\n  }\n  function toNum(str){\n\
    \    return {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5,\
    \ 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}[str];\n  }\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var numeralMap = {\n        'zero': 0,\n\
    \        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n\
    \        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    return numbers.split(' ').sort(function(a,\
    \ b){\n        return numeralMap[a] - numeralMap[b];\n    }).join(' ');\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tnumbers = numbers.split(\" \");\n\tvar numeral_value\
    \ = {\n\t\t'zero':0,\n\t\t'one':1,\n\t\t'two':2,\n\t\t'three':3,\n\t\t'four':4,\n\
    \t\t'five':5,\n\t\t'six':6,\n\t\t'seven':7,\n\t\t'eight':8,\n\t\t'nine':9\n\t\
    };\n\tnumbers.sort(function(a,b){\n\t\treturn numeral_value[a] - numeral_value[b];\n\
    \t});\n\treturn numbers.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    // your code here\n    var num = [];\n  \
    \  var str = \"\";\n    var reg = new RegExp(\"zero|one|two|three|four|five|six|seven|eight|nine\"\
    , \"g\");\n    var math = numbers.match(reg);\n    for(var i = 0; i < math.length;\
    \ i++){\n        switch(math[i]){\n            case \"zero\":\n              \
    \  num.push(0);\n                break;\n            case \"one\":\n         \
    \       num.push(1);\n                break;\n            case \"two\":\n    \
    \            num.push(2);\n                break;\n            case \"three\"\
    :\n                num.push(3);\n                break;\n            case \"four\"\
    :\n                num.push(4);\n                break;\n            case \"five\"\
    :\n                num.push(5);\n                break;\n            case \"six\"\
    :\n                num.push(6);\n                break;\n            case \"seven\"\
    :\n                num.push(7);\n                break;\n            case \"eight\"\
    :\n                num.push(8);\n                break;\n            case \"nine\"\
    :\n                num.push(9);\n                break;\n        }\n    }\n  \
    \  num.sort(function(a, b){\n        return a - b;\n    });\n    console.log(num);\n\
    \    for(var i = 0; i < num.length; i++){\n        switch(num[i]){\n         \
    \   case 0:\n                str += \"zero \";\n                break;\n     \
    \       case 1:\n                str += \"one \";\n                break;\n  \
    \          case 2:\n                str += \"two \";\n                break;\n\
    \            case 3:\n                str += \"three \";\n                break;\n\
    \            case 4:\n                str += \"four \";\n                break;\n\
    \            case 5:\n                str += \"five \";\n                break;\n\
    \            case 6:\n                str += \"six \";\n                break;\n\
    \            case 7:\n                str += \"seven \";\n                break;\n\
    \            case 8:\n                str += \"eight \";\n                break;\n\
    \            case 9:\n                str += \"nine \";\n                break;\n\
    \        }\n    }\n    return str\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmprmukwkcw.js:97\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var numbers_string = numbers.split(\" \"\
    );\n    var number_array = [];\n    for (var i = 0; i < numbers_string.length;\
    \ i++){\n        var number = numbers_string[i];\n        switch (number){\n \
    \           case \"zero\":\n                number_array.push(0);\n          \
    \      break;\n            case \"one\":\n                number_array.push(1);\n\
    \                break;\n            case \"two\":\n                number_array.push(2);\n\
    \                break;\n            case \"three\":\n                number_array.push(3);\n\
    \                break;\n            case \"four\":\n                number_array.push(4);\n\
    \                break;\n            case \"five\":\n                number_array.push(5);\n\
    \                break;\n            case \"six\":\n                number_array.push(6);\n\
    \                break;\n            case \"seven\":\n                number_array.push(7);\n\
    \                break;\n            case \"eight\":\n                number_array.push(8);\n\
    \                break;\n            case \"nine\":\n                number_array.push(9);\n\
    \                break;\n        }\n    }\n    var sorted_array = number_array.sort(function(a,\
    \ b){return a-b});\n    var string_array = [];\n    for (var j = 0; j < sorted_array.length;\
    \ j++){\n        var sorted_number = sorted_array[j];\n        switch (sorted_number){\n\
    \            case 0:\n                string_array.push(\"zero\");\n         \
    \       break;\n            case 1:\n                string_array.push(\"one\"\
    );\n                break;\n            case 2:\n                string_array.push(\"\
    two\");\n                break;\n            case 3:\n                string_array.push(\"\
    three\");\n                break;\n            case 4:\n                string_array.push(\"\
    four\");\n                break;\n            case 5:\n                string_array.push(\"\
    five\");\n                break;\n            case 6:\n                string_array.push(\"\
    six\");\n                break;\n            case 7:\n                string_array.push(\"\
    seven\");\n                break;\n            case 8:\n                string_array.push(\"\
    eight\");\n                break;\n            case\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpd0nglv2v.js:77\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var numberals = {\n    \"zero\": 0,\n    \"\
    one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\"\
    : 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n\
    \  };\n  var output = [];\n  var nums = numbers.split(\" \");\n  for (var i =\
    \ 0; i < nums.length; i++) {\n    output.push(numberals[nums[i]]);\n  }\n  output.sort(function(a,\
    \ b){return a-b});\n  for (var i = 0; i < output.length; i++) {\n    for (var\
    \ word in numberals) {\n      if (numberals[word] === output[i]) {\n        output[i]\
    \ = word;\n      }\n    }\n  }\n  return output.join(\" \");\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    let numArray = numbers.split(\" \");\n  \
    \  let numberArray = [];\n    for(let i = 0; i < numArray.length; i++){\n    \
    \    if(numArray[i] === \"zero\"){\n            numberArray.push(0);\n       \
    \ }\n        else if(numArray[i] === \"one\"){\n            numberArray.push(1);\n\
    \        }\n        else if(numArray[i] === \"two\"){\n            numberArray.push(2);\n\
    \        }\n        else if(numArray[i] === \"three\"){\n            numberArray.push(3);\n\
    \        }\n        else if(numArray[i] === \"four\"){\n            numberArray.push(4);\n\
    \        }\n        else if(numArray[i] === \"five\"){\n            numberArray.push(5);\n\
    \        }\n        else if(numArray[i] === \"six\"){\n            numberArray.push(6);\n\
    \        }\n        else if(numArray[i] === \"seven\"){\n            numberArray.push(7);\n\
    \        }\n        else if(numArray[i] === \"eight\"){\n            numberArray.push(8);\n\
    \        }\n        else if(numArray[i] === \"nine\"){\n            numberArray.push(9);\n\
    \        }\n    }\n    let sorted = numberArray.sort(function(a, b){return a-b});\n\
    \    let sortedStr = \"\";\n    for(let i = 0; i < sorted.length; i++){\n    \
    \    if(sorted[i] === 0){\n            sortedStr = sortedStr + \"zero \";\n  \
    \      }\n        else if(sorted[i] === 1){\n            sortedStr = sortedStr\
    \ + \"one \";\n        }\n        else if(sorted[i] === 2){\n            sortedStr\
    \ = sortedStr + \"two \";\n        }\n        else if(sorted[i] === 3){\n    \
    \        sortedStr = sortedStr + \"three \";\n        }\n        else if(sorted[i]\
    \ === 4){\n            sortedStr = sortedStr + \"four \";\n        }\n       \
    \ else if(sorted[i] === 5){\n            sorted\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpga2gqthb.js:73\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var numeralMapping = {\n        'zero': 0,\n\
    \        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n\
    \        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    var nums = numbers.split(' ');\n    var numsAsNumbers\
    \ = nums.map(function(num){\n        return numeralMapping[num];\n    });\n  \
    \  var numsSorted = numsAsNumbers.sort(function(a, b){\n        return a - b;\n\
    \    });\n    var numsSortedAsStrings = numsSorted.map(function(num){\n      \
    \  var numAsString = numeralMapping[num];\n        return numAsString;\n    });\n\
    \    return numsSortedAsStrings.join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'three'\n    at test (/tmp/tmp768lnnqy.js:39:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp768lnnqy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var split = numbers.split(\" \");\n  var nums\
    \ = {\n      zero: 0,\n      one: 1,\n      two: 2,\n      three: 3,\n      four:\
    \ 4,\n      five: 5,\n      six: 6,\n      seven: 7,\n      eight: 8,\n      nine:\
    \ 9\n  };\n  var sorted = split.sort(function(a, b){\n    return nums[a] - nums[b];\n\
    \  });\n  return sorted.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var number_map = {zero:0, one:1, two:2, three:3,\
    \ four:4, five:5, six:6, seven:7, eight:8, nine:9};\n    var number_array = numbers.split(\"\
    \ \");\n    var number_values = [];\n    var index;\n    for (index in number_array){\n\
    \        number_values.push(number_map[number_array[index]]);\n    }\n    number_values.sort(function(a,b){return\
    \ a-b});\n    var output = \"\";\n    for (index in number_values){\n        output\
    \ += number_map[number_values[index]] + \" \";\n    }\n    return output.trim();\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefined'\n\n\
    should loosely deep-equal\n\n''\n    at test (/tmp/tmp5qp5cvgs.js:26:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp5qp5cvgs.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefined',\n\
    \  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\t// Split the string\n\tvar number_array = numbers.split(\"\
    \ \");\n\t// Loop through the array and replace the number with an integer\n\t\
    for (var i = 0; i < number_array.length; i++) {\n\t\tif (number_array[i] == \"\
    zero\") {\n\t\t\tnumber_array[i] = 0;\n\t\t}\n\t\telse if (number_array[i] ==\
    \ \"one\") {\n\t\t\tnumber_array[i] = 1;\n\t\t}\n\t\telse if (number_array[i]\
    \ == \"two\") {\n\t\t\tnumber_array[i] = 2;\n\t\t}\n\t\telse if (number_array[i]\
    \ == \"three\") {\n\t\t\tnumber_array[i] = 3;\n\t\t}\n\t\telse if (number_array[i]\
    \ == \"four\") {\n\t\t\tnumber_array[i] = 4;\n\t\t}\n\t\telse if (number_array[i]\
    \ == \"five\") {\n\t\t\tnumber_array[i] = 5;\n\t\t}\n\t\telse if (number_array[i]\
    \ == \"six\") {\n\t\t\tnumber_array[i] = 6;\n\t\t}\n\t\telse if (number_array[i]\
    \ == \"seven\") {\n\t\t\tnumber_array[i] = 7;\n\t\t}\n\t\telse if (number_array[i]\
    \ == \"eight\") {\n\t\t\tnumber_array[i] = 8;\n\t\t}\n\t\telse if (number_array[i]\
    \ == \"nine\") {\n\t\t\tnumber_array[i] = 9;\n\t\t}\n\t}\n\t// Sort the number\n\
    \tnumber_array.sort(function(a, b){return a-b});\n\t// Loop through the array\
    \ and replace the integer with a number\n\tfor (var i = 0; i < number_array.length;\
    \ i++) {\n\t\tif (number_array[i] == 0) {\n\t\t\tnumber_array[i] = \"zero\";\n\
    \t\t}\n\t\telse if (number_array[i] == 1) {\n\t\t\tnumber_array[i\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1a0b3uac.js:51\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar numArr = numbers.split(\" \");\n\tvar nums\
    \ = {\n\t\tzero:0,\n\t\tone:1,\n\t\ttwo:2,\n\t\tthree:3,\n\t\tfour:4,\n\t\tfive:5,\n\
    \t\tsix:6,\n\t\tseven:7,\n\t\teight:8,\n\t\tnine:9\n\t};\n\tvar newNums = [];\n\
    \tnumArr.forEach(function(n){\n\t\tnewNums.push(nums[n]);\n\t});\n\tnewNums.sort(function(a,b){\n\
    \t\treturn a-b;\n\t});\n\tfor(var key in nums){\n\t\tif(nums[key]===newNums[0]){\n\
    \t\t\tnewNums[0]=key;\n\t\t}\n\t\tif(nums[key]===newNums[1]){\n\t\t\tnewNums[1]=key;\n\
    \t\t}\n\t\tif(nums[key]===newNums[2]){\n\t\t\tnewNums[2]=key;\n\t\t}\n\t}\n\t\
    return newNums.join(\" \");\n}\n\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'zero four five\
    \ 7 8 9'\n\nshould loosely deep-equal\n\n'zero four five seven eight nine'\n \
    \   at test (/tmp/tmphbrmxqge.js:50:10)\n    at Object.<anonymous> (/tmp/tmphbrmxqge.js:54:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'zero four\
    \ five 7 8 9',\n  expected: 'zero four five seven eight nine',\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var numbers = numbers.split(\" \");\n  var\
    \ solution = numbers.sort(function(a, b){return  getNumber(a) - getNumber(b)});\n\
    \  console.log(solution);\n  return solution.join(\" \");\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpiqcehl48.js:8\n  var solution = numbers.sort(function(a, b){return\
    \  getNumber(a) - getNumber(b)});\n                                          \
    \   ^\n\nReferenceError: getNumber is not defined\n    at /tmp/tmpiqcehl48.js:8:46\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmpiqcehl48.js:8:26)\n\
    \    at test (/tmp/tmpiqcehl48.js:20:20)\n    at Object.<anonymous> (/tmp/tmpiqcehl48.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: '[ '''' ]

    [ ''three'' ]

    '
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tnumbers = numbers.split(\" \");\n\tvar digit_arr\
    \ = [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"\
    , \"eight\", \"nine\"];\n\tvar num_arr = [];\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tvar digit = digit_arr.indexOf(numbers[i]);\n\t\tnum_arr.push(digit);\n\
    \t}\n\tnum_arr.sort(function(a, b){return a-b});\n\tvar ordered_numbers = [];\n\
    \tfor(var j = 0; j < num_arr.length; j++){\n\t\tvar ordered_digit = digit_arr[num_arr[j]];\n\
    \t\tordered_numbers.push(ordered_digit);\n\t}\n\treturn ordered_numbers.join(\"\
    \ \");\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n \
    \ assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  return numbers.split(' ').sort((a, b) => digit_to_int(a)\
    \ - digit_to_int(b)).join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphuz0i42v.js:7\n  return numbers.split(' ').sort((a, b) => digit_to_int(a)\
    \ - digit_to_int(b)).join(' ');\n                                            \
    \               ^\n\nReferenceError: digit_to_int is not defined\n    at /tmp/tmphuz0i42v.js:7:60\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmphuz0i42v.js:7:29)\n\
    \    at test (/tmp/tmphuz0i42v.js:17:20)\n    at Object.<anonymous> (/tmp/tmphuz0i42v.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var num_array = numbers.split(\" \");\n  var\
    \ nums = [];\n  for (var i = 0; i < num_array.length; i++) {\n    switch (num_array[i])\
    \ {\n      case \"zero\":\n        nums.push(0);\n        break;\n      case \"\
    one\":\n        nums.push(1);\n        break;\n      case \"two\":\n        nums.push(2);\n\
    \        break;\n      case \"three\":\n        nums.push(3);\n        break;\n\
    \      case \"four\":\n        nums.push(4);\n        break;\n      case \"five\"\
    :\n        nums.push(5);\n        break;\n      case \"six\":\n        nums.push(6);\n\
    \        break;\n      case \"seven\":\n        nums.push(7);\n        break;\n\
    \      case \"eight\":\n        nums.push(8);\n        break;\n      case \"nine\"\
    :\n        nums.push(9);\n        break;\n    }\n  }\n  nums.sort(function(a,\
    \ b){return a-b});\n  for (var i = 0; i < nums.length; i++) {\n    switch (nums[i])\
    \ {\n      case 0:\n        nums[i] = \"zero\";\n        break;\n      case 1:\n\
    \        nums[i] = \"one\";\n        break;\n      case 2:\n        nums[i] =\
    \ \"two\";\n        break;\n      case 3:\n        nums[i] = \"three\";\n    \
    \    break;\n      case 4:\n        nums[i] = \"four\";\n        break;\n    \
    \  case 5:\n        nums[i] = \"five\";\n        break;\n      case 6:\n     \
    \   nums[i] = \"six\";\n        break;\n      case 7:\n        nums[i] = \"seven\"\
    ;\n        break;\n      case 8:\n        nums[i] = \"eight\";\n        break;\n\
    \      case 9:\n        nums[i] = \"nine\";\n        break;\n    }\n  }\n  return\
    \ nums.join(\" \");\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var numberArray = numbers.split(\" \");\n \
    \ var wordArray = [];\n  var num = 0;\n  var sortedArray = [];\n  var sorted =\
    \ \"\";\n  for(var i = 0; i < numberArray.length; i++){\n    if(numberArray[i]\
    \ === \"zero\"){\n      wordArray.push(0);\n    }\n    else if(numberArray[i]\
    \ === \"one\"){\n      wordArray.push(1);\n    }\n    else if(numberArray[i] ===\
    \ \"two\"){\n      wordArray.push(2);\n    }\n    else if(numberArray[i] === \"\
    three\"){\n      wordArray.push(3);\n    }\n    else if(numberArray[i] === \"\
    four\"){\n      wordArray.push(4);\n    }\n    else if(numberArray[i] === \"five\"\
    ){\n      wordArray.push(5);\n    }\n    else if(numberArray[i] === \"six\"){\n\
    \      wordArray.push(6);\n    }\n    else if(numberArray[i] === \"seven\"){\n\
    \      wordArray.push(7);\n    }\n    else if(numberArray[i] === \"eight\"){\n\
    \      wordArray.push(8);\n    }\n    else if(numberArray[i] === \"nine\"){\n\
    \      wordArray.push(9);\n    }\n  }\n  sortedArray = wordArray.sort(function(a,\
    \ b){return a-b});\n  for(var j = 0; j < sortedArray.length; j++){\n    if(sortedArray[j]\
    \ === 0){\n      sorted += \"zero \";\n    }\n    else if(sortedArray[j] === 1){\n\
    \      sorted += \"one \";\n    }\n    else if(sortedArray[j] === 2){\n      sorted\
    \ += \"two \";\n    }\n    else if(sortedArray[j] === 3){\n      sorted += \"\
    three \";\n    }\n    else if(sortedArray[j] === 4){\n      sorted += \"four \"\
    ;\n    }\n    else if(sortedArray[j] === 5){\n      sorted\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpz269ob29.js:75\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    // Your code here\n    var numArray = numbers.split(\"\
    \ \");\n    var numDict = {};\n    var validNum = [\"zero\", \"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\n \
    \   for (var x = 0; x < numArray.length; x++){\n        if (validNum.indexOf(numArray[x])\
    \ == -1){\n            return \"Invalid number in string\";\n        }\n     \
    \   else {\n            numDict[numArray[x]] = validNum.indexOf(numArray[x]);\n\
    \        }\n    }\n    var sorted = [];\n    for (key in numDict){\n        sorted.push([key,\
    \ numDict[key]]);\n    }\n    sorted.sort(function(a, b) {return a[1] - b[1]});\n\
    \    var answer = [];\n    for (var i = 0; i < sorted.length; i++){\n        answer.push(sorted[i][0]);\n\
    \    }\n    return answer.join(\" \");\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'Invalid number\
    \ in string'\n\nshould loosely deep-equal\n\n''\n    at test (/tmp/tmpfulscv2m.js:35:10)\n\
    \    at Object.<anonymous> (/tmp/tmpfulscv2m.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'Invalid number\
    \ in string',\n  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar nums_to_sort = [];\n\tvar nums_to_return\
    \ = [];\n\tvar split_numbers = numbers.split(\" \");\n\tsplit_numbers.forEach(function(number)\
    \ {\n\t\tnums_to_sort.push(parseInt(number));\n\t});\n\tnums_to_sort.sort(function(a,\
    \ b){return a-b});\n\tnums_to_sort.forEach(function(number) {\n\t\tnums_to_return.push(number.toString());\n\
    \t});\n\treturn nums_to_return.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaN'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmpzqnyb2ta.js:25:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpzqnyb2ta.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaN',\n \
    \ expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var all = numbers.split(\" \");\n    var\
    \ nums = [];\n    var i = 0;\n    for(i = 0; i < all.length; i++){\n        nums.push(parseInt(all[i]));\n\
    \    }\n    nums.sort(function(a, b){return a-b});\n    var ret = \"\";\n    for(i\
    \ = 0; i < nums.length; i++){\n        ret += numbers[nums[i]] + \" \";\n    }\n\
    \    return ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefined '\n\
    \nshould loosely deep-equal\n\n''\n    at test (/tmp/tmpwwio0x4e.js:26:10)\n \
    \   at Object.<anonymous> (/tmp/tmpwwio0x4e.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefined\
    \ ',\n  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    // your code here\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n''\n    at test (/tmp/tmp_sx8hzia.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp_sx8hzia.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    let numStrings = numbers.split(\" \");\n\
    \    let nums = [];\n    for(let i=0; i<numStrings.length; i++){\n        nums.push(numMap[numStrings[i]]);\n\
    \    }\n    nums.sort(function(a, b){return a-b});\n    let finalStr = \"\";\n\
    \    for(let i=0; i<nums.length; i++){\n        finalStr += numMap[nums[i]] +\
    \ \" \";\n    }\n    return finalStr.trim();\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpilivly9k.js:10\n        nums.push(numMap[numStrings[i]]);\n   \
    \               ^\n\nReferenceError: numMap is not defined\n    at sort_numbers\
    \ (/tmp/tmpilivly9k.js:10:19)\n    at test (/tmp/tmpilivly9k.js:24:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpilivly9k.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    numbers = numbers.split(\" \");\n    const\
    \ numbersMap = {\"zero\": 0, \"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4,\
    \ \"five\": 5, \"six\": 6, \"seven\": 7, \"eight\": 8, \"nine\": 9};\n    numbers\
    \ = numbers.map(number => numbersMap[number]);\n    numbers.sort((a, b) => a -\
    \ b);\n    numbers = numbers.map(number => Object.keys(numbersMap).find(key =>\
    \ numbersMap[key] === number));\n    return numbers.join(\" \");\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var numberToNumeralMap = {\n        \"one\"\
    : 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n     \
    \   \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\"\
    : 8,\n        \"nine\": 9,\n        \"zero\": 0\n    };\n    var numeralToNumberMap\
    \ = {\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n     \
    \   4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\"\
    ,\n        8: \"eight\",\n        9: \"nine\",\n        0: \"zero\"\n    };\n\
    \    var result = \"\";\n    var splitString = numbers.split(\" \");\n    var\
    \ numberStrings = [];\n    for (var i = 0; i < splitString.length; i++) {\n  \
    \      var parsedNumber = numberToNumeralMap[splitString[i]];\n        numberStrings.push(parsedNumber);\n\
    \    }\n    numberStrings.sort(function(a, b){return a-b});\n    for (var j =\
    \ 0; j < numberStrings.length; j++) {\n        result += numeralToNumberMap[numberStrings[j]]\
    \ + \" \";\n    }\n    return result.trim();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefined'\n\n\
    should loosely deep-equal\n\n''\n    at test (/tmp/tmpbxrb3vxc.js:50:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpbxrb3vxc.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefined',\n\
    \  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  const nums = numbers.split(' ');\n  const result\
    \ = [];\n  nums.forEach(function(num){\n    if(num === 'zero'){\n      result.push(0);\n\
    \    } else if(num === 'one'){\n      result.push(1);\n    } else if(num === 'two'){\n\
    \      result.push(2);\n    } else if(num === 'three'){\n      result.push(3);\n\
    \    } else if(num === 'four'){\n      result.push(4);\n    } else if(num ===\
    \ 'five'){\n      result.push(5);\n    } else if(num === 'six'){\n      result.push(6);\n\
    \    } else if(num === 'seven'){\n      result.push(7);\n    } else if(num ===\
    \ 'eight'){\n      result.push(8);\n    } else if(num === 'nine'){\n      result.push(9);\n\
    \    }\n  });\n  const sorted = result.sort();\n  const answer = [];\n  sorted.forEach(function(num){\n\
    \    if(num === 0){\n      answer.push('zero');\n    } else if(num === 1){\n \
    \     answer.push('one');\n    } else if(num === 2){\n      answer.push('two');\n\
    \    } else if(num === 3){\n      answer.push('three');\n    } else if(num ===\
    \ 4){\n      answer.push('four');\n    } else if(num === 5){\n      answer.push('five');\n\
    \    } else if(num === 6){\n      answer.push('six');\n    } else if(num === 7){\n\
    \      answer.push('seven');\n    } else if(num === 8){\n      answer.push('eight');\n\
    \    } else if(num === 9){\n      answer.push('nine');\n    }\n  });\n  return\
    \ answer.join(' ');\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    // TODO\n    var dict = {'zero': 0, 'one':\
    \ 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight':\
    \ 8, 'nine': 9};\n    var nums = numbers.split(' ');\n    var sorted = [];\n \
    \   for (var i=0; i<nums.length; i++){\n        sorted.push(dict[nums[i]]);\n\
    \    }\n    sorted.sort(function(a, b){return a-b});\n    for (var i=0; i<sorted.length;\
    \ i++){\n        for (var key in dict){\n            if (dict[key] == sorted[i]){\n\
    \                sorted[i] = key;\n            }\n        }\n    }\n    return\
    \ sorted.join(' ');\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar numbers_list = numbers.split(\" \");\n\t\
    var numeral_list = [];\n\tvar answer = \"\";\n\tfor (var i = 0; i < numbers_list.length;\
    \ i++){\n\t\tnumeral_list.push(count_letters(numbers_list[i]));\n\t}\n\tnumeral_list.sort(function(a,\
    \ b){return a-b});\n\tfor (var i = 0; i < numeral_list.length; i++){\n\t\tif (i\
    \ != 0){\n\t\t\tanswer += \" \";\n\t\t}\n\t\tanswer += numeral_to_word(numeral_list[i]);\n\
    \t}\n\treturn answer;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpz6wn51y2.js:11\n\t\tnumeral_list.push(count_letters(numbers_list[i]));\n\
    \t\t             ^\n\nReferenceError: count_letters is not defined\n    at sort_numbers\
    \ (/tmp/tmpz6wn51y2.js:11:16)\n    at test (/tmp/tmpz6wn51y2.js:28:20)\n    at\
    \ Object.<anonymous> (/tmp/tmpz6wn51y2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    //convert the numberals to numbers\n    //\
    \ ...\n    var array = numbers.split(\" \");\n    var a = [];\n    array.forEach(function(e)\
    \ {\n        if (e === \"zero\"){\n            a.push(0);\n        } else if (e\
    \ === \"one\"){\n            a.push(1);\n        } else if (e === \"two\"){\n\
    \            a.push(2);\n        } else if (e === \"three\"){\n            a.push(3);\n\
    \        } else if (e === \"four\"){\n            a.push(4);\n        } else if\
    \ (e === \"five\"){\n            a.push(5);\n        } else if (e === \"six\"\
    ){\n            a.push(6);\n        } else if (e === \"seven\"){\n           \
    \ a.push(7);\n        } else if (e === \"eight\"){\n            a.push(8);\n \
    \       } else if (e === \"nine\"){\n            a.push(9);\n        }\n    });\n\
    \    a.sort(function(a, b){return a-b});\n    var new_array = a.map(function(e)\
    \ {\n        if (e === 0){\n            return \"zero\";\n        } else if (e\
    \ === 1){\n            return \"one\";\n        } else if (e === 2){\n       \
    \     return \"two\";\n        } else if (e === 3){\n            return \"three\"\
    ;\n        } else if (e === 4){\n            return \"four\";\n        } else\
    \ if (e === 5){\n            return \"five\";\n        } else if (e === 6){\n\
    \            return \"six\";\n        } else if (e === 7){\n            return\
    \ \"seven\";\n        } else if (e === 8){\n            return \"eight\";\n  \
    \      } else if (e === 9){\n            return \"nine\";\n        }\n    });\n\
    \    return new_array.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tnumbers = numbers.split(\" \");\n\tvar numMap\
    \ = {\n\t\t\"zero\":0,\n\t\t\"one\":1,\n\t\t\"two\":2,\n\t\t\"three\":3,\n\t\t\
    \"four\":4,\n\t\t\"five\":5,\n\t\t\"six\":6,\n\t\t\"seven\":7,\n\t\t\"eight\"\
    :8,\n\t\t\"nine\":9\n\t};\n\tvar nums = [];\n\tfor(var i=0; i<numbers.length;\
    \ i++){\n\t\tnums.push(numMap[numbers[i]]);\n\t}\n\tnums.sort(function(a,b){return\
    \ a-b});\n\tvar newWords = [];\n\tfor(var i=0; i<nums.length; i++){\n\t\tfor(var\
    \ word in numMap){\n\t\t\tif(numMap[word] == nums[i]){\n\t\t\t\tnewWords.push(word);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn newWords.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  return numbers.split(' ').sort((a, b) => (a\
    \ > b ? 1 : -1)).join(' ');\n}\n\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'five nine three'\n\
    \nshould loosely deep-equal\n\n'three five nine'\n    at test (/tmp/tmpnxjlyr0e.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnxjlyr0e.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'five nine\
    \ three',\n  expected: 'three five nine',\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  const numberals = {'zero': 0, 'one': 1, 'two':\
    \ 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine':\
    \ 9};\n  const nums = numbers.split(' ');\n  const numeral_values = nums.map(function(numeral){\n\
    \    return numberals[numeral];\n  });\n  numeral_values.sort(function(a, b){\n\
    \    return a - b;\n  });\n  return numeral_values.map(function(num){\n    return\
    \ Object.keys(numberals).find(function(key){\n      return numberals[key] ===\
    \ num;\n    });\n  }).join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar output = \"\";\n\tnumbers = numbers.split(\"\
    \ \");\n\tvar numbers_val = []\n\tvar val = -1;\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tval = get_number_val(numbers[i]);\n\t\tnumbers_val.push(val);\n\t\
    }\n\tnumbers_val.sort(function(a, b){return a-b});\n\tfor(var i = 0; i < numbers_val.length;\
    \ i++){\n\t\tval = get_number_string(numbers_val[i]);\n\t\toutput += val + \"\
    \ \";\n\t}\n\toutput = output.trim();\n\treturn output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9vvf_ni5.js:12\n\t\tval = get_number_val(numbers[i]);\n\t\t^\n\n\
    ReferenceError: get_number_val is not defined\n    at sort_numbers (/tmp/tmp9vvf_ni5.js:12:3)\n\
    \    at test (/tmp/tmp9vvf_ni5.js:29:20)\n    at Object.<anonymous> (/tmp/tmp9vvf_ni5.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar list = numbers.split(\" \");\n\tfor(var\
    \ i = 0; i < list.length; i++){\n\t\tif(list[i] === \"zero\"){\n\t\t\tlist[i]\
    \ = 0;\n\t\t}\n\t\telse if(list[i] === \"one\"){\n\t\t\tlist[i] = 1;\n\t\t}\n\t\
    \telse if(list[i] === \"two\"){\n\t\t\tlist[i] = 2;\n\t\t}\n\t\telse if(list[i]\
    \ === \"three\"){\n\t\t\tlist[i] = 3;\n\t\t}\n\t\telse if(list[i] === \"four\"\
    ){\n\t\t\tlist[i] = 4;\n\t\t}\n\t\telse if(list[i] === \"five\"){\n\t\t\tlist[i]\
    \ = 5;\n\t\t}\n\t\telse if(list[i] === \"six\"){\n\t\t\tlist[i] = 6;\n\t\t}\n\t\
    \telse if(list[i] === \"seven\"){\n\t\t\tlist[i] = 7;\n\t\t}\n\t\telse if(list[i]\
    \ === \"eight\"){\n\t\t\tlist[i] = 8;\n\t\t}\n\t\telse if(list[i] === \"nine\"\
    ){\n\t\t\tlist[i] = 9;\n\t\t}\n\t}\n\tlist.sort(function(a, b){return a-b});\n\
    \tfor(var i = 0; i < list.length; i++){\n\t\tif(list[i] === 0){\n\t\t\tlist[i]\
    \ = \"zero\";\n\t\t}\n\t\telse if(list[i] === 1){\n\t\t\tlist[i] = \"one\";\n\t\
    \t}\n\t\telse if(list[i] === 2){\n\t\t\tlist[i] = \"two\";\n\t\t}\n\t\telse if(list[i]\
    \ === 3){\n\t\t\tlist[i] = \"three\";\n\t\t}\n\t\telse if(list[i] === 4){\n\t\t\
    \tlist[i] = \"four\";\n\t\t}\n\t\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp10cbp1wg.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    return numbers.split(' ').sort(function(a,\
    \ b){\n        return numberToNumeral(a) - numberToNumeral(b);\n    }).join('\
    \ ');\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp53f2zj8d.js:8\n        return numberToNumeral(a) - numberToNumeral(b);\n\
    \        ^\n\nReferenceError: numberToNumeral is not defined\n    at /tmp/tmp53f2zj8d.js:8:9\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmp53f2zj8d.js:7:31)\n\
    \    at test (/tmp/tmp53f2zj8d.js:19:20)\n    at Object.<anonymous> (/tmp/tmp53f2zj8d.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    let numeralArray = numbers.split(\" \");\n\
    \    for(let i = 0; i < numeralArray.length; i++){\n        if(numeralArray[i]\
    \ === \"zero\"){\n            numeralArray[i] = 0;\n        }\n        else if(numeralArray[i]\
    \ === \"one\"){\n            numeralArray[i] = 1;\n        }\n        else if(numeralArray[i]\
    \ === \"two\"){\n            numeralArray[i] = 2;\n        }\n        else if(numeralArray[i]\
    \ === \"three\"){\n            numeralArray[i] = 3;\n        }\n        else if(numeralArray[i]\
    \ === \"four\"){\n            numeralArray[i] = 4;\n        }\n        else if(numeralArray[i]\
    \ === \"five\"){\n            numeralArray[i] = 5;\n        }\n        else if(numeralArray[i]\
    \ === \"six\"){\n            numeralArray[i] = 6;\n        }\n        else if(numeralArray[i]\
    \ === \"seven\"){\n            numeralArray[i] = 7;\n        }\n        else if(numeralArray[i]\
    \ === \"eight\"){\n            numeralArray[i] = 8;\n        }\n        else if(numeralArray[i]\
    \ === \"nine\"){\n            numeralArray[i] = 9;\n        }\n    }\n    let\
    \ sortedArray = numeralArray.sort(function(a, b){return a-b});\n    for(let i\
    \ = 0; i < sortedArray.length; i++){\n        if(sortedArray[i] === 0){\n    \
    \        sortedArray[i] = \"zero\";\n        }\n        else if(sortedArray[i]\
    \ === 1){\n            sortedArray[i] = \"one\";\n        }\n        else if(sortedArray[i]\
    \ === 2){\n            sortedArray[i] = \"two\";\n        }\n        else if(sortedArray[i]\
    \ === 3){\n            sortedArray[i] = \"three\";\n        }\n        else if(sortedArray[i]\
    \ === 4){\n            sortedArray[i] = \"four\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpqdv1_51e.js:55\n            sortedArray[i] = \"four\n         \
    \                    ^^^^^\n\nSyntaxError: Invalid or unexpected token\n    at\
    \ Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar numeralArray = numbers.split(\" \");\n\t\
    var numArray = [];\n\tfor(var i = 0; i < numeralArray.length; i++){\n\t\tswitch(numeralArray[i]){\n\
    \t\t\tcase \"zero\":\n\t\t\t\tnumArray.push(0);\n\t\t\t\tbreak;\n\t\t\tcase \"\
    one\":\n\t\t\t\tnumArray.push(1);\n\t\t\t\tbreak;\n\t\t\tcase \"two\":\n\t\t\t\
    \tnumArray.push(2);\n\t\t\t\tbreak;\n\t\t\tcase \"three\":\n\t\t\t\tnumArray.push(3);\n\
    \t\t\t\tbreak;\n\t\t\tcase \"four\":\n\t\t\t\tnumArray.push(4);\n\t\t\t\tbreak;\n\
    \t\t\tcase \"five\":\n\t\t\t\tnumArray.push(5);\n\t\t\t\tbreak;\n\t\t\tcase \"\
    six\":\n\t\t\t\tnumArray.push(6);\n\t\t\t\tbreak;\n\t\t\tcase \"seven\":\n\t\t\
    \t\tnumArray.push(7);\n\t\t\t\tbreak;\n\t\t\tcase \"eight\":\n\t\t\t\tnumArray.push(8);\n\
    \t\t\t\tbreak;\n\t\t\tcase \"nine\":\n\t\t\t\tnumArray.push(9);\n\t\t\t\tbreak;\n\
    \t\t}\n\t}\n\tnumArray.sort(function(a, b){return a-b});\n\tvar sortedString =\
    \ \"\";\n\tfor(var i = 0; i < numArray.length; i++){\n\t\tswitch(numArray[i]){\n\
    \t\t\tcase 0:\n\t\t\t\tsortedString += \"zero \";\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 1:\n\t\t\t\tsortedString += \"one \";\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\
    \tsortedString += \"two \";\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tsortedString\
    \ += \"three \";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tsortedString += \"four\
    \ \"\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyvalkz_r.js:73\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var numbersArray = numbers.split(\" \");\n\
    \  numbersArray.sort(function(a, b){\n    return numberConverter(a) - numberConverter(b);\n\
    \  });\n  return numbersArray.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp4ueajvva.js:9\n    return numberConverter(a) - numberConverter(b);\n\
    \    ^\n\nReferenceError: numberConverter is not defined\n    at /tmp/tmp4ueajvva.js:9:5\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmp4ueajvva.js:8:16)\n\
    \    at test (/tmp/tmp4ueajvva.js:21:20)\n    at Object.<anonymous> (/tmp/tmp4ueajvva.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var numbersArray = numbers.split(\" \");\n\
    \  var numberMap = {\n    \"zero\": 0,\n    \"one\": 1,\n    \"two\": 2,\n   \
    \ \"three\": 3,\n    \"four\": 4,\n    \"five\": 5,\n    \"six\": 6,\n    \"seven\"\
    : 7,\n    \"eight\": 8,\n    \"nine\": 9\n  };\n  var numbersNumerical = [];\n\
    \  for (var i = 0; i < numbersArray.length; i++) {\n    numbersNumerical.push(numberMap[numbersArray[i]]);\n\
    \  }\n  numbersNumerical.sort(function(a, b){return a-b});\n  var numbersSorted\
    \ = [];\n  for (var i = 0; i < numbersNumerical.length; i++) {\n    var number\
    \ = numbersNumerical[i];\n    if (number === 0) {\n      numbersSorted.push(\"\
    zero\");\n    } else if (number === 1) {\n      numbersSorted.push(\"one\");\n\
    \    } else if (number === 2) {\n      numbersSorted.push(\"two\");\n    } else\
    \ if (number === 3) {\n      numbersSorted.push(\"three\");\n    } else if (number\
    \ === 4) {\n      numbersSorted.push(\"four\");\n    } else if (number === 5)\
    \ {\n      numbersSorted.push(\"five\");\n    } else if (number === 6) {\n   \
    \   numbersSorted.push(\"six\");\n    } else if (number === 7) {\n      numbersSorted.push(\"\
    seven\");\n    } else if (number === 8) {\n      numbersSorted.push(\"eight\"\
    );\n    } else if (number === 9) {\n      numbersSorted.push(\"nine\");\n    }\n\
    \  }\n  return numbersSorted.join(\" \");\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  let word_numbers = {\n    'zero': 0,\n    'one':\
    \ 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six':\
    \ 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  let num_numbers\
    \ = {\n    0: 'zero',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n\
    \    5: 'five',\n    6: 'six',\n    7: 'seven',\n    8: 'eight',\n    9: 'nine'\n\
    \  };\n  let input_arr = numbers.split(' ');\n  let output_arr = [];\n  for (let\
    \ i = 0; i < input_arr.length; i++){\n    output_arr.push(word_numbers[input_arr[i]]);\n\
    \  }\n  for (let i = 0; i < output_arr.length; i++){\n    for (let j = i; j <\
    \ output_arr.length; j++){\n      if (output_arr[i] > output_arr[j]){\n      \
    \  let temp = output_arr[i];\n        output_arr[i] = output_arr[j];\n       \
    \ output_arr[j] = temp;\n      }\n    }\n  }\n  let output_string = '';\n  for\
    \ (let i = 0; i < output_arr.length; i++){\n    output_string += num_numbers[output_arr[i]]\
    \ + ' ';\n  }\n  return output_string.trim();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefined'\n\n\
    should loosely deep-equal\n\n''\n    at test (/tmp/tmpatb9_a6c.js:57:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpatb9_a6c.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefined',\n\
    \  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  // YOUR CODE HERE\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n''\n    at test (/tmp/tmpptfop5x8.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpptfop5x8.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar to_numerals = {\"zero\":\"0\", \"one\"\
    :\"1\", \"two\":\"2\", \"three\":\"3\", \"four\":\"4\", \"five\":\"5\", \"six\"\
    :\"6\", \"seven\":\"7\", \"eight\":\"8\", \"nine\":\"9\"};\n\tvar to_words = {0:\"\
    zero\", 1:\"one\", 2:\"two\", 3:\"three\", 4:\"four\", 5:\"five\", 6:\"six\",\
    \ 7:\"seven\", 8:\"eight\", 9:\"nine\"};\n\tvar result = \"\";\n\tvar sorted =\
    \ [];\n\tnumbers = numbers.split(\" \");\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tsorted.push(parseInt(to_numerals[numbers[i]]));\n\t}\n\tsorted.sort(function(a,\
    \ b){return a-b});\n\tfor(var i = 0; i < sorted.length; i++){\n\t\tresult += to_words[sorted[i]]\
    \ + \" \";\n\t}\n\treturn result.trim();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefined'\n\n\
    should loosely deep-equal\n\n''\n    at test (/tmp/tmpn7qxuipm.js:27:10)\n   \
    \ at Object.<anonymous> (/tmp/tmpn7qxuipm.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefined',\n\
    \  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  return numbers.split(' ').sort( (a,b) => numberals[a]\
    \ - numberals[b] ).join(' ');\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpcgl2tj4f.js:7\n  return numbers.split(' ').sort( (a,b) => numberals[a]\
    \ - numberals[b] ).join(' ');\n                                              \
    \          ^\n\nReferenceError: numberals is not defined\n    at /tmp/tmpcgl2tj4f.js:7:57\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmpcgl2tj4f.js:7:29)\n\
    \    at test (/tmp/tmpcgl2tj4f.js:17:20)\n    at Object.<anonymous> (/tmp/tmpcgl2tj4f.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\t//todo\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n''\n    at test (/tmp/tmp2xd7lyx_.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp2xd7lyx_.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var numArr = numbers.split(\" \");\n  for(var\
    \ i = 0; i < numArr.length; i++){\n    if(numArr[i] === \"zero\"){\n      numArr[i]\
    \ = 0;\n    } else if(numArr[i] === \"one\"){\n      numArr[i] = 1;\n    } else\
    \ if(numArr[i] === \"two\"){\n      numArr[i] = 2;\n    } else if(numArr[i] ===\
    \ \"three\"){\n      numArr[i] = 3;\n    } else if(numArr[i] === \"four\"){\n\
    \      numArr[i] = 4;\n    } else if(numArr[i] === \"five\"){\n      numArr[i]\
    \ = 5;\n    } else if(numArr[i] === \"six\"){\n      numArr[i] = 6;\n    } else\
    \ if(numArr[i] === \"seven\"){\n      numArr[i] = 7;\n    } else if(numArr[i]\
    \ === \"eight\"){\n      numArr[i] = 8;\n    } else if(numArr[i] === \"nine\"\
    ){\n      numArr[i] = 9;\n    }\n  }\n  numArr.sort(function(a, b){return a-b});\n\
    \  var sortedNums = \"\";\n  for(var j = 0; j < numArr.length; j++){\n    if(numArr[j]\
    \ === 0){\n      sortedNums += \"zero \";\n    } else if(numArr[j] === 1){\n \
    \     sortedNums += \"one \";\n    } else if(numArr[j] === 2){\n      sortedNums\
    \ += \"two \";\n    } else if(numArr[j] === 3){\n      sortedNums += \"three \"\
    ;\n    } else if(numArr[j] === 4){\n      sortedNums += \"four \";\n    } else\
    \ if(numArr[j] === 5){\n      sortedNums += \"five \"\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp1r7oaeqi.js:58\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var split = numbers.split(\" \");\n  var to_sort\
    \ = [];\n  for (var i = 0; i < split.length; i++){\n    switch(split[i]){\n  \
    \    case \"zero\":\n        to_sort.push(0);\n        break;\n      case \"one\"\
    :\n        to_sort.push(1);\n        break;\n      case \"two\":\n        to_sort.push(2);\n\
    \        break;\n      case \"three\":\n        to_sort.push(3);\n        break;\n\
    \      case \"four\":\n        to_sort.push(4);\n        break;\n      case \"\
    five\":\n        to_sort.push(5);\n        break;\n      case \"six\":\n     \
    \   to_sort.push(6);\n        break;\n      case \"seven\":\n        to_sort.push(7);\n\
    \        break;\n      case \"eight\":\n        to_sort.push(8);\n        break;\n\
    \      case \"nine\":\n        to_sort.push(9);\n        break;\n    }\n  }\n\
    \  to_sort.sort(function(a, b){return a-b});\n  var result = [];\n  for (var i\
    \ = 0; i < to_sort.length; i++){\n    switch(to_sort[i]){\n      case 0:\n   \
    \     result.push(\"zero\");\n        break;\n      case 1:\n        result.push(\"\
    one\");\n        break;\n      case 2:\n        result.push(\"two\");\n      \
    \  break;\n      case 3:\n        result.push(\"three\");\n        break;\n  \
    \    case 4:\n        result.push(\"four\");\n        break;\n      case 5:\n\
    \        result.push(\"five\");\n        break;\n      case 6:\n        result.push(\"\
    six\");\n        break;\n      case 7:\n        result.push(\"seven\");\n    \
    \    break;\n      case 8:\n        result.push(\"eight\");\n        break;\n\
    \      case 9:\n        result.push(\"nine\");\n        break;\n    }\n  }\n \
    \ var final = result.join(\" \");\n  return final;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    const numeralHash = {\n        'zero': 0,\n\
    \        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n\
    \        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    }\n    let numberArr = numbers.split(' ');\n    for(let\
    \ i = 0; i < numberArr.length; i++){\n        numberArr[i] = numeralHash[numberArr[i]];\n\
    \    }\n    numberArr.sort(function(a, b){return a-b});\n    for(let i = 0; i\
    \ < numberArr.length; i++){\n        numberArr[i] = numeralHash[numberArr[i]];\n\
    \    }\n    return numberArr.join(' ');\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'three'\n    at test (/tmp/tmppdilj62y.js:36:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppdilj62y.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tlet numbersArray = numbers.split(\" \");\n\t\
    let numberValues = {zero: 0, one: 1, two: 2, three: 3, four: 4, five: 5, six:\
    \ 6, seven: 7, eight: 8, nine: 9};\n\tlet numbersArrayAsValues = [];\n\tfor (let\
    \ i = 0; i < numbersArray.length; i++){\n\t\tnumbersArrayAsValues.push(numberValues[numbersArray[i]]);\n\
    \t}\n\tnumbersArrayAsValues.sort(function(a, b){return a-b});\n\tlet sortedNumbers\
    \ = [];\n\tfor (let i = 0; i < numbersArrayAsValues.length; i++){\n\t\tlet number\
    \ = numbersArrayAsValues[i];\n\t\tif (number === 0){\n\t\t\tsortedNumbers.push(\"\
    zero\");\n\t\t} else if (number === 1){\n\t\t\tsortedNumbers.push(\"one\");\n\t\
    \t} else if (number === 2){\n\t\t\tsortedNumbers.push(\"two\");\n\t\t} else if\
    \ (number === 3){\n\t\t\tsortedNumbers.push(\"three\");\n\t\t} else if (number\
    \ === 4){\n\t\t\tsortedNumbers.push(\"four\");\n\t\t} else if (number === 5){\n\
    \t\t\tsortedNumbers.push(\"five\");\n\t\t} else if (number === 6){\n\t\t\tsortedNumbers.push(\"\
    six\");\n\t\t} else if (number === 7){\n\t\t\tsortedNumbers.push(\"seven\");\n\
    \t\t} else if (number === 8){\n\t\t\tsortedNumbers.push(\"eight\");\n\t\t} else\
    \ if (number === 9){\n\t\t\tsortedNumbers.push(\"nine\");\n\t\t}\n\t}\n\treturn\
    \ sortedNumbers.join(\" \");\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var string = \"\";\n    var nums = numbers.split(\"\
    \ \");\n    for(i = 0; i < nums.length; i++){\n        for(j = i+1; j < nums.length;\
    \ j++){\n            if(nums[i] > nums[j]){\n                var temp = nums[i];\n\
    \                nums[i] = nums[j];\n                nums[j] = temp;\n       \
    \     }\n        }\n    }\n    for(i = 0; i < nums.length; i++){\n        string\
    \ += \" \" + nums[i];\n    }\n    return string;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n' '\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmp0xz7_kdz.js:29:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp0xz7_kdz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: ' ',\n  expected:\
    \ '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var num = numbers.split(\" \");\n  var num_sort\
    \ = [];\n  for (i=0; i<num.length; i++){\n    num_sort.push(num[i]);\n  }\n  var\
    \ num_sort_num = [];\n  for (i=0; i<num_sort.length; i++){\n    if (num_sort[i]\
    \ === \"zero\"){\n      num_sort_num.push(0);\n    }\n    else if (num_sort[i]\
    \ === \"one\"){\n      num_sort_num.push(1);\n    }\n    else if (num_sort[i]\
    \ === \"two\"){\n      num_sort_num.push(2);\n    }\n    else if (num_sort[i]\
    \ === \"three\"){\n      num_sort_num.push(3);\n    }\n    else if (num_sort[i]\
    \ === \"four\"){\n      num_sort_num.push(4);\n    }\n    else if (num_sort[i]\
    \ === \"five\"){\n      num_sort_num.push(5);\n    }\n    else if (num_sort[i]\
    \ === \"six\"){\n      num_sort_num.push(6);\n    }\n    else if (num_sort[i]\
    \ === \"seven\"){\n      num_sort_num.push(7);\n    }\n    else if (num_sort[i]\
    \ === \"eight\"){\n      num_sort_num.push(8);\n    }\n    else if (num_sort[i]\
    \ === \"nine\"){\n      num_sort_num.push(9);\n    }\n  }\n  var arr_sort = num_sort_num.sort(function(a,\
    \ b){return a-b});\n  var new_num = [];\n  for (i=0; i<arr_sort.length; i++){\n\
    \    if (arr_sort[i] === 0){\n      new_num.push(\"zero\");\n    }\n    else if\
    \ (arr_sort[i] === 1){\n      new_num.push(\"one\");\n    }\n    else if (arr_sort[i]\
    \ === 2){\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpxibhrz5o.js:67\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  var numbersMap = {\n    \"zero\": 0,\n    \"\
    one\": 1,\n    \"two\": 2,\n    \"three\": 3,\n    \"four\": 4,\n    \"five\"\
    : 5,\n    \"six\": 6,\n    \"seven\": 7,\n    \"eight\": 8,\n    \"nine\": 9\n\
    \  };\n  return numbers.split(\" \").sort(function(a, b){\n    return numbersMap[a]\
    \ - numbersMap[b];\n  }).join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  return numbers.split(' ').sort((a, b) => {\n\
    \    return numbersToInt[a] - numbersToInt[b];\n  }).join(' ');\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpmlls96a5.js:8\n    return numbersToInt[a] - numbersToInt[b];\n\
    \    ^\n\nReferenceError: numbersToInt is not defined\n    at /tmp/tmpmlls96a5.js:8:5\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmpmlls96a5.js:7:29)\n\
    \    at test (/tmp/tmpmlls96a5.js:19:20)\n    at Object.<anonymous> (/tmp/tmpmlls96a5.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\tvar numberals = [\"zero\", \"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\n\t\
    var split_numbers = numbers.split(\" \");\n\tvar sorted_numbers = split_numbers.sort(function(a,\
    \ b){\n\t\treturn numberals.indexOf(a) - numberals.indexOf(b);\n\t});\n\treturn\
    \ sorted_numbers.join(\" \");\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n  // >>> sort_numbers(\"three one five\")\n \
    \ // \"one three five\"\n  // split the numbers by space\n  // >>> sort_numbers(\"\
    three one five\")\n  // [\"three\", \"one\", \"five\"]\n  // create a new sorted\
    \ array of nums\n  // iterate through all nums\n  // convert the number to a number\
    \ \n  // push to new array\n  // return the joined string of sorted numbers\n\
    \  return numbers.split(\" \").sort((a, b) => (parseInt(a) - parseInt(b))).join(\"\
    \ \");\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'five zero four\
    \ seven nine eight'\n\nshould loosely deep-equal\n\n'zero four five seven eight\
    \ nine'\n    at test (/tmp/tmpdce6cri8.js:27:10)\n    at Object.<anonymous> (/tmp/tmpdce6cri8.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'five zero\
    \ four seven nine eight',\n  expected: 'zero four five seven eight nine',\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    numbers = numbers.split(\" \");\n    numbers.sort(function(a,\
    \ b){\n        return get_numeral_value(a) - get_numeral_value(b);\n    });\n\
    \    return numbers.join(\" \");\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp74fsb674.js:9\n        return get_numeral_value(a) - get_numeral_value(b);\n\
    \        ^\n\nReferenceError: get_numeral_value is not defined\n    at /tmp/tmp74fsb674.js:9:9\n\
    \    at Array.sort (<anonymous>)\n    at sort_numbers (/tmp/tmp74fsb674.js:8:13)\n\
    \    at test (/tmp/tmp74fsb674.js:21:20)\n    at Object.<anonymous> (/tmp/tmp74fsb674.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var nums = numbers.split(\" \");\n    var\
    \ mappings = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n\
    \        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"\
    six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9\n\
    \    };\n    var sort_nums = nums.sort(function(a, b){\n        return mappings[a]\
    \ - mappings[b];\n    });\n    var word_nums = [];\n    for (var i=0; i<sort_nums.length;\
    \ i++){\n        for (var num in mappings){\n            if (mappings[num] ===\
    \ sort_nums[i]){\n                word_nums.push(num);\n            }\n      \
    \  }\n    }\n    return word_nums.join(\" \");\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'three'\n    at test (/tmp/tmphu65ea_a.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmphu65ea_a.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'three',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n\t// return numbers.split(' ').sort(function(a,b){return\
    \ a-b;}).join(' ');\n\treturn numbers.split(' ').sort(sort_numbers_helper).join('\
    \ ');\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpcyw6yteh.js:8\n\treturn numbers.split(' ').sort(sort_numbers_helper).join('\
    \ ');\n\t                               ^\n\nReferenceError: sort_numbers_helper\
    \ is not defined\n    at sort_numbers (/tmp/tmpcyw6yteh.js:8:33)\n    at test\
    \ (/tmp/tmpcyw6yteh.js:15:20)\n    at Object.<anonymous> (/tmp/tmpcyw6yteh.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var nums = numbers.split(\" \");\n    var\
    \ nums_ints = [];\n    for (var i = 0; i < nums.length; i++){\n        if (nums[i]\
    \ == \"zero\"){\n            nums_ints.push(0);\n        }\n        else if (nums[i]\
    \ == \"one\"){\n            nums_ints.push(1);\n        }\n        else if (nums[i]\
    \ == \"two\"){\n            nums_ints.push(2);\n        }\n        else if (nums[i]\
    \ == \"three\"){\n            nums_ints.push(3);\n        }\n        else if (nums[i]\
    \ == \"four\"){\n            nums_ints.push(4);\n        }\n        else if (nums[i]\
    \ == \"five\"){\n            nums_ints.push(5);\n        }\n        else if (nums[i]\
    \ == \"six\"){\n            nums_ints.push(6);\n        }\n        else if (nums[i]\
    \ == \"seven\"){\n            nums_ints.push(7);\n        }\n        else if (nums[i]\
    \ == \"eight\"){\n            nums_ints.push(8);\n        }\n        else if (nums[i]\
    \ == \"nine\"){\n            nums_ints.push(9);\n        }\n    }\n    nums_ints.sort(function(a,\
    \ b){return a-b});\n    var nums_str = [];\n    for (var i = 0; i < nums_ints.length;\
    \ i++){\n        if (nums_ints[i] == 0){\n            nums_str.push(\"zero\");\n\
    \        }\n        else if (nums_ints[i] == 1){\n            nums_str.push(\"\
    one\");\n        }\n        else if (nums_ints[i] == 2){\n            nums_str.push(\"\
    two\");\n        }\n        else if (nums_ints[i] == 3){\n            nums_str.push(\"\
    three\");\n        }\n        else if (nums_ints[i] == 4){\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp5bwnny7w.js:69\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    //split the string into an array of numbers\n\
    \    var nums = numbers.split(\" \");\n    //declare a new array for the sorted\
    \ numbers\n    var sorted_nums = [];\n    //Iterate through the array of numbers\n\
    \    for(i=0; i<nums.length; i++){\n        //declare a variable to hold the current\
    \ number\n        var cur_num = nums[i];\n        //Iterate through the sorted\
    \ array to find the location for the current number\n        for(j=0; j<sorted_nums.length;\
    \ j++){\n            //If the current number is larger than the sorted array number\
    \ at index j,\n            //then insert the current number into the array at\
    \ index j\n            if(cur_num > sorted_nums[j]){\n                sorted_nums.splice(j,\
    \ 0, cur_num);\n                break;\n            }\n            //If the end\
    \ of the array is reached, then append the current number to the array\n     \
    \       else if(j+1 == sorted_nums.length){\n                sorted_nums.push(cur_num);\n\
    \                break;\n            }\n        }\n        //If the sorted array\
    \ is empty, then push the current number to the array\n        if(sorted_nums.length\
    \ == 0){\n            sorted_nums.push(cur_num);\n        }\n    }\n    //return\
    \ the sorted array as a string\n    return sorted_nums.join(\" \");\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'three nine five'\n\
    \nshould loosely deep-equal\n\n'three five nine'\n    at test (/tmp/tmp8s0u0wq0.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8s0u0wq0.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'three nine\
    \ five',\n  expected: 'three five nine',\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var result = \"\";\n    var numbers_split\
    \ = numbers.split(\" \");\n    var numbers_sort = numbers_split.sort(function(a,\
    \ b){\n        if(a < b){\n            return -1;\n        }\n        if(a > b){\n\
    \            return 1;\n        }\n        return 0;\n    });\n    for(var i =\
    \ 0; i < numbers_sort.length; i++){\n        result += numbers_sort[i] + \" \"\
    ;\n    }\n    return result.trim();\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'five nine three'\n\
    \nshould loosely deep-equal\n\n'three five nine'\n    at test (/tmp/tmphsckuvb3.js:31:10)\n\
    \    at Object.<anonymous> (/tmp/tmphsckuvb3.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'five nine\
    \ three',\n  expected: 'three five nine',\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers){\n    var numbers_map = {'zero': 0, 'one': 1, 'two':\
    \ 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine':\
    \ 9};\n    var numbers_array = numbers.split(' ');\n    var number_value_array\
    \ = [];\n    for (var i = 0; i < numbers_array.length; i++){\n        number_value_array.push(numbers_map[numbers_array[i]]);\n\
    \    }\n    var sorted_number_value_array = number_value_array.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    var sorted_number_string = \"\";\n\
    \    for (var j = 0; j < sorted_number_value_array.length; j++){\n        sorted_number_string\
    \ += sorted_number_value_array[j] + \" \";\n    }\n    return sorted_number_string;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'undefined '\n\
    \nshould loosely deep-equal\n\n''\n    at test (/tmp/tmp61uvsf76.js:27:10)\n \
    \   at Object.<anonymous> (/tmp/tmp61uvsf76.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'undefined\
    \ ',\n  expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821014
