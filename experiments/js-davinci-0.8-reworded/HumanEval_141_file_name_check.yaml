name: HumanEval_141_file_name_check
language: js
prompt: "//Create a function which takes a string representing a file's name, and\
  \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  // A file's name is considered to be valid if and only if all the following conditions\
  \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n// the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
  example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\n\
  function file_name_check(file_name){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = file_name_check;\n  assert.deepEqual(candidate(\"example.txt\"),\"Yes\");\n\
  \  assert.deepEqual(candidate(\"1example.dll\"),\"No\");\n  assert.deepEqual(candidate(\"\
  s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  MY16FILE3.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"\
  No\");\n  assert.deepEqual(candidate(\"_Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"\
  ?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"/this_is_valid.dll\"),\"\
  No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"this_is_valid.txtexe\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"),\"No\");\n \
  \ assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"\
  ),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n\
  \  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"
completions: ["    let dotPos = file_name.indexOf('.');\n    let prefix = file_name.substring(0,\
    \ dotPos);\n    let suffix = file_name.substring(dotPos + 1);\n    let digitCount\
    \ = 0;\n    for (let i = 0; i < prefix.length; i++){\n        if (!(prefix[i]\
    \ >= 'a' && prefix[i] <= 'z') && !(prefix[i] >= 'A' && prefix[i] <= 'Z')){\n \
    \           if (prefix[i] >= '0' && prefix[i] <= '9'){\n                digitCount++;\n\
    \            }\n            else{\n                return \"No\";\n          \
    \  }\n        }\n    }\n    if (digitCount > 3){\n        return \"No\";\n   \
    \ }\n    if (dotPos == file_name.length - 1 || dotPos == 0){\n        return \"\
    No\";\n    }\n    if (suffix == \"txt\" || suffix == \"exe\" || suffix == \"dll\"\
    ){\n        return \"Yes\";\n    }\n    return \"No\";\n}\n", "\tvar re_letter\
    \ = /^[a-zA-Z]+/;\n\tvar re_digit = /\\d/g;\n\tvar re_dot = /\\./;\n\tvar re_end\
    \ = /(txt|exe|dll)$/;\n\tvar digit_count = (file_name.match(re_digit) || []).length;\n\
    \tvar dot_count = (file_name.match(re_dot) || []).length;\n\tvar dot_position\
    \ = file_name.search(re_dot);\n\tvar name_begin = file_name.match(re_letter);\n\
    \tvar name_end = file_name.match(re_end);\n\tif(digit_count <= 3 && dot_count\
    \ == 1 && name_begin && name_end){\n\t\tif(dot_position != 0 && name_end.index\
    \ == (file_name.length - name_end[0].length)){\n\t\t\treturn \"Yes\";\n\t\t}\n\
    \t}\n\treturn \"No\";\n}", "  var has_digit = new RegExp(\"[0-9]\");\n  var has_dot\
    \ = new RegExp(\"[.]\");\n  var is_letter = new RegExp(\"[a-zA-Z]\");\n  var is_valid_ending\
    \ = new RegExp(\"([txt]$)|([exe]$)|([dll]$)\");\n  var dot_count = 0;\n  var digit_count\
    \ = 0;\n  var letter_count = 0;\n  var has_valid_ending = false;\n  for (var i\
    \ = 0; i < file_name.length; i++) {\n    if (has_digit.test(file_name[i])) {\n\
    \      digit_count++;\n    } else if (has_dot.test(file_name[i])) {\n      dot_count++;\n\
    \    } else if (is_letter.test(file_name[i])) {\n      letter_count++;\n    }\n\
    \  }\n  var ending = file_name.slice(file_name.length - 3);\n  has_valid_ending\
    \ = is_valid_ending.test(ending);\n  if (dot_count === 1 && digit_count <= 3 &&\
    \ letter_count > 0 && has_valid_ending) {\n    return \"Yes\";\n  } else {\n \
    \   return \"No\";\n  }\n}\n", "    let str_1 = file_name.slice(0,file_name.indexOf('.'));\n\
    \    let str_2 = file_name.slice(file_name.indexOf('.')+1);\n    let str_3 = file_name.split('');\n\
    \    if (file_name.includes('.') && /[a-zA-Z]/.test(str_1[0]) && \n    (str_2\
    \ == 'txt' || str_2 == 'exe' || str_2 == 'dll') && str_1.length != 0 && \n   \
    \ str_3.filter(item => /[0-9]/.test(item)).length < 4) {\n        return 'Yes';\n\
    \    }\n    return 'No';\n}\n\n", "  let re = /^[a-zA-Z]{1}\\d{0,3}\\.{1}txt|exe|dll$/g;\n\
    \  return re.test(file_name) ? \"Yes\" : \"No\";\n}", "    var status = \"\";\n\
    \    var i = 0;\n    while(i < file_name.length && file_name[i] !== \".\"){\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            status =\
    \ \"No\";\n            break;\n        }\n        i++;\n    }\n    if(status ===\
    \ \"No\"){\n        return status;\n    }\n    if(file_name[file_name.length -\
    \ 1] == \".\" || file_name[0] == \".\"){\n        return \"No\";\n    }\n    if(i\
    \ - 1 == file_name.length - 5){\n        return \"No\";\n    }\n    var type =\
    \ file_name.substring(file_name.length - 3, file_name.length);\n    if(type !==\
    \ \"txt\" && type !== \"exe\" && type !== \"dll\"){\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}", "    // Write your code here\n    // To print\
    \ results to the standard output you can use print\n    // Example: print \"Hello\
    \ world!\"\n    var patt = /^[a-zA-Z]{1}[a-zA-Z0-9\\.]{1,}$/;\n    var match =\
    \ patt.test(file_name);\n    if(match){\n        var arr = file_name.split(\"\
    .\");\n        var sub_arr = arr[0].split(\"\");\n        var digit_count = 0;\n\
    \        for(var i = 0; i < sub_arr.length; i++){\n            if(sub_arr[i] >=\
    \ '0' && sub_arr[i] <= '9'){\n                digit_count += 1;\n            }\n\
    \        }\n        if(digit_count > 3){\n            return \"No\";\n       \
    \ }\n        var exts = [\"txt\", \"exe\", \"dll\"];\n        if(exts.indexOf(arr[1])\
    \ === -1){\n            return \"No\";\n        }\n        return \"Yes\";\n \
    \   }\n    return \"No\";\n}\n", "    //write your code here\n}", "\treturn /^[a-zA-Z]{1}[\\\
    d]{0,3}[\\.]{1}(txt|exe|dll)$/.test(file_name) ? \"Yes\" : \"No\";\n}", "    let\
    \ regex = /^([a-zA-Z]{1})([a-zA-Z0-9]{1,})[.](txt|exe|dll)$/\n    return regex.test(file_name)\
    \ ? \"Yes\" : \"No\"\n}", "    let valids = ['txt', 'exe', 'dll'];\n    let digits\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n    let i = 0;\n    for(;\
    \ i < file_name.length; i++){\n        if(digits.includes(file_name[i])){\n  \
    \          return \"No\";\n        }\n        if(file_name[i] === '.'){\n    \
    \        break;\n        }\n    }\n    for(; i < file_name.length; i++){\n   \
    \     if(digits.includes(file_name[i])){\n            return \"No\";\n       \
    \ }\n        if(file_name[i] === '.'){\n            break;\n        }\n    }\n\
    \    if(valids.includes(file_name.substring(i + 1, file_name.length))){\n    \
    \    return \"Yes\";\n    }\n    return \"No\";\n}", "    \n}\n", "    //Your\
    \ code goes here\n}\n", "  var first_part = file_name.substring(0, file_name.indexOf('.'));\n\
    \  var second_part = file_name.substring(file_name.indexOf('.') + 1);\n  var number_count\
    \ = 0;\n  var is_valid = true;\n  for(var i = 0; i < first_part.length; i++){\n\
    \    if(first_part[i] >= '0' && first_part[i] <= '9'){\n      number_count++;\n\
    \    }\n  }\n  if(number_count > 3){\n    is_valid = false;\n  }\n  if(first_part.length\
    \ === 0 || (first_part[0] < 'a' || first_part[0] > 'z') && (first_part[0] < 'A'\
    \ || first_part[0] > 'Z')){\n    is_valid = false;\n  }\n  if(second_part !==\
    \ 'txt' && second_part !== 'exe' && second_part !== 'dll'){\n    is_valid = false;\n\
    \  }\n  if(file_name.split('.').length !== 2){\n    is_valid = false;\n  }\n \
    \ if(is_valid){\n    return 'Yes';\n  }\n  return 'No';\n}\n", "    // your code\
    \ here\n    var x = file_name.split(\".\");\n    var x1 = x[0].split(\"\");\n\
    \    if(x.length > 2){\n        return \"No\";\n    }\n    if(x1[0] !== x1[0].toUpperCase()\
    \ && x1[0] !== x1[0].toLowerCase()){\n        return \"No\";\n    }\n    if(x[1]\
    \ !== \"txt\" && x[1] !== \"exe\" && x[1] !== \"dll\"){\n        return \"No\"\
    ;\n    }\n    for(i=0; i<x1.length; i++){\n        if(x1[i] === \"0\" || x1[i]\
    \ === \"1\" || x1[i] === \"2\" || x1[i] === \"3\" || x1[i] === \"4\" || x1[i]\
    \ === \"5\" || x1[i] === \"6\" || x1[i] === \"7\" || x1[i] === \"8\" || x1[i]\
    \ === \"9\"){\n            return \"No\";\n        }\n    }\n    return \"Yes\"\
    ;\n}", "\tvar dot_index = file_name.indexOf('.');\n\tvar file_name_arr = file_name.split('.');\n\
    \tvar file_name_no_dot = file_name_arr[0];\n\tvar file_extension = file_name_arr[1];\n\
    \t\n\tvar re = /[0-9]/g;\n\tvar number_count = (file_name_no_dot.match(re)).length;\n\
    \t\n\tif (number_count > 3){\n\t\treturn 'No';\n\t}\n\t\n\tif (dot_index == -1){\n\
    \t\treturn 'No';\n\t}\n\t\n\tif (file_name_no_dot == ''){\n\t\treturn 'No';\n\t\
    }\n\t\n\tvar first_letter = file_name_no_dot[0];\n\tvar re_letter = /[a-zA-Z]/g;\n\
    \tvar file_name_letter_count = (file_name_no_dot.match(re_letter)).length;\n\t\
    \n\tif (file_name_letter_count == 0){\n\t\treturn 'No';\n\t}\n\t\n\tif (file_extension\
    \ != 'txt' && file_extension != 'exe' && file_extension != 'dll'){\n\t\treturn\
    \ 'No';\n\t}\n\t\n\treturn 'Yes';\n}\n", "    for(let i = 0; i < file_name.length;\
    \ i++){\n        if(file_name[i] >= 0 && file_name[i] <= 9){\n            return\
    \ \"No\";\n        }\n    }\n    for(let i = 0; i < file_name.length; i++){\n\
    \        if(file_name[i] == \".\"){\n            return \"Yes\";\n        }\n\
    \    }\n    if(file_name == \"\"){\n        return \"No\";\n    }\n    if(file_name[0]\
    \ == \"e\" || file_name[0] == \"E\"){\n        return \"Yes\";\n    }\n    if(file_name.slice(-4)\
    \ == \".txt\" || file_name.slice(-4) == \".exe\" || file_name.slice(-4) == \"\
    .dll\"){\n        return \"Yes\";\n    }\n    return \"No\";\n}\n", "    var dot_index\
    \ = file_name.indexOf('.');\n    var name_before_dot = file_name.substring(0,\
    \ dot_index);\n    var name_after_dot = file_name.substring(dot_index + 1);\n\
    \    if (count_digits(name_before_dot) <= 3 && \n        count_digits(name_after_dot)\
    \ == 0 &&\n        count_dots(file_name) == 1 &&\n        count_letters(name_before_dot)\
    \ > 0 &&\n        is_latin_letter(name_before_dot[0]) &&\n        name_after_dot\
    \ == 'txt' ||\n        name_after_dot == 'exe' ||\n        name_after_dot == 'dll'){\n\
    \        return 'Yes';\n    }\n    return 'No';\n}\n", "    if(file_name.match(/^[A-Za-z][A-Za-z0-9]*\\\
    .(txt|exe|dll)$/)){\n        return 'Yes';\n    }\n    return 'No';\n}\n", " \
    \   var exp1 = new RegExp(\"^[a-z|A-Z]+[0-9]{0,3}[.][txt|exe|dll]$\");\n    if(exp1.test(file_name)){\n\
    \        return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
