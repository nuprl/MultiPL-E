name: HumanEval_141_file_name_check
language: js
prompt: "//Create a function which takes a string representing a file's name, and\
  \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  // A file's name is considered to be valid if and only if all the following conditions\
  \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n// the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
  example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\n\
  function file_name_check(file_name){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = file_name_check;\n  assert.deepEqual(candidate(\"example.txt\"),\"Yes\");\n\
  \  assert.deepEqual(candidate(\"1example.dll\"),\"No\");\n  assert.deepEqual(candidate(\"\
  s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  MY16FILE3.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"\
  No\");\n  assert.deepEqual(candidate(\"_Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"\
  ?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"/this_is_valid.dll\"),\"\
  No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"this_is_valid.txtexe\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"),\"No\");\n \
  \ assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"\
  ),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n\
  \  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"
completions: ["    let dotPos = file_name.indexOf('.');\n    let prefix = file_name.substring(0,\
    \ dotPos);\n    let suffix = file_name.substring(dotPos + 1);\n    let digitCount\
    \ = 0;\n    for (let i = 0; i < prefix.length; i++){\n        if (!(prefix[i]\
    \ >= 'a' && prefix[i] <= 'z') && !(prefix[i] >= 'A' && prefix[i] <= 'Z')){\n \
    \           if (prefix[i] >= '0' && prefix[i] <= '9'){\n                digitCount++;\n\
    \            }\n            else{\n                return \"No\";\n          \
    \  }\n        }\n    }\n    if (digitCount > 3){\n        return \"No\";\n   \
    \ }\n    if (dotPos == file_name.length - 1 || dotPos == 0){\n        return \"\
    No\";\n    }\n    if (suffix == \"txt\" || suffix == \"exe\" || suffix == \"dll\"\
    ){\n        return \"Yes\";\n    }\n    return \"No\";\n}\n", "\tvar re_letter\
    \ = /^[a-zA-Z]+/;\n\tvar re_digit = /\\d/g;\n\tvar re_dot = /\\./;\n\tvar re_end\
    \ = /(txt|exe|dll)$/;\n\tvar digit_count = (file_name.match(re_digit) || []).length;\n\
    \tvar dot_count = (file_name.match(re_dot) || []).length;\n\tvar dot_position\
    \ = file_name.search(re_dot);\n\tvar name_begin = file_name.match(re_letter);\n\
    \tvar name_end = file_name.match(re_end);\n\tif(digit_count <= 3 && dot_count\
    \ == 1 && name_begin && name_end){\n\t\tif(dot_position != 0 && name_end.index\
    \ == (file_name.length - name_end[0].length)){\n\t\t\treturn \"Yes\";\n\t\t}\n\
    \t}\n\treturn \"No\";\n}", "  var has_digit = new RegExp(\"[0-9]\");\n  var has_dot\
    \ = new RegExp(\"[.]\");\n  var is_letter = new RegExp(\"[a-zA-Z]\");\n  var is_valid_ending\
    \ = new RegExp(\"([txt]$)|([exe]$)|([dll]$)\");\n  var dot_count = 0;\n  var digit_count\
    \ = 0;\n  var letter_count = 0;\n  var has_valid_ending = false;\n  for (var i\
    \ = 0; i < file_name.length; i++) {\n    if (has_digit.test(file_name[i])) {\n\
    \      digit_count++;\n    } else if (has_dot.test(file_name[i])) {\n      dot_count++;\n\
    \    } else if (is_letter.test(file_name[i])) {\n      letter_count++;\n    }\n\
    \  }\n  var ending = file_name.slice(file_name.length - 3);\n  has_valid_ending\
    \ = is_valid_ending.test(ending);\n  if (dot_count === 1 && digit_count <= 3 &&\
    \ letter_count > 0 && has_valid_ending) {\n    return \"Yes\";\n  } else {\n \
    \   return \"No\";\n  }\n}\n", "    let str_1 = file_name.slice(0,file_name.indexOf('.'));\n\
    \    let str_2 = file_name.slice(file_name.indexOf('.')+1);\n    let str_3 = file_name.split('');\n\
    \    if (file_name.includes('.') && /[a-zA-Z]/.test(str_1[0]) && \n    (str_2\
    \ == 'txt' || str_2 == 'exe' || str_2 == 'dll') && str_1.length != 0 && \n   \
    \ str_3.filter(item => /[0-9]/.test(item)).length < 4) {\n        return 'Yes';\n\
    \    }\n    return 'No';\n}\n\n", "  let re = /^[a-zA-Z]{1}\\d{0,3}\\.{1}txt|exe|dll$/g;\n\
    \  return re.test(file_name) ? \"Yes\" : \"No\";\n}", "    var status = \"\";\n\
    \    var i = 0;\n    while(i < file_name.length && file_name[i] !== \".\"){\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            status =\
    \ \"No\";\n            break;\n        }\n        i++;\n    }\n    if(status ===\
    \ \"No\"){\n        return status;\n    }\n    if(file_name[file_name.length -\
    \ 1] == \".\" || file_name[0] == \".\"){\n        return \"No\";\n    }\n    if(i\
    \ - 1 == file_name.length - 5){\n        return \"No\";\n    }\n    var type =\
    \ file_name.substring(file_name.length - 3, file_name.length);\n    if(type !==\
    \ \"txt\" && type !== \"exe\" && type !== \"dll\"){\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}", "    // Write your code here\n    // To print\
    \ results to the standard output you can use print\n    // Example: print \"Hello\
    \ world!\"\n    var patt = /^[a-zA-Z]{1}[a-zA-Z0-9\\.]{1,}$/;\n    var match =\
    \ patt.test(file_name);\n    if(match){\n        var arr = file_name.split(\"\
    .\");\n        var sub_arr = arr[0].split(\"\");\n        var digit_count = 0;\n\
    \        for(var i = 0; i < sub_arr.length; i++){\n            if(sub_arr[i] >=\
    \ '0' && sub_arr[i] <= '9'){\n                digit_count += 1;\n            }\n\
    \        }\n        if(digit_count > 3){\n            return \"No\";\n       \
    \ }\n        var exts = [\"txt\", \"exe\", \"dll\"];\n        if(exts.indexOf(arr[1])\
    \ === -1){\n            return \"No\";\n        }\n        return \"Yes\";\n \
    \   }\n    return \"No\";\n}\n", "    //write your code here\n}", "\treturn /^[a-zA-Z]{1}[\\\
    d]{0,3}[\\.]{1}(txt|exe|dll)$/.test(file_name) ? \"Yes\" : \"No\";\n}", "    let\
    \ regex = /^([a-zA-Z]{1})([a-zA-Z0-9]{1,})[.](txt|exe|dll)$/\n    return regex.test(file_name)\
    \ ? \"Yes\" : \"No\"\n}", "    let valids = ['txt', 'exe', 'dll'];\n    let digits\
    \ = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n    let i = 0;\n    for(;\
    \ i < file_name.length; i++){\n        if(digits.includes(file_name[i])){\n  \
    \          return \"No\";\n        }\n        if(file_name[i] === '.'){\n    \
    \        break;\n        }\n    }\n    for(; i < file_name.length; i++){\n   \
    \     if(digits.includes(file_name[i])){\n            return \"No\";\n       \
    \ }\n        if(file_name[i] === '.'){\n            break;\n        }\n    }\n\
    \    if(valids.includes(file_name.substring(i + 1, file_name.length))){\n    \
    \    return \"Yes\";\n    }\n    return \"No\";\n}", "    \n}\n", "    //Your\
    \ code goes here\n}\n", "  var first_part = file_name.substring(0, file_name.indexOf('.'));\n\
    \  var second_part = file_name.substring(file_name.indexOf('.') + 1);\n  var number_count\
    \ = 0;\n  var is_valid = true;\n  for(var i = 0; i < first_part.length; i++){\n\
    \    if(first_part[i] >= '0' && first_part[i] <= '9'){\n      number_count++;\n\
    \    }\n  }\n  if(number_count > 3){\n    is_valid = false;\n  }\n  if(first_part.length\
    \ === 0 || (first_part[0] < 'a' || first_part[0] > 'z') && (first_part[0] < 'A'\
    \ || first_part[0] > 'Z')){\n    is_valid = false;\n  }\n  if(second_part !==\
    \ 'txt' && second_part !== 'exe' && second_part !== 'dll'){\n    is_valid = false;\n\
    \  }\n  if(file_name.split('.').length !== 2){\n    is_valid = false;\n  }\n \
    \ if(is_valid){\n    return 'Yes';\n  }\n  return 'No';\n}\n", "    // your code\
    \ here\n    var x = file_name.split(\".\");\n    var x1 = x[0].split(\"\");\n\
    \    if(x.length > 2){\n        return \"No\";\n    }\n    if(x1[0] !== x1[0].toUpperCase()\
    \ && x1[0] !== x1[0].toLowerCase()){\n        return \"No\";\n    }\n    if(x[1]\
    \ !== \"txt\" && x[1] !== \"exe\" && x[1] !== \"dll\"){\n        return \"No\"\
    ;\n    }\n    for(i=0; i<x1.length; i++){\n        if(x1[i] === \"0\" || x1[i]\
    \ === \"1\" || x1[i] === \"2\" || x1[i] === \"3\" || x1[i] === \"4\" || x1[i]\
    \ === \"5\" || x1[i] === \"6\" || x1[i] === \"7\" || x1[i] === \"8\" || x1[i]\
    \ === \"9\"){\n            return \"No\";\n        }\n    }\n    return \"Yes\"\
    ;\n}", "\tvar dot_index = file_name.indexOf('.');\n\tvar file_name_arr = file_name.split('.');\n\
    \tvar file_name_no_dot = file_name_arr[0];\n\tvar file_extension = file_name_arr[1];\n\
    \t\n\tvar re = /[0-9]/g;\n\tvar number_count = (file_name_no_dot.match(re)).length;\n\
    \t\n\tif (number_count > 3){\n\t\treturn 'No';\n\t}\n\t\n\tif (dot_index == -1){\n\
    \t\treturn 'No';\n\t}\n\t\n\tif (file_name_no_dot == ''){\n\t\treturn 'No';\n\t\
    }\n\t\n\tvar first_letter = file_name_no_dot[0];\n\tvar re_letter = /[a-zA-Z]/g;\n\
    \tvar file_name_letter_count = (file_name_no_dot.match(re_letter)).length;\n\t\
    \n\tif (file_name_letter_count == 0){\n\t\treturn 'No';\n\t}\n\t\n\tif (file_extension\
    \ != 'txt' && file_extension != 'exe' && file_extension != 'dll'){\n\t\treturn\
    \ 'No';\n\t}\n\t\n\treturn 'Yes';\n}\n", "    for(let i = 0; i < file_name.length;\
    \ i++){\n        if(file_name[i] >= 0 && file_name[i] <= 9){\n            return\
    \ \"No\";\n        }\n    }\n    for(let i = 0; i < file_name.length; i++){\n\
    \        if(file_name[i] == \".\"){\n            return \"Yes\";\n        }\n\
    \    }\n    if(file_name == \"\"){\n        return \"No\";\n    }\n    if(file_name[0]\
    \ == \"e\" || file_name[0] == \"E\"){\n        return \"Yes\";\n    }\n    if(file_name.slice(-4)\
    \ == \".txt\" || file_name.slice(-4) == \".exe\" || file_name.slice(-4) == \"\
    .dll\"){\n        return \"Yes\";\n    }\n    return \"No\";\n}\n", "    var dot_index\
    \ = file_name.indexOf('.');\n    var name_before_dot = file_name.substring(0,\
    \ dot_index);\n    var name_after_dot = file_name.substring(dot_index + 1);\n\
    \    if (count_digits(name_before_dot) <= 3 && \n        count_digits(name_after_dot)\
    \ == 0 &&\n        count_dots(file_name) == 1 &&\n        count_letters(name_before_dot)\
    \ > 0 &&\n        is_latin_letter(name_before_dot[0]) &&\n        name_after_dot\
    \ == 'txt' ||\n        name_after_dot == 'exe' ||\n        name_after_dot == 'dll'){\n\
    \        return 'Yes';\n    }\n    return 'No';\n}\n", "    if(file_name.match(/^[A-Za-z][A-Za-z0-9]*\\\
    .(txt|exe|dll)$/)){\n        return 'Yes';\n    }\n    return 'No';\n}\n", " \
    \   var exp1 = new RegExp(\"^[a-z|A-Z]+[0-9]{0,3}[.][txt|exe|dll]$\");\n    if(exp1.test(file_name)){\n\
    \        return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n}\n",
  "    if(file_name.match(/^[a-zA-Z][\\w]+\\.(txt|exe|dll)$/g) && file_name.match(/\\\
    d/g).length <= 3){\n        return \"Yes\";\n    }\n    return \"No\";\n}", " \
    \   var digits = \"1234567890\";\n    var allowed_extensions = [\"txt\", \"exe\"\
    , \"dll\"];\n    var filename_list = file_name.split(\".\");\n    if (filename_list.length\
    \ != 2) {\n        return \"No\";\n    }\n    var extension = filename_list[1];\n\
    \    if (extension != allowed_extensions[0] && extension != allowed_extensions[1]\
    \ && extension != allowed_extensions[2]) {\n        return \"No\";\n    }\n  \
    \  var no_of_digits = 0;\n    for (var i = 0; i < filename_list[0].length; i++)\
    \ {\n        if (digits.includes(filename_list[0][i])) {\n            no_of_digits++;\n\
    \        }\n    }\n    if (no_of_digits > 3) {\n        return \"No\";\n    }\n\
    \    if (!filename_list[0][0].match(/[a-z]/i)) {\n        return \"No\";\n   \
    \ }\n    return \"Yes\";\n}", "    // console.log(file_name)\n    let regex =\
    \ new RegExp('^[a-zA-Z]+[0-9]{0,3}.[txt|exe|dll]$');\n    if(regex.test(file_name)){\n\
    \        return 'Yes';\n    }\n    return 'No';\n}\n\nlet file_name = \"example.txt\"\
    ;", "    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example: print \"Hello world!\"\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    var file_name_valid = \"Yes\";\n    if (file_name.length>=7){\n\
    \        file_name_valid = \"No\";\n    }\n    var file_name_split = file_name.split(\"\
    .\");\n    if (file_name_split.length<=1){\n        file_name_valid = \"No\";\n\
    \    }\n    var file_name_count_digits = 0;\n    for (var i=0; i<file_name_split[0].length;\
    \ i++){\n        if ((file_name_split[0][i] >= \"0\") && (file_name_split[0][i]\
    \ <= \"9\")){\n            file_name_count_digits++;\n        }\n    }\n    if\
    \ (file_name_count_digits>3){\n        file_name_valid = \"No\";\n    }\n    if\
    \ ((file_name_split[1] != \"txt\") && (file_name_split[1] != \"exe\") && (file_name_split[1]\
    \ != \"dll\")){\n        file_name_valid = \"No\";\n    }\n    if ((file_name_split[0][0]\
    \ < \"A\") || (file_name_split[0][0] > \"z\")){\n        file_name_valid = \"\
    No\";\n    }\n    return file_name_valid;\n}\n", "  let check = 'No';\n  let check_1\
    \ = 0;\n  let check_2 = 0;\n  let check_3 = 0;\n  for (let i = 0; i < file_name.length;\
    \ i++) {\n    if (file_name[i] >= '0' && file_name[i] <= '9'){\n      check_1\
    \ += 1;\n    }\n    if (file_name[i] == '.'){\n      check_2 += 1;\n    }\n  \
    \  if (file_name[i] == 'txt' || file_name[i] == 'exe' || file_name[i] == 'dll'){\n\
    \      check_3 += 1;\n    }\n  }\n  if (check_1 < 4 && check_2 == 1 && check_3\
    \ == 1){\n    check = 'Yes';\n  }\n  return check;\n}\n", "    let max=0;\n  \
    \  let dot=false;\n    let valid_ext=[\"txt\", \"exe\", \"dll\"];\n    let ext_name=\"\
    \";\n    let name=\"\";\n    let index=0;\n    for(var i=0; i<file_name.length;\
    \ i++){\n        let ch=file_name[i];\n        if (ch==\".\"){\n            dot=true;\n\
    \            index=i;\n        }\n        if (ch>=\"0\" && ch<=\"9\"){\n     \
    \       max++;\n        }\n    }\n    if (max>3 || !dot){\n        return \"No\"\
    ;\n    }\n    name=file_name.substring(0, index);\n    ext_name=file_name.substring(index+1);\n\
    \    if (name==\"\" || (name[0]<\"a\" || name[0]>\"z\") && (name[0]<\"A\" || name[0]>\"\
    Z\")){\n        return \"No\";\n    }\n    if (valid_ext.indexOf(ext_name)==-1){\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\n\n", "  if (file_name.search(/[A-Za-z]\\\
    w*\\.(txt|exe|dll)/) === -1) {\n    return \"No\";\n  }\n  else {\n    return\
    \ \"Yes\";\n  }\n}\n", "    // Write your code here\n}\n\n", "\tvar valid_extensions\
    \ = ['txt', 'exe', 'dll'];\n\tvar file_name_parts = file_name.split('.');\n\t\
    var file_name_no_extension = file_name_parts[0];\n\tvar extension = file_name_parts[1];\n\
    \tvar digits_counter = 0;\n\tvar file_name_split = file_name_no_extension.split('');\n\
    \tvar first_char = file_name_split[0];\n\tvar is_valid = true;\n\tfor(var i =\
    \ 0; i < file_name_split.length; i++){\n\t\tif(file_name_split[i] >= '0' && file_name_split[i]\
    \ <= '9'){\n\t\t\tdigits_counter++;\n\t\t}\n\t}\n\tif(digits_counter > 3){\n\t\
    \tis_valid = false;\n\t}\n\tif(file_name_parts.length != 2){\n\t\tis_valid = false;\n\
    \t}\n\tif(file_name_no_extension.length == 0){\n\t\tis_valid = false;\n\t}\n\t\
    if(first_char < 'a' || first_char > 'z' && first_char < 'A' || first_char > 'Z'){\n\
    \t\tis_valid = false;\n\t}\n\tif(valid_extensions.indexOf(extension) == -1){\n\
    \t\tis_valid = false;\n\t}\n\tif(is_valid){\n\t\treturn 'Yes';\n\t}\n\telse{\n\
    \t\treturn 'No';\n\t}\n}\n", "    var result;\n    var count = 0;\n    var dot_count\
    \ = 0;\n    var has_dot = false;\n    for(var i = 0; i < file_name.length; i++){\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            count++;\n\
    \        }\n        if(file_name[i] == '.'){\n            dot_count++;\n     \
    \       has_dot = true;\n        }\n    }\n    if(count <= 3 && dot_count == 1\
    \ && has_dot){\n        result = \"Yes\";\n    }\n    else{\n        result =\
    \ \"No\";\n    }\n    return result;\n}", " \n    let dot = file_name.split('.')\n\
    \    let ext = dot[1]\n    let count = 0\n    let s = file_name.split('')\n  \
    \  for(let i=0; i<s.length; i++){\n        if(s[i] == '.'){\n            count++\n\
    \        }\n    }\n    let e = ext\n    let f = dot[0]\n    let num = 0\n    for(let\
    \ i=0; i<f.length; i++){\n        if(f[i] >= '0' && f[i] <= '9'){\n          \
    \  num ++\n        }\n    }\n    let alp = 0\n    for(let i=0; i<f.length; i++){\n\
    \        if(f[i] >= 'a' && f[i] <= 'z' || f[i] >= 'A' && f[i] <= 'Z'){\n     \
    \       alp++\n        }\n    }\n    if(count > 1 || count == 0){\n        return\
    \ 'No'\n    }\n    else if(num > 3){\n        return 'No'\n    }\n    else if(alp\
    \ == 0){\n        return 'No'\n    }\n    else if(e != 'txt' && e != 'exe' &&\
    \ e != 'dll'){\n        return 'No'\n    }\n    else{\n        return 'Yes'\n\
    \    }\n}", "    // check the digits\n    var digits = 0;\n    for (var i = 0;\
    \ i < file_name.length; i++){\n        if (file_name[i] >= \"0\" && file_name[i]\
    \ <= \"9\")\n            digits += 1;\n    }\n    if (digits > 3)\n        return\
    \ \"No\";\n    // check the dot\n    var dot = 0;\n    for (var i = 0; i < file_name.length;\
    \ i++){\n        if (file_name[i] == \".\")\n            dot += 1;\n    }\n  \
    \  if (dot != 1)\n        return \"No\";\n    // check the substring before the\
    \ dot\n    var before_dot = \"\";\n    for (var i = 0; i < file_name.length; i++){\n\
    \        if (file_name[i] == \".\")\n            break;\n        before_dot +=\
    \ file_name[i];\n    }\n    var char = before_dot[0];\n    if (char < \"A\" ||\
    \ char > \"Z\" && char < \"a\" || char > \"z\")\n        return \"No\";\n    //\
    \ check the substring after the dot\n    var after_dot = \"\";\n    for (var i\
    \ = file_name.length - 1; i >= 0; i--){\n        if (file_name[i] == \".\")\n\
    \            break;\n        after_dot += file_name[i];\n    }\n    after_dot\
    \ = after_dot.split(\"\").reverse().join(\"\");\n    if (after_dot != \"txt\"\
    \ && after_dot != \"exe\" && after_dot != \"dll\")\n        return \"No\";\n \
    \   return \"Yes\";\n}\n", "\tlet regExp = /[a-zA-Z]\\w*\\.(txt|exe|dll)/;\n\t\
    if(regExp.test(file_name)){\n\t\treturn \"Yes\";\n\t}else{\n\t\treturn \"No\"\
    ;\n\t}\n}\n", "  let dot_found = false;\n  let counter = 0;\n  let valid_extension\
    \ = false;\n  let valid_prefix = false;\n  for(let i = 0; i < file_name.length;\
    \ i++){\n    if(file_name[i] == '.'){\n      dot_found = true;\n      let extension\
    \ = file_name.substring(i+1);\n      if(extension == 'txt' || extension == 'exe'\
    \ || extension == 'dll'){\n        valid_extension = true;\n      }\n    }\n \
    \   if(file_name[i] >= '0' && file_name[i] <= '9'){\n      counter++;\n    }\n\
    \    if(counter > 3){\n      return \"No\";\n    }\n    if(!dot_found && (file_name[i]\
    \ >= 'a' && file_name[i] <= 'z')\n      || (file_name[i] >= 'A' && file_name[i]\
    \ <= 'Z')){\n      valid_prefix = true;\n    }\n  }\n  if(dot_found && valid_extension\
    \ && valid_prefix){\n    return \"Yes\";\n  }\n  return \"No\";\n}\n", "    var\
    \ cnt = 0;\n    var dot = 0;\n    var valid_string = true;\n    var valid_post\
    \ = false;\n    var substring = \"\";\n    for(var i = 0; i < file_name.length;\
    \ i++){\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n           \
    \ cnt++;\n        }\n        if(file_name[i] == '.'){\n            dot++;\n  \
    \      }\n        if(dot > 1 || cnt > 3){\n            return \"No\";\n      \
    \  }\n        if(file_name[i] == '.'){\n            valid_string = is_valid_string(substring);\n\
    \            valid_post = check_post(file_name.substring(i + 1));\n          \
    \  break;\n        }\n        substring += file_name[i];\n    }\n    if(dot !=\
    \ 1 || valid_string == false || valid_post == false){\n        return \"No\";\n\
    \    }\n    return \"Yes\";\n}\n", "  if (file_name.match(/^[a-zA-Z]+\\.(txt|exe|dll)$/))\
    \ {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n", "    let\
    \ str = file_name.match(/\\d/g) ? file_name.match(/\\d/g).length : 0;\n    if(str\
    \ > 3) return \"No\";\n    let re = /^[a-zA-Z]+\\.(txt|exe|dll)$/;\n    if(re.test(file_name)){\n\
    \        return \"Yes\";\n    }else{\n        return \"No\";\n    }\n}\nlet file_name\
    \ = \"example.txt\";", "    \n    // if(file_name.includes('.')){\n    //    \
    \ let extention = file_name.split('.')\n    //     console.log(extention)\n  \
    \  //     if(extention[1] === 'txt' || extention[1] === 'exe' || extention[1]\
    \ === 'dll'){\n    //         return 'Yes'\n    //     }\n    // }\n    // return\
    \ 'No'\n\n    if(file_name.includes('.')){\n        let extention = file_name.split('.')\n\
    \        console.log(extention)\n        if(extention[1] === 'txt' || extention[1]\
    \ === 'exe' || extention[1] === 'dll'){\n            if(extention[0].match(/\\\
    d/g) === null){\n                return 'Yes'\n            }\n        }\n    }\n\
    \    return 'No'\n}\n", "    let check_digits = 0;\n    let dot_pos = file_name.indexOf('.');\n\
    \    let check_dot = false;\n    for(let i = 0; i < file_name.length; i++){\n\
    \        if(!(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i] >= 'A'\
    \ && file_name[i] <= 'Z')){\n            if(file_name[i] == '.'){\n          \
    \      if(check_dot){\n                    return \"No\";\n                }\n\
    \                check_dot = true;\n            }else if(file_name[i] >= '0' &&\
    \ file_name[i] <= '9'){\n                check_digits++;\n            }else{\n\
    \                return \"No\";\n            }\n        }\n    }\n    if(check_digits\
    \ > 3){\n        return \"No\";\n    }\n    if(!check_dot){\n        return \"\
    No\";\n    }\n    if(file_name.substring(dot_pos + 1) != \"txt\" && file_name.substring(dot_pos\
    \ + 1) != \"exe\" && file_name.substring(dot_pos + 1) != \"dll\"){\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\n", "    // your code here\n}\n", "\t\
    var split_str = file_name.split(\".\");\n\tvar digits = \"0123456789\";\n\tvar\
    \ digit_count = 0;\n\tvar sub_str = split_str[0];\n\tfor(var i = 0; i < sub_str.length;\
    \ i++){\n\t\tfor(var j = 0; j < digits.length; j++){\n\t\t\tif(sub_str[i] == digits[j]){\n\
    \t\t\t\tdigit_count = digit_count + 1;\n\t\t\t}\n\t\t}\n\t}\n\tif(digit_count\
    \ > 3){\n\t\treturn \"No\";\n\t}\n\tif(split_str.length > 2){\n\t\treturn \"No\"\
    ;\n\t}\n\tif(split_str[1] != \"txt\" && split_str[1] != \"exe\" && split_str[1]\
    \ != \"dll\"){\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}", "  var dot= file_name.indexOf(\"\
    .\");\n  var first_part= file_name.substring(0,dot);\n  var second_part= file_name.substring(dot+1);\n\
    \  var number_count= 0;\n  for(var i=0; i<first_part.length; i++){\n    if(first_part[i]<=\"\
    9\" && first_part[i]>=\"0\"){\n      number_count++;\n    }\n  }\n  if(number_count>3){\n\
    \    return \"No\";\n  }\n  if(file_name.indexOf(\".\")==-1){\n    return \"No\"\
    ;\n  }\n  if(first_part.length==0){\n    return \"No\";\n  }\n  if(first_part[0]<='z'\
    \ && first_part[0]>='a' || first_part[0]<='Z' && first_part[0]>='A'){\n    if(second_part=='txt'\
    \ || second_part=='exe' || second_part=='dll'){\n      return \"Yes\";\n    }\n\
    \  }\n  return \"No\";\n}\n", "\tvar pattern = /^[a-zA-Z][a-zA-Z0-9]{1,3}\\.(txt|exe|dll)$/;\n\
    \treturn pattern.test(file_name) ? \"Yes\" : \"No\";\n}", "    if(check_digit(file_name)==\"\
    No\"){\n        return \"No\";\n    }\n    if(check_dot(file_name)==\"No\"){\n\
    \        return \"No\";\n    }\n    if(check_substring(file_name)==\"No\"){\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}", "    if(file_name.match(/[^\\\
    .]+(\\.)(txt|exe|dll)/g) != null)\n        return 'Yes';\n    else\n        return\
    \ 'No';\n}\n", "  if(/^([a-z]|[A-Z])[\\w]*(\\.(exe|txt|dll))$/.test(file_name))\
    \ return \"Yes\";\n  return \"No\";\n}\n\nmodule.exports = {\n  file_name_check\n\
    }", "    //YOUR CODE HERE\n}", "  var substrings = file_name.split('.');\n  if(substrings.length\
    \ != 2){\n    return \"No\";\n  }\n  var name = substrings[0];\n  var extension\
    \ = substrings[1];\n  if(/[^0-9]/.test(name) && \n     name.match(/[0-9]/g).length\
    \ <= 3 &&\n     /^[a-zA-Z]/.test(name) &&\n     ['txt', 'exe', 'dll'].indexOf(extension)\
    \ != -1){\n    return \"Yes\";\n  }\n  return \"No\";\n}\n", "    let digits =\
    \ 0;\n    let got_dot = false;\n    let alpha_regex = /[a-zA-Z]/;\n    let end_regex\
    \ = /\\.(txt|exe|dll)$/;\n    for(let i = 0; i < file_name.length; i++){\n   \
    \     if(file_name[i] >= '0' && file_name[i] <= '9'){\n            digits++;\n\
    \        }\n        if(file_name[i] == '.'){\n            got_dot = true;\n  \
    \      }\n    }\n    if(digits > 3 || !got_dot || !alpha_regex.test(file_name[0])\
    \ || !end_regex.test(file_name)){\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\n\n", "    // Break file name into two parts\n    let sub_parts = file_name.split('.');\n\
    \    // Check for 3 digits in the file name\n    let has_3_digits = sub_parts[0].match(/[0-9]/g).length\
    \ <= 3;\n    // Check that the file's name contains exactly one dot\n    let has_1_dot\
    \ = sub_parts.length === 2;\n    // Check that the substring before the dot should\
    \ not be empty\n    let not_empty = sub_parts[0] !== '';\n    // Check that the\
    \ substring before the dot should start with a letter\n    let starts_with_letter\
    \ = /^[a-zA-Z]/g.test(sub_parts[0]);\n    // Check that the substring after the\
    \ dot should be one of these: ['txt', 'exe', 'dll']\n    let valid_extensions\
    \ = ['txt', 'exe', 'dll'].includes(sub_parts[1]);\n    return has_3_digits &&\
    \ has_1_dot && not_empty && starts_with_letter && valid_extensions ? 'Yes' : 'No';\n\
    }\n", "\n}\n", "\tvar dot_pos = file_name.indexOf('.');\n\tvar prefix = file_name.substring(0,\
    \ dot_pos);\n\tvar suffix = file_name.substring(dot_pos + 1);\n\tvar reg = /^[a-zA-Z]+[a-zA-Z0-9]*$/;\n\
    \treturn reg.test(prefix) && (suffix == 'txt' || suffix == 'exe' || suffix ==\
    \ 'dll') && \n\t\t(file_name.match(/[0-9]/g) == null || file_name.match(/[0-9]/g).length\
    \ <= 3) ? 'Yes' : 'No';\n}\n", "    // Your code here\n}\n\n", "\tif (file_name.length\
    \ > 8){\n\t\treturn \"No\";\n\t}\n\tconst re = /[0-9]/g;\n\tconst re3digit = /[0-9]{3}/g;\n\
    \tconst re1dot = /[.]/g;\n\tconst re1letter = /[a-z]/g;\n\tconst re3letter = /[a-z]{3}/g;\n\
    \tconst file_type = ['txt', 'exe', 'dll'];\n\t\n\tconst [file_name_arr, file_extension_arr]\
    \ = file_name.split('.');\n\t// console.log(file_name_arr, file_extension_arr);\n\
    \tif (file_name_arr.length === 0){\n\t\treturn \"No\";\n\t}\n\n\tif (file_name_arr.match(re3digit)\
    \ !== null){\n\t\treturn \"No\";\n\t}\n\n\tif (file_name.match(re1dot).length\
    \ !== 1){\n\t\treturn \"No\";\n\t}\n\n\tif (file_name_arr.match(re1letter) ===\
    \ null){\n\t\treturn \"No\";\n\t}\n\n\tif (file_type.indexOf(file_extension_arr)\
    \ === -1){\n\t\treturn \"No\";\n\t}\n\n\treturn \"Yes\";\n\n}\n", "    let numbers\
    \ = file_name.match(/\\d/g);\n    let letters = file_name.match(/[a-zA-Z]/g);\n\
    \    let has_dot = file_name.includes('.');\n    let extensions = ['txt', 'exe',\
    \ 'dll'];\n    let extension = file_name.split('.')[1];\n    return ((numbers.length\
    \ < 4) && has_dot && (letters.length > 0) && (extensions.includes(extension)))\
    \ ? \"Yes\" : \"No\";\n}\n", "    // Your code here\n    // Hint: use string's\
    \ method: split(), charAt(), match()\n    var file = file_name.split(\".\");\n\
    \    if(file.length != 2){\n        return \"No\";\n    }else{\n        var fileType\
    \ = file[1];\n        if(fileType != \"txt\" && fileType != \"exe\" && fileType\
    \ != \"dll\"){\n            return \"No\";\n        }else{\n            var number\
    \ = file[0].match(/\\d/g);\n            if(number == null){\n                return\
    \ \"Yes\";\n            }else{\n                if(number.length > 3){\n     \
    \               return \"No\";\n                }else{\n                    return\
    \ \"Yes\";\n                }\n            }\n        }\n    }\n}", "    // Check\
    \ for the length of the string, it should be greater than 5.\n    if(file_name.length\
    \ <= 5){\n        return \"No\";\n    }\n    // Check if the string contains exactly\
    \ one dot.\n    let split_string = file_name.split(\".\");\n    if(split_string.length\
    \ !== 2){\n        return \"No\";\n    }\n    // Check if the first part of the\
    \ string contains only numbers and alphabets.\n    let check_initial_string =\
    \ split_string[0];\n    let check_number = 0;\n    let check_letter = 0;\n   \
    \ for(let i = 0; i < check_initial_string.length; i++){\n        if(check_initial_string[i]\
    \ >= '0' && check_initial_string[i] <= '9'){\n            check_number++;\n  \
    \      }\n        else if((check_initial_string[i] >= 'a' && check_initial_string[i]\
    \ <= 'z') || \n        (check_initial_string[i] >= 'A' && check_initial_string[i]\
    \ <= 'Z')){\n            check_letter++;\n        }\n    }\n    if(check_number\
    \ > 3 || check_letter === 0){\n        return \"No\";\n    }\n    // Check if\
    \ the second part of the string is either 'txt', 'exe' or 'dll'.\n    let check_second_string\
    \ = split_string[1];\n    if(check_second_string === 'txt' || check_second_string\
    \ === 'exe' || \n    check_second_string === 'dll'){\n        return \"Yes\";\n\
    \    }\n    else{\n        return \"No\";\n    }\n}", "\n}", "    var count =\
    \ 0;\n    var regex = /^[a-zA-Z](\\w|\\.)+\\.(txt|exe|dll)$/;\n    for(var i =\
    \ 0; i < file_name.length; i++){\n        if(file_name[i] >= 0 && file_name[i]\
    \ <= 9){\n            count++;\n        }\n    }\n    if(count > 3){\n       \
    \ return \"No\";\n    }\n    if(!regex.test(file_name)){\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}", "  // Write your code here\n}\n", "    // check\
    \ if the file name contains any digit more than 3 times\n    if (file_name.match(/\\\
    d{4,}/)) return \"No\";\n    // check if there is only one dot in the file name\n\
    \    if (file_name.match(/\\./g).length > 1) return \"No\";\n    // check if the\
    \ substring before the dot is not empty and starts with a latin alphapet\n   \
    \ if (file_name.match(/\\w+\\./).length != 1 || !file_name.match(/\\w+\\./)) return\
    \ \"No\";\n    // check if the substring after the dot is 'txt', 'exe', or 'dll'\n\
    \    if (!(file_name.match(/\\.(txt|exe|dll)$/))) return \"No\";\n    return \"\
    Yes\";\n}", "  if (file_name.match(/[^a-zA-Z0-9.]/g) || (file_name.match(/[0-9]/g)\
    \ || []).length > 3\n    || file_name.match(/\\./g).length !== 1 || !file_name.substring(0,\
    \ file_name.indexOf('.')).match(/[a-zA-Z]/g)\n    || !['txt', 'exe', 'dll'].includes(file_name.substring(file_name.indexOf('.')\
    \ + 1)))\n    return 'No';\n  return 'Yes';\n}\n", "\tvar fname = file_name.split(\"\
    .\");\n\tvar bs = fname[0];\n\tvar ext = fname[1];\n\tvar count = 0;\n\tfor(var\
    \ i = 0; i < bs.length; i++){\n\t\tif(bs[i] >= '0' && bs[i] <= '9'){\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\tif(bs[0] >= 'a' && bs[0] <= 'z' || bs[0] >= 'A' && bs[0] <= 'Z'){\n\
    \t\tif(count <= 3){\n\t\t\tif(ext == 'txt' || ext == 'exe' || ext == 'dll'){\n\
    \t\t\t\treturn \"Yes\";\n\t\t\t}\n\t\t}\n\t}\n\treturn \"No\";\n}\n", "    let\
    \ count = 0;\n    let file_name_arr = file_name.split(\".\");\n    if (file_name_arr.length\
    \ != 2) return \"No\";\n    if (!/^[a-zA-Z]/.test(file_name_arr[0])) return \"\
    No\";\n    if (!/^[txt|exe|dll]$/.test(file_name_arr[1])) return \"No\";\n   \
    \ for (let i = 0; i < file_name_arr[0].length; i++){\n        if (/^[0-9]$/.test(file_name_arr[0][i]))\
    \ count++;\n    }\n    if (count > 3) return \"No\";\n    return \"Yes\";\n}\n",
  "    var after_dot = file_name.split('.')[1];\n    var pattern = /[0-9]/;\n    var\
    \ result = file_name.match(pattern);\n    var count = 0;\n    for(var i=0; i<result.length;\
    \ i++){\n        count++;\n    }\n    if(count<4 && file_name.indexOf('.')>0 &&\
    \ (after_dot == 'txt' || after_dot == 'exe' || after_dot == 'dll')){\n       \
    \ return \"Yes\";\n    }\n    else{\n        return \"No\";\n    }\n\n}\n", "\t\
    if (file_name.includes(\".\")){\n\t\tif (file_name.match(/[a-zA-Z]/)){\n\t\t\t\
    if (file_name.match(/[0-9]/g).length < 3){\n\t\t\t\tif (file_name.split(\".\"\
    )[1] === \"txt\" || file_name.split(\".\")[1] === \"exe\" || file_name.split(\"\
    .\")[1] === \"dll\"){\n\t\t\t\t\treturn \"Yes\";\n\t\t\t\t} else {\n\t\t\t\t\t\
    return \"No\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\
    \t} else {\n\t\t\treturn \"No\";\n\t\t}\n\t} else {\n\t\treturn \"No\";\n\t}\n\
    }", "\t//YOUR CODE GOES HERE\n}", "    // TODO: write your code here\n}\n", "\n\
    }\n", "\tif(file_name[0]==0||file_name[0]==1||file_name[0]==2||file_name[0]==3||file_name[0]==4||file_name[0]==5||file_name[0]==6||file_name[0]==7||file_name[0]==8||file_name[0]==9){\n\
    \t\treturn \"No\";\n\t}\n\tif(file_name.indexOf(\".\")<0){\n\t\treturn \"No\"\
    ;\n\t}\n\tvar file_name1=file_name.split(\".\");\n\tif(file_name1[0]==\"\"){\n\
    \t\treturn \"No\";\n\t}\n\tif(file_name1[1]!=\"txt\"&&file_name1[1]!=\"exe\"&&file_name1[1]!=\"\
    dll\"){\n\t\treturn \"No\";\n\t}\n\tvar count=0;\n\tfor(var i=0;i<file_name.length;i++){\n\
    \t\tif(file_name[i]==0||file_name[i]==1||file_name[i]==2||file_name[i]==3||file_name[i]==4||file_name[i]==5||file_name[i]==6||file_name[i]==7||file_name[i]==8||file_name[i]==9){\n\
    \t\t\tcount=count+1;\n\t\t}\n\t}\n\tif(count>3){\n\t\treturn \"No\";\n\t}\n\t\
    return \"Yes\";\n}\n", "    var digits = 0;\n    var dot_present = false;\n  \
    \  var extension = \"\";\n    var valid_extension = ['txt', 'exe', 'dll'];\n \
    \   var string_before_dot = \"\";\n    var letter_present = false;\n    var letter_alphabet\
    \ = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',\
    \ 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    for(var i = 0;\
    \ i < file_name.length; i++){\n        if(file_name[i] == '.'){\n            dot_present\
    \ = true;\n            string_before_dot = file_name.substring(0, i);\n      \
    \      extension = file_name.substring(i+1, file_name.length);\n        }\n  \
    \      if(letter_alphabet.indexOf(file_name[i]) != -1){\n            letter_present\
    \ = true;\n        }\n        if(file_name[i] >= '0' && file_name[i] <= '9'){\n\
    \            digits++;\n        }\n    }\n    if(digits > 3){\n        return\
    \ \"No\";\n    }\n    if(dot_present == false){\n        return \"No\";\n    }\n\
    \    if(letter_present == false){\n        return \"No\";\n    }\n    if(valid_extension.indexOf(extension)\
    \ == -1){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "    // TODO:\
    \ Your code here!\n    if(file_name.search(/^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z]{3}$/)\
    \ === -1) {\n        return \"No\";\n    }\n    else if(file_name.search(/^[a-zA-Z][a-zA-Z0-9]*[.][a-zA-Z]{3}$/)\
    \ !== -1) {\n        return \"Yes\";\n    }\n}\n", "\tlet first_part = file_name.split('.')[0];\n\
    \tlet second_part = file_name.split('.')[1];\n\t\n\tlet res = \"Yes\";\n\tif (file_name.split('.').length\
    \ != 2){\n\t\tres = \"No\";\n\t}\n\telse if(!/^[a-zA-Z]/.test(first_part)){\n\t\
    \tres = \"No\";\n\t}\n\telse if(!(second_part === \"txt\" || second_part === \"\
    exe\" || second_part === \"dll\")){\n\t\tres = \"No\";\n\t}\n\telse if(/\\d/.test(first_part)\
    \ && /\\d/.test(first_part)){\n\t\tres = \"No\";\n\t}\n\treturn res;\n}\n", " \
    \   // your code here\n    if(file_name.split(\"\").length < 5) {\n        return\
    \ 'No';\n    }\n\n    let dotPos = file_name.lastIndexOf('.');\n    let fileExtension\
    \ = file_name.substring(dotPos+1);\n    let fileName = file_name.substring(0,\
    \ dotPos);\n\n    if(fileName.match(/[a-zA-Z]/g) === null) {\n        return 'No';\n\
    \    }\n\n    if(fileName.match(/[0-9]/g) !== null && fileName.match(/[0-9]/g).length\
    \ > 3) {\n        return 'No';\n    }\n\n    if(fileExtension !== 'txt' && fileExtension\
    \ !== 'exe' && fileExtension !== 'dll') {\n        return 'No';\n    }\n\n   \
    \ return 'Yes';\n}\n", "  let file_name_result = \"\"\n  let file_name_length\
    \ = file_name.length\n  let file_name_split = file_name.split(\".\")\n  let file_name_char\
    \ = file_name.split(\"\")\n  let file_name_char_slice = file_name_char.slice(0,file_name_split[0].length)\n\
    \  let file_name_char_slice_length = file_name_char_slice.length\n  let file_name_num\
    \ = file_name_char_slice.filter(function(element){\n    return element.match(/[0-9]/)\n\
    \  })\n  let file_name_num_length = file_name_num.length\n  let file_name_letter\
    \ = file_name_char_slice.filter(function(element){\n    return element.match(/[a-zA-Z]/)\n\
    \  })\n  let file_name_letter_length = file_name_letter.length\n  let file_name_slice\
    \ = file_name_split[0].slice(0,1)\n  let file_name_dot = file_name.match(/\\./g)\n\
    \  let file_name_dot_length = file_name_dot.length\n  if(file_name_num_length\
    \ > 3){\n    file_name_result = \"No\"\n  }\n  else if(file_name_dot_length >\
    \ 1){\n    file_name_result = \"No\"\n  }\n  else if(file_name_slice.match(/[a-zA-Z]/)\
    \ == null){\n    file_name_result = \"No\"\n  }\n  else if(file_name_split[1]\
    \ != \"txt\" && file_name_split[1] != \"exe\" && file_name_split[1] != \"dll\"\
    ){\n    file_name_result = \"No\"\n  }\n  else{\n    file_name_result = \"Yes\"\
    \n  }\n  return file_name_result\n}\n", "    let dot = file_name.indexOf('.');\n\
    \    let ext = file_name.substring(dot+1);\n    let before = file_name.substring(0,\
    \ dot);\n    if (file_name.length - before.length - ext.length !== 1) return \"\
    No\";\n    if (before.search(/\\d/g) > 3) return \"No\";\n    if (before[0].search(/[A-Za-z]/g)\
    \ !== 0) return \"No\";\n    if (ext !== \"txt\" && ext !== \"exe\" && ext !==\
    \ \"dll\") return \"No\";\n    return \"Yes\";\n}\n", "\tvar name_arr = file_name.split(\"\
    .\");\n\tconsole.log(name_arr);\n\tvar number_check = name_arr[0].match(/\\d/g);\n\
    \tconsole.log(number_check);\n\tif(number_check !== null && number_check.length\
    \ > 3){\n\t\treturn \"No\";\n\t}\n\telse if(number_check === null){\n\t\treturn\
    \ \"No\";\n\t}\n\telse if(name_arr.length !== 2){\n\t\treturn \"No\";\n\t}\n\t\
    else if(name_arr[0].match(/[a-z]/i) !== name_arr[0][0]){\n\t\treturn \"No\";\n\
    \t}\n\telse if(name_arr[1] !== \"txt\" && name_arr[1] !== \"exe\" && name_arr[1]\
    \ !== \"dll\"){\n\t\treturn \"No\";\n\t}\n\telse{\n\t\treturn \"Yes\";\n\t}\n\
    }\n", "    var split_file_name = file_name.split(\".\")\n    var digit_counter\
    \ = 0\n    for (var i = 0; i < split_file_name[0].length; i++){\n        if (split_file_name[0][i]\
    \ >= '0' && split_file_name[0][i] <= '9'){\n            digit_counter += 1\n \
    \       }\n    }\n    if (digit_counter > 3){\n        return \"No\"\n    } else\
    \ if (split_file_name.length !== 2){\n        return \"No\"\n    } else if (split_file_name[0][0]\
    \ < 'a' || split_file_name[0][0] > 'z'){\n        return \"No\"\n    } else if\
    \ (split_file_name[1] !== \"txt\" && split_file_name[1] !== \"exe\" && split_file_name[1]\
    \ !== \"dll\"){\n        return \"No\"\n    } else {\n        return \"Yes\"\n\
    \    }\n}\n", "\tif(typeof file_name !== 'string')\n\t\treturn false;\n\tvar file_name_arr\
    \ = file_name.split('.');\n\tif(file_name_arr.length != 2)\n\t\treturn false;\n\
    \tif(file_name_arr[0].match(/\\d+/g) && file_name_arr[0].match(/\\d+/g).length\
    \ > 3)\n\t\treturn false;\n\tif(!file_name_arr[0].match(/^[a-zA-Z]/))\n\t\treturn\
    \ false;\n\tif(file_name_arr[1] != 'txt' && file_name_arr[1] != 'exe' && file_name_arr[1]\
    \ != 'dll')\n\t\treturn false;\n\treturn true;\n}\n", "    var res;\n    if(/^[a-zA-Z]\\\
    w{0,29}\\.txt$|^[a-zA-Z]\\w{0,29}\\.exe$|^[a-zA-Z]\\w{0,29}\\.dll$/.test(file_name)){\n\
    \        res = \"Yes\";\n    }\n    else{\n        res = \"No\";\n    }\n    return\
    \ res;\n}\n", "    let re = /^[a-zA-Z]{1}[\\w]{1,2}\\.exe$|^[a-zA-Z]{1}[\\w]{1,2}\\\
    .txt$|^[a-zA-Z]{1}[\\w]{1,2}\\.dll$/g;\n    if(re.test(file_name)){\n        return\
    \ \"Yes\";\n    }\n    return \"No\";\n}\n", "    let result = 'Yes';\n    const\
    \ reg = /^[a-zA-Z]{1}([a-zA-Z0-9]{0,}[.]{1}[a-zA-Z0-9]{3}){1}$/;\n    if(!reg.test(file_name)){\n\
    \        result = 'No';\n    }\n    return result;\n}\n", "\treturn /^([a-z]{1,}[\\\
    d]{0,3})\\.(txt|exe|dll)$/i.test(file_name) ? \"Yes\" : \"No\";\n}\n", "\tvar\
    \ count_num = 0;\n\tvar count_dot = 0;\n\tfor(var i = 0; i < file_name.length;\
    \ i++){\n\t\tif(file_name[i] >= '0' && file_name[i] <= '9'){\n\t\t\tcount_num++;\n\
    \t\t}else if(file_name[i] == '.'){\n\t\t\tcount_dot++;\n\t\t}\n\t}\n\tif(count_num\
    \ > 3 || count_dot != 1){\n\t\treturn \"No\";\n\t}\n\t//split the file_name\n\t\
    var substr1 = file_name.substring(0, file_name.indexOf('.'));\n\tvar substr2 =\
    \ file_name.substring(file_name.indexOf('.') + 1);\n\tif(substr1[0] < 'a' || substr1[0]\
    \ > 'z' || substr1.length == 0){\n\t\treturn \"No\";\n\t}\n\tif(substr2 != 'txt'\
    \ && substr2 != 'exe' && substr2 != 'dll'){\n\t\treturn \"No\";\n\t}\n\treturn\
    \ \"Yes\";\n}\n", "\tvar valid_file_names = ['txt', 'exe', 'dll'];\n\tvar file_name_pieces\
    \ = file_name.split('.');\n\tif (file_name_pieces.length != 2) {\n\t\treturn \"\
    No\";\n\t}\n\tvar before_dot = file_name_pieces[0];\n\tvar after_dot = file_name_pieces[1];\n\
    \tif (valid_file_names.indexOf(after_dot) == -1) {\n\t\treturn \"No\";\n\t}\n\t\
    var count = 0;\n\tfor (var i = 0; i < before_dot.length; i++) {\n\t\tif (before_dot[i]\
    \ >= '0' && before_dot[i] <= '9') {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\tif (count\
    \ > 3) {\n\t\treturn \"No\";\n\t}\n\tif (before_dot.length == 0) {\n\t\treturn\
    \ \"No\";\n\t}\n\tif (before_dot[0] < 'a' || before_dot[0] > 'z') {\n\t\tif (before_dot[0]\
    \ < 'A' || before_dot[0] > 'Z') {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\treturn\
    \ \"Yes\";\n}\n", "\t//find dot\n\tvar dot_index = file_name.indexOf('.');\n\t\
    if (dot_index < 0) return \"No\";\n\t//split substring before dot and after dot\n\
    \tvar before_dot = file_name.substring(0, dot_index);\n\tvar after_dot = file_name.substring(dot_index+1);\n\
    \tvar count = 0;\n\t//count number of digits before dot\n\tfor (var i = 0; i <\
    \ before_dot.length; i++){\n\t\tif(before_dot[i] >= '0' && before_dot[i] <= '9')\
    \ count++;\n\t}\n\t//if more than 3 digits\n\tif (count > 3) return \"No\";\n\t\
    //if dot is the last one\n\tif (after_dot.length == 0) return \"No\";\n\t//if\
    \ substring after dot is not in ['txt', 'exe', 'dll']\n\tif (after_dot !== 'txt'\
    \ && after_dot !== 'exe' && after_dot !== 'dll') return \"No\";\n\t//return \"\
    Yes\" if all above requirements are met\n\treturn \"Yes\";\n}\n", "\t//YOUR CODE\
    \ GOES HERE\n}", "    var r = new RegExp(/^([a-zA-Z]+)([0-9]*)(\\.[a-z]{3})$/);\n\
    \    var cnt = 0;\n    for(var i = 0; i < file_name.length; i++){\n        if(file_name[i]\
    \ == '.'){\n            if(i == 0 || i == file_name.length - 1)return \"No\";\n\
    \            else{\n                if(file_name.substring(i + 1) != \"txt\" &&\
    \ file_name.substring(i + 1) != \"exe\" && file_name.substring(i + 1) != \"dll\"\
    )return \"No\";\n            }\n        }\n        if(file_name[i] >= '0' && file_name[i]\
    \ <= '9')cnt++;\n    }\n    if(cnt > 3)return \"No\";\n    if(r.test(file_name))return\
    \ \"Yes\";\n    return \"No\";\n}\n", "\tvar i = 0;\n\tvar len = file_name.length;\n\
    \tvar dot_count = 0;\n\tvar digit_count = 0;\n\tvar isValid = false;\n\tvar extension\
    \ = '';\n\tvar valid_extensions = ['txt', 'exe', 'dll'];\n\tvar isValidExtension\
    \ = false;\n\twhile(i < len){\n\t\tif(file_name[i] === '.'){\n\t\t\tdot_count\
    \ += 1;\n\t\t\ti += 1;\n\t\t\twhile(i < len){\n\t\t\t\textension += file_name[i];\n\
    \t\t\t\ti += 1;\n\t\t\t}\n\t\t\tif(extension === valid_extensions[0] || extension\
    \ === valid_extensions[1] || extension === valid_extensions[2]){\n\t\t\t\tisValidExtension\
    \ = true;\n\t\t\t}\n\t\t}\n\t\tif(file_name[i] >= '0' && file_name[i] <= '9'){\n\
    \t\t\tdigit_count += 1;\n\t\t}\n\t\ti += 1;\n\t}\n\tif(dot_count === 1 && digit_count\
    \ <= 3 && (file_name[0] >= 'a' && file_name[0] <= 'z' || file_name[0] >= 'A' &&\
    \ file_name[0] <= 'Z') && isValidExtension){\n\t\tisValid = true;\n\t}\n\tif(isValid){\n\
    \t\treturn 'Yes';\n\t}else{\n\t\treturn 'No';\n\t}\n}", "\n}\n", "\tvar arr =\
    \ file_name.split(\".\");\n\tif(arr.length !== 2)\n\t\treturn \"No\";\n\tif(!(arr[1]\
    \ === \"txt\" || arr[1] === \"exe\" || arr[1] === \"dll\"))\n\t\treturn \"No\"\
    ;\n\tvar arr2 = arr[0].split(\"\");\n\tvar dot_count = 0;\n\tvar digit_count =\
    \ 0;\n\tfor(var i = 0; i < arr2.length; i++){\n\t\tif(!((arr2[i] >= '0' && arr2[i]\
    \ <= '9') || (arr2[i] >= 'a' && arr2[i] <= 'z') || (arr2[i] >= 'A' && arr2[i]\
    \ <= 'Z')))\n\t\t\treturn \"No\";\n\t\tif(arr2[i] >= '0' && arr2[i] <= '9')\n\t\
    \t\tdigit_count += 1;\n\t\tif(arr2[i] === '.')\n\t\t\tdot_count += 1;\n\t}\n\t\
    if(dot_count > 1 || digit_count > 3)\n\t\treturn \"No\";\n\treturn \"Yes\";\n}",
  "    return 'No';\n}\n", "    // Your code\n    return file_name;\n}\n", "    //\
    \ write your code here\n    if(file_name.match(/^[a-zA-Z][a-zA-Z0-9]*\\.txt$|^[a-zA-Z][a-zA-Z0-9]*\\\
    .exe$|^[a-zA-Z][a-zA-Z0-9]*\\.dll$/)){\n        return \"Yes\";\n    }else{\n\
    \        return \"No\";\n    }\n}\n\n", "    return /^[a-zA-Z]\\w{1,12}\\.txt|exe|dll$/.test(file_name)\
    \ ? \"Yes\" : \"No\";\n}\n", "    if( /^[a-zA-Z]\\d{0,3}\\.txt$|^[a-zA-Z]\\d{0,3}\\\
    .exe$|^[a-zA-Z]\\d{0,3}\\.dll$/.test(file_name) )\n        return \"Yes\";\n \
    \   else\n        return \"No\";\n}\n", "  // A regular expression to match all\
    \ digits (0-9). \n  // It is created using the default constructor of the RegExp\
    \ class.\n  // This expression is then converted to a string, because the replace\
    \ method only accepts strings.\n  var digits = String(/\\d/g);\n  // A regular\
    \ expression to match all digits (0-9). \n  // It is created using the literal\
    \ constructor of the RegExp class.\n  // The literal constructor requires that\
    \ all backslashes '\\' in the expression are escaped.\n  // But the RegExp class\
    \ itself has to be escaped too, because it is a reserved word.\n  // This expression\
    \ is then converted to a string, because the replace method only accepts strings.\n\
    \  var digits = String(/\\\\d/g);\n  // A regular expression to match all digits\
    \ (0-9). \n  // It is created using the literal constructor of the RegExp class.\n\
    \  // The literal constructor requires that all backslashes '\\' in the expression\
    \ are escaped.\n  // But the RegExp class itself has to be escaped too, because\
    \ it is a reserved word.\n  // This expression is then converted to a string,\
    \ because the replace method only accepts strings.\n  var digits = String(/\\\\\
    d/g);\n  // The substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll']\n  // A regular expression to match any of these strings.\n  // It is\
    \ created using the literal constructor of the RegExp class.\n  // The literal\
    \ constructor requires that all backslashes '\\' in the expression are escaped.\n\
    \  // But the RegExp class itself has to be escaped too, because it is a reserved\
    \ word.\n  // This expression is then converted to a string, because the replace\
    \ method only accepts strings.\n  var extensions = String(/txt|exe|dll/g);\n \
    \ // The substring before the dot should not be empty, and it starts with a letter\
    \ from \n  // the latin alphapet ('a'-'z' and 'A'-'Z').\n  // A regular expression\
    \ to match any string which starts with a letter from \n  // the latin alphapet\
    \ ('a'-'z' and 'A'-'Z').\n  // It is created using the literal constructor of\
    \ the RegExp class.\n", "    let num_count = 0;\n    let dot_count = 0;\n    let\
    \ has_alphabet = false;\n    for(let i = 0; i < file_name.length; i++){\n    \
    \    if(file_name[i] >= '0' && file_name[i] <= '9'){\n            num_count +=\
    \ 1;\n        }\n        if(file_name[i] == '.'){\n            dot_count += 1;\n\
    \        }\n        if((file_name[i] >= 'a' && file_name[i] <= 'z') || (file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z')){\n            has_alphabet = true;\n       \
    \ }\n    }\n    if(num_count > 3 || dot_count != 1 || !has_alphabet){\n      \
    \  return \"No\";\n    }\n    let extension = file_name.split('.')[1];\n    if(extension\
    \ != 'txt' && extension != 'exe' && extension != 'dll'){\n        return \"No\"\
    ;\n    }\n    return \"Yes\";\n}", "  let num = file_name.match(/\\d/g);\n  if(num\
    \ != null && num.length > 3){\n    return \"No\";\n  }\n  if(file_name.split(\"\
    .\").length != 2){\n    return \"No\";\n  }\n  if(!(file_name.split(\".\")[0].match(/^[a-zA-Z]+$/))){\n\
    \    return \"No\";\n  }\n  if(!([\"txt\", \"exe\", \"dll\"].includes(file_name.split(\"\
    .\")[1]))){\n    return \"No\";\n  }\n  return \"Yes\";\n}\n", "    var dot =\
    \ false, number_of_digits = 0, valid_files = ['txt', 'exe', 'dll'];\n    for(let\
    \ i = 0; i < file_name.length; i++){\n        if(file_name[i] == '.'){\n     \
    \       dot = true;\n            continue;\n        }\n        if(!dot && file_name[i]\
    \ >= '0' && file_name[i] <= '9'){\n            number_of_digits++;\n        }\n\
    \    }\n    if(dot && valid_files.includes(file_name.split('.')[1]) \n       \
    \ && file_name.split('.')[0].length > 0 \n        && file_name.split('.')[0][0]\
    \ >= 'a' \n        && file_name.split('.')[0][0] <= 'z' \n        && number_of_digits\
    \ <= 3){\n        return \"Yes\";\n    }\n    return \"No\";\n}", "    let count\
    \ = 0;\n    let check = false;\n    let check_extension = false;\n    let allowed_extensions\
    \ = ['txt', 'exe', 'dll'];\n    if (file_name.includes('.')){\n        check =\
    \ true;\n    }\n    let splitted_file_name = file_name.split('.');\n    if (allowed_extensions.includes(splitted_file_name[1])){\n\
    \        check_extension = true;\n    }\n    for (let i = 0; i < splitted_file_name[0].length;\
    \ i++){\n        if (splitted_file_name[0][i] >= '0' && splitted_file_name[0][i]\
    \ <= '9'){\n            count += 1;\n        }\n    }\n    if (count > 3){\n \
    \       check = false;\n    }\n    if (((splitted_file_name[0][0] >= 'a' && splitted_file_name[0][0]\
    \ <= 'z') \n        || (splitted_file_name[0][0] >= 'A' && splitted_file_name[0][0]\
    \ <= 'Z'))\n        && splitted_file_name[0].length != 0 && check == true && check_extension\
    \ == true){\n        return \"Yes\";\n    }\n    else{\n        return \"No\"\
    ;\n    }\n}\n", "  // Your code here\n\n}\n", "    var dot = file_name.indexOf('.');\n\
    \    if (dot != -1){\n        var extension = file_name.substring(dot+1);\n  \
    \      if (extension == 'txt' || extension == 'exe' || extension == 'dll'){\n\
    \            if (file_name.substring(0,dot).length != 0){\n                var\
    \ digit = 0;\n                for (i=0; i<dot; i++){\n                    if (file_name[i]\
    \ >= '0' && file_name[i] <= '9'){\n                        digit++;\n        \
    \            }\n                }\n                if (digit <= 3){\n        \
    \            return 'Yes';\n                }\n            }\n        }\n    }\n\
    \    return 'No';\n}", "    // if (file_name.length === 0){\n    //     return\
    \ 'No';\n    // }\n    if (file_name.match(/[^a-zA-Z0-9_.]/)){\n        return\
    \ 'No';\n    }\n    if (file_name.match(/^[^a-zA-Z].+$/)){\n        return 'No';\n\
    \    }\n    if (file_name.match(/[0-9]{4,}/)){\n        return 'No';\n    }\n\
    \    if (file_name.match(/[.][^.]+$/)){\n        return 'No';\n    }\n    let\
    \ dot_loc = file_name.indexOf('.');\n    let file_extension = file_name.substring(dot_loc\
    \ + 1);\n    if (file_extension !== 'txt' && file_extension !== 'exe' && file_extension\
    \ !== 'dll'){\n        return 'No';\n    }\n    return 'Yes';\n}\n", "    let\
    \ dot_index = file_name.indexOf('.');\n    let sub_str1 = file_name.substring(0,\
    \ dot_index);\n    let sub_str2 = file_name.substring(dot_index+1);\n    if(sub_str1.length\
    \ === 0 || !(/^[a-zA-Z]/.test(sub_str1))){\n        return \"No\";\n    }\n  \
    \  let digit_count = sub_str1.match(/\\d/g);\n    if(digit_count !== null && digit_count.length\
    \ > 3){\n        return \"No\";\n    }\n    if([\"txt\", \"exe\", \"dll\"].indexOf(sub_str2)\
    \ === -1){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "  let indexOfDot\
    \ = file_name.indexOf('.');\n  let splittedFileName = file_name.split('.');\n\
    \  let fileExtension = splittedFileName[1];\n  let charsBeforeDot = splittedFileName[0];\n\
    \  let isValid = false;\n  let invalidCounter = 0;\n  let counter = 0;\n  if(charsBeforeDot.length\
    \ !== 0 && !/[a-z]/.test(charsBeforeDot[0])) {\n    return 'No';\n  }\n  while(counter\
    \ < charsBeforeDot.length) {\n    if(/[0-9]/.test(charsBeforeDot[counter])) {\n\
    \      invalidCounter += 1;\n    }\n    counter += 1;\n  }\n  if(invalidCounter\
    \ > 3) {\n    return 'No';\n  }\n  if(fileExtension === 'txt' || fileExtension\
    \ === 'exe' || fileExtension === 'dll') {\n    isValid = true;\n  }\n  if(indexOfDot\
    \ !== -1 && splittedFileName.length === 2 && isValid === true) {\n    return 'Yes';\n\
    \  }\n  return 'No';\n}\n\n", "\tif(!file_name.match(/^[a-zA-Z]+[a-zA-Z.]+$/)){\n\
    \t\treturn \"No\";\n\t}\n\n\tif(file_name.match(/\\d{4,}/)){\n\t\treturn \"No\"\
    ;\n\t}\n\n\tif(file_name.split(\".\").length > 2){\n\t\treturn \"No\";\n\t}\n\n\
    \tif(file_name.split(\".\")[1] !== \"txt\" && file_name.split(\".\")[1] !== \"\
    exe\" && file_name.split(\".\")[1] !== \"dll\"){\n\t\treturn \"No\";\n\t}\n\n\t\
    return \"Yes\";\n}\n", "    let file_name_valid = \"Yes\";\n    let digit_count\
    \ = 0;\n    let dot_count = 0;\n    let index_of_dot = 0;\n    let index_of_first_letter\
    \ = 0;\n    for (let i = 0; i < file_name.length; i++){\n        if (file_name[i]\
    \ >= '0' && file_name[i] <= '9'){\n            digit_count++;\n        }\n   \
    \     if (file_name[i] == '.'){\n            dot_count++;\n            index_of_dot\
    \ = i;\n        }\n        if (file_name[i] == '.' && i == 0){\n            index_of_first_letter\
    \ = -1;\n        }\n        if (index_of_first_letter == 0 && (file_name[i] >=\
    \ 'a' && file_name[i] <= 'z' || file_name[i] >= 'A' && file_name[i] <= 'Z')){\n\
    \            index_of_first_letter = i;\n        }\n    }\n    if (digit_count\
    \ > 3 || dot_count != 1 || index_of_first_letter == -1 || (file_name.substring(index_of_dot\
    \ + 1) != 'txt' && file_name.substring(index_of_dot + 1) != 'exe' && file_name.substring(index_of_dot\
    \ + 1) != 'dll')){\n        file_name_valid = \"No\";\n    }\n    return file_name_valid;\n\
    }\n", "    var firstDot = file_name.indexOf(\".\");\n    var lengthOfString =\
    \ file_name.length;\n    var stringAfterDot = file_name.substring(firstDot+1,\
    \ lengthOfString);\n    var stringBeforeDot = file_name.substring(0, firstDot);\n\
    \    var counterForNumbers = 0;\n    if (stringAfterDot == \"txt\" || stringAfterDot\
    \ == \"exe\" || stringAfterDot == \"dll\"){\n        for (var i = 0; i < stringBeforeDot.length;\
    \ i++){\n            if (!isNaN(stringBeforeDot[i])){\n                counterForNumbers\
    \ += 1;\n            }\n        }\n        if (counterForNumbers == 0 && /^[a-zA-Z]*$/.test(stringBeforeDot)\
    \ == true){\n            return \"Yes\";\n        }\n        else{\n         \
    \   return \"No\";\n        }\n    }\n    else{\n        return \"No\";\n    }\n\
    }", "    let digits = 0;\n    let dot = 0;\n    let state = 0;\n    let file_name_result\
    \ = \"No\";\n    for(var i = 0; i < file_name.length; i++){\n        if(state\
    \ == 0){\n            if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z'){\n                state = 1;\n            }\n\
    \            else if(file_name[i] >= '0' && file_name[i] <= '9'){\n          \
    \      return file_name_result;\n            }\n            else{\n          \
    \      return file_name_result;\n            }\n        }\n        else if(state\
    \ == 1){\n            if(file_name[i] >= 'a' && file_name[i] <= 'z' || file_name[i]\
    \ >= 'A' && file_name[i] <= 'Z'){\n                state = 1;\n            }\n\
    \            else if(file_name[i] >= '0' && file_name[i] <= '9'){\n          \
    \      digits++;\n                if(digits > 3){\n                    return\
    \ file_name_result;\n                }\n                state = 1;\n         \
    \   }\n            else if(file_name[i] == '.'){\n                dot++;\n   \
    \             if(dot > 1){\n                    return file_name_result;\n   \
    \             }\n                state = 2;\n            }\n            else{\n\
    \                return file_name_result;\n            }\n        }\n        else\
    \ if(state == 2){\n            if(file_name[i] == 't'){\n                state\
    \ = 3;\n            }\n            else if(file_name[i] == 'e'){\n           \
    \     state = 5;\n            }\n            else if(file_name[i] == 'd'){\n \
    \               state = 7;\n            }\n            else{\n               \
    \ return file_name_result;\n            }\n        }\n        else if(state ==\
    \ 3){\n            if(file_name[i] == 'x'){\n                state = 4;\n    \
    \        }\n            else{\n                return", "    var digits_count\
    \ = 0;\n    var dot_count = 0;\n    var flag = 1;\n    var file_type = file_name.substring(file_name.indexOf('.')\
    \ + 1);\n    var file_name_without_extension = file_name.substring(0, file_name.indexOf('.'));\n\
    \    for(i = 0; i < file_name.length; i++){\n        if(file_name[i] >= '0' &&\
    \ file_name[i] <= '9'){\n            digits_count++;\n        }\n        if(file_name[i]\
    \ == '.'){\n            dot_count++;\n        }\n    }\n    if(digits_count >\
    \ 3 || dot_count != 1 || \n        (file_name_without_extension[0] >= '0' && file_name_without_extension[0]\
    \ <= '9') ||\n        !(file_type == 'txt' || file_type == 'exe' || file_type\
    \ == 'dll')){\n        flag = 0;\n    }\n    if(flag == 1){\n        return \"\
    Yes\";\n    }else{\n        return \"No\";\n    }\n}\n", "    let valid_extensions\
    \ = ['txt', 'exe', 'dll'];\n    let index_of_dot = file_name.indexOf('.');\n \
    \   let extension = file_name.substring(index_of_dot + 1);\n    let sub_name =\
    \ file_name.substring(0, index_of_dot);\n    let number_of_digits = 0;\n    let\
    \ index = 0;\n    while(index < sub_name.length){\n        if(sub_name[index]\
    \ >= '0' && sub_name[index] <= '9'){\n            number_of_digits += 1;\n   \
    \     }\n        index += 1;\n    }\n    if(number_of_digits > 3){\n        return\
    \ 'No';\n    }\n    if(sub_name[0] < 'a' || sub_name[0] > 'z'){\n        if(sub_name[0]\
    \ < 'A' || sub_name[0] > 'Z'){\n            return 'No';\n        }\n    }\n \
    \   if(valid_extensions.indexOf(extension) === -1){\n        return 'No';\n  \
    \  }\n    return 'Yes';\n}\n", "    // Split the file name\n    var file_name_arr\
    \ = file_name.split(\".\");\n    var true_count = 0;\n    var digits_count = 0;\n\
    \    var file_type = file_name_arr[1];\n    var valid_file_types = [\"txt\", \"\
    exe\", \"dll\"];\n    // Check if the file name is valid\n    if(file_name_arr.length\
    \ == 2){\n        if(valid_file_types.includes(file_type)){\n            // Check\
    \ if the file name contains digits\n            for(var i = 0; i < file_name_arr[0].length;\
    \ i++){\n                if(!isNaN(file_name_arr[0][i])){\n                  \
    \  digits_count++;\n                }\n            }\n            if(digits_count\
    \ <= 3){\n                if(!isNaN(file_name_arr[0][0])){\n                 \
    \   return \"No\";\n                }\n                return \"Yes\";\n     \
    \       }\n        }\n    }\n    return \"No\";\n}\n", "  // TODO: Implement this\
    \ function\n  var dot_ind = file_name.indexOf('.');\n  var file_name_ext = file_name.substring(dot_ind+1,\
    \ file_name.length);\n  var sub_name = file_name.substring(0, dot_ind);\n  var\
    \ digit_count = 0;\n  for(var i = 0; i < sub_name.length; i++){\n    if(sub_name[i]\
    \ >= '0' && sub_name[i] <= '9'){\n      digit_count++;\n    }\n  }\n  if(dot_ind\
    \ >= 0 && sub_name.length > 0 && file_name_ext == 'txt' || file_name_ext == 'exe'\
    \ || file_name_ext == 'dll' && digit_count <= 3){\n    return 'Yes';\n  }\n  else{\n\
    \    return 'No';\n  }\n}\n\n", "\tvar file_pattern = /^[a-zA-Z]\\w*\\.(txt|exe|dll)$/\n\
    \tif (file_pattern.test(file_name)){\n\t\treturn \"Yes\"\n\t}\n\telse{\n\t\treturn\
    \ \"No\"\n\t}\n}\n", "\tif(file_name.match(/[0-9]{4,}/g))\n\t\treturn \"No\";\n\
    \tif(file_name.match(/\\./g).length > 1)\n\t\treturn \"No\";\n\tif(file_name.match(/^[a-zA-Z]/g)\
    \ == null)\n\t\treturn \"No\";\n\tif(file_name.match(/\\./g).index == 0)\n\t\t\
    return \"No\";\n\tvar file_name_arr = file_name.split(\".\");\n\tif(file_name_arr[1]\
    \ != \"txt\" && file_name_arr[1] != \"exe\" && file_name_arr[1] != \"dll\")\n\t\
    \treturn \"No\";\n\treturn \"Yes\";\n}\n", "    let a = file_name.match(/\\d/g)\n\
    \    let b = file_name.match(/[a-z]|[A-Z]/g)\n    let c = file_name.match(/\\\
    ./g)\n    let d = file_name.slice(file_name.length-3,file_name.length)\n    if(a.length\
    \ <= 3 && c.length == 1 && b.length != 0 && (d == 'txt' || d == 'exe' || d ==\
    \ 'dll')){\n        return \"Yes\"\n    }else{\n        return \"No\"\n    }\n\
    }\n", "  // please write your code here\n}", "    // let count = 0;\n    // for(let\
    \ i = 0; i < file_name.length; i++){\n    //     if((file_name[i] >= '0') && (file_name[i]\
    \ <= '9')){\n    //         count++;\n    //     }\n    // }\n    // if(count\
    \ > 3){\n    //     return \"No\";\n    // }\n    // if(file_name.includes('.')){\n\
    \    //     return \"Yes\";\n    // }\n    // return \"No\";\n    let p1 = new\
    \ RegExp(/^[A-Za-z][a-zA-Z0-9]*\\.[A-Za-z][a-zA-Z0-9]*$/);\n    let p2 = new RegExp(/[a-zA-Z0-9]*\\\
    .txt$/);\n    let p3 = new RegExp(/[a-zA-Z0-9]*\\.exe$/);\n    let p4 = new RegExp(/[a-zA-Z0-9]*\\\
    .dll$/);\n    if(p1.test(file_name)){\n        if(p2.test(file_name) || p3.test(file_name)\
    \ || p4.test(file_name)){\n            return \"Yes\";\n        }\n    }\n   \
    \ return \"No\";\n}", "    let digits = 0;\n    let dot = 0;\n    let dot_index\
    \ = 0;\n    let valid_extentions = [\"txt\", \"exe\", \"dll\"];\n    if(file_name.length\
    \ <= 0){\n        return \"No\";\n    }\n    let sub_before_dot = \"\";\n    let\
    \ sub_after_dot = \"\";\n    for(let i = 0; i < file_name.length; i++){\n    \
    \    let char = file_name[i];\n        if(char == \".\"){\n            dot +=\
    \ 1;\n            dot_index = i;\n        }\n        if(is_digit(char)){\n   \
    \         digits += 1;\n        }\n    }\n    if(digits > 3 || dot != 1){\n  \
    \      return \"No\";\n    }\n    sub_before_dot = file_name.substring(0, dot_index);\n\
    \    sub_after_dot = file_name.substring(dot_index + 1, file_name.length);\n \
    \   if(sub_before_dot.length <= 0 || !is_letter(sub_before_dot[0])){\n       \
    \ return \"No\";\n    }\n    if(!valid_extentions.includes(sub_after_dot)){\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}", "  // Write your code\
    \ here\n  // To print results to the standard output you can use print\n  // Example:\
    \ print \"Hello world!\"\n}", "  var dot_index = file_name.indexOf('.');\n  var\
    \ first_part = file_name.substring(0, dot_index);\n  var second_part = file_name.substring(dot_index\
    \ + 1);\n  var is_valid = true;\n  var digit_count = 0;\n  for(var i = 0; i <\
    \ first_part.length; i++){\n    if(first_part[i] >= '0' && first_part[i] <= '9'){\n\
    \      digit_count++;\n    }\n  }\n  if(digit_count > 3){\n    is_valid = false;\n\
    \  }\n  if(file_name.indexOf('.') != file_name.lastIndexOf('.')){\n    is_valid\
    \ = false;\n  }\n  if(first_part.length == 0 || (first_part[0] < 'a' || first_part[0]\
    \ > 'z') && \n    (first_part[0] < 'A' || first_part[0] > 'Z')){\n    is_valid\
    \ = false;\n  }\n  if(second_part != 'txt' && second_part != 'exe' && second_part\
    \ != 'dll'){\n    is_valid = false;\n  }\n  if(is_valid){\n    return \"Yes\"\
    ;\n  }\n  else{\n    return \"No\";\n  }\n}\n", "  let digets = 0;\n  let dot_counter\
    \ = 0;\n  let latin_counter = 0;\n  let txt_exe_dll_counter = 0;\n  let file_name_arr\
    \ = file_name.split('');\n  let error_list = [];\n  for(let i = 0; i < file_name_arr.length;\
    \ i++){\n    if(file_name_arr[i] >= '0' && file_name_arr[i] <= '9'){\n      digets++;\n\
    \    }\n    if(file_name_arr[i] === '.'){\n      dot_counter++;\n    }\n    if((file_name_arr[i]\
    \ >= 'a' && file_name_arr[i] <= 'z') || \n      (file_name_arr[i] >= 'A' && file_name_arr[i]\
    \ <= 'Z')){\n      latin_counter++;\n    }\n    if(file_name_arr[i] === '.' &&\
    \ file_name_arr[i-1] === 't' && \n      file_name_arr[i-2] === 'x' && file_name_arr[i-3]\
    \ === 't'){\n      txt_exe_dll_counter++;\n    }\n    if(file_name_arr[i] ===\
    \ '.' && file_name_arr[i-1] === 'e' && \n      file_name_arr[i-2] === 'x' && file_name_arr[i-3]\
    \ === 'e'){\n      txt_exe_dll_counter++;\n    }\n    if(file_name_arr[i] ===\
    \ '.' && file_name_arr[i-1] === 'l' && \n      file_name_arr[i-2] === 'l' && file_name_arr[i-3]\
    \ === 'd'){\n      txt_exe_dll_counter++;\n    }\n  }\n  if(digets > 3){\n   \
    \ error_list.push('There should not be more than three digits');\n  }\n  if(dot_counter\
    \ !== 1){\n    error_list.push('The file\\'s name", "\tvar count_of_digits = 0;\n\
    \tvar is_dot_present = false;\n\tvar is_dot_extension_present = false;\n\tvar\
    \ count_of_extensions = 0;\n\tvar dot_position = -1;\n\tvar valid_extensions =\
    \ ['txt', 'exe', 'dll'];\n\tfor(var i = 0; i < file_name.length; i++){\n\t\tif(file_name[i]\
    \ >= '0' && file_name[i] <= '9'){\n\t\t\tcount_of_digits += 1;\n\t\t}\n\t\tif(file_name[i]\
    \ == '.'){\n\t\t\tis_dot_present = true;\n\t\t\tdot_position = i;\n\t\t}\n\t\t\
    if(file_name[i] == '.' && valid_extensions.indexOf(file_name.substring(i+1)) >=\
    \ 0){\n\t\t\tis_dot_extension_present = true;\n\t\t\tcount_of_extensions += 1;\n\
    \t\t}\n\t}\n\tif(count_of_digits > 3 || is_dot_present == false || file_name[0]\
    \ < 'a' || file_name[0] > 'z' || count_of_extensions != 1){\n\t\treturn \"No\"\
    ;\n\t}\n\treturn \"Yes\";\n}", "    var file_name_list = file_name.split(\".\"\
    );\n    var pre_file_name = file_name_list[0];\n    var after_file_name = file_name_list[1];\n\
    \    if (pre_file_name == \"\" || !/^[a-zA-Z]/.test(pre_file_name) || !/^[a-zA-Z]/.test(file_name_list[0][0]))\
    \ {\n        return \"No\";\n    } else if (after_file_name == \"txt\" || after_file_name\
    \ == \"exe\" || after_file_name == \"dll\") {\n        return \"Yes\";\n    }\
    \ else {\n        return \"No\";\n    }\n}", "   \n    var dot = 0;\n    var digit\
    \ = 0;\n    var letter = 0;\n    var exist = 0;\n    var num = 0;\n    var i =\
    \ 0;\n    var s = \"\";\n    if(file_name.length < 5){\n        return \"No\"\
    ;\n    }\n    while(i < file_name.length){\n        if(file_name[i] == '.'){\n\
    \            dot++;\n        }\n        if((file_name[i] >= '0') && (file_name[i]\
    \ <= '9')){\n            digit++;\n        }\n        if(((file_name[i] >= 'a')\
    \ && (file_name[i] <= 'z')) || ((file_name[i] >= 'A') && (file_name[i] <= 'Z'))){\n\
    \            letter++;\n        }\n        i++;\n    }\n    if(letter == 0){\n\
    \        return \"No\";\n    }\n    i = 0;\n    var name = \"\";\n    while(file_name[i]\
    \ != '.'){\n        name += file_name[i];\n        i++;\n    }\n    i++;\n   \
    \ while(i < file_name.length){\n        s += file_name[i];\n        i++;\n   \
    \ }\n    if(s == \"exe\"){\n        exist++;\n    }\n    if(s == \"txt\"){\n \
    \       exist++;\n    }\n    if(s == \"dll\"){\n        exist++;\n    }\n    if(exist\
    \ == 0){\n        return \"No\";\n    }\n    if(dot != 1){\n        return \"\
    No\";\n    }\n    if(digit > 3){\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}", "    let get_number_of_digits = function(string){\n        let counter\
    \ = 0;\n        for(let i = 0; i < string.length; i++){\n            if(string[i]\
    \ >= '0' && string[i] <= '9'){\n                counter += 1;\n            }\n\
    \        }\n        return counter;\n    }\n    if(get_number_of_digits(file_name)\
    \ > 3){\n        return \"No\";\n    }\n    let dot_index = file_name.indexOf('.');\n\
    \    if(dot_index == -1){\n        return \"No\";\n    }\n    let before_dot =\
    \ file_name.substring(0, dot_index);\n    if(before_dot.length == 0 || (before_dot[0]\
    \ < 'a' || before_dot[0] > 'z') && (before_dot[0] < 'A' || before_dot[0] > 'Z')){\n\
    \        return \"No\";\n    }\n    let after_dot = file_name.substring(dot_index\
    \ + 1);\n    let accepted_extensions = ['txt', 'exe', 'dll'];\n    if(accepted_extensions.indexOf(after_dot)\
    \ == -1){\n        return \"No\";\n    }\n    return \"Yes\";\n}", "\tif (file_name[0]\
    \ >= '0' && file_name[0] <= '9'){\n\t\treturn \"No\";\n\t}\n\tif (!(file_name.substring(file_name.indexOf('.')\
    \ + 1) == \"txt\" || file_name.substring(file_name.indexOf('.') + 1) == \"exe\"\
    \ || file_name.substring(file_name.indexOf('.') + 1) == \"dll\")){\n\t\treturn\
    \ \"No\";\n\t}\n\tif (file_name.indexOf('.') != file_name.lastIndexOf('.')){\n\
    \t\treturn \"No\";\n\t}\n\tvar numbers = 0;\n\tfor (var i = 0; i < file_name.length;\
    \ i++){\n\t\tif (file_name[i] >= '0' && file_name[i] <= '9'){\n\t\t\tnumbers++;\n\
    \t\t}\n\t}\n\tif (numbers > 3){\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n\
    }\n", "  var dot_index = file_name.indexOf('.');\n  if(file_name.charAt(0) < 'a'\
    \ || file_name.charAt(0) > 'z'){\n    return \"No\";\n  }\n  if(dot_index == -1){\n\
    \    return \"No\";\n  }\n  if(file_name.substring(dot_index + 1) != \"txt\" &&\
    \ file_name.substring(dot_index + 1) != \"exe\" && file_name.substring(dot_index\
    \ + 1) != \"dll\"){\n    return \"No\";\n  }\n  if(file_name.substring(0, dot_index).length\
    \ == 0){\n    return \"No\";\n  }\n  for(var i = 0; i < file_name.length; i++){\n\
    \    if(file_name.charAt(i) >= '0' && file_name.charAt(i) <= '9'){\n      if(i\
    \ > 3){\n        return \"No\";\n      }\n    }\n  }\n  return \"Yes\";\n}\n",
  "    if(file_name.length > 3) return \"No\";\n    if(file_name.includes(\".\")){\n\
    \        var before_dot = file_name.substring(0, file_name.indexOf(\".\"));\n\
    \        var after_dot = file_name.substring(file_name.indexOf(\".\") + 1);\n\
    \        var regExp = /^[a-zA-Z]+$/;\n        if(!before_dot.match(regExp)) return\
    \ \"No\";\n        if(after_dot === \"txt\" || after_dot === \"exe\" || after_dot\
    \ === \"dll\") return \"Yes\";\n    }\n    return \"No\";\n}\n", "    if (file_name[0]\
    \ < 'a' || file_name[0] > 'z'){\n        return \"No\";\n    }\n    let num_of_digits\
    \ = 0;\n    let dot_index = 0;\n    for (let i = 0; i < file_name.length; i++){\n\
    \        if (file_name[i] < '0' || file_name[i] > '9'){\n            if (file_name[i]\
    \ == '.'){\n                dot_index = i;\n            }\n        }\n       \
    \ else{\n            num_of_digits += 1;\n        }\n    }\n    if (num_of_digits\
    \ > 3){\n        return \"No\";\n    }\n    let extension = file_name.substring(dot_index\
    \ + 1);\n    if (extension != \"txt\" && extension != \"exe\" && extension !=\
    \ \"dll\"){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "    let\
    \ dot_index = file_name.indexOf('.');\n    let substring_1 = file_name.substring(0,\
    \ dot_index);\n    let substring_2 = file_name.substring(dot_index + 1);\n   \
    \ let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    let numbers = ['0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9'];\n    let file_ext = ['txt', 'exe', 'dll'];\n\
    \    let count = 0;\n    let check = true;\n    if(substring_1.length == 0){\n\
    \        return \"No\";\n    }\n    for(let i = 0; i < substring_1.length; i++){\n\
    \        for(let j = 0; j < alphabet.length; j++){\n            if(substring_1[i]\
    \ == alphabet[j]){\n                break;\n            }\n            if(j ==\
    \ alphabet.length - 1){\n                check = false;\n            }\n     \
    \   }\n        for(let j = 0; j < numbers.length; j++){\n            if(substring_1[i]\
    \ == numbers[j]){\n                count += 1;\n            }\n        }\n   \
    \ }\n    if(count > 3){\n        return \"No\";\n    }\n    if(!check){\n    \
    \    return \"No\";\n    }\n    if(file_name.indexOf('.') == -1){\n        return\
    \ \"No\";\n    }\n    if(file_name", "    var re= /^[a-zA-Z]\\w{0,}$/;\n    return\
    \ re.test(file_name)?\"Yes\":\"No\";\n}", "\tvar regex=/^[a-zA-Z][\\w]{0,8}[.][a-zA-Z]{3}$/;\n\
    \tif(regex.test(file_name)){\n\t\treturn 'Yes';\n\t}else{\n\t\treturn 'No';\n\t\
    }\n}", "    // Write your code here\n}\n", "\tif(/[^a-zA-Z0-9.]/.test(file_name)){\n\
    \t\treturn \"No\";\n\t}\n\tif(file_name.match(/\\d/g).length > 3){\n\t\treturn\
    \ \"No\";\n\t}\n\tif(/^[a-zA-Z]/.test(file_name) && file_name.split(\".\").length\
    \ === 2){\n\t\tif(/[a-zA-Z]+\\.txt$|[a-zA-Z]+\\.exe$|[a-zA-Z]+\\.dll$/.test(file_name)){\n\
    \t\t\treturn \"Yes\";\n\t\t}\n\t}\n\treturn \"No\";\n}", "  return /^[a-zA-Z][a-zA-Z0-9]{0,3}\\\
    .(exe|txt|dll)$/.test(file_name) ? \"Yes\" : \"No\";\n}", "    let splitted =\
    \ file_name.split('.');\n    if (splitted.length !== 2) {\n        return 'No';\n\
    \    }\n\n    const valid_extensions = ['txt', 'exe', 'dll'];\n    if (!valid_extensions.includes(splitted[1]))\
    \ {\n        return 'No';\n    }\n\n    const valid_digit_count = 3;\n    const\
    \ digit_count = (splitted[0].match(/\\d/g) || []).length;\n    if (digit_count\
    \ > valid_digit_count) {\n        return 'No';\n    }\n\n    if (splitted[0].length\
    \ === 0) {\n        return 'No';\n    }\n\n    const re = /^[a-zA-Z]/;\n    if\
    \ (!re.test(splitted[0])) {\n        return 'No';\n    }\n\n    return 'Yes';\n\
    }\n", "    let number_of_digits = file_name.match(/[0-9]/g);\n    let number_of_dots\
    \ = file_name.match(/\\./g);\n    if(number_of_digits === null){\n        number_of_digits\
    \ = 0;\n    }else{\n        number_of_digits = number_of_digits.length;\n    }\n\
    \    if(number_of_dots === null){\n        number_of_dots = 0;\n    }else{\n \
    \       number_of_dots = number_of_dots.length;\n    }\n    let sub_string_before_dot\
    \ = file_name.substring(0, file_name.indexOf('.'));\n    let sub_string_after_dot\
    \ = file_name.substring(file_name.indexOf('.') + 1);\n    if(number_of_digits\
    \ > 3 || number_of_dots !== 1 || !sub_string_before_dot.match(/^[a-zA-Z]+$/) ||\
    \ \n        !sub_string_after_dot.match(/^(txt|exe|dll)$/)){\n        return \"\
    No\";\n    }\n    return \"Yes\";\n}", "\tvar pattern = /^[a-zA-Z]+[0-9]{0,3}\\\
    .[exe|txt|dll]{3}$/\n\treturn pattern.test(file_name) ? \"Yes\" : \"No\"\n}\n",
  "\tvar no_of_digits = 0;\n\tvar file_name_contains_one_dot = 0;\n\tvar substring_before_dot_is_valid\
    \ = 0;\n\tvar substring_after_dot_is_valid = 0;\n\tvar substring_before_dot =\
    \ \"\";\n\tvar substring_after_dot = \"\";\n\tvar is_substring_before_dot = 1;\n\
    \t\n\tfor(var i = 0; i < file_name.length; i++){\n\t\tvar current_char = file_name[i];\n\
    \t\tif(current_char == '.'){\n\t\t\tis_substring_before_dot = 0;\n\t\t\tfile_name_contains_one_dot++;\n\
    \t\t}\n\t\telse if(is_substring_before_dot){\n\t\t\tsubstring_before_dot += current_char;\n\
    \t\t}\n\t\telse{\n\t\t\tsubstring_after_dot += current_char;\n\t\t}\n\t\tif(current_char\
    \ >= '0' && current_char <= '9'){\n\t\t\tno_of_digits++;\n\t\t}\n\t}\n\t\n\tvar\
    \ valid_substrings_after_dot = ['txt', 'exe', 'dll'];\n\t\n\tfor(var i = 0; i\
    \ < valid_substrings_after_dot.length; i++){\n\t\tif(substring_after_dot == valid_substrings_after_dot[i]){\n\
    \t\t\tsubstring_after_dot_is_valid = 1;\n\t\t}\n\t}\n\t\n\tvar first_char_of_substring_before_dot\
    \ = substring_before_dot[0];\n\tif(first_char_of_substring_before_dot >= 'a' &&\
    \ first_char_of_substring_before_dot <= 'z' ||\n\t\tfirst_char_of_substring_before_dot\
    \ >= 'A' && first_char_of_substring_before_dot <= 'Z'){\n\t\tsubstring_before_dot_is_valid\
    \ = 1;\n\t}\n\t\n\tif(no_of_digits <= 3 &&", "    var re = /^[A-Za-z]{1}[A-Za-z0-9]{0,3}[.](txt|exe|dll)$/;\n\
    \    if(re.test(file_name)){\n        return \"Yes\";\n    }\n    return \"No\"\
    ;\n}\n", "    if (file_name.match(/^[a-zA-Z]+[.](txt|exe|dll)$/)) {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}", "    // match digits:\n\
    \    if (file_name.match(/\\d/g) && file_name.match(/\\d/g).length > 3) {\n  \
    \      return \"No\";\n    }\n    // match dot:\n    if (!file_name.match(/\\\
    ./g) || file_name.match(/\\./g).length != 1) {\n        return \"No\";\n    }\n\
    \    // split:\n    var split = file_name.split(\".\");\n    // check first part:\n\
    \    if (split[0].length == 0 || !split[0].match(/[a-zA-Z]/g)) {\n        return\
    \ \"No\";\n    }\n    // check second part:\n    if (split[1] != \"txt\" && split[1]\
    \ != \"exe\" && split[1] != \"dll\") {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\n", "    let reg = /^([a-zA-Z]*)(\\d{0,3})(\\.txt|\\.exe|\\.dll)$/;\n\
    \    let result = reg.test(file_name);\n    if(result == true){\n        return\
    \ 'Yes';\n    }else{\n        return 'No';\n    }\n\n}\n", "    if(checkLength(file_name)\
    \ == false){\n        return \"No\";\n    }\n    if(checkDot(file_name) == false){\n\
    \        return \"No\";\n    }\n    if(checkDigits(file_name) == false){\n   \
    \     return \"No\";\n    }\n    if(checkBeforeDot(file_name) == false){\n   \
    \     return \"No\";\n    }\n    if(checkAfterDot(file_name) == false){\n    \
    \    return \"No\";\n    }\n    return \"Yes\";\n}", "    if (file_name.match(/^[a-zA-Z]{1}[a-zA-Z0-9]{1,100}[.](txt|exe|dll)$/))\
    \ {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n\n", "\tvar file_name_split\
    \ = file_name.split(\".\");\n\tvar file_name_first = file_name_split[0];\n\tvar\
    \ file_name_second = file_name_split[1];\n\tvar count = 0;\n\tif ((file_name_second\
    \ === \"txt\") || (file_name_second === \"exe\") || (file_name_second === \"dll\"\
    )){\n\t\tfor (var i = 0; i < file_name_first.length; i++){\n\t\t\tif ((file_name_first[i]\
    \ >= \"0\") && (file_name_first[i] <= \"9\")){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\
    }\n\t\tif ((count > 3) || (file_name_first[0] < \"A\") || (file_name_first[0]\
    \ > \"z\")){\n\t\t\treturn \"No\";\n\t\t}\n\t\telse {\n\t\t\treturn \"Yes\";\n\
    \t\t}\n\t}\n\telse {\n\t\treturn \"No\";\n\t}\n}\n", "    var digits = \"1234567890\"\
    ;\n    var extensions = [\"txt\", \"exe\", \"dll\"];\n    var digit_count = 0;\n\
    \    var has_dot = false;\n    var valid_extension = false;\n    var valid_name\
    \ = false;\n    var substring_after_dot = \"\";\n    var substring_before_dot\
    \ = \"\";\n    var invalid_letter = \"\";\n    var valid_letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    var valid_letters_and_digits = \"abcdefghijklmnopqrstuvwxyz0123456789\"\
    ;\n    var last_letter_of_file_name = file_name[file_name.length - 1];\n    var\
    \ last_letter_of_file_name_is_valid = false;\n    var first_letter_of_file_name\
    \ = file_name[0];\n    var first_letter_of_file_name_is_valid = false;\n    var\
    \ first_letter_of_substring_before_dot = \"\";\n    var i = 0;\n    var j = 0;\n\
    \    //Check number of digits in file name\n    while (i < file_name.length){\n\
    \        j = 0;\n        while (j < digits.length){\n            if (file_name[i]\
    \ == digits[j]){\n                digit_count++;\n            }\n            j++;\n\
    \        }\n        i++;\n    }\n    if (digit_count <= 3){\n        //Check if\
    \ the file name contains exactly one dot '.'\n        i = 0;\n        while (i\
    \ < file_name.length){\n            if (file_name[i] == \".\"){\n            \
    \    if (has_dot == false){\n                    has_dot = true;\n           \
    \     }\n                else{\n                    has_dot = false;\n       \
    \         }\n            }\n            i++;\n        }\n        if (has_dot ==\
    \ true){\n            //Check if the file extension is one of the valid extensions\n\
    \            i = 0;\n            while (i < file_name.length){\n             \
    \   if (file_name[i] == \".\"){\n                    i++;\n                  \
    \  while (i < file", "    let checkDigits = 0;\n    let dotCount = 0;\n    let\
    \ file_name_array = file_name.split(\"\");\n    let filename = \"\";\n    let\
    \ extension = \"\";\n    let validExtensions = [\"txt\", \"exe\", \"dll\"];\n\
    \    for(let i = 0; i < file_name_array.length; i++){\n        if(file_name_array[i]\
    \ === \".\"){\n            dotCount ++;\n            filename = file_name.substring(0,\
    \ i);\n            extension = file_name.substring(i + 1, file_name.length);\n\
    \        }\n        if(parseInt(file_name_array[i])){\n            checkDigits++;\n\
    \        }\n    }\n    if(checkDigits > 3 || dotCount !== 1 || !parseInt(filename[0])\
    \ && !(validExtensions.includes(extension))){\n        return \"No\";\n    }\n\
    \    return \"Yes\";\n}", "  var digits = 0;\n  var dot = false;\n  var name_count\
    \ = 0;\n  var dot_idx = -1;\n  var ext_count = 0;\n  var ext = \"\";\n  var i\
    \ = 0;\n  while(i < file_name.length){\n    var c = file_name[i];\n    if(c ===\
    \ '.'){\n      if(dot || i === 0 || ext_count > 0){\n        return \"No\";\n\
    \      }\n      dot = true;\n      dot_idx = i;\n    }\n    else if(is_digit(c)){\n\
    \      if(name_count > 0){\n        return \"No\";\n      }\n      if(ext_count\
    \ > 0){\n        return \"No\";\n      }\n      digits += 1;\n      if(digits\
    \ > 3){\n        return \"No\";\n      }\n    }\n    else if(is_alpha(c)){\n \
    \     if(ext_count > 0){\n        return \"No\";\n      }\n      if(dot){\n  \
    \      ext_count += 1;\n        ext += c;\n      }\n      else{\n        name_count\
    \ += 1;\n      }\n    }\n    else{\n      return \"No\";\n    }\n    i += 1;\n\
    \  }\n  if(!dot || name_count === 0 || ext_count === 0){\n    return \"No\";\n\
    \  }\n  if(ext === \"txt\" || ext === \"exe\" || ext === \"dll\"){\n    return\
    \ \"Yes\";\n  }\n  return \"No\";\n}", "    let arr = file_name.split(\".\");\n\
    \    let first = arr[0];\n    let last = arr[1];\n    let reg = /[^a-zA-Z.]/;\n\
    \    if (file_name.length == 0){\n        return \"Invalid\";\n    }\n    else\
    \ if (first.match(reg) || (first[0] >= 0 && first[0] <= 9)){\n        return \"\
    No\";\n    }\n    else if (last == 'txt' || last == 'exe' || last == 'dll'){\n\
    \        return \"Yes\";\n    }\n    else {\n        return \"No\";\n    }\n}",
  "    let input = file_name;\n    let dot_index = file_name.indexOf('.');\n    let\
    \ extension = file_name.substring(dot_index+1);\n    let extension_list = ['txt',\
    \ 'exe', 'dll'];\n    let allowed_extensions = false;\n    let digits = false;\n\
    \    let dot_count = 0;\n    let valid_name = false;\n    let illegal_characters\
    \ = false;\n    let allowed_characters = false;\n    let previous_character =\
    \ '';\n    let str_length = input.length;\n    let uppercase_characters = [];\n\
    \    let lowercase_characters = [];\n    let numbers = [];\n    let num_count\
    \ = 0;\n    for(let i = 0; i < str_length; i++){\n        if(!isNaN(input[i])){\n\
    \            numbers.push(input[i]);\n            num_count++;\n        }\n  \
    \      if(input[i] == input[i].toUpperCase()){\n            uppercase_characters.push(input[i]);\n\
    \        }\n        if(input[i] == input[i].toLowerCase()){\n            lowercase_characters.push(input[i]);\n\
    \        }\n        if(input[i] == '.'){\n            dot_count++;\n        }\n\
    \        if(previous_character == '.' && input[i] == '.'){\n            illegal_characters\
    \ = true;\n        }\n        if(input[i] == '.' && (dot_count == 1) && (i !=\
    \ 0) && (i != str_length-1)){\n            allowed_characters = true;\n      \
    \  }\n        if(input[i] == '.' && (dot_count > 1)){\n            illegal_characters\
    \ = true;\n        }\n        if(input[i] == '.' && (i == 0 || i == str_length-1)){\n\
    \            illegal_characters = true;\n        }\n        if(previous_character\
    \ == '.' && (input[i] == ' ')){\n            illegal_characters = true;\n    \
    \    }\n        if(input[i] == '.' &&", "    return (file_name.match(/\\d/g).length\
    \ <= 3 && file_name.match(/\\./g).length == 1 &&\n    file_name.substring(0, file_name.indexOf('.')).match(/[a-zA-Z]/g)\
    \ != null && \n    ['txt', 'exe', 'dll'].includes(file_name.substring(file_name.indexOf('.')\
    \ + 1))) ? 'Yes' : 'No';\n}\n", "\tvar count = 0;\n\tfor(var i = 0; i < file_name.length;\
    \ i++){\n\t\tif(!isNaN(file_name[i])){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(count\
    \ <= 3){\n\t\tvar index = file_name.indexOf(\".\");\n\t\tif(index != -1){\n\t\t\
    \tvar dot_end = file_name.slice(index + 1);\n\t\t\tif(dot_end == \"txt\" || dot_end\
    \ == \"exe\" || dot_end == \"dll\"){\n\t\t\t\tvar before_dot = file_name.slice(0,\
    \ index);\n\t\t\t\tvar first_letter = before_dot[0];\n\t\t\t\tif(first_letter\
    \ != before_dot){\n\t\t\t\t\treturn \"Yes\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn \"No\";\n}\n", "    var count=0;\n    var reg= /[0-9]/;\n    for(var\
    \ i=0;i<file_name.length;i++){\n        if(reg.test(file_name[i])){\n        \
    \    count++;\n        }\n    }\n    if(count>3){\n        return \"No\";\n  \
    \  }\n    var reg2= /[.]/;\n    var count2=0;\n    for(var i=0;i<file_name.length;i++){\n\
    \        if(reg2.test(file_name[i])){\n            count2++;\n        }\n    }\n\
    \    if(count2!=1){\n        return \"No\";\n    }\n    var reg3= /[a-zA-Z]/;\n\
    \    if(!reg3.test(file_name[0])){\n        return \"No\";\n    }\n    var arr=[\"\
    txt\",\"exe\",\"dll\"];\n    var arr1=file_name.split(\".\");\n    if(arr.indexOf(arr1[1])!=-1){\n\
    \        return \"Yes\";\n    }\n    return \"No\";\n}\n", "\tvar regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    .(txt|exe|dll)$/;\n\tif(regex.test(file_name)){\n\t\treturn \"Yes\";\n\t}\n\t\
    return \"No\";\n}", "    var name_pattern = /^[a-zA-Z]+\\d{0,3}+\\.+(txt|exe|dll)$/g;\n\
    \    var result = file_name.match(name_pattern);\n    if(result == null) {\n \
    \       return \"No\";\n    }\n    else {\n        return \"Yes\";\n    }\n}",
  "    let file_array = file_name.split(\".\");\n    let condition1 = file_array[0].match(/[0-9]/g);\n\
    \    let condition2 = file_array[0].match(/[a-z]/i);\n    if (condition1 == null\
    \ || condition1.length < 4){\n        if (file_array.length == 2){\n         \
    \   if (condition2 != null && condition2[0] == condition2.input[0]){\n       \
    \         if (file_array[1] == \"txt\" || file_array[1] == \"exe\" || file_array[1]\
    \ == \"dll\"){\n                    return \"Yes\";\n                }\n     \
    \       }\n        }\n    }\n    return \"No\";\n}", "\tlet no_one_dot = /[.]/g;\n\
    \tif(no_one_dot.test(file_name)==false){\n\t\treturn 'No';\n\t}\n\tlet only_one_dot\
    \ = /([.])/.exec(file_name);\n\tlet no_empty_string = /[a-zA-Z]/g;\n\tif(no_empty_string.test(file_name.slice(0,only_one_dot.index))==false){\n\
    \t\treturn 'No';\n\t}\n\tlet no_empty_string_befor_dot = /[a-zA-Z]/g;\n\tif(no_empty_string_befor_dot.test(file_name.slice(only_one_dot.index+1))==false){\n\
    \t\treturn 'No';\n\t}\n\tlet no_more_than_three_digits = /[0-9]{4,}/g;\n\tif(no_more_than_three_digits.test(file_name)==true){\n\
    \t\treturn 'No';\n\t}\n\tlet file_name_extension = /([a-zA-Z]+)([.])([a-zA-Z]+)/g.exec(file_name);\n\
    \tlet must_be_one_of_these = ['txt', 'exe', 'dll'];\n\tif(must_be_one_of_these.includes(file_name_extension[3])==false){\n\
    \t\treturn 'No';\n\t}\n\treturn 'Yes';\n}\n", "    let count_dot = 0;\n    let\
    \ count_num = 0;\n    for(let i = 0; i < file_name.length; i++){\n        if(file_name[i]\
    \ === '.'){\n            count_dot += 1;\n        }\n        if(file_name[i] >=\
    \ '0' && file_name[i] <= '9'){\n            count_num += 1;\n        }\n    }\n\
    \    if(count_dot !== 1 || count_num > 3){\n        return \"No\";\n    }\n  \
    \  let txt_arr = file_name.split('.');\n    if(txt_arr[0] === '' || (txt_arr[0][0]\
    \ < 'a' || txt_arr[0][0] > 'z') && (txt_arr[0][0] < 'A' || txt_arr[0][0] > 'Z')){\n\
    \        return \"No\";\n    }\n    if(txt_arr[1] !== 'txt' && txt_arr[1] !==\
    \ 'exe' && txt_arr[1] !== 'dll'){\n        return \"No\";\n    }\n    return \"\
    Yes\";\n}\n", "\tif (!/^[a-zA-Z]+[0-9]{0,3}(\\.txt|\\.exe|\\.dll)$/.test(file_name))\
    \ {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\n", "    var count = 0;\n \
    \   var dot_count = 0;\n    for(var i = 0; i < file_name.length; i++){\n     \
    \   if(file_name[i] >= '0' && file_name[i] <= '9'){\n            count++;\n  \
    \      }\n        if(file_name[i] == '.'){\n            dot_count++;\n       \
    \ }\n    }\n    if(count > 3 || dot_count != 1){\n        return \"No\";\n   \
    \ }\n    if(file_name[0] < 'a' || file_name[0] > 'z' && file_name[0] < 'A' ||\
    \ file_name[0] > 'Z'){\n        return \"No\";\n    }\n    var ex = \"\";\n  \
    \  var len = file_name.length;\n    for(var i = len - 3; i < len; i++){\n    \
    \    ex += file_name[i];\n    }\n    if(ex != \"txt\" && ex != \"exe\" && ex !=\
    \ \"dll\"){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "  //create\
    \ new string and add the '.' character. Needed to count the digits\n  //correctly\n\
    \  var file_name_with_dot = '.' + file_name;\n  var digits = (file_name_with_dot.match(/[0-9]/g)\
    \ || []).length;\n  var dots = (file_name_with_dot.match(/\\./g) || []).length;\n\
    \  var dots_after_dot = (file_name_with_dot.match(/\\.[a-zA-Z]+/g) || []).length;\n\
    \  var dots_before_dot = (file_name_with_dot.match(/[a-zA-Z]+\\./g) || []).length;\n\
    \  if(dots != 1 || dots_after_dot != 1 || dots_before_dot != 1){\n    return \"\
    No\";\n  }\n  if(digits > 3){\n    return \"No\";\n  }\n  var substr_after_dot\
    \ = file_name.substring(file_name.indexOf('.') + 1);\n  if(substr_after_dot !=\
    \ 'txt' && substr_after_dot != 'exe' && substr_after_dot != 'dll'){\n    return\
    \ \"No\";\n  }\n  return \"Yes\";\n}\n", "    if (file_name.length < 5) {\n  \
    \      return \"No\";\n    }\n    if (file_name.match(/[^\\d]\\d{3}/)) {\n   \
    \     return \"No\";\n    }\n    if (file_name.match(/\\d{1}\\./)) {\n       \
    \ return \"No\";\n    }\n    if (file_name.search(/[a-zA-Z]/)) {\n        return\
    \ \"No\";\n    }\n    if (file_name.match(/\\.{2}/)) {\n        return \"No\"\
    ;\n    }\n    if (file_name.match(/[a-zA-Z]\\d{1}/)) {\n        return \"No\"\
    ;\n    }\n    if (file_name.match(/\\.\\w{3}/)) {\n        return \"No\";\n  \
    \  }\n    if (file_name.match(/\\w{3}$/)) {\n        return \"No\";\n    }\n \
    \   if (file_name.match(/\\w{4}$/)) {\n        return \"No\";\n    }\n    if (file_name.match(/\\\
    w{2}$/)) {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "    if (!file_name)\
    \ return 'No';\n    let file_name_arr = file_name.split('.');\n    let digit_count\
    \ = 0;\n    let num_count = 0;\n    let alpha_count = 0;\n    let valid_extension\
    \ = false;\n    if (file_name_arr.length === 2) {\n        for (let i = 0; i <\
    \ file_name_arr[0].length; i++) {\n            if (/[0-9]/.test(file_name_arr[0][i]))\
    \ digit_count++;\n            if (/[a-zA-Z]/.test(file_name_arr[0][i])) alpha_count++;\n\
    \        }\n        if (digit_count > 3) return 'No';\n        if (alpha_count\
    \ === 0) return 'No';\n        for (let i = 0; i < file_name_arr[1].length; i++)\
    \ {\n            if (/[0-9]/.test(file_name_arr[1][i])) num_count++;\n       \
    \ }\n        if (num_count > 0) return 'No';\n        if (file_name_arr[1] ===\
    \ 'txt' || file_name_arr[1] === 'exe' || file_name_arr[1] === 'dll') {\n     \
    \       valid_extension = true;\n        }\n        if (valid_extension) return\
    \ 'Yes';\n    }\n    return 'No';\n}\n", "\t//TODO\n}\n", "\treturn /^[a-zA-Z][^.]*\\\
    .(txt|exe|dll)$/.test(file_name) && file_name.match(/[0-9]/g).length < 4 ? 'Yes'\
    \ : 'No';\n}\n", "  // .trim() to remove leading or trailing whitespace\n  var\
    \ file_name = file_name.trim();\n  // check if there are more than 3 digits in\
    \ the file's name\n  var has_more_than_3_digits = /[0-9]{4,}/.test(file_name);\n\
    \  // check if the file name contains exactly one dot '.'\n  var has_exactly_one_dot\
    \ = file_name.split('.').length - 1 === 1;\n  // check if the substring before\
    \ the dot is not empty and starts with a letter from the latin alphabet\n  var\
    \ before_dot = file_name.split('.')[0];\n  var not_empty_and_starts_with_letter\
    \ = /^[a-zA-Z]/.test(before_dot);\n  // check if the substring after the dot is\
    \ one of these: ['txt', 'exe', 'dll']\n  var after_dot = file_name.split('.')[1];\n\
    \  var is_txt_exe_dll = ['txt', 'exe', 'dll'].indexOf(after_dot) !== -1;\n  //\
    \ check if there are more than 3 digits in the file's name\n  var has_more_than_3_digits\
    \ = /[0-9]{4,}/.test(file_name);\n  // check all conditions\n  if(has_more_than_3_digits\
    \ === false && has_exactly_one_dot === true && not_empty_and_starts_with_letter\
    \ === true && is_txt_exe_dll === true){\n    return 'Yes';\n  }\n  return 'No';\n\
    }", "\tvar arr = file_name.split(\".\");\n\tvar file_name_valid = false;\n\tvar\
    \ number_count = 0;\n\tvar digits = \"0123456789\";\n\tvar letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n\tvar extensions = [\"txt\", \"exe\", \"dll\"];\n\tvar numbers = \"0123456789\"\
    ;\n\tvar dot_index = file_name.indexOf(\".\");\n\tvar first_name = file_name.substring(0,\
    \ dot_index);\n\tvar last_name = file_name.substring(dot_index + 1);\n\tif (arr.length\
    \ == 2) {\n\t\tif (first_name.length > 0) {\n\t\t\tif (letters.indexOf(first_name[0])\
    \ != -1) {\n\t\t\t\tfor (var i = 0; i < first_name.length; i++) {\n\t\t\t\t\t\
    if (numbers.indexOf(first_name[i]) != -1) {\n\t\t\t\t\t\tnumber_count += 1;\n\t\
    \t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (number_count <= 3) {\n\t\t\t\t\tif (extensions.indexOf(last_name)\
    \ != -1) {\n\t\t\t\t\t\tfile_name_valid = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t}\n\tif (file_name_valid) {\n\t\treturn \"Yes\";\n\t}\n\telse {\n\t\
    \treturn \"No\";\n\t}\n}\n", "    let file_name_regex = /[a-zA-Z]\\w*[.](txt|exe|dll)/\n\
    \    return file_name_regex.test(file_name) ? \"Yes\" : \"No\"\n}\n", "    var\
    \ dot_check = false;\n    var number_of_digits = 0;\n    var substring_check =\
    \ false;\n    var file_extension_check = false;\n    var file_type = \"\";\n \
    \   for(var i = 0; i < file_name.length; i++){\n        var character = file_name[i];\n\
    \        if(character.match(/[a-zA-Z]/)){\n            substring_check = true;\n\
    \        }\n        if(character.match(/[0-9]/)){\n            number_of_digits++;\n\
    \        }\n        if(character === \".\"){\n            dot_check = true;\n\
    \            file_type = file_name.substring(i+1);\n        }\n    }\n    if(number_of_digits\
    \ > 3){\n        return \"No\";\n    }\n    if(dot_check === false){\n       \
    \ return \"No\";\n    }\n    if(substring_check === false){\n        return \"\
    No\";\n    }\n    if(file_type === \"txt\" || file_type === \"exe\" || file_type\
    \ === \"dll\"){\n        file_extension_check = true;\n    }\n    if(file_extension_check\
    \ === false){\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "  if(file_name.search(/[0-9]/g)\
    \ > 3 || file_name.search(/[0-9]/g) === -1){\n    return \"No\";\n  }\n  if(file_name.search(/\\\
    ./g) === -1){\n    return \"No\";\n  }\n  if(file_name.search(/\\./g) > 0){\n\
    \    file_name = file_name.split(\".\");\n    if(!file_name[0].match(/[a-zA-Z]/g)){\n\
    \      return \"No\";\n    }\n    if(file_name[1] !== \"txt\" && file_name[1]\
    \ !== \"exe\" && file_name[1] !== \"dll\"){\n      return \"No\";\n    }\n  }\n\
    \  return \"Yes\";\n}", "    return /^[a-zA-Z][^0-9]{0,3}\\.(txt|exe|dll)$/.test(file_name)\
    \ ? \"Yes\" : \"No\";\n}", "    //check length and existance of '.'\n    var name_split\
    \ = file_name.split('.');\n    if (name_split.length!=2){\n        return \"No\"\
    ;\n    }\n    //check for digits\n    if (name_split[0].search(/\\d/g) > -1){\n\
    \        return \"No\";\n    }\n    //check for starting with letter\n    if (name_split[0].charAt(0).search(/[a-zA-Z]/g)\
    \ == -1){\n        return \"No\";\n    }\n    //check for type of file\n    if\
    \ (name_split[1] == \"txt\" || name_split[1] == \"exe\" || name_split[1] == \"\
    dll\"){\n        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n\
    }\n", "    let a =file_name.split(\".\")\n    let b = a[0].split(\"\")\n    let\
    \ n=0\n    let i=0\n    for(i=0;i<b.length;i++){\n        if(!isNaN(b[i])){\n\
    \            n+=1\n        }\n    }\n    if(a.length>2){\n        return \"No\"\
    \n    }\n    else if(a[0].length>3||n>3){\n        return \"No\"\n    }\n    else\
    \ if(a[1]!=\"txt\"&&a[1]!=\"exe\"&&a[1]!=\"dll\"){\n        return \"No\"\n  \
    \  }\n    else if(isNaN(a[0][0])){\n        return \"Yes\"\n    }\n    else{\n\
    \        return \"No\"\n    }\n}\n", "\tconst numbers_count = file_name.split(\"\
    \").filter(x => \"0\" <= x && x <= \"9\").length;\n\tif (numbers_count > 3)\n\t\
    \treturn \"No\";\n\tconst dot_count = file_name.split(\"\").filter(x => x == \"\
    .\").length;\n\tif (dot_count != 1)\n\t\treturn \"No\";\n\tconst substrings =\
    \ file_name.split(\".\");\n\tif (substrings.length != 2)\n\t\treturn \"No\";\n\
    \tconst first_substring = substrings[0];\n\tif (first_substring == \"\")\n\t\t\
    return \"No\";\n\tconst last_substring = substrings[1];\n\tif (last_substring\
    \ != \"txt\" && last_substring != \"exe\" && last_substring != \"dll\")\n\t\t\
    return \"No\";\n\tconst letters = first_substring.split(\"\").filter(x => \"a\"\
    \ <= x && x <= \"z\" || \"A\" <= x && x <= \"Z\");\n\tif (letters.length == 0)\n\
    \t\treturn \"No\";\n\treturn \"Yes\";\n}\n", "    return !(file_name.length -\
    \ file_name.replace(/[0-9]/g, '').length > 3 || \n    file_name.indexOf('.') !==\
    \ file_name.lastIndexOf('.') || \n    file_name.indexOf('.') === 0 || \n    /[^a-zA-Z]/.test(file_name.charAt(0))\
    \ || \n    ['txt', 'exe', 'dll'].indexOf(file_name.split('.')[1]) < 0);\n}\n",
  "\tvar ret = \"No\";\n\tvar file_ext = file_name.substring(file_name.lastIndexOf(\"\
    .\")+1);\n\tvar file_name_without_ext = file_name.substring(0, file_name.lastIndexOf(\"\
    .\"));\n\tvar count = 0;\n\tfor(var i = 0; i < file_name_without_ext.length; i++){\n\
    \t\tif(file_name_without_ext[i] >= '0' && file_name_without_ext[i] <= '9'){\n\t\
    \t\tcount++;\n\t\t}\n\t}\n\tif(count <= 3 && (file_ext == \"txt\" || file_ext\
    \ == \"exe\" || file_ext == \"dll\")\n\t\t&& /^[a-zA-Z]/.test(file_name_without_ext)\
    \ && \n\t\tfile_name.indexOf(\".\") != -1 && file_name.indexOf(\".\") != 0 \n\t\
    \t&& file_name.indexOf(\".\") != file_name.length-1){\n\t\tret = \"Yes\";\n\t\
    }\n\treturn ret;\n}\n", "    //count the number of digits in the file name\n \
    \   let number_of_digits = 0;\n    for(let i = 0; i < file_name.length; i++){\n\
    \        if(file_name[i] >= '0' && file_name[i] <= '9'){\n            number_of_digits++;\n\
    \        }\n    }\n    //check if the number of digits is more than 3\n    if(number_of_digits\
    \ > 3){\n        return \"No\";\n    }\n    //count the number of dots in the\
    \ file name\n    let number_of_dots = 0;\n    for(let i = 0; i < file_name.length;\
    \ i++){\n        if(file_name[i] == '.'){\n            number_of_dots++;\n   \
    \     }\n    }\n    //check if the number of dots is not equal to 1\n    if(number_of_dots\
    \ != 1){\n        return \"No\";\n    }\n    //check if the file name is empty\n\
    \    if(file_name.length == 0){\n        return \"No\";\n    }\n    //check if\
    \ the file name starts with a latin alphabet character\n    let first_character\
    \ = file_name[0];\n    if(!((first_character >= 'a' && first_character <= 'z')\
    \ || (first_character >= 'A' && first_character <= 'Z'))){\n        return \"\
    No\";\n    }\n    //check if the suffix is not 'txt', 'exe', or 'dll'\n    let\
    \ dot_index = file_name.indexOf('.');\n    let file_suffix = file_name.substring(dot_index+1);\n\
    \    if(file_suffix != 'txt' && file_suffix != 'exe' && file_suffix != 'dll'){\n\
    \        return \"No\";\n    }\n    return \"Yes\";\n}\n", "    var n = file_name.length;\n\
    \    var digit_count = 0;\n    var dot_count = 0;\n    var have_dot = false;\n\
    \    var dot_index = 0;\n    var post_dot = '';\n    for(var i = 0; i < n; i++){\n\
    \        var c = file_name[i];\n        if (c >= '0' && c <= '9') {\n        \
    \    digit_count++;\n        } else if (c == '.') {\n            dot_count++;\n\
    \            have_dot = true;\n            dot_index = i;\n        }\n    }\n\
    \    if (digit_count > 3 || dot_count > 1 || !have_dot || dot_index < 1) {\n \
    \       return 'No';\n    } else {\n        var c = file_name[0];\n        if\
    \ (c < 'a' || c > 'z' && c < 'A' || c > 'Z') {\n            return 'No';\n   \
    \     } else {\n            post_dot = file_name.substring(dot_index + 1);\n \
    \           if (post_dot != 'txt' && post_dot != 'exe' && post_dot != 'dll') {\n\
    \                return 'No';\n            } else {\n                return 'Yes';\n\
    \            }\n        }\n    }\n}\n", "\n}\n", "\tfile_name = file_name.split('.');\n\
    \tvar name = file_name[0],\n\t\textension = file_name[1];\n\tif( name[0].match(/[a-zA-Z]/)\
    \ &&\n\t\textension.match(/txt|exe|dll/) &&\n\t\tname.match(/\\d{4}/) == null\
    \ &&\n\t\tfile_name.length == 2 ){\n\t\treturn \"Yes\";\n\t}\n\treturn \"No\"\
    ;\n}\n", "\n}\n", "\tvar n = file_name.match(/[0-9]/g);\n\tvar temp = file_name.split(\"\
    .\");\n\tif(n.length > 3 || temp.length != 2){\n\t\treturn \"No\";\n\t}\n\tif(!temp[0].match(/[a-zA-Z]/g)\
    \ || !temp[1].match(/[a-zA-Z]/g)){\n\t\treturn \"No\";\n\t}\n\tif(temp[1] == \"\
    txt\" || temp[1] == \"exe\" || temp[1] == \"dll\"){\n\t\treturn \"Yes\";\n\t}else{\n\
    \t\treturn \"No\";\n\t}\n}", "    if(typeof file_name === \"string\"){\n     \
    \   const count_digits = (sub_string) => {\n            let count = 0;\n     \
    \       for(let i = 0; i < sub_string.length; i++){\n                if(!isNaN(sub_string[i])){\n\
    \                    count ++;\n                }\n            }\n           \
    \ return count;\n        }\n        let sub_strings = file_name.split(\".\");\n\
    \        if(sub_strings.length == 2){\n            let sub_str_1 = sub_strings[0];\n\
    \            let sub_str_2 = sub_strings[1];\n            if(sub_str_1.length\
    \ > 0 && (sub_str_1[0] >= 'a' && sub_str_1[0] <= 'z' || sub_str_1[0] >= 'A' &&\
    \ sub_str_1[0] <= 'Z')){\n                if(count_digits(sub_str_1) <= 3){\n\
    \                    if(sub_str_2 == \"txt\" || sub_str_2 == \"exe\" || sub_str_2\
    \ == \"dll\"){\n                        return \"Yes\";\n                    }\n\
    \                }\n            }\n        }\n    }\n    return \"No\";\n}", " \
    \   if (!file_name.includes('.')) {\n        return 'No';\n    }\n    let index\
    \ = file_name.indexOf('.');\n    let letter = file_name[0];\n    let ext = file_name.slice(index\
    \ + 1);\n    let digits = 0;\n    for (let i = 0; i < file_name.length; i++) {\n\
    \        if (file_name[i] >= '0' && file_name[i] <= '9') {\n            digits++;\n\
    \        }\n    }\n    if (index === 0 || digits > 3 || ext !== 'txt' && ext !==\
    \ 'exe' && ext !== 'dll') {\n        return 'No';\n    }\n    if (letter >= 'a'\
    \ && letter <= 'z' || letter >= 'A' && letter <= 'Z') {\n        return 'Yes';\n\
    \    }\n    return 'No';\n}\n", "    digits = ['0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9']\n    ext = ['txt', 'exe', 'dll']\n    if (file_name.indexOf('.')\
    \ == -1) {\n        return 'No'\n    }\n    digits_cnt = 0\n    for (let index\
    \ = 0; index < file_name.length; index++) {\n        if (digits.includes(file_name[index]))\
    \ {\n            digits_cnt += 1\n        }\n    }\n    if (digits_cnt > 3) {\n\
    \        return 'No'\n    }\n    splitted = file_name.split('.')\n    if (splitted[0]\
    \ == '') {\n        return 'No'\n    }\n    if (ext.includes(splitted[1])) {\n\
    \        return 'Yes'\n    }\n    return 'No'\n}\n", "    let nums = file_name.replace(/[^0-9]/g,\
    \ '');\n    let dot = file_name.indexOf('.');\n    let first = file_name.substring(0,\
    \ dot);\n    let second = file_name.substring(dot + 1);\n    let names = ['txt',\
    \ 'exe', 'dll'];\n    if(nums.length > 3){\n        return 'No';\n    }\n    if(dot\
    \ === -1){\n        return 'No';\n    }\n    if(first === '' || (/[^a-zA-Z]/g).test(first)){\n\
    \        return 'No';\n    }\n    if(!names.includes(second)){\n        return\
    \ 'No';\n    }\n    return 'Yes';\n}", "\t//1. A file's name is considered to\
    \ be valid if and only if all the following conditions \n\t//are met:\n\tif(file_name.length\
    \ >3){\n\t\t//2. There should not be more than three digits ('0'-'9') in the file's\
    \ name.\n\t\tif(file_name[0] != \"0\" || file_name[0] != \"1\" || file_name[0]\
    \ != \"2\" || file_name[0] != \"3\" || file_name[0] != \"4\" || file_name[0] !=\
    \ \"5\" || file_name[0] != \"6\" || file_name[0] != \"7\" || file_name[0] != \"\
    8\" || file_name[0] != \"9\"){\n\t\t\t//3. The file's name contains exactly one\
    \ dot '.'\n\t\t\tvar num_dots = 0;\n\t\t\tfor(var i = 0; i < file_name.length;\
    \ i++){\n\t\t\t\tif(file_name[i] == \".\"){\n\t\t\t\t\tnum_dots += 1;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t\tif(num_dots == 1){\n\t\t\t\t//4. The substring before the dot\
    \ should not be empty, and it starts with a letter \n\t\t\t\t//from the latin\
    \ alphapet ('a'-'z' and 'A'-'Z').\n\t\t\t\tvar after_dot = file_name.split(\"\
    .\")[1];\n\t\t\t\tvar before_dot = file_name.split(\".\")[0];\n\t\t\t\tvar acceptable_endings\
    \ = [\"txt\", \"exe\", \"dll\"];\n\t\t\t\tif(acceptable_endings.includes(after_dot)){\n\
    \t\t\t\t\tif(before_dot[0] == \"a\" || before_dot[0] == \"b\" || before_dot[0]\
    \ == \"c\" || before_dot[0] == \"d\" || before_dot[0] == \"e\" || before_dot[0]\
    \ == \"f\" || before_dot[0] == \"g\" || before_dot[0] ==", "\n}\n", "\n}\n\n\n",
  "    let parts = file_name.split('.');\n    if (parts.length != 2) return \"No\"\
    ;\n    if (parts[0].match(/\\d/g) && parts[0].match(/\\d/g).length > 3) return\
    \ \"No\";\n    if (!(parts[1] == \"txt\" || parts[1] == \"exe\" || parts[1] ==\
    \ \"dll\")) return \"No\";\n    if (!parts[0].match(/^[a-zA-Z]/)) return \"No\"\
    ;\n    return \"Yes\";\n}\n", "\tvar arr = file_name.split(\".\");\n\tvar format\
    \ = [\"txt\", \"exe\", \"dll\"];\n\tvar rx = new RegExp(\"^[a-zA-Z]+$\");\n\t\
    var count = 0;\n\tfor(var i = 0; i < file_name.length; i++){\n\t\tif(file_name[i]\
    \ >= '0' && file_name[i] <= '9'){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif(arr.length\
    \ != 2 || count > 3 || !rx.test(arr[0]) || !(format.indexOf(arr[1]) >= 0)){\n\t\
    \treturn \"No\";\n\t}\n\treturn \"Yes\";\n}", "  var arr = file_name.split(\"\
    .\");\n  if (arr.length != 2) return \"No\";\n  if (arr[0].length <= 0) return\
    \ \"No\";\n  if (arr[0].match(/[^0-9]/).length === 0) return \"No\";\n  if (arr[0].match(/[^0-9a-zA-Z]/).length\
    \ > 0) return \"No\";\n  if (arr[1] != \"txt\" && arr[1] != \"exe\" && arr[1]\
    \ != \"dll\") return \"No\";\n  return \"Yes\";\n}\n", "\tif (!file_name.match(/^[a-zA-Z]+/))\
    \ return \"No\";\n\tif (!file_name.match(/\\..+$/)) return \"No\";\n\tif (file_name.split(\"\
    .\").pop() != \"txt\" && file_name.split(\".\").pop() != \"exe\" && file_name.split(\"\
    .\").pop() != \"dll\") return \"No\";\n\tif (file_name.match(/\\d{4,}/)) return\
    \ \"No\";\n\treturn \"Yes\";\n}", "    //Check if there is more than 3 digits\n\
    \    var regex = /[0-9]{4,}/\n    if(regex.test(file_name)){\n        return \"\
    No\"\n    }\n    //Check if there is exactly one dot\n    var regex = /\\./g\n\
    \    var count = file_name.match(regex)\n    if(count.length != 1){\n        return\
    \ \"No\"\n    }\n    //Check if the substring before the dot is empty or starts\
    \ with a number\n    var index = file_name.indexOf(\".\")\n    var sub_string\
    \ = file_name.substring(0, index)\n    var regex = /[0-9]/\n    if(sub_string.length\
    \ == 0 || regex.test(sub_string)){\n        return \"No\"\n    }\n    //Check\
    \ if the substring after the dot is 'txt', 'exe', or 'dll'\n    var sub_string\
    \ = file_name.substring(index+1, file_name.length)\n    if(sub_string == \"txt\"\
    \ || sub_string == \"exe\" || sub_string == \"dll\"){\n        return \"Yes\"\n\
    \    }else{\n        return \"No\"\n    }\n}\n", "    //Write your code here\n\
    }\n", "    return /^[a-zA-Z][\\d]{0,3}\\.txt|exe|dll$/.test(file_name) ? \"Yes\"\
    \ : \"No\";\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
