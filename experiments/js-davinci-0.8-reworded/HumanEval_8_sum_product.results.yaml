language: js
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length == 0){\n        return [0, 1];\n    }\n    let sum = 0;\n\
    \    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 1
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    return [numbers.reduce((a,b) => a+b),numbers.reduce((a,b) => a*b)]\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpeu87oa__.js:8\n    return [numbers.reduce((a,b) => a+b),numbers.reduce((a,b)\
    \ => a*b)]\n                    ^\n\nTypeError: Reduce of empty array with no\
    \ initial value\n    at Array.reduce (<anonymous>)\n    at sum_product (/tmp/tmpeu87oa__.js:8:21)\n\
    \    at test (/tmp/tmpeu87oa__.js:15:20)\n    at Object.<anonymous> (/tmp/tmpeu87oa__.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var prod = 1;\n    for(var i = 0; i < numbers.length; i++){\n\
    \        sum += numbers[i];\n        prod *= numbers[i];\n    }\n    var result\
    \ = [sum, prod];\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length===0){\n        return [0,1];\n    }\n    else{\n      \
    \  var sum = 0;\n        var product = 1;\n        for(var i=0;i<numbers.length;i++){\n\
    \            sum+=numbers[i];\n            product*=numbers[i];\n        }\n \
    \       return [sum,product];\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 1
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  \n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpy2cmrxg7.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmpy2cmrxg7.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    // return numbers.length === 0 ? [0, 1] : [numbers.reduce((x, y) => x + y),\
    \ numbers.reduce((x, y) => x * y)];\n    return numbers.length === 0 ? [0, 1]\
    \ : [numbers.reduce((a, b) => a + b), numbers.reduce((a, b) => a * b)];\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var arr = [];\n    var sum = 0;\n    var product = 1;\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        sum += numbers[i];\n        product *= numbers[i];\n\
    \    }\n    arr.push(sum);\n    arr.push(product);\n    return arr;\n}\nvar sum_product_test\
    \ = sum_product([1, 2, 3, 4]);\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let emptyArray = []\n    let emptySum = 0\n    let emptyProduct = 1\n   \
    \ for(let i = 0; i < numbers.length; i++){\n        emptySum += numbers[i]\n \
    \       emptyProduct *= numbers[i]\n    }\n    emptyArray.push(emptySum, emptyProduct)\n\
    \    return emptyArray\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum=0, product=1;\n    for(var i=0; i<numbers.length; i++){\n       \
    \ sum=sum+numbers[i];\n        product=product*numbers[i];\n    }\n    return\
    \ [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0\n  var product = 1\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length === 0){\n        return [0, 1];\n    }\n    var sum = 0;\n\
    \    var product = 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length === 0){\n        return [0, 1];\n    }\n    let sum = 0;\n\
    \    let prod = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum\
    \ += numbers[i];\n        prod *= numbers[i];\n    }\n    return [sum, prod];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0\n    var product = 1\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n  \
    \  return [sum, product]\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length == 0){\n        return [0, 1];\n    }\n    else{\n    \
    \    var sum = 0;\n        var product = 1;\n        for(var i = 0; i < numbers.length;\
    \ i++){\n            sum += numbers[i];\n            product *= numbers[i];\n\
    \        }\n        return [sum, product];\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let number of numbers){\n   \
    \     sum += number;\n        product *= number;\n    }\n    return [sum, product];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 1
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \treturn numbers.reduce(function(acc,val){\n\t\tif(acc.length === 0){\n\t\t\t\
    acc.push(val,val);\n\t\t}else{\n\t\t\tacc[0] += val;\n\t\t\tacc[1] *= val;\n\t\
    \t}\n\t\treturn acc;\n\t},[]);\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp7fk1kkum.js:24:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp7fk1kkum.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  return [numbers.reduce((acc, curr) => acc + curr, 0), numbers.reduce((acc,\
    \ curr) => acc * curr, 1)];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \tvar sum = 0;\n\tvar product = 1;\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn [sum, product];\n\
    }\nvar a = sum_product([1, 2, 3, 4]);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length === 0){\n        return [0, 1];\n    }\n    let sum = 0;\n\
    \    let product = 1;\n    for(let number of numbers){\n        sum += number;\n\
    \        product *= number;\n    }\n    return [sum, product];\n}\n\nlet sum_product_test\
    \ = [[], [1, 2, 3, 4], [1, 2, 3, 4, 5]];\nfor(let number of sum_product_test){\n\
    \    console.log(sum_product(number));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[ 0, 1 ]

    [ 10, 24 ]

    [ 15, 120 ]

    '
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum=0;\n  var product=1;\n  for(var i=0;i<numbers.length;i++){\n    sum+=numbers[i];\n\
    \    product*=numbers[i];\n  }\n  return [sum,product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 1
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    if(numbers.length == 0){\n      \
    \  return \"empty array\";\n    }\n    for(var i = 0; i < numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    var sum_product\
    \ = [];\n    sum_product.push(sum);\n    sum_product.push(product);\n    return\
    \ sum_product;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'empty array'\n\
    \nshould loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpushcem0x.js:27:10)\n\
    \    at Object.<anonymous> (/tmp/tmpushcem0x.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'empty array',\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   var array = [sum, product];\n    return array;\n}\nvar array = sum_product([1,\
    \ 2, 3, 4]);\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    //return an array\n    //sum = arr[0], product = arr[1]\n    var sum = 0;\n\
    \    var product = 1;\n    if(numbers.length === 0){\n        return [0, 1];\n\
    \    }else{\n        for(var i = 0; i < numbers.length; i++){\n            sum\
    \ += numbers[i];\n            product *= numbers[i];\n        }\n        return\
    \ [sum, product];\n    }\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 1
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    // return [numbers.reduce((acc, num) => acc + num, 0), numbers.reduce((acc,\
    \ num) => acc * num, 1)];\n    return [numbers.reduce((acc, num) => acc + num),\
    \ numbers.reduce((acc, num) => acc * num)];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpzk1ah6wt.js:9\n    return [numbers.reduce((acc, num) => acc + num),\
    \ numbers.reduce((acc, num) => acc * num)];\n                    ^\n\nTypeError:\
    \ Reduce of empty array with no initial value\n    at Array.reduce (<anonymous>)\n\
    \    at sum_product (/tmp/tmpzk1ah6wt.js:9:21)\n    at test (/tmp/tmpzk1ah6wt.js:17:20)\n\
    \    at Object.<anonymous> (/tmp/tmpzk1ah6wt.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    if(numbers.length === 0){\n     \
    \   return [0, 1];\n    }\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    return [numbers.reduce((acc, curr) => acc + curr, 0), numbers.reduce((acc,\
    \ curr) => acc * curr, 1)];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(i = 0; i < numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return([sum,\
    \ product]);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let number of numbers){\n   \
    \     sum += number;\n        product *= number;\n    }\n    return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  var result = [sum,\
    \ product];\n  return result;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var total_sum = 0;\n    var total_product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        total_sum += numbers[i];\n        total_product *= numbers[i];\n\
    \    }\n    return [total_sum, total_product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum=0;\n  var product=1;\n  if(numbers.length==0){\n    return [0,1];\n\
    \  }\n  for(var i=0;i<numbers.length;i++){\n    sum+=numbers[i];\n    product*=numbers[i];\n\
    \  }\n  return [sum,product];\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    var result = [];\nvar sum = 0;\nvar product = 1;\nif (numbers.length === 0){\n\
    \    result.push(sum);\n    result.push(product);\n    return result;\n}\nfor\
    \ (var i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n    product *=\
    \ numbers[i];\n}\nresult.push(sum);\nresult.push(product);\nreturn result;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    numbers.forEach(function(element){\n\
    \        sum += element;\n        product *= element;\n    });\n    return [sum,\
    \ product];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let summ = 0;\n    let product = 1;\n    for (let i = 0; i < numbers.length;\
    \ i++){\n        summ += numbers[i];\n        product *= numbers[i];\n    }\n\
    \    return [summ, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length == 0){\n        return [0, 1];\n    }\n    let sum = 0;\n\
    \    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(i=0; i<numbers.length; i++){\n    sum\
    \ += numbers[i];\n    product *= numbers[i];\n  }\n  var result = [sum, product];\n\
    \  return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \   var sum = 0;\n   var product = 1;\n    for(i = 0; i < numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    if(numbers.length === 0){\n     \
    \   return [0, 1];\n    }\n    for(let i = 0; i < numbers.length; i++){\n    \
    \    sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    if(numbers.length == 0){\n      \
    \  return [0, 1];\n    }\n    else{\n        for(let i=0; i<numbers.length; i++){\n\
    \            sum += numbers[i];\n            product *= numbers[i];\n        }\n\
    \        return [sum, product];\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    // your code here\n    var sum = 0;\n    var product = 1;\n    if (numbers.length\
    \ == 0){\n        return [0, 1];\n    }\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    if(numbers.length == 0){\n      \
    \  return [0, 1];\n    }\n    for(let i = 0; i < numbers.length; i++){\n     \
    \   sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum=0;\n  var product=1;\n  if(numbers.length>0){\n    for(i=0;i<numbers.length;i++){\n\
    \      sum=sum+numbers[i];\n      product=product*numbers[i];\n    }\n  }\n  return\
    \ [sum,product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \tvar result = [0,1];\n\tif(numbers.length == 0){\n\t\treturn result;\n\t}else{\n\
    \t\tfor(var i = 0; i < numbers.length; i++){\n\t\t\tresult[0] += numbers[i];\n\
    \t\t\tresult[1] *= numbers[i];\n\t\t}\n\t\treturn result;\n\t}\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum=0;\n    let product=1;\n    for(let i=0;i<numbers.length;i++){\n\
    \        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return [sum,product];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(i=0; i<numbers.length; i++){\n    sum\
    \ += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0\n    var product = 1\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n  \
    \  return [sum, product]\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let num of numbers){\n      \
    \  sum = sum + num;\n        product = product * num;\n    }\n    return [sum,\
    \ product];\n}\n\nlet numbers = [];\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    return [numbers.reduce((x,y) => x+y, 0), numbers.reduce((x,y) => x*y, 1)];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0;\n  let prod = 1;\n  for(let num of numbers){\n    sum += num;\n\
    \    prod *= num;\n  }\n  return [sum, prod];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    if(numbers.length == 0){\n      \
    \  return[0,1];\n    }\n    for(let i = 0; i < numbers.length; i++){\n       \
    \ sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length > 0){\n        let sum = 0;\n        let prod = 1;\n  \
    \      for(let i=0; i<numbers.length; i++){\n            sum = sum + numbers[i];\n\
    \            prod = prod * numbers[i];\n        }\n        return [sum, prod];\n\
    \    }\n    else{\n        return [0, 1];\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length === 0){\n        return [0, 1];\n    }\n    var sum = 0;\n\
    \    var prod = 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum\
    \ += numbers[i];\n        prod *= numbers[i];\n    }\n    return [sum, prod];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length==0){\n        return [0,1];\n    }\n    else{\n       \
    \ let sum=0;\n        let product=1;\n        for(let i=0;i<numbers.length;i++){\n\
    \            sum+=numbers[i];\n            product*=numbers[i];\n        }\n \
    \       return [sum,product];\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let number of numbers){\n   \
    \     sum += number;\n        product *= number;\n    }\n    return [sum, product];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    return [numbers.reduce((a, b) => a + b, 0), numbers.reduce((a, b) => a *\
    \ b, 1)];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length === 0){\n        return [0, 1];\n    }\n\n    let product\
    \ = 1;\n    let sum = 0;\n    for(let i = 0; i < numbers.length; i++){\n     \
    \   sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(const number of numbers){\n \
    \       sum += number;\n        product *= number;\n    }\n    return [sum, product];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length === 0){\n        return [0, 1];\n    }\n    var sum = 0;\n\
    \    var product = 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let output = []\n    let sum = 0\n    let product = 1\n    for(let i = 0;\
    \ i < numbers.length; i++){\n        sum += numbers[i]\n        product *= numbers[i]\n\
    \    }\n    output.push(sum)\n    output.push(product)\n    return output\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let result = []\n    let sum = 0\n    let product = 1\n    if (numbers.length\
    \ == 0){\n        result.push(sum, product)\n        return result\n    } else\
    \ {\n        for (let i = 0; i < numbers.length; i++){\n            sum += numbers[i]\n\
    \            product *= numbers[i]\n        }\n        result.push(sum, product)\n\
    \        return result\n    }\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \tlet sum = 0;\n\tlet product = 1;\n\tfor(let n of numbers){\n\t\tsum += n;\n\t\
    \tproduct *= n;\n\t}\n\treturn [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum=0,product=1;\n    for(var i=0;i<numbers.length;i++){\n        sum+=numbers[i];\n\
    \        product*=numbers[i];\n    }\n    return [sum,product];\n}\nvar arr =\
    \ [1,2,3,4,5];\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  if (numbers.length == 0){\n    return [0,\
    \ 1];\n  } else {\n    for (var i = 0; i < numbers.length; i++){\n      sum +=\
    \ numbers[i];\n      product *= numbers[i];\n    }\n    return [sum, product];\n\
    \  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    if(numbers.length > 0){\n       \
    \ for(let i = 0; i < numbers.length; i++){\n            sum += numbers[i];\n \
    \           product *= numbers[i];\n        }\n    }\n    return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = numbers.reduce(function(a, b){\n        return a + b;\n    }, 0);\n\
    \    var product = numbers.reduce(function(a, b){\n        return a * b;\n   \
    \ }, 1);\n    return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    //max = numbers[0];\n    //min = numbers[0];\n    sum = 0;\n    product =\
    \ 1;\n    if (numbers.length == 0){\n        return [0, 1];\n    } else {\n  \
    \      for (var i = 0; i < numbers.length; i++){\n            sum += numbers[i];\n\
    \            product *= numbers[i];\n        }\n        return [sum, product];\n\
    \    }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 1
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    // Implemenet me\n    return [0, 1];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  3,\n  1\n]\n    at test (/tmp/tmpewhvk0kp.js:18:10)\n\
    \    at Object.<anonymous> (/tmp/tmpewhvk0kp.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1 ],\n\
    \  expected: [ 3, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   var answer = [sum, product];\n    return answer;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let x=0; x<numbers.length; x++){\n\
    \        sum = sum + numbers[x];\n        product = product * numbers[x];\n  \
    \  }\n    return [sum, product];\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = numbers.reduce(function(a, b){\n        return a + b;\n    }, 0);\n\
    \    var product = numbers.reduce(function(a, b){\n        return a * b;\n   \
    \ }, 1);\n    return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0\n    var product = 1\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n   \
    \ return [sum, product]\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  let sum = 0\n  let product = 1\n  for (var i = 0; i < numbers.length; i++)\
    \ {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var my_sum = 0;\n    var my_product = 1;\n    for (var i = 0; i < numbers.length;\
    \ i++){\n        my_sum += numbers[i];\n        my_product *= numbers[i];\n  \
    \  }\n    return [my_sum, my_product];\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \tvar sum = 0;\n\tvar product = 1;\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length === 0){\n    return [0, 1];\n  }\n  let s = 0;\n  let p =\
    \ 1;\n  for(let i = 0; i < numbers.length; i++){\n    s += numbers[i];\n    p\
    \ *= numbers[i];\n  }\n  return [s, p];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    return numbers.reduce((x, y) => [x[0] + y, x[1] * y], [0, 1]);\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    numbers.forEach(function(number){\n\
    \        sum += number;\n        product *= number;\n    });\n    return [sum,\
    \ product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var product = 1;\n    var sum = 0;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        product *= numbers[i];\n        sum += numbers[i];\n    }\n \
    \   if(numbers.length == 0){\n        product = 1;\n        sum = 0;\n    }\n\
    \    return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0\n    let product = 1\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n   \
    \ return [sum, product]\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    // BEGIN: Code that you need to test\n    var sum = 0;\n    var product =\
    \ 1;\n    for (var i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n\
    \        product *= numbers[i];\n    }\n    return [sum, product];\n    // END:\
    \ Code that you need to test\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var pro = 1;\n    for(var i = 0; i < numbers.length; i++){\n\
    \        sum += numbers[i];\n        pro *= numbers[i];\n    }\n    return [sum,\
    \ pro];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    //TODO: implement this function.\n    var sum = numbers.reduce(function(a,\
    \ b) { return a + b; }, 0);\n    var product = numbers.reduce(function(a, b) {\
    \ return a * b; }, 1);\n    return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   var results = [sum, product];\n    return results;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 1
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let prod = 1;\n    for(let i = 0; i < numbers.length; i++){\n\
    \        sum += numbers[i];\n        prod *= numbers[i];\n    }\n    console.log(sum,\
    \ prod);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp__boc7jw.js:22:10)\n\
    \    at Object.<anonymous> (/tmp/tmp__boc7jw.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0 1

    '
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    // sum = 0;\n    // product = 1;\n    // for(let i = 0; i < numbers.length;\
    \ i++){\n    //     sum += numbers[i];\n    //     product *= numbers[i];\n  \
    \  // }\n    // let result = [sum, product];\n    // return result;\n    return\
    \ [numbers.reduce((acc, currentValue) => acc + currentValue, 0),\n           \
    \ numbers.reduce((acc, currentValue) => acc * currentValue, 1)];\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let [sum, product] = [0, 1];\n    numbers.forEach(num => {\n        sum +=\
    \ num;\n        product *= num;\n    });\n    return [sum, product];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var res = numbers.reduce(function(acc, next){\n        return {sum: acc.sum\
    \ + next, product: acc.product * next};\n    }, {sum: 0, product: 1});\n    return\
    \ [res.sum, res.product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum=0,product=1;\n    for(let i=0;i<numbers.length;i++){\n        sum=sum+numbers[i];\n\
    \        product=product*numbers[i];\n    }\n    return [sum,product];\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    sum = 0;\n    product = 1;\n    for(let i = 0; i < numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return[sum,\
    \ product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum_of_numbers = 0;\n    var product_of_numbers = 1;\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        sum_of_numbers += numbers[i];\n      \
    \  product_of_numbers *= numbers[i];\n    }\n    return [sum_of_numbers, product_of_numbers];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    //check if it is an array and if it is not empty\n    if(numbers instanceof\
    \ Array && numbers.length !== 0){\n        //sum\n        let sum = 0;\n     \
    \   //product\n        let product = 1;\n        //iterate through array\n   \
    \     for(let i = 0; i < numbers.length; i++){\n            //sum each number\n\
    \            sum += numbers[i];\n            //product each number\n         \
    \   product *= numbers[i];\n        }\n        //return the sum and product\n\
    \        return [sum, product];\n    }\n    //if empty return the required output\n\
    \    return [0, 1];\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length===0){\n        return [0,1];\n    }else{\n        let sum\
    \ = 0;\n        let product = 1;\n        for(let i = 0; i < numbers.length; i++){\n\
    \            sum += numbers[i];\n            product *= numbers[i];\n        }\n\
    \        return [sum, product];\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    // function numbers(){\n        var sum = 0;\n        var product = 1;\n\
    \        for(var i = 0; i < numbers.length; i++){\n            sum += numbers[i];\n\
    \            product *= numbers[i];\n        }\n        return [sum, product];\n\
    \    // }\n}\nvar result = sum_product([1, 2, 3, 4]);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    sum = 0;\n    product = 1;\n    if (numbers.length === 0){\n        return\
    \ [sum, product];\n    } else {\n        for (let i = 0; i < numbers.length; i++){\n\
    \            sum += numbers[i];\n            product *= numbers[i];\n        }\n\
    \        return [sum, product];\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    if(numbers.length === 0){\n     \
    \   return [0, 1];\n    }\n    for(let i = 0; i < numbers.length; i++){\n    \
    \    sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum=0;\n    var product=1;\n    for(var i=0;i<numbers.length;i++){\n\
    \        sum=sum+numbers[i];\n        product=product*numbers[i];\n    }\n   \
    \ return [sum,product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 1
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \   //TODO\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmp_vwxs_dm.js:16:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_vwxs_dm.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0\n    let product = 1\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n   \
    \ return [sum, product]\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(i=0; i<numbers.length; i++){\n\
    \        sum = sum + numbers[i];\n        product = product * numbers[i];\n  \
    \  }\n    return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length === 0){\n        return [0, 1];\n    }\n    else{\n   \
    \     let sum = 0;\n        let product = 1;\n        for(let i = 0; i < numbers.length;\
    \ i++){\n            sum += numbers[i];\n            product *= numbers[i];\n\
    \        }\n        return [sum, product];\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length === 0){\n        return [0, 1];\n    }else{\n        let\
    \ sum = 0;\n        let product = 1;\n        for(let i = 0; i < numbers.length;\
    \ i++){\n            sum += numbers[i];\n            product *= numbers[i];\n\
    \        }\n        return [sum, product];\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let result = [];\n    let sum = 0;\n    let product = 1;\n    if(numbers.length\
    \ == 0){\n        result.push(sum);\n        result.push(product);\n        return\
    \ result;\n    }\n    for(let i = 0; i < numbers.length; i++){\n        sum +=\
    \ numbers[i];\n        product *= numbers[i];\n    }\n    result.push(sum);\n\
    \    result.push(product);\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length == 0){\n        return [0, 1];\n    }\n    var sum = 0;\n\
    \    var product = 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(i=0; i<numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum=0,prod=1;\n  for(var i=0;i<numbers.length;i++){\n    sum+=numbers[i];\n\
    \    prod*=numbers[i];\n  }\n  return [sum,prod];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var result = [0, 1];\n    for (var i = 0; i < numbers.length; i++){\n   \
    \     result[0] += numbers[i];\n        result[1] *= numbers[i];\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = numbers.reduce((total, current) => total + current, 0);\n    let\
    \ product = numbers.reduce((total, current) => total * current, 1);\n    return\
    \ [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    if(numbers.length == 0){\n      \
    \  return [0, 1];\n    }\n    for(i = 0; i < numbers.length; i++){\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i=0; i<numbers.length; i++){\n\
    \        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return\
    \ [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    if(numbers.length == 0){\n      \
    \  return [0, 1];\n    }\n    for(let num of numbers){\n        sum += num;\n\
    \        product *= num;\n    }\n    return [sum, product];\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  if(numbers.length == 0){\n    return [0, 1];\n  }\n  else{\n    var sum = 0;\n\
    \    var product = 1;\n    for(var i = 0; i < numbers.length; i++){\n      sum\
    \ += numbers[i];\n      product *= numbers[i];\n    }\n    return [sum, product];\n\
    \  }\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let prod = 1;\n    for(let i = 0; i < numbers.length; i++){\n\
    \        sum += numbers[i];\n        prod *= numbers[i];\n    }\n    return [sum,\
    \ prod];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    var sum = 0;\nvar product = 1;\nfor (var i = 0; i < numbers.length; i++){\n  sum\
    \ += numbers[i];\n  product *= numbers[i];\n}\n\nreturn [sum, product];\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    var result = []\nvar total = 0\nfor (var i = 0; i < numbers.length; i++) {\n \
    \ total += numbers[i]\n}\nresult.push(total)\nvar product = 1\nfor (var i = 0;\
    \ i < numbers.length; i++) {\n  product *= numbers[i]\n}\nresult.push(product)\n\
    return result\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = numbers.reduce(function(a, b){return a + b;}, 0);\n    var product\
    \ = numbers.reduce(function(a, b){return a * b;}, 1);\n    return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \tvar sum = 0;\n\tvar product = 1;\n\tfor(var i = 0; i < numbers.length; i++){\n\
    \t\tsum += numbers[i];\n\t\tproduct *= numbers[i];\n\t}\n\treturn [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \tvar sum = numbers.reduce(function(a, b){\n\t\treturn a + b;\n\t}, 0);\n\tvar\
    \ product = numbers.reduce(function(a, b){\n\t\treturn a * b;\n\t}, 1);\n\treturn\
    \ [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n\
    \  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    sum = 0;\n    product = 1;\n    for(i=0; i<numbers.length; i++){\n      \
    \  sum = sum + numbers[i];\n        product = product * numbers[i];\n    }\n \
    \   results = [sum, product];\n    return results;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length === 0){\n        return [0, 1];\n    }\n    else{\n   \
    \     let sum = 0;\n        let product = 1;\n        for(let i = 0; i < numbers.length;\
    \ i++){\n            sum += numbers[i];\n            product *= numbers[i];\n\
    \        }\n        return [sum, product];\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length === 0){\n        return [0, 1];\n    }\n    var product\
    \ = 1;\n    var sum = 0;\n    for(var i = 0; i < numbers.length; i++){\n     \
    \   product *= numbers[i];\n        sum += numbers[i];\n    }\n    return [sum,\
    \ product];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length == 0){\n        return [0, 1];\n    }\n    let sum = 0;\n\
    \    let product = 1;\n    for(let i = 0; i < numbers.length; i++){\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var result = [];\n    var sum = 0;\n    var product = 1;\n    for(var i =\
    \ 0; i < numbers.length; i++){\n        sum += numbers[i];\n        product *=\
    \ numbers[i];\n    }\n    result.push(sum);\n    result.push(product);\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = numbers.reduce(function(total,number){\n        return total +\
    \ number;\n    },0);\n    var product = numbers.reduce(function(total,number){\n\
    \        return total * number;\n    },1);\n    return [sum,product];\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  for(var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    if(numbers.length == 0){\n      \
    \  return [0, 1];\n    }\n    for(var i = 0; i < numbers.length; i++){\n     \
    \   sum += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum,\
    \ product];\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let prod = 1;\n    for(let i = 0; i < numbers.length; i++){\n\
    \        sum += numbers[i];\n        prod *= numbers[i];\n    }\n    return [sum,\
    \ prod];\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n \
    \ assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = numbers.reduce((a, b) => a + b, 0);\n    let product = numbers.reduce((a,\
    \ b) => a * b, 1);\n    return [sum, product];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var prod = 1;\n    for(var i = 0; i < numbers.length; i++){\n\
    \        sum += numbers[i];\n        prod *= numbers[i];\n    }\n    if(numbers.length\
    \ === 0){\n        return [0, 1];\n    }\n    return [sum, prod];\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length === 0){\n        return[0,1];\n    }\n    return[numbers.reduce((acc,\
    \ num) => acc + num), numbers.reduce((acc, num) => acc * num)];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var product = 1;\n    var sum = 0;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        product *= numbers[i];\n        sum += numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    return [numbers.reduce((sum, number) => sum + number, 0), numbers.reduce((sum,\
    \ number) => sum * number, 1)];\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum=0;\n    var product=1;\n    if(numbers.length==0){\n        return\
    \ [0,1];\n    }\n    for(var i=0;i<numbers.length;i++){\n        sum=sum+numbers[i];\n\
    \        product=product*numbers[i];\n    }\n    return [sum,product];\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0\n  var product = 1\n  for (var i = 0; i < numbers.length; i++){\n\
    \    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length < 1){\n        return [0, 1];\n    }\n\n    var sum = 0;\n\
    \    var product = 1;\n    for(var i = 0; i < numbers.length; i++){\n        sum\
    \ += numbers[i];\n        product *= numbers[i];\n    }\n    return [sum, product];\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var sum = 0;\n    var product = 1;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 1
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var product = 1;\n    var sum = 0;\n    for(i=0; i<numbers.length; i++){\n\
    \        product = product * numbers[i];\n        sum = sum + numbers[i];\n  \
    \  }\n    console.log(sum);\n    console.log(product);\n}\nsum_product([1, 2,\
    \ 3, 4]);\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = sum_product;\n  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1,\
    \ 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  0,\n  1\n]\n    at test (/tmp/tmpdgg0zjf0.js:23:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdgg0zjf0.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 0, 1 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '10

    24

    0

    1

    '
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    if(numbers.length === 0){\n        return [0, 1];\n    }\n    return [numbers.reduce((a,\
    \ b) => a + b), numbers.reduce((a, b) => a * b)];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \  var sum = 0;\n  var product = 1;\n  if (numbers.length === 0){\n    return\
    \ [0, 1];\n  }\n  for (var i = 0; i < numbers.length; i++){\n    sum += numbers[i];\n\
    \    product *= numbers[i];\n  }\n  return [sum, product];\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sum_product;\n\
    \  assert.deepEqual(candidate([]),[0, 1]);\n  assert.deepEqual(candidate([1, 1,\
    \ 1]),[3, 1]);\n  assert.deepEqual(candidate([100, 0]),[100, 0]);\n  assert.deepEqual(candidate([3,\
    \ 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10, 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    var result = new Array();\n    result[0] = 0;\n    result[1] = 1;\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        result[0] += numbers[i];\n       \
    \ result[1] *= numbers[i];\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977715
- exit_code: 0
  program: "//For a given array of integers, return an array consisting of a sum and\
    \ a product of all the integers in an array.\n// Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n// >>> sum_product([])\n// [0, 1]\n\
    // >>> sum_product([1, 2, 3, 4])\n// [10, 24]\nfunction sum_product(numbers){\n\
    \    let sum = 0;\n    let product = 1;\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n \
    \   return [sum, product];\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sum_product;\n  assert.deepEqual(candidate([]),[0,\
    \ 1]);\n  assert.deepEqual(candidate([1, 1, 1]),[3, 1]);\n  assert.deepEqual(candidate([100,\
    \ 0]),[100, 0]);\n  assert.deepEqual(candidate([3, 5, 7]),[15, 105]);\n  assert.deepEqual(candidate([10]),[10,\
    \ 10]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821432
