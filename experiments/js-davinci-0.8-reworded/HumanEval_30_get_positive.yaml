name: HumanEval_30_get_positive
language: js
prompt: "//Return only positive numbers in the array.\n// >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = get_positive;\n  assert.deepEqual(candidate([-1, -2, 4, 5, 6]),[4, 5, 6]);\n\
  \  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]),[5, 3, 2,\
  \ 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1, -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n\
  }\n\ntest();"
completions: ["  return l.filter(e=>e>0);\n}\n", "    //write your code here\n   \
    \ return list(filter(lambda x: x > 0, l));\n}\n\nassert same_contents(get_positive([-1,\
    \ 2, -4, 5, 6]), [2, 5, 6])\nassert same_contents(get_positive([5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10]), [5, 3, 2, 3, 9, 123, 1])", "    return l.filter(num\
    \ => num > 0);\n}\n", "  return l.filter(function(a){\n    return a > 0;\n  });\n\
    }\n", "    // ???\n    return l.filter(function(n){return n>0});\n}\n", "    return\
    \ l.filter(function(num){\n        return num > 0;\n    });\n}\n", "  return l.filter(function(num){\n\
    \    return num > 0;\n  });\n}", "    return l.filter(x => x > 0);\n}\n", "  \
    \  //write your code here\n}\n", "    return l.filter(el => el >= 0);\n}\n", " \
    \   //YOUR CODE HERE\n    var res = [];\n    for (var i = 0; i < l.length; i++)\
    \ {\n        if (l[i] > 0) {\n            res.push(l[i]);\n        }\n    }\n\
    \    return res;\n}\n", "  var out = [];\n  for (var i = 0; i < l.length; i++){\n\
    \    if (l[i] > 0){\n      out.push(l[i]);\n    }\n  }\n  return out;\n}\n", " \
    \   return l.filter(function(el){return el > 0});\n}\n", "    // your code goes\
    \ here\n    var n = [];\n    for (i=0; i<l.length; i++){\n        if (l[i]>0){\n\
    \            n.push(l[i]);\n        }\n    }\n    return n;\n}\n", "    return\
    \ l.filter(function(i){return i > 0;});\n}\n", "  return l.filter(function(x){\n\
    \    return x > 0;\n  });\n}", "    let new_l = [];\n    for (let i=0; i<l.length;\
    \ i++){\n        if (l[i] > 0){\n            new_l.push(l[i]);\n        }\n  \
    \  }\n    return new_l;\n}", "  l = l.filter(value => {\n    return value > 0;\n\
    \  });\n  return l;\n}\n", "    return l.filter(function(a){\n        return a>0;\n\
    \    });\n}\n", "  var result = [];\n  l.forEach(function(i){\n    if (i > 0){\n\
    \      result.push(i);\n    }\n  });\n  return result;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
