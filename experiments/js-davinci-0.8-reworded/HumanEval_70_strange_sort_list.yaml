name: HumanEval_70_strange_sort_list
language: js
prompt: "//Given array of integers, return array in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1,\
  \ 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n\
  \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4,\
  \ 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2,\
  \ 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["    if (lst.length > 0){\n        lst.sort((a, b) => a - b);\n    \
    \    let result = [];\n        for (let i = 0; i < lst.length; i++){\n       \
    \     if (i % 2 == 0){\n                result.push(lst[i])\n            }\n \
    \           else{\n                result.unshift(lst[i])\n            }\n   \
    \     }\n        return result\n    }\n    else{\n        return lst\n    }\n\
    }\n", "    var res = [];\n    while(lst.length > 0){\n        res.push(lst.shift());\n\
    \        res.push(lst.pop());\n    }\n    return res;\n}\n", "    var lst1 = lst.slice(0);\n\
    \    var lst2 = lst.slice(0);\n    var lst_result = [];\n    lst1.sort(function(a,\
    \ b){return a-b});\n    lst2.sort(function(a, b){return b-a});\n    while (lst1.length\
    \ != 0){\n        lst_result.push(lst1.shift());\n        lst_result.push(lst2.shift());\n\
    \    }\n    return lst_result;\n}", "    if(lst.length < 2){\n        return lst;\n\
    \    }\n\n    lst.sort(function(a, b){return a - b});\n    var new_list = [];\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(i % 2 === 0){\n        \
    \    new_list.push(lst[i]);\n        }\n        else{\n            new_list.unshift(lst[i]);\n\
    \        }\n    }\n    return new_list;\n}\n", "    if(lst.length === 0){\n  \
    \      return [];\n    }\n    var output = [];\n    var tmp = lst.slice();\n \
    \   for(var i = 0; i < lst.length; i++){\n        if(i % 2 === 0){\n         \
    \   output.push(Math.min.apply(null, tmp));\n        }\n        else{\n      \
    \      output.push(Math.max.apply(null, tmp));\n        }\n        tmp.splice(tmp.indexOf(output[i]),\
    \ 1);\n    }\n    return output;\n}", "    let min = minOfArray(lst);\n    let\
    \ max = maxOfArray(lst);\n    let list_copy = lst.slice();\n    if (list_copy.length\
    \ % 2 === 0){\n        list_copy.splice(list_copy.indexOf(min), 1);\n        list_copy.splice(list_copy.indexOf(max),\
    \ 1);\n        lst[0] = min;\n        lst[1] = max;\n        for (let i = 2; i\
    \ < lst.length; i += 2){\n            let min_of_rest = minOfArray(list_copy);\n\
    \            let max_of_rest = maxOfArray(list_copy);\n            lst[i] = min_of_rest;\n\
    \            lst[i + 1] = max_of_rest;\n            list_copy.splice(list_copy.indexOf(min_of_rest),\
    \ 1);\n            list_copy.splice(list_copy.indexOf(max_of_rest), 1);\n    \
    \    }\n    } else {\n        list_copy.splice(list_copy.indexOf(min), 1);\n \
    \       list_copy.splice(list_copy.indexOf(max), 1);\n        lst[0] = min;\n\
    \        lst[1] = max;\n        for (let i = 2; i < lst.length - 1; i += 2){\n\
    \            let min_of_rest = minOfArray(list_copy);\n            let max_of_rest\
    \ = maxOfArray(list_copy);\n            lst[i] = min_of_rest;\n            lst[i\
    \ + 1] = max_of_rest;\n            list_copy.splice(list_copy.indexOf(min_of_rest),\
    \ 1);\n            list_copy.splice(list_copy.indexOf(max_of_rest), 1);\n    \
    \    }\n        lst[lst.length - 1] = list_copy[0];\n    }\n    return lst;\n\
    }\n", "    lst.sort(function(a, b){return a-b})\n    var i, l = lst.length;\n\
    \    if (l%2 === 0){\n        for (i=0; i<l/2; i++){\n            lst.splice(2*i,\
    \ 0, lst.pop())\n        }\n    }\n    else{\n        for (i=0; i<l/2; i++){\n\
    \            lst.splice(2*i, 0, lst.pop())\n        }\n    }\n    return lst\n\
    }\n", "    var sorted = lst.sort(function(a, b){return a-b})\n    return function(x){\n\
    \        if(x.length == 1){\n            return x\n        }\n        for(var\
    \ i = 0; i < x.length; i++){\n            if(x[i] == sorted[0]){\n           \
    \     x.splice(i, 1)\n                return [sorted[0]].concat(function(y){\n\
    \                    if(y.length == 1){\n                        return y\n  \
    \                  }\n                    for(var i = 0; i < y.length; i++){\n\
    \                        if(y[i] == sorted[sorted.length - 1]){\n            \
    \                y.splice(i, 1)\n                            return [sorted[sorted.length\
    \ - 1]].concat(function(z){\n                                return strange_sort_list(z)\n\
    \                            }(y))\n                        }\n              \
    \      }\n                }(x))\n            }\n        }\n    }(lst)\n}\n", " \
    \ if (lst.length == 0) {\n    return [];\n  }\n  var min = min_max(lst)[0];\n\
    \  var remaining = lst.filter(function(x) {\n    return x !== min;\n  });\n  return\
    \ [min].concat(strange_sort_list(remaining));\n}\n\n", "    if (lst == []){\n\
    \        return [];\n    }\n\n    else{\n        lst.sort(function(a, b){return\
    \ a-b});\n        var result = [];\n        for (var i = 0; i < lst.length; i++){\n\
    \            if (i % 2 == 0){\n                result.push(lst[i]);\n        \
    \    }\n            else{\n                result.push(lst[lst.length - 1 - i]);\n\
    \            }\n        }\n        return result;\n    }\n}\n", "    //YOUR CODE\
    \ HERE\n}\n", "  var odd = [], even = [];\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 == 0)\n      even.push(lst[i]);\n    else\n      odd.push(lst[i]);\n\
    \  }\n  return odd.concat(even);\n}\n", "    // Remove pass and write your logic\
    \ here\n    var newList=[];\n    var min=0;\n    var max=0;\n    if(lst.length!=0){\n\
    \    for(var i=0;i<lst.length;i++){\n        if(i==0){\n            min=lst[i];\n\
    \            max=lst[i];\n        }\n        else{\n            if(lst[i]<min){\n\
    \                min=lst[i];\n            }\n            if(lst[i]>max){\n   \
    \             max=lst[i];\n            }\n        }\n    }\n    var num=lst.length;\n\
    \    if(num%2==0){\n        var count=0;\n        for(var j=0;j<num/2;j++){\n\
    \            newList[count]=min;\n            count++;\n            lst.splice(lst.indexOf(min),1);\n\
    \            newList[count]=max;\n            count++;\n            lst.splice(lst.indexOf(max),1);\n\
    \            if(lst.length!=0){\n            min=lst[0];\n            max=lst[0];\n\
    \            for(var k=0;k<lst.length;k++){\n                if(lst[k]<min){\n\
    \                    min=lst[k];\n                }\n                if(lst[k]>max){\n\
    \                    max=lst[k];\n                }\n            }\n         \
    \   }\n        }\n    }\n    else{\n        var count=0;\n        for(var j=0;j<Math.floor(num/2);j++){\n\
    \            newList[count]=min;\n            count++;\n            lst.splice(lst.indexOf(min),1);\n\
    \            newList[count]=max;\n            count++;\n            lst.splice(lst.indexOf(max),1);\n\
    \            if(lst.length!=0){\n            min=lst[0];\n            max=lst[0];\n\
    \            for(var k=0;k<lst.length;k++){\n                if", "  if (lst.length\
    \ == 0){\n    return [];\n  }\n  if (lst.length == 1){\n    return lst;\n  }\n\
    \  var sorted = lst.sort(function(a, b){return a-b});\n  var new_list = [];\n\
    \  var j = 0;\n  var k = sorted.length - 1;\n  for (var i = 0; i < sorted.length/2;\
    \ i++){\n    new_list.push(sorted[j]);\n    new_list.push(sorted[k]);\n    j++;\n\
    \    k--;\n  }\n  if (sorted.length % 2 == 1){\n    new_list.push(sorted[j]);\n\
    \  }\n  return new_list;\n}", "    var tmp = lst.slice();\n    var res = [];\n\
    \    while(tmp.length > 0){\n        res.push(Math.min.apply(null, tmp));\n  \
    \      res.push(Math.max.apply(null, tmp));\n        tmp.splice(tmp.indexOf(Math.min.apply(null,\
    \ tmp)), 1);\n        tmp.splice(tmp.indexOf(Math.max.apply(null, tmp)), 1);\n\
    \    }\n    return res;\n}\n", "    if (lst.length == 0) return [];\n    var sorted_lst\
    \ = lst.sort(function(a, b){\n        return a - b;\n    });\n    var len = lst.length;\n\
    \    var ret_lst = [sorted_lst[0]];\n    for (var i = 1; i < len; i++){\n    \
    \    ret_lst.push(sorted_lst[len - i]);\n        ret_lst.push(sorted_lst[i]);\n\
    \    }\n    if (len % 2 != 0)\n        ret_lst.push(sorted_lst[len - 1]);\n  \
    \  return ret_lst;\n}", "    if (lst.length == 0) {\n        return lst;\n   \
    \ }\n    else {\n        var odd = [];\n        var even = [];\n        var lst_new\
    \ = lst.sort(function(a, b){return a-b});\n        for (var i = 0; i < lst_new.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                odd.push(lst_new[i]);\n\
    \            }\n            else {\n                even.push(lst_new[i]);\n \
    \           }\n        }\n        return odd.concat(even);\n    }\n}\n", "   \
    \ let new_list = [];\n    let sorted_list = lst.sort(function(a, b){return a-b});\n\
    \    let temp = 0;\n    for (let i = 0; i < sorted_list.length; i++){\n      \
    \  if (i%2 === 0){\n            new_list.push(sorted_list[temp]);\n          \
    \  temp += 1;\n        } else {\n            new_list.push(sorted_list[sorted_list.length\
    \ - temp]);\n        }\n    }\n    return new_list;\n}", "    if(lst.length ==\
    \ 0) return lst;\n    var min = lst[0];\n    var min_i = 0;\n    var max = lst[0];\n\
    \    var max_i = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ < min){\n            min = lst[i];\n            min_i = i;\n        }\n    \
    \    if(lst[i] > max){\n            max = lst[i];\n            max_i = i;\n  \
    \      }\n    }\n    var ans = [min];\n    var i = 1;\n    while(true){\n    \
    \    if(min_i < max_i){\n            ans.push(max);\n            max_i--;\n  \
    \      }\n        else{\n            ans.push(lst[max_i]);\n            max_i--;\n\
    \        }\n        if(min_i > max_i){\n            ans.push(min);\n         \
    \   min_i++;\n        }\n        else{\n            ans.push(lst[min_i]);\n  \
    \          min_i++;\n        }\n        if(max_i < min_i) break;\n    }\n    return\
    \ ans;\n}\n", "    if(lst.length == 0) return [];\n    let res = [];\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 == 0){\n            res.push(Math.min(...lst));\n\
    \        }\n        else {\n            res.push(Math.max(...lst));\n        }\n\
    \        lst.splice(lst.indexOf(res[i]), 1);\n    }\n    return res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
