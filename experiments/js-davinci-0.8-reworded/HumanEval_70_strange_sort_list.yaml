name: HumanEval_70_strange_sort_list
language: js
prompt: "//Given array of integers, return array in strange order.\n// Strange sorting,\
  \ is when you start with the minimum value,\n// then maximum of the remaining integers,\
  \ then minimum and so on.\n// Examples:\n// >>> strange_sort_list([1, 2, 3, 4])\n\
  // [1, 4, 2, 3]\n// >>> strange_sort_list([5, 5, 5, 5])\n// [5, 5, 5, 5]\n// >>>\
  \ strange_sort_list([])\n// []\nfunction strange_sort_list(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = strange_sort_list;\n  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 4, 2, 3]);\n\
  \  assert.deepEqual(candidate([5, 6, 7, 8, 9]),[5, 9, 6, 8, 7]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4, 5]),[1, 5, 2, 4, 3]);\n  assert.deepEqual(candidate([5, 6, 7, 8, 9, 1]),[1,\
  \ 9, 5, 8, 6, 7]);\n  assert.deepEqual(candidate([5, 5, 5, 5]),[5, 5, 5, 5]);\n\
  \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3, 4,\
  \ 5, 6, 7, 8]),[1, 8, 2, 7, 3, 6, 4, 5]);\n  assert.deepEqual(candidate([0, 2, 2,\
  \ 2, 5, 5, -5, -5]),[-5, 5, -5, 5, 0, 2, 2, 2]);\n  assert.deepEqual(candidate([111111]),[111111]);\n\
  }\n\ntest();"
completions: ["    if (lst.length > 0){\n        lst.sort((a, b) => a - b);\n    \
    \    let result = [];\n        for (let i = 0; i < lst.length; i++){\n       \
    \     if (i % 2 == 0){\n                result.push(lst[i])\n            }\n \
    \           else{\n                result.unshift(lst[i])\n            }\n   \
    \     }\n        return result\n    }\n    else{\n        return lst\n    }\n\
    }\n", "    var res = [];\n    while(lst.length > 0){\n        res.push(lst.shift());\n\
    \        res.push(lst.pop());\n    }\n    return res;\n}\n", "    var lst1 = lst.slice(0);\n\
    \    var lst2 = lst.slice(0);\n    var lst_result = [];\n    lst1.sort(function(a,\
    \ b){return a-b});\n    lst2.sort(function(a, b){return b-a});\n    while (lst1.length\
    \ != 0){\n        lst_result.push(lst1.shift());\n        lst_result.push(lst2.shift());\n\
    \    }\n    return lst_result;\n}", "    if(lst.length < 2){\n        return lst;\n\
    \    }\n\n    lst.sort(function(a, b){return a - b});\n    var new_list = [];\n\
    \    for(var i = 0; i < lst.length; i++){\n        if(i % 2 === 0){\n        \
    \    new_list.push(lst[i]);\n        }\n        else{\n            new_list.unshift(lst[i]);\n\
    \        }\n    }\n    return new_list;\n}\n", "    if(lst.length === 0){\n  \
    \      return [];\n    }\n    var output = [];\n    var tmp = lst.slice();\n \
    \   for(var i = 0; i < lst.length; i++){\n        if(i % 2 === 0){\n         \
    \   output.push(Math.min.apply(null, tmp));\n        }\n        else{\n      \
    \      output.push(Math.max.apply(null, tmp));\n        }\n        tmp.splice(tmp.indexOf(output[i]),\
    \ 1);\n    }\n    return output;\n}", "    let min = minOfArray(lst);\n    let\
    \ max = maxOfArray(lst);\n    let list_copy = lst.slice();\n    if (list_copy.length\
    \ % 2 === 0){\n        list_copy.splice(list_copy.indexOf(min), 1);\n        list_copy.splice(list_copy.indexOf(max),\
    \ 1);\n        lst[0] = min;\n        lst[1] = max;\n        for (let i = 2; i\
    \ < lst.length; i += 2){\n            let min_of_rest = minOfArray(list_copy);\n\
    \            let max_of_rest = maxOfArray(list_copy);\n            lst[i] = min_of_rest;\n\
    \            lst[i + 1] = max_of_rest;\n            list_copy.splice(list_copy.indexOf(min_of_rest),\
    \ 1);\n            list_copy.splice(list_copy.indexOf(max_of_rest), 1);\n    \
    \    }\n    } else {\n        list_copy.splice(list_copy.indexOf(min), 1);\n \
    \       list_copy.splice(list_copy.indexOf(max), 1);\n        lst[0] = min;\n\
    \        lst[1] = max;\n        for (let i = 2; i < lst.length - 1; i += 2){\n\
    \            let min_of_rest = minOfArray(list_copy);\n            let max_of_rest\
    \ = maxOfArray(list_copy);\n            lst[i] = min_of_rest;\n            lst[i\
    \ + 1] = max_of_rest;\n            list_copy.splice(list_copy.indexOf(min_of_rest),\
    \ 1);\n            list_copy.splice(list_copy.indexOf(max_of_rest), 1);\n    \
    \    }\n        lst[lst.length - 1] = list_copy[0];\n    }\n    return lst;\n\
    }\n", "    lst.sort(function(a, b){return a-b})\n    var i, l = lst.length;\n\
    \    if (l%2 === 0){\n        for (i=0; i<l/2; i++){\n            lst.splice(2*i,\
    \ 0, lst.pop())\n        }\n    }\n    else{\n        for (i=0; i<l/2; i++){\n\
    \            lst.splice(2*i, 0, lst.pop())\n        }\n    }\n    return lst\n\
    }\n", "    var sorted = lst.sort(function(a, b){return a-b})\n    return function(x){\n\
    \        if(x.length == 1){\n            return x\n        }\n        for(var\
    \ i = 0; i < x.length; i++){\n            if(x[i] == sorted[0]){\n           \
    \     x.splice(i, 1)\n                return [sorted[0]].concat(function(y){\n\
    \                    if(y.length == 1){\n                        return y\n  \
    \                  }\n                    for(var i = 0; i < y.length; i++){\n\
    \                        if(y[i] == sorted[sorted.length - 1]){\n            \
    \                y.splice(i, 1)\n                            return [sorted[sorted.length\
    \ - 1]].concat(function(z){\n                                return strange_sort_list(z)\n\
    \                            }(y))\n                        }\n              \
    \      }\n                }(x))\n            }\n        }\n    }(lst)\n}\n", " \
    \ if (lst.length == 0) {\n    return [];\n  }\n  var min = min_max(lst)[0];\n\
    \  var remaining = lst.filter(function(x) {\n    return x !== min;\n  });\n  return\
    \ [min].concat(strange_sort_list(remaining));\n}\n\n", "    if (lst == []){\n\
    \        return [];\n    }\n\n    else{\n        lst.sort(function(a, b){return\
    \ a-b});\n        var result = [];\n        for (var i = 0; i < lst.length; i++){\n\
    \            if (i % 2 == 0){\n                result.push(lst[i]);\n        \
    \    }\n            else{\n                result.push(lst[lst.length - 1 - i]);\n\
    \            }\n        }\n        return result;\n    }\n}\n", "    //YOUR CODE\
    \ HERE\n}\n", "  var odd = [], even = [];\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 == 0)\n      even.push(lst[i]);\n    else\n      odd.push(lst[i]);\n\
    \  }\n  return odd.concat(even);\n}\n", "    // Remove pass and write your logic\
    \ here\n    var newList=[];\n    var min=0;\n    var max=0;\n    if(lst.length!=0){\n\
    \    for(var i=0;i<lst.length;i++){\n        if(i==0){\n            min=lst[i];\n\
    \            max=lst[i];\n        }\n        else{\n            if(lst[i]<min){\n\
    \                min=lst[i];\n            }\n            if(lst[i]>max){\n   \
    \             max=lst[i];\n            }\n        }\n    }\n    var num=lst.length;\n\
    \    if(num%2==0){\n        var count=0;\n        for(var j=0;j<num/2;j++){\n\
    \            newList[count]=min;\n            count++;\n            lst.splice(lst.indexOf(min),1);\n\
    \            newList[count]=max;\n            count++;\n            lst.splice(lst.indexOf(max),1);\n\
    \            if(lst.length!=0){\n            min=lst[0];\n            max=lst[0];\n\
    \            for(var k=0;k<lst.length;k++){\n                if(lst[k]<min){\n\
    \                    min=lst[k];\n                }\n                if(lst[k]>max){\n\
    \                    max=lst[k];\n                }\n            }\n         \
    \   }\n        }\n    }\n    else{\n        var count=0;\n        for(var j=0;j<Math.floor(num/2);j++){\n\
    \            newList[count]=min;\n            count++;\n            lst.splice(lst.indexOf(min),1);\n\
    \            newList[count]=max;\n            count++;\n            lst.splice(lst.indexOf(max),1);\n\
    \            if(lst.length!=0){\n            min=lst[0];\n            max=lst[0];\n\
    \            for(var k=0;k<lst.length;k++){\n                if", "  if (lst.length\
    \ == 0){\n    return [];\n  }\n  if (lst.length == 1){\n    return lst;\n  }\n\
    \  var sorted = lst.sort(function(a, b){return a-b});\n  var new_list = [];\n\
    \  var j = 0;\n  var k = sorted.length - 1;\n  for (var i = 0; i < sorted.length/2;\
    \ i++){\n    new_list.push(sorted[j]);\n    new_list.push(sorted[k]);\n    j++;\n\
    \    k--;\n  }\n  if (sorted.length % 2 == 1){\n    new_list.push(sorted[j]);\n\
    \  }\n  return new_list;\n}", "    var tmp = lst.slice();\n    var res = [];\n\
    \    while(tmp.length > 0){\n        res.push(Math.min.apply(null, tmp));\n  \
    \      res.push(Math.max.apply(null, tmp));\n        tmp.splice(tmp.indexOf(Math.min.apply(null,\
    \ tmp)), 1);\n        tmp.splice(tmp.indexOf(Math.max.apply(null, tmp)), 1);\n\
    \    }\n    return res;\n}\n", "    if (lst.length == 0) return [];\n    var sorted_lst\
    \ = lst.sort(function(a, b){\n        return a - b;\n    });\n    var len = lst.length;\n\
    \    var ret_lst = [sorted_lst[0]];\n    for (var i = 1; i < len; i++){\n    \
    \    ret_lst.push(sorted_lst[len - i]);\n        ret_lst.push(sorted_lst[i]);\n\
    \    }\n    if (len % 2 != 0)\n        ret_lst.push(sorted_lst[len - 1]);\n  \
    \  return ret_lst;\n}", "    if (lst.length == 0) {\n        return lst;\n   \
    \ }\n    else {\n        var odd = [];\n        var even = [];\n        var lst_new\
    \ = lst.sort(function(a, b){return a-b});\n        for (var i = 0; i < lst_new.length;\
    \ i++) {\n            if (i % 2 == 0) {\n                odd.push(lst_new[i]);\n\
    \            }\n            else {\n                even.push(lst_new[i]);\n \
    \           }\n        }\n        return odd.concat(even);\n    }\n}\n", "   \
    \ let new_list = [];\n    let sorted_list = lst.sort(function(a, b){return a-b});\n\
    \    let temp = 0;\n    for (let i = 0; i < sorted_list.length; i++){\n      \
    \  if (i%2 === 0){\n            new_list.push(sorted_list[temp]);\n          \
    \  temp += 1;\n        } else {\n            new_list.push(sorted_list[sorted_list.length\
    \ - temp]);\n        }\n    }\n    return new_list;\n}", "    if(lst.length ==\
    \ 0) return lst;\n    var min = lst[0];\n    var min_i = 0;\n    var max = lst[0];\n\
    \    var max_i = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ < min){\n            min = lst[i];\n            min_i = i;\n        }\n    \
    \    if(lst[i] > max){\n            max = lst[i];\n            max_i = i;\n  \
    \      }\n    }\n    var ans = [min];\n    var i = 1;\n    while(true){\n    \
    \    if(min_i < max_i){\n            ans.push(max);\n            max_i--;\n  \
    \      }\n        else{\n            ans.push(lst[max_i]);\n            max_i--;\n\
    \        }\n        if(min_i > max_i){\n            ans.push(min);\n         \
    \   min_i++;\n        }\n        else{\n            ans.push(lst[min_i]);\n  \
    \          min_i++;\n        }\n        if(max_i < min_i) break;\n    }\n    return\
    \ ans;\n}\n", "    if(lst.length == 0) return [];\n    let res = [];\n    for(let\
    \ i = 0; i < lst.length; i++){\n        if(i % 2 == 0){\n            res.push(Math.min(...lst));\n\
    \        }\n        else {\n            res.push(Math.max(...lst));\n        }\n\
    \        lst.splice(lst.indexOf(res[i]), 1);\n    }\n    return res;\n}\n", " \
    \   if (lst.length === 0) {\n        return [];\n    } else {\n        var min_num\
    \ = Math.min(...lst);\n        var max_num = Math.max(...lst);\n        var new_lst\
    \ = [];\n        var idx_min = lst.indexOf(min_num);\n        var idx_max = lst.indexOf(max_num);\n\
    \        while (idx_min >= 0) {\n            new_lst.push(min_num);\n        \
    \    if (idx_max >= 0) {\n                new_lst.push(max_num);\n           \
    \ }\n            lst.splice(idx_min, 1);\n            lst.splice(idx_max, 1);\n\
    \            min_num = Math.min(...lst);\n            max_num = Math.max(...lst);\n\
    \            idx_min = lst.indexOf(min_num);\n            idx_max = lst.indexOf(max_num);\n\
    \        }\n        return new_lst;\n    }\n}", "    if (lst.length <= 0) {\n\
    \        return [];\n    }\n    let min = lst[0];\n    let i = 0;\n    for (let\
    \ num of lst) {\n        if (num < min) {\n            min = num;\n          \
    \  i = lst.indexOf(num);\n        }\n    }\n    let max = lst[0];\n    let j =\
    \ 0;\n    for (let num of lst) {\n        if (num > max) {\n            max =\
    \ num;\n            j = lst.indexOf(num);\n        }\n    }\n    lst.splice(i,\
    \ 1);\n    lst.splice(j, 1);\n    return [min, max].concat(strange_sort_list(lst));\n\
    }", "    if(lst.length === 0){\n        return [];\n    }\n    lst.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    var result = [];\n    var min = lst[0];\n\
    \    var max = lst[lst.length - 1];\n    var start = 1;\n    var end = lst.length\
    \ - 2;\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 === 0){\n \
    \           result.push(min);\n            min = lst[start];\n            start++;\n\
    \        } else {\n            result.push(max);\n            max = lst[end];\n\
    \            end--;\n        }\n    }\n    return result;\n}\n", "    var sorted\
    \ = lst.sort(function(a, b){return a-b});\n    var newList = [];\n    for(var\
    \ i = 0; i < sorted.length; i++){\n        if(i % 2 === 0){\n            newList.push(sorted[i/2]);\n\
    \        } else {\n            newList.push(sorted[Math.floor(sorted.length/2)\
    \ + Math.floor(i/2)]);\n        }\n    }\n    return newList;\n}", "    if(lst.length\
    \ == 0){\n        return lst;\n    }\n\n    var sortedList = lst.sort(function(a,\
    \ b){return a-b;});\n    var odd = true;\n    var result = [];\n    var numberOfItterations\
    \ = sortedList.length/2;\n    if(sortedList.length % 2 == 1){\n        numberOfItterations++;\n\
    \    }\n    for(var i = 0; i < numberOfItterations; i++){\n        if(odd){\n\
    \            result.push(sortedList[i]);\n            odd = false;\n        }else{\n\
    \            result.push(sortedList[sortedList.length - i - 1]);\n           \
    \ odd = true;\n        }\n    }\n    return result;\n}\n\n", "    if (lst.length\
    \ == 0){\n        return lst;\n    }\n    const min = Math.min(...lst);\n    lst.splice(lst.indexOf(min),\
    \ 1);\n    const max = Math.max(...lst);\n    lst.splice(lst.indexOf(max), 1);\n\
    \    return [min, max, ...strange_sort_list(lst)];\n}", "    return [];\n}\n",
  "    let result = [];\n    let copy = [...lst].sort((a, b) => a - b);\n    let min_max\
    \ = [copy.shift(), copy.pop()];\n    while (copy.length){\n        result.push(min_max.shift());\n\
    \        min_max.push(copy.shift(), copy.pop());\n    }\n    return result.concat(min_max);\n\
    }\n", "    if(lst.length == 0){\n        return [];\n    }\n    var output = [];\n\
    \    var max_min = sort_max_min(lst);\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(i % 2 == 0){\n            output.push(max_min[0][0]);\n          \
    \  max_min[0].shift();\n        }\n        else{\n            output.push(max_min[1][0]);\n\
    \            max_min[1].shift();\n        }\n    }\n    return output;\n}\n",
  "    let result = [];\n    if(lst.length === 0) {\n        return result;\n    }\n\
    \    let isMax = true;\n    let sorted_lst = lst.sort((a, b) => a - b);\n    console.log(sorted_lst);\n\
    \    let max_index = sorted_lst.length - 1;\n    let min_index = 0;\n    for(let\
    \ i = 0; i < sorted_lst.length; i++) {\n        if(isMax) {\n            result.push(sorted_lst[max_index]);\n\
    \            max_index--;\n            isMax = false;\n        } else {\n    \
    \        result.push(sorted_lst[min_index]);\n            min_index++;\n     \
    \       isMax = true;\n        }\n    }\n    return result;\n}", "    return lst.sort((a,b)=>{\n\
    \        if(a-b>0){\n            return 1;\n        }\n        else{\n       \
    \     return -1;\n        }\n    })\n}\n", "    return lst.sort( (a,b) => a-b\
    \ ).reduce( (a, b, i) => {\n        (i%2 == 0)? a.push(b) : a.unshift(b);\n  \
    \      return a;\n    }, []);\n}\n", "    if(lst.length == 0){\n        return\
    \ [];\n    }\n    if(lst.length == 1){\n        return lst;\n    }\n    var newLst\
    \ = [];\n    var maxIndex = 0;\n    var minIndex = 0;\n    var max = Math.max.apply(null,\
    \ lst);\n    var min = Math.min.apply(null, lst);\n    for(var i = 0; i < lst.length;\
    \ i++){\n        if(lst[i] == max){\n            maxIndex = i;\n        }\n  \
    \      if(lst[i] == min){\n            minIndex = i;\n        }\n    }\n    newLst.push(min);\n\
    \    newLst.push(max);\n    lst.splice(maxIndex, 1);\n    lst.splice(minIndex,\
    \ 1);\n    return newLst.concat(strange_sort_list(lst));\n}", "    return lst.sort(function(a,\
    \ b){\n        return b-a;\n    }).map(function(current, index, arr){\n      \
    \  if(index === 0){\n            return [current];\n        }\n        if(index\
    \ % 2){\n            return [current].concat(arr[index-1]);\n        }\n     \
    \   return [arr[index-1], current];\n    }).reduce(function(acc, curr){\n    \
    \    return acc.concat(curr);\n    });\n}", "    var res = [];\n    var a = lst.sort(function(a,\
    \ b){return a-b});\n    for (var i = 0; i < lst.length; i++){\n        if (i %\
    \ 2 == 0){\n            res.push(a[i/2]);\n        }\n        else {\n       \
    \     res.push(a[a.length-Math.ceil(i/2)]);\n        }\n    }\n    return res;\n\
    }\nvar list = [8, 9, 23, 1, 2, 3, 4, 9, 5, 0, -1, -2, -3, -4, -9, -5, -6, -7,\
    \ -8, 7, 6, 5, 4, 3, 2, 1, 0];", "  var sorted_lst = lst.sort();\n  var result\
    \ = [];\n  var count = sorted_lst.length;\n  var idx = 0;\n  while(count > 0){\n\
    \    var min = sorted_lst[idx];\n    var max = sorted_lst[count - 1];\n    if(idx\
    \ % 2 == 0){\n      result.push(min);\n      idx++;\n    }else{\n      result.push(max);\n\
    \      count--;\n    }\n  }\n  return result;\n}", "    let array = [],\n    \
    \    odd = [],\n        even = [];\n    for (let i = 0; i < lst.length; i++){\n\
    \        array.push(lst[i]);\n    }\n    if (array.length === 0){\n        return\
    \ array;\n    }\n    array.sort((a, b) => {\n        return a - b;\n    });\n\
    \    for (let i = 0; i < array.length; i++){\n        if (i % 2 === 0){\n    \
    \        even.push(array[i]);\n        } else {\n            odd.push(array[i]);\n\
    \        }\n    }\n    return even.concat(odd);\n}", "    if(lst.length == 0)\
    \ return [];\n    var res = [], max = Math.max.apply(null, lst), min = Math.min.apply(null,\
    \ lst);\n    res.push(min);\n    while(max != min){\n        res.push(max);\n\
    \        max--;\n        if(res.length == lst.length) break;\n        res.push(min);\n\
    \        min++;\n    }\n    return res;\n}\n", "    if (lst.length === 0) return\
    \ [];\n    var sorted_lst = lst.sort(function(a, b){\n        return a - b;\n\
    \    });\n    var output = [];\n    var right = sorted_lst.length - 1;\n    var\
    \ left = 0;\n    while (right - left > 0){\n        output.push(sorted_lst[left]);\n\
    \        left++;\n        output.push(sorted_lst[right]);\n        right--;\n\
    \    }\n    if (right === left) output.push(sorted_lst[left]);\n    return output;\n\
    }\n", "    lst.sort(function(a, b){return a-b});\n    if (lst.length == 0) {\n\
    \        return [];\n    }\n    return [lst[0]].concat(strange_sort_list(lst.slice(2,\
    \ lst.length))).concat([lst[1]]);\n}\n\n", "    if (lst.length == 0) return [];\n\
    \    else if (lst.length == 1) return lst;\n    else if (lst.length == 2) return\
    \ lst.reverse();\n    else {\n        var sorted = lst.sort((a, b) => a - b);\n\
    \        return [sorted[0], sorted[sorted.length - 1], ...strange_sort_list(sorted.slice(1,\
    \ sorted.length - 1))];\n    }\n}\n", "    lst.sort();\n    var left = 0;\n  \
    \  var right = lst.length - 1;\n    var newArr = [];\n    while (left <= right){\n\
    \        newArr.push(lst[left]);\n        if (right != left){\n            newArr.push(lst[right]);\n\
    \        }\n        left++;\n        right--;\n    }\n    return newArr;\n}\n",
  "    let result = [];\n    let sorted_lst = lst.sort((a, b) => a - b);\n    let\
    \ end = lst.length - 1;\n    for (let i = 0; i < lst.length; i++){\n        if\
    \ (i % 2 === 0){\n            result.push(sorted_lst[i]);\n        } else {\n\
    \            result.push(sorted_lst[end]);\n            end -= 1;\n        }\n\
    \    }\n    return result;\n}\n", "    const a = lst.slice();\n    a.sort((a,\
    \ b) => a - b);\n    const b = a.slice(0, Math.ceil(a.length / 2));\n    const\
    \ c = a.slice(Math.ceil(a.length / 2));\n    let i = 0;\n    let j = 1;\n    let\
    \ output = [];\n    while (output.length < a.length) {\n        output.push(b[i]);\n\
    \        if (c[j]) output.push(c[j]);\n        i++;\n        j++;\n    }\n   \
    \ return output;\n}", "    // var result = []\n    // if(lst === []){\n    //\
    \     return result\n    // }\n    // lst.sort(function(a, b){return a-b})\n \
    \   // for(var i = 0; i < lst.length; i++){\n    //     result.push(lst[i])\n\
    \    //     result.push(lst[lst.length - 1 - i])\n    // }\n    // return result\n\
    \    return lst.sort(function(a, b){return a-b}).map(function(e, i, a){\n    \
    \    if(i%2 !== 0){\n            return a[a.length - 1 - i]\n        }\n     \
    \   return e\n    })\n}", "    var out = [];\n    var orig_lst = lst.slice();\n\
    \    if (lst.length == 0){\n        return out;\n    }\n    out.push(lst.shift());\n\
    \    while (lst.length>0){\n        out.push(lst.pop());\n        if (lst.length>0){\n\
    \            out.push(lst.shift());\n        }\n    }\n    return out;\n}\n\n",
  "    // your code here\n    if(lst.length == 0){\n        return [];\n    }\n  \
    \  var res = [];\n    var new_lst = lst.slice();\n    var list = [], new_list\
    \ = [], i = 0;\n    for(var j = 0; j < new_lst.length; j++){\n        list.push(j);\n\
    \    }\n    var min = Math.min.apply(null, new_lst);\n    var min_index = new_lst.indexOf(min);\n\
    \    list.splice(min_index, 1);\n    new_list.push(min_index);\n    res.push(min);\n\
    \    while(list.length > 0){\n        if(i % 2 == 0){\n            var max = Math.max.apply(null,\
    \ new_lst);\n            var max_index = new_lst.indexOf(max);\n            list.splice(max_index,\
    \ 1);\n            new_list.push(max_index);\n            res.push(max);\n   \
    \     }\n        else{\n            var min = Math.min.apply(null, new_lst);\n\
    \            var min_index = new_lst.indexOf(min);\n            list.splice(min_index,\
    \ 1);\n            new_list.push(min_index);\n            res.push(min);\n   \
    \     }\n        i++;\n    }\n    var final_res = [];\n    for(var i = 0; i <\
    \ new_list.length; i++){\n        final_res.push(lst[new_list[i]]);\n    }\n \
    \   return final_res;\n}", "    lst.sort((a,b)=>a-b);\n    var res = [];\n   \
    \ for(var i=0;i<lst.length;i++){\n        if(i%2==0){\n            res.push(lst[i]);\n\
    \        }else{\n            res.unshift(lst[i]);\n        }\n    }\n    return\
    \ res;\n}\n", "    var sorted = lst.sort((a, b) => a - b);\n    var result = [];\n\
    \    var left = 0;\n    var right = sorted.length - 1;\n    while (left <= right)\
    \ {\n        result.push(sorted[left]);\n        left++;\n        if (left <=\
    \ right) {\n            result.push(sorted[right]);\n            right--;\n  \
    \      }\n    }\n    return result;\n}", "  let list = lst.slice();\n  let new_list\
    \ = [];\n  for (let i = 0; i < list.length; i++){\n    let min = Math.min(...list);\n\
    \    let max = Math.max(...list);\n    if (i % 2 == 0){\n      new_list.push(min);\n\
    \      list.splice(list.indexOf(min), 1);\n    }\n    else {\n      new_list.push(max);\n\
    \      list.splice(list.indexOf(max), 1);\n    }\n  }\n  return new_list;\n}",
  "    var res = [];\n    var indexes = [];\n    var minIndex = -1;\n    var maxIndex\
    \ = -1;\n    for (var i = 0; i < lst.length; i++){\n        if (minIndex == -1){\n\
    \            minIndex = i;\n        }\n        else if (lst[i] < lst[minIndex]){\n\
    \            minIndex = i;\n        }\n        if (maxIndex == -1){\n        \
    \    maxIndex = i;\n        }\n        else if (lst[i] > lst[maxIndex]){\n   \
    \         maxIndex = i;\n        }\n    }\n    if (minIndex == -1){\n        return\
    \ [];\n    }\n    indexes.push(minIndex);\n    indexes.push(maxIndex);\n    for\
    \ (var i = 0; i < lst.length; i++){\n        if (i != minIndex && i != maxIndex){\n\
    \            indexes.push(i);\n        }\n    }\n    for (var i = 0; i < indexes.length;\
    \ i++){\n        res.push(lst[indexes[i]]);\n    }\n    return res;\n}", "   \
    \ var min = lst[0];\n    var max = lst[0];\n    var max_index = 0;\n    var min_index\
    \ = 0;\n    var result = [];\n    var i = 0;\n    var temp = 0;\n    if (lst.length\
    \ === 0){\n        return [];\n    }\n    while (i < lst.length){\n        if\
    \ (lst[i] < min){\n            min = lst[i];\n            min_index = i;\n   \
    \     }\n        if (lst[i] > max){\n            max = lst[i];\n            max_index\
    \ = i;\n        }\n        i += 1;\n    }\n    result.push(min);\n    if (min_index\
    \ < max_index){\n        result.push(max);\n        temp = lst.slice(min_index\
    \ + 1, max_index);\n        if (lst.length - 1 > max_index){\n            temp\
    \ = temp.concat(lst.slice(max_index + 1, lst.length));\n        }\n    } else\
    \ {\n        temp = lst.slice(min_index + 1, lst.length);\n        if (max_index\
    \ > 0){\n            temp = temp.concat(lst.slice(0, max_index));\n        }\n\
    \        result.push(max);\n    }\n    while (temp.length > 0){\n        result.push(temp.shift());\n\
    \        result.push(temp.pop());\n    }\n    return result;\n}", "    let newlst\
    \ = lst.slice(0);\n    let answer = [];\n    while (newlst.length > 0){\n    \
    \    answer.push(newlst.shift());\n        let num = newlst.pop();\n        if\
    \ (num != undefined){\n            answer.push(num);\n        }\n    }\n    return\
    \ answer;\n}\n", "  \n  if(lst.length === 0){\n    return [];\n  }\n  \n  var\
    \ max = Math.max.apply(null, lst);\n  var min = Math.min.apply(null, lst);\n \
    \ var minIndex = lst.indexOf(min);\n  var maxIndex = lst.indexOf(max);\n  var\
    \ output = [];\n  \n  while(lst.length > 0){\n    output.push(min);\n    lst.splice(minIndex,\
    \ 1);\n    min = Math.min.apply(null, lst);\n    minIndex = lst.indexOf(min);\n\
    \    output.push(max);\n    lst.splice(maxIndex, 1);\n    max = Math.max.apply(null,\
    \ lst);\n    maxIndex = lst.indexOf(max);\n  }\n  \n  return output;\n}", "  \n\
    \  let sort = lst.sort(function(a, b){return a-b});\n  let result = []\n  if (sort.length\
    \ === 0){\n    return []\n  }\n  if (sort.length % 2 === 0){\n    let left = sort.slice(0,sort.length/2)\n\
    \    let right = sort.slice(sort.length/2)\n    right.reverse()\n    result =\
    \ left.concat(right)\n  } else {\n    let left = sort.slice(0,sort.length/2)\n\
    \    let middle = sort.slice(sort.length/2,sort.length/2+1)\n    let right = sort.slice(sort.length/2+1)\n\
    \    right.reverse()\n    result = left.concat(middle,right)\n  }\n  return result\n\
    }", "    lst.sort(function(a, b){return a-b});\n    var arr1 = [];\n    var arr2\
    \ = [];\n    for(var i = 0; i < lst.length; i++){\n        if(i % 2 === 0){\n\
    \            arr1.push(lst[i]);\n        }\n        else{\n            arr2.push(lst[i]);\n\
    \        }\n    }\n    return arr1.concat(arr2.reverse());\n}\n", "    var output\
    \ = [];\n    var temp = lst.slice();\n    var min = Math.min.apply(null, temp);\n\
    \    var max = Math.max.apply(null, temp);\n    for (var i = 0; i < lst.length;\
    \ i++){\n        if (i % 2 === 0){\n            output.push(min);\n          \
    \  temp.splice(temp.indexOf(min), 1);\n            min = Math.min.apply(null,\
    \ temp);\n        } else {\n            output.push(max);\n            temp.splice(temp.indexOf(max),\
    \ 1);\n            max = Math.max.apply(null, temp);\n        }\n    }\n    return\
    \ output;\n}\n", "    if(lst.length == 0){\n        return [];\n    }\n    lst.sort(function(a,\
    \ b){return a-b});\n    var result = [lst[0]];\n    var min = 0;\n    var max\
    \ = lst.length - 1;\n    while(max > min){\n        result.push(lst[max]);\n \
    \       max--;\n        if(max > min){\n            result.push(lst[min]);\n \
    \           min++;\n        }\n    }\n    return result;\n}\n", "  var sorted\
    \ = lst.sort(function(a, b){return a-b});\n  var result = [];\n  while (sorted.length){\n\
    \    result.push(sorted.shift());\n    if (sorted.length){\n      result.push(sorted.pop());\n\
    \    }\n  }\n  return result;\n}", "    var nlst = [];\n    var n = lst.length;\n\
    \    if (n == 0){\n        return nlst;\n    }\n    else{\n        var min = lst[0];\n\
    \        var ind = 0;\n        for (var i = 0; i < n; i++){\n            if (lst[i]\
    \ < min){\n                min = lst[i];\n                ind = i;\n         \
    \   }\n        }\n        nlst.push(min);\n        lst.splice(ind, 1);\n     \
    \   if (lst.length > 0){\n            var max = lst[0];\n            var ind =\
    \ 0;\n            for (var i = 0; i < lst.length; i++){\n                if (lst[i]\
    \ > max){\n                    max = lst[i];\n                    ind = i;\n \
    \               }\n            }\n            nlst.push(max);\n            lst.splice(ind,\
    \ 1);\n        }\n        return nlst.concat(strange_sort_list(lst));\n    }\n\
    }", "    if (lst.length==0){\n        return [];\n    }\n    var l=[];\n    l.push(Math.min(...lst));\n\
    \    lst.splice(lst.indexOf(Math.min(...lst)),1);\n    l.push(Math.max(...lst));\n\
    \    lst.splice(lst.indexOf(Math.max(...lst)),1);\n    return l.concat(strange_sort_list(lst));\n\
    }\n", "  var sorted = lst.sort(function(a, b){return a-b});\n  var min = sorted.shift();\n\
    \  var max = sorted.pop();\n  var newList = [min];\n  for (var i = 0; i < sorted.length;\
    \ i++){\n    if (i % 2 === 0){\n      newList.push(sorted[i]);\n    }\n    else\
    \ {\n      newList.unshift(sorted[i]);\n    }\n  }\n  newList.push(max);\n  return\
    \ newList;\n}", "    let sorted = lst.sort((a, b) => a - b)\n    let final = []\n\
    \    while (sorted.length > 0){\n        final.push(sorted.shift())\n        final.push(sorted.pop())\n\
    \    }\n    return final\n}", "    if(lst.length==0) return lst;\n    if(lst.length==1)\
    \ return lst;\n    if(lst.length==2) return lst;\n    lst.sort(function(a,b){\n\
    \        return a-b;\n    });\n    var lst2=[];\n    for(i=0;i<lst.length;i++){\n\
    \        if(i%2==0){\n            lst2.push(lst[i]);\n        }\n        else{\n\
    \            lst2.push(lst[lst.length-i-1]);\n        }\n    }\n    return lst2;\n\
    }", "    if(lst.length === 0) return [];\n    let res = [];\n    lst.sort((a,\
    \ b) => a - b);\n    let start = 0;\n    let end = lst.length - 1;\n    while(start\
    \ <= end){\n        res.push(lst[start]);\n        if(start !== end) res.push(lst[end]);\n\
    \        start++;\n        end--;\n    }\n    return res;\n}\n", "    if(lst.length==0){\n\
    \        return [];\n    }\n    if(lst.length==1){\n        return lst;\n    }\n\
    \    var min=Math.min.apply(null,lst);\n    var max=Math.max.apply(null,lst);\n\
    \    var result=[];\n    var lst2=lst.slice();\n    while(lst2.length!=0){\n \
    \       var index_min=lst2.indexOf(min);\n        var index_max=lst2.indexOf(max);\n\
    \        result.push(min);\n        lst2.splice(index_min,1);\n        result.push(max);\n\
    \        lst2.splice(index_max,1);\n        if(lst2.length==0){\n            break;\n\
    \        }\n        min=Math.min.apply(null,lst2);\n        max=Math.max.apply(null,lst2);\n\
    \    }\n    return result;\n}\n", "    let lst2 = lst.sort();\n    let lst3 =\
    \ [];\n    for (let i = 0; i < lst2.length; i++) {\n        let min = Math.min(...lst2);\n\
    \        lst3.push(min);\n        let index = lst2.indexOf(min);\n        lst2.splice(index,\
    \ 1);\n        if (lst2.length > 0) {\n            let max = Math.max(...lst2);\n\
    \            lst3.push(max);\n            let index = lst2.indexOf(max);\n   \
    \         lst2.splice(index, 1);\n        }\n    }\n    return lst3;\n}", "  \
    \  if (lst.length === 0) return [];\n    lst.sort(function(a, b){\n        return\
    \ a - b;\n    });\n    var head = lst.shift();\n    var tail = lst.pop();\n  \
    \  if (lst.length === 0) return [head, tail];\n    return [head].concat(strange_sort_list(lst)).concat([tail]);\n\
    }\n", "    var min = lst[0];\n    var max = lst[0];\n    var sorted = [];\n  \
    \  var indexMin = 0;\n    var indexMax = 0;\n    for (var i = 0; i < lst.length;\
    \ i++){\n        if (lst[i] < min){\n            min = lst[i];\n            indexMin\
    \ = i;\n        }\n        if (lst[i] > max){\n            max = lst[i];\n   \
    \         indexMax = i;\n        }\n    }\n    var minMax = min + max;\n    sorted.push(min);\n\
    \    sorted.push(max);\n    if (lst.length > 2){\n        lst.splice(indexMin,\
    \ 1);\n        lst.splice(indexMax-1, 1);\n        var newlist = strange_sort_list(lst);\n\
    \        for (var i = 0; i < newlist.length; i++){\n            sorted.push(newlist[i]);\n\
    \        }\n    }\n    return sorted;\n}\n", "    var sorted = lst.sort(function(a,\
    \ b){return a-b});\n    var odd = [], even = [];\n    for (var i = 0; i < sorted.length;\
    \ i++) {\n        if (i % 2 == 0) {\n            even.push(sorted[i]);\n     \
    \   } else {\n            odd.push(sorted[i]);\n        }\n    }\n    var odd_reversed\
    \ = odd.reverse();\n    var result = even.concat(odd_reversed);\n    return result;\n\
    }\nvar test_lst = [3, 7, 1, 8, 0, 7, 5, 2, 9, 4, 6];", "    lst.sort(function(a,\
    \ b){return a-b});\n    var minimum=lst[0];\n    var maximum=lst[lst.length-1];\n\
    \    var minimum_index=0;\n    var maximum_index=lst.length-1;\n    var result=[];\n\
    \    var i=0;\n    while(i<lst.length/2){\n        result.push(minimum);\n   \
    \     result.push(maximum);\n        minimum=lst[minimum_index+1];\n        maximum=lst[maximum_index-1];\n\
    \        minimum_index++;\n        maximum_index--;\n        i++;\n    }\n   \
    \ if(lst.length%2==1){\n        result.push(minimum);\n    }\n    return result;\n\
    }", "    var newlst = [];\n    lst.sort(function(a, b){return a-b});\n    for(var\
    \ i = 0; i < lst.length; i+=2){\n        newlst.push(lst[i]);\n        newlst.push(lst[lst.length-1-i]);\n\
    \    }\n    if(lst.length % 2 === 1){\n        newlst.pop();\n        newlst.push(lst[lst.length/2]);\n\
    \    }\n    return newlst;\n}\n", "  var result = [];\n  if(lst.length <= 1){\n\
    \    return lst;\n  }\n  // find the minimum and the maximum\n  // put the minimum\
    \ in the result\n  // put the maximum in the result\n  // find the minimum and\
    \ the maximum in the remaining numbers\n  // put them in the result\n  // Continue\
    \ until lst is empty\n  // Copy result to lst and continue until result is filled\n\
    \  lst.sort(function(a, b){return a - b});\n  console.log(\"lst: \", lst);\n \
    \ while(result.length < lst.length){\n    result.push(lst.shift());\n    result.push(lst.pop());\n\
    \  }\n  return result;\n}\n", "    if (lst.length % 2 == 0){\n        let first\
    \ = [];\n        let second = [];\n        for (let i = 0; i < lst.length; i++){\n\
    \            if (i % 2 == 0){\n                first.push(lst[i]);\n         \
    \   }\n            else {\n                second.push(lst[i]);\n            }\n\
    \        }\n        return first.concat(second);\n    }\n    else {\n        let\
    \ first = [];\n        let second = [];\n        for (let i = 0; i < lst.length;\
    \ i++){\n            if (i % 2 == 0){\n                first.push(lst[i]);\n \
    \           }\n            else {\n                second.push(lst[i]);\n    \
    \        }\n        }\n        let new_lst = first.concat(second);\n        let\
    \ half = Math.floor(new_lst.length / 2);\n        let first_part = new_lst.slice(0,\
    \ half);\n        let second_part = new_lst.slice(half, new_lst.length);\n   \
    \     let middle = [new_lst[half]];\n        return first_part.concat(middle,\
    \ second_part);\n    }\n}", "    if (lst.length === 0){\n        return lst;\n\
    \    }\n    lst.sort(function(a, b){return a-b});\n    var result = [];\n    for\
    \ (var i = 0; i < lst.length; i++){\n        result.push(lst[i]);\n        if\
    \ (i === lst.length -1){\n            return result;\n        }\n        result.push(lst[lst.length\
    \ - 1 - i]);\n    }\n}\n", "    let newArr = []\n    let i = 0\n    let j = lst.length\
    \ - 1\n    while(lst.length > 0){\n        if(i == j){\n            newArr.push(lst[i])\n\
    \            break\n        }\n        newArr.push(lst[i])\n        newArr.push(lst[j])\n\
    \        i++\n        j--\n    }\n    return newArr\n}", "    let lst_sorted =\
    \ lst.sort(function(a, b){return a-b});\n    let lst_sorted_reversed = lst_sorted.reverse();\n\
    \    let index = 0;\n    let flag = false;\n    let new_lst = [];\n    while (index\
    \ < lst_sorted.length) {\n        if (flag === false) {\n            new_lst.push(lst_sorted[index]);\n\
    \            flag = true;\n        } else {\n            new_lst.push(lst_sorted_reversed[index]);\n\
    \            flag = false;\n        }\n        index += 1;\n    }\n    return\
    \ new_lst;\n}", "    let result = [];\n    let odd = lst.filter(el => lst.indexOf(el)\
    \ % 2 !== 0);\n    let even = lst.filter(el => lst.indexOf(el) % 2 === 0);\n \
    \   for (let i = 0; i < lst.length; i++){\n        if (i % 2 === 0){\n       \
    \     result.push(odd.pop());\n        } else {\n            result.push(even.pop());\n\
    \        }\n    }\n    return result;\n}", "    let res = [],\n        max = Math.max(...lst),\n\
    \        min = Math.min(...lst),\n        arr = lst.sort((a, b) => a - b);\n \
    \   while (arr.length) {\n        res.push(min);\n        res.push(max);\n   \
    \     arr.splice(arr.indexOf(min), 1);\n        arr.splice(arr.indexOf(max), 1);\n\
    \        max = Math.max(...arr);\n        min = Math.min(...arr);\n    }\n   \
    \ return res;\n}", "    if(lst.length<=1) return lst;\n    var flag=true;\n  \
    \  var min_index;\n    var temp;\n    for(var i=0;i<lst.length;i++){\n       \
    \ min_index=i;\n        for(var j=i+1;j<lst.length;j++){\n            if(lst[j]<lst[min_index]){\n\
    \                min_index=j;\n            }\n        }\n        if(flag){\n \
    \           flag=false;\n            temp=lst[i];\n            lst[i]=lst[min_index];\n\
    \            lst[min_index]=temp;\n        }\n        else{\n            flag=true;\n\
    \            temp=lst[lst.length-1-i];\n            lst[lst.length-1-i]=lst[min_index];\n\
    \            lst[min_index]=temp;\n        }\n    }\n    return lst;\n}\n", " \
    \   lst.sort(function(a, b){return a-b});\n    var result = [], i = 0, j = lst.length\
    \ - 1;\n    while (result.length < lst.length){\n        result.push(lst[i]);\n\
    \        if (i !== j){\n            result.push(lst[j]);\n        }\n        i++;\n\
    \        j--;\n    }\n    return result;\n}\n", "    if(lst.length === 0){\n \
    \       return [];\n    }\n\n    var sorted_lst = [];\n    var to_sort = [...lst];\n\
    \    while(to_sort.length > 0){\n        var min = Math.min(...to_sort);\n   \
    \     var max = Math.max(...to_sort);\n        sorted_lst.push(min);\n       \
    \ sorted_lst.push(max);\n        to_sort.splice(to_sort.indexOf(min), 1);\n  \
    \      to_sort.splice(to_sort.indexOf(max), 1);\n    }\n    return sorted_lst;\n\
    }\n\nvar list = [1, 2, 3, 4];\nvar result = strange_sort_list(list);", "    let\
    \ odd = [];\n    let even = [];\n    let min = Math.min(...lst);\n    let max\
    \ = Math.max(...lst);\n    let newList = [];\n    while(lst.length > 0){\n   \
    \     if(odd.length < even.length){\n            odd.push(min);\n            min\
    \ = Math.min(...lst);\n        }\n        else{\n            even.push(max);\n\
    \            max = Math.max(...lst);\n        }\n    }\n    newList = odd.concat(even);\n\
    \    return newList;\n}", "    var strng_lst = [];\n    if (lst.length % 2 ===\
    \ 0){\n        for (var i = 0; i < lst.length / 2; i++){\n            strng_lst.push(lst[i]);\n\
    \            strng_lst.push(lst[(lst.length - 1) - i]);\n        }\n    }\n  \
    \  else{\n        for (var i = 0; i < Math.floor(lst.length / 2); i++){\n    \
    \        strng_lst.push(lst[i]);\n            strng_lst.push(lst[(lst.length -\
    \ 1) - i]);\n        }\n        strng_lst.push(lst[Math.floor(lst.length / 2)]);\n\
    \    }\n    return strng_lst;\n}\n", "\tif(lst.length == 0) return lst;\n\tvar\
    \ sort = [];\n\tvar temp = [];\n\tlst.forEach(function(item){\n\t\ttemp.push(item);\n\
    \t});\n\tvar min = Math.min.apply(null, temp);\n\twhile(sort.length < lst.length){\n\
    \t\tsort.push(min);\n\t\ttemp.splice(temp.indexOf(min), 1);\n\t\tif(temp.length\
    \ == 0) break;\n\t\tvar max = Math.max.apply(null, temp);\n\t\tsort.push(max);\n\
    \t\ttemp.splice(temp.indexOf(max), 1);\n\t\tif(temp.length == 0) break;\n\t\t\
    min = Math.min.apply(null, temp);\n\t}\n\treturn sort;\n}\n", "    let sort_arr\
    \ = [],\n        max = null,\n        min = null,\n        i = 0;\n    if(lst.length\
    \ == 0){\n        return lst;\n    }\n    for(let j = 0; j < lst.length; j++){\n\
    \        if(min == null || min > lst[j]){\n            min = lst[j];\n       \
    \ }\n        if(max == null || max < lst[j]){\n            max = lst[j];\n   \
    \     }\n    }\n    while(lst.length > 0){\n        if(i % 2 == 0){\n        \
    \    sort_arr.push(min);\n            lst.splice(lst.indexOf(min), 1);\n     \
    \       min = null;\n            for(let j = 0; j < lst.length; j++){\n      \
    \          if(min == null || min > lst[j]){\n                    min = lst[j];\n\
    \                }\n            }\n        }else{\n            sort_arr.push(max);\n\
    \            lst.splice(lst.indexOf(max), 1);\n            max = null;\n     \
    \       for(let j = 0; j < lst.length; j++){\n                if(max == null ||\
    \ max < lst[j]){\n                    max = lst[j];\n                }\n     \
    \       }\n        }\n        i++;\n    }\n    return sort_arr;\n}\n", "    var\
    \ res = [];\n    var lst_ = lst.sort((a,b)=>a-b);\n    if(lst.length == 0) return\
    \ res;\n    var left = 0;\n    var right = lst.length - 1;\n    while(res.length\
    \ < lst.length){\n        res.push(lst_[left]);\n        if(lst_[right] == lst_[left]){\n\
    \            right--;\n            continue;\n        }\n        res.push(lst_[right]);\n\
    \        left++;\n        right--;\n    }\n    return res;\n}\n", "    let mylist\
    \ = [...lst]\n    let mylist1 = []\n    let mylist2 = []\n    let mylist3 = []\n\
    \    let mylist4 = []\n    mylist1 = lst.sort((a,b) => {return a-b})\n    mylist2\
    \ = lst.sort((a,b) => {return b-a})\n    while (mylist1.length != 0 || mylist2.length\
    \ != 0){\n        if (mylist1.length != 0){\n            mylist3.push(mylist1[0])\n\
    \            mylist1.shift()\n        }\n        if (mylist2.length != 0){\n \
    \           mylist3.push(mylist2[0])\n            mylist2.shift()\n        }\n\
    \    }\n    return mylist3\n}\n", "    var result=[];\n    var lst_cp=lst.slice();\n\
    \    if(lst_cp.length==0) return [];\n    if(lst_cp.length==1) return lst_cp;\n\
    \    for(var i=0;i<lst_cp.length;i++){\n        if(i%2==0){\n            var minimum=Math.min.apply(null,lst_cp);\n\
    \            result.push(minimum);\n            lst_cp.splice(lst_cp.indexOf(minimum),1);\n\
    \        }\n        else {\n            var maximum=Math.max.apply(null,lst_cp);\n\
    \            result.push(maximum);\n            lst_cp.splice(lst_cp.indexOf(maximum),1);\n\
    \        }\n    }\n    return result;\n}\n", "\tvar strng = [];\n\tvar low = Math.min.apply(null,\
    \ lst);\n\tvar high = Math.max.apply(null, lst);\n\twhile (lst.length != 0){\n\
    \t\tstrng.push(low);\n\t\tstrng.push(high);\n\t\tfor (var i = 0; i < lst.length;\
    \ i++){\n\t\t\tif (lst[i] == low){\n\t\t\t\tlst.splice(i, 1);\n\t\t\t}\n\t\t\t\
    if (lst[i] == high){\n\t\t\t\tlst.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\tlow = Math.min.apply(null,\
    \ lst);\n\t\thigh = Math.max.apply(null, lst);\n\t}\n\treturn strng;\n}", "  \
    \  let lst_sort = lst.sort((a, b) => {return a - b})\n    let lst_sort_reversed\
    \ = lst_sort.reverse()\n    let result = []\n    while (lst_sort.length !== 0){\n\
    \        result.push(lst_sort.shift())\n        result.push(lst_sort_reversed.shift())\n\
    \    }\n    return result\n}", "    let res = []\n    let min = Math.min(...lst)\n\
    \    let max = Math.max(...lst)\n    while (res.length < lst.length){\n      \
    \  res.push(min)\n        res.push(max)\n        lst.splice(lst.indexOf(min),\
    \ 1)\n        lst.splice(lst.indexOf(max), 1)\n        min = Math.min(...lst)\n\
    \        max = Math.max(...lst)\n    }\n    return res\n}", "    if(lst.length\
    \ == 0){\n        return [];\n    }\n    lst.sort((a, b) => {\n        return\
    \ a - b;\n    });\n    var lst_temp = [];\n    var min = lst[0];\n    lst_temp.push(min);\n\
    \    lst.splice(0, 1);\n    var max = lst[lst.length - 1];\n    lst_temp.push(max);\n\
    \    lst.splice(lst.length - 1, 1);\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(i % 2 == 0){\n            lst_temp.push(lst[i]);\n        }else{\n\
    \            lst_temp.unshift(lst[i]);\n        }\n    }\n    return lst_temp;\n\
    }\n", "    let strange_sort_list = [];\n    let lstLength = lst.length;\n    let\
    \ counter = 0;\n    for (i = 0; i < lstLength; i++){\n        if (i % 2 == 0){\n\
    \            let firstMin = Math.min(...lst);\n            let index = lst.indexOf(firstMin);\n\
    \            lst.splice(index, 1);\n            strange_sort_list.push(firstMin);\n\
    \        }\n        else{\n            let firstMax = Math.max(...lst);\n    \
    \        let index = lst.indexOf(firstMax);\n            lst.splice(index, 1);\n\
    \            strange_sort_list.push(firstMax);\n        }\n    }\n    return strange_sort_list;\n\
    }", "    if(lst.length === 0){\n        return lst;\n    }\n    lst.sort(function(a,\
    \ b){\n        return a - b;\n    });\n    var result = [];\n    while(lst.length\
    \ > 0){\n        result.push(lst.shift());\n        if(lst.length > 0){\n    \
    \        result.push(lst.pop());\n        }\n    }\n    return result;\n}\n",
  "\tconst N = lst.length;\n\tif(N === 0) return [];\n\tif(N === 1) return lst;\n\t\
    let min = lst[0];\n\tlet max = lst[0];\n\tfor(let i = 1; i < N; i++){\n\t\tif(lst[i]\
    \ < min) min = lst[i];\n\t\tif(lst[i] > max) max = lst[i];\n\t}\n\tif(min ===\
    \ max) return lst;\n\tlet min_idx = -1;\n\tlet max_idx = -1;\n\tlet idx = 0;\n\
    \tlet res = [];\n\twhile(res.length < N){\n\t\tif(min_idx === -1 && lst[idx] ===\
    \ min){\n\t\t\tmin_idx = idx;\n\t\t\tlst[idx] = 0;\n\t\t\tres.push(min);\n\t\t\
    }\n\t\tif(max_idx === -1 && lst[idx] === max){\n\t\t\tmax_idx = idx;\n\t\t\tlst[idx]\
    \ = 0;\n\t\t\tres.push(max);\n\t\t}\n\t\tidx = (idx + 1) % N;\n\t}\n\tif(max_idx\
    \ < min_idx){\n\t\treturn [...res, ...strange_sort_list(lst.slice(max_idx + 1,\
    \ min_idx))];\n\t}\n\telse{\n\t\treturn [...res, ...strange_sort_list(lst.slice(max_idx\
    \ + 1, N).concat(lst.slice(0, min_idx)))];\n\t}\n}", "    var str_lst=[];\n  \
    \  var l=0;\n    var h=lst.length-1;\n    var max=lst[h];\n    lst.sort();\n \
    \   for(var i=0;i<lst.length;i++){\n        if(i%2==0){\n            str_lst[i]=lst[l];\n\
    \            l++;\n        }\n        else{\n            str_lst[i]=lst[h];\n\
    \            h--;\n        }\n    }\n    return str_lst;\n}", "    if(lst.length==0)\
    \ return [];\n    if(lst.length==1) return lst;\n    let min = Math.min(...lst);\n\
    \    let max = Math.max(...lst);\n    let result = [];\n    for(let i=0;i<lst.length;i++){\n\
    \        if(i%2==0){\n            result.push(min);\n            lst.splice(lst.indexOf(min),1);\n\
    \            min = Math.min(...lst);\n        }\n        else {\n            result.push(max);\n\
    \            lst.splice(lst.indexOf(max),1);\n            max = Math.max(...lst);\n\
    \        }\n    }\n    return result;\n}\n", "    if(lst.length == 0) return lst;\n\
    \    var min = lst[0];\n    var min_ind = 0;\n    var max = lst[0];\n    var max_ind\
    \ = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] < min){\n\
    \            min = lst[i];\n            min_ind = i;\n        }\n        if(lst[i]\
    \ > max){\n            max = lst[i];\n            max_ind = i;\n        }\n  \
    \  }\n    var res = [];\n    if(min_ind > max_ind){\n        res.push(min);\n\
    \        res.push(max);\n        res = res.concat(lst.slice(min_ind+1, max_ind));\n\
    \        res = res.concat(lst.slice(max_ind+1, lst.length));\n        res = res.concat(lst.slice(min_ind,\
    \ min_ind+1));\n        res = res.concat(lst.slice(max_ind, max_ind+1));\n   \
    \     res = res.concat(lst.slice(1, min_ind));\n    }\n    else{\n        res.push(min);\n\
    \        res.push(max);\n        res = res.concat(lst.slice(min_ind+1, max_ind));\n\
    \        res = res.concat(lst.slice(max_ind+1, lst.length));\n        res = res.concat(lst.slice(min_ind,\
    \ min_ind+1));\n        res = res.concat(lst.slice(max_ind, max_ind+1));\n   \
    \     res = res.concat(lst.slice(1, min_ind));\n    }\n    return res;\n}\n",
  "\tvar new_lst = [], \n\t\tlst_cpy = lst.slice(0),\n\t\tmin_val = Math.min.apply(Math,\
    \ lst_cpy),\n\t\tmax_val = Math.max.apply(Math, lst_cpy);\n\tif (min_val === max_val)\
    \ { return lst_cpy };\n\twhile (lst_cpy.length > 0) {\n\t\tnew_lst.push(min_val);\n\
    \t\tlst_cpy.splice(lst_cpy.indexOf(min_val), 1);\n\t\tif (lst_cpy.length > 0)\
    \ {\n\t\t\tnew_lst.push(max_val);\n\t\t\tlst_cpy.splice(lst_cpy.indexOf(max_val),\
    \ 1);\n\t\t}\n\t\tif (lst_cpy.length > 0) {\n\t\t\tmin_val = Math.min.apply(Math,\
    \ lst_cpy);\n\t\t\tmax_val = Math.max.apply(Math, lst_cpy);\n\t\t}\n\t}\n\treturn\
    \ new_lst;\n}\n", "  if(lst.length === 0) return [];\n  let sortedList = lst.sort(function(a,\
    \ b){return a-b});\n  let result = [];\n  let bool = false;\n  while(sortedList.length\
    \ !== 0){\n    if(bool === false){\n      result.push(sortedList.shift());\n \
    \     bool = true;\n    } else {\n      result.push(sortedList.pop());\n     \
    \ bool = false;\n    }\n  }\n  return result;\n}\n", "    let sortList = [];\n\
    \    let min = lst[0];\n    let max = lst[0];\n    for (let i = 0; i < lst.length;\
    \ i++){\n        if (lst[i] < min){\n            min = lst[i];\n        }\n  \
    \      if (lst[i] > max){\n            max = lst[i];\n        }\n    }\n    let\
    \ sortList = [];\n    let min = lst[0];\n    let max = lst[0];\n    for (let i\
    \ = 0; i < lst.length; i++){\n        if (lst[i] < min){\n            min = lst[i];\n\
    \        }\n        if (lst[i] > max){\n            max = lst[i];\n        }\n\
    \    }\n    for (let i = 0; i < lst.length; i++){\n        if (lst[i] !== min){\n\
    \            sortList.push(min);\n            lst.splice(lst.indexOf(min), 1);\n\
    \            sortList.push(max);\n            lst.splice(lst.indexOf(max), 1);\n\
    \        }\n    }\n    return sortList;\n}\nstrange_sort_list([-5, -1, -1, 0,\
    \ 4, 7, 8, 12, 12, 15, 18, 19, 20, 27, 28, 28, 29, 29, 31, 34, 37, 41, 42, 43,\
    \ 44, 45, 45, 45, 46, 47, 48, 49, 50, 50, 53, 54, 54, 55, 58, 59, 59, 60, 62,\
    \ 64, 64, 65, 66, 67, 68, 68, 69, 69, 70, 72, 72, 74, 76, 76, 78, 78, 79, 81,\
    \ 81, 82, 82, 84, 86, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87,\
    \ 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87,\
    \ 87, 87, 87, 87", "    var res = [];\n    lst.sort(function(a, b){return a-b});\n\
    \    while(lst.length > 0){\n        res.push(lst.shift());\n        res.push(lst.pop());\n\
    \    }\n    if(res.length == lst.length){\n        res.pop();\n    }\n    return\
    \ res;\n}", "\n}\n", "    if(lst.length == 0){\n        return [];\n    }\n  \
    \  else{\n        var array = [];\n        var lst2 = lst.slice();\n        var\
    \ m = Math.min.apply(null, lst2);\n        lst2.splice(lst2.indexOf(m), 1);\n\
    \        array.push(m);\n        var M = Math.max.apply(null, lst2);\n       \
    \ lst2.splice(lst2.indexOf(M), 1);\n        array.push(M);\n        while(lst2.length\
    \ > 0){\n            var m = Math.min.apply(null, lst2);\n            lst2.splice(lst2.indexOf(m),\
    \ 1);\n            array.push(m);\n            if(lst2.length > 0){\n        \
    \        var M = Math.max.apply(null, lst2);\n                lst2.splice(lst2.indexOf(M),\
    \ 1);\n                array.push(M);\n            }\n        }\n        return\
    \ array;\n    }\n}", "    if (lst.length == 0) return [];\n    if (lst.length\
    \ == 1) return lst;\n    var a = lst.map(function(el, idx, arr){\n        return\
    \ [el, idx]\n    });\n    var min = a.reduce(function(acc, el){\n        if (el[0]\
    \ < acc[0]) return el;\n        return acc;\n    });\n    var max = a.reduce(function(acc,\
    \ el){\n        if (el[0] > acc[0]) return el;\n        return acc;\n    });\n\
    \    var minidx = min[1];\n    var maxidx = max[1];\n    a[minidx][0] = -1000;\n\
    \    a[maxidx][0] = -1000;\n    var b = [min[0], max[0]];\n    while (a.length\
    \ > 0){\n        min = a.reduce(function(acc, el){\n            if (el[0] < acc[0])\
    \ return el;\n            return acc;\n        });\n        max = a.reduce(function(acc,\
    \ el){\n            if (el[0] > acc[0]) return el;\n            return acc;\n\
    \        });\n        minidx = min[1];\n        maxidx = max[1];\n        a[minidx][0]\
    \ = -1000;\n        a[maxidx][0] = -1000;\n        b.push(min[0]);\n        b.push(max[0]);\n\
    \    }\n    var result = b.slice(0, b.length - 2);\n    return result;\n}\n",
  "  if (lst.length === 0) return lst;\n  let next_step = [];\n  let min = Math.min(...lst);\n\
    \  let max = Math.max(...lst);\n  next_step.push(min);\n  next_step.push(max);\n\
    \  for (let i = 0; i < lst.length; i++){\n    if (lst[i] !== min && lst[i] !==\
    \ max){\n      next_step.push(lst[i]);\n    }\n  }\n  console.log(next_step);\n\
    \  return next_step;\n}\n", "    var odd = lst.slice(0).sort(function(a, b){return\
    \ a - b});\n    var even = lst.slice(0).sort(function(a, b){return b - a});\n\
    \    var result = [];\n    while(odd.length > 0 && even.length > 0){\n       \
    \ result.push(odd.shift());\n        result.push(even.shift());\n    }\n    return\
    \ result;\n}\n", "    if(lst.length == 0) return [];\n    if(lst.length == 1)\
    \ return lst;\n    var min_idx = 0;\n    var max_idx = 0;\n    var res = [];\n\
    \    var lst_copy = lst.slice();\n    while(lst_copy.length >= 1){\n        min_idx\
    \ = 0;\n        max_idx = 0;\n        for(var i = 0; i < lst_copy.length; i++){\n\
    \            if(lst_copy[i] > lst_copy[max_idx]) max_idx = i;\n            if(lst_copy[i]\
    \ < lst_copy[min_idx]) min_idx = i;\n        }\n        res.push(lst_copy[min_idx]);\n\
    \        lst_copy.splice(min_idx, 1);\n        if(lst_copy.length == 0) break;\n\
    \        res.push(lst_copy[max_idx]);\n        lst_copy.splice(max_idx, 1);\n\
    \    }\n    return res;\n}\n\nvar t0 = performance.now();", "    var lst = lst.sort(function(a,\
    \ b){return a-b})\n    var ans = []\n    for (i=0; i<lst.length; i++){\n     \
    \   if (i % 2 == 0){\n            ans.push(lst[i/2])\n        } else {\n     \
    \       ans.push(lst[(lst.length-1)-(i/2)])\n        }\n    }\n    return ans\n\
    }", "    var lst2 = lst.slice();\n    if (lst2.length % 2 != 0){\n        lst2.push(lst2[0]);\n\
    \    }\n    var res = [];\n    for (var i = 0; i < lst2.length; i++){\n      \
    \  if (i % 2 == 0){\n            res.push(lst2.shift());\n        }\n        else{\n\
    \            res.push(lst2.pop());\n        }\n    }\n    return res;\n}", " \
    \   // TODO: Implement\n    var sorted = lst.sort(function(a, b){return a-b})\n\
    \    var temp = []\n    for(var i = 0; i < lst.length; i+=2){\n        temp.push(sorted[i])\n\
    \        if(sorted[i+1]){\n            temp.push(sorted[sorted.length - i - 1])\n\
    \        }\n    }\n    return temp\n}", "    var min = Math.min(...lst);\n   \
    \ var max = Math.max(...lst);\n    var res = [min];\n    var last = min;\n   \
    \ var remaining_list = lst.filter(e => e != min);\n    for(let i = 0; i < lst.length;\
    \ i++){\n        if(i % 2 == 0){\n            res.push(max);\n            last\
    \ = max;\n            remaining_list = remaining_list.filter(e => e != max);\n\
    \            max = Math.max(...remaining_list);\n        }\n        else{\n  \
    \          res.push(min);\n            last = min;\n            remaining_list\
    \ = remaining_list.filter(e => e != min);\n            min = Math.min(...remaining_list);\n\
    \        }\n    }\n    return res;\n}\n", "  var max = Math.max.apply(null, lst);\n\
    \  var min = Math.min.apply(null, lst);\n  var i = 0;\n  var j = lst.length -\
    \ 1;\n  var result = new Array(lst.length);\n  while (i<j){\n    result[i++] =\
    \ min;\n    result[j--] = max;\n  }\n  return result;\n}\n", "    lst.sort(function(a,\
    \ b){return a-b});\n    var sorted = [];\n    while(lst.length > 0){\n       \
    \ sorted.push(lst.shift());\n        if(lst.length > 0){\n            sorted.push(lst.pop());\n\
    \        }\n    }\n    return sorted;\n}\n", "\tif (lst.length === 0) return [];\n\
    \tvar res = [Math.min.apply(Math, lst)];\n\tlst.splice(lst.indexOf(res[0]), 1);\n\
    \twhile (lst.length) {\n\t\tres.push(Math.max.apply(Math, lst));\n\t\tlst.splice(lst.indexOf(res[res.length\
    \ - 1]), 1);\n\t\tif (lst.length === 0) return res;\n\t\tres.push(Math.min.apply(Math,\
    \ lst));\n\t\tlst.splice(lst.indexOf(res[res.length - 1]), 1);\n\t}\n\treturn\
    \ res;\n}\n", "  if(lst.length == 0) return lst;\n  var max = lst[0];\n  var min\
    \ = lst[0];\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] < min) min\
    \ = lst[i];\n    if(lst[i] > max) max = lst[i];\n  }\n  var result = [];\n  result.push(min);\n\
    \  result.push(max);\n  for(var i = 0; i < lst.length; i++){\n    if(lst[i] <\
    \ max && lst[i] > min){\n      result.push(lst[i]);\n    }\n  }\n  return result;\n\
    }\n", "    lst = lst.sort();\n    var newList = [];\n    var max = lst.length-1;\n\
    \    var min = 0;\n    while(min <= max){\n        if(newList.length < lst.length){\n\
    \            newList.push(lst[min]);\n            min++;\n        }\n        if(newList.length\
    \ < lst.length){\n            newList.push(lst[max]);\n            max--;\n  \
    \      }\n    }\n    return newList;\n}\n", "\tif (lst.length === 0){\n\t\treturn\
    \ lst;\n\t}\n\tvar result = [];\n\tvar min = null;\n\tvar max = null;\n\tvar minIndex\
    \ = null;\n\tvar maxIndex = null;\n\tlst.map(function(el, i){\n\t\tif (min ===\
    \ null || el < min){\n\t\t\tmin = el;\n\t\t\tminIndex = i;\n\t\t}\n\t\tif (max\
    \ === null || el > max){\n\t\t\tmax = el;\n\t\t\tmaxIndex = i;\n\t\t}\n\t});\n\
    \tvar temp = lst[minIndex];\n\tlst[minIndex] = lst[maxIndex];\n\tlst[maxIndex]\
    \ = temp;\n\tresult.push(min);\n\tresult.push(max);\n\treturn result.concat(strange_sort_list(lst.slice(1,\
    \ lst.length - 1)));\n}", "  let result = [];\n  let max = [];\n  let min = [];\n\
    \  if (lst.length === 0) return [];\n  if (lst.length === 1) return lst;\n  let\
    \ k = Math.max(...lst);\n  let g = Math.min(...lst);\n  let indK = lst.indexOf(k);\n\
    \  let indG = lst.indexOf(g);\n  lst.splice(indK, 1);\n  lst.splice(indG, 1);\n\
    \  max.push(k);\n  min.push(g);\n  while (lst.length > 0) {\n    let k = Math.max(...lst);\n\
    \    let g = Math.min(...lst);\n    let indK = lst.indexOf(k);\n    let indG =\
    \ lst.indexOf(g);\n    lst.splice(indK, 1);\n    lst.splice(indG, 1);\n    max.push(k);\n\
    \    min.push(g);\n  }\n  for (let i = 0; i < max.length; i++) {\n    result.push(min[i]);\n\
    \    result.push(max[i]);\n  }\n  return result;\n}\n", "    var i, endi, lendi;\n\
    \    var ret = [];\n    if (lst.length === 0){\n        return [];\n    }\n  \
    \  endi = lst.length - 1;\n    lendi = lst.length / 2;\n    i = 0;\n    while\
    \ (i < lendi){\n        ret.push(lst[i]);\n        ret.push(lst[endi]);\n    \
    \    i += 1;\n        endi -= 1;\n    }\n    if (lst.length % 2 !== 0){\n    \
    \    ret.push(lst[i]);\n    }\n    return ret;\n}", "    if(lst.length === 0)\
    \ {\n        return lst;\n    }\n\n    var list = lst.slice();\n    var start\
    \ = list.splice(0, 1);\n    var temp = start.concat(list.sort(function(a, b){return\
    \ a-b;}));\n    var min = temp.slice(0, 1);\n    var max = temp.slice(1, 2);\n\
    \    var new_lst = [min];\n    var switch_ = true;\n    for(var i = 2; i < temp.length;\
    \ i++){\n        if(switch_){\n            new_lst.push(temp[i]);\n          \
    \  switch_ = false;\n        } else {\n            new_lst.unshift(temp[i]);\n\
    \            switch_ = true;\n        }\n    }\n    if(switch_){\n        new_lst.push(max);\n\
    \    } else {\n        new_lst.unshift(max);\n    }\n    return new_lst;\n}\n",
  "  var minmax = {\n    min: lst[0],\n    max: lst[0]\n  };\n  for (var i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i] < minmax.min) {\n      minmax.min = lst[i];\n\
    \    }\n    if (lst[i] > minmax.max) {\n      minmax.max = lst[i];\n    }\n  }\n\
    \  var lst2 = [minmax.min];\n  var increasing = true;\n  while (lst2.length <\
    \ lst.length) {\n    var temp = [];\n    if (increasing) {\n      for (var j =\
    \ 0; j < lst.length; j++) {\n        if (lst[j] !== minmax.min && lst[j] !== minmax.max)\
    \ {\n          temp.push(lst[j]);\n        }\n      }\n      for (var k = 0; k\
    \ < temp.length; k++) {\n        if (temp[k] > lst2[lst2.length - 1]) {\n    \
    \      lst2.push(temp[k]);\n        }\n      }\n      lst2.push(minmax.max);\n\
    \      increasing = false;\n    } else {\n      for (var m = 0; m < lst.length;\
    \ m++) {\n        if (lst[m] !== minmax.min && lst[m] !== minmax.max) {\n    \
    \      temp.push(lst[m]);\n        }\n      }\n      for (var n = 0; n < temp.length;\
    \ n++) {\n        if (temp[n] < lst2[lst2.length - 1]) {\n          lst2.push(temp[n]);\n\
    \        }\n      }\n      increasing = true;\n    }\n  }\n  return lst2;\n}",
  "    if (lst.length % 2 == 0){\n        let new_list = [];\n        for (let i =\
    \ 0; i < lst.length; i+=2){\n            new_list.push(Math.min(...lst));\n  \
    \          lst.splice(lst.indexOf(Math.min(...lst)), 1);\n            new_list.push(Math.max(...lst));\n\
    \            lst.splice(lst.indexOf(Math.max(...lst)), 1);\n        }\n      \
    \  return new_list;\n    } else {\n        let new_list = [];\n        for (let\
    \ i = 0; i < lst.length - 1; i+=2){\n            new_list.push(Math.min(...lst));\n\
    \            lst.splice(lst.indexOf(Math.min(...lst)), 1);\n            new_list.push(Math.max(...lst));\n\
    \            lst.splice(lst.indexOf(Math.max(...lst)), 1);\n        }\n      \
    \  new_list.push(lst[0]);\n        return new_list;\n    }\n}\n", "    var res\
    \ = []\n    if (lst.length < 1) {\n        return res\n    }\n    lst.sort(function(a,\
    \ b){return a-b})\n    while (lst.length > 0) {\n        if (lst.length > 1) {\n\
    \            res.push(lst.shift())\n            res.push(lst.pop())\n        }\
    \ else {\n            res.push(lst.shift())\n        }\n    }\n    return res\n\
    }\n", "\tif (lst.length == 0) return lst;\n\tvar arr = [];\n\tvar max = Math.max.apply(null,\
    \ lst);\n\tvar min = Math.min.apply(null, lst);\n\tvar maxArr = lst.filter(n =>\
    \ n == max);\n\tvar minArr = lst.filter(n => n == min);\n\tvar remaining = lst.filter(n\
    \ => n != max && n != min);\n\tvar i = 0;\n\twhile (remaining.length){\n\t\tif\
    \ (i%2 == 0){\n\t\t\tvar temp = minArr.shift();\n\t\t\tif (temp){\n\t\t\t\tarr.push(temp);\n\
    \t\t\t}\n\t\t} else {\n\t\t\tvar temp = maxArr.shift();\n\t\t\tif (temp){\n\t\t\
    \t\tarr.push(temp);\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\tif (minArr.length){\n\t\t\
    arr = arr.concat(minArr);\n\t}\n\tif (maxArr.length){\n\t\tarr = arr.concat(maxArr);\n\
    \t}\n\treturn arr;\n}\n", "  var min_max_lst = [];\n  if (lst.length % 2 == 0){\n\
    \    var i = 1;\n    while (i < lst.length - 1){\n      var min = Math.min.apply(null,\
    \ lst);\n      var max = Math.max.apply(null, lst);\n      var index_of_min =\
    \ lst.indexOf(min);\n      var index_of_max = lst.indexOf(max);\n      min_max_lst.push(min);\n\
    \      min_max_lst.push(max);\n      lst.splice(index_of_min, 1);\n      lst.splice(index_of_max\
    \ - 1, 1);\n      i += 2;\n    }\n  }\n  else {\n    var i = 1;\n    while (i\
    \ < lst.length){\n      var min = Math.min.apply(null, lst);\n      var max =\
    \ Math.max.apply(null, lst);\n      var index_of_min = lst.indexOf(min);\n   \
    \   var index_of_max = lst.indexOf(max);\n      min_max_lst.push(min);\n     \
    \ min_max_lst.push(max);\n      lst.splice(index_of_min, 1);\n      lst.splice(index_of_max\
    \ - 1, 1);\n      i += 2;\n    }\n  }\n  return min_max_lst;\n}\n", "    let result\
    \ = [];\n    if(lst.length % 2 == 0){\n        let i = 0;\n        let j = lst.length\
    \ - 1;\n        while(i < j){\n            result.push(lst[i]);\n            result.push(lst[j]);\n\
    \            i++;\n            j--;\n        }\n    }\n    else{\n        let\
    \ i = 0;\n        let j = lst.length - 1;\n        while(i < j){\n           \
    \ result.push(lst[i]);\n            result.push(lst[j]);\n            i++;\n \
    \           j--;\n        }\n        result.push(lst[i]);\n    }\n    return result;\n\
    }\n", "    if (lst.length === 0) {\n        return [];\n    }\n    let new_list\
    \ = [];\n    new_list.push(Math.min(...lst));\n    while (lst.length > 0) {\n\
    \        if (lst.length > 1) {\n            new_list.push(Math.max(...lst));\n\
    \        }\n        lst.splice(lst.indexOf(Math.min(...lst)), 1);\n        lst.splice(lst.indexOf(Math.max(...lst)),\
    \ 1);\n    }\n    return new_list;\n}", "    var sortedList = lst.sort(function(a,\
    \ b){return a-b});\n    var secondHalfList = sortedList.splice(Math.floor(sortedList.length/2));\n\
    \    var result = [];\n    if(sortedList.length > secondHalfList.length){\n  \
    \      for(var i = 0; i < sortedList.length; i++){\n            result.push(sortedList[i]);\n\
    \            if(secondHalfList[i] != undefined){\n                result.push(secondHalfList[i]);\n\
    \            }\n        }\n    }else if(sortedList.length < secondHalfList.length){\n\
    \        for(var i = 0; i < secondHalfList.length; i++){\n            result.push(secondHalfList[i]);\n\
    \            if(sortedList[i] != undefined){\n                result.push(sortedList[i]);\n\
    \            }\n        }\n    }else{\n        for(var i = 0; i < sortedList.length;\
    \ i++){\n            result.push(sortedList[i]);\n            result.push(secondHalfList[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    if (lst.length == 0) return\
    \ lst;\n    lst.sort(function(a, b){\n        return a - b;\n    });\n    var\
    \ res = [lst[0]];\n    lst.splice(0, 1);\n    var len = lst.length;\n    for (var\
    \ i = 0; i < len; i++){\n        if (i % 2 == 0){\n            res.push(lst[0]);\n\
    \            lst.splice(0, 1);\n        }\n        else{\n            res.push(lst[lst.length\
    \ - 1]);\n            lst.splice(lst.length - 1, 1);\n        }\n    }\n    return\
    \ res;\n}\n", "    const lst_len = lst.length;\n    if (lst_len <= 1) return lst;\n\
    \    let [odd, even] = [lst.filter((x, i) => i % 2), lst.filter((x, i) => !(i\
    \ % 2))];\n    return [Math.min(...odd), Math.max(...even), ...strange_sort_list(odd.filter(x\
    \ => x !== Math.min(...odd)).concat(even.filter(x => x !== Math.max(...even))))];\n\
    }\n", "  if (lst.length < 2) return lst;\n  let res = [];\n  let isMax = true;\n\
    \  let newLst = [...lst];\n  while (newLst.length > 0) {\n    if (isMax) {\n \
    \     res.push(Math.max(...newLst));\n      newLst.splice(newLst.indexOf(Math.max(...newLst)),\
    \ 1);\n    } else {\n      res.push(Math.min(...newLst));\n      newLst.splice(newLst.indexOf(Math.min(...newLst)),\
    \ 1);\n    }\n    isMax = !isMax;\n  }\n  return res;\n}\n", "  let result = []\n\
    \  if(lst.length == 0){\n    return []\n  }\n  else if(lst.length == 1){\n   \
    \ return lst\n  }\n  else{\n    let min = Math.min(...lst)\n    let max = Math.max(...lst)\n\
    \    let new_lst = lst.filter(function(e){return e != min && e != max})\n    result.push(min)\n\
    \    result.push(max)\n    let flag = true\n    while(flag){\n      if(new_lst.length\
    \ > 0){\n        if(flag){\n          min = Math.min(...new_lst)\n          new_lst\
    \ = new_lst.filter(function(e){return e != min})\n          result.push(min)\n\
    \          flag = false\n        }\n        else{\n          max = Math.max(...new_lst)\n\
    \          new_lst = new_lst.filter(function(e){return e != max})\n          result.push(max)\n\
    \          flag = true\n        }\n      }\n      else{\n        flag = false\n\
    \      }\n    }\n    return result\n  }\n}\nstrange_sort_list([1, 2, 3, 4])\n",
  "    if (lst.length == 0) return lst;\n    let maxIndex = 0;\n    let minIndex =\
    \ 0;\n    let max = lst[0];\n    let min = lst[0];\n    let result = [];\n   \
    \ for (let i = 0; i < lst.length; i++){\n        if (lst[i] > max){\n        \
    \    max = lst[i];\n            maxIndex = i;\n        }\n        if (lst[i] <\
    \ min){\n            min = lst[i];\n            minIndex = i;\n        }\n   \
    \ }\n    result.push(min);\n    if (max != min){\n        result.push(max);\n\
    \    }\n    lst.splice(minIndex, 1);\n    if (maxIndex > minIndex){\n        lst.splice(maxIndex\
    \ - 1, 1);\n    }\n    else{\n        lst.splice(maxIndex, 1);\n    }\n    return\
    \ result.concat(strange_sort_list(lst));\n}\n", "    let sorted = [];\n    lst.sort((a,\
    \ b) => a - b);\n    let first = lst.shift();\n    sorted.push(first);\n    while\
    \ (lst.length > 0){\n        let first_index = 0;\n        let last_index = lst.length\
    \ - 1;\n        let first_element = lst[first_index];\n        let last_element\
    \ = lst[last_index];\n        sorted.push(last_element);\n        lst.splice(last_index,\
    \ 1);\n        sorted.push(first_element);\n        lst.splice(first_index, 1);\n\
    \    }\n    return sorted;\n}", "    let result = [];\n    lst.sort((a, b) =>\
    \ a - b);\n    while (lst.length > 0) {\n        result.push(lst.shift());\n \
    \       result.push(lst.pop());\n    }\n    return result;\n}\n", "    let list\
    \ = [...lst];\n    let result = [];\n    let length = list.length;\n    let max\
    \ = Math.max(...list);\n    let min = Math.min(...list);\n    let flag = true;\n\
    \    for(let i = 0; i < length; i++){\n        if(flag){\n            let minIndex\
    \ = list.indexOf(min);\n            result.push(min);\n            delete list[minIndex];\n\
    \            flag = false;\n        }\n        else{\n            let maxIndex\
    \ = list.indexOf(max);\n            result.push(max);\n            delete list[maxIndex];\n\
    \            flag = true;\n        }\n    }\n    return result;\n}", "    var\
    \ min = Math.min(...lst);\n    var max = Math.max(...lst);\n    var res = [];\n\
    \    while (min != max){\n        res.push(min, max);\n        var index_min =\
    \ lst.indexOf(min);\n        var index_max = lst.indexOf(max);\n        lst.splice(index_min,\
    \ 1);\n        lst.splice(index_max - 1, 1);\n        min = Math.min(...lst);\n\
    \        max = Math.max(...lst);\n    }\n    res.push(min);\n    return res;\n\
    }\n", "    const length = lst.length;\n    const new_lst = [];\n    if (length\
    \ < 2) {\n        return lst;\n    }\n    let up = true;\n    while (lst.length\
    \ > 0) {\n        if (up) {\n            new_lst.push(lst.shift());\n        }\
    \ else {\n            new_lst.push(lst.pop());\n        }\n        up = !up;\n\
    \    }\n    return new_lst;\n}\n", "    if (lst.length === 0){\n        return\
    \ [];\n    }\n    const min = Math.min(...lst);\n    const max = Math.max(...lst);\n\
    \    const minIndex = lst.indexOf(min);\n    const maxIndex = lst.indexOf(max);\n\
    \    lst.splice(minIndex, 1);\n    lst.splice(maxIndex - 1, 1);\n    return [min,\
    \ max, ...strange_sort_list(lst)];\n}\n\n", "    if (lst.length == 0) {\n    \
    \    return [];\n    }\n    var lst2 = lst.slice();\n    lst2.sort(function(a,\
    \ b){return a-b});\n    var result = [];\n    var front = 0;\n    var end = lst2.length\
    \ - 1;\n    while (end >= front) {\n        result.push(lst2[front]);\n      \
    \  if (end != front) {\n            result.push(lst2[end]);\n        }\n     \
    \   front += 1;\n        end -= 1;\n    }\n    return result;\n}\n", "    if(lst.length\
    \ === 0){\n        return [];\n    }\n    lst.sort(function(a, b){return a-b});\n\
    \    var result = [];\n    var start = 0;\n    var end = lst.length - 1;\n   \
    \ while(start <= end){\n        result.push(lst[start]);\n        if(start !==\
    \ end){\n            result.push(lst[end]);\n        }\n        start++;\n   \
    \     end--;\n    }\n    return result;\n}\n", "  \n  if (lst.length == 0){\n\
    \    return [];\n  }\n  \n  lst.sort(function(a, b){return a-b});\n  var ans =\
    \ [];\n  var left = 0;\n  var right = lst.length - 1;\n  while (left < right){\n\
    \    ans.push(lst[left]);\n    ans.push(lst[right]);\n    left++;\n    right--;\n\
    \  }\n  if (left == right){\n    ans.push(lst[left]);\n  }\n  return ans;\n}",
  "    var odd = [];\n    var even = [];\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(i % 2 == 0){\n            odd.push(lst[i]);\n        }\n        else{\n\
    \            even.push(lst[i]);\n        }\n    }\n    var result = odd.concat(even);\n\
    \    return result;\n}\n", "    lst.sort(function(a, b){return a-b})\n    var\
    \ i = 0;\n    var j = lst.length - 1;\n    var res = [];\n    while (i < j){\n\
    \        res.push(lst[i]);\n        res.push(lst[j]);\n        i++;\n        j--;\n\
    \    }\n    if (i == j){\n        res.push(lst[i]);\n    }\n    return res;\n\
    }\n", "    if (lst.length == 0) {\n        return lst;\n    }\n    var min_val\
    \ = Math.min.apply(null, lst);\n    var max_val = Math.max.apply(null, lst);\n\
    \    var arr = [];\n    if (lst.length % 2 == 0) {\n        for (var i = 0; i\
    \ < lst.length / 2; i++) {\n            arr.push(min_val);\n            min_val\
    \ = find_val(lst, min_val);\n            arr.push(max_val);\n            max_val\
    \ = find_val(lst, max_val);\n        }\n    } else {\n        for (var i = 0;\
    \ i < lst.length / 2; i++) {\n            arr.push(min_val);\n            min_val\
    \ = find_val(lst, min_val);\n            arr.push(max_val);\n            max_val\
    \ = find_val(lst, max_val);\n        }\n        arr.push(min_val);\n    }\n  \
    \  return arr;\n}\n", "\tif(lst.length > 1){\n\t\tlst.sort((a, b) => a - b);\n\
    \t\tfor(let i = 1; i < lst.length; i+=2){\n\t\t\tlst.splice(i, 0, lst.pop());\n\
    \t\t}\n\t}\n\treturn lst;\n}", "    if(lst.length === 0) return [];\n    var sorted\
    \ = lst.sort(function(a, b){\n        return a-b;\n    });\n    var res = [];\n\
    \    var len = lst.length;\n    if(len%2 === 0){\n        for(var i = 0; i < len/2;\
    \ i++){\n            res.push(sorted[i]);\n            res.push(sorted[len-1-i]);\n\
    \        }\n    }else{\n        for(var i = 0; i < len/2; i++){\n            res.push(sorted[i]);\n\
    \            res.push(sorted[len-1-i]);\n        }\n        res.push(sorted[Math.floor(len/2)]);\n\
    \    }\n    return res;\n}", "    var asc = 0;\n    var des = lst.length - 1;\n\
    \    var arr = [];\n    var temp = 0;\n    for(var i = 0; i < lst.length; i++){\n\
    \        if(i % 2 == 0){\n            arr[i] = lst[asc];\n            asc++;\n\
    \        }\n        else{\n            arr[i] = lst[des];\n            des--;\n\
    \        }\n    }\n    return arr;\n}\n", "    var min, max;\n    min = Math.min.apply(null,\
    \ lst);\n    max = Math.max.apply(null, lst);\n    var strangeArr = [min];\n \
    \   var removeArr = [min];\n    var i = 0;\n    while(i < lst.length - 1){\n \
    \       if(removeArr.indexOf(max) === -1 && removeArr.indexOf(min) === -1){\n\
    \            strangeArr.push(max);\n            removeArr.push(max);\n       \
    \ }\n        if(removeArr.indexOf(min) === -1 && removeArr.indexOf(max) === -1){\n\
    \            strangeArr.push(min);\n            removeArr.push(min);\n       \
    \ }\n        min = Math.min.apply(null, lst);\n        max = Math.max.apply(null,\
    \ lst);\n        i++;\n    }\n    return strangeArr;\n}\n", "    var sorted =\
    \ [];\n    while(lst.length > 0){\n        var min = lst[0];\n        var max\
    \ = lst[0];\n        for(var i = 0; i < lst.length; i++){\n            if(lst[i]\
    \ < min){\n                min = lst[i];\n            }\n            if(lst[i]\
    \ > max){\n                max = lst[i];\n            }\n        }\n        sorted.push(min);\n\
    \        if(min !== max){\n            sorted.push(max);\n        }\n        lst.splice(lst.indexOf(min),\
    \ 1);\n        if(min !== max){\n            lst.splice(lst.indexOf(max), 1);\n\
    \        }\n    }\n    return sorted;\n}", "    let index1 = 0;\n    let index2\
    \ = lst.length - 1;\n    let newLst = [];\n    let newLstIndex = 0;\n    if (lst.length\
    \ % 2 === 0){\n        while (index1 < index2){\n            newLst[newLstIndex]\
    \ = lst[index1];\n            newLst[newLstIndex + 1] = lst[index2];\n       \
    \     index1++;\n            index2--;\n            newLstIndex += 2;\n      \
    \  }\n    }\n    else{\n        while (index1 < index2){\n            newLst[newLstIndex]\
    \ = lst[index1];\n            newLst[newLstIndex + 1] = lst[index2];\n       \
    \     index1++;\n            index2--;\n            newLstIndex += 2;\n      \
    \  }\n        newLst[newLstIndex] = lst[index1];\n    }\n    return newLst;\n\
    }\n", "    var l = lst.length;\n    var arr = [];\n    for(var i = 0; i < l; i++){\n\
    \        var min = Math.min.apply(null, lst);\n        arr.push(min);\n      \
    \  lst.splice(lst.indexOf(min), 1);\n        if(lst.length === 0){\n         \
    \   break;\n        }\n        var max = Math.max.apply(null, lst);\n        arr.push(max);\n\
    \        lst.splice(lst.indexOf(max), 1);\n    }\n    return arr;\n}", "    if\
    \ (lst.length == 0) {\n        return [];\n    }\n    var sorted = [];\n    var\
    \ min = Math.min.apply(null, lst);\n    var max = Math.max.apply(null, lst);\n\
    \    sorted.push(min);\n    sorted.push(max);\n    while (lst.length > 0) {\n\
    \        if (lst.indexOf(min) > -1) {\n            lst.splice(lst.indexOf(min),\
    \ 1);\n        }\n        if (lst.indexOf(max) > -1) {\n            lst.splice(lst.indexOf(max),\
    \ 1);\n        }\n        min = Math.min.apply(null, lst);\n        max = Math.max.apply(null,\
    \ lst);\n        sorted.push(min);\n        sorted.push(max);\n    }\n    sorted.pop();\n\
    \    return sorted;\n}\n", "    if(lst.length < 2){\n        return lst;\n   \
    \ }\n    var sorted_lst = [lst[0]];\n    lst.splice(0, 1);\n    while(lst.length\
    \ > 0){\n        var min = Math.min.apply(null, lst);\n        sorted_lst.push(min);\n\
    \        lst.splice(lst.indexOf(min), 1);\n        if(lst.length == 0){\n    \
    \        break;\n        }\n        var max = Math.max.apply(null, lst);\n   \
    \     sorted_lst.push(max);\n        lst.splice(lst.indexOf(max), 1);\n    }\n\
    \    return sorted_lst;\n}", "    if (lst.length <= 1) return lst;\n    let arr\
    \ = [];\n    let minIndex = 0;\n    let maxIndex = 0;\n    while (arr.length <\
    \ lst.length){\n        minIndex = findMinIndex(lst);\n        maxIndex = findMaxIndex(lst);\n\
    \        arr.push(lst[minIndex]);\n        arr.push(lst[maxIndex]);\n        lst[minIndex]\
    \ = null;\n        lst[maxIndex] = null;\n    }\n    return arr;\n}", "    if\
    \ (lst.length < 2) return lst;\n    //get min, max\n    var min = Math.min.apply(Math,\
    \ lst);\n    var max = Math.max.apply(Math, lst);\n    var arr = [],\n       \
    \ i = 0;\n    while (true) {\n        if (arr.length === lst.length) break;\n\
    \        if (i % 2 === 0) {\n            arr.push(min);\n            lst.splice(lst.indexOf(min),\
    \ 1);\n            min = Math.min.apply(Math, lst);\n        } else {\n      \
    \      arr.push(max);\n            lst.splice(lst.indexOf(max), 1);\n        \
    \    max = Math.max.apply(Math, lst);\n        }\n        i++;\n    }\n    return\
    \ arr;\n}\n", "    if(lst.length == 0){\n        return [];\n    }else{\n    \
    \    return [Math.min(...lst)].concat(strange_sort_list(lst.filter(e => e !==\
    \ Math.min(...lst))))\n            .concat([Math.max(...lst.filter(e => e !==\
    \ Math.min(...lst)))]).concat(strange_sort_list(lst.filter(e => e !== Math.max(...lst.filter(e\
    \ => e !== Math.min(...lst))))));\n    }\n}\n", "    return lst.length? [lst.splice(lst.indexOf(Math.min(...lst)),1),\
    \ lst.splice(lst.indexOf(Math.max(...lst)),1)] : [];\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
