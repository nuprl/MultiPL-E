name: HumanEval_1_separate_paren_groups
language: js
prompt: "//Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n// separate those group into separate strings and\
  \ return the array of those.\n// Separate groups are balanced (each open brace is\
  \ properly closed) and not nested within each other\n// Ignore any spaces in the\
  \ input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )( ))\")\n// [\"()\"\
  , \"(())\", \"(()())\"]\nfunction separate_paren_groups(paren_string){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
  ),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"\
  () (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"\
  (()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) ((\
  \ )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
completions: ["    var groups = [];\n    var group = \"\";\n    var paren_count =\
    \ 0;\n    for (var i = 0; i < paren_string.length; i++){\n        if (paren_string[i]\
    \ === \"(\"){\n            if (paren_count > 0){\n                group += paren_string[i];\n\
    \            }\n            paren_count++;\n        }\n        else if (paren_string[i]\
    \ === \")\"){\n            paren_count--;\n            if (paren_count === 0){\n\
    \                groups.push(group + \")\");\n                group = \"\";\n\
    \            }\n            else {\n                group += paren_string[i];\n\
    \            }\n        }\n    }\n    return groups;\n}\n", "    var count = 0;\n\
    \    var group = '';\n    var groups = [];\n    for (var i = 0; i < paren_string.length;\
    \ i++){\n        if (paren_string[i] === '('){\n            count++;\n       \
    \     group += paren_string[i];\n        } else if (paren_string[i] === ')'){\n\
    \            count--;\n            group += paren_string[i];\n        }\n    \
    \    if (count === 0 && group){\n            groups.push(group);\n           \
    \ group = '';\n        }\n    }\n    return groups;\n}\n", "  //make the parenthesis\
    \ string into an array of each character\n  var character_array = paren_string.split(\"\
    \");\n  var new_array = [];\n  //loop through the character array, checking for\
    \ open brackets\n  for (var i = 0; i < character_array.length; i++) {\n    if\
    \ (character_array[i] === \"(\") {\n      new_array.push(character_array[i]);\n\
    \      for (var j = i+1; j < character_array.length; j++) {\n        new_array.push(character_array[j]);\n\
    \        if (character_array[j] === \")\") {\n          new_array.push(character_array[j]);\n\
    \          i = j;\n          break;\n        }\n      }\n    }\n  }\n  //new_array\
    \ is all of the balanced parenthesis groupings\n  return new_array;\n}\n", " \
    \   const stack = [];\n    const array = [];\n    let word = \"\";\n    for(let\
    \ i = 0; i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"\
    ){\n            stack.push(paren_string[i]);\n        }\n        else if(paren_string[i]\
    \ === \")\"){\n            if(stack.length !== 0){\n                stack.pop();\n\
    \                word += paren_string[i];\n            }\n            if(stack.length\
    \ === 0){\n                array.push(word);\n                word = \"\";\n \
    \           }\n        }\n    }\n    return array;\n}\n", "    var ret = [];\n\
    \    var count = 0;\n    var current_paren_group = '';\n    for(var i = 0; i <\
    \ paren_string.length; i++){\n        if(paren_string[i] === '('){\n         \
    \   count++;\n            current_paren_group += paren_string[i];\n        }\n\
    \        else if(paren_string[i] === ')'){\n            current_paren_group +=\
    \ paren_string[i];\n            count--;\n            if(count === 0){\n     \
    \           ret.push(current_paren_group);\n                current_paren_group\
    \ = '';\n            }\n        }\n    }\n    return ret;\n}", "\tvar results\
    \ = [];\n\tvar temp_group = '';\n\tvar count = 0;\n\tfor(var i = 0; i < paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] === '('){\n\t\t\tcount++;\n\t\t\ttemp_group +=\
    \ paren_string[i];\n\t\t}\n\t\telse if(paren_string[i] === ')'){\n\t\t\tcount--;\n\
    \t\t\ttemp_group += paren_string[i];\n\t\t}\n\t\tif(!count){\n\t\t\tresults.push(temp_group);\n\
    \t\t\ttemp_group = '';\n\t\t}\n\t}\n\treturn results;\n}\n", "    let result =\
    \ []\n    let temp = ''\n    let counter = 0\n    for(let i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] === '('){\n            temp += paren_string[i]\n\
    \            counter += 1\n        }\n        else if(paren_string[i] === ')'){\n\
    \            temp += paren_string[i]\n            counter -= 1\n            if(counter\
    \ === 0){\n                result.push(temp)\n                temp = ''\n    \
    \        }\n        }\n    }\n    return result\n}\n", "  // remove all spaces\n\
    \  paren_string = paren_string.replace(/\\s/g, '');\n  // create a result array\n\
    \  const result = [];\n  // loop over each character of string\n  let count =\
    \ 0;\n  let temp = '';\n  for (let char of paren_string) {\n    if (char === '(')\
    \ {\n      count++;\n    } else if (char === ')') {\n      count--;\n    }\n \
    \   temp += char;\n    if (count === 0) {\n      result.push(temp);\n      temp\
    \ = '';\n    }\n  }\n  return result;\n}\n", "  var paren_stack = [];\n  var temp_string\
    \ = \"\";\n  var paren_array = [];\n  for(var i = 0; i < paren_string.length;\
    \ i++){\n    if(paren_string[i] === \"(\"){\n      paren_stack.push(paren_string[i]);\n\
    \      temp_string += paren_string[i];\n    }\n    else if(paren_string[i] ===\
    \ \")\"){\n      paren_stack.pop();\n      temp_string += paren_string[i];\n \
    \     if(paren_stack.length === 0){\n        paren_array.push(temp_string);\n\
    \        temp_string = \"\";\n      }\n    }\n  }\n  return paren_array;\n}",
  "    var parens = paren_string.split(\" \").join(\"\");\n    var parenGroups = [];\n\
    \    var group = '';\n    for(var i = 0; i < parens.length; i++){\n        if(parens[i]\
    \ == '(') group += '(';\n        else if(parens[i] == ')'){\n            group\
    \ += ')';\n            parenGroups.push(group);\n            group = '';\n   \
    \     }\n    }\n    return parenGroups;\n}\n\n", "    let groups = [];\n    let\
    \ open_parens = 0;\n    let paren_group = \"\";\n    for (let i = 0; i < paren_string.length;\
    \ i++){\n        let char = paren_string[i];\n        if (char === \"(\"){\n \
    \           if (open_parens === 0){\n                paren_group = char;\n   \
    \         } else {\n                paren_group += char;\n            }\n    \
    \        open_parens += 1;\n        } else if (char === \")\"){\n            open_parens\
    \ -= 1;\n            paren_group += char;\n            if (open_parens === 0){\n\
    \                groups.push(paren_group);\n            }\n        }\n    }\n\
    \    return groups;\n}\n", "    // 1. Find first open paren\n    // 2. Look forward\
    \ until reaching a closing paren\n    // 3. When reaching closing paren, add to\
    \ answer string and then repeat\n    var paren_list = paren_string.split(\"\"\
    );\n    var answer = [];\n    var i = 0;\n    while (i < paren_list.length){\n\
    \        var curr_paren = paren_list[i];\n        if (curr_paren != \"(\"){\n\
    \            i++;\n            continue;\n        }\n        var paren_group =\
    \ \"\";\n        var open_count = 0;\n        while (i < paren_list.length){\n\
    \            curr_paren = paren_list[i];\n            if (curr_paren == \"(\"\
    ){\n                open_count++;\n            }\n            else if (curr_paren\
    \ == \")\"){\n                open_count--;\n            }\n            if (open_count\
    \ == 0){\n                break;\n            }\n            paren_group += curr_paren;\n\
    \            i++;\n        }\n        answer.push(paren_group);\n        i++;\n\
    \    }\n    return answer;\n}\n", "    // your code goes here\n}\n", "    var\
    \ res = [];\n    var current = '';\n    var nest_level = 0;\n    for (var i =\
    \ 0; i < paren_string.length; i++){\n        if (paren_string[i] == '('){\n  \
    \          if (nest_level == 0){\n                current = '';\n            }\n\
    \            nest_level += 1;\n            current += '(';\n        }\n      \
    \  else if (paren_string[i] == ')'){\n            if (nest_level == 1){\n    \
    \            res.push(current + ')');\n            }\n            else{\n    \
    \            current += ')';\n            }\n            nest_level -= 1;\n  \
    \      }\n    }\n    return res;\n}", "    var paren_count = 0;\n    var output\
    \ = [];\n    var current_string = '';\n    for (var i = 0; i < paren_string.length;\
    \ i++){\n        var current_char = paren_string[i];\n        // In this block,\
    \ if the current character is a space or if the paren count is 0, we don't add\
    \ it to the current string\n        if (current_char === ' ' || paren_count ===\
    \ 0){\n            if (current_char === '('){\n                paren_count +=\
    \ 1;\n            }\n            else if (current_char === ')'){\n           \
    \     paren_count -= 1;\n            }\n            if (current_string !== ''){\n\
    \                output.push(current_string);\n                current_string\
    \ = '';\n            }\n        }\n        // If the paren count is greater than\
    \ 0 and the current character is not a space, we add it to the current string\n\
    \        else if (paren_count > 0 && current_char !== ' '){\n            if (current_char\
    \ === '('){\n                paren_count += 1;\n            }\n            else\
    \ if (current_char === ')'){\n                paren_count -= 1;\n            }\n\
    \            current_string += current_char;\n        }\n    }\n    if (current_string\
    \ !== ''){\n        output.push(current_string);\n    }\n    return output;\n\
    }\n", "\tvar regex = /([\\(\\)\\s])/gi;\n\tvar array = [];\n\tvar stack = [];\n\
    \tvar new_string = \"\";\n\tvar new_stack = [];\n\tvar new_paren_string = \"\"\
    ;\n\tvar temp = \"\";\n\tparen_string = paren_string.replace(regex, \"\");\n\t\
    var length = paren_string.length;\n\tvar original_length = length;\n\twhile(length\
    \ > 0){\n\t\tfor(var i = 0; i < length; i++){\n\t\t\tnew_string = new_string +\
    \ paren_string[i];\n\t\t\tif(paren_string[i] == '('){\n\t\t\t\tstack.push('(');\n\
    \t\t\t}\n\t\t\telse if(paren_string[i] == ')'){\n\t\t\t\tstack.pop();\n\t\t\t\
    }\n\t\t\tif(stack.length == 0){\n\t\t\t\tlength = length - new_string.length;\n\
    \t\t\t\tnew_paren_string = new_paren_string + new_string;\n\t\t\t\tnew_string\
    \ = \"\";\n\t\t\t\tarray.push(new_paren_string);\n\t\t\t\tnew_paren_string = \"\
    \";\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn array;\n}\n", "  var result\
    \ = [];\n  var start = 0;\n  var end = 0;\n  for(var i = 0; i < paren_string.length;\
    \ i++){\n    if(paren_string[i] === \"(\"){\n      start = i;\n    }\n    if(paren_string[i]\
    \ === \")\"){\n      end = i;\n      result.push(paren_string.slice(start, end\
    \ + 1));\n    }\n  }\n  return result;\n}\n", "    let groups = []\n    for (let\
    \ i = 0; i < paren_string.length; i++) {\n        let group = ''\n        if (paren_string[i]\
    \ == '(') {\n            let count = 1\n            group += paren_string[i]\n\
    \            for (let j = i + 1; j < paren_string.length; j++) {\n           \
    \     if (paren_string[j] == '(') {\n                    count += 1\n        \
    \        }\n                if (paren_string[j] == ')') {\n                  \
    \  count -= 1\n                }\n                group += paren_string[j]\n \
    \               if (count == 0) {\n                    break\n               \
    \ }\n            }\n            groups.push(group)\n        }\n    }\n    return\
    \ groups\n}\n", "    let result = [];\n    let pattern = /[()]/g;\n    let matches\
    \ = paren_string.match(pattern);\n    console.log(matches);\n    // let index\
    \ = [];\n    // matches.forEach( (value, index) => {\n    //     if( value ===\
    \ \")\"){\n    //         index.push(index);\n    //     }\n    // });\n    //\
    \ console.log(index);\n    // index.forEach( (value, index) => {\n    //     let\
    \ tempString = matches.splice(value,1);\n    //     console.log(tempString);\n\
    \    //     result.push(tempString);\n    // });\n    return result;\n}", "  \
    \  var res = [];\n    var paren_group = [];\n    var open_paren = 0;\n    var\
    \ len = paren_string.length;\n    for(var i = 0; i < len; i++){\n        if(paren_string[i]\
    \ == '('){\n            open_paren++;\n            paren_group.push(paren_string[i]);\n\
    \        }else if(paren_string[i] == ')'){\n            open_paren--;\n      \
    \      paren_group.push(paren_string[i]);\n        }\n        if(open_paren ==\
    \ 0){\n            res.push(paren_group.join(''));\n            paren_group =\
    \ [];\n        }\n    }\n    return res;\n}\n", "    // your code goes here\n\
    }\n", "\tvar parenGroups = [];\n\tvar currentGroup = '';\n\tvar openParen = 0;\n\
    \tfor (var i = 0; i < paren_string.length; i++) {\n\t\tvar c = paren_string[i];\n\
    \t\tif (c == '(') {\n\t\t\topenParen++;\n\t\t} else if (c == ')') {\n\t\t\topenParen--;\n\
    \t\t}\n\t\tcurrentGroup += c;\n\t\tif (openParen == 0) {\n\t\t\tparenGroups.push(currentGroup);\n\
    \t\t\tcurrentGroup = '';\n\t\t}\n\t}\n\treturn parenGroups;\n}\n", "    return\
    \ paren_string.split(') ')\n        .map(function(str){\n            return str.split('\
    \ ').join('')\n        })\n        .filter(function(str){\n            return\
    \ str.length > 0\n        })\n        .map(function(str){\n            if(str[0]\
    \ !== '('){\n                str = str.slice(1, str.length)\n            }\n \
    \           if(str[str.length - 1] !== ')'){\n                str = str.slice(0,\
    \ str.length - 1)\n            }\n            return str\n        })\n}\n", " \
    \   var paren_string = paren_string.replace(/\\s/g, \"\");\n    var paren_array\
    \ = [];\n    var temp_string = \"\";\n    var paren_count = 0;\n    for (var i\
    \ = 0; i < paren_string.length; i++){\n        if (paren_string[i] == '('){\n\
    \            paren_count += 1;\n        } else if (paren_string[i] == ')'){\n\
    \            paren_count -= 1;\n        }\n        temp_string += paren_string[i];\n\
    \        if (paren_count == 0 && temp_string.length > 0){\n            paren_array.push(temp_string);\n\
    \            temp_string = \"\";\n        }\n    }\n    return paren_array;\n\
    }\n", "  let paren_groups = [];\n  let open_paren_count = 0;\n  let temp_string\
    \ = \"\";\n  for (let char of paren_string){\n    if (char == \"(\"){\n      open_paren_count\
    \ += 1;\n      temp_string += char;\n    } else if (char == \")\"){\n      if\
    \ (open_paren_count == 1){\n        temp_string += char;\n        paren_groups.push(temp_string);\n\
    \        temp_string = \"\";\n        open_paren_count = 0;\n      } else {\n\
    \        temp_string += char;\n        open_paren_count -= 1;\n      }\n    }\n\
    \  }\n  return paren_groups;\n}\n", "    var returnArray = [];\n    var temp =\
    \ \"\";\n    var paren = 0;\n    for(var i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] === \"(\"){\n            paren++;\n            temp\
    \ += paren_string[i];\n        }\n        else if(paren_string[i] === \")\"){\n\
    \            paren--;\n            temp += paren_string[i];\n        }\n     \
    \   if(paren === 0 && temp !== \"\"){\n            returnArray.push(temp);\n \
    \           temp = \"\";\n        }\n    }\n    return returnArray;\n}\n", " \
    \ var answer = [];\n  var current_group = '';\n  var balance = 0;\n  for (var\
    \ i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === '('){\n \
    \     balance++;\n      current_group += paren_string[i];\n    } else if (paren_string[i]\
    \ === ')'){\n      balance--;\n      current_group += paren_string[i];\n    }\
    \ else {\n      continue;\n    }\n    if (balance === 0){\n      answer.push(current_group);\n\
    \      current_group = '';\n    }\n  }\n  return answer;\n}\n", "    // base case\n\
    \    if (paren_string === \"\"){\n        return []\n    }\n    // recursive case\n\
    \    // start to cut off the string from the back until it is balanced\n    //\
    \ you may use is_paren_balanced()\n    if (!is_paren_balanced(paren_string)){\n\
    \        // if the string isn't balanced\n        // separate_paren_groups(paren_string.slice(0,\
    \ -1))\n        // then keep calling until the string is balanced\n        //\
    \ then call the first part\n        return separate_paren_groups(paren_string.slice(0,\
    \ -1))\n    }\n    // if the string is balanced\n    // separate_paren_groups(paren_string.slice(0,\
    \ -1))\n    // then slice off the rest of the string after the first part\n  \
    \  return [paren_string.slice(0, -1)].concat(separate_paren_groups(paren_string.slice(1)))\n\
    }", "\tvar list = [];\n\tvar temp = [];\n\tvar count = 0;\n\tfor(var i = 0; i\
    \ < paren_string.length; i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\t\tcount++;\n\
    \t\t}\n\t\tif(paren_string[i] == \")\"){\n\t\t\tcount--;\n\t\t}\n\t\tif(paren_string[i]\
    \ != \" \"){\n\t\t\ttemp.push(paren_string[i]);\n\t\t}\n\t\tif(count == 0 && paren_string[i]\
    \ == \")\"){\n\t\t\tlist.push(temp.join(\"\"));\n\t\t\ttemp = [];\n\t\t}\n\t}\n\
    \treturn list;\n}", "\tvar no_spaces = paren_string.replace(/\\s/g, '');\n\tvar\
    \ count = 0;\n\tvar starting = 0;\n\tvar temp = [];\n\tfor (var i = 0; i < no_spaces.length;\
    \ i++) {\n\t\tif (no_spaces[i] === \"(\") {\n\t\t\tcount++;\n\t\t}\n\t\telse if\
    \ (no_spaces[i] === \")\") {\n\t\t\tcount--;\n\t\t}\n\t\tif (count === 0) {\n\t\
    \t\ttemp.push(no_spaces.slice(starting, i+1));\n\t\t\tstarting = i+1;\n\t\t}\n\
    \t}\n\treturn temp;\n}", "    var result = [];\n    var openParens = 0;\n    var\
    \ start = 0;\n    for (var i = 0; i < paren_string.length; i++) {\n        if\
    \ (paren_string[i] === '(') {\n            openParens++;\n        } else if (paren_string[i]\
    \ === ')') {\n            openParens--;\n        }\n\n        if (openParens ===\
    \ 0) {\n            result.push(paren_string.slice(start, i + 1));\n         \
    \   start = i + 1;\n        }\n    }\n    return result;\n}\n", "    let open_paren\
    \ = \"(\", close_paren = \")\";\n    let groups = [], curr_group = \"\";\n   \
    \ let open_cnt = 0;\n    for(let i = 0; i < paren_string.length; i++){\n     \
    \   let c = paren_string[i];\n        if(c === open_paren){\n            open_cnt++;\n\
    \            curr_group += c;\n        }\n        else if(c === close_paren){\n\
    \            if(open_cnt <= 0){\n                continue;\n            }\n  \
    \          open_cnt--;\n            curr_group += c;\n            if(open_cnt\
    \ === 0){\n                groups.push(curr_group);\n                curr_group\
    \ = \"\";\n            }\n        }\n    }\n    return groups;\n}", "    var paren_groups\
    \ = [];\n    var current_group = \"\";\n    var open_paren_count = 0;\n    var\
    \ str_length = paren_string.length;\n    for(var i = 0; i < str_length; i++){\n\
    \        if(paren_string[i] === \"(\"){\n            open_paren_count++;\n   \
    \         current_group += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ === \")\"){\n            open_paren_count--;\n            current_group += paren_string[i];\n\
    \            if(open_paren_count === 0){\n                paren_groups.push(current_group);\n\
    \                current_group = \"\";\n            }\n        }\n    }\n    return\
    \ paren_groups;\n}", "  let groups = [];\n  let curr_group = \"\";\n  let depth\
    \ = 0;\n  for (let i = 0; i < paren_string.length; i++){\n    if (paren_string[i]\
    \ === \"(\"){\n      depth++;\n      curr_group += \"(\";\n    }\n    else if\
    \ (paren_string[i] === \")\"){\n      depth--;\n      curr_group += \")\";\n \
    \     if (depth === 0){\n        groups.push(curr_group);\n        curr_group\
    \ = \"\";\n      }\n    }\n  }\n  return groups;\n}\n", "    //Your code here\n\
    }\n", "    var paren_groups = [];\n    var index = 0;\n    while(index < paren_string.length){\n\
    \        var open = paren_string.indexOf(\"(\", index);\n        var close = paren_string.indexOf(\"\
    )\", index);\n        // if the open brace is before the close brace, recurse\n\
    \        if(open < close && open >= 0){\n            index = close + 1;\n    \
    \        var end = close + 1;\n            for(var i = 1; i > 0; i++){\n     \
    \           if(paren_string[end] == \"(\"){\n                    i++;\n      \
    \          }\n                if(paren_string[end] == \")\"){\n              \
    \      i--;\n                }\n                end++;\n            }\n      \
    \      paren_groups.push(paren_string.slice(open, end));\n        }\n        //\
    \ else we have a completed group\n        else{\n            paren_groups.push(paren_string.slice(open,\
    \ close + 1));\n            index = close + 1;\n        }\n    }\n    return paren_groups;\n\
    }\n", "  let start = 0;\n  let result = [];\n  let count = 0;\n  // loop through\
    \ the array and split the string at each opening parenthesis\n  for (let i = 0;\
    \ i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n    \
    \  count++;\n    }\n    if (paren_string[i] === \")\") {\n      count--;\n   \
    \ }\n    if (count === 0) {\n      result.push(paren_string.slice(start, i + 1));\n\
    \      start = i + 1;\n    }\n  }\n  return result;\n}\n", "    //TODO: Implement\
    \ this function\n    var final_string = \"\";\n    var open_paran = 0;\n    var\
    \ stored_paran = \"\";\n    var array_paran = [];\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] === \"(\"){\n            open_paran++;\n \
    \           stored_paran += paren_string[i];\n        }\n        else if(paren_string[i]\
    \ === \")\"){\n            open_paran--;\n            stored_paran += paren_string[i];\n\
    \        }\n        if(open_paran === 0){\n            array_paran.push(stored_paran);\n\
    \            stored_paran = \"\";\n        }\n    }\n    return array_paran;\n\
    }\n", "  var newArr = [];\n  var temp = '';\n  for(var i = 0; i < paren_string.length;\
    \ i++){\n    if(paren_string[i] === '('){\n      temp += paren_string[i];\n  \
    \  }\n    if(paren_string[i] === ')'){\n      temp += paren_string[i];\n     \
    \ newArr.push(temp);\n      temp = '';\n    }\n  }\n  return newArr;\n}", "  \
    \  var strArr = paren_string.split('');\n    var tempArr = [];\n    var newArr\
    \ = [];\n    for(var i = 0; i < strArr.length; i++){\n        if(strArr[i] ==\
    \ '('){\n            tempArr.push(strArr[i]);\n        }\n        if(strArr[i]\
    \ == ')'){\n            tempArr.push(strArr[i]);\n            newArr.push(tempArr.join(''));\n\
    \            tempArr = [];\n        }\n    }\n    return newArr;\n}\n", "    let\
    \ paren_groups = [];\n    let this_group = '';\n    let starting_ind = 0;\n  \
    \  let end_ind = paren_string.length - 1;\n    let open_count = 0;\n    let close_count\
    \ = 0;\n    while (end_ind >= 0){\n        while (paren_string[starting_ind] ===\
    \ ' ') starting_ind++;\n        while (paren_string[end_ind] === ' ') end_ind--;\n\
    \        if (paren_string[starting_ind] === '(' && paren_string[end_ind] === ')'){\n\
    \            for (let i = starting_ind; i <= end_ind; i++){\n                if\
    \ (paren_string[i] === '(') open_count++;\n                if (paren_string[i]\
    \ === ')') close_count++;\n                if (open_count === close_count) {\n\
    \                    if (paren_string[i] === ')') {\n                        paren_groups.push(paren_string.slice(starting_ind,\
    \ i + 1));\n                        starting_ind = i + 1;\n                  \
    \      end_ind = paren_string.length - 1;\n                        open_count\
    \ = 0;\n                        close_count = 0;\n                    }\n    \
    \            }\n            }\n        }\n        else end_ind--;\n    }\n   \
    \ return paren_groups;\n}\n\n", "    // HINT: use your is_valid_parens function,\
    \ or maybe even call your separate_paren_groups\n    //       function recursively.\n\
    }\n", "\tvar result = [];\n\tvar curr_string = \"\";\n\tvar paren_count = 0;\n\
    \tfor(var i = 0; i < paren_string.length; i++){\n\t\tvar curr_char = paren_string[i];\n\
    \t\tif(curr_char === \"(\"){\n\t\t\tparen_count++;\n\t\t\tcurr_string += curr_char;\n\
    \t\t}\n\t\telse if(curr_char === \")\"){\n\t\t\tparen_count--;\n\t\t\tcurr_string\
    \ += curr_char;\n\t\t}\n\t\tif(paren_count === 0 && curr_string !== \"\"){\n\t\
    \t\tresult.push(curr_string);\n\t\t\tcurr_string = \"\";\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n\nvar my_ans = separate_paren_groups(\"( ) (( )) (( )( ))\");",
  "    if (paren_string.length === 0) {\n        return [];\n    }\n    var nested_parens\
    \ = {};\n    var curr_nested_parens = \"\";\n    var curr_paren_string = \"\"\
    ;\n    for (var i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === \"(\" || paren_string[i] === \")\") {\n            curr_paren_string +=\
    \ paren_string[i];\n        }\n    }\n    for (var j = 0; j < curr_paren_string.length;\
    \ j++) {\n        if (curr_paren_string[j] === \"(\") {\n            curr_nested_parens\
    \ += \"(\";\n        } else if (curr_paren_string[j] === \")\") {\n          \
    \  curr_nested_parens += \")\";\n            nested_parens[curr_nested_parens]\
    \ = true;\n            curr_nested_parens = \"\";\n        }\n    }\n    var result\
    \ = [];\n    for (var nested_paren in nested_parens) {\n        result.push(nested_paren);\n\
    \    }\n    return result;\n}\n", "\tvar strs = [];\n\tvar str = \"\";\n\tfor(var\
    \ i = 0; i < paren_string.length; i++){\n\t\tif(paren_string[i] == \"(\"){\n\t\
    \t\tstr += paren_string[i];\n\t\t}else if(paren_string[i] == \")\"){\n\t\t\tstr\
    \ += paren_string[i];\n\t\t\tstrs.push(str);\n\t\t\tstr = \"\";\n\t\t}\n\t}\n\t\
    return strs;\n}\n", "\tvar paren_array = paren_string.split(\" \");\n\tvar new_array\
    \ = [];\n\tfor(var i = 0; i < paren_array.length; i++){\n\t\tvar counter = 0;\n\
    \t\tvar string = \"\";\n\t\tfor(var j = 0; j < paren_array[i].length; j++){\n\t\
    \t\tif(paren_array[i][j] == \"(\"){\n\t\t\t\tcounter += 1;\n\t\t\t\tstring +=\
    \ \"(\";\n\t\t\t}\n\t\t\telse if(paren_array[i][j] == \")\"){\n\t\t\t\tcounter\
    \ -= 1;\n\t\t\t\tstring += \")\";\n\t\t\t}\n\t\t\tif(counter == 0){\n\t\t\t\t\
    new_array.push(string);\n\t\t\t\tstring = \"\";\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ new_array;\n}", "    let open_parens = 0;\n    let close_parens = 0;\n    let\
    \ groups = [];\n    let current_group = '';\n    for (const s of paren_string)\
    \ {\n        if (s == '(') {\n            open_parens += 1;\n            current_group\
    \ += s;\n        } else if (s == ')') {\n            close_parens += 1;\n    \
    \        current_group += s;\n        }\n        if (open_parens == close_parens\
    \ && current_group != '') {\n            groups.push(current_group);\n       \
    \     current_group = '';\n            open_parens = 0;\n            close_parens\
    \ = 0;\n        }\n    }\n    return groups;\n}\n", "  var newArray = paren_string.split(\"\
    \");\n  var groups = [];\n  var currentGroup = \"\";\n  var opened = false;\n\
    \  for (var i = 0; i < newArray.length; i++) {\n    if (newArray[i] === \"(\"\
    ) {\n      if (opened) {\n        currentGroup += newArray[i];\n      } else {\n\
    \        opened = true;\n        currentGroup += newArray[i];\n      }\n    }\
    \ else if (newArray[i] === \")\") {\n      if (opened) {\n        currentGroup\
    \ += newArray[i];\n        groups.push(currentGroup);\n        currentGroup =\
    \ \"\";\n        opened = false;\n      }\n    }\n  }\n  return groups;\n}\n",
  "    let a = paren_string.split(\" \").join(\"\")\n    let result = []\n    for\
    \ (let i = 0; i < a.length; i++){\n        if (a[i] === \"(\"){\n            let\
    \ temp = \"\"\n            while (a[i] !== \")\"){\n                temp += a[i]\n\
    \                i++\n            }\n            temp += \")\"\n            result.push(temp)\n\
    \        }\n    }\n    return result\n}\n", "    // YOUR CODE HERE\n}\n", "  var\
    \ res = [];\n  var open_parens = 0;\n  var curr_start = 0;\n  for(var i = 0; i\
    \ < paren_string.length; i++){\n    if(paren_string[i] === '('){\n      open_parens++;\n\
    \    }\n    else if(paren_string[i] === ')'){\n      open_parens--;\n    }\n \
    \   if(open_parens === 0){\n      res.push(paren_string.slice(curr_start, i +\
    \ 1));\n      curr_start = i + 1;\n    }\n  }\n  return res;\n}\n", "    // store\
    \ the final result\n    const ret_val = [];\n    // first, find the first and\
    \ last indexes of each paren group\n    const paren_groups = [];\n    let i =\
    \ 0;\n    while (i < paren_string.length) {\n        if (paren_string[i] === '(')\
    \ {\n            // find the index of the closing paren, then store both indexes\n\
    \            const closing_paren_index = find_closing_paren(paren_string, i);\n\
    \            paren_groups.push([i, closing_paren_index]);\n            // advance\
    \ i to the index after the closing paren\n            i = closing_paren_index\
    \ + 1;\n        } else {\n            // move on to the next character in the\
    \ string\n            i++;\n        }\n    }\n    // now, from those indexes,\
    \ extract the substrings containing each paren group and add to the result array\n\
    \    for (const [i, j] of paren_groups) {\n        ret_val.push(paren_string.substring(i,\
    \ j + 1));\n    }\n    return ret_val;\n}\n", "  var results = [];\n  var count\
    \ = 0;\n  var index = 0;\n  for(var i = 0; i < paren_string.length; i++){\n  \
    \  if(paren_string[i] === '('){\n      count++;\n    } else if(paren_string[i]\
    \ === ')'){\n      count--;\n    }\n    if(count === 0){\n      results.push(paren_string.slice(index,\
    \ i + 1));\n      index = i + 1;\n    }\n  }\n  return results;\n}\n\n", "   \
    \ let result = []\n    let counter = 0;\n    let start = 0;\n    for(let i = 0;\
    \ i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n   \
    \         counter++;\n        }\n        if(paren_string[i] === \")\"){\n    \
    \        counter--;\n        }\n        if(counter === 0){\n            result.push(paren_string.slice(start,\
    \ i+1));\n            start = i+1;\n        }\n    }\n    return result;\n}\n",
  "    // if the string has an open paren, find the position of the next close paren\n\
    \    // and trim of the string from 0 to the close paren\n    // (the string from\
    \ the close paren to the end of the string is the remainder)\n    // if the string\
    \ does not have an open paren, return an empty array\n    let result = [];\n \
    \   if(paren_string.indexOf('(') === -1){\n        return result;\n    } else\
    \ {\n        let remainder = paren_string;\n        while(remainder.indexOf('(')\
    \ !== -1){\n            let open_paren_pos = remainder.indexOf('(');\n       \
    \     let close_paren_pos = remainder.indexOf(')');\n            let next_open_paren_pos\
    \ = remainder.indexOf('(', open_paren_pos + 1);\n            while(next_open_paren_pos\
    \ < close_paren_pos && next_open_paren_pos !== -1){\n                open_paren_pos\
    \ = next_open_paren_pos;\n                close_paren_pos = remainder.indexOf(')',\
    \ close_paren_pos + 1);\n                next_open_paren_pos = remainder.indexOf('(',\
    \ open_paren_pos + 1);\n            }\n            result.push(remainder.slice(open_paren_pos,\
    \ close_paren_pos + 1));\n            remainder = remainder.slice(close_paren_pos\
    \ + 1);\n        }\n        return result;\n    }\n}", "    var paren_groups =\
    \ [];\n\n    // get substrings between matched parens\n    function group_substr(start_index){\n\
    \        var stack = [];\n        for (var i = start_index; i < paren_string.length;\
    \ i++){\n            if (paren_string[i] == '('){\n                stack.push(i);\n\
    \            }\n            else if (paren_string[i] == ')'){\n              \
    \  stack.pop();\n                if (stack.length == 0){\n                   \
    \ paren_groups.push(paren_string.substring(start_index, i + 1));\n           \
    \         start_index = i + 1;\n                }\n            }\n        }\n\
    \    }\n\n    for (var i = 0; i < paren_string.length; i++){\n        if (paren_string[i]\
    \ == '('){\n            group_substr(i);\n        }\n    }\n\n    return paren_groups;\n\
    }\n", "  paren_string = paren_string.replace(/\\s/g,'');\n  var paren_arr = [];\n\
    \  var paren_str = '';\n  var paren_idx = 0;\n  for(var i = 0; i < paren_string.length;\
    \ i++){\n    if(paren_string[i] == '('){\n      paren_str += paren_string[i];\n\
    \      if(paren_string[i+1] != ')'){\n        paren_idx++;\n      }\n    }\n \
    \   else if(paren_string[i] == ')'){\n      paren_str += paren_string[i];\n  \
    \    if(paren_string[i-1] != '('){\n        paren_arr.push(paren_str);\n     \
    \   paren_str = '';\n      }\n    }\n  }\n  return paren_arr;\n}\n", "    // YOUR\
    \ CODE HERE\n    var output = [];\n    for (var i = 0; i < paren_string.length;\
    \ i++) {\n      if (paren_string[i] == \"(\") {\n        var temp = \"\";\n  \
    \      temp += paren_string[i];\n        for (var j = i + 1; j < paren_string.length;\
    \ j++) {\n          if (paren_string[j] == \"(\" || paren_string[j] == \")\")\
    \ {\n            temp += paren_string[j];\n          }\n          if (paren_string[j]\
    \ == \")\") {\n            break;\n          }\n        }\n        output.push(temp);\n\
    \      }\n    }\n    return output;\n}\n", "    var parens = [];\n    var parens_counter\
    \ = 0;\n    var str_start = 0;\n    for(var i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] == \"(\"){\n            parens_counter++;\n      \
    \  }\n        else if(paren_string[i] == \")\"){\n            parens_counter--;\n\
    \        }\n        if(parens_counter == 0){\n            parens.push(paren_string.slice(str_start,\
    \ i+1));\n            str_start = i+1;\n        }\n    }\n    return parens;\n\
    }\n", "    var paren_count = 0;\n    var groups = [];\n    var current_group =\
    \ \"\";\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ === \"(\" || paren_string[i] === \")\"){\n            current_group += paren_string[i];\n\
    \            if(paren_string[i] === \"(\"){\n                paren_count++;\n\
    \            }\n            else if(paren_string[i] === \")\"){\n            \
    \    paren_count--;\n            }\n            if(paren_count === 0){\n     \
    \           groups.push(current_group);\n                current_group = \"\"\
    ;\n            }\n        }\n    }\n    return groups;\n}", "    let parenArr\
    \ = [];\n    let parenStr = \"\";\n    let parenCount = 0;\n    for(let i = 0;\
    \ i < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n   \
    \         parenCount++;\n            parenStr += paren_string[i];\n        }\n\
    \        else if(paren_string[i] === \")\"){\n            parenCount--;\n    \
    \        parenStr += paren_string[i];\n        }\n        if(parenCount === 0\
    \ && parenStr !== \"\"){\n            parenArr.push(parenStr);\n            parenStr\
    \ = \"\";\n        }\n    }\n    return parenArr;\n}", "    var paren_string_length\
    \ = paren_string.length;\n    var result = [];\n    var current_string = \"\"\
    ;\n    var current_string_length = 0;\n    var paren_counter = 0;\n    for(var\
    \ i = 0; i < paren_string_length; i++){\n        if(paren_string[i] == \"(\"){\n\
    \            paren_counter++;\n            current_string += paren_string[i];\n\
    \            current_string_length++;\n        }\n        else if(paren_string[i]\
    \ == \")\"){\n            paren_counter--;\n            current_string += paren_string[i];\n\
    \            current_string_length++;\n        }\n        if(paren_counter ==\
    \ 0 && current_string_length != 0){\n            result.push(current_string);\n\
    \            current_string = \"\";\n            current_string_length = 0;\n\
    \        }\n    }\n    return result;\n}\n", "    let outer_array = []\n    let\
    \ inner_array = []\n    let counter = 0\n    for (let i = 0; i < paren_string.length;\
    \ i++){\n        if (paren_string[i] == '(') {\n            counter += 1\n   \
    \     } else if (paren_string[i] == ')') {\n            counter -= 1\n       \
    \ }\n        if (counter > 0) {\n            inner_array.push(paren_string[i])\n\
    \        } else if (counter == 0) {\n            inner_array.push(paren_string[i])\n\
    \            outer_array.push(inner_array.join(''))\n            inner_array =\
    \ []\n        }\n    }\n    return outer_array\n}\n\n", "    let n = 0;\n    let\
    \ separated_parens = [];\n    let temp_str = '';\n    for (let i = 0; i < paren_string.length;\
    \ i++){\n        if (paren_string[i] == '('){\n            if (n == 0){\n    \
    \            temp_str = paren_string[i];\n            }\n            else{\n \
    \               temp_str += paren_string[i];\n            }\n            n++;\n\
    \        }\n        else if (paren_string[i] == ')'){\n            temp_str +=\
    \ paren_string[i];\n            n--;\n            if (n == 0){\n             \
    \   separated_parens.push(temp_str);\n            }\n        }\n    }\n    return\
    \ separated_parens;\n}\n\n", "    let paren_groups = [];\n    let start_index\
    \ = 0;\n    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ === ')'){\n            paren_groups.push(paren_string.slice(start_index, i+1));\n\
    \            start_index = i+1;\n        }\n    }\n    return paren_groups;\n\
    }\n", "  var groups = [];\n  var group = '';\n  var brace_open = 0;\n  var brace_close\
    \ = 0;\n  var open = false;\n  for (var i = 0; i < paren_string.length; i++) {\n\
    \    var current_char = paren_string[i];\n    if (open && current_char !== ' ')\
    \ {\n      group += current_char;\n    }\n    if (current_char === '(') {\n  \
    \    brace_open++;\n      open = true;\n    }\n    if (current_char === ')') {\n\
    \      brace_close++;\n    }\n    if (brace_open === brace_close) {\n      if\
    \ (open) {\n        groups.push(group);\n        group = '';\n        open = false;\n\
    \      }\n      brace_open = 0;\n      brace_close = 0;\n    }\n  }\n  return\
    \ groups;\n}\n", "    // We will keep a track of the number of open and closed\
    \ parens to check if the group is complete\n    let num_open = 0;\n    let num_closed\
    \ = 0;\n    let start_index = 0;\n    let groups = [];\n    for (let i = 0; i\
    \ < paren_string.length; i++){\n        if (paren_string[i] === \"(\"){\n    \
    \        num_open++;\n        } else if (paren_string[i] === \")\"){\n       \
    \     num_closed++;\n        }\n        // Note that when the number of open and\
    \ closed parens are equal and non-zero,\n        // we have a completed group\n\
    \        if (num_open > 0 && num_open === num_closed){\n            groups.push(paren_string.slice(start_index,\
    \ i + 1));\n            // Note that we must also reset the start_index to the\
    \ current index\n            start_index = i + 1;\n            num_open = 0;\n\
    \            num_closed = 0;\n        }\n    }\n    return groups;\n}\n", "  \
    \  var paren_string = paren_string.replace(/\\s/g,'');\n    var result = [];\n\
    \    var temp = [];\n    var i;\n    for(i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] === '('){\n            temp.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] === ')'){\n            temp.push(paren_string[i]);\n\
    \            if(temp.length > 0 && temp[0] === '(' && temp[temp.length - 1] ===\
    \ ')'){\n                temp.push(paren_string[i]);\n                result.push(temp.join(''));\n\
    \                temp = [];\n            }\n        }\n    }\n    return result;\n\
    }\n", "    let parens = [];\n    let stack = []\n    // console.log(paren_string)\n\
    \    for(let i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ === \"(\"){\n            stack.push(paren_string[i])\n        }\n        if(paren_string[i]\
    \ === \")\"){\n            stack.pop();\n            if(stack.length === 0){\n\
    \                parens.push(paren_string.slice(0, i+1))\n                paren_string\
    \ = paren_string.slice(i+1)\n                i = 0;\n            }\n        }\n\
    \    }\n    return parens;\n}", "\tvar ans = [];\n\tvar temp = \"\";\n\tvar count\
    \ = 0;\n\tfor(var i = 0; i < paren_string.length; i++){\n\t\tif(paren_string[i]\
    \ == \"(\" || paren_string[i] == \")\"){\n\t\t\ttemp += paren_string[i];\n\t\t\
    \tif(paren_string[i] == \"(\"){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\
    \tcount--;\n\t\t\t}\n\t\t\tif(count == 0){\n\t\t\t\tans.push(temp);\n\t\t\t\t\
    temp = \"\";\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;\n}\n", "    return paren_string.split(\"\
    )\").filter(p => {\n        return p.length > 0 && p.match(/\\(/g).length ===\
    \ p.match(/\\)/g).length\n    }).map(p => p + \")\");\n}\n", "  var stack = [],\n\
    \      start = 0,\n      res = [];\n  for(var i = 0; i < paren_string.length;\
    \ i++){\n    if(paren_string[i] === '('){\n      stack.push(paren_string[i]);\n\
    \    }else if(paren_string[i] === ')'){\n      stack.pop();\n    }\n    if(stack.length\
    \ === 0){\n      res.push(paren_string.slice(start, i + 1));\n      start = i\
    \ + 1;\n    }\n  }\n  return res;\n}", "    let groups = [];\n    let start_idx\
    \ = -1;\n    let curr_count = 0;\n    for (let i = 0; i < paren_string.length;\
    \ i++){\n        if (paren_string[i] === \"(\"){\n            if (start_idx ===\
    \ -1){\n                start_idx = i;\n            }\n            curr_count\
    \ += 1;\n        }\n        else if (paren_string[i] === \")\"){\n           \
    \ curr_count -= 1;\n            if (curr_count === 0){\n                groups.push(paren_string.slice(start_idx,\
    \ i + 1));\n                start_idx = -1;\n            }\n        }\n    }\n\
    \    return groups;\n}\n", "\tconst stack = [];\n\tconst groups = [];\n\tlet curr_paren\
    \ = '';\n\tfor (let i = 0; i < paren_string.length; i++){\n\t\tif (paren_string[i]\
    \ === '('){\n\t\t\tstack.push(paren_string[i]);\n\t\t\tcurr_paren += paren_string[i];\n\
    \t\t} else if (paren_string[i] === ')'){\n\t\t\tstack.pop();\n\t\t\tcurr_paren\
    \ += paren_string[i];\n\t\t\tif (stack.length === 0){\n\t\t\t\tgroups.push(curr_paren);\n\
    \t\t\t\tcurr_paren = '';\n\t\t\t}\n\t\t}\n\t}\n\treturn groups;\n}\n", "    //\
    \ your code goes here!\n    paren_string = paren_string.replace(/\\s/g,'');\n\
    \    var ret = [];\n    var start = 0;\n    var count = 0;\n    for(var i = 0;\
    \ i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n     \
    \       count++;\n        }else{\n            count--;\n        }\n        if(count\
    \ === 0){\n            ret.push(paren_string.slice(start, i+1));\n           \
    \ start = i+1;\n        }\n    }\n    return ret;\n}\n", "\t//Convert input string\
    \ to an array of characters\n\tvar char_array = paren_string.split(\"\");\n\t\
    //Create a variable to store an array of parenthesis groups\n\tvar paren_groups\
    \ = [];\n\t//Create a variable to keep track of the current parenthesis group\n\
    \tvar curr_paren_group = \"\";\n\t//Create a variable to keep track of the open\
    \ parenthesis count\n\tvar curr_open_paren_count = 0;\n\t//Loop through each character\
    \ in the input string\n\tfor(var i = 0; i < char_array.length; i++){\n\t\t//Check\
    \ if the current character is a space, if so skip this character\n\t\tif(char_array[i]\
    \ != \" \"){\n\t\t\t//Check if the current character is an open parenthesis\n\t\
    \t\tif(char_array[i] == \"(\"){\n\t\t\t\t//Check if this is the first open parenthesis\
    \ in this group\n\t\t\t\tif(curr_open_paren_count == 0){\n\t\t\t\t\t//If so, begin\
    \ the current parenthesis group with an open parenthesis\n\t\t\t\t\tcurr_paren_group\
    \ = \"(\";\n\t\t\t\t}\n\t\t\t\t//Add one to the open parenthesis count\n\t\t\t\
    \tcurr_open_paren_count++;\n\t\t\t}\n\t\t\t//Check if the current character is\
    \ a closed parenthesis\n\t\t\telse if(char_array[i] == \")\"){\n\t\t\t\t//Add\
    \ a closed parenthesis to the current parenthesis group\n\t\t\t\tcurr_paren_group\
    \ += \")\";\n\t\t\t\t//Subtract one from the open parenthesis count\n\t\t\t\t\
    curr_open_paren_count--;\n\t\t\t\t//Check if there are no open parenthesis left\
    \ in this group\n\t\t\t\tif(curr_open_paren_count == 0){\n\t\t\t\t\t//If so, add\
    \ the current parenthesis group to the array of parenthesis groups\n\t\t\t\t\t\
    paren_groups.push(curr_paren_group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//Return\
    \ the array of", "\tvar start, end, parens;\n\tvar results = [];\n\tparen_string\
    \ = paren_string.replace(/\\s/g, '');\n\tparens = paren_string.match(/\\([^\\\
    )]*\\)/g);\n\tfor (var i = 0; i < parens.length; i++) {\n\t\tresults.push(parens[i]);\n\
    \t}\n\treturn results;\n}\n", "\tvar array = paren_string.split(\"\");\n\tvar\
    \ new_array = [];\n\tvar count = 0;\n\tvar temp = \"\";\n\tfor(var i = 0; i <\
    \ array.length; i++){\n\t\tif(array[i] == \"(\"){\n\t\t\tcount++;\n\t\t\ttemp\
    \ += array[i];\n\t\t}\n\t\telse if(array[i] == \")\"){\n\t\t\tcount--;\n\t\t\t\
    temp += array[i];\n\t\t}\n\t\tif(count == 0 && temp != \"\"){\n\t\t\tnew_array.push(temp);\n\
    \t\t\ttemp = \"\";\n\t\t}\n\t}\n\treturn new_array;\n}", "    var paren_stack\
    \ = [];\n    var groups = [];\n    var curr_string = \"\";\n    for(var i = 0;\
    \ i < paren_string.length; i++){\n        var curr_char = paren_string[i];\n \
    \       if(curr_char != \" \"){\n            if(curr_char == \"(\"){\n       \
    \         paren_stack.push(curr_char);\n            }else if(curr_char == \")\"\
    ){\n                paren_stack.pop();\n            }\n            curr_string\
    \ += curr_char;\n            if(paren_stack.length == 0){\n                groups.push(curr_string);\n\
    \                curr_string = \"\";\n            }\n        }\n    }\n    return\
    \ groups;\n}\n", "    let result = [];\n    let regex = /\\([^()]*\\)/g;\n   \
    \ let paren_array = paren_string.match(regex);\n    for (i = 0; i < paren_array.length;\
    \ i++){\n        let new_string = paren_array[i].replace(/[()]/g, \"\");\n   \
    \     result.push(new_string);\n    }\n    return result;\n}\n", "    var stack\
    \ = [];\n    var result = [];\n    var temp = \"\";\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] === \"(\"){\n            stack.push(paren_string[i]);\n\
    \        }\n        else if(paren_string[i] === \")\"){\n            if(stack.length\
    \ > 0){\n                stack.pop();\n                temp += paren_string[i];\n\
    \            }\n            if(stack.length === 0){\n                result.push(temp);\n\
    \                temp = \"\";\n            }\n        }\n    }\n    return result;\n\
    }\n", "    let stack = [];\n    let to_return = [];\n    for(let i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] === '('){\n            stack.push(paren_string[i]);\n\
    \        }else if(paren_string[i] === ')'){\n            let top = stack.pop();\n\
    \            if(!top){\n                return [];\n            }\n        }\n\
    \    }\n    if(stack.length !== 0){\n        return [];\n    }\n    return to_return;\n\
    }\n", "  var separate_groups = []\n  var current_group = ''\n\n  paren_string.split('').forEach(function(char){\n\
    \    if (char === '(') {\n      current_group += char\n    } else if (char ===\
    \ ')') {\n      current_group += char\n      separate_groups.push(current_group)\n\
    \      current_group = ''\n    }\n  })\n\n  return separate_groups\n}\n", "  \
    \  var paren_groups = paren_string.split(\" \").join(\"\");\n    var paren_groups_array\
    \ = [];\n    var stack = [];\n    var current_group = \"\";\n    for(var i = 0;\
    \ i < paren_groups.length; i++){\n        if(paren_groups[i] === \"(\" && stack.length\
    \ === 0){\n            current_group += paren_groups[i];\n            stack.push(paren_groups[i]);\n\
    \        }\n        else if(paren_groups[i] === \"(\" && stack.length > 0){\n\
    \            current_group += paren_groups[i];\n            stack.push(paren_groups[i]);\n\
    \        }\n        else if(paren_groups[i] === \")\" && stack.length === 1){\n\
    \            current_group += paren_groups[i];\n            stack.pop();\n   \
    \         paren_groups_array.push(current_group);\n            current_group =\
    \ \"\";\n        }\n        else if(paren_groups[i] === \")\" && stack.length\
    \ > 1){\n            current_group += paren_groups[i];\n            stack.pop();\n\
    \        }\n    }\n    return paren_groups_array;\n}\n", "  var return_array =\
    \ [];\n  var array_of_parens = paren_string.split(\"\");\n  for (var i = 0; i\
    \ < array_of_parens.length; i++) {\n    if (array_of_parens[i] === \" \") {\n\
    \      array_of_parens.splice(i, 1);\n      i--;\n    }\n  }\n  var current_parens\
    \ = \"\";\n  var open_count = 0;\n  var close_count = 0;\n  for (var i = 0; i\
    \ < array_of_parens.length; i++) {\n    current_parens += array_of_parens[i];\n\
    \    if (array_of_parens[i] === \"(\") {\n      open_count += 1;\n    }\n    if\
    \ (array_of_parens[i] === \")\") {\n      close_count += 1;\n    }\n    if (open_count\
    \ === close_count) {\n      return_array.push(current_parens);\n      current_parens\
    \ = \"\";\n      open_count = 0;\n      close_count = 0;\n    }\n  }\n  return\
    \ return_array;\n}\n", "\tlet result = [];\n\tlet i = 0;\n\tlet j = 1;\n\tlet\
    \ count = 0;\n\tlet temp = '';\n\tlet curr;\n\twhile(i < paren_string.length){\n\
    \t\tcurr = paren_string[i];\n\t\tif(curr === '('){\n\t\t\tcount++;\n\t\t}else\
    \ if(curr === ')'){\n\t\t\tcount--;\n\t\t}\n\t\ttemp += curr;\n\t\tif(count ===\
    \ 0){\n\t\t\tresult.push(temp);\n\t\t\ttemp = '';\n\t\t}\n\t\ti++;\n\t}\n\treturn\
    \ result;\n}\n", "\tlet open_count = 0;\n\tlet sep_paren_groups = [];\n\tlet paren_substring\
    \ = '';\n\tfor (let i = 0; i < paren_string.length; i++){\n\t\tif (paren_string[i]\
    \ === '('){\n\t\t\topen_count += 1;\n\t\t\tparen_substring += paren_string[i];\n\
    \t\t}\n\t\telse if (paren_string[i] === ')'){\n\t\t\topen_count -= 1;\n\t\t\t\
    paren_substring += paren_string[i];\n\t\t}\n\t\tif (open_count === 0 && paren_substring){\n\
    \t\t\tsep_paren_groups.push(paren_substring);\n\t\t\tparen_substring = '';\n\t\
    \t}\n\t}\n\treturn sep_paren_groups;\n}", "\n}\n", "  return paren_string.split(/\\\
    )\\s*\\(/).map(x => x.replace(/^\\s*\\(|\\)\\s*$/g, ''));\n}\n", "    if(paren_string===\"\
    \"){\n        return [paren_string];\n    }\n    let result = [];\n    let start\
    \ = -1;\n    let i = 0;\n    while(i<paren_string.length){\n        if(paren_string[i]===\"\
    (\"){\n            start = i;\n        }\n        if(paren_string[i]===\")\"){\n\
    \            result.push(paren_string.slice(start,i+1));\n            start =\
    \ -1;\n        }\n        i++;\n    }\n    return result;\n}\n", "    var result\
    \ = [];\n    var pos = 0;\n    var start = -1;\n    var depth = 0;\n    while(pos\
    \ < paren_string.length){\n        if(paren_string[pos] == \"(\"){\n         \
    \   depth++;\n            if(start == -1){\n                start = pos;\n   \
    \         }\n        }else if(paren_string[pos] == \")\"){\n            depth--;\n\
    \            if(depth == 0){\n                result.push(paren_string.substring(start,\
    \ pos+1));\n                start = -1;\n            }\n        }\n        pos++;\n\
    \    }\n    return result;\n}\n\n", "  var results = [];\n  var start = 0;\n \
    \ var num_opened = 0;\n  var num_closed = 0;\n  for (var i = 0; i < paren_string.length;\
    \ i++){\n    var char = paren_string[i];\n    if (char === \"(\"){\n      num_opened\
    \ += 1;\n    } else if (char === \")\"){\n      num_closed += 1;\n    }\n    if\
    \ (num_opened === num_closed){\n      results.push(paren_string.slice(start, i\
    \ + 1));\n      start = i + 1;\n      num_opened = 0;\n      num_closed = 0;\n\
    \    }\n  }\n  return results;\n}", "    var paren_groups = [];\n    var current_group\
    \ = '';\n    var current_group_level = 0;\n    var paren_string_len = paren_string.length;\n\
    \    for (var i = 0; i < paren_string_len; i++){\n        var char = paren_string[i];\n\
    \        if (char === '('){\n            current_group_level++;\n            current_group\
    \ += char;\n        }\n        else if (char === ')'){\n            current_group_level--;\n\
    \            current_group += char;\n            if (current_group_level === 0){\n\
    \                paren_groups.push(current_group);\n                current_group\
    \ = '';\n            }\n        }\n    }\n    return paren_groups;\n}\n", "  \
    \  let results = [];\n    let current = '';\n    let started = false;\n    for(let\
    \ i = 0; i < paren_string.length; i++){\n        let current_character = paren_string[i];\n\
    \        if(current_character == '('){\n            if(started == false){\n  \
    \              started = true;\n            }\n            current += current_character;\n\
    \        }else if(current_character == ')'){\n            current += current_character;\n\
    \            if(is_paren_balanced(current)){\n                results.push(current);\n\
    \                current = '';\n                started = false;\n           \
    \ }\n        }\n    }\n    return results;\n}\n", "\t// make an array of the input\
    \ string\n\tparen_string = paren_string.split('');\n\t//remove the spaces in the\
    \ input string\n\tparen_string = paren_string.filter(function(x){return x !==\
    \ \" \"});\n\t//initialize the variable that will be the array of the output\n\
    \tvar paren_arr = [];\n\t//initialize variable that will be the output group of\
    \ parens\n\tvar group_paren = '';\n\t//initialize variable for counter for open\
    \ parens\n\tvar open_paren = 0;\n\t//initialize variable for counter for closed\
    \ parens\n\tvar closed_paren = 0;\n\t//iterate through the input\n\tfor (var i\
    \ = 0; i < paren_string.length; i++){\n\t\t//if there is an open paren add it\
    \ to the paren group\n\t\tif (paren_string[i] === '('){\n\t\t\topen_paren += 1;\n\
    \t\t\tgroup_paren += paren_string[i];\n\t\t//if there is a closed paren add it\
    \ to the paren group\n\t\t} else if (paren_string[i] === ')'){\n\t\t\tclosed_paren\
    \ += 1;\n\t\t\tgroup_paren += paren_string[i];\n\t\t}\n\t\t//check if the number\
    \ of closed parens is equal to the number of open parens\n\t\tif (closed_paren\
    \ === open_paren){\n\t\t\t//add the group to the output array\n\t\t\tparen_arr.push(group_paren);\n\
    \t\t\t//reset the output group variable\n\t\t\tgroup_paren = '';\n\t\t\t//reset\
    \ the closed paren counter\n\t\t\tclosed_paren = 0;\n\t\t\t//reset the open paren\
    \ counter\n\t\t\topen_paren = 0;\n\t\t}\n\t}\n\treturn paren_arr;\n}\n", "   \
    \ var paren_groups = [];\n    var start_ind = 0;\n    var num_open = 0;\n    var\
    \ num_close = 0;\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ == '('){\n            num_open += 1;\n        }\n        else if(paren_string[i]\
    \ == ')'){\n            num_close += 1;\n        }\n        if(num_open == num_close){\n\
    \            paren_groups.push(paren_string.slice(start_ind, i+1));\n        \
    \    start_ind = i+1;\n            num_open = 0;\n            num_close = 0;\n\
    \        }\n    }\n    return paren_groups;\n}\n", "  var separate_strings = [];\n\
    \  var current_string = '';\n  var found_group = false;\n  for (var i = 0; i <\
    \ paren_string.length; i++){\n    var char = paren_string[i];\n    if (char ==\
    \ '('){\n      if (current_string != ''){\n        separate_strings.push(current_string);\n\
    \        current_string = '';\n      }\n      found_group = true;\n    } else\
    \ if (char == ')'){\n      if (found_group){\n        current_string += char;\n\
    \        separate_strings.push(current_string);\n        current_string = '';\n\
    \        found_group = false;\n      }\n    } else if (char != ' '){\n      current_string\
    \ += char;\n    }\n  }\n  return separate_strings;\n}\n", "    var stack = [],\n\
    \        new_string = \"\",\n        result = [];\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] === \"(\"){\n            stack.push(paren_string[i]);\n\
    \        }else if(paren_string[i] === \")\"){\n            stack.pop();\n    \
    \    }\n        new_string += paren_string[i];\n        if(stack.length === 0){\n\
    \            result.push(new_string);\n            new_string = \"\";\n      \
    \  }\n    }\n    return result;\n}", "    let groups = []\n    let paren_arr =\
    \ paren_string.split('')\n    let curr_group = []\n    let paren_stack = []\n\
    \    for (let i = 0; i < paren_arr.length; i++){\n        let curr_char = paren_arr[i]\n\
    \        if (curr_char !== ' '){\n            if (curr_char === '('){\n      \
    \          paren_stack.push(curr_char)\n            }\n            else{\n   \
    \             paren_stack.pop()\n            }\n            curr_group.push(curr_char)\n\
    \            if (paren_stack.length === 0){\n                groups.push(curr_group.join(''))\n\
    \                curr_group = []\n            }\n        }\n    }\n    return\
    \ groups\n}\n", "    //Split the string on the space character to remove the spaces\n\
    \    var paren_array = paren_string.split(\" \");\n    //Initialize an empty array\
    \ to push the separated paren groups into\n    var ret_arr = [];\n    //Loop through\
    \ the paren_array\n    for(var i = 0; i < paren_array.length; i++){\n        //If\
    \ the current value has any length (i.e. is not an empty string), push it into\
    \ the ret_arr\n        if(paren_array[i].length){\n            ret_arr.push(paren_array[i]);\n\
    \        }\n    }\n    return ret_arr;\n}\n", "  var open_parens = 0;\n  var close_parens\
    \ = 0;\n  var paren_arr = paren_string.split(\" \");\n  var result = [];\n  var\
    \ index = 0;\n  while(index < paren_arr.length){\n    if(paren_arr[index] == \"\
    (\"){\n      open_parens++;\n    }\n    else if(paren_arr[index] == \")\"){\n\
    \      close_parens++;\n    }\n    if(open_parens != 0 && open_parens == close_parens){\n\
    \      var start = index - open_parens*2;\n      var end = index + 1;\n      result.push(paren_arr.slice(start,\
    \ end).join(\"\"));\n      open_parens = 0;\n      close_parens = 0;\n    }\n\
    \    index++;\n  }\n  return result;\n}\n", "\tlet oparentheses = [];\n\tlet cparentheses\
    \ = [];\n\tlet strings = [];\n\tfor(let i = 0; i < paren_string.length; i++){\n\
    \t\tif(paren_string[i] === \"(\"){\n\t\t\toparentheses.push(i);\n\t\t}else if(paren_string[i]\
    \ === \")\"){\n\t\t\tcparentheses.push(i);\n\t\t}\n\t}\n\tif(oparentheses.length\
    \ !== cparentheses.length){\n\t\treturn undefined;\n\t}else{\n\t\tif(oparentheses.length\
    \ >= 1){\n\t\t\tfor(let j = 0; j < oparentheses.length; j++){\n\t\t\t\tlet temp\
    \ = [];\n\t\t\t\tfor(let k = oparentheses[j]; k <= cparentheses[j]; k++){\n\t\t\
    \t\t\ttemp.push(paren_string[k]);\n\t\t\t\t}\n\t\t\t\tstrings.push(temp.join(\"\
    \"));\n\t\t\t}\n\t\t}\n\t}\n\treturn strings;\n}\n", "    let arr = [];\n    let\
    \ item = '';\n    let count = 0;\n    for(let i = 0; i < paren_string.length;\
    \ i++){\n        if(paren_string[i] === '('){\n            count++;\n        }\n\
    \        else if(paren_string[i] === ')'){\n            count--;\n        }\n\
    \        item += paren_string[i];\n        if(count === 0){\n            arr.push(item);\n\
    \            item = '';\n        }\n    }\n    return arr;\n}\n", "  var groups\
    \ = [];\n  var current_group = \"\";\n  var num_opened = 0;\n  for(var i = 0;\
    \ i < paren_string.length; i++){\n    if(paren_string[i] == \"(\" && paren_string[i+1]\
    \ != \")\"){\n      num_opened += 1;\n      current_group += paren_string[i];\n\
    \    }\n    else if(paren_string[i] == \")\" && paren_string[i-1] != \"(\"){\n\
    \      num_opened -= 1;\n      current_group += paren_string[i];\n      if(num_opened\
    \ == 0){\n        groups.push(current_group);\n        current_group = \"\";\n\
    \      }\n    }\n    else if(paren_string[i] == \"(\" && paren_string[i+1] ==\
    \ \")\"){\n      current_group += paren_string[i] + paren_string[i+1];\n     \
    \ groups.push(current_group);\n      current_group = \"\";\n      i++;\n    }\n\
    \  }\n  return groups;\n}\n", "  let result = [];\n  let current_group = \"\"\
    ;\n  let open_parens = 0;\n  for (let i = 0; i < paren_string.length; i++){\n\
    \    if (paren_string[i] === \"(\" && paren_string[i+1] !== \")\"){\n      open_parens++;\n\
    \      current_group += paren_string[i];\n    }\n    else if (paren_string[i]\
    \ === \")\" && paren_string[i-1] !== \"(\"){\n      open_parens--;\n      current_group\
    \ += paren_string[i];\n      if (open_parens === 0){\n        result.push(current_group);\n\
    \        current_group = \"\";\n      }\n    }\n    else if (paren_string[i] ===\
    \ \"(\" && paren_string[i+1] === \")\"){\n      result.push(\"()\");\n      i++;\n\
    \    }\n  }\n  return result;\n}\n", "    paren_string=paren_string.replace(/\
    \ /g,'');\n    var opening=0;\n    var closing=0;\n    var all_index=[];\n   \
    \ var result=0;\n    var temp=[];\n    for(var i=0;i<paren_string.length;i++){\n\
    \        if(paren_string[i]==\"(\"){\n            opening+=1;\n            temp.push(i);\n\
    \        }\n        if(paren_string[i]==\")\"){\n            closing+=1;\n   \
    \         temp.push(i);\n        }\n        if(opening==closing){\n          \
    \  opening=0;\n            closing=0;\n            all_index.push(temp);\n   \
    \         temp=[];\n        }\n    }\n    var final_arr=[];\n    for(var k=0;k<all_index.length;k++){\n\
    \        final_arr.push(paren_string.slice(all_index[k][0],all_index[k][all_index[k].length-1]+1));\n\
    \    }\n    return final_arr;\n}\n", "    var parenArray = paren_string.split(\"\
    \");\n    var newParenArray = [];\n    var parenGroupArray = [];\n    var openParen\
    \ = 0;\n    var closedParen = 0;\n    var counter = 0;\n    for(var i = 0; i <\
    \ parenArray.length; i++){\n        if(parenArray[i] !== \" \"){\n           \
    \ newParenArray.push(parenArray[i]);\n        }\n    }\n    var currentString\
    \ = \"\";\n    for(var j = 0; j < newParenArray.length; j++){\n        if(newParenArray[j]\
    \ === \"(\"){\n            currentString += newParenArray[j];\n            openParen++;\n\
    \        }\n        else if(newParenArray[j] === \")\"){\n            currentString\
    \ += newParenArray[j];\n            closedParen++;\n        }\n        if(openParen\
    \ === closedParen){\n            parenGroupArray.push(currentString);\n      \
    \      currentString = \"\";\n            openParen = 0;\n            closedParen\
    \ = 0;\n        }\n    }\n    return parenGroupArray;\n}\n", "  const paren_groups\
    \ = [];\n  let curr_group = \"\";\n  let open_count = 0;\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n      curr_group\
    \ += paren_string[i];\n      open_count += 1;\n    } else if (paren_string[i]\
    \ === \")\") {\n      curr_group += paren_string[i];\n      open_count -= 1;\n\
    \      if (open_count === 0) {\n        paren_groups.push(curr_group);\n     \
    \   curr_group = \"\";\n      }\n    }\n  }\n  return paren_groups;\n}\n", " \
    \ var output = [];\n  var currString = '';\n  var parenCount = 0;\n  for (var\
    \ i = 0; i < paren_string.length; i++){\n    if (paren_string[i] === '('){\n \
    \     parenCount += 1;\n      currString += '(';\n    } else if (paren_string[i]\
    \ === ')'){\n      parenCount -= 1;\n      currString += ')';\n    }\n    if (parenCount\
    \ === 0 && currString !== ''){\n      output.push(currString);\n      currString\
    \ = '';\n    }\n  }\n  return output;\n}\n", "  //return [\"(()())\", \"(())\"\
    , \"()\"];\n  // first separate the string into an array of individual words\n\
    \  var result = [];\n  var paren_array = paren_string.split(' ');\n  // console.log(paren_array);\n\
    \  // console.log(paren_array.length);\n  // then parse through the array and\
    \ pull out the words that start with \"(\" and ends with \")\"\n  for (var i =\
    \ 0; i < paren_array.length; i++) {\n    if (paren_array[i].charAt(0) === '('\
    \ && paren_array[i].charAt(paren_array[i].length - 1) === ')') {\n      result.push(paren_array[i]);\n\
    \    }\n  }\n  return result;\n}\n", "\tparen_string = paren_string.replace(/\\\
    s/g, '');\n\tvar output = [];\n\tvar start = 0;\n\tvar count = 0;\n\tfor (var\
    \ i = 0; i < paren_string.length; i++){\n\t\tif (paren_string[i] == '('){\n\t\t\
    \tcount ++;\n\t\t}\n\t\telse if (paren_string[i] == ')'){\n\t\t\tcount --;\n\t\
    \t}\n\t\tif (count == 0){\n\t\t\toutput.push(paren_string.slice(start, i+1));\n\
    \t\t\tstart = i+1;\n\t\t}\n\t}\n\treturn output;\n}\n", "\n}\n\nmodule.exports\
    \ = {\n  fibonacci_recursion,\n  fibonacci_iteration,\n  is_palindrome,\n  separate_paren_groups\n\
    }", "    let result = [];\n    let paren_stack = [];\n    let isOpen = false;\n\
    \    let index = 0;\n    for(let i = 0; i < paren_string.length; i++){\n     \
    \   if(paren_string[i] == '('){\n            paren_stack.push(paren_string[i]);\n\
    \            isOpen = true;\n        }\n        else if(paren_string[i] == ')'){\n\
    \            paren_stack.pop();\n            if(paren_stack.length == 0){\n  \
    \              result.push(paren_string.slice(index, i+1));\n                index\
    \ = i+1;\n                isOpen = false;\n            }\n        }\n    }\n \
    \   return result;\n}\n", "    var paren_groups = [];\n    var group = \"\";\n\
    \    var counter = 0;\n    for(var i = 0; i < paren_string.length; i++){\n   \
    \     if(paren_string[i] === \"(\"){\n            counter++;\n            group\
    \ += paren_string[i];\n        }else if(paren_string[i] === \")\"){\n        \
    \    counter--;\n            group += paren_string[i];\n        }\n        if(counter\
    \ === 0 && group !== \"\"){\n            paren_groups.push(group);\n         \
    \   group = \"\";\n        }\n    }\n    return paren_groups;\n}\n", "    var\
    \ start_index = paren_string.indexOf(\"(\");\n    var end_index = paren_string.indexOf(\"\
    )\");\n    var total_count = 0;\n    var next_start = [];\n    var result = [];\n\
    \    while(start_index < end_index && start_index > -1){\n        if(paren_string[start_index]\
    \ == \"(\"){\n            total_count++;\n        }\n        else if(paren_string[start_index]\
    \ == \")\"){\n            total_count--;\n        }\n        if(total_count ==\
    \ 0){\n            result.push(paren_string.slice(start_index, end_index+1));\n\
    \            next_start.push(end_index+1);\n        }\n        end_index++;\n\
    \        if(end_index >= paren_string.length || total_count == 0){\n         \
    \   total_count = 0;\n            start_index = next_start.shift();\n        \
    \    end_index = start_index;\n        }\n    }\n    return result;\n}\n", " \
    \ // TODO\n  var res = paren_string.split(' ');\n  var resArr = [];\n  for(var\
    \ i = 0; i < res.length; i++){\n    if(res[i] != ''){\n      resArr.push(res[i]);\n\
    \    }\n  }\n  return resArr;\n}", "    //First we remove all spaces from the\
    \ string\n    paren_string = paren_string.replace(/\\s/g, '');\n    //Now we use\
    \ a regular expression to split the string on the opening parens, then we filter\
    \ the empty\n    // spaces out of the array to be returned\n    return paren_string.split(/\\\
    (/).filter(x => x !== '');\n}\n", "    var groups = [];\n    var current_group\
    \ = \"\";\n    var depth = 0;\n    for(var i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] == \"(\"){\n            depth++;\n            current_group\
    \ += \"(\";\n        }\n        else if(paren_string[i] == \")\"){\n         \
    \   depth--;\n            current_group += \")\";\n            if(depth == 0){\n\
    \                groups.push(current_group);\n                current_group =\
    \ \"\";\n            }\n        }\n    }\n    return groups;\n}\n", "    let to_return\
    \ = [];\n    let temp_string = \"\";\n    let counter = 0;\n    for(let i = 0;\
    \ i < paren_string.length; i++){\n        let current_char = paren_string[i];\n\
    \        if(current_char === \"(\"){\n            counter++;\n        }\n    \
    \    else if(current_char === \")\"){\n            counter--;\n        }\n   \
    \     if(counter !== 0){\n            temp_string += current_char;\n        }\n\
    \        else if(counter === 0){\n            to_return.push(temp_string);\n \
    \           temp_string = \"\";\n        }\n    }\n    return to_return;\n}\n",
  "\tvar arr = [],\n\t\t\tparenArr = paren_string.split(\"\"),\n\t\t\tindexArr = [],\n\
    \t\t\ttempString = \"\";\n\tfor(var i = 0; i < parenArr.length; i++){\n\t\tif(parenArr[i]\
    \ == \"(\"){\n\t\t\tindexArr.push(i);\n\t\t}else if(parenArr[i] == \")\"){\n\t\
    \t\tvar start = indexArr.pop();\n\t\t\tvar newString = parenArr.slice(start, i+1).join(\"\
    \");\n\t\t\tarr.push(newString);\n\t\t}\n\t}\n\treturn arr;\n}\n\n\n", "    let\
    \ groups = [];\n    let cur_str = \"\";\n    let stack = [];\n    for(let char\
    \ of paren_string){\n        if(char == \"(\"){\n            stack.push(char);\n\
    \            cur_str += char;\n        }\n        else if(char == \")\"){\n  \
    \          stack.pop();\n            cur_str += char;\n            if(stack.length\
    \ == 0){\n                groups.push(cur_str);\n                cur_str = \"\"\
    ;\n            }\n        }\n    }\n    return groups;\n}\n", "    let seperated\
    \ = [];\n    let inner = \"\";\n    for(i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] == \"(\"){\n            let inner = \"\";\n      \
    \      for(j = i; j < paren_string.length; j++){\n                if(paren_string[j]\
    \ == \")\"){\n                    seperated.push(inner);\n                   \
    \ i = j;\n                    break;\n                }\n                else{\n\
    \                    inner += paren_string[j];\n                }\n          \
    \  }\n        }\n    }\n    return seperated;\n}\n", "    var paren_groups = []\n\
    \    var i = 0\n    while (i < paren_string.length){\n        if (paren_string[i]\
    \ == '('){\n            var paren_count = 1\n            var group = '('\n   \
    \         i += 1\n            while (paren_count > 0){\n                if (paren_string[i]\
    \ == '('){\n                    paren_count += 1\n                }\n        \
    \        else if (paren_string[i] == ')'){\n                    paren_count -=\
    \ 1\n                }\n                group += paren_string[i]\n           \
    \     i += 1\n            }\n            paren_groups.push(group)\n        }\n\
    \        else{\n            i += 1\n        }\n    }\n    return paren_groups\n\
    }\n", "  var res = [];\n  var cur = 0;\n  var count = 0;\n  for(var i = 0; i <\
    \ paren_string.length; i++){\n    if(paren_string[i] == \"(\"){\n      if(cur\
    \ == 0){\n        res.push(\"\");\n      }\n      res[res.length - 1] += paren_string[i];\n\
    \      cur++;\n    }\n    else if(paren_string[i] == \")\"){\n      cur--;\n \
    \     res[res.length - 1] += paren_string[i];\n    }\n  }\n  return res;\n}\n",
  "    var groups_arr = [];\n    var paren_string_arr = paren_string.split(\"\");\n\
    \    var current_group = \"\";\n    var count = 0;\n    for(var i = 0; i < paren_string_arr.length;\
    \ i++){\n        if(paren_string_arr[i] == \"(\"){\n            count++;\n   \
    \         current_group += paren_string_arr[i];\n        }\n        else if(paren_string_arr[i]\
    \ == \")\"){\n            count--;\n            current_group += paren_string_arr[i];\n\
    \        }\n        if(count == 0 && current_group != \"\"){\n            groups_arr.push(current_group);\n\
    \            current_group = \"\";\n        }\n    }\n    return groups_arr;\n\
    }\n", "  var result = [];\n  var tmp = [];\n  for(var i = 0; i < paren_string.length;\
    \ i++){\n    if(paren_string[i] == '('){\n      tmp.push(paren_string[i]);\n \
    \   }\n    else if(paren_string[i] == ')'){\n      tmp.push(paren_string[i]);\n\
    \      result.push(tmp.join(''));\n      tmp = [];\n    }\n  }\n  return result;\n\
    }", "  var result = []\n  var parenCount = 0\n  var tempStr = \"\"\n  for(var\
    \ i = 0; i < paren_string.length; i++){\n    if(paren_string[i] == \"(\"){\n \
    \     parenCount++\n      tempStr += \"(\"\n    }\n    else if(paren_string[i]\
    \ == \")\"){\n      parenCount--\n      tempStr += \")\"\n    }\n    if(parenCount\
    \ == 0 && tempStr.length > 0){\n      result.push(tempStr)\n      tempStr = \"\
    \"\n    }\n  }\n  return result\n}\n", "    paren_string = paren_string.replace(/\\\
    s/g, \"\");\n    var groups = [];\n    var new_group = \"\";\n    var counter\
    \ = 0;\n    for (var i = 0; i < paren_string.length; i++){\n        if (paren_string[i]\
    \ == \"(\"){\n            counter++;\n        }\n        else if (paren_string[i]\
    \ == \")\"){\n            counter--;\n        }\n        new_group += paren_string[i];\n\
    \        if (counter == 0){\n            groups.push(new_group);\n           \
    \ new_group = \"\";\n        }\n    }\n    return groups;\n}\n", "  var paren_groups\
    \ = [];\n  var group = [];\n  var balance = 0;\n  for (var i = 0; i < paren_string.length;\
    \ i++){\n    if (paren_string[i] === '(') {\n      balance++;\n      group.push(paren_string[i]);\n\
    \    } else if (paren_string[i] === ')') {\n      balance--;\n      group.push(paren_string[i]);\n\
    \    }\n    if (balance === 0 && group.length > 0) {\n      paren_groups.push(group.join(''));\n\
    \      group = [];\n    }\n  }\n  return paren_groups;\n}\n", "  // create a reg\
    \ ex to match all valid groups of parentheses\n  // match a left paren, followed\
    \ by any number of nested groups, followed by a right paren\n  var re = /\\(+[^()]*\\\
    )/g;\n  // collect all the matches in a list\n  return paren_string.match(re);\n\
    }", "    // Write your code here\n    // var i=0;\n    var counter=0;\n    var\
    \ arr=[];\n    // while(i<paren_string.length){\n    //     if(paren_string[i]!=\"\
    (\"){\n    //         i+=1;\n    //     }\n    //     else{\n    //         counter+=1;\n\
    \    //         var str=\"\";\n    //         while(paren_string[i]!=\")\"){\n\
    \    //             str+=paren_string[i];\n    //             i+=1;\n    //  \
    \       }\n    //         str+=paren_string[i];\n    //         console.log(str);\n\
    \    //         i+=1;\n    //     }\n    // }\n    // return counter;\n    for(var\
    \ i=0;i<paren_string.length;i++){\n        if(paren_string[i]==\"(\" && paren_string[i+1]==\"\
    \ \"){\n            var str=\"\";\n            while(paren_string[i]!=\")\"){\n\
    \                str+=paren_string[i];\n                i+=1;\n            }\n\
    \            arr.push(str);\n        }\n    }\n    return arr;\n}\n", "    let\
    \ outArr = [];\n    let balance = 0;\n    let tempArr = [];\n    for(let i = 0;\
    \ i < paren_string.length; i++){\n        if(paren_string[i] === '('){\n     \
    \       balance++;\n        }\n        if(paren_string[i] === ')'){\n        \
    \    balance--;\n        }\n        if(paren_string[i] !== ' '){\n           \
    \ tempArr.push(paren_string[i]);\n        }\n        if(balance === 0 && tempArr.length\
    \ > 0){\n            outArr.push(tempArr.join(''));\n            tempArr = [];\n\
    \        }\n    }\n    return outArr;\n}\n", "    var parens = paren_string.split('')\n\
    \    var result = []\n    var temp = \"\"\n    var current = \"\"\n    var open\
    \ = 0\n    var close = 0\n    //flag\n    var has_open = false\n    var set =\
    \ false\n    for(var i = 0; i < parens.length; i++){\n        current = parens[i]\n\
    \        if(current == \"(\"){\n            open += 1\n            has_open =\
    \ true\n        }\n        if(current == \")\"){\n            close += 1\n   \
    \     }\n        if(has_open && (open == close)){\n            temp += current\n\
    \            result.push(temp)\n            temp = \"\"\n            open = 0\n\
    \            close = 0\n            has_open = false\n        }else{\n       \
    \     temp += current\n        }\n    }\n    return result\n}\n\n", "  var paren_group_arr\
    \ = paren_string.split(' ');\n  var result = [];\n  var start_index = 0;\n  var\
    \ bracket_cnt = 0;\n  //console.log(paren_group_arr);\n  for(var i = 0; i < paren_group_arr.length;\
    \ i++){\n    if(paren_group_arr[i].length === 0){\n      continue;\n    }\n  \
    \  for(var j = 0; j < paren_group_arr[i].length; j++){\n      if(paren_group_arr[i][j]\
    \ === '('){\n        bracket_cnt++;\n      }else if(paren_group_arr[i][j] ===\
    \ ')'){\n        bracket_cnt--;\n      }\n      if(bracket_cnt === 0){\n     \
    \   result.push(paren_group_arr[i].slice(start_index, j+1));\n        start_index\
    \ = j+1;\n      }\n    }\n  }\n  //console.log(result);\n  return result;\n}",
  "\t//Your code goes here.\n\tlet array = [];\n\tlet count = 0;\n\tlet holder = '';\n\
    \tfor(let i = 0; i < paren_string.length; i++){\n\t\tif(paren_string[i] == '('){\n\
    \t\t\tcount++;\n\t\t\tholder += paren_string[i];\n\t\t}\n\t\telse if(paren_string[i]\
    \ == ')'){\n\t\t\tholder += paren_string[i];\n\t\t\tcount--;\n\t\t\tif(count ==\
    \ 0){\n\t\t\t\tarray.push(holder);\n\t\t\t\tholder = '';\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn array;\n}\n", "\tvar paren_string = paren_string.replace(/\\s/g, '');\n\
    \tvar arr_paren = paren_string.split('');\n\tvar start = [];\n\tvar end = [];\n\
    \tfor (var i = 0; i < arr_paren.length; i++) {\n\t\tif (arr_paren[i] == '(') {\n\
    \t\t\tstart.push(i);\n\t\t}\n\t\tif (arr_paren[i] == ')') {\n\t\t\tend.push(i);\n\
    \t\t}\n\t}\n\tvar new_arr = [];\n\tfor (var i = 0; i < start.length; i++) {\n\t\
    \tvar temp = arr_paren.slice(start[i], end[i]+1);\n\t\tnew_arr.push(temp.join(''));\n\
    \t}\n\treturn new_arr;\n}\n", "  // See if you can use only one stack to perform\
    \ this operation (one for open and one for close)\n  var open_paren_stack = [];\n\
    \  var close_paren_stack = [];\n  var paren_groups = [];\n  var paren_string_array\
    \ = paren_string.split(\"\");\n  var paren_group = \"\";\n  for(var i = 0; i <\
    \ paren_string_array.length; i++){\n    if(paren_string_array[i] == \"(\"){\n\
    \      open_paren_stack.push(paren_string_array[i]);\n      paren_group += paren_string_array[i];\n\
    \    }\n    else if(paren_string_array[i] == \")\"){\n      close_paren_stack.push(paren_string_array[i]);\n\
    \      paren_group += paren_string_array[i];\n    }\n    if(open_paren_stack.length\
    \ > 0 && open_paren_stack.length == close_paren_stack.length){\n      paren_groups.push(paren_group);\n\
    \      paren_group = \"\";\n      open_paren_stack = [];\n      close_paren_stack\
    \ = [];\n    }\n  }\n  return paren_groups;\n}\n", "    var groups = [];\n   \
    \ var group = \"\";\n    var parens = 0;\n    for(var i = 0; i < paren_string.length;\
    \ i++){\n        var c = paren_string[i];\n        if(c == '('){\n           \
    \ parens++;\n            group += c;\n        }\n        else if(c == ')'){\n\
    \            parens--;\n            group += c;\n            if(parens == 0){\n\
    \                groups.push(group);\n                group = \"\";\n        \
    \    }\n        }\n    }\n    return groups;\n}\n", "    return new Promise(function(resolve,\
    \ reject){\n        var paren_groups = [];\n        var start_pos = 0;\n     \
    \   var current_pos = 0;\n        while(paren_string.indexOf('(', start_pos) !==\
    \ -1){\n            current_pos = paren_string.indexOf('(', start_pos);\n    \
    \        if(paren_string.indexOf(')', current_pos) === -1){\n                throw\
    \ new Error('cannot find end paren')\n            }\n            else{\n     \
    \           paren_groups.push(paren_string.slice(current_pos, paren_string.indexOf(')',\
    \ current_pos) + 1));\n                start_pos = paren_string.indexOf(')', current_pos)\
    \ + 1;\n            }\n        }\n        resolve(paren_groups);\n    });\n}\n",
  "    var result = [];\n    var start = 0;\n    var end = 0;\n    var counter = 0;\n\
    \    var flag = false;\n    for(var i = 0; i < paren_string.length; i++){\n  \
    \      if(paren_string[i] == \"(\"){\n            counter++;\n            if(flag\
    \ == false){\n                start = i;\n                flag = true;\n     \
    \       }\n        }\n        if(paren_string[i] == \")\"){\n            counter--;\n\
    \            if(counter == 0){\n                end = i;\n                result.push(paren_string.slice(start,\
    \ end+1));\n                flag = false;\n            }\n        }\n    }\n \
    \   return result;\n}", "    var stack = [];\n    var output = [];\n    var current_group\
    \ = '';\n    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ == '('){\n            stack.push(paren_string[i]);\n            current_group\
    \ += paren_string[i];\n        }\n        else if(paren_string[i] == ')'){\n \
    \           stack.pop();\n            current_group += paren_string[i];\n    \
    \        if(stack.length == 0){\n                output.push(current_group);\n\
    \                current_group = '';\n            }\n        }\n    }\n    return\
    \ output;\n}\n", "  // ==================== YOUR WORK HERE ====================\n\
    \  var count = 0;\n  var position = 0;\n  var array = [];\n  var array2 = [];\n\
    \  var newarray = [];\n  var newarray2 = [];\n  var string = \"\";\n  for (var\
    \ i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\" ||\
    \ paren_string[i] === \")\") {\n      string += paren_string[i];\n    }\n  }\n\
    \  for (var j = 0; j < string.length; j++) {\n    if (string[j] === \"(\") {\n\
    \      array.push(j);\n    }\n    if (string[j] === \")\") {\n      array2.push(j);\n\
    \    }\n  }\n  if (array.length === array2.length) {\n    while (array.length\
    \ > 0) {\n      newarray.push(array.shift());\n      newarray2.push(array2.shift());\n\
    \    }\n    for (var k = 0; k < newarray.length; k++) {\n      string = string.slice(newarray[k],\
    \ newarray2[k] + 1);\n      paren_string = paren_string.slice(newarray[k], newarray2[k]\
    \ + 1);\n      paren_string = paren_string.replace(/ /g,\"\");\n      if (string\
    \ === paren_string) {\n        position = newarray[k];\n        while (string.length\
    \ > 0) {\n          if (string[0] === \"(\") {\n            count += 1;\n    \
    \      }\n          if (string[0] === \")\") {\n            count -= 1;\n    \
    \      }\n          string = string.slice(1);\n        }\n        if (count ===\
    \ 0) {\n          string = paren_string;\n        }\n      }\n    }\n  }\n  return\
    \ string;\n  // ========================================================\n}\n",
  "    let open_paren = 0;\n    let paren_array = [];\n    let paren_string_array\
    \ = paren_string.split(\"\");\n    for (let i = 0; i < paren_string_array.length;\
    \ i++){\n        if (paren_string_array[i] === \"(\"){\n            open_paren++;\n\
    \        }\n        else if (paren_string_array[i] === \")\"){\n            open_paren--;\n\
    \        }\n        if (open_paren === 0){\n            paren_array.push(paren_string_array.splice(0,i+1).join(\"\
    \"));\n            i = -1;\n        }\n    }\n    return paren_array;\n}\n", " \
    \ let result = [];\n  let i = 0;\n  let count = 0;\n  let idx = 0;\n  let j =\
    \ 0;\n  let str = '';\n  while(i < paren_string.length){\n    let char = paren_string[i];\n\
    \    if(char === '('){\n      count++;\n    }\n    if(char === ')'){\n      count--;\n\
    \    }\n    if(count === 0){\n      str = paren_string.slice(idx, i+1);\n    \
    \  result.push(str);\n      idx = i+1;\n    }\n    i++;\n  }\n  return result;\n\
    }\n", "    var paren_array = [];\n    var paren_group = \"\";\n    var open_count\
    \ = 0;\n    var close_count = 0;\n    var i = 0;\n    while (i < paren_string.length){\n\
    \        if (paren_string[i] == \" \"){\n            i++;\n        }\n       \
    \ else if (paren_string[i] == \"(\"){\n            open_count++;\n           \
    \ paren_group += paren_string[i];\n            i++;\n        }\n        else if\
    \ (paren_string[i] == \")\"){\n            close_count++;\n            paren_group\
    \ += paren_string[i];\n            i++;\n        }\n        if (open_count ==\
    \ close_count){\n            paren_array.push(paren_group);\n            paren_group\
    \ = \"\";\n            open_count = 0;\n            close_count = 0;\n       \
    \ }\n    }\n    return paren_array;\n}", "    var groups = [];\n    var new_group\
    \ = '';\n    var balance = 0;\n    for (var idx = 0; idx < paren_string.length;\
    \ idx++){\n        if (paren_string[idx] == '('){\n            balance += 1;\n\
    \        }\n        else if (paren_string[idx] == ')'){\n            balance -=\
    \ 1;\n        }\n        new_group += paren_string[idx];\n        if (balance\
    \ == 0){\n            groups.push(new_group);\n            new_group = '';\n \
    \       }\n    }\n    return groups;\n}\n", "    var parens = paren_string.split('');\n\
    \    var groups = [];\n    var temp = '';\n    for(var i = 0; i < parens.length;\
    \ i++){\n        if(parens[i] == '('){\n            temp += parens[i];\n     \
    \   }\n        else if(parens[i] == ')'){\n            temp += parens[i];\n  \
    \          groups.push(temp);\n            temp = '';\n        }\n    }\n    return\
    \ groups;\n}\n", "  var openParens = 0;\n  var closeParens = 0;\n  var groups\
    \ = [];\n  var separators = [];\n  for (var i = 0; i < paren_string.length; i++)\
    \ {\n    if (paren_string[i] === \"(\") {\n      openParens += 1;\n    } else\
    \ if (paren_string[i] === \")\") {\n      closeParens += 1;\n    } else if (paren_string[i]\
    \ === \" \") {\n      continue;\n    }\n    if (openParens === closeParens) {\n\
    \      separators.push(i);\n      openParens = 0;\n      closeParens = 0;\n  \
    \  }\n  }\n  separators.push(paren_string.length);\n  for (var j = 0; j < separators.length\
    \ - 1; j++) {\n    groups.push(paren_string.slice(separators[j] + 1, separators[j\
    \ + 1]));\n  }\n  return groups;\n}\n", "    return paren_string.split(/[\\s]*(\\\
    (\\)[\\s]*\\(\\)\\([\\s]*\\)\\)[\\s]*|\\(\\)[\\s]*\\(\\)\\)[\\s]*|\\(\\)[\\s]*)/);\n\
    }\n", "  var split_str = paren_string.split(\"\")\n  var output = []\n  var temp\
    \ = []\n  var count = 0\n  for (var i = 0; i < split_str.length; i++) {\n    if\
    \ (split_str[i] === \"(\") {\n      count++\n    }\n    if (split_str[i] === \"\
    )\") {\n      count--\n    }\n    temp.push(split_str[i])\n    if (count === 0)\
    \ {\n      output.push(temp.join(\"\"))\n      temp = []\n    }\n  }\n  return\
    \ output\n}", "\tvar paren_groups = [];\n\n\tvar start = 0;\n\tvar end = 0;\n\t\
    while(end < paren_string.length){\n\t\tend = find_matching_paren(paren_string,\
    \ start, paren_string.length);\n\t\tparen_groups.push(paren_string.substring(start,\
    \ end+1));\n\t\tstart = end+1;\n\t}\n\n\treturn paren_groups;\n}\n", "    let\
    \ arr = paren_string.split(\" \");\n    let newArr = [];\n    for(let i = 0; i\
    \ < arr.length; i++){\n        if(arr[i].length > 0){\n            newArr.push(arr[i]);\n\
    \        }\n    }\n    let finalArr = [];\n    let currentStr = '';\n    for(let\
    \ i = 0; i < newArr.length; i++){\n        let currentParen = newArr[i];\n   \
    \     let parenCount = 0;\n        for(let j = 0; j < currentParen.length; j++){\n\
    \            let letter = currentParen[j];\n            if(letter === \"(\"){\n\
    \                parenCount++;\n            }\n            if(letter === \")\"\
    ){\n                parenCount--;\n            }\n            if(parenCount ===\
    \ 0){\n                currentStr += letter;\n                finalArr.push(currentStr);\n\
    \                currentStr = '';\n            } else {\n                currentStr\
    \ += letter;\n            }\n        }\n    }\n    return finalArr;\n}\n\nlet\
    \ testString = \"( ) (( )) (( )( ))\";\nlet result = separate_paren_groups(testString);",
  "    if(paren_string === '') return [];\n    let groups = []\n    let temp = []\n\
    \    let parens_open = 0\n    for(let i = 0; i < paren_string.length; i++){\n\
    \        if(paren_string[i] === '('){\n            parens_open++;\n          \
    \  temp.push(paren_string[i])\n        }\n        else if(paren_string[i] ===\
    \ ')'){\n            parens_open--;\n            temp.push(paren_string[i])\n\
    \        }\n        if(parens_open === 0 && temp.length > 0){\n            groups.push(temp.join(''))\n\
    \            temp = []\n        }\n    }\n    return groups\n}\n", "    var result\
    \ = paren_string.split(\")\");\n    result = result.slice(0, result.length - 1);\n\
    \    for (var i = 0; i < result.length; i++) {\n        result[i] = result[i].replace(/\\\
    s/g, '');\n        result[i] = result[i].split(\"(\");\n        result[i] = result[i].slice(1,\
    \ result[i].length);\n        result[i] = \"(\" + result[i].join(\"(\");\n   \
    \ }\n    return result;\n}\n", "    var count = 0;\n    var groups = [];\n   \
    \ var open_parens = 0;\n    var closed_parens = 0;\n    for (var i = 0; i < paren_string.length;\
    \ i++){\n        if (paren_string[i] !== \" \"){\n            if (paren_string[i]\
    \ === \"(\"){\n                open_parens += 1;\n            }\n            if\
    \ (paren_string[i] === \")\"){\n                closed_parens += 1;\n        \
    \    }\n            if (open_parens === closed_parens && open_parens !== 0){\n\
    \                groups.push(paren_string.slice(count, i + 1));\n            \
    \    count = i + 1;\n                open_parens = 0;\n                closed_parens\
    \ = 0;\n            }\n        }\n    }\n    return groups;\n}\n", "    var result\
    \ = [];\n    var open = [];\n    var close = [];\n    var group = [];\n    var\
    \ index = 0;\n    while(index < paren_string.length){\n        if(paren_string[index]\
    \ === \"(\"){\n            open.push(index);\n        }else if(paren_string[index]\
    \ === \")\"){\n            close.push(index);\n        }\n        index++;\n \
    \   }\n    for(var i = 0; i < open.length; i++){\n        for(var j = open[i];\
    \ j < close[i]; j++){\n            group.push(paren_string[j]);\n        }\n \
    \       result.push(group.join(\"\"));\n        group = [];\n    }\n    return\
    \ result;\n}\n", "\n}\n", "    var arr = paren_string.split(\" \").join(\"\").split(\"\
    \");\n    var count = 0;\n    var output = [];\n    var temp = \"\";\n    for(var\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] == \"(\"){\n            count++;\n\
    \        }\n        if(arr[i] == \")\"){\n            count--;\n        }\n  \
    \      temp += arr[i];\n        if(count == 0){\n            output.push(temp);\n\
    \            temp = \"\";\n        }\n    }\n    return output;\n}\n", "  var\
    \ result = [];\n  var counter = 0;\n  var temp = \"\";\n  for(var i = 0; i < paren_string.length;\
    \ i++){\n    if(paren_string[i] === \"(\"){\n      counter++;\n    }else if(paren_string[i]\
    \ === \")\"){\n      counter--;\n    }\n    temp += paren_string[i];\n    if(counter\
    \ === 0){\n      result.push(temp);\n      temp = \"\";\n    }\n  }\n  return\
    \ result;\n}\n", "    var array_of_paren_groups = [],\n        group_of_paren\
    \ = '',\n        open_paren = 0,\n        close_paren = 0;\n\n    paren_string\
    \ = paren_string.replace(/\\s/g, '');\n\n    for (var i = 0; i < paren_string.length;\
    \ i++) {\n        if (paren_string[i] === '(') {\n            open_paren += 1;\n\
    \        } else if (paren_string[i] === ')') {\n            close_paren += 1;\n\
    \        }\n\n        group_of_paren += paren_string[i];\n\n        if (open_paren\
    \ === close_paren) {\n            array_of_paren_groups.push(group_of_paren);\n\
    \            group_of_paren = '';\n            open_paren = 0;\n            close_paren\
    \ = 0;\n        }\n    }\n\n    return array_of_paren_groups;\n}\n", "    var\
    \ balanced_parens = [];\n    var open_paren_idx = -1;\n    for(var i = 0; i <\
    \ paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n       \
    \     open_paren_idx = i;\n        } else if(paren_string[i] === \")\"){\n   \
    \         balanced_parens.push(paren_string.slice(open_paren_idx, i + 1));\n \
    \       }\n    }\n    return balanced_parens;\n}\n", "    var string_array = [];\n\
    \    var paren_count = 0;\n    var temp_string = \"\";\n    for(var i = 0; i <\
    \ paren_string.length; i++){\n        if(paren_string[i] == \"(\"){\n        \
    \    paren_count++;\n            temp_string += paren_string[i];\n        }\n\
    \        else if(paren_string[i] == \")\"){\n            paren_count--;\n    \
    \        temp_string += paren_string[i];\n        }\n        if(paren_count ==\
    \ 0 && temp_string != \"\"){\n            string_array.push(temp_string);\n  \
    \          temp_string = \"\";\n        }\n    }\n    return string_array;\n}\n",
  "    var parens = paren_string.replace(/ /g, '').split('');\n\n    var stack = [];\n\
    \    var stack_index = 0;\n    var count = 0;\n    var groups = [];\n    var temp\
    \ = '';\n\n    for(var i = 0; i < parens.length; i++){\n        if(parens[i] ===\
    \ '('){\n            if(count === 0){\n                stack[stack_index] = [i];\n\
    \                stack_index++;\n            }\n            count++;\n       \
    \ }\n        else{\n            count--;\n            if(count === 0){\n     \
    \           stack[stack_index - 1].push(i);\n                groups.push(parens.slice(stack[stack_index\
    \ - 1][0], stack[stack_index - 1][1] + 1).join(''));\n                stack_index--;\n\
    \            }\n        }\n    }\n\n    return groups;\n}\n", "  var parenGroups\
    \ = [];\n  var start = 0;\n  var parenCount = 0;\n  for (var i = 0; i < paren_string.length;\
    \ i++) {\n    var currentChar = paren_string[i];\n    if (currentChar === \"(\"\
    ) {\n      parenCount++;\n    } else if (currentChar === \")\") {\n      parenCount--;\n\
    \    }\n\n    if (parenCount === 0) {\n      parenGroups.push(paren_string.slice(start,\
    \ i + 1));\n      start = i + 1;\n    }\n  }\n  return parenGroups;\n}\n", " \
    \   var result = [];\n    var count = 0;\n    var j = 0;\n    for(var i = 0; i\
    \ < paren_string.length; i++){\n        if(paren_string[i] === \"(\"){\n     \
    \       count++;\n        }\n        else if(paren_string[i] === \")\"){\n   \
    \         count--;\n        }\n        if(count === 0){\n            result.push(paren_string.slice(j,\
    \ i+1));\n            j = i+1;\n        }\n    }\n    return result;\n}\n", " \
    \   // Use a regular expression to find the groups of parentheses.\n    var paren_groups\
    \ = paren_string.split(/[ ]*\\([ ]*\\)/);\n    // Strip the parenthesis from the\
    \ beginning and the end of each group.\n    var i;\n    for (i = 0; i < paren_groups.length;\
    \ i++){\n        paren_groups[i] = paren_groups[i].replace(/^[ ]*\\(/, '');\n\
    \        paren_groups[i] = paren_groups[i].replace(/\\)[ ]*$/, '');\n    }\n \
    \   return paren_groups;\n}\n", "    var res = [];\n    var i = 0;\n    while(i\
    \ < paren_string.length){\n        var parens = '';\n        var j = i;\n    \
    \    while(j < paren_string.length){\n            if(paren_string[j] === '('){\n\
    \                parens += '(';\n            }\n            else if(paren_string[j]\
    \ === ')'){\n                parens += ')';\n            }\n            j++;\n\
    \            if(parens[parens.length - 1] === ')' && parens[parens.length - 2]\
    \ === '('){\n                break;\n            }\n        }\n        res.push(parens);\n\
    \        i = j + 1;\n    }\n    return res;\n}\n", "    var seen_open = false;\n\
    \    var separate_groups = [];\n    var tmp_string = '';\n    for (var i = 0;\
    \ i < paren_string.length; i++){\n        if (paren_string[i] == '(') {\n    \
    \        if (seen_open){\n                tmp_string += paren_string[i];\n   \
    \         }\n            else {\n                tmp_string = paren_string[i];\n\
    \                seen_open = true;\n            }\n        }\n        else if\
    \ (paren_string[i] == ')') {\n            if (seen_open){\n                tmp_string\
    \ += paren_string[i];\n                separate_groups.push(tmp_string);\n   \
    \             tmp_string = '';\n                seen_open = false;\n         \
    \   }\n        }\n    }\n    return separate_groups;\n}\n", "  var paren_groups\
    \ = [];\n  var curr_index = 0;\n  var inside_parens = false;\n  var curr_paren_string\
    \ = \"\";\n  while(curr_index < paren_string.length){\n    var curr_char = paren_string[curr_index];\n\
    \    if(curr_char == \" \"){\n      if(inside_parens){\n        curr_paren_string\
    \ += curr_char;\n      }\n    }\n    else if(curr_char == \"(\"){\n      if(inside_parens){\n\
    \        curr_paren_string += curr_char;\n      }\n      else{\n        inside_parens\
    \ = true;\n        curr_paren_string += curr_char;\n      }\n    }\n    else if(curr_char\
    \ == \")\"){\n      if(inside_parens){\n        curr_paren_string += curr_char;\n\
    \        inside_parens = false;\n        paren_groups.push(curr_paren_string);\n\
    \        curr_paren_string = \"\";\n      }\n    }\n    curr_index += 1;\n  }\n\
    \  return paren_groups;\n}\n", "    const result = [];\n    let deep = 0;\n  \
    \  let i = 0;\n    let temp = \"\";\n    while(i<paren_string.length){\n     \
    \   if(paren_string[i]=='('){\n            deep++;\n            temp+=paren_string[i];\n\
    \        }\n        else if(paren_string[i]==')'){\n            deep--;\n    \
    \        temp+=paren_string[i];\n        }\n        if(deep===0){\n          \
    \  result.push(temp);\n            temp = \"\";\n        }\n        i++;\n   \
    \ }\n    return result;\n}\n", "\tvar groups = [];\n\tvar c = 0;\n\tvar new_paren_string\
    \ = '';\n\tfor (var i = 0; i < paren_string.length; i++){\n\t\tif (paren_string[i]\
    \ === '('){\n\t\t\tc++;\n\t\t}\n\t\telse if (paren_string[i] === ')'){\n\t\t\t\
    c--;\n\t\t}\n\t\tnew_paren_string += paren_string[i];\n\t\tif (c === 0){\n\t\t\
    \tgroups.push(new_paren_string);\n\t\t\tnew_paren_string = '';\n\t\t}\n\t}\n\t\
    return groups;\n}", "  var stack = [];\n  var word_stack = [];\n  var word = \"\
    \";\n  var result = [];\n  for(var i = 0; i < paren_string.length; i++){\n   \
    \ if(paren_string[i] === \"(\" && !paren_string[i+1] === \")\"){\n      stack.push(paren_string[i]);\n\
    \      word_stack.push(word);\n      word = \"\";\n    }\n    else if(paren_string[i]\
    \ === \")\" && stack.length > 0){\n      if(word.length > 0){\n        word_stack.push(word);\n\
    \        word = \"\";\n      }\n      stack.pop();\n      var popped = word_stack.pop();\n\
    \      if(popped.length > 0){\n        word = popped + \")\" + word;\n      }\n\
    \      else{\n        word = \"()\" + word;\n      }\n      if(stack.length ===\
    \ 0){\n        result.push(word);\n        word = \"\";\n      }\n    }\n    else\
    \ if(paren_string[i] !== \"(\" && paren_string[i] !== \")\"){\n      word += paren_string[i];\n\
    \    }\n  }\n  return result;\n}", "    // YOUR CODE HERE\n    var array_result\
    \ = [];\n    var paren_string_array = paren_string.split(\"\");\n    var current_string\
    \ = \"\";\n    var paren_count = 0;\n    for (var paren_string_array_index in\
    \ paren_string_array){\n        if (paren_string_array[paren_string_array_index]\
    \ == \"(\" || paren_string_array[paren_string_array_index] == \")\"){\n      \
    \      current_string += paren_string_array[paren_string_array_index];\n     \
    \       if (paren_string_array[paren_string_array_index] == \"(\"){\n        \
    \        paren_count += 1;\n            }\n            else{\n               \
    \ paren_count -= 1;\n            }\n            if (paren_count == 0){\n     \
    \           array_result.push(current_string);\n                current_string\
    \ = \"\";\n            }\n        }\n    }\n    return array_result;\n}\n", " \
    \ let paren = [];\n  let temp = \"\";\n  let count = 0;\n  for(let i = 0; i <\
    \ paren_string.length; i++){\n    if(paren_string[i] === \"(\"){\n      count++;\n\
    \      temp += paren_string[i];\n    }\n    else if(paren_string[i] === \")\"\
    ){\n      count--;\n      temp += paren_string[i];\n    }\n    if(count === 0\
    \ && temp !== \"\"){\n      paren.push(temp);\n      temp = \"\";\n    }\n  }\n\
    \  return paren;\n}", "    let groups = [];\n    let start = 0;\n    let end =\
    \ 0;\n    let open = 0;\n    let closed = 0;\n    let new_start = false;\n   \
    \ while(end < paren_string.length){\n        if(paren_string[end] == '('){\n \
    \           open++;\n            new_start = true;\n        }else if(paren_string[end]\
    \ == ')'){\n            closed++;\n        }\n        if(open == closed && open\
    \ != 0){\n            if(new_start){\n                groups.push(paren_string.slice(start,\
    \ end+1));\n                new_start = false;\n            }else{\n         \
    \       groups[groups.length-1] += paren_string.slice(start, end+1);\n       \
    \     }\n            start = end+1;\n            open = 0;\n            closed\
    \ = 0;\n        }\n        end++;\n    }\n    return groups;\n}\n", "  var result\
    \ = [];\n  var temp = '';\n  var left_count = 0;\n  var right_count = 0;\n  for(var\
    \ i = 0; i < paren_string.length; i++){\n    if(paren_string[i] !== ' '){\n  \
    \    if(paren_string[i] === '('){\n        left_count++;\n      }\n      if(paren_string[i]\
    \ === ')'){\n        right_count++;\n      }\n      temp += paren_string[i];\n\
    \      if(left_count === right_count){\n        result.push(temp);\n        temp\
    \ = '';\n        left_count = 0;\n        right_count = 0;\n      }\n    }\n \
    \ }\n  return result;\n}\n\nmodule.exports = {\n  balanced_braces: balanced_braces,\n\
    \  balanced_brackets: balanced_brackets,\n  balanced_parens: balanced_parens,\n\
    \  separate_paren_groups: separate_paren_groups\n};", "    var result = [];\n\
    \    var stack = new Stack();\n    var parens = paren_string.split(\"\");\n  \
    \  var start = 0;\n    for(var i = 0; i < parens.length; i++){\n        if(parens[i]\
    \ === \"(\"){\n            stack.push(i);\n        }\n        else if(parens[i]\
    \ === \")\"){\n            stack.pop();\n            if(stack.size() === 0){\n\
    \                var str = parens.splice(start, i - start + 1).join(\"\");\n \
    \               result.push(str);\n                i = 0;\n                start\
    \ = i + 1;\n            }\n        }\n    }\n    return result;\n}", "    var\
    \ newArray = [];\n    var start = 0;\n    var end = 0;\n    var temp = \"\";\n\
    \    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ == \"(\"){\n            start++;\n        }\n        if(paren_string[i] == \"\
    )\"){\n            end++;\n        }\n        if(start == end){\n            temp\
    \ = paren_string.substring(0, i+1);\n            newArray.push(temp);\n      \
    \      paren_string = paren_string.replace(temp, \"\");\n            i = 0;\n\
    \            start = 0;\n            end = 0;\n        }\n    }\n    return newArray;\n\
    }", "    var result = [];\n    var group = '';\n    var open_parens = 0;\n   \
    \ for (var i = 0; i < paren_string.length; i++){\n        if (paren_string[i]\
    \ === '('){\n            open_parens += 1;\n            group += paren_string[i];\n\
    \        }\n        else if (paren_string[i] === ')'){\n            open_parens\
    \ -= 1;\n            group += paren_string[i];\n        }\n        if (open_parens\
    \ === 0 && group.length > 0){\n            result.push(group);\n            group\
    \ = '';\n        }\n    }\n    return result;\n}", "    var parens = paren_string.split(\"\
    \ \").join(\"\");\n    var open_count = 0;\n    var open_index = [];\n    var\
    \ close_index = [];\n    var result = [];\n    for (var i = 0; i < parens.length;\
    \ i++){\n        if (parens[i] === \"(\"){\n            open_count++;\n      \
    \      open_index.push(i);\n        }\n        else{\n            close_index.push(i);\n\
    \        }\n    }\n    for (var i = 0; i < open_index.length; i++){\n        result.push(parens.slice(open_index[i],\
    \ close_index[i] + 1));\n    }\n    return result;\n}\n", "\tvar open_braces =\
    \ 0;\n\tvar groups = [];\n\tvar group = \"\";\n\tvar i;\n\tfor(i = 0; i < paren_string.length;\
    \ i++){\n\t\tif(paren_string[i] == '('){\n\t\t\topen_braces += 1;\n\t\t\tgroup\
    \ += paren_string[i];\n\t\t} else if(paren_string[i] == ')'){\n\t\t\topen_braces\
    \ -= 1;\n\t\t\tgroup += paren_string[i];\n\t\t\tif(open_braces == 0){\n\t\t\t\t\
    groups.push(group);\n\t\t\t\tgroup = \"\";\n\t\t\t}\n\t\t}\n\t}\n\treturn groups;\n\
    }\n", "    var i = 0;\n    var count_open = 0;\n    var count_close = 0;\n   \
    \ var paren_array = [];\n    var out_string = \"\";\n    while (i < paren_string.length){\n\
    \        if (paren_string[i] == \"(\"){\n            count_open += 1;\n      \
    \  }\n        if (paren_string[i] == \")\"){\n            count_close += 1;\n\
    \        }\n        if (count_open == count_close){\n            paren_array.push(out_string);\n\
    \            out_string = \"\";\n            count_open = 0;\n            count_close\
    \ = 0;\n        }\n        else{\n            out_string += paren_string[i];\n\
    \        }\n        i++;\n    }\n    return paren_array;\n}\n", "  let arr = [];\n\
    \  //While the group of parentheses is not empty\n  while(paren_string.length\
    \ > 0){\n    let parens = paren_string.match(/\\([^\\(\\)]*\\)/g);\n    arr.push(parens[0]);\n\
    \    paren_string = paren_string.replace(parens[0], \"\");\n  }\n  return arr;\n\
    }\n", "    var count = 0;\n    var new_string = \"\";\n    var new_array = [];\n\
    \    for(var i = 0; i < paren_string.length; i++){\n        if(paren_string[i]\
    \ === \"(\"){\n            count++;\n        }\n        if(paren_string[i] ===\
    \ \")\"){\n            count--;\n        }\n        if(paren_string[i] === \"\
    \ \"){\n            paren_string = paren_string.slice(0, i) + paren_string.slice(i\
    \ + 1);\n            i--;\n        }\n        if(count === 0 && i === paren_string.length\
    \ - 1){\n            new_string += paren_string[i];\n            new_array.push(new_string);\n\
    \            new_string = \"\";\n        }\n        else if(count === 0){\n  \
    \          new_string += paren_string[i];\n            new_array.push(new_string);\n\
    \            new_string = \"\";\n        }\n        else{\n            new_string\
    \ += paren_string[i];\n        }\n    }\n    return new_array;\n}\n", "    let\
    \ left_parentheses = [];\n    let right_parentheses = [];\n    let paren_groups\
    \ = [];\n    for (let i = 0; i < paren_string.length; i++){\n        if (paren_string[i]\
    \ === \"(\"){\n            left_parentheses.push(i);\n        }\n        if (paren_string[i]\
    \ === \")\"){\n            right_parentheses.push(i);\n        }\n    }\n    for\
    \ (let j = 0; j < left_parentheses.length; j++){\n        paren_groups.push(paren_string.slice(left_parentheses[j],\
    \ right_parentheses[j] + 1));\n    }\n    return paren_groups;\n}\n", "    var\
    \ ParenGroups = [];\n    var CurrentParenGroup = '';\n    var OpenParens = 0;\n\
    \    for (var i = 0; i < paren_string.length; i++){\n        var char = paren_string[i];\n\
    \        if (char == '('){\n            OpenParens++;\n            CurrentParenGroup\
    \ += char;\n        } else if (char == ')'){\n            OpenParens--;\n    \
    \        CurrentParenGroup += char;\n            if (OpenParens == 0){\n     \
    \           ParenGroups.push(CurrentParenGroup);\n                CurrentParenGroup\
    \ = '';\n            }\n        }\n    }\n    return ParenGroups;\n}", "    let\
    \ result = [];\n    //Step 1:  Take out all of the space characters.\n    let\
    \ paren_string_no_spaces = paren_string.replace(/\\s/g, '');\n    //Step 2:  If\
    \ the string is not properly balanced, return []\n    if(!is_balanced(paren_string_no_spaces)){\n\
    \        return result;\n    }\n    //Step 3:  Loop through each character in\
    \ the string.\n    let start_index = 0;\n    let end_index = 0;\n    for(let i\
    \ = 0; i < paren_string_no_spaces.length; i++){\n        if(paren_string_no_spaces[i]\
    \ === '('){\n            start_index = i;\n        }\n        if(paren_string_no_spaces[i]\
    \ === ')'){\n            end_index = i;\n            let current_paren_group =\
    \ paren_string_no_spaces.slice(start_index, end_index + 1);\n            if(!result.includes(current_paren_group)){\n\
    \                result.push(current_paren_group);\n            }\n        }\n\
    \    }\n    return result;\n}", "\tlet result = [];\n\tlet paren_string_no_space\
    \ = paren_string.replace(/\\s/g,'');\n\tlet current_paren_string = paren_string_no_space[0];\n\
    \tfor(let i = 1; i < paren_string_no_space.length; i++){\n\t\tif(paren_string_no_space[i]\
    \ === '('){\n\t\t\tcurrent_paren_string += paren_string_no_space[i];\n\t\t}else{\n\
    \t\t\tcurrent_paren_string += paren_string_no_space[i];\n\t\t\tresult.push(current_paren_string);\n\
    \t\t\tcurrent_paren_string = '';\n\t\t}\n\t}\n\treturn result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
