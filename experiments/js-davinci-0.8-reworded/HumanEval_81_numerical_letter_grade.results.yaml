language: js
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    const\
    \ letters = {\"A+\" : 0, \"A\" : 0, \"A-\" : 0, \"B+\" : 0, \"B\" : 0, \"B-\"\
    \ : 0, \"C+\" : 0, \"C\" : 0, \"C-\" : 0, \"D+\" : 0, \"D\" : 0, \"D-\" : 0, \"\
    E\" : 0}\n    const calculator = {\n        \"A+\" : 4.0,\n        \"A\" : 3.7,\n\
    \        \"A-\" : 3.3,\n        \"B+\" : 3.0,\n        \"B\" : 2.7,\n        \"\
    B-\" : 2.3,\n        \"C+\" : 2.0,\n        \"C\" : 1.7,\n        \"C-\" : 1.3,\n\
    \        \"D+\" : 1.0,\n        \"D\" : 0.7,\n        \"D-\" : 0.0,\n        \"\
    E\" : 0.0\n    }\n    for(let grade of grades){\n        for(let key in calculator){\n\
    \            if(grade >= calculator[key]){\n                letters[key] += 1\n\
    \                break\n            }\n        }\n    }\n    return letters\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n{ 'A+': 1,\n  A: 0,\n  'A-': 1,\n  'B+':\
    \ 1,\n  B: 0,\n  'B-': 0,\n  'C+': 1,\n  C: 1,\n  'C-': 0,\n  'D+': 0,\n  D: 0,\n\
    \  'D-': 0,\n  E: 0 }\n\nshould equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at\
    \ test (/tmp/tmpbctzs1v6.js:56:10)\n    at Object.<anonymous> (/tmp/tmpbctzs1v6.js:64:1)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: {\n    'A+': 1,\n    A: 0,\n    'A-': 1,\n\
    \    'B+': 1,\n    B: 0,\n    'B-': 0,\n    'C+': 1,\n    C: 1,\n    'C-': 0,\n\
    \    'D+': 0,\n    D: 0,\n    'D-': 0,\n    E: 0\n  },\n  expected: [ 'A+', 'B',\
    \ 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var letters\
    \ = []\n  for (var i = 0; i < grades.length; i++){\n    var grade = grades[i]\n\
    \    if (grade >= 4.0){\n      letters.push(\"A+\")\n    }\n    else if (grade\
    \ >= 3.7){\n      letters.push(\"A\")\n    }\n    else if (grade >= 3.3){\n  \
    \    letters.push(\"A-\")\n    }\n    else if (grade >= 3.0){\n      letters.push(\"\
    B+\")\n    }\n    else if (grade >= 2.7){\n      letters.push(\"B\")\n    }\n\
    \    else if (grade >= 2.3){\n      letters.push(\"B-\")\n    }\n    else if (grade\
    \ >= 2.0){\n      letters.push(\"C+\")\n    }\n    else if (grade >= 1.7){\n \
    \     letters.push(\"C\")\n    }\n    else if (grade >= 1.3){\n      letters.push(\"\
    C-\")\n    }\n    else if (grade >= 1.0){\n      letters.push(\"D+\")\n    }\n\
    \    else if (grade >= 0.7){\n      letters.push(\"D\")\n    }\n    else if (grade\
    \ >= 0.0){\n      letters.push(\"D-\")\n    }\n    else {\n      letters.push(\"\
    E\")\n    }\n  }\n  return letters\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpoh0xpqb4.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpoh0xpqb4.js:82:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ grades_array = [];\n    for (var i = 0; i < grades.length; i++){\n        if\
    \ (grades[i] >= 4.0){\n            grades_array.push(\"A+\");\n        }\n   \
    \     else if (grades[i] > 3.7){\n            grades_array.push(\"A\");\n    \
    \    }\n        else if (grades[i] > 3.3){\n            grades_array.push(\"A-\"\
    );\n        }\n        else if (grades[i] > 3.0){\n            grades_array.push(\"\
    B+\");\n        }\n        else if (grades[i] > 2.7){\n            grades_array.push(\"\
    B\");\n        }\n        else if (grades[i] > 2.3){\n            grades_array.push(\"\
    B-\");\n        }\n        else if (grades[i] > 2.0){\n            grades_array.push(\"\
    C+\");\n        }\n        else if (grades[i] > 1.7){\n            grades_array.push(\"\
    C\");\n        }\n        else if (grades[i] > 1.3){\n            grades_array.push(\"\
    C-\");\n        }\n        else if (grades[i] > 1.0){\n            grades_array.push(\"\
    D+\");\n        }\n        else if (grades[i] > 0.7){\n            grades_array.push(\"\
    D\");\n        }\n        else if (grades[i] > 0.0){\n            grades_array.push(\"\
    D-\");\n        }\n        else if (grades[i] == 0.0){\n            grades_array.push(\"\
    E\");\n        }\n    }\n    return grades_array;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ ans = [];\n    for(let i = 0; i < grades.length; i++){\n        let grade =\
    \ grades[i];\n        if(grade >= 4.0){\n            ans.push(\"A+\");\n     \
    \   }else if(grade >= 3.7){\n            ans.push(\"A\");\n        }else if(grade\
    \ >= 3.3){\n            ans.push(\"A-\");\n        }else if(grade >= 3.0){\n \
    \           ans.push(\"B+\");\n        }else if(grade >= 2.7){\n            ans.push(\"\
    B\");\n        }else if(grade >= 2.3){\n            ans.push(\"B-\");\n      \
    \  }else if(grade >= 2.0){\n            ans.push(\"C+\");\n        }else if(grade\
    \ >= 1.7){\n            ans.push(\"C\");\n        }else if(grade >= 1.3){\n  \
    \          ans.push(\"C-\");\n        }else if(grade >= 1.0){\n            ans.push(\"\
    D+\");\n        }else if(grade >= 0.7){\n            ans.push(\"D\");\n      \
    \  }else if(grade >= 0.0){\n            ans.push(\"D-\");\n        }else{\n  \
    \          ans.push(\"E\");\n        }\n    }\n    return ans;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmptruv2weo.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmptruv2weo.js:70:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ grade_array = [];\n    for (let grade of grades){\n        if (grade === 4.0){\n\
    \            grade_array.push(\"A+\");\n        }\n        else if (grade > 3.7){\n\
    \            grade_array.push(\"A\");\n        }\n        else if (grade > 3.3){\n\
    \            grade_array.push(\"A-\");\n        }\n        else if (grade > 3.0){\n\
    \            grade_array.push(\"B+\");\n        }\n        else if (grade > 2.7){\n\
    \            grade_array.push(\"B\");\n        }\n        else if (grade > 2.3){\n\
    \            grade_array.push(\"B-\");\n        }\n        else if (grade > 2.0){\n\
    \            grade_array.push(\"C+\");\n        }\n        else if (grade > 1.7){\n\
    \            grade_array.push(\"C\");\n        }\n        else if (grade > 1.3){\n\
    \            grade_array.push(\"C-\");\n        }\n        else if (grade > 1.0){\n\
    \            grade_array.push(\"D+\");\n        }\n        else if (grade > 0.7){\n\
    \            grade_array.push(\"D\");\n        }\n        else if (grade > 0.0){\n\
    \            grade_array.push(\"D-\");\n        }\n        else {\n          \
    \  grade_array.push(\"E\");\n        }\n    }\n    return grade_array;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var letterGrades\
    \ = [];\n  for (var i = 0; i < grades.length; i++){\n    if (grades[i] == 4.0){\n\
    \      letterGrades.push(\"A+\");\n    }\n    else if (grades[i] > 3.7){\n   \
    \   letterGrades.push(\"A\");\n    }\n    else if (grades[i] > 3.3){\n      letterGrades.push(\"\
    A-\");\n    }\n    else if (grades[i] > 3.0){\n      letterGrades.push(\"B+\"\
    );\n    }\n    else if (grades[i] > 2.7){\n      letterGrades.push(\"B\");\n \
    \   }\n    else if (grades[i] > 2.3){\n      letterGrades.push(\"B-\");\n    }\n\
    \    else if (grades[i] > 2.0){\n      letterGrades.push(\"C+\");\n    }\n   \
    \ else if (grades[i] > 1.7){\n      letterGrades.push(\"C\");\n    }\n    else\
    \ if (grades[i] > 1.3){\n      letterGrades.push(\"C-\");\n    }\n    else if\
    \ (grades[i] > 1.0){\n      letterGrades.push(\"D+\");\n    }\n    else if (grades[i]\
    \ > 0.7){\n      letterGrades.push(\"D\");\n    }\n    else if (grades[i] > 0.0){\n\
    \      letterGrades.push(\"D-\");\n    }\n    else {\n      letterGrades.push(\"\
    E\");\n    }\n  }\n  return letterGrades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ ans = []\n    for (let i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ >= 4.0){\n            ans.push(\"A+\")\n        } else if (grades[i] >= 3.7){\n\
    \            ans.push(\"A\")\n        } else if (grades[i] >= 3.3){\n        \
    \    ans.push(\"A-\")\n        } else if (grades[i] >= 3.0){\n            ans.push(\"\
    B+\")\n        } else if (grades[i] >= 2.7){\n            ans.push(\"B\")\n  \
    \      } else if (grades[i] >= 2.3){\n            ans.push(\"B-\")\n        }\
    \ else if (grades[i] >= 2.0){\n            ans.push(\"C+\")\n        } else if\
    \ (grades[i] >= 1.7){\n            ans.push(\"C\")\n        } else if (grades[i]\
    \ >= 1.3){\n            ans.push(\"C-\")\n        } else if (grades[i] >= 1.0){\n\
    \            ans.push(\"D+\")\n        } else if (grades[i] >= 0.7){\n       \
    \     ans.push(\"D\")\n        } else if (grades[i] >= 0.0){\n            ans.push(\"\
    D-\")\n        } else {\n            ans.push(\"E\")\n        }\n    }\n    return\
    \ ans\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7,\
    \ 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpm56yn00g.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpm56yn00g.js:70:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ output = []\n    for (var i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ == 4.0){\n            output.push(\"A+\")\n        }\n        else if (grades[i]\
    \ > 3.7){\n            output.push(\"A\")\n        }\n        else if (grades[i]\
    \ > 3.3){\n            output.push(\"A-\")\n        }\n        else if (grades[i]\
    \ > 3.0){\n            output.push(\"B+\")\n        }\n        else if (grades[i]\
    \ > 2.7){\n            output.push(\"B\")\n        }\n        else if (grades[i]\
    \ > 2.3){\n            output.push(\"B-\")\n        }\n        else if (grades[i]\
    \ > 2.0){\n            output.push(\"C+\")\n        }\n        else if (grades[i]\
    \ > 1.7){\n            output.push(\"C\")\n        }\n        else if (grades[i]\
    \ > 1.3){\n            output.push(\"C-\")\n        }\n        else if (grades[i]\
    \ > 1.0){\n            output.push(\"D+\")\n        }\n        else if (grades[i]\
    \ > 0.7){\n            output.push(\"D\")\n        }\n        else if (grades[i]\
    \ > 0.0){\n            output.push(\"D-\")\n        }\n        else {\n      \
    \      output.push(\"E\")\n        }\n    }\n    return output\n}\n\nnumerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5])\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = []\n    for (i=0; i<grades.length; i++){\n        var grade\
    \ = grades[i]\n        if (grade > 3.7){\n            letter_grades.push(\"A+\"\
    )\n        }\n        else if (grade > 3.3){\n            letter_grades.push(\"\
    A\")\n        }\n        else if (grade > 3.0){\n            letter_grades.push(\"\
    A-\")\n        }\n        else if (grade > 2.7){\n            letter_grades.push(\"\
    B+\")\n        }\n        else if (grade > 2.3){\n            letter_grades.push(\"\
    B\")\n        }\n        else if (grade > 2.0){\n            letter_grades.push(\"\
    B-\")\n        }\n        else if (grade > 1.7){\n            letter_grades.push(\"\
    C+\")\n        }\n        else if (grade > 1.3){\n            letter_grades.push(\"\
    C\")\n        }\n        else if (grade > 1.0){\n            letter_grades.push(\"\
    C-\")\n        }\n        else if (grade > 0.7){\n            letter_grades.push(\"\
    D+\")\n        }\n        else if (grade > 0.0){\n            letter_grades.push(\"\
    D\")\n        }\n        else if (grade > -1.0){\n            letter_grades.push(\"\
    D-\")\n        }\n        else {\n            letter_grades.push(\"E\")\n    \
    \    }\n    }\n    return letter_grades\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpeb25zqkn.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpeb25zqkn.js:82:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letter_grades = [];\n    for (let i = 0; i < grades.length; i++){\n        if\
    \ (grades[i] > 4.0){\n            letter_grades.push(\"A+\");\n        }\n   \
    \     else if (grades[i] > 3.7){\n            letter_grades.push(\"A\");\n   \
    \     }\n        else if (grades[i] > 3.3){\n            letter_grades.push(\"\
    A-\");\n        }\n        else if (grades[i] > 3.0){\n            letter_grades.push(\"\
    B+\");\n        }\n        else if (grades[i] > 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grades[i] > 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grades[i] > 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grades[i] > 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grades[i] > 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grades[i] > 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grades[i] > 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grades[i] > 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else{\n            letter_grades.push(\"E\");\n   \
    \     }\n    }\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A', 'B', 'C-', 'C', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpyhkydgkd.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyhkydgkd.js:82:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A', 'B', 'C-', 'C', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter = [];\n    for(i=0; i<grades.length; i++){\n        if(grades[i] == 4.0){\n\
    \            letter.push(\"A+\");\n        }\n        else if(grades[i] >= 3.7){\n\
    \            letter.push(\"A\");\n        }\n        else if(grades[i] >= 3.3){\n\
    \            letter.push(\"A-\");\n        }\n        else if(grades[i] >= 3.0){\n\
    \            letter.push(\"B+\");\n        }\n        else if(grades[i] >= 2.7){\n\
    \            letter.push(\"B\");\n        }\n        else if(grades[i] >= 2.3){\n\
    \            letter.push(\"B-\");\n        }\n        else if(grades[i] >= 2.0){\n\
    \            letter.push(\"C+\");\n        }\n        else if(grades[i] >= 1.7){\n\
    \            letter.push(\"C\");\n        }\n        else if(grades[i] >= 1.3){\n\
    \            letter.push(\"C-\");\n        }\n        else if(grades[i] >= 1.0){\n\
    \            letter.push(\"D+\");\n        }\n        else if(grades[i] >= 0.7){\n\
    \            letter.push(\"D\");\n        }\n        else if(grades[i] >= 0.0){\n\
    \            letter.push(\"D-\");\n        }\n        else if(grades[i] == 0.0){\n\
    \            letter.push(\"E\");\n        }\n    }\n    return letter;\n}\nnumerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5])\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpl63hcw7h.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl63hcw7h.js:82:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ new_array = []\n    for (var i = 0; i < grades.length; i++){\n        var grade\
    \ = grades[i]\n        if (grade > 4.0){\n            new_array.push(\"A+\")\n\
    \        }\n        else if (grade > 3.7){\n            new_array.push(\"A\")\n\
    \        }\n        else if (grade > 3.3){\n            new_array.push(\"A-\"\
    )\n        }\n        else if (grade > 3.0){\n            new_array.push(\"B+\"\
    )\n        }\n        else if (grade > 2.7){\n            new_array.push(\"B\"\
    )\n        }\n        else if (grade > 2.3){\n            new_array.push(\"B-\"\
    )\n        }\n        else if (grade > 2.0){\n            new_array.push(\"C+\"\
    )\n        }\n        else if (grade > 1.7){\n            new_array.push(\"C\"\
    )\n        }\n        else if (grade > 1.3){\n            new_array.push(\"C-\"\
    )\n        }\n        else if (grade > 1.0){\n            new_array.push(\"D+\"\
    )\n        }\n        else if (grade > 0.7){\n            new_array.push(\"D\"\
    )\n        }\n        else if (grade > 0.0){\n            new_array.push(\"D-\"\
    )\n        }\n        else if (grade > 0.0){\n            new_array.push(\"E\"\
    )\n        }\n    }\n    return new_array\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A', 'B', 'C-', 'C', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpsjusuyot.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsjusuyot.js:82:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A', 'B', 'C-', 'C', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ numerical_grades = [];\n    for (let i = 0; i < grades.length; i++){\n     \
    \   if (grades[i] >= 4.0){\n            numerical_grades.push(\"A+\");\n     \
    \   } else if (grades[i] >= 3.7){\n            numerical_grades.push(\"A\");\n\
    \        } else if (grades[i] >= 3.3){\n            numerical_grades.push(\"A-\"\
    );\n        } else if (grades[i] >= 3.0){\n            numerical_grades.push(\"\
    B+\");\n        } else if (grades[i] >= 2.7){\n            numerical_grades.push(\"\
    B\");\n        } else if (grades[i] >= 2.3){\n            numerical_grades.push(\"\
    B-\");\n        } else if (grades[i] >= 2.0){\n            numerical_grades.push(\"\
    C+\");\n        } else if (grades[i] >= 1.7){\n            numerical_grades.push(\"\
    C\");\n        } else if (grades[i] >= 1.3){\n            numerical_grades.push(\"\
    C-\");\n        } else if (grades[i] >= 1.0){\n            numerical_grades.push(\"\
    D+\");\n        } else if (grades[i] >= 0.7){\n            numerical_grades.push(\"\
    D\");\n        } else if (grades[i] >= 0.0){\n            numerical_grades.push(\"\
    D-\");\n        } else if (grades[i] <= 0.0){\n            numerical_grades.push(\"\
    E\");\n        }\n    }\n    return numerical_grades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpcjegh4k7.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcjegh4k7.js:69:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ newGrades = grades.map(function(currentGrade){\n        if(currentGrade >= 4.0){\n\
    \            return \"A+\";\n        }\n        else if(currentGrade >= 3.7){\n\
    \            return \"A\";\n        }\n        else if(currentGrade >= 3.3){\n\
    \            return \"A-\";\n        }\n        else if(currentGrade >= 3.0){\n\
    \            return \"B+\";\n        }\n        else if(currentGrade >= 2.7){\n\
    \            return \"B\";\n        }\n        else if(currentGrade >= 2.3){\n\
    \            return \"B-\";\n        }\n        else if(currentGrade >= 2.0){\n\
    \            return \"C+\";\n        }\n        else if(currentGrade >= 1.7){\n\
    \            return \"C\";\n        }\n        else if(currentGrade >= 1.3){\n\
    \            return \"C-\";\n        }\n        else if(currentGrade >= 1.0){\n\
    \            return \"D+\";\n        }\n        else if(currentGrade >= 0.7){\n\
    \            return \"D\";\n        }\n        else if(currentGrade >= 0.0){\n\
    \            return \"D-\";\n        }\n        else{\n            return \"E\"\
    ;\n        }\n    });\n    return newGrades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpi7sa0d4x.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpi7sa0d4x.js:81:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ result = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ >= 4.0){\n            result.push(\"A+\");\n        }else if(grades[i] >= 3.7){\n\
    \            result.push(\"A\");\n        }else if(grades[i] >= 3.3){\n      \
    \      result.push(\"A-\");\n        }else if(grades[i] >= 3.0){\n           \
    \ result.push(\"B+\");\n        }else if(grades[i] >= 2.7){\n            result.push(\"\
    B\");\n        }else if(grades[i] >= 2.3){\n            result.push(\"B-\");\n\
    \        }else if(grades[i] >= 2.0){\n            result.push(\"C+\");\n     \
    \   }else if(grades[i] >= 1.7){\n            result.push(\"C\");\n        }else\
    \ if(grades[i] >= 1.3){\n            result.push(\"C-\");\n        }else if(grades[i]\
    \ >= 1.0){\n            result.push(\"D+\");\n        }else if(grades[i] >= 0.7){\n\
    \            result.push(\"D\");\n        }else if(grades[i] >= 0.0){\n      \
    \      result.push(\"D-\");\n        }else{\n            result.push(\"E\");\n\
    \        }\n    }\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmp7vmox1fb.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7vmox1fb.js:70:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = [];\n    for (var i = 0; i < grades.length; i++){\n        var\
    \ grade = grades[i];\n        var letter_grade = \"E\";\n        if (grade ==\
    \ 4.0){\n            letter_grade = \"A+\";\n        }\n        else if (grade\
    \ > 3.7){\n            letter_grade = \"A\";\n        }\n        else if (grade\
    \ > 3.3){\n            letter_grade = \"A-\";\n        }\n        else if (grade\
    \ > 3.0){\n            letter_grade = \"B+\";\n        }\n        else if (grade\
    \ > 2.7){\n            letter_grade = \"B\";\n        }\n        else if (grade\
    \ > 2.3){\n            letter_grade = \"B-\";\n        }\n        else if (grade\
    \ > 2.0){\n            letter_grade = \"C+\";\n        }\n        else if (grade\
    \ > 1.7){\n            letter_grade = \"C\";\n        }\n        else if (grade\
    \ > 1.3){\n            letter_grade = \"C-\";\n        }\n        else if (grade\
    \ > 1.0){\n            letter_grade = \"D+\";\n        }\n        else if (grade\
    \ > 0.7){\n            letter_grade = \"D\";\n        }\n        else if (grade\
    \ > 0.0){\n            letter_grade = \"D-\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ output = [];\n    for (var i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ == 4.0){\n            output.push(\"A+\");\n        }\n        else if (grades[i]\
    \ > 3.7){\n            output.push(\"A\");\n        }\n        else if (grades[i]\
    \ > 3.3){\n            output.push(\"A-\");\n        }\n        else if (grades[i]\
    \ > 3.0){\n            output.push(\"B+\");\n        }\n        else if (grades[i]\
    \ > 2.7){\n            output.push(\"B\");\n        }\n        else if (grades[i]\
    \ > 2.3){\n            output.push(\"B-\");\n        }\n        else if (grades[i]\
    \ > 2.0){\n            output.push(\"C+\");\n        }\n        else if (grades[i]\
    \ > 1.7){\n            output.push(\"C\");\n        }\n        else if (grades[i]\
    \ > 1.3){\n            output.push(\"C-\");\n        }\n        else if (grades[i]\
    \ > 1.0){\n            output.push(\"D+\");\n        }\n        else if (grades[i]\
    \ > 0.7){\n            output.push(\"D\");\n        }\n        else if (grades[i]\
    \ > 0.0){\n            output.push(\"D-\");\n        }\n        else if (grades[i]\
    \ == 0.0){\n            output.push(\"E\");\n        }\n    }\n    return output;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    return\
    \ grades.map(numerical_grade_letter);\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp93j0dmia.js:24\n    return grades.map(numerical_grade_letter);\n\
    \                      ^\n\nReferenceError: numerical_grade_letter is not defined\n\
    \    at numerical_letter_grade (/tmp/tmp93j0dmia.js:24:23)\n    at test (/tmp/tmp93j0dmia.js:31:20)\n\
    \    at Object.<anonymous> (/tmp/tmp93j0dmia.js:39:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tlet current_grade;\n\
    \tlet new_grades = [];\n\tfor(i=0; i<grades.length; i++){\n\t\tcurrent_grade =\
    \ grades[i];\n\t\tif(current_grade >= 4.0){\n\t\t\tnew_grades.push(\"A+\");\n\t\
    \t}\n\t\telse if(current_grade >= 3.7){\n\t\t\tnew_grades.push(\"A\");\n\t\t}\n\
    \t\telse if(current_grade >= 3.3){\n\t\t\tnew_grades.push(\"A-\");\n\t\t}\n\t\t\
    else if(current_grade >= 3.0){\n\t\t\tnew_grades.push(\"B+\");\n\t\t}\n\t\telse\
    \ if(current_grade >= 2.7){\n\t\t\tnew_grades.push(\"B\");\n\t\t}\n\t\telse if(current_grade\
    \ >= 2.3){\n\t\t\tnew_grades.push(\"B-\");\n\t\t}\n\t\telse if(current_grade >=\
    \ 2.0){\n\t\t\tnew_grades.push(\"C+\");\n\t\t}\n\t\telse if(current_grade >= 1.7){\n\
    \t\t\tnew_grades.push(\"C\");\n\t\t}\n\t\telse if(current_grade >= 1.3){\n\t\t\
    \tnew_grades.push(\"C-\");\n\t\t}\n\t\telse if(current_grade >= 1.0){\n\t\t\t\
    new_grades.push(\"D+\");\n\t\t}\n\t\telse if(current_grade >= 0.7){\n\t\t\tnew_grades.push(\"\
    D\");\n\t\t}\n\t\telse if(current_grade >= 0.0){\n\t\t\tnew_grades.push(\"D-\"\
    );\n\t\t}\n\t\telse if(current_grade == 0.0){\n\t\t\tnew_grades.push(\"E\");\n\
    \t\t}\n\t}\n\treturn new_grades;\n}\nlet numerical_grades = [3.2, 2.8, 2.6, 2.3,\
    \ 2.0, 1.8, 1.6, 1.3, 1.0, 0.8, 0.6, 0.3, 0.0];\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmpcaq6meh3.js:77:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcaq6meh3.js:85:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    const\
    \ chars = grades.map(num => {\n        if (num == 4.0) return \"A+\";\n      \
    \  if (num >= 3.7) return \"A\";\n        if (num >= 3.3) return \"A-\";\n   \
    \     if (num >= 3.0) return \"B+\";\n        if (num >= 2.7) return \"B\";\n\
    \        if (num >= 2.3) return \"B-\";\n        if (num >= 2.0) return \"C+\"\
    ;\n        if (num >= 1.7) return \"C\";\n        if (num >= 1.3) return \"C-\"\
    ;\n        if (num >= 1.0) return \"D+\";\n        if (num >= 0.7) return \"D\"\
    ;\n        if (num > 0.0) return \"D-\";\n        if (num == 0.0) return \"E\"\
    ;\n    });\n    return chars;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "/home/l.phipps-costin/polyglot-codegen-evaluation/node_modules/assert/build/assert.js:84\n\
    \  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected\
    \ values to be loosely deep-equal:\n\n[ 'A+', 'B+', 'C', 'C+', 'A-' ]\n\nshould\
    \ equal\n\n[ 'A+', 'B', 'C-', 'C', 'A-' ]\n    at test (/tmp/tmphl2gra8a.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmphl2gra8a.js:55:1)\n    at Module._compile\
    \ (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\n\
    \    at internal/main/run_main_module.js:17:47 {\n  generatedMessage: true,\n\
    \  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+', 'C', 'C+', 'A-' ],\n  expected:\
    \ [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n"
  stdout: ''
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ num_to_letters = [\"D-\", \"D\", \"D+\", \"C-\", \"C\", \"C+\", \"B-\", \"B\"\
    , \"B+\", \"A-\", \"A\", \"A+\"];\n    var min_to_max = [0.0, 0.7, 1.0, 1.3, 1.7,\
    \ 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0];\n    var result = [];\n    for(var i = 0;\
    \ i < grades.length; i++){\n        for(var j = 0; j < min_to_max.length; j++){\n\
    \            if(grades[i] < min_to_max[j]){\n                result.push(num_to_letters[j-1]);\n\
    \                break;\n            }\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'B+',\n \
    \ 'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmppjfw4pd7.js:42:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppjfw4pd7.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'B+', 'C',\
    \ 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ arr = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ >= 4.0){\n            arr.push(\"A+\");\n        }\n        else if(grades[i]\
    \ >= 3.7){\n            arr.push(\"A\");\n        }\n        else if(grades[i]\
    \ >= 3.3){\n            arr.push(\"A-\");\n        }\n        else if(grades[i]\
    \ >= 3.0){\n            arr.push(\"B+\");\n        }\n        else if(grades[i]\
    \ >= 2.7){\n            arr.push(\"B\");\n        }\n        else if(grades[i]\
    \ >= 2.3){\n            arr.push(\"B-\");\n        }\n        else if(grades[i]\
    \ >= 2.0){\n            arr.push(\"C+\");\n        }\n        else if(grades[i]\
    \ >= 1.7){\n            arr.push(\"C\");\n        }\n        else if(grades[i]\
    \ >= 1.3){\n            arr.push(\"C-\");\n        }\n        else if(grades[i]\
    \ >= 1.0){\n            arr.push(\"D+\");\n        }\n        else if(grades[i]\
    \ >= 0.7){\n            arr.push(\"D\");\n        }\n        else if(grades[i]\
    \ >= 0.0){\n            arr.push(\"D-\");\n        }\n        else{\n        \
    \    arr.push(\"E\");\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp2p0qys4b.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2p0qys4b.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  \n  let\
    \ letter_grades = []\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i]\
    \ >= 4.0) {\n      letter_grades.push(\"A+\")\n    } else if (grades[i] >= 3.7\
    \ && grades[i] < 4.0) {\n      letter_grades.push(\"A\")\n    } else if (grades[i]\
    \ >= 3.3 && grades[i] < 3.7) {\n      letter_grades.push(\"A-\")\n    } else if\
    \ (grades[i] >= 3.0 && grades[i] < 3.3) {\n      letter_grades.push(\"B+\")\n\
    \    } else if (grades[i] >= 2.7 && grades[i] < 3.0) {\n      letter_grades.push(\"\
    B\")\n    } else if (grades[i] >= 2.3 && grades[i] < 2.7) {\n      letter_grades.push(\"\
    B-\")\n    } else if (grades[i] >= 2.0 && grades[i] < 2.3) {\n      letter_grades.push(\"\
    C+\")\n    } else if (grades[i] >= 1.7 && grades[i] < 2.0) {\n      letter_grades.push(\"\
    C\")\n    } else if (grades[i] >= 1.3 && grades[i] < 1.7) {\n      letter_grades.push(\"\
    C-\")\n    } else if (grades[i] >= 1.0 && grades[i] < 1.3) {\n      letter_grades.push(\"\
    D+\")\n    } else if (grades[i] >= 0.7 && grades[i] < 1.0) {\n      letter_grades.push(\"\
    D\")\n    } else if (grades[i] >= 0.0 && grades[i] < 0.7) {\n      letter_grades.push(\"\
    D-\")\n    } else if (grades[i] < 0.0) {\n      letter_grades.push(\"E\")\n  \
    \  }\n  }\n  return letter_grades\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp4x57kg3o.js:63:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4x57kg3o.js:71:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    for(var\
    \ i = 0; i < grades.length; i++){\n        switch(true){\n            case (grades[i]\
    \ >= 4.0):\n                grades[i] = \"A+\";\n                break;\n    \
    \        case (grades[i] > 3.7):\n                grades[i] = \"A\";\n       \
    \         break;\n            case (grades[i] > 3.3):\n                grades[i]\
    \ = \"A-\";\n                break;\n            case (grades[i] > 3.0):\n   \
    \             grades[i] = \"B+\";\n                break;\n            case (grades[i]\
    \ > 2.7):\n                grades[i] = \"B\";\n                break;\n      \
    \      case (grades[i] > 2.3):\n                grades[i] = \"B-\";\n        \
    \        break;\n            case (grades[i] > 2.0):\n                grades[i]\
    \ = \"C+\";\n                break;\n            case (grades[i] > 1.7):\n   \
    \             grades[i] = \"C\";\n                break;\n            case (grades[i]\
    \ > 1.3):\n                grades[i] = \"C-\";\n                break;\n     \
    \       case (grades[i] > 1.0):\n                grades[i] = \"D+\";\n       \
    \         break;\n            case (grades[i] > 0.7):\n                grades[i]\
    \ = \"D\";\n                break;\n            case (grades[i] > 0.0):\n    \
    \            grades[i] = \"D-\";\n                break;\n            case (grades[i]\
    \ == 0.0):\n                grades[i] = \"E\";\n                break;\n     \
    \   }\n    }\n    return grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar letter_grades\
    \ = [];\n\tfor (var i = 0; i < grades.length; i++){\n\t\tvar grade = grades[i];\n\
    \t\tif (grade == 4.0){\n\t\t\tletter_grades.push(\"A+\");\n\t\t}\n\t\telse if\
    \ (grade >= 3.7){\n\t\t\tletter_grades.push(\"A\");\n\t\t}\n\t\telse if (grade\
    \ >= 3.3){\n\t\t\tletter_grades.push(\"A-\");\n\t\t}\n\t\telse if (grade >= 3.0){\n\
    \t\t\tletter_grades.push(\"B+\");\n\t\t}\n\t\telse if (grade >= 2.7){\n\t\t\t\
    letter_grades.push(\"B\");\n\t\t}\n\t\telse if (grade >= 2.3){\n\t\t\tletter_grades.push(\"\
    B-\");\n\t\t}\n\t\telse if (grade >= 2.0){\n\t\t\tletter_grades.push(\"C+\");\n\
    \t\t}\n\t\telse if (grade >= 1.7){\n\t\t\tletter_grades.push(\"C\");\n\t\t}\n\t\
    \telse if (grade >= 1.3){\n\t\t\tletter_grades.push(\"C-\");\n\t\t}\n\t\telse\
    \ if (grade >= 1.0){\n\t\t\tletter_grades.push(\"D+\");\n\t\t}\n\t\telse if (grade\
    \ >= 0.7){\n\t\t\tletter_grades.push(\"D\");\n\t\t}\n\t\telse if (grade >= 0.0){\n\
    \t\t\tletter_grades.push(\"D-\");\n\t\t}\n\t\telse{\n\t\t\tletter_grades.push(\"\
    E\");\n\t\t}\n\t}\n\treturn letter_grades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9xs9jdo0.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9xs9jdo0.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    //\
    \ Create an empty array to store the letter grades in.\n    var letters = [];\n\
    \    // Create a for loop to loop through the grades.\n    for(var i = 0; i <\
    \ grades.length; i++){\n        // If the grade is greater than or equal to 4.0.\n\
    \        if(grades[i] >= 4.0){\n            // Push an \"A+\" onto the letters\
    \ array.\n            letters.push(\"A+\");\n        }\n        // If the grade\
    \ is greater than or equal to 3.7.\n        else if(grades[i] >= 3.7){\n     \
    \       // Push an \"A\" onto the letters array.\n            letters.push(\"\
    A\");\n        }\n        // If the grade is greater than or equal to 3.3.\n \
    \       else if(grades[i] >= 3.3){\n            // Push an \"A-\" onto the letters\
    \ array.\n            letters.push(\"A-\");\n        }\n        // If the grade\
    \ is greater than or equal to 3.0.\n        else if(grades[i] >= 3.0){\n     \
    \       // Push an \"B+\" onto the letters array.\n            letters.push(\"\
    B+\");\n        }\n        // If the grade is greater than or equal to 2.7.\n\
    \        else if(grades[i] >= 2.7){\n            // Push an \"B\" onto the letters\
    \ array.\n            letters.push(\"B\");\n        }\n        // If the grade\
    \ is greater than or equal to 2.3.\n        else if(grades[i] >= 2.3){\n     \
    \       // Push an \"B-\" onto the letters array.\n            letters.push(\"\
    B-\");\n        }\n        // If the grade is greater than or equal to 2.0.\n\
    \        else if(grades[i] >= 2.0){\n            // Push an \"C+\" onto the letters\
    \ array.\n            letters.push(\"C+\");\n        }\n        // If the grade\
    \ is greater than or equal to 1.7.\n        else if(grades[i] >= 1.7){\n     \
    \       // Push an \"C\" onto the letters array.\n            letters.push(\"\
    C\");\n        }\n        // If the grade is greater than or equal to 1.3.\n \
    \       else if(grades\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpoi9kxs84.js:70\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letterGrades = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ >= 4.0){\n            letterGrades.push(\"A+\");\n        }else if(grades[i]\
    \ >= 3.7){\n            letterGrades.push(\"A\");\n        }else if(grades[i]\
    \ >= 3.3){\n            letterGrades.push(\"A-\");\n        }else if(grades[i]\
    \ >= 3.0){\n            letterGrades.push(\"B+\");\n        }else if(grades[i]\
    \ >= 2.7){\n            letterGrades.push(\"B\");\n        }else if(grades[i]\
    \ >= 2.3){\n            letterGrades.push(\"B-\");\n        }else if(grades[i]\
    \ >= 2.0){\n            letterGrades.push(\"C+\");\n        }else if(grades[i]\
    \ >= 1.7){\n            letterGrades.push(\"C\");\n        }else if(grades[i]\
    \ >= 1.3){\n            letterGrades.push(\"C-\");\n        }else if(grades[i]\
    \ >= 1.0){\n            letterGrades.push(\"D+\");\n        }else if(grades[i]\
    \ >= 0.7){\n            letterGrades.push(\"D\");\n        }else if(grades[i]\
    \ >= 0.0){\n            letterGrades.push(\"D-\");\n        }else{\n         \
    \   letterGrades.push(\"E\");\n        }\n    }\n    return letterGrades;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp0umicmoy.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0umicmoy.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  for(var\
    \ i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      grades[i]\
    \ = \"A+\";\n    }\n    else if(grades[i] >= 3.7){\n      grades[i] = \"A\";\n\
    \    }\n    else if(grades[i] >= 3.3){\n      grades[i] = \"A-\";\n    }\n   \
    \ else if(grades[i] >= 3.0){\n      grades[i] = \"B+\";\n    }\n    else if(grades[i]\
    \ >= 2.7){\n      grades[i] = \"B\";\n    }\n    else if(grades[i] >= 2.3){\n\
    \      grades[i] = \"B-\";\n    }\n    else if(grades[i] >= 2.0){\n      grades[i]\
    \ = \"C+\";\n    }\n    else if(grades[i] >= 1.7){\n      grades[i] = \"C\";\n\
    \    }\n    else if(grades[i] >= 1.3){\n      grades[i] = \"C-\";\n    }\n   \
    \ else if(grades[i] >= 1.0){\n      grades[i] = \"D+\";\n    }\n    else if(grades[i]\
    \ >= 0.7){\n      grades[i] = \"D\";\n    }\n    else if(grades[i] >= 0.0){\n\
    \      grades[i] = \"D-\";\n    }\n    else{\n      grades[i] = \"E\";\n    }\n\
    \  }\n  return grades;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp38tozlr3.js:72:10)\n\
    \    at Object.<anonymous> (/tmp/tmp38tozlr3.js:80:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var letter_grades\
    \ = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\"\
    , \"D\", \"D-\", \"E\"];\n  var numerical_grades = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3,\
    \ 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n  var output = [];\n  for (var i = 0; i\
    \ < grades.length; i++){\n    for (var j = 0; j < numerical_grades.length; j++){\n\
    \      if (grades[i] < numerical_grades[j]){\n        output.push(letter_grades[j]);\n\
    \        break;\n      }\n    }\n  }\n  return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'A+',\n  'A+',\n  'A+'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmppezh9fue.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmppezh9fue.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'A+',\
    \ 'A+', 'A+' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\t// let\
    \ a = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'];\n\
    \t// return grades.map(function(g){\n\t// \tif(g < 3.7){\n\t// \t\tlet index =\
    \ Math.floor(g/3*4);\n\t// \t\treturn a[index];\n\t// \t}\n\t// \telse{\n\t//\
    \ \t\treturn a[1];\n\t// \t}\n\t// });\n\treturn grades.map(function(g){\n\t\t\
    if(g < 0.7){\n\t\t\treturn 'E';\n\t\t}\n\t\telse if(g < 1.0){\n\t\t\treturn 'D-';\n\
    \t\t}\n\t\telse if(g < 1.3){\n\t\t\treturn 'D';\n\t\t}\n\t\telse if(g < 1.7){\n\
    \t\t\treturn 'D+';\n\t\t}\n\t\telse if(g < 2.0){\n\t\t\treturn 'C-';\n\t\t}\n\t\
    \telse if(g < 2.3){\n\t\t\treturn 'C';\n\t\t}\n\t\telse if(g < 2.7){\n\t\t\treturn\
    \ 'C+';\n\t\t}\n\t\telse if(g < 3.0){\n\t\t\treturn 'B-';\n\t\t}\n\t\telse if(g\
    \ < 3.3){\n\t\t\treturn 'B';\n\t\t}\n\t\telse if(g < 3.7){\n\t\t\treturn 'B+';\n\
    \t\t}\n\t\telse if(g < 4.0){\n\t\t\treturn 'A-';\n\t\t}\n\t\telse{\n\t\t\treturn\
    \ 'A+';\n\t\t}\n\t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B',\n  'C-',\n  'C',\n  'B+'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpe_8chaun.js:79:10)\n\
    \    at Object.<anonymous> (/tmp/tmpe_8chaun.js:87:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B',\
    \ 'C-', 'C', 'B+' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = []\n    for (var i = 0; i < grades.length; i++){\n        if\
    \ (grades[i] == 4.0){\n            letter_grades.push(\"A+\")\n        }\n   \
    \     else if (grades[i] > 3.7){\n            letter_grades.push(\"A\")\n    \
    \    }\n        else if (grades[i] > 3.3){\n            letter_grades.push(\"\
    A-\")\n        }\n        else if (grades[i] > 3.0){\n            letter_grades.push(\"\
    B+\")\n        }\n        else if (grades[i] > 2.7){\n            letter_grades.push(\"\
    B\")\n        }\n        else if (grades[i] > 2.3){\n            letter_grades.push(\"\
    B-\")\n        }\n        else if (grades[i] > 2.0){\n            letter_grades.push(\"\
    C+\")\n        }\n        else if (grades[i] > 1.7){\n            letter_grades.push(\"\
    C\")\n        }\n        else if (grades[i] > 1.3){\n            letter_grades.push(\"\
    C-\")\n        }\n        else if (grades[i] > 1.0){\n            letter_grades.push(\"\
    D+\")\n        }\n        else if (grades[i] > 0.7){\n            letter_grades.push(\"\
    D\")\n        }\n        else if (grades[i] > 0.0){\n            letter_grades.push(\"\
    D-\")\n        }\n        else if (grades[i] == 0.0){\n            letter_grades.push(\"\
    E\")\n        }\n    }\n    return letter_grades\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ result = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ === 4.0){\n            result.push(\"A+\");\n        }else if(grades[i] > 3.7){\n\
    \            result.push(\"A\");\n        }else if(grades[i] > 3.3){\n       \
    \     result.push(\"A-\");\n        }else if(grades[i] > 3.0){\n            result.push(\"\
    B+\");\n        }else if(grades[i] > 2.7){\n            result.push(\"B\");\n\
    \        }else if(grades[i] > 2.3){\n            result.push(\"B-\");\n      \
    \  }else if(grades[i] > 2.0){\n            result.push(\"C+\");\n        }else\
    \ if(grades[i] > 1.7){\n            result.push(\"C\");\n        }else if(grades[i]\
    \ > 1.3){\n            result.push(\"C-\");\n        }else if(grades[i] > 1.0){\n\
    \            result.push(\"D+\");\n        }else if(grades[i] > 0.7){\n      \
    \      result.push(\"D\");\n        }else if(grades[i] >= 0.0){\n            result.push(\"\
    D-\");\n        }else{\n            result.push(\"E\");\n        }\n    }\n  \
    \  return result;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'D-'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'E'\n]\n    at test (/tmp/tmpf7m80q4w.js:64:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf7m80q4w.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'D-' ],\n\
    \  expected: [ 'E' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ numerical_grades = [];\n    for (let i = 0; i < grades.length; i++){\n     \
    \   if (grades[i] >= 4.0){\n            numerical_grades.push(\"A+\");\n     \
    \   }\n        else if (grades[i] > 3.7){\n            numerical_grades.push(\"\
    A\");\n        }\n        else if (grades[i] > 3.3){\n            numerical_grades.push(\"\
    A-\");\n        }\n        else if (grades[i] > 3.0){\n            numerical_grades.push(\"\
    B+\");\n        }\n        else if (grades[i] > 2.7){\n            numerical_grades.push(\"\
    B\");\n        }\n        else if (grades[i] > 2.3){\n            numerical_grades.push(\"\
    B-\");\n        }\n        else if (grades[i] > 2.0){\n            numerical_grades.push(\"\
    C+\");\n        }\n        else if (grades[i] > 1.7){\n            numerical_grades.push(\"\
    C\");\n        }\n        else if (grades[i] > 1.3){\n            numerical_grades.push(\"\
    C-\");\n        }\n        else if (grades[i] > 1.0){\n            numerical_grades.push(\"\
    D+\");\n        }\n        else if (grades[i] > 0.7){\n            numerical_grades.push(\"\
    D\");\n        }\n        else if (grades[i] > 0.0){\n            numerical_grades.push(\"\
    D-\");\n        }\n        else{\n            numerical_grades.push(\"E\");\n\
    \        }\n    }\n    return numerical_grades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar grades\
    \ = [4.0, 3, 1.7, 2, 3.5];\n\tfor (var i = 0; i < grades.length; i++) {\n\t\t\
    if (grades[i] > 4.0) {\n\t\t\tconsole.log(\"A+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 3.7) {\n\t\t\tconsole.log(\"A\");\n\t\t}\n\t\telse if (grades[i] > 3.3) {\n\
    \t\t\tconsole.log(\"A-\");\n\t\t}\n\t\telse if (grades[i] > 3.0) {\n\t\t\tconsole.log(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] > 2.7) {\n\t\t\tconsole.log(\"B\");\n\t\t\
    }\n\t\telse if (grades[i] > 2.3) {\n\t\t\tconsole.log(\"B-\");\n\t\t}\n\t\telse\
    \ if (grades[i] > 2.0) {\n\t\t\tconsole.log(\"C+\");\n\t\t}\n\t\telse if (grades[i]\
    \ > 1.7) {\n\t\t\tconsole.log(\"C\");\n\t\t}\n\t\telse if (grades[i] > 1.3) {\n\
    \t\t\tconsole.log(\"C-\");\n\t\t}\n\t\telse if (grades[i] > 1.0) {\n\t\t\tconsole.log(\"\
    D+\");\n\t\t}\n\t\telse if (grades[i] > 0.7) {\n\t\t\tconsole.log(\"D\");\n\t\t\
    }\n\t\telse if (grades[i] > 0.0) {\n\t\t\tconsole.log(\"D-\");\n\t\t}\n\t\telse\
    \ if (grades[i] == 0.0) {\n\t\t\tconsole.log(\"E\");\n\t\t}\n\t}\n}\nnumerical_letter_grade();\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n\
    \    at test (/tmp/tmp725su70g.js:74:10)\n    at Object.<anonymous> (/tmp/tmp725su70g.js:82:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: 'A

    B

    C-

    C

    A-

    A

    B

    C-

    C

    A-

    '
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var result\
    \ = [];\n  for (var i = 0; i < grades.length; i++){\n    if (grades[i] >= 4.0){\n\
    \      result.push(\"A+\");\n    } else if (grades[i] >= 3.7){\n      result.push(\"\
    A\");\n    } else if (grades[i] >= 3.3){\n      result.push(\"A-\");\n    } else\
    \ if (grades[i] >= 3.0){\n      result.push(\"B+\");\n    } else if (grades[i]\
    \ >= 2.7){\n      result.push(\"B\");\n    } else if (grades[i] >= 2.3){\n   \
    \   result.push(\"B-\");\n    } else if (grades[i] >= 2.0){\n      result.push(\"\
    C+\");\n    } else if (grades[i] >= 1.7){\n      result.push(\"C\");\n    } else\
    \ if (grades[i] >= 1.3){\n      result.push(\"C-\");\n    } else if (grades[i]\
    \ >= 1.0){\n      result.push(\"D+\");\n    } else if (grades[i] >= 0.7){\n  \
    \    result.push(\"D\");\n    } else if (grades[i] >= 0.0){\n      result.push(\"\
    D-\");\n    } else {\n      result.push(\"E\");\n    }\n  }\n  return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp93534tcv.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmp93534tcv.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tlet letter_grades\
    \ = [];\n\tfor (let i = 0; i < grades.length; i++){\n\t\tif (grades[i] < 0.7){\n\
    \t\t\tletter_grades.push(\"D-\");\n\t\t} else if (grades[i] < 1.0){\n\t\t\tletter_grades.push(\"\
    D+\");\n\t\t} else if (grades[i] < 1.3){\n\t\t\tletter_grades.push(\"C-\");\n\t\
    \t} else if (grades[i] < 1.7){\n\t\t\tletter_grades.push(\"C\");\n\t\t} else if\
    \ (grades[i] < 2.0){\n\t\t\tletter_grades.push(\"C+\");\n\t\t} else if (grades[i]\
    \ < 2.3){\n\t\t\tletter_grades.push(\"B-\");\n\t\t} else if (grades[i] < 2.7){\n\
    \t\t\tletter_grades.push(\"B\");\n\t\t} else if (grades[i] < 3.0){\n\t\t\tletter_grades.push(\"\
    B+\");\n\t\t} else if (grades[i] < 3.3){\n\t\t\tletter_grades.push(\"A-\");\n\t\
    \t} else if (grades[i] < 3.7){\n\t\t\tletter_grades.push(\"A\");\n\t\t} else if\
    \ (grades[i] <= 4.0){\n\t\t\tletter_grades.push(\"A+\");\n\t\t} else {\n\t\t\t\
    letter_grades.push(\"E\");\n\t\t}\n\t}\n\treturn letter_grades;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'A-',\n  'C+',\n  'B-',\n  'A'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpgbfko8n5.js:59:10)\n\
    \    at Object.<anonymous> (/tmp/tmpgbfko8n5.js:67:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'A-',\
    \ 'C+', 'B-', 'A' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar new_grades\
    \ = [];\n\tfor (var i = 0; i < grades.length; i++) {\n\t\tif (grades[i] < 0.0)\
    \ {\n\t\t\tnew_grades.push(\"E\");\n\t\t}\n\t\telse if (grades[i] < 0.7) {\n\t\
    \t\tnew_grades.push(\"D-\");\n\t\t}\n\t\telse if (grades[i] < 1.0) {\n\t\t\tnew_grades.push(\"\
    D\");\n\t\t}\n\t\telse if (grades[i] < 1.3) {\n\t\t\tnew_grades.push(\"D+\");\n\
    \t\t}\n\t\telse if (grades[i] < 1.7) {\n\t\t\tnew_grades.push(\"C-\");\n\t\t}\n\
    \t\telse if (grades[i] < 2.0) {\n\t\t\tnew_grades.push(\"C\");\n\t\t}\n\t\telse\
    \ if (grades[i] < 2.3) {\n\t\t\tnew_grades.push(\"C+\");\n\t\t}\n\t\telse if (grades[i]\
    \ < 2.7) {\n\t\t\tnew_grades.push(\"B-\");\n\t\t}\n\t\telse if (grades[i] < 3.0)\
    \ {\n\t\t\tnew_grades.push(\"B\");\n\t\t}\n\t\telse if (grades[i] < 3.3) {\n\t\
    \t\tnew_grades.push(\"B+\");\n\t\t}\n\t\telse if (grades[i] < 3.7) {\n\t\t\tnew_grades.push(\"\
    A-\");\n\t\t}\n\t\telse if (grades[i] < 4.0) {\n\t\t\tnew_grades.push(\"A\");\n\
    \t\t}\n\t\telse if (grades[i] >= 4.0) {\n\t\t\tnew_grades.push(\"A+\");\n\t\t\
    }\n\t}\n\treturn new_grades;\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpucusii42.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpucusii42.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar result\
    \ = [];\n\tvar grade = 0;\n\tvar letter_grade = '';\n\tvar i = 0;\n\twhile(i <\
    \ grades.length){\n\t\tgrade = grades[i];\n\t\tif(grade >= 4.0){\n\t\t\tletter_grade\
    \ = 'A+';\n\t\t}\n\t\telse if(grade >= 3.7){\n\t\t\tletter_grade = 'A';\n\t\t\
    }\n\t\telse if(grade >= 3.3){\n\t\t\tletter_grade = 'A-';\n\t\t}\n\t\telse if(grade\
    \ >= 3.0){\n\t\t\tletter_grade = 'B+';\n\t\t}\n\t\telse if(grade >= 2.7){\n\t\t\
    \tletter_grade = 'B';\n\t\t}\n\t\telse if(grade >= 2.3){\n\t\t\tletter_grade =\
    \ 'B-';\n\t\t}\n\t\telse if(grade >= 2.0){\n\t\t\tletter_grade = 'C+';\n\t\t}\n\
    \t\telse if(grade >= 1.7){\n\t\t\tletter_grade = 'C';\n\t\t}\n\t\telse if(grade\
    \ >= 1.3){\n\t\t\tletter_grade = 'C-';\n\t\t}\n\t\telse if(grade >= 1.0){\n\t\t\
    \tletter_grade = 'D+';\n\t\t}\n\t\telse if(grade >= 0.7){\n\t\t\tletter_grade\
    \ = 'D';\n\t\t}\n\t\telse if(grade >= 0.0){\n\t\t\tletter_grade = 'D-';\n\t\t\
    }\n\t\telse{\n\t\t\tletter_grade = 'E';\n\t\t}\n\t\tresult.push(letter_grade);\n\
    \t\ti++;\n\t}\n\treturn result;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpru4mmo7z.js:79:10)\n\
    \    at Object.<anonymous> (/tmp/tmpru4mmo7z.js:87:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar grade_lst\
    \ = ['E', 'D-', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'];\n\
    \tvar grade_map = {};\n\tvar grade_range = [0.0, 0.7, 1.0, 1.3, 1.7, 2.0, 2.3,\
    \ 2.7, 3.0, 3.3, 3.7, 4.0];\n\tfor(var i = 0; i < grade_range.length; i++){\n\t\
    \tif(i == grade_range.length - 1){\n\t\t\tgrade_map[grade_range[i]] = grade_lst[i];\n\
    \t\t}else{\n\t\t\tgrade_map[grade_range[i]] = grade_lst[i + 1];\n\t\t}\n\t}\n\t\
    var result = [];\n\tfor(var i = 0; i < grades.length; i++){\n\t\tvar grade = grades[i];\n\
    \t\tfor(var j = 0; j < grade_range.length; j++){\n\t\t\tif(grade < grade_range[j]){\n\
    \t\t\t\tresult.push(grade_map[grade_range[j]]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A-',\n \
    \ 'C+',\n  'B-',\n  'A'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpm7m8wlte.js:51:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpm7m8wlte.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A-', 'C+',\
    \ 'B-', 'A' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    grades.map(x\
    \ => \n        if (x >= 3.7){\n            x = \"A\";\n        }\n        else\
    \ if (x >= 3.3){\n            x = \"A-\";\n        }\n        else if (x >= 3.0){\n\
    \            x = \"B+\";\n        }\n        else if (x >= 2.7){\n           \
    \ x = \"B\";\n        }\n        else if (x >= 2.3){\n            x = \"B-\";\n\
    \        }\n        else if (x >= 2.0){\n            x = \"C+\";\n        }\n\
    \        else if (x >= 1.7){\n            x = \"C\";\n        }\n        else\
    \ if (x >= 1.3){\n            x = \"C-\";\n        }\n        else if (x >= 1.0){\n\
    \            x = \"D+\";\n        }\n        else if (x >= 0.7){\n           \
    \ x = \"D\";\n        }\n        else if (x >= 0.0){\n            x = \"D-\";\n\
    \        }\n        else {\n            x = \"E\";\n        }\n    );\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpug3e6lj3.js:25\n        if (x >= 3.7){\n        ^^\n\nSyntaxError:\
    \ Unexpected token 'if'\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var results\
    \ = [];\n  for (var i = 0; i < grades.length; i++){\n    if (grades[i] >= 4.0){\n\
    \      results.push(\"A+\");\n    } else if (grades[i] >= 3.7){\n      results.push(\"\
    A\");\n    } else if (grades[i] >= 3.3){\n      results.push(\"A-\");\n    } else\
    \ if (grades[i] >= 3.0){\n      results.push(\"B+\");\n    } else if (grades[i]\
    \ >= 2.7){\n      results.push(\"B\");\n    } else if (grades[i] >= 2.3){\n  \
    \    results.push(\"B-\");\n    } else if (grades[i] >= 2.0){\n      results.push(\"\
    C+\");\n    } else if (grades[i] >= 1.7){\n      results.push(\"C\");\n    } else\
    \ if (grades[i] >= 1.3){\n      results.push(\"C-\");\n    } else if (grades[i]\
    \ >= 1.0){\n      results.push(\"D+\");\n    } else if (grades[i] >= 0.7){\n \
    \     results.push(\"D\");\n    } else if (grades[i] >= 0.0){\n      results.push(\"\
    D-\");\n    } else {\n      results.push(\"E\");\n    }\n  }\n  return results;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpswwybf5g.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpswwybf5g.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ new_grades = []\n    for (i=0; i<grades.length; i++){\n        if (grades[i]\
    \ >= 4.0){\n            new_grades.push(\"A+\")\n        } else if (grades[i]\
    \ >= 3.7){\n            new_grades.push(\"A\")\n        } else if (grades[i] >=\
    \ 3.3){\n            new_grades.push(\"A-\")\n        } else if (grades[i] >=\
    \ 3.0){\n            new_grades.push(\"B+\")\n        } else if (grades[i] >=\
    \ 2.7){\n            new_grades.push(\"B\")\n        } else if (grades[i] >= 2.3){\n\
    \            new_grades.push(\"B-\")\n        } else if (grades[i] >= 2.0){\n\
    \            new_grades.push(\"C+\")\n        } else if (grades[i] >= 1.7){\n\
    \            new_grades.push(\"C\")\n        } else if (grades[i] >= 1.3){\n \
    \           new_grades.push(\"C-\")\n        } else if (grades[i] >= 1.0){\n \
    \           new_grades.push(\"D+\")\n        } else if (grades[i] >= 0.7){\n \
    \           new_grades.push(\"D\")\n        } else if (grades[i] >= 0.0){\n  \
    \          new_grades.push(\"D-\")\n        } else {\n            new_grades.push(\"\
    E\")\n        }\n    }\n    return new_grades\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp47ti9e1z.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmp47ti9e1z.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letterGrade = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\",\
    \ \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n    let gpas = [4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n    let newGrade = [];\n    for(let\
    \ i = 0; i < grades.length; i++){\n        if(grades[i] >= gpas[0]){\n       \
    \     newGrade.push(letterGrade[0]);\n        }else if(grades[i] >= gpas[1]){\n\
    \            newGrade.push(letterGrade[1]);\n        }else if(grades[i] >= gpas[2]){\n\
    \            newGrade.push(letterGrade[2]);\n        }else if(grades[i] >= gpas[3]){\n\
    \            newGrade.push(letterGrade[3]);\n        }else if(grades[i] >= gpas[4]){\n\
    \            newGrade.push(letterGrade[4]);\n        }else if(grades[i] >= gpas[5]){\n\
    \            newGrade.push(letterGrade[5]);\n        }else if(grades[i] >= gpas[6]){\n\
    \            newGrade.push(letterGrade[6]);\n        }else if(grades[i] >= gpas[7]){\n\
    \            newGrade.push(letterGrade[7]);\n        }else if(grades[i] >= gpas[8]){\n\
    \            newGrade.push(letterGrade[8]);\n        }else if(grades[i] >= gpas[9]){\n\
    \            newGrade.push(letterGrade[9]);\n        }else if(grades[i] >= gpas[10]){\n\
    \            newGrade.push(letterGrade[10]);\n        }else if(grades[i] >= gpas[11]){\n\
    \            newGrade.push(letterGrade[11]);\n        }else{\n            newGrade.push(letterGrade[12]);\n\
    \        }\n    }\n    return newGrade\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpovi5w_en.js:70\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  \n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n\
    \    at test (/tmp/tmpho0_fdjh.js:32:10)\n    at Object.<anonymous> (/tmp/tmpho0_fdjh.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ grades_arr = [];\n    grades.forEach(function(gpa){\n        var letter_grade\
    \ = '';\n        if(gpa == 4.0){\n            letter_grade = 'A+';\n        }\n\
    \        else if(gpa > 3.7){\n            letter_grade = 'A';\n        }\n   \
    \     else if(gpa > 3.3){\n            letter_grade = 'A-';\n        }\n     \
    \   else if(gpa > 3.0){\n            letter_grade = 'B+';\n        }\n       \
    \ else if(gpa > 2.7){\n            letter_grade = 'B';\n        }\n        else\
    \ if(gpa > 2.3){\n            letter_grade = 'B-';\n        }\n        else if(gpa\
    \ > 2.0){\n            letter_grade = 'C+';\n        }\n        else if(gpa >\
    \ 1.7){\n            letter_grade = 'C';\n        }\n        else if(gpa > 1.3){\n\
    \            letter_grade = 'C-';\n        }\n        else if(gpa > 1.0){\n  \
    \          letter_grade = 'D+';\n        }\n        else if(gpa > 0.7){\n    \
    \        letter_grade = 'D';\n        }\n        else if(gpa > 0.0){\n       \
    \     letter_grade = 'D-';\n        }\n        else if(gpa == 0.0){\n        \
    \    letter_grade = 'E';\n        }\n        grades_arr.push(letter_grade);\n\
    \    });\n    return grades_arr;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar grades_arr\
    \ = [];\n\tfor (var i = 0; i < grades.length; i++) {\n\t\tif (grades[i] >= 4.0)\
    \ {\n\t\t\tgrades_arr.push(\"A+\");\n\t\t} else if (grades[i] >= 3.7) {\n\t\t\t\
    grades_arr.push(\"A\");\n\t\t} else if (grades[i] >= 3.3) {\n\t\t\tgrades_arr.push(\"\
    A-\");\n\t\t} else if (grades[i] >= 3.0) {\n\t\t\tgrades_arr.push(\"B+\");\n\t\
    \t} else if (grades[i] >= 2.7) {\n\t\t\tgrades_arr.push(\"B\");\n\t\t} else if\
    \ (grades[i] >= 2.3) {\n\t\t\tgrades_arr.push(\"B-\");\n\t\t} else if (grades[i]\
    \ >= 2.0) {\n\t\t\tgrades_arr.push(\"C+\");\n\t\t} else if (grades[i] >= 1.7)\
    \ {\n\t\t\tgrades_arr.push(\"C\");\n\t\t} else if (grades[i] >= 1.3) {\n\t\t\t\
    grades_arr.push(\"C-\");\n\t\t} else if (grades[i] >= 1.0) {\n\t\t\tgrades_arr.push(\"\
    D+\");\n\t\t} else if (grades[i] >= 0.7) {\n\t\t\tgrades_arr.push(\"D\");\n\t\t\
    } else if (grades[i] >= 0.0) {\n\t\t\tgrades_arr.push(\"D-\");\n\t\t} else {\n\
    \t\t\tgrades_arr.push(\"E\");\n\t\t}\n\t}\n\treturn grades_arr;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpukc39lcm.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpukc39lcm.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    letter_grades\
    \ = [];\n    for (i = 0; i < grades.length; i++){\n        if (grades[i] == 4.0){\n\
    \            letter_grades.push(\"A+\");\n        }\n        else if (grades[i]\
    \ > 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if\
    \ (grades[i] > 3.3){\n            letter_grades.push(\"A-\");\n        }\n   \
    \     else if (grades[i] > 3.0){\n            letter_grades.push(\"B+\");\n  \
    \      }\n        else if (grades[i] > 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grades[i] > 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grades[i] > 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grades[i] > 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grades[i] > 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grades[i] > 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grades[i] > 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grades[i] >= 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else {\n            letter_grades.push(\"E\");\n  \
    \      }\n    }\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'D-'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'E'\n]\n    at test (/tmp/tmp2de_irrj.js:77:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2de_irrj.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'D-' ],\n\
    \  expected: [ 'E' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    return\
    \ grades.map(grade => {\n        if (grade >= 4.0) {\n            return \"A+\"\
    ;\n        } else if (grade >= 3.7) {\n            return \"A\";\n        } else\
    \ if (grade >= 3.3) {\n            return \"A-\";\n        } else if (grade >=\
    \ 3.0) {\n            return \"B+\";\n        } else if (grade >= 2.7) {\n   \
    \         return \"B\";\n        } else if (grade >= 2.3) {\n            return\
    \ \"B-\";\n        } else if (grade >= 2.0) {\n            return \"C+\";\n  \
    \      } else if (grade >= 1.7) {\n            return \"C\";\n        } else if\
    \ (grade >= 1.3) {\n            return \"C-\";\n        } else if (grade >= 1.0)\
    \ {\n            return \"D+\";\n        } else if (grade >= 0.7) {\n        \
    \    return \"D\";\n        } else if (grade >= 0.0) {\n            return \"\
    D-\";\n        } else {\n            return \"E\";\n        }\n    });\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8k1oxqr_.js:59:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8k1oxqr_.js:67:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = [];\n    for (var i = 0; i < grades.length; i++){\n        var\
    \ grade = grades[i];\n        if (grade === 4.0){\n            letter_grades.push(\"\
    A+\");\n        }\n        else if (grade > 3.7){\n            letter_grades.push(\"\
    A\");\n        }\n        else if (grade > 3.3){\n            letter_grades.push(\"\
    A-\");\n        }\n        else if (grade > 3.0){\n            letter_grades.push(\"\
    B+\");\n        }\n        else if (grade > 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grade > 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grade > 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grade > 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grade > 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grade > 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grade > 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grade > 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else{\n            letter_grades.push(\"E\");\n   \
    \     }\n    }\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  // Your\
    \ code goes here\n  let grades_array = [];\n  for (let i = 0; i < grades.length;\
    \ i++){\n    if (grades[i] >= 4.0){\n      grades_array.push(\"A+\");\n    } else\
    \ if (grades[i] >= 3.7 && grades[i] < 4.0){\n      grades_array.push(\"A\");\n\
    \    } else if (grades[i] >= 3.3 && grades[i] < 3.7){\n      grades_array.push(\"\
    A-\");\n    } else if (grades[i] >= 3.0 && grades[i] < 3.3){\n      grades_array.push(\"\
    B+\");\n    } else if (grades[i] >= 2.7 && grades[i] < 3.0){\n      grades_array.push(\"\
    B\");\n    } else if (grades[i] >= 2.3 && grades[i] < 2.7){\n      grades_array.push(\"\
    B-\");\n    } else if (grades[i] >= 2.0 && grades[i] < 2.3){\n      grades_array.push(\"\
    C+\");\n    } else if (grades[i] >= 1.7 && grades[i] < 2.0){\n      grades_array.push(\"\
    C\");\n    } else if (grades[i] >= 1.3 && grades[i] < 1.7){\n      grades_array.push(\"\
    C-\");\n    } else if (grades[i] >= 1.0 && grades[i] < 1.3){\n      grades_array.push(\"\
    D+\");\n    } else if (grades[i] >= 0.7 && grades[i] < 1.0){\n      grades_array.push(\"\
    D\");\n    } else if (grades[i] >= 0.0 && grades[i] < 0.7){\n      grades_array.push(\"\
    D-\");\n    } else if (grades[i] == 0.0){\n      grades_array.push(\"E\");\n \
    \   }\n  }\n  return grades_array;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_ldw6y44.js:64:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_ldw6y44.js:72:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    const\
    \ letterGrade = {\n        \"A+\": 4.0,\n        \"A\": 3.7,\n        \"A-\":\
    \ 3.3,\n        \"B+\": 3.0,\n        \"B\": 2.7,\n        \"B-\": 2.3,\n    \
    \    \"C+\": 2.0,\n        \"C\": 1.7,\n        \"C-\": 1.3,\n        \"D+\":\
    \ 1.0,\n        \"D\": 0.7,\n        \"D-\": 0.0,\n        \"E\": 0.0\n    }\n\
    \    let i = 0;\n    let arr = [];\n    for(let grade of grades){\n        for(let\
    \ key in letterGrade){\n            if(grade >= letterGrade[key]){\n         \
    \       arr[i] = key;\n                i++;\n                break;\n        \
    \    }\n        }\n    }\n    return arr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp15skyrjp.js:57:10)\n\
    \    at Object.<anonymous> (/tmp/tmp15skyrjp.js:65:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letters = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ >= 4.0){\n            letters.push(\"A+\");\n        }else if(grades[i] >= 3.7){\n\
    \            letters.push(\"A\");\n        }else if(grades[i] >= 3.3){\n     \
    \       letters.push(\"A-\");\n        }else if(grades[i] >= 3.0){\n         \
    \   letters.push(\"B+\");\n        }else if(grades[i] >= 2.7){\n            letters.push(\"\
    B\");\n        }else if(grades[i] >= 2.3){\n            letters.push(\"B-\");\n\
    \        }else if(grades[i] >= 2.0){\n            letters.push(\"C+\");\n    \
    \    }else if(grades[i] >= 1.7){\n            letters.push(\"C\");\n        }else\
    \ if(grades[i] >= 1.3){\n            letters.push(\"C-\");\n        }else if(grades[i]\
    \ >= 1.0){\n            letters.push(\"D+\");\n        }else if(grades[i] >= 0.7){\n\
    \            letters.push(\"D\");\n        }else if(grades[i] >= 0.0){\n     \
    \       letters.push(\"D-\");\n        }else{\n            letters.push(\"E\"\
    );\n        }\n    }\n    return letters;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpf5z0j6_2.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpf5z0j6_2.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ newArr = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ >= 4.0){\n            newArr.push(\"A+\");\n        }else if(grades[i] >= 3.7){\n\
    \            newArr.push(\"A\");\n        }else if(grades[i] >= 3.3){\n      \
    \      newArr.push(\"A-\");\n        }else if(grades[i] >= 3.0){\n           \
    \ newArr.push(\"B+\");\n        }else if(grades[i] >= 2.7){\n            newArr.push(\"\
    B\");\n        }else if(grades[i] >= 2.3){\n            newArr.push(\"B-\");\n\
    \        }else if(grades[i] >= 2.0){\n            newArr.push(\"C+\");\n     \
    \   }else if(grades[i] >= 1.7){\n            newArr.push(\"C\");\n        }else\
    \ if(grades[i] >= 1.3){\n            newArr.push(\"C-\");\n        }else if(grades[i]\
    \ >= 1.0){\n            newArr.push(\"D+\");\n        }else if(grades[i] >= 0.7){\n\
    \            newArr.push(\"D\");\n        }else if(grades[i] >= 0.0){\n      \
    \      newArr.push(\"D-\");\n        }else{\n            newArr.push(\"E\");\n\
    \        }\n    }\n    return newArr;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp1onb9ys_.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1onb9ys_.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var grade_letter\
    \ = [];\n  for (var i = 0; i < grades.length; i++){\n    if (grades[i] >= 4.0){\n\
    \      grade_letter.push(\"A+\");\n    }\n    else if (grades[i] >= 3.7){\n  \
    \    grade_letter.push(\"A\");\n    }\n    else if (grades[i] >= 3.3){\n     \
    \ grade_letter.push(\"A-\");\n    }\n    else if (grades[i] >= 3.0){\n      grade_letter.push(\"\
    B+\");\n    }\n    else if (grades[i] >= 2.7){\n      grade_letter.push(\"B\"\
    );\n    }\n    else if (grades[i] >= 2.3){\n      grade_letter.push(\"B-\");\n\
    \    }\n    else if (grades[i] >= 2.0){\n      grade_letter.push(\"C+\");\n  \
    \  }\n    else if (grades[i] >= 1.7){\n      grade_letter.push(\"C\");\n    }\n\
    \    else if (grades[i] >= 1.3){\n      grade_letter.push(\"C-\");\n    }\n  \
    \  else if (grades[i] >= 1.0){\n      grade_letter.push(\"D+\");\n    }\n    else\
    \ if (grades[i] >= 0.7){\n      grade_letter.push(\"D\");\n    }\n    else if\
    \ (grades[i] >= 0.0){\n      grade_letter.push(\"D-\");\n    }\n    else {\n \
    \     grade_letter.push(\"E\");\n    }\n  }\n  return grade_letter;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpuu1pufer.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpuu1pufer.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ grade_index = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\",\
    \ \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n    var grade_number = [4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n    var i;\n    var result\
    \ = [];\n    for(i = 0; i < grades.length; i++){\n        result.push(numerical_to_letter(grades[i],\
    \ grade_number, grade_index));\n    }\n    return result;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbh5u5u_e.js:29\n        result.push(numerical_to_letter(grades[i],\
    \ grade_number, grade_index));\n               ^\n\nReferenceError: numerical_to_letter\
    \ is not defined\n    at numerical_letter_grade (/tmp/tmpbh5u5u_e.js:29:16)\n\
    \    at test (/tmp/tmpbh5u5u_e.js:39:20)\n    at Object.<anonymous> (/tmp/tmpbh5u5u_e.js:47:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ count = []\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ >= 4.0){\n            count.push(\"A+\")\n        }else if(grades[i] >= 3.7){\n\
    \            count.push(\"A\")\n        }else if(grades[i] >= 3.3){\n        \
    \    count.push(\"A-\")\n        }else if(grades[i] >= 3.0){\n            count.push(\"\
    B+\")\n        }else if(grades[i] >= 2.7){\n            count.push(\"B\")\n  \
    \      }else if(grades[i] >= 2.3){\n            count.push(\"B-\")\n        }else\
    \ if(grades[i] >= 2.0){\n            count.push(\"C+\")\n        }else if(grades[i]\
    \ >= 1.7){\n            count.push(\"C\")\n        }else if(grades[i] >= 1.3){\n\
    \            count.push(\"C-\")\n        }else if(grades[i] >= 1.0){\n       \
    \     count.push(\"D+\")\n        }else if(grades[i] >= 0.7){\n            count.push(\"\
    D\")\n        }else if(grades[i] >= 0.0){\n            count.push(\"D-\")\n  \
    \      }else{\n            count.push(\"E\")\n        }\n    }\n    return count\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpawr__h1y.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpawr__h1y.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letters = [];\n    for (var i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ >= 4.0){\n            letters.push(\"A+\");\n        } else if (grades[i] >=\
    \ 3.7){\n            letters.push(\"A\");\n        } else if (grades[i] >= 3.3){\n\
    \            letters.push(\"A-\");\n        } else if (grades[i] >= 3.0){\n  \
    \          letters.push(\"B+\");\n        } else if (grades[i] >= 2.7){\n    \
    \        letters.push(\"B\");\n        } else if (grades[i] >= 2.3){\n       \
    \     letters.push(\"B-\");\n        } else if (grades[i] >= 2.0){\n         \
    \   letters.push(\"C+\");\n        } else if (grades[i] >= 1.7){\n           \
    \ letters.push(\"C\");\n        } else if (grades[i] >= 1.3){\n            letters.push(\"\
    C-\");\n        } else if (grades[i] >= 1.0){\n            letters.push(\"D+\"\
    );\n        } else if (grades[i] >= 0.7){\n            letters.push(\"D\");\n\
    \        } else if (grades[i] >= 0.0){\n            letters.push(\"D-\");\n  \
    \      } else {\n            letters.push(\"E\");\n        }\n    }\n    return\
    \ letters;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpk1x8mtjb.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk1x8mtjb.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ grade_array = []\n    for (let i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ > 4.0){\n            grade_array.push(\"A+\")\n        }\n        else if (grades[i]\
    \ > 3.7){\n            grade_array.push(\"A\")\n        }\n        else if (grades[i]\
    \ > 3.3){\n            grade_array.push(\"A-\")\n        }\n        else if (grades[i]\
    \ > 3.0){\n            grade_array.push(\"B+\")\n        }\n        else if (grades[i]\
    \ > 2.7){\n            grade_array.push(\"B\")\n        }\n        else if (grades[i]\
    \ > 2.3){\n            grade_array.push(\"B-\")\n        }\n        else if (grades[i]\
    \ > 2.0){\n            grade_array.push(\"C+\")\n        }\n        else if (grades[i]\
    \ > 1.7){\n            grade_array.push(\"C\")\n        }\n        else if (grades[i]\
    \ > 1.3){\n            grade_array.push(\"C-\")\n        }\n        else if (grades[i]\
    \ > 1.0){\n            grade_array.push(\"D+\")\n        }\n        else if (grades[i]\
    \ > 0.7){\n            grade_array.push(\"D\")\n        }\n        else if (grades[i]\
    \ > 0.0){\n            grade_array.push(\"D-\")\n        }\n        else {\n \
    \           grade_array.push(\"E\")\n        }\n    }\n    return grade_array\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpuge55vt_.js:74:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuge55vt_.js:82:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A', 'B',\
    \ 'C-', 'C', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letters = [];\n    for (var i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ == 4.0){\n            letters.push(\"A+\");\n        }\n        else if (grades[i]\
    \ >= 3.7){\n            letters.push(\"A\");\n        }\n        else if (grades[i]\
    \ >= 3.3){\n            letters.push(\"A-\");\n        }\n        else if (grades[i]\
    \ >= 3.0){\n            letters.push(\"B+\");\n        }\n        else if (grades[i]\
    \ >= 2.7){\n            letters.push(\"B\");\n        }\n        else if (grades[i]\
    \ >= 2.3){\n            letters.push(\"B-\");\n        }\n        else if (grades[i]\
    \ >= 2.0){\n            letters.push(\"C+\");\n        }\n        else if (grades[i]\
    \ >= 1.7){\n            letters.push(\"C\");\n        }\n        else if (grades[i]\
    \ >= 1.3){\n            letters.push(\"C-\");\n        }\n        else if (grades[i]\
    \ >= 1.0){\n            letters.push(\"D+\");\n        }\n        else if (grades[i]\
    \ >= 0.7){\n            letters.push(\"D\");\n        }\n        else if (grades[i]\
    \ >= 0.0){\n            letters.push(\"D-\");\n        }\n        else{\n    \
    \        letters.push(\"E\");\n        }\n    }\n    return letters;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp3f0h0q1u.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3f0h0q1u.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var letters\
    \ = [];\n  for (var i = 0; i < grades.length; i++){\n    if (grades[i] === 4.0){\n\
    \      letters.push(\"A+\");\n    } else if (grades[i] > 3.7 && grades[i] < 4.0){\n\
    \      letters.push(\"A\");\n    } else if (grades[i] > 3.3 && grades[i] < 3.7){\n\
    \      letters.push(\"A-\");\n    } else if (grades[i] > 3.0 && grades[i] < 3.3){\n\
    \      letters.push(\"B+\");\n    } else if (grades[i] > 2.7 && grades[i] < 3.0){\n\
    \      letters.push(\"B\");\n    } else if (grades[i] > 2.3 && grades[i] < 2.7){\n\
    \      letters.push(\"B-\");\n    } else if (grades[i] > 2.0 && grades[i] < 2.3){\n\
    \      letters.push(\"C+\");\n    } else if (grades[i] > 1.7 && grades[i] < 2.0){\n\
    \      letters.push(\"C\");\n    } else if (grades[i] > 1.3 && grades[i] < 1.7){\n\
    \      letters.push(\"C-\");\n    } else if (grades[i] > 1.0 && grades[i] < 1.3){\n\
    \      letters.push(\"D+\");\n    } else if (grades[i] > 0.7 && grades[i] < 1.0){\n\
    \      letters.push(\"D\");\n    } else if (grades[i] > 0.0 && grades[i] < 0.7){\n\
    \      letters.push(\"D-\");\n    } else if (grades[i] === 0.0){\n      letters.push(\"\
    E\");\n    }\n  }\n  return letters;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n\
    \  'A-'\n]\n    at test (/tmp/tmpqp9temhw.js:61:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpqp9temhw.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'A-'\
    \ ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  return\
    \ grades.map(function(num){\n    if (num >= 4.0){\n      return \"A+\";\n    }\
    \ else if (num >= 3.7){\n      return \"A\";\n    } else if (num >= 3.3){\n  \
    \    return \"A-\";\n    } else if (num >= 3.0){\n      return \"B+\";\n    }\
    \ else if (num >= 2.7){\n      return \"B\";\n    } else if (num >= 2.3){\n  \
    \    return \"B-\";\n    } else if (num >= 2.0){\n      return \"C+\";\n    }\
    \ else if (num >= 1.7){\n      return \"C\";\n    } else if (num >= 1.3){\n  \
    \    return \"C-\";\n    } else if (num >= 1.0){\n      return \"D+\";\n    }\
    \ else if (num >= 0.7){\n      return \"D\";\n    } else if (num >= 0.0){\n  \
    \    return \"D-\";\n    } else {\n      return \"E\";\n    }\n  });\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpnzfo_boy.js:60:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnzfo_boy.js:68:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  for(var\
    \ i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      grades[i]\
    \ = \"A+\";\n    }\n    else if(grades[i] >= 3.7){\n      grades[i] = \"A\";\n\
    \    }\n    else if(grades[i] >= 3.3){\n      grades[i] = \"A-\";\n    }\n   \
    \ else if(grades[i] >= 3.0){\n      grades[i] = \"B+\";\n    }\n    else if(grades[i]\
    \ >= 2.7){\n      grades[i] = \"B\";\n    }\n    else if(grades[i] >= 2.3){\n\
    \      grades[i] = \"B-\";\n    }\n    else if(grades[i] >= 2.0){\n      grades[i]\
    \ = \"C+\";\n    }\n    else if(grades[i] >= 1.7){\n      grades[i] = \"C\";\n\
    \    }\n    else if(grades[i] >= 1.3){\n      grades[i] = \"C-\";\n    }\n   \
    \ else if(grades[i] >= 1.0){\n      grades[i] = \"D+\";\n    }\n    else if(grades[i]\
    \ >= 0.7){\n      grades[i] = \"D\";\n    }\n    else if(grades[i] >= 0.0){\n\
    \      grades[i] = \"D-\";\n    }\n    else{\n      grades[i] = \"E\";\n    }\n\
    \  }\n  return grades;\n}\nvar grades = [4.0, 3, 1.7, 2, 3.5];\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmphuouv4_r.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmphuouv4_r.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var grades_out\
    \ = [];\n  for (var i = 0; i < grades.length; i++){\n    if (grades[i] > 4.0){\n\
    \      grades_out.push(\"A+\");\n    }\n    else if (grades[i] > 3.7){\n     \
    \ grades_out.push(\"A\");\n    }\n    else if (grades[i] > 3.3){\n      grades_out.push(\"\
    A-\");\n    }\n    else if (grades[i] > 3.0){\n      grades_out.push(\"B+\");\n\
    \    }\n    else if (grades[i] > 2.7){\n      grades_out.push(\"B\");\n    }\n\
    \    else if (grades[i] > 2.3){\n      grades_out.push(\"B-\");\n    }\n    else\
    \ if (grades[i] > 2.0){\n      grades_out.push(\"C+\");\n    }\n    else if (grades[i]\
    \ > 1.7){\n      grades_out.push(\"C\");\n    }\n    else if (grades[i] > 1.3){\n\
    \      grades_out.push(\"C-\");\n    }\n    else if (grades[i] > 1.0){\n     \
    \ grades_out.push(\"D+\");\n    }\n    else if (grades[i] > 0.7){\n      grades_out.push(\"\
    D\");\n    }\n    else if (grades[i] > 0.0){\n      grades_out.push(\"D-\");\n\
    \    }\n    else{\n      grades_out.push(\"E\");\n    }\n  }\n  return grades_out;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpecntv0ni.js:74:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpecntv0ni.js:82:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A', 'B',\
    \ 'C-', 'C', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ numToLetter = {\n        \"4.0\" : \"A+\",\n        \"3.7\" : \"A\",\n     \
    \   \"3.3\" : \"A-\",\n        \"3.0\" : \"B+\",\n        \"2.7\" : \"B\",\n \
    \       \"2.3\" : \"B-\",\n        \"2.0\" : \"C+\",\n        \"1.7\" : \"C\"\
    ,\n        \"1.3\" : \"C-\",\n        \"1.0\" : \"D+\",\n        \"0.7\" : \"\
    D\",\n        \"0.0\" : \"D-\",\n        \"-0.0\" : \"E\"\n    }\n    var results\
    \ = [];\n    for(var i = 0; i < grades.length; i++){\n        var numGrade = grades[i].toString();\n\
    \        if(numGrade.indexOf(\".\") == -1){\n            numGrade += \".0\";\n\
    \        }\n        results.push(numToLetter[numGrade]);\n    }\n    return results;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n \
    \ 'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpth4cjtaj.js:54:10)\n\
    \    at Object.<anonymous> (/tmp/tmpth4cjtaj.js:62:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', undefined ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ arr=[];\n    for(i=0;i<grades.length;i++){\n        if(grades[i]==4.0){\n  \
    \          arr.push(\"A+\");\n        }\n        else if(grades[i]>3.7){\n   \
    \         arr.push(\"A\");\n        }\n        else if(grades[i]>3.3){\n     \
    \       arr.push(\"A-\");\n        }\n        else if(grades[i]>3.0){\n      \
    \      arr.push(\"B+\");\n        }\n        else if(grades[i]>2.7){\n       \
    \     arr.push(\"B\");\n        }\n        else if(grades[i]>2.3){\n         \
    \   arr.push(\"B-\");\n        }\n        else if(grades[i]>2.0){\n          \
    \  arr.push(\"C+\");\n        }\n        else if(grades[i]>1.7){\n           \
    \ arr.push(\"C\");\n        }\n        else if(grades[i]>1.3){\n            arr.push(\"\
    C-\");\n        }\n        else if(grades[i]>1.0){\n            arr.push(\"D+\"\
    );\n        }\n        else if(grades[i]>0.7){\n            arr.push(\"D\");\n\
    \        }\n        else if(grades[i]>0.0){\n            arr.push(\"D-\");\n \
    \       }\n        else if(grades[i]==0.0){\n            arr.push(\"E\");\n  \
    \      }\n        else{\n            console.log(\"Invalid grade\");\n       \
    \ }\n    }\n    return arr;\n}\nvar arr=[4.0, 3, 1.7, 2, 3.5];\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822333
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ output_letters = [];\n    for (var i = 0; i < grades.length; i++) {\n      \
    \  var gpa = grades[i];\n        if (gpa == 4.0) {\n            output_letters.push(\"\
    A+\");\n        } else if (gpa > 3.7) {\n            output_letters.push(\"A\"\
    );\n        } else if (gpa > 3.3) {\n            output_letters.push(\"A-\");\n\
    \        } else if (gpa > 3.0) {\n            output_letters.push(\"B+\");\n \
    \       } else if (gpa > 2.7) {\n            output_letters.push(\"B\");\n   \
    \     } else if (gpa > 2.3) {\n            output_letters.push(\"B-\");\n    \
    \    } else if (gpa > 2.0) {\n            output_letters.push(\"C+\");\n     \
    \   } else if (gpa > 1.7) {\n            output_letters.push(\"C\");\n       \
    \ } else if (gpa > 1.3) {\n            output_letters.push(\"C-\");\n        }\
    \ else if (gpa > 1.0) {\n            output_letters.push(\"D+\");\n        } else\
    \ if (gpa > 0.7) {\n            output_letters.push(\"D\");\n        } else if\
    \ (gpa > 0.0) {\n            output_letters.push(\"D-\");\n        } else {\n\
    \            output_letters.push(\"E\");\n        }\n    }\n    return output_letters;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var letter_grades\
    \ = []\n  for (var i = 0; i < grades.length; i++){\n    var grade = grades[i]\n\
    \    if (grade >= 4.0){\n      letter_grades.push(\"A+\")\n    }\n    else if\
    \ (grade >= 3.7){\n      letter_grades.push(\"A\")\n    }\n    else if (grade\
    \ >= 3.3){\n      letter_grades.push(\"A-\")\n    }\n    else if (grade >= 3.0){\n\
    \      letter_grades.push(\"B+\")\n    }\n    else if (grade >= 2.7){\n      letter_grades.push(\"\
    B\")\n    }\n    else if (grade >= 2.3){\n      letter_grades.push(\"B-\")\n \
    \   }\n    else if (grade >= 2.0){\n      letter_grades.push(\"C+\")\n    }\n\
    \    else if (grade >= 1.7){\n      letter_grades.push(\"C\")\n    }\n    else\
    \ if (grade >= 1.3){\n      letter_grades.push(\"C-\")\n    }\n    else if (grade\
    \ >= 1.0){\n      letter_grades.push(\"D+\")\n    }\n    else if (grade >= 0.7){\n\
    \      letter_grades.push(\"D\")\n    }\n    else if (grade >= 0.0){\n      letter_grades.push(\"\
    D-\")\n    }\n    else{\n      letter_grades.push(\"E\")\n    }\n  }\n  return\
    \ letter_grades\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpa_k0t86o.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa_k0t86o.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = [];\n    for (i=0; i<grades.length; i++){\n        if (grades[i]\
    \ == 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if\
    \ (grades[i] >= 3.7){\n            letter_grades.push(\"A\");\n        }\n   \
    \     else if (grades[i] >= 3.3){\n            letter_grades.push(\"A-\");\n \
    \       }\n        else if (grades[i] >= 3.0){\n            letter_grades.push(\"\
    B+\");\n        }\n        else if (grades[i] >= 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grades[i] >= 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grades[i] >= 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grades[i] >= 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grades[i] >= 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grades[i] >= 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grades[i] >= 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grades[i] >= 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else {\n            letter_grades.push(\"E\");\n  \
    \      }\n    }\n    return letter_grades;\n}\n\nvar grades = [4.0, 3, 1.7, 2,\
    \ 3.5];\nnumerical_letter_grade(grades);\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp0_44a0uw.js:76:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0_44a0uw.js:84:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ alphabet = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"\
    C-\", \"D+\", \"D\", \"D-\", \"E\"];\n    var marks = [4.0, 3.7, 3.3, 3.0, 2.7,\
    \ 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n    var grades_numerical = [];\n \
    \   var grades_alphabet = [];\n    for(var i = 0; i < grades.length; i++){\n \
    \       if(grades[i] >= marks[0]){\n            grades_numerical.push(0);\n  \
    \      }\n        else if(grades[i] < marks[marks.length - 1]){\n            grades_numerical.push(marks.length\
    \ - 1);\n        }\n        else{\n            for(var j = 0; j < marks.length;\
    \ j++){\n                if(grades[i] < marks[j] && grades[i] >= marks[j + 1]){\n\
    \                    grades_numerical.push(j + 1);\n                }\n      \
    \      }\n        }\n    }\n    for(var i = 0; i < grades_numerical.length; i++){\n\
    \        grades_alphabet.push(alphabet[grades_numerical[i]]);\n    }\n    return\
    \ grades_alphabet;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpvruz5s15.js:53:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvruz5s15.js:61:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ grade_letter = [];\n    for (var i = 0; i < grades.length; i++){\n        if\
    \ (grades[i] >= 4.0){\n            grade_letter.push(\"A+\");\n        } else\
    \ if (grades[i] >= 3.7){\n            grade_letter.push(\"A\");\n        } else\
    \ if (grades[i] >= 3.3){\n            grade_letter.push(\"A-\");\n        } else\
    \ if (grades[i] >= 3.0){\n            grade_letter.push(\"B+\");\n        } else\
    \ if (grades[i] >= 2.7){\n            grade_letter.push(\"B\");\n        } else\
    \ if (grades[i] >= 2.3){\n            grade_letter.push(\"B-\");\n        } else\
    \ if (grades[i] >= 2.0){\n            grade_letter.push(\"C+\");\n        } else\
    \ if (grades[i] >= 1.7){\n            grade_letter.push(\"C\");\n        } else\
    \ if (grades[i] >= 1.3){\n            grade_letter.push(\"C-\");\n        } else\
    \ if (grades[i] >= 1.0){\n            grade_letter.push(\"D+\");\n        } else\
    \ if (grades[i] >= 0.7){\n            grade_letter.push(\"D\");\n        } else\
    \ if (grades[i] >= 0.0){\n            grade_letter.push(\"D-\");\n        } else\
    \ if (grades[i] === 0.0){\n            grade_letter.push(\"E\");\n        }\n\
    \    }\n    return grade_letter;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzlpdjiuo.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzlpdjiuo.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = [];\n    for (i=0; i<grades.length; i++){\n        if (grades[i]\
    \ >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        else if\
    \ (grades[i] >= 3.7){\n            letter_grades.push(\"A\");\n        }\n   \
    \     else if (grades[i] >= 3.3){\n            letter_grades.push(\"A-\");\n \
    \       }\n        else if (grades[i] >= 3.0){\n            letter_grades.push(\"\
    B+\");\n        }\n        else if (grades[i] >= 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grades[i] >= 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grades[i] >= 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grades[i] >= 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grades[i] >= 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grades[i] >= 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grades[i] >= 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grades[i] >= 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else if (grades[i] == 0.0){\n            letter_grades.push(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpennwe56b.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpennwe56b.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    return\
    \ grades.map(function(gpa){\n        var grade = \"E\";\n        if (gpa > 0.0)\
    \ grade = \"D-\";\n        if (gpa > 0.7) grade = \"D\";\n        if (gpa > 1.0)\
    \ grade = \"D+\";\n        if (gpa > 1.3) grade = \"C-\";\n        if (gpa > 1.7)\
    \ grade = \"C\";\n        if (gpa > 2.0) grade = \"C+\";\n        if (gpa > 2.3)\
    \ grade = \"B-\";\n        if (gpa > 2.7) grade = \"B\";\n        if (gpa > 3.0)\
    \ grade = \"B+\";\n        if (gpa > 3.3) grade = \"A-\";\n        if (gpa > 3.7)\
    \ grade = \"A\";\n        if (gpa > 4.0) grade = \"A+\";\n        return grade;\n\
    \    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmptdhcrma7.js:47:10)\n    at Object.<anonymous>\
    \ (/tmp/tmptdhcrma7.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A', 'B',\
    \ 'C-', 'C', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letters = [];\n    for (var i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ >= 4.0){\n            letters.push(\"A+\");\n        } else if (grades[i] >=\
    \ 3.7){\n            letters.push(\"A\");\n        } else if (grades[i] >= 3.3){\n\
    \            letters.push(\"A-\");\n        } else if (grades[i] >= 3.0){\n  \
    \          letters.push(\"B+\");\n        } else if (grades[i] >= 2.7){\n    \
    \        letters.push(\"B\");\n        } else if (grades[i] >= 2.3){\n       \
    \     letters.push(\"B-\");\n        } else if (grades[i] >= 2.0){\n         \
    \   letters.push(\"C+\");\n        } else if (grades[i] >= 1.7){\n           \
    \ letters.push(\"C\");\n        } else if (grades[i] >= 1.3){\n            letters.push(\"\
    C-\");\n        } else if (grades[i] >= 1.0){\n            letters.push(\"D+\"\
    );\n        } else if (grades[i] >= 0.7){\n            letters.push(\"D\");\n\
    \        } else if (grades[i] >= 0.0){\n            letters.push(\"D-\");\n  \
    \      } else {\n            letters.push(\"E\");\n        }\n    }\n    return\
    \ letters;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpcr7c1rsz.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpcr7c1rsz.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    const\
    \ letter_grades = [];\n    for (let i = 0; i < grades.length; i++){\n        if\
    \ (grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n  \
    \      else if (grades[i] >= 3.7){\n            letter_grades.push(\"A\");\n \
    \       }\n        else if (grades[i] >= 3.3){\n            letter_grades.push(\"\
    A-\");\n        }\n        else if (grades[i] >= 3.0){\n            letter_grades.push(\"\
    B+\");\n        }\n        else if (grades[i] >= 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grades[i] >= 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grades[i] >= 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grades[i] >= 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grades[i] >= 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grades[i] >= 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grades[i] >= 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grades[i] >= 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else{\n            letter_grades.push(\"E\");\n   \
    \     }\n    }\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpo0br8fdz.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo0br8fdz.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar grade_array\
    \ = [];\n\tfor (var i = 0; i < grades.length; i++) {\n\t\tif (grades[i] >= 4.0)\
    \ {\n\t\t\tgrade_array.push(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7) {\n\
    \t\t\tgrade_array.push(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3) {\n\t\t\t\
    grade_array.push(\"A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0) {\n\t\t\tgrade_array.push(\"\
    B+\");\n\t\t}\n\t\telse if (grades[i] >= 2.7) {\n\t\t\tgrade_array.push(\"B\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.3) {\n\t\t\tgrade_array.push(\"B-\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.0) {\n\t\t\tgrade_array.push(\"C+\");\n\t\t\
    }\n\t\telse if (grades[i] >= 1.7) {\n\t\t\tgrade_array.push(\"C\");\n\t\t}\n\t\
    \telse if (grades[i] >= 1.3) {\n\t\t\tgrade_array.push(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0) {\n\t\t\tgrade_array.push(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7) {\n\t\t\tgrade_array.push(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0) {\n\t\t\tgrade_array.push(\"D-\");\n\t\t}\n\t\telse if (grades[i] >=\
    \ 0.0) {\n\t\t\tgrade_array.push(\"E\");\n\t\t}\n\t}\n\treturn grade_array;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpqzipry24.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpqzipry24.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    grades_letter\
    \ = []\n    for (i = 0; i < grades.length; i++) {\n        grades_letter.push(grades[i])\n\
    \        if (grades[i] >= 4.0) {\n            grades_letter[i] = \"A+\"\n    \
    \    }\n        else if (grades[i] >= 3.7) {\n            grades_letter[i] = \"\
    A\"\n        }\n        else if (grades[i] >= 3.3) {\n            grades_letter[i]\
    \ = \"A-\"\n        }\n        else if (grades[i] >= 3.0) {\n            grades_letter[i]\
    \ = \"B+\"\n        }\n        else if (grades[i] >= 2.7) {\n            grades_letter[i]\
    \ = \"B\"\n        }\n        else if (grades[i] >= 2.3) {\n            grades_letter[i]\
    \ = \"B-\"\n        }\n        else if (grades[i] >= 2.0) {\n            grades_letter[i]\
    \ = \"C+\"\n        }\n        else if (grades[i] >= 1.7) {\n            grades_letter[i]\
    \ = \"C\"\n        }\n        else if (grades[i] >= 1.3) {\n            grades_letter[i]\
    \ = \"C-\"\n        }\n        else if (grades[i] >= 1.0) {\n            grades_letter[i]\
    \ = \"D+\"\n        }\n        else if (grades[i] >= 0.7) {\n            grades_letter[i]\
    \ = \"D\"\n        }\n        else if (grades[i] >= 0.0) {\n            grades_letter[i]\
    \ = \"D-\"\n        }\n        else if (grades[i] >= 0.0) {\n            grades_letter[i]\
    \ = \"E\"\n        }\n    }\n    return grades_letter\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp2rmipa_t.js:75:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2rmipa_t.js:83:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    //\
    \ Write your solution below:\n    const grade_map = {\"A+\": 4.0, \"A\": 3.7,\
    \ \"A-\": 3.3, \"B+\": 3.0, \"B\": 2.7, \"B-\": 2.3, \"C+\": 2.0, \"C\": 1.7,\
    \ \"C-\": 1.3, \"D+\": 1.0, \"D\": 0.7, \"D-\": 0.0, \"E\": 0.0}\n    var result\
    \ = [];\n    for (var i = 0; i < grades.length; i++){\n        var grade = grades[i];\n\
    \        for (var key in grade_map){\n            if (grade_map[key] <= grade){\n\
    \                result.push(key);\n                break;\n            }\n  \
    \      }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpycklbsvz.js:43:10)\n\
    \    at Object.<anonymous> (/tmp/tmpycklbsvz.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  for(var\
    \ i = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      grades[i]\
    \ = \"A+\";\n    }\n    else if(grades[i] > 3.7){\n      grades[i] = \"A\";\n\
    \    }\n    else if(grades[i] > 3.3){\n      grades[i] = \"A-\";\n    }\n    else\
    \ if(grades[i] > 3.0){\n      grades[i] = \"B+\";\n    }\n    else if(grades[i]\
    \ > 2.7){\n      grades[i] = \"B\";\n    }\n    else if(grades[i] > 2.3){\n  \
    \    grades[i] = \"B-\";\n    }\n    else if(grades[i] > 2.0){\n      grades[i]\
    \ = \"C+\";\n    }\n    else if(grades[i] > 1.7){\n      grades[i] = \"C\";\n\
    \    }\n    else if(grades[i] > 1.3){\n      grades[i] = \"C-\";\n    }\n    else\
    \ if(grades[i] > 1.0){\n      grades[i] = \"D+\";\n    }\n    else if(grades[i]\
    \ > 0.7){\n      grades[i] = \"D\";\n    }\n    else if(grades[i] > 0.0){\n  \
    \    grades[i] = \"D-\";\n    }\n    else if(grades[i] == 0.0){\n      grades[i]\
    \ = \"E\";\n    }\n  }\n  return grades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var alph\
    \ = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\"\
    , \"D\", \"D-\", \"E\"];\n  var nums = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7,\
    \ 1.3, 1.0, 0.7, 0.0];\n  var grades = grades.map(function(grade){\n    if(grade\
    \ < 1){\n      return alph[alph.length - 1];\n    } else {\n      for(var i =\
    \ 0; i < nums.length; i++){\n        if(grade >= nums[i]){\n          return alph[i];\n\
    \        }\n      }\n    }\n  });\n  return grades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpauie5_5x.js:44:10)\n\
    \    at Object.<anonymous> (/tmp/tmpauie5_5x.js:52:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    for(let\
    \ i = 0; i < grades.length; i++){\n        switch(grades[i]){\n            case\
    \ (grades[i] >= 4.0):\n                console.log(\"A+\");\n                break;\n\
    \            case (grades[i] >= 3.7):\n                console.log(\"A\");\n \
    \               break;\n            case (grades[i] >= 3.3):\n               \
    \ console.log(\"A-\");\n                break;\n            case (grades[i] >=\
    \ 3.0):\n                console.log(\"B+\");\n                break;\n      \
    \      case (grades[i] >= 2.7):\n                console.log(\"B\");\n       \
    \         break;\n            case (grades[i] >= 2.3):\n                console.log(\"\
    B-\");\n                break;\n            case (grades[i] >= 2.0):\n       \
    \         console.log(\"C+\");\n                break;\n            case (grades[i]\
    \ >= 1.7):\n                console.log(\"C\");\n                break;\n    \
    \        case (grades[i] >= 1.3):\n                console.log(\"C-\");\n    \
    \            break;\n            case (grades[i] >= 1.0):\n                console.log(\"\
    D+\");\n                break;\n            case (grades[i] >= 0.7):\n       \
    \         console.log(\"D\");\n                break;\n            case (grades[i]\
    \ >= 0.0):\n                console.log(\"D-\");\n                break;\n   \
    \         case (grades[i] === 0.0):\n                console.log(\"E\");\n   \
    \             break;\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n\
    \    at test (/tmp/tmp2ppcowjc.js:74:10)\n    at Object.<anonymous> (/tmp/tmp2ppcowjc.js:82:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ results = [];\n    for (var i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ === 4.0){\n            results.push(\"A+\");\n        } else if (grades[i] >=\
    \ 3.7 && grades[i] < 4.0){\n            results.push(\"A\");\n        } else if\
    \ (grades[i] >= 3.3 && grades[i] < 3.7){\n            results.push(\"A-\");\n\
    \        } else if (grades[i] >= 3.0 && grades[i] < 3.3){\n            results.push(\"\
    B+\");\n        } else if (grades[i] >= 2.7 && grades[i] < 3.0){\n           \
    \ results.push(\"B\");\n        } else if (grades[i] >= 2.3 && grades[i] < 2.7){\n\
    \            results.push(\"B-\");\n        } else if (grades[i] >= 2.0 && grades[i]\
    \ < 2.3){\n            results.push(\"C+\");\n        } else if (grades[i] >=\
    \ 1.7 && grades[i] < 2.0){\n            results.push(\"C\");\n        } else if\
    \ (grades[i] >= 1.3 && grades[i] < 1.7){\n            results.push(\"C-\");\n\
    \        } else if (grades[i] >= 1.0 && grades[i] < 1.3){\n            results.push(\"\
    D+\");\n        } else if (grades[i] >= 0.7 && grades[i] < 1.0){\n           \
    \ results.push(\"D\");\n        } else if (grades[i] >= 0.0 && grades[i] < 0.7){\n\
    \            results.push(\"D-\");\n        } else if (grades[i] === 0.0){\n \
    \           results.push(\"E\");\n        }\n    }\n    return results;\n}\nnumerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]);\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpet7gb751.js:63:10)\n\
    \    at Object.<anonymous> (/tmp/tmpet7gb751.js:71:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = [];\n    for (var i = 0; i < grades.length; i++){\n        if\
    \ (grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        } else\
    \ if (grades[i] >= 3.7){\n            letter_grades.push(\"A\");\n        } else\
    \ if (grades[i] >= 3.3){\n            letter_grades.push(\"A-\");\n        } else\
    \ if (grades[i] >= 3.0){\n            letter_grades.push(\"B+\");\n        } else\
    \ if (grades[i] >= 2.7){\n            letter_grades.push(\"B\");\n        } else\
    \ if (grades[i] >= 2.3){\n            letter_grades.push(\"B-\");\n        } else\
    \ if (grades[i] >= 2.0){\n            letter_grades.push(\"C+\");\n        } else\
    \ if (grades[i] >= 1.7){\n            letter_grades.push(\"C\");\n        } else\
    \ if (grades[i] >= 1.3){\n            letter_grades.push(\"C-\");\n        } else\
    \ if (grades[i] >= 1.0){\n            letter_grades.push(\"D+\");\n        } else\
    \ if (grades[i] >= 0.7){\n            letter_grades.push(\"D\");\n        } else\
    \ if (grades[i] >= 0.0){\n            letter_grades.push(\"D-\");\n        } else\
    \ {\n            letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpmw_b54wl.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpmw_b54wl.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    return\
    \ grades.map(grade => {\n        if (grade === 4.0) {\n            return \"A+\"\
    ;\n        } else if (grade >= 3.7 && grade < 4.0) {\n            return \"A\"\
    ;\n        } else if (grade >= 3.3 && grade < 3.7) {\n            return \"A-\"\
    ;\n        } else if (grade >= 3.0 && grade < 3.3) {\n            return \"B+\"\
    ;\n        } else if (grade >= 2.7 && grade < 3.0) {\n            return \"B\"\
    ;\n        } else if (grade >= 2.3 && grade < 2.7) {\n            return \"B-\"\
    ;\n        } else if (grade >= 2.0 && grade < 2.3) {\n            return \"C+\"\
    ;\n        } else if (grade >= 1.7 && grade < 2.0) {\n            return \"C\"\
    ;\n        } else if (grade >= 1.3 && grade < 1.7) {\n            return \"C-\"\
    ;\n        } else if (grade >= 1.0 && grade < 1.3) {\n            return \"D+\"\
    ;\n        } else if (grade >= 0.7 && grade < 1.0) {\n            return \"D\"\
    ;\n        } else if (grade >= 0.0 && grade < 0.7) {\n            return \"D-\"\
    ;\n        } else if (grade === 0.0) {\n            return \"E\";\n        }\n\
    \    });\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp5qxc5725.js:59:10)\n\
    \    at Object.<anonymous> (/tmp/tmp5qxc5725.js:67:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar letter_grades\
    \ = [];\n\tfor (var i = 0; i < grades.length; i++){\n\t\tif (grades[i] >= 4.0){\n\
    \t\t\tletter_grades.push(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7){\n\t\t\
    \tletter_grades.push(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3){\n\t\t\tletter_grades.push(\"\
    A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0){\n\t\t\tletter_grades.push(\"B+\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.7){\n\t\t\tletter_grades.push(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.3){\n\t\t\tletter_grades.push(\"B-\");\n\t\t\
    }\n\t\telse if (grades[i] >= 2.0){\n\t\t\tletter_grades.push(\"C+\");\n\t\t}\n\
    \t\telse if (grades[i] >= 1.7){\n\t\t\tletter_grades.push(\"C\");\n\t\t}\n\t\t\
    else if (grades[i] >= 1.3){\n\t\t\tletter_grades.push(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0){\n\t\t\tletter_grades.push(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7){\n\t\t\tletter_grades.push(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0){\n\t\t\tletter_grades.push(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tletter_grades.push(\"\
    E\");\n\t\t}\n\t}\n\treturn letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp4at4v95_.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4at4v95_.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ output = [];\n    for(let i = 0; i < grades.length; i++){\n        switch(true){\n\
    \            case grades[i] > 3.7:\n                output.push(\"A+\");\n   \
    \             break;\n            case grades[i] > 3.3:\n                output.push(\"\
    A\");\n                break;\n            case grades[i] > 3.0:\n           \
    \     output.push(\"A-\");\n                break;\n            case grades[i]\
    \ > 2.7:\n                output.push(\"B+\");\n                break;\n     \
    \       case grades[i] > 2.3:\n                output.push(\"B\");\n         \
    \       break;\n            case grades[i] > 2.0:\n                output.push(\"\
    B-\");\n                break;\n            case grades[i] > 1.7:\n          \
    \      output.push(\"C+\");\n                break;\n            case grades[i]\
    \ > 1.3:\n                output.push(\"C\");\n                break;\n      \
    \      case grades[i] > 1.0:\n                output.push(\"C-\");\n         \
    \       break;\n            case grades[i] > 0.7:\n                output.push(\"\
    D+\");\n                break;\n            case grades[i] > 0.0:\n          \
    \      output.push(\"D\");\n                break;\n            case grades[i]\
    \ >= 0.0:\n                output.push(\"D-\");\n                break;\n    \
    \        default:\n                output.push(\"E\");\n                break;\n\
    \        }\n    }\n    return output;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpjlhx2rfq.js:76:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjlhx2rfq.js:84:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ output = [];\n    grades.forEach(function(grade){\n        if(grade >= 4.0){\n\
    \            output.push(\"A+\");\n        }else if(grade >= 3.7){\n         \
    \   output.push(\"A\");\n        }else if(grade >= 3.3){\n            output.push(\"\
    A-\");\n        }else if(grade >= 3.0){\n            output.push(\"B+\");\n  \
    \      }else if(grade >= 2.7){\n            output.push(\"B\");\n        }else\
    \ if(grade >= 2.3){\n            output.push(\"B-\");\n        }else if(grade\
    \ >= 2.0){\n            output.push(\"C+\");\n        }else if(grade >= 1.7){\n\
    \            output.push(\"C\");\n        }else if(grade >= 1.3){\n          \
    \  output.push(\"C-\");\n        }else if(grade >= 1.0){\n            output.push(\"\
    D+\");\n        }else if(grade >= 0.7){\n            output.push(\"D\");\n   \
    \     }else if(grade >= 0.0){\n            output.push(\"D-\");\n        }else\
    \ if(grade < 0.0){\n            output.push(\"E\");\n        }\n    });\n    return\
    \ output;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpbs_m4dmr.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbs_m4dmr.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar result\
    \ = [];\n\tfor(var i = 0; i < grades.length; i++){\n\t\tvar grade = grades[i];\n\
    \t\tif(grade >= 4.0){\n\t\t\tresult.push(\"A+\");\n\t\t}else if(grade >= 3.7){\n\
    \t\t\tresult.push(\"A\");\n\t\t}else if(grade >= 3.3){\n\t\t\tresult.push(\"A-\"\
    );\n\t\t}else if(grade >= 3.0){\n\t\t\tresult.push(\"B+\");\n\t\t}else if(grade\
    \ >= 2.7){\n\t\t\tresult.push(\"B\");\n\t\t}else if(grade >= 2.3){\n\t\t\tresult.push(\"\
    B-\");\n\t\t}else if(grade >= 2.0){\n\t\t\tresult.push(\"C+\");\n\t\t}else if(grade\
    \ >= 1.7){\n\t\t\tresult.push(\"C\");\n\t\t}else if(grade >= 1.3){\n\t\t\tresult.push(\"\
    C-\");\n\t\t}else if(grade >= 1.0){\n\t\t\tresult.push(\"D+\");\n\t\t}else if(grade\
    \ >= 0.7){\n\t\t\tresult.push(\"D\");\n\t\t}else if(grade >= 0.0){\n\t\t\tresult.push(\"\
    D-\");\n\t\t}else if(grade < 0.0){\n\t\t\tresult.push(\"E\");\n\t\t}\n\t}\n\t\
    return result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmph771h3ga.js:63:10)\n\
    \    at Object.<anonymous> (/tmp/tmph771h3ga.js:71:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let result\
    \ = []\n  for (let i = 0; i < grades.length; i++){\n    if (grades[i] === 4.0){\n\
    \      result.push(\"A+\")\n    } else if (grades[i] > 3.7){\n      result.push(\"\
    A\")\n    } else if (grades[i] > 3.3){\n      result.push(\"A-\")\n    } else\
    \ if (grades[i] > 3.0){\n      result.push(\"B+\")\n    } else if (grades[i] >\
    \ 2.7){\n      result.push(\"B\")\n    } else if (grades[i] > 2.3){\n      result.push(\"\
    B-\")\n    } else if (grades[i] > 2.0){\n      result.push(\"C+\")\n    } else\
    \ if (grades[i] > 1.7){\n      result.push(\"C\")\n    } else if (grades[i] >\
    \ 1.3){\n      result.push(\"C-\")\n    } else if (grades[i] > 1.0){\n      result.push(\"\
    D+\")\n    } else if (grades[i] > 0.7){\n      result.push(\"D\")\n    } else\
    \ if (grades[i] > 0.0){\n      result.push(\"D-\")\n    } else {\n      result.push(\"\
    E\")\n    }\n  }\n  return result\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades\
    \ = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0)\
    \ {\n      letter_grades.push(\"A+\");\n    }\n    else if (grades[i] >= 3.7)\
    \ {\n      letter_grades.push(\"A\");\n    }\n    else if (grades[i] >= 3.3) {\n\
    \      letter_grades.push(\"A-\");\n    }\n    else if (grades[i] >= 3.0) {\n\
    \      letter_grades.push(\"B+\");\n    }\n    else if (grades[i] >= 2.7) {\n\
    \      letter_grades.push(\"B\");\n    }\n    else if (grades[i] >= 2.3) {\n \
    \     letter_grades.push(\"B-\");\n    }\n    else if (grades[i] >= 2.0) {\n \
    \     letter_grades.push(\"C+\");\n    }\n    else if (grades[i] >= 1.7) {\n \
    \     letter_grades.push(\"C\");\n    }\n    else if (grades[i] >= 1.3) {\n  \
    \    letter_grades.push(\"C-\");\n    }\n    else if (grades[i] >= 1.0) {\n  \
    \    letter_grades.push(\"D+\");\n    }\n    else if (grades[i] >= 0.7) {\n  \
    \    letter_grades.push(\"D\");\n    }\n    else if (grades[i] >= 0.0) {\n   \
    \   letter_grades.push(\"D-\");\n    }\n    else if (grades[i] >= 0.0) {\n   \
    \   letter_grades.push(\"E\");\n    }\n  }\n  return letter_grades;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpznq435k7.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpznq435k7.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var new_array\
    \ = []\n  for (var i = 0; i < grades.length; i++){\n    if (grades[i] >= 4.0){\n\
    \      new_array.push(\"A+\")\n    }\n    else if (grades[i] >= 3.7){\n      new_array.push(\"\
    A\")\n    }\n    else if (grades[i] >= 3.3){\n      new_array.push(\"A-\")\n \
    \   }\n    else if (grades[i] >= 3.0){\n      new_array.push(\"B+\")\n    }\n\
    \    else if (grades[i] >= 2.7){\n      new_array.push(\"B\")\n    }\n    else\
    \ if (grades[i] >= 2.3){\n      new_array.push(\"B-\")\n    }\n    else if (grades[i]\
    \ >= 2.0){\n      new_array.push(\"C+\")\n    }\n    else if (grades[i] >= 1.7){\n\
    \      new_array.push(\"C\")\n    }\n    else if (grades[i] >= 1.3){\n      new_array.push(\"\
    C-\")\n    }\n    else if (grades[i] >= 1.0){\n      new_array.push(\"D+\")\n\
    \    }\n    else if (grades[i] >= 0.7){\n      new_array.push(\"D\")\n    }\n\
    \    else if (grades[i] >= 0.0){\n      new_array.push(\"D-\")\n    }\n    else\
    \ {\n      new_array.push(\"E\")\n    }\n  }\n  return new_array\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp2ldkprk2.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2ldkprk2.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letter_grades = [];\n    let grade_letters = ['A+', 'A', 'A-', 'B+', 'B', 'B-',\
    \ 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E'];\n    let grade_values = [4.0, 3.7, 3.3,\
    \ 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n    for (let i = 0; i <\
    \ grades.length; i++){\n        let grade = grades[i];\n        if (grade > 4.0)\
    \ grade = 4.0;\n        if (grade < 0.0) grade = 0.0;\n        let j = 0;\n  \
    \      while (grade < grade_values[j]){\n            j++;\n        }\n       \
    \ letter_grades.push(grade_letters[j]);\n    }\n    return letter_grades;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp54rfi06g.js:45:10)\n\
    \    at Object.<anonymous> (/tmp/tmp54rfi06g.js:53:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var new_array\
    \ = [];\n  var letter_grades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\",\
    \ \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"];\n  var base_grade = [4.0,\
    \ 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.0];\n  for (var i =\
    \ 0; i < grades.length; i++){\n    for (var j = 0; j < base_grade.length; j++){\n\
    \      if (grades[i] >= base_grade[j]){\n        new_array.push(letter_grades[j]);\n\
    \        break;\n      }\n    }\n  }\n  return new_array;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpulkwm8_s.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpulkwm8_s.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades=[];\n    for(var i=0; i<grades.length; i++){\n        if(grades[i]==4.0){\n\
    \            letter_grades.push(\"A+\");\n        }\n        else if(grades[i]>3.7){\n\
    \            letter_grades.push(\"A\");\n        }\n        else if(grades[i]>3.3){\n\
    \            letter_grades.push(\"A-\");\n        }\n        else if(grades[i]>3.0){\n\
    \            letter_grades.push(\"B+\");\n        }\n        else if(grades[i]>2.7){\n\
    \            letter_grades.push(\"B\");\n        }\n        else if(grades[i]>2.3){\n\
    \            letter_grades.push(\"B-\");\n        }\n        else if(grades[i]>2.0){\n\
    \            letter_grades.push(\"C+\");\n        }\n        else if(grades[i]>1.7){\n\
    \            letter_grades.push(\"C\");\n        }\n        else if(grades[i]>1.3){\n\
    \            letter_grades.push(\"C-\");\n        }\n        else if(grades[i]>1.0){\n\
    \            letter_grades.push(\"D+\");\n        }\n        else if(grades[i]>0.7){\n\
    \            letter_grades.push(\"D\");\n        }\n        else if(grades[i]>0.0){\n\
    \            letter_grades.push(\"D-\");\n        }\n        else{\n         \
    \   letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822334
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = [];\n    for (var i = 0; i < grades.length; i++){\n        if\
    \ (grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n  \
    \      else if (grades[i] > 3.7){\n            letter_grades.push(\"A\");\n  \
    \      }\n        else if (grades[i] > 3.3){\n            letter_grades.push(\"\
    A-\");\n        }\n        else if (grades[i] > 3.0){\n            letter_grades.push(\"\
    B+\");\n        }\n        else if (grades[i] > 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grades[i] > 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grades[i] > 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grades[i] > 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grades[i] > 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grades[i] > 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grades[i] > 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grades[i] > 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else {\n            letter_grades.push(\"E\");\n  \
    \      }\n    }\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var table\
    \ = {\n    4.0: \"A+\",\n    3.7: \"A\",\n    3.3: \"A-\",\n    3.0: \"B+\",\n\
    \    2.7: \"B\",\n    2.3: \"B-\",\n    2.0: \"C+\",\n    1.7: \"C\",\n    1.3:\
    \ \"C-\",\n    1.0: \"D+\",\n    0.7: \"D\",\n    0.0: \"D-\",\n    -1.0: \"E\"\
    \n  }\n  var result = []\n  for (var i = 0; i < grades.length; i++){\n    for\
    \ (var key in table){\n      if (grades[i] >= key){\n        result.push(table[key])\n\
    \        break\n      }\n    }\n  }\n  return result\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpubt43q2j.js:37\n    -1.0: \"E\"\n    ^\n\nSyntaxError: Unexpected\
    \ token '-'\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letterGrades = [];\n    for (var i = 0; i < grades.length; i++){\n        if\
    \ (grades[i] > 4.0){\n            letterGrades.push(\"A+\");\n        } else if\
    \ (grades[i] > 3.7){\n            letterGrades.push(\"A\");\n        } else if\
    \ (grades[i] > 3.3){\n            letterGrades.push(\"A-\");\n        } else if\
    \ (grades[i] > 3.0){\n            letterGrades.push(\"B+\");\n        } else if\
    \ (grades[i] > 2.7){\n            letterGrades.push(\"B\");\n        } else if\
    \ (grades[i] > 2.3){\n            letterGrades.push(\"B-\");\n        } else if\
    \ (grades[i] > 2.0){\n            letterGrades.push(\"C+\");\n        } else if\
    \ (grades[i] > 1.7){\n            letterGrades.push(\"C\");\n        } else if\
    \ (grades[i] > 1.3){\n            letterGrades.push(\"C-\");\n        } else if\
    \ (grades[i] > 1.0){\n            letterGrades.push(\"D+\");\n        } else if\
    \ (grades[i] > 0.7){\n            letterGrades.push(\"D\");\n        } else if\
    \ (grades[i] > 0.0){\n            letterGrades.push(\"D-\");\n        } else {\n\
    \            letterGrades.push(\"E\");\n        }\n    }\n    return letterGrades;\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp620p6bts.js:63:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp620p6bts.js:71:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A', 'B',\
    \ 'C-', 'C', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    letter_grades\
    \ = []\n    for (let i = 0; i < grades.length; i++){\n        if (grades[i] >=\
    \ 4.0){\n            letter_grades.push(\"A+\")\n        }\n        else if (grades[i]\
    \ >= 3.7){\n            letter_grades.push(\"A\")\n        }\n        else if\
    \ (grades[i] >= 3.3){\n            letter_grades.push(\"A-\")\n        }\n   \
    \     else if (grades[i] >= 3.0){\n            letter_grades.push(\"B+\")\n  \
    \      }\n        else if (grades[i] >= 2.7){\n            letter_grades.push(\"\
    B\")\n        }\n        else if (grades[i] >= 2.3){\n            letter_grades.push(\"\
    B-\")\n        }\n        else if (grades[i] >= 2.0){\n            letter_grades.push(\"\
    C+\")\n        }\n        else if (grades[i] >= 1.7){\n            letter_grades.push(\"\
    C\")\n        }\n        else if (grades[i] >= 1.3){\n            letter_grades.push(\"\
    C-\")\n        }\n        else if (grades[i] >= 1.0){\n            letter_grades.push(\"\
    D+\")\n        }\n        else if (grades[i] >= 0.7){\n            letter_grades.push(\"\
    D\")\n        }\n        else if (grades[i] >= 0.0){\n            letter_grades.push(\"\
    D-\")\n        }\n        else{\n            letter_grades.push(\"E\")\n     \
    \   }\n    }\n    return letter_grades\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmppwgmgv7d.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmppwgmgv7d.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    grades\
    \ = [4.0, 3, 1.7, 2, 3.5];\n    var new_grade = [];\n    for (var i = 0; i < grades.length;\
    \ i++){\n        if (grades[i] >= 4.0){\n            new_grade.push(\"A+\");\n\
    \        }\n        else if (grades[i] >= 3.7){\n            new_grade.push(\"\
    A\");\n        }\n        else if (grades[i] >= 3.3){\n            new_grade.push(\"\
    A-\");\n        }\n        else if (grades[i] >= 3.0){\n            new_grade.push(\"\
    B+\");\n        }\n        else if (grades[i] >= 2.7){\n            new_grade.push(\"\
    B\");\n        }\n        else if (grades[i] >= 2.3){\n            new_grade.push(\"\
    B-\");\n        }\n        else if (grades[i] >= 2.0){\n            new_grade.push(\"\
    C+\");\n        }\n        else if (grades[i] >= 1.7){\n            new_grade.push(\"\
    C\");\n        }\n        else if (grades[i] >= 1.3){\n            new_grade.push(\"\
    C-\");\n        }\n        else if (grades[i] >= 1.0){\n            new_grade.push(\"\
    D+\");\n        }\n        else if (grades[i] >= 0.7){\n            new_grade.push(\"\
    D\");\n        }\n        else if (grades[i] >= 0.0){\n            new_grade.push(\"\
    D-\");\n        }\n        else {\n            new_grade.push(\"E\");\n      \
    \  }\n    }\n    return new_grade;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpi3nozfwf.js:75:10)\n\
    \    at Object.<anonymous> (/tmp/tmpi3nozfwf.js:83:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var grades_letter\
    \ = [];\n  for (i=0; i<grades.length; i++){\n    if (grades[i] == 4.0){\n    \
    \  grades_letter.push(\"A+\");\n    }\n    else if (grades[i] >= 3.7){\n     \
    \ grades_letter.push(\"A\");\n    }\n    else if (grades[i] >= 3.3){\n      grades_letter.push(\"\
    A-\");\n    }\n    else if (grades[i] >= 3.0){\n      grades_letter.push(\"B+\"\
    );\n    }\n    else if (grades[i] >= 2.7){\n      grades_letter.push(\"B\");\n\
    \    }\n    else if (grades[i] >= 2.3){\n      grades_letter.push(\"B-\");\n \
    \   }\n    else if (grades[i] >= 2.0){\n      grades_letter.push(\"C+\");\n  \
    \  }\n    else if (grades[i] >= 1.7){\n      grades_letter.push(\"C\");\n    }\n\
    \    else if (grades[i] >= 1.3){\n      grades_letter.push(\"C-\");\n    }\n \
    \   else if (grades[i] >= 1.0){\n      grades_letter.push(\"D+\");\n    }\n  \
    \  else if (grades[i] >= 0.7){\n      grades_letter.push(\"D\");\n    }\n    else\
    \ if (grades[i] >= 0.0){\n      grades_letter.push(\"D-\");\n    }\n    else {\n\
    \      grades_letter.push(\"E\");\n    }\n  }\n  return grades_letter;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp36tc5rob.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmp36tc5rob.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ grades_map = {\n        'aplus': 4.0,\n        'a': 3.7,\n        'aminus':\
    \ 3.3,\n        'bplus': 3.0,\n        'b': 2.7,\n        'bminus': 2.3,\n   \
    \     'cplus': 2.0,\n        'c': 1.7,\n        'cminus': 1.3,\n        'dplus':\
    \ 1.0,\n        'd': 0.7,\n        'dminus': 0.0,\n        'e': 0.0\n    }\n \
    \   let alpha_grades = Object.keys(grades_map);\n    let letter_grades = [];\n\
    \    grades.forEach(grade => {\n        let max_grade = '';\n        alpha_grades.forEach(alpha_grade\
    \ => {\n            if(grade >= grades_map[alpha_grade]){\n                max_grade\
    \ = alpha_grade;\n            }\n        });\n        letter_grades.push(max_grade);\n\
    \    });\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'e',\n  'e',\n\
    \  'e',\n  'e',\n  'e'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp74k0wagp.js:58:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp74k0wagp.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'e', 'e',\
    \ 'e', 'e', 'e' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar scale\
    \ = {\n\t\t\"A+\": 4.0,\n\t\t\"A\": 3.7,\n\t\t\"A-\": 3.3,\n\t\t\"B+\": 3.0,\n\
    \t\t\"B\": 2.7,\n\t\t\"B-\": 2.3,\n\t\t\"C+\": 2.0,\n\t\t\"C\": 1.7,\n\t\t\"C-\"\
    : 1.3,\n\t\t\"D+\": 1.0,\n\t\t\"D\": 0.7,\n\t\t\"D-\": 0.0,\n\t\t\"E\": 0.0\n\t\
    }\n\tvar letter_grades = [];\n\tfor (var i = 0; i < grades.length; i++){\n\t\t\
    for (var j in scale){\n\t\t\tif (grades[i] >= scale[j]){\n\t\t\t\tletter_grades.push(j);\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn letter_grades;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpseqycuqw.js:56:10)\n\
    \    at Object.<anonymous> (/tmp/tmpseqycuqw.js:64:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ grades_letter = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D',\
    \ 'D-', 'E'];\n    let score = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0,\
    \ 0.7, 0.0, 0.0];\n    let letter_grade = [];\n    grades.forEach(grade => {\n\
    \        let i = 0;\n        while(grade < score[i]){\n            i += 1;\n \
    \       }\n        letter_grade.push(grades_letter[i]);\n    });\n    return letter_grade;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp3pdfutec.js:41:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3pdfutec.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let result\
    \ = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0)\
    \ {\n      result.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n      result.push(\"\
    A\");\n    } else if (grades[i] >= 3.3) {\n      result.push(\"A-\");\n    } else\
    \ if (grades[i] >= 3.0) {\n      result.push(\"B+\");\n    } else if (grades[i]\
    \ >= 2.7) {\n      result.push(\"B\");\n    } else if (grades[i] >= 2.3) {\n \
    \     result.push(\"B-\");\n    } else if (grades[i] >= 2.0) {\n      result.push(\"\
    C+\");\n    } else if (grades[i] >= 1.7) {\n      result.push(\"C\");\n    } else\
    \ if (grades[i] >= 1.3) {\n      result.push(\"C-\");\n    } else if (grades[i]\
    \ >= 1.0) {\n      result.push(\"D+\");\n    } else if (grades[i] >= 0.7) {\n\
    \      result.push(\"D\");\n    } else if (grades[i] >= 0.0) {\n      result.push(\"\
    D-\");\n    } else {\n      result.push(\"E\");\n    }\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmppuqjnb3m.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmppuqjnb3m.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = [];\n    for (var i = 0; i < grades.length; i++){\n        if\
    \ (grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n  \
    \      else if (grades[i] >= 3.7){\n            letter_grades.push(\"A\");\n \
    \       }\n        else if (grades[i] >= 3.3){\n            letter_grades.push(\"\
    A-\");\n        }\n        else if (grades[i] >= 3.0){\n            letter_grades.push(\"\
    B+\");\n        }\n        else if (grades[i] >= 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grades[i] >= 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grades[i] >= 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grades[i] >= 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grades[i] >= 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grades[i] >= 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grades[i] >= 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grades[i] >= 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else {\n            letter_grades.push(\"E\");\n  \
    \      }\n    }\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpvmvpty5y.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvmvpty5y.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822334
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ array = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ == 4.0){\n            array.push(\"A+\");\n        }else if(grades[i] >= 3.7){\n\
    \            array.push(\"A\");\n        }else if(grades[i] >= 3.3){\n       \
    \     array.push(\"A-\");\n        }else if(grades[i] >= 3.0){\n            array.push(\"\
    B+\");\n        }else if(grades[i] >= 2.7){\n            array.push(\"B\");\n\
    \        }else if(grades[i] >= 2.3){\n            array.push(\"B-\");\n      \
    \  }else if(grades[i] >= 2.0){\n            array.push(\"C+\");\n        }else\
    \ if(grades[i] >= 1.7){\n            array.push(\"C\");\n        }else if(grades[i]\
    \ >= 1.3){\n            array.push(\"C-\");\n        }else if(grades[i] >= 1.0){\n\
    \            array.push(\"D+\");\n        }else if(grades[i] >= 0.7){\n      \
    \      array.push(\"D\");\n        }else if(grades[i] > 0.0){\n            array.push(\"\
    D-\");\n        }else{\n            array.push(\"E\");\n        }\n    }\n   \
    \ return array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpp1puytvg.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpp1puytvg.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ converted_grades = [];\n    for (let i = 0; i < grades.length; i++){\n     \
    \   if (grades[i] >= 4.0){\n            converted_grades.push(\"A+\");\n     \
    \   } else if (grades[i] >= 3.7){\n            converted_grades.push(\"A\");\n\
    \        } else if (grades[i] >= 3.3){\n            converted_grades.push(\"A-\"\
    );\n        } else if (grades[i] >= 3.0){\n            converted_grades.push(\"\
    B+\");\n        } else if (grades[i] >= 2.7){\n            converted_grades.push(\"\
    B\");\n        } else if (grades[i] >= 2.3){\n            converted_grades.push(\"\
    B-\");\n        } else if (grades[i] >= 2.0){\n            converted_grades.push(\"\
    C+\");\n        } else if (grades[i] >= 1.7){\n            converted_grades.push(\"\
    C\");\n        } else if (grades[i] >= 1.3){\n            converted_grades.push(\"\
    C-\");\n        } else if (grades[i] >= 1.0){\n            converted_grades.push(\"\
    D+\");\n        } else if (grades[i] >= 0.7){\n            converted_grades.push(\"\
    D\");\n        } else if (grades[i] >= 0.0){\n            converted_grades.push(\"\
    D-\");\n        } else if (grades[i] == 0.0){\n            converted_grades.push(\"\
    E\");\n        } else {\n            converted_grades.push(\"Error: Out of Range.\"\
    );\n        }\n    }\n    return converted_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp7r_ijchu.js:64:10)\n\
    \    at Object.<anonymous> (/tmp/tmp7r_ijchu.js:72:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ grades_copy = grades.slice();\n    for(let i = 0; i < grades_copy.length; i++){\n\
    \        let grade = grades_copy[i];\n        if(grade >= 4.0){\n            grades_copy[i]\
    \ = \"A+\";\n        }else if(grade > 3.7){\n            grades_copy[i] = \"A\"\
    ;\n        }else if(grade > 3.3){\n            grades_copy[i] = \"A-\";\n    \
    \    }else if(grade > 3.0){\n            grades_copy[i] = \"B+\";\n        }else\
    \ if(grade > 2.7){\n            grades_copy[i] = \"B\";\n        }else if(grade\
    \ > 2.3){\n            grades_copy[i] = \"B-\";\n        }else if(grade > 2.0){\n\
    \            grades_copy[i] = \"C+\";\n        }else if(grade > 1.7){\n      \
    \      grades_copy[i] = \"C\";\n        }else if(grade > 1.3){\n            grades_copy[i]\
    \ = \"C-\";\n        }else if(grade > 1.0){\n            grades_copy[i] = \"D+\"\
    ;\n        }else if(grade > 0.7){\n            grades_copy[i] = \"D\";\n     \
    \   }else if(grade > 0.0){\n            grades_copy[i] = \"D-\";\n        }else{\n\
    \            grades_copy[i] = \"E\";\n        }\n    }\n    return grades_copy;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var grades_arr\
    \ = [];\n  for (i=0; i<grades.length; i++){\n    if (grades[i] >= 4.0){\n    \
    \  grades_arr.push(\"A+\");\n    } else if (grades[i] >= 3.7){\n      grades_arr.push(\"\
    A\");\n    } else if (grades[i] >= 3.3){\n      grades_arr.push(\"A-\");\n   \
    \ } else if (grades[i] >= 3.0){\n      grades_arr.push(\"B+\");\n    } else if\
    \ (grades[i] >= 2.7){\n      grades_arr.push(\"B\");\n    } else if (grades[i]\
    \ >= 2.3){\n      grades_arr.push(\"B-\");\n    } else if (grades[i] >= 2.0){\n\
    \      grades_arr.push(\"C+\");\n    } else if (grades[i] >= 1.7){\n      grades_arr.push(\"\
    C\");\n    } else if (grades[i] >= 1.3){\n      grades_arr.push(\"C-\");\n   \
    \ } else if (grades[i] >= 1.0){\n      grades_arr.push(\"D+\");\n    } else if\
    \ (grades[i] >= 0.7){\n      grades_arr.push(\"D\");\n    } else if (grades[i]\
    \ >= 0.0){\n      grades_arr.push(\"D-\");\n    } else if (grades[i] < 0.0){\n\
    \      grades_arr.push(\"E\");\n    }\n  }\n  return grades_arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpa858ak99.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpa858ak99.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ grade_numerical_letter = [];\n    for (i = 0; i < grades.length; i++){\n   \
    \     if (grades[i] == 4.0){\n            grade_numerical_letter.push(\"A+\");\n\
    \        }\n        else if (grades[i] >= 3.7){\n            grade_numerical_letter.push(\"\
    A\");\n        }\n        else if (grades[i] >= 3.3){\n            grade_numerical_letter.push(\"\
    A-\");\n        }\n        else if (grades[i] >= 3.0){\n            grade_numerical_letter.push(\"\
    B+\");\n        }\n        else if (grades[i] >= 2.7){\n            grade_numerical_letter.push(\"\
    B\");\n        }\n        else if (grades[i] >= 2.3){\n            grade_numerical_letter.push(\"\
    B-\");\n        }\n        else if (grades[i] >= 2.0){\n            grade_numerical_letter.push(\"\
    C+\");\n        }\n        else if (grades[i] >= 1.7){\n            grade_numerical_letter.push(\"\
    C\");\n        }\n        else if (grades[i] >= 1.3){\n            grade_numerical_letter.push(\"\
    C-\");\n        }\n        else if (grades[i] >= 1.0){\n            grade_numerical_letter.push(\"\
    D+\");\n        }\n        else if (grades[i] >= 0.7){\n            grade_numerical_letter.push(\"\
    D\");\n        }\n        else if (grades[i] >= 0.0){\n            grade_numerical_letter.push(\"\
    D-\");\n        }\n        else if (grades[i] <= 0.0){\n            grade_numerical_letter.push(\"\
    E\");\n        }\n    }\n    return grade_numerical_letter;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp28dqtlnk.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmp28dqtlnk.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar letter_grades\
    \ = [];\n\tfor (var i = 0; i < grades.length; i++){\n\t\tif (grades[i] >= 4.0){\n\
    \t\t\tletter_grades.push(\"A+\");\n\t\t} else if (grades[i] >= 3.7){\n\t\t\tletter_grades.push(\"\
    A\");\n\t\t} else if (grades[i] >= 3.3){\n\t\t\tletter_grades.push(\"A-\");\n\t\
    \t} else if (grades[i] >= 3.0){\n\t\t\tletter_grades.push(\"B+\");\n\t\t} else\
    \ if (grades[i] >= 2.7){\n\t\t\tletter_grades.push(\"B\");\n\t\t} else if (grades[i]\
    \ >= 2.3){\n\t\t\tletter_grades.push(\"B-\");\n\t\t} else if (grades[i] >= 2.0){\n\
    \t\t\tletter_grades.push(\"C+\");\n\t\t} else if (grades[i] >= 1.7){\n\t\t\tletter_grades.push(\"\
    C\");\n\t\t} else if (grades[i] >= 1.3){\n\t\t\tletter_grades.push(\"C-\");\n\t\
    \t} else if (grades[i] >= 1.0){\n\t\t\tletter_grades.push(\"D+\");\n\t\t} else\
    \ if (grades[i] >= 0.7){\n\t\t\tletter_grades.push(\"D\");\n\t\t} else if (grades[i]\
    \ >= 0.0){\n\t\t\tletter_grades.push(\"D-\");\n\t\t} else {\n\t\t\tletter_grades.push(\"\
    E\");\n\t\t}\n\t}\n\treturn letter_grades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpsphsk5vj.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpsphsk5vj.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ let_grade = [];\n    for(var i = 0; i < grades.length; i++){\n        var grade\
    \ = grades[i];\n        if(grade == 4.0){\n            let_grade.push(\"A+\");\n\
    \        }\n        else if(grade >= 3.7){\n            let_grade.push(\"A\");\n\
    \        }\n        else if(grade >= 3.3){\n            let_grade.push(\"A-\"\
    );\n        }\n        else if(grade >= 3.0){\n            let_grade.push(\"B+\"\
    );\n        }\n        else if(grade >= 2.7){\n            let_grade.push(\"B\"\
    );\n        }\n        else if(grade >= 2.3){\n            let_grade.push(\"B-\"\
    );\n        }\n        else if(grade >= 2.0){\n            let_grade.push(\"C+\"\
    );\n        }\n        else if(grade >= 1.7){\n            let_grade.push(\"C\"\
    );\n        }\n        else if(grade >= 1.3){\n            let_grade.push(\"C-\"\
    );\n        }\n        else if(grade >= 1.0){\n            let_grade.push(\"D+\"\
    );\n        }\n        else if(grade >= 0.7){\n            let_grade.push(\"D\"\
    );\n        }\n        else if(grade >= 0.0){\n            let_grade.push(\"D-\"\
    );\n        }\n        else{\n            let_grade.push(\"E\");\n        }\n\
    \    }\n    return let_grade;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp1hi8unzw.js:75:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1hi8unzw.js:83:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var result\
    \ = [];\n  for (var i = 0; i < grades.length; i++){\n    if (grades[i] == 4.0){\n\
    \      result.push(\"A+\");\n    } else if (grades[i] > 3.7){\n      result.push(\"\
    A\");\n    } else if (grades[i] > 3.3){\n      result.push(\"A-\");\n    } else\
    \ if (grades[i] > 3.0){\n      result.push(\"B+\");\n    } else if (grades[i]\
    \ > 2.7){\n      result.push(\"B\");\n    } else if (grades[i] > 2.3){\n     \
    \ result.push(\"B-\");\n    } else if (grades[i] > 2.0){\n      result.push(\"\
    C+\");\n    } else if (grades[i] > 1.7){\n      result.push(\"C\");\n    } else\
    \ if (grades[i] > 1.3){\n      result.push(\"C-\");\n    } else if (grades[i]\
    \ > 1.0){\n      result.push(\"D+\");\n    } else if (grades[i] > 0.7){\n    \
    \  result.push(\"D\");\n    } else if (grades[i] > 0.0){\n      result.push(\"\
    D-\");\n    } else {\n      result.push(\"E\");\n    }\n  }\n  return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var num2letter_grade_table\
    \ = {\n    4.0:\"A+\",\n    3.7:\"A\",\n    3.3:\"A-\",\n    3.0:\"B+\",\n   \
    \ 2.7:\"B\",\n    2.3:\"B-\",\n    2.0:\"C+\",\n    1.7:\"C\",\n    1.3:\"C-\"\
    ,\n    1.0:\"D+\",\n    0.7:\"D\",\n    0.0:\"D-\",\n    0.0:\"E\"\n  };\n  var\
    \ letter_grades = [];\n  for(var i = 0; i < grades.length; i++){\n    if(grades[i]\
    \ >= 4.0){\n      letter_grades.push(\"A+\");\n    }else if(grades[i] >= 3.7){\n\
    \      letter_grades.push(\"A\");\n    }else if(grades[i] >= 3.3){\n      letter_grades.push(\"\
    A-\");\n    }else if(grades[i] >= 3.0){\n      letter_grades.push(\"B+\");\n \
    \   }else if(grades[i] >= 2.7){\n      letter_grades.push(\"B\");\n    }else if(grades[i]\
    \ >= 2.3){\n      letter_grades.push(\"B-\");\n    }else if(grades[i] >= 2.0){\n\
    \      letter_grades.push(\"C+\");\n    }else if(grades[i] >= 1.7){\n      letter_grades.push(\"\
    C\");\n    }else if(grades[i] >= 1.3){\n      letter_grades.push(\"C-\");\n  \
    \  }else if(grades[i] >= 1.0){\n      letter_grades.push(\"D+\");\n    }else if(grades[i]\
    \ >= 0.7){\n      letter_grades.push(\"D\");\n    }else if(grades[i] >= 0.0){\n\
    \      letter_grades.push(\"D-\");\n    }else{\n      letter_grades.push(\"E\"\
    );\n    }\n  }\n  return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9a4povoj.js:77:10)\n\
    \    at Object.<anonymous> (/tmp/tmp9a4povoj.js:85:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    for(var\
    \ i = 0; i < grades.length; i++){\n        if(grades[i] === 4.0){\n          \
    \  grades[i] = \"A+\";\n        }else if(grades[i] >= 3.7){\n            grades[i]\
    \ = \"A\";\n        }else if(grades[i] >= 3.3){\n            grades[i] = \"A-\"\
    ;\n        }else if(grades[i] >= 3.0){\n            grades[i] = \"B+\";\n    \
    \    }else if(grades[i] >= 2.7){\n            grades[i] = \"B\";\n        }else\
    \ if(grades[i] >= 2.3){\n            grades[i] = \"B-\";\n        }else if(grades[i]\
    \ >= 2.0){\n            grades[i] = \"C+\";\n        }else if(grades[i] >= 1.7){\n\
    \            grades[i] = \"C\";\n        }else if(grades[i] >= 1.3){\n       \
    \     grades[i] = \"C-\";\n        }else if(grades[i] >= 1.0){\n            grades[i]\
    \ = \"D+\";\n        }else if(grades[i] >= 0.7){\n            grades[i] = \"D\"\
    ;\n        }else if(grades[i] > 0.0){\n            grades[i] = \"D-\";\n     \
    \   }else{\n            grades[i] = \"E\";\n        }\n    }\n    return grades;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp1_fadmf4.js:60:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1_fadmf4.js:68:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  grades\
    \ = grades.sort();\n  grades.reverse();\n  var final_grade = [];\n  for(var i\
    \ = 0; i < grades.length; i++){\n    if(grades[i] >= 4.0){\n      final_grade.push(\"\
    A+\");\n    }\n    else if(grades[i] >= 3.7){\n      final_grade.push(\"A\");\n\
    \    }\n    else if(grades[i] >= 3.3){\n      final_grade.push(\"A-\");\n    }\n\
    \    else if(grades[i] >= 3.0){\n      final_grade.push(\"B+\");\n    }\n    else\
    \ if(grades[i] >= 2.7){\n      final_grade.push(\"B\");\n    }\n    else if(grades[i]\
    \ >= 2.3){\n      final_grade.push(\"B-\");\n    }\n    else if(grades[i] >= 2.0){\n\
    \      final_grade.push(\"C+\");\n    }\n    else if(grades[i] >= 1.7){\n    \
    \  final_grade.push(\"C\");\n    }\n    else if(grades[i] >= 1.3){\n      final_grade.push(\"\
    C-\");\n    }\n    else if(grades[i] >= 1.0){\n      final_grade.push(\"D+\");\n\
    \    }\n    else if(grades[i] >= 0.7){\n      final_grade.push(\"D\");\n    }\n\
    \    else if(grades[i] >= 0.0){\n      final_grade.push(\"D-\");\n    }\n    else\
    \ if(grades[i] == 0.0){\n      final_grade.push(\"E\");\n    }\n  }\n  return\
    \ final_grade;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'A-',\n  'B+',\n  'C+',\n  'C'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp6k0bkiim.js:76:10)\n\
    \    at Object.<anonymous> (/tmp/tmp6k0bkiim.js:84:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'A-',\
    \ 'B+', 'C+', 'C' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = [];\n    for (var i = 0; i < grades.length; i++){\n        var\
    \ grade = grades[i];\n        if (grade >= 4.0){\n            letter_grades.push(\"\
    A+\");\n        }\n        else if (grade >= 3.7){\n            letter_grades.push(\"\
    A\");\n        }\n        else if (grade >= 3.3){\n            letter_grades.push(\"\
    A-\");\n        }\n        else if (grade >= 3.0){\n            letter_grades.push(\"\
    B+\");\n        }\n        else if (grade >= 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grade >= 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grade >= 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grade >= 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grade >= 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grade >= 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grade >= 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grade >= 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else {\n            letter_grades.push(\"E\");\n  \
    \      }\n    }\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmptsi8kdcs.js:75:10)\n\
    \    at Object.<anonymous> (/tmp/tmptsi8kdcs.js:83:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let result\
    \ = [];\n  grades.forEach(function(grade){\n    if(grade >= 4.0){\n      result.push(\"\
    A+\");\n    }else if(grade >= 3.7){\n      result.push(\"A\");\n    }else if(grade\
    \ >= 3.3){\n      result.push(\"A-\");\n    }else if(grade >= 3.0){\n      result.push(\"\
    B+\");\n    }else if(grade >= 2.7){\n      result.push(\"B\");\n    }else if(grade\
    \ >= 2.3){\n      result.push(\"B-\");\n    }else if(grade >= 2.0){\n      result.push(\"\
    C+\");\n    }else if(grade >= 1.7){\n      result.push(\"C\");\n    }else if(grade\
    \ >= 1.3){\n      result.push(\"C-\");\n    }else if(grade >= 1.0){\n      result.push(\"\
    D+\");\n    }else if(grade >= 0.7){\n      result.push(\"D\");\n    }else if(grade\
    \ >= 0.0){\n      result.push(\"D-\");\n    }else if(grade < 0.0){\n      result.push(\"\
    E\");\n    }\n  });\n  return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_lgpeft1.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_lgpeft1.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ let_grades = [];\n    for (var i = 0; i < grades.length; i++){\n        let\
    \ grade = grades[i];\n        if (grade >= 4.0){\n            let_grades.push(\"\
    A+\");\n        } else if (grade >= 3.7){\n            let_grades.push(\"A\");\n\
    \        } else if (grade >= 3.3){\n            let_grades.push(\"A-\");\n   \
    \     } else if (grade >= 3.0){\n            let_grades.push(\"B+\");\n      \
    \  } else if (grade >= 2.7){\n            let_grades.push(\"B\");\n        } else\
    \ if (grade >= 2.3){\n            let_grades.push(\"B-\");\n        } else if\
    \ (grade >= 2.0){\n            let_grades.push(\"C+\");\n        } else if (grade\
    \ >= 1.7){\n            let_grades.push(\"C\");\n        } else if (grade >= 1.3){\n\
    \            let_grades.push(\"C-\");\n        } else if (grade >= 1.0){\n   \
    \         let_grades.push(\"D+\");\n        } else if (grade >= 0.7){\n      \
    \      let_grades.push(\"D\");\n        } else if (grade >= 0.0){\n          \
    \  let_grades.push(\"D-\");\n        } else if (grade == 0.0){\n            let_grades.push(\"\
    E\");\n        }\n    }\n    return let_grades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpga9k4ip8.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpga9k4ip8.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ result = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ >= 4.0){\n            result.push(\"A+\");\n        }\n        else if(grades[i]\
    \ >= 3.7){\n            result.push(\"A\");\n        }\n        else if(grades[i]\
    \ >= 3.3){\n            result.push(\"A-\");\n        }\n        else if(grades[i]\
    \ >= 3.0){\n            result.push(\"B+\");\n        }\n        else if(grades[i]\
    \ >= 2.7){\n            result.push(\"B\");\n        }\n        else if(grades[i]\
    \ >= 2.3){\n            result.push(\"B-\");\n        }\n        else if(grades[i]\
    \ >= 2.0){\n            result.push(\"C+\");\n        }\n        else if(grades[i]\
    \ >= 1.7){\n            result.push(\"C\");\n        }\n        else if(grades[i]\
    \ >= 1.3){\n            result.push(\"C-\");\n        }\n        else if(grades[i]\
    \ >= 1.0){\n            result.push(\"D+\");\n        }\n        else if(grades[i]\
    \ >= 0.7){\n            result.push(\"D\");\n        }\n        else if(grades[i]\
    \ >= 0.0){\n            result.push(\"D-\");\n        }\n        else{\n     \
    \       result.push(\"E\");\n        }\n    }\n    return result;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp0uczuegz.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0uczuegz.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ numerical_grade = {\"A+\": 4.0, \"A\": 3.7, \"A-\": 3.3, \"B+\": 3.0, \"B\"\
    : 2.7, \"B-\": 2.3, \"C+\": 2.0, \"C\": 1.7, \"C-\": 1.3, \"D+\": 1.0, \"D\":\
    \ 0.7, \"D-\": 0.0, \"E\": 0.0}\n    var letter_grade = [\"A+\", \"A\", \"A-\"\
    , \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n\
    \    var output = []\n    for (var i = 0; i < grades.length; i++){\n        for\
    \ (var j = 0; j < letter_grade.length; j++){\n            if (grades[i] > numerical_grade[letter_grade[j]]){\n\
    \                output.push(letter_grade[j])\n                break\n       \
    \     }\n        }\n    }\n    return output\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp6lr18qb3.js:43:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp6lr18qb3.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A', 'B',\
    \ 'C-', 'C', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letter_grades = [];\n    for (let i = 0; i < grades.length; i++) {\n       \
    \ if (grades[i] >= 4.0) {\n            letter_grades.push(\"A+\");\n        }\
    \ else if (grades[i] >= 3.7) {\n            letter_grades.push(\"A\");\n     \
    \   } else if (grades[i] >= 3.3) {\n            letter_grades.push(\"A-\");\n\
    \        } else if (grades[i] >= 3.0) {\n            letter_grades.push(\"B+\"\
    );\n        } else if (grades[i] >= 2.7) {\n            letter_grades.push(\"\
    B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grades.push(\"\
    B-\");\n        } else if (grades[i] >= 2.0) {\n            letter_grades.push(\"\
    C+\");\n        } else if (grades[i] >= 1.7) {\n            letter_grades.push(\"\
    C\");\n        } else if (grades[i] >= 1.3) {\n            letter_grades.push(\"\
    C-\");\n        } else if (grades[i] >= 1.0) {\n            letter_grades.push(\"\
    D+\");\n        } else if (grades[i] >= 0.7) {\n            letter_grades.push(\"\
    D\");\n        } else if (grades[i] >= 0.0) {\n            letter_grades.push(\"\
    D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n\
    \    }\n    return letter_grades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp32ml48or.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmp32ml48or.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var final_grades\
    \ = [];\n  for (var i = 0; i < grades.length; i++){\n    var grade = grades[i];\n\
    \    var letter_grade = \"\";\n    if (grade >= 4.0){\n      letter_grade = \"\
    A+\";\n    } else if (grade >= 3.7){\n      letter_grade = \"A\";\n    } else\
    \ if (grade >= 3.3){\n      letter_grade = \"A-\";\n    } else if (grade >= 3.0){\n\
    \      letter_grade = \"B+\";\n    } else if (grade >= 2.7){\n      letter_grade\
    \ = \"B\";\n    } else if (grade >= 2.3){\n      letter_grade = \"B-\";\n    }\
    \ else if (grade >= 2.0){\n      letter_grade = \"C+\";\n    } else if (grade\
    \ >= 1.7){\n      letter_grade = \"C\";\n    } else if (grade >= 1.3){\n     \
    \ letter_grade = \"C-\";\n    } else if (grade >= 1.0){\n      letter_grade =\
    \ \"D+\";\n    } else if (grade >= 0.7){\n      letter_grade = \"D\";\n    } else\
    \ if (grade >= 0.0){\n      letter_grade = \"D-\";\n    } else {\n      letter_grade\
    \ = \"E\";\n    }\n    final_grades.push(letter_grade);\n  }\n  return final_grades;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpk4qveua_.js:65:10)\n\
    \    at Object.<anonymous> (/tmp/tmpk4qveua_.js:73:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ grade_letter = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ === 4.0){\n            grade_letter.push(\"A+\");\n        }\n        else if(grades[i]\
    \ >= 3.7){\n            grade_letter.push(\"A\");\n        }\n        else if(grades[i]\
    \ >= 3.3){\n            grade_letter.push(\"A-\");\n        }\n        else if(grades[i]\
    \ >= 3.0){\n            grade_letter.push(\"B+\");\n        }\n        else if(grades[i]\
    \ >= 2.7){\n            grade_letter.push(\"B\");\n        }\n        else if(grades[i]\
    \ >= 2.3){\n            grade_letter.push(\"B-\");\n        }\n        else if(grades[i]\
    \ >= 2.0){\n            grade_letter.push(\"C+\");\n        }\n        else if(grades[i]\
    \ >= 1.7){\n            grade_letter.push(\"C\");\n        }\n        else if(grades[i]\
    \ >= 1.3){\n            grade_letter.push(\"C-\");\n        }\n        else if(grades[i]\
    \ >= 1.0){\n            grade_letter.push(\"D+\");\n        }\n        else if(grades[i]\
    \ >= 0.7){\n            grade_letter.push(\"D\");\n        }\n        else if(grades[i]\
    \ >= 0.0){\n            grade_letter.push(\"D-\");\n        }\n        else{\n\
    \            grade_letter.push(\"E\");\n        }\n    }\n    return grade_letter;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpnjk0ka7r.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnjk0ka7r.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var grade_letter\
    \ = [];\n  for (var i = 0; i < grades.length; i++){\n    if (grades[i] >= 4.0){\n\
    \      grade_letter.push(\"A+\");\n    }\n    else if (grades[i] >= 3.7){\n  \
    \    grade_letter.push(\"A\");\n    }\n    else if (grades[i] >= 3.3){\n     \
    \ grade_letter.push(\"A-\");\n    }\n    else if (grades[i] >= 3.0){\n      grade_letter.push(\"\
    B+\");\n    }\n    else if (grades[i] >= 2.7){\n      grade_letter.push(\"B\"\
    );\n    }\n    else if (grades[i] >= 2.3){\n      grade_letter.push(\"B-\");\n\
    \    }\n    else if (grades[i] >= 2.0){\n      grade_letter.push(\"C+\");\n  \
    \  }\n    else if (grades[i] >= 1.7){\n      grade_letter.push(\"C\");\n    }\n\
    \    else if (grades[i] >= 1.3){\n      grade_letter.push(\"C-\");\n    }\n  \
    \  else if (grades[i] >= 1.0){\n      grade_letter.push(\"D+\");\n    }\n    else\
    \ if (grades[i] >= 0.7){\n      grade_letter.push(\"D\");\n    }\n    else if\
    \ (grades[i] >= 0.0){\n      grade_letter.push(\"D-\");\n    }\n    else if (grades[i]\
    \ === 0.0){\n      grade_letter.push(\"E\");\n    }\n  }\n  return grade_letter;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp1yrbctpi.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmp1yrbctpi.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ results = [];\n    for (i = 0; i < grades.length; i++) {\n        if (grades[i]\
    \ >= 4.0) {\n            results.push(\"A+\");\n        } else if (grades[i] >=\
    \ 3.7) {\n            results.push(\"A\");\n        } else if (grades[i] >= 3.3)\
    \ {\n            results.push(\"A-\");\n        } else if (grades[i] >= 3.0) {\n\
    \            results.push(\"B+\");\n        } else if (grades[i] >= 2.7) {\n \
    \           results.push(\"B\");\n        } else if (grades[i] >= 2.3) {\n   \
    \         results.push(\"B-\");\n        } else if (grades[i] >= 2.0) {\n    \
    \        results.push(\"C+\");\n        } else if (grades[i] >= 1.7) {\n     \
    \       results.push(\"C\");\n        } else if (grades[i] >= 1.3) {\n       \
    \     results.push(\"C-\");\n        } else if (grades[i] >= 1.0) {\n        \
    \    results.push(\"D+\");\n        } else if (grades[i] >= 0.7) {\n         \
    \   results.push(\"D\");\n        } else if (grades[i] >= 0.0) {\n           \
    \ results.push(\"D-\");\n        } else {\n            results.push(\"E\");\n\
    \        }\n    }\n    return results;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpvpp2yzwm.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvpp2yzwm.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    return\
    \ grades.map(grade => {\n      if (grade >= 4.0) return \"A+\";\n      if (grade\
    \ >= 3.7) return \"A\";\n      if (grade >= 3.3) return \"A-\";\n      if (grade\
    \ >= 3.0) return \"B+\";\n      if (grade >= 2.7) return \"B\";\n      if (grade\
    \ >= 2.3) return \"B-\";\n      if (grade >= 2.0) return \"C+\";\n      if (grade\
    \ >= 1.7) return \"C\";\n      if (grade >= 1.3) return \"C-\";\n      if (grade\
    \ >= 1.0) return \"D+\";\n      if (grade >= 0.7) return \"D\";\n      if (grade\
    \ >= 0.0) return \"D-\";\n      return \"E\";\n    });\n  }\n  \n  // #13\n  //\
    \ You are a college student at UC Berkeley. Today is the day of your first midterm.\n\
    \  // The professor is using a new algorithm to grade this midterm.\n  // You\
    \ have to write a function that can output an array of letter grades using the\
    \ following table:\n  // Score       |    Letter grade\n  // > 100           \
    \     A+\n  // > 90                 A \n  // > 80                 A- \n  // >\
    \ 70                 B+\n  // > 60                 B \n  // > 50             \
    \    B-\n  // > 40                 C+\n  // > 30                 C\n  // > 20\
    \                 C-\n  // > 10                 D+ \n  // > 0                \
    \  D \n  // 0                  E\n  // Example:\n  // >>> midterm_grade([92, 83,\
    \ 27, 55, 36, 44, 73, 92, 100, 90])\n  // [\"A\", \"A-\", \"C-\", \"B-\", \"C+\"\
    , \"C+\", \"B+\", \"A\", \"A+\", \"A\"]\n  function midterm_grade(scores){\n \
    \   return scores.map(score => {\n      if (score > 100) return \"A+\";\n    \
    \  if (score > 90) return \"A\";\n      if (score > 80) return \"A-\";\n     \
    \ if (score > 70) return \"B+\";\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpoh2k6wxg.js:81\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var letter_grades\
    \ = [];\n  for (var i = 0; i < grades.length; i++){\n    var letter_grade = \"\
    \";\n    if (grades[i] < 4 && grades[i] >= 3.7){\n      letter_grade = \"A\";\n\
    \    }\n    else if (grades[i] < 3.7 && grades[i] >= 3.3){\n      letter_grade\
    \ = \"A-\";\n    }\n    else if (grades[i] < 3.3 && grades[i] >= 3.0){\n     \
    \ letter_grade = \"B+\";\n    }\n    else if (grades[i] < 3.0 && grades[i] >=\
    \ 2.7){\n      letter_grade = \"B\";\n    }\n    else if (grades[i] < 2.7 && grades[i]\
    \ >= 2.3){\n      letter_grade = \"B-\";\n    }\n    else if (grades[i] < 2.3\
    \ && grades[i] >= 2.0){\n      letter_grade = \"C+\";\n    }\n    else if (grades[i]\
    \ < 2.0 && grades[i] >= 1.7){\n      letter_grade = \"C\";\n    }\n    else if\
    \ (grades[i] < 1.7 && grades[i] >= 1.3){\n      letter_grade = \"C-\";\n    }\n\
    \    else if (grades[i] < 1.3 && grades[i] >= 1.0){\n      letter_grade = \"D+\"\
    ;\n    }\n    else if (grades[i] < 1.0 && grades[i] >= 0.7){\n      letter_grade\
    \ = \"D\";\n    }\n    else if (grades[i] < 0.7 && grades[i] >= 0.0){\n      letter_grade\
    \ = \"D-\";\n    }\n    else if (grades[i] === 0.0){\n      letter_grade = \"\
    E\";\n    }\n    else if (grades[i] === 4.0){\n      letter_grade = \"A+\";\n\
    \    }\n    letter_grades.push(letter_grade);\n  }\n  return letter_grades;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpb0jn183h.js:75:10)\n\
    \    at Object.<anonymous> (/tmp/tmpb0jn183h.js:83:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    grade_symbols\
    \ = []\n    for (let grade of grades){\n        if (grade >= 4.0){\n         \
    \   grade_symbols.push(\"A+\")\n        }\n        else if (grade >= 3.7){\n \
    \           grade_symbols.push(\"A\")\n        }\n        else if (grade >= 3.3){\n\
    \            grade_symbols.push(\"A-\")\n        }\n        else if (grade >=\
    \ 3.0){\n            grade_symbols.push(\"B+\")\n        }\n        else if (grade\
    \ >= 2.7){\n            grade_symbols.push(\"B\")\n        }\n        else if\
    \ (grade >= 2.3){\n            grade_symbols.push(\"B-\")\n        }\n       \
    \ else if (grade >= 2.0){\n            grade_symbols.push(\"C+\")\n        }\n\
    \        else if (grade >= 1.7){\n            grade_symbols.push(\"C\")\n    \
    \    }\n        else if (grade >= 1.3){\n            grade_symbols.push(\"C-\"\
    )\n        }\n        else if (grade >= 1.0){\n            grade_symbols.push(\"\
    D+\")\n        }\n        else if (grade >= 0.7){\n            grade_symbols.push(\"\
    D\")\n        }\n        else if (grade >= 0.0){\n            grade_symbols.push(\"\
    D-\")\n        }\n        else{\n            grade_symbols.push(\"E\")\n     \
    \   }\n    }\n    return grade_symbols\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpo4jv3dx7.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo4jv3dx7.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    const\
    \ result = [];\n    for(i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ >= 4.0){\n            result.push(\"A+\");\n        }\n        else if(grades[i]\
    \ > 3.7){\n            result.push(\"A\");\n        }\n        else if(grades[i]\
    \ > 3.3){\n            result.push(\"A-\");\n        }\n        else if(grades[i]\
    \ > 3.0){\n            result.push(\"B+\");\n        }\n        else if(grades[i]\
    \ > 2.7){\n            result.push(\"B\");\n        }\n        else if(grades[i]\
    \ > 2.3){\n            result.push(\"B-\");\n        }\n        else if(grades[i]\
    \ > 2.0){\n            result.push(\"C+\");\n        }\n        else if(grades[i]\
    \ > 1.7){\n            result.push(\"C\");\n        }\n        else if(grades[i]\
    \ > 1.3){\n            result.push(\"C-\");\n        }\n        else if(grades[i]\
    \ > 1.0){\n            result.push(\"D+\");\n        }\n        else if(grades[i]\
    \ > 0.7){\n            result.push(\"D\");\n        }\n        else if(grades[i]\
    \ > 0.0){\n            result.push(\"D-\");\n        }\n        else{\n      \
    \      result.push(\"E\");\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar gpa_letter_grade\
    \ = {\n\t\t\"4.0\": \"A+\",\n\t\t\"3.7\": \"A\",\n\t\t\"3.3\": \"A-\",\n\t\t\"\
    3.0\": \"B+\",\n\t\t\"2.7\": \"B\",\n\t\t\"2.3\": \"B-\",\n\t\t\"2.0\": \"C+\"\
    ,\n\t\t\"1.7\": \"C\",\n\t\t\"1.3\": \"C-\",\n\t\t\"1.0\": \"D+\",\n\t\t\"0.7\"\
    : \"D\",\n\t\t\"0.0\": \"D-\",\n\t\t\"0.0\": \"E\"\n\t};\n\tvar letter_grades\
    \ = [];\n\tfor (var i = 0; i < grades.length; i++) {\n\t\tvar letter_grade = \"\
    \";\n\t\tif (grades[i] >= 4.0) {\n\t\t\tletter_grade = gpa_letter_grade[\"4.0\"\
    ];\n\t\t} else if (grades[i] >= 3.7) {\n\t\t\tletter_grade = gpa_letter_grade[\"\
    3.7\"];\n\t\t} else if (grades[i] >= 3.3) {\n\t\t\tletter_grade = gpa_letter_grade[\"\
    3.3\"];\n\t\t} else if (grades[i] >= 3.0) {\n\t\t\tletter_grade = gpa_letter_grade[\"\
    3.0\"];\n\t\t} else if (grades[i] >= 2.7) {\n\t\t\tletter_grade = gpa_letter_grade[\"\
    2.7\"];\n\t\t} else if (grades[i] >= 2.3) {\n\t\t\tletter_grade = gpa_letter_grade[\"\
    2.3\"];\n\t\t} else if (grades[i] >= 2.0) {\n\t\t\tletter_grade = gpa_letter_grade[\"\
    2.0\"];\n\t\t} else if (grades[i] >= 1.7) {\n\t\t\tletter_grade = gpa_letter_grade[\"\
    1.7\"];\n\t\t} else if (grades[i] >= 1.3) {\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpdazv0j1l.js:72\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  const\
    \ cutoff = [1.0, 1.3, 1.7, 2.0, 2.3, 2.7, 3.0, 3.3, 3.7, 4.0]\n  const letter\
    \ = [\"D+\", \"D\", \"D-\", \"C+\", \"C\", \"C-\", \"B+\", \"B\", \"B-\", \"A+\"\
    , \"A\", \"A-\"]\n  let result = [];\n  for (let i=0; i<grades.length; i++){\n\
    \    if (grades[i] == 4.0){\n      result.push(\"A+\")\n    } else if (grades[i]\
    \ == 0){\n      result.push(\"E\")\n    } else {\n      for (let j=0; j<cutoff.length;\
    \ j++){\n        if (grades[i]>cutoff[j]){\n          result.push(letter[j])\n\
    \          break\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'D+',\n  'D+',\n  'D+',\n  'D+'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpu2m15aaq.js:49:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu2m15aaq.js:57:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'D+',\
    \ 'D+', 'D+', 'D+' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar letter_grades\
    \ = []\n\tfor (var i = 0; i < grades.length; i++){\n\t\tif (grades[i] == 4.0){\n\
    \t\t\tletter_grades.push(\"A+\")\n\t\t}\n\t\telse if (grades[i] > 3.7){\n\t\t\t\
    letter_grades.push(\"A\")\n\t\t}\n\t\telse if (grades[i] > 3.3){\n\t\t\tletter_grades.push(\"\
    A-\")\n\t\t}\n\t\telse if (grades[i] > 3.0){\n\t\t\tletter_grades.push(\"B+\"\
    )\n\t\t}\n\t\telse if (grades[i] > 2.7){\n\t\t\tletter_grades.push(\"B\")\n\t\t\
    }\n\t\telse if (grades[i] > 2.3){\n\t\t\tletter_grades.push(\"B-\")\n\t\t}\n\t\
    \telse if (grades[i] > 2.0){\n\t\t\tletter_grades.push(\"C+\")\n\t\t}\n\t\telse\
    \ if (grades[i] > 1.7){\n\t\t\tletter_grades.push(\"C\")\n\t\t}\n\t\telse if (grades[i]\
    \ > 1.3){\n\t\t\tletter_grades.push(\"C-\")\n\t\t}\n\t\telse if (grades[i] > 1.0){\n\
    \t\t\tletter_grades.push(\"D+\")\n\t\t}\n\t\telse if (grades[i] > 0.7){\n\t\t\t\
    letter_grades.push(\"D\")\n\t\t}\n\t\telse if (grades[i] > 0.0){\n\t\t\tletter_grades.push(\"\
    D-\")\n\t\t}\n\t\telse {\n\t\t\tletter_grades.push(\"E\")\n\t\t}\n\t}\n\treturn\
    \ letter_grades\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let grade_array\
    \ = [];\n  for (let i = 0; i < grades.length; i++){\n    if (grades[i] >= 4.0){\n\
    \      grade_array.push(\"A+\");\n    } else if (grades[i] >= 3.7){\n      grade_array.push(\"\
    A\");\n    } else if (grades[i] >= 3.3){\n      grade_array.push(\"A-\");\n  \
    \  } else if (grades[i] >= 3.0){\n      grade_array.push(\"B+\");\n    } else\
    \ if (grades[i] >= 2.7){\n      grade_array.push(\"B\");\n    } else if (grades[i]\
    \ >= 2.3){\n      grade_array.push(\"B-\");\n    } else if (grades[i] >= 2.0){\n\
    \      grade_array.push(\"C+\");\n    } else if (grades[i] >= 1.7){\n      grade_array.push(\"\
    C\");\n    } else if (grades[i] >= 1.3){\n      grade_array.push(\"C-\");\n  \
    \  } else if (grades[i] >= 1.0){\n      grade_array.push(\"D+\");\n    } else\
    \ if (grades[i] >= 0.7){\n      grade_array.push(\"D\");\n    } else if (grades[i]\
    \ >= 0.0){\n      grade_array.push(\"D-\");\n    } else {\n      grade_array.push(\"\
    E\");\n    }\n  }\n  return grade_array;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpggb7g4m_.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpggb7g4m_.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    const\
    \ number_to_letter = {\n        '4.0':'A+',\n        '3.7':'A',\n        '3.3':'A-',\n\
    \        '3.0':'B+',\n        '2.7':'B',\n        '2.3':'B-',\n        '2.0':'C+',\n\
    \        '1.7':'C',\n        '1.3':'C-',\n        '1.0':'D+',\n        '0.7':'D',\n\
    \        '0.0':'D-',\n        '-1.0':'E'\n    }\n    let result = []\n    for(const\
    \ grade of grades){\n        const grade_options = Object.keys(number_to_letter)\n\
    \        for(const option of grade_options){\n            if(grade >= parseFloat(option)){\n\
    \                result.push(number_to_letter[option])\n                break\n\
    \            }\n        }\n    }\n    return result\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpboemsk6y.js:57:10)\n\
    \    at Object.<anonymous> (/tmp/tmpboemsk6y.js:65:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ result = []\n    var scores = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3,\
    \ 1.0, 0.7, 0.0]\n    var letter_grades = [\"A+\", \"A\", \"A-\", \"B+\", \"B\"\
    , \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"E\"]\n    for (i = 0;\
    \ i < grades.length; i++){\n        for (j = 0; j < scores.length; j++){\n   \
    \         if (grades[i] == scores[j]){\n                result.push(letter_grades[j])\n\
    \            }\n            else if (grades[i] >= scores[0]){\n              \
    \  result.push(letter_grades[0])\n            }\n            else if (grades[i]\
    \ < scores[j] && grades[i] >= scores[j+1]){\n                result.push(letter_grades[j+1])\n\
    \            }\n        }\n    }\n    return result\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'A+',\n  'A+',\n  'A+',\n  'A+',\n  'A+',\n  'A+',\n  'A+',\n  'A+',\n  'A+',\n\
    \  'A+',\n  'A+',\n  'B+',\n  'B+',\n  'C',\n  'C',\n  'C+',\n  'C+',\n  'A-'\n\
    ]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n\
    ]\n    at test (/tmp/tmpynfgur7o.js:47:10)\n    at Object.<anonymous> (/tmp/tmpynfgur7o.js:55:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'A+',\
    \ 'A+', 'A+', 'A+',\n    'A+', 'A+', 'A+', 'A+',\n    'A+', 'A+', 'A+', 'A+',\n\
    \    'B+', 'B+', 'C',  'C',\n    'C+', 'C+', 'A-'\n  ],\n  expected: [ 'A+', 'B',\
    \ 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    //Create\
    \ an empty array\n    let letter_grades = [];\n    //iterate through the grades\
    \ array\n    for(let i = 0; i < grades.length; i++){\n        //if gpa is greater\
    \ than or equal to 4.0, push A+ to the letter_grades array\n        if(grades[i]\
    \ >= 4.0){\n            letter_grades.push(\"A+\");\n        }\n        //if gpa\
    \ is greater than or equal to 3.7, push A to the letter_grades array\n       \
    \ else if(grades[i] >= 3.7){\n            letter_grades.push(\"A\");\n       \
    \ }\n        //if gpa is greater than or equal to 3.3, push A- to the letter_grades\
    \ array\n        else if(grades[i] >= 3.3){\n            letter_grades.push(\"\
    A-\");\n        }\n        //if gpa is greater than or equal to 3.0, push B+ to\
    \ the letter_grades array\n        else if(grades[i] >= 3.0){\n            letter_grades.push(\"\
    B+\");\n        }\n        //if gpa is greater than or equal to 2.7, push B to\
    \ the letter_grades array\n        else if(grades[i] >= 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        //if gpa is greater than or equal to 2.3, push B- to\
    \ the letter_grades array\n        else if(grades[i] >= 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        //if gpa is greater than or equal to 2.0, push C+ to\
    \ the letter_grades array\n        else if(grades[i] >= 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        //if gpa is greater than or equal to 1.7, push C to\
    \ the letter_grades array\n        else if(grades[i] >= 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        //if gpa is greater than or equal to 1.3, push C- to\
    \ the letter_grades array\n        else if(grades[i] >= 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp4nl_ltsm.js:77\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades=[];\n    for(var i=0; i<grades.length; i++){\n        if(grades[i]==4.0){\n\
    \            letter_grades.push(\"A+\");\n        }\n        else if(grades[i]>3.7){\n\
    \            letter_grades.push(\"A\");\n        }\n        else if(grades[i]>3.3){\n\
    \            letter_grades.push(\"A-\");\n        }\n        else if(grades[i]>3.0){\n\
    \            letter_grades.push(\"B+\");\n        }\n        else if(grades[i]>2.7){\n\
    \            letter_grades.push(\"B\");\n        }\n        else if(grades[i]>2.3){\n\
    \            letter_grades.push(\"B-\");\n        }\n        else if(grades[i]>2.0){\n\
    \            letter_grades.push(\"C+\");\n        }\n        else if(grades[i]>1.7){\n\
    \            letter_grades.push(\"C\");\n        }\n        else if(grades[i]>1.3){\n\
    \            letter_grades.push(\"C-\");\n        }\n        else if(grades[i]>1.0){\n\
    \            letter_grades.push(\"D+\");\n        }\n        else if(grades[i]>0.7){\n\
    \            letter_grades.push(\"D\");\n        }\n        else if(grades[i]>0.0){\n\
    \            letter_grades.push(\"D-\");\n        }\n        else{\n         \
    \   letter_grades.push(\"E\");\n        }\n    }\n    return letter_grades;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    for(var\
    \ i = 0; i < grades.length; i++){\n        if(grades[i] >= 4.0){\n           \
    \ grades[i] = \"A+\";\n        }\n        else if(grades[i] >= 3.7){\n       \
    \     grades[i] = \"A\";\n        }\n        else if(grades[i] >= 3.3){\n    \
    \        grades[i] = \"A-\";\n        }\n        else if(grades[i] >= 3.0){\n\
    \            grades[i] = \"B+\";\n        }\n        else if(grades[i] >= 2.7){\n\
    \            grades[i] = \"B\";\n        }\n        else if(grades[i] >= 2.3){\n\
    \            grades[i] = \"B-\";\n        }\n        else if(grades[i] >= 2.0){\n\
    \            grades[i] = \"C+\";\n        }\n        else if(grades[i] >= 1.7){\n\
    \            grades[i] = \"C\";\n        }\n        else if(grades[i] >= 1.3){\n\
    \            grades[i] = \"C-\";\n        }\n        else if(grades[i] >= 1.0){\n\
    \            grades[i] = \"D+\";\n        }\n        else if(grades[i] >= 0.7){\n\
    \            grades[i] = \"D\";\n        }\n        else if(grades[i] >= 0.0){\n\
    \            grades[i] = \"D-\";\n        }\n        else if(grades[i] == 0.0){\n\
    \            grades[i] = \"E\";\n        }\n    }\n    return grades;\n}\nnumerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]);\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdh7l5axt.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdh7l5axt.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letter_grades = [];\n    for (let i = 0; i < grades.length; i++) {\n       \
    \ let value = grades[i];\n        if (value == 4.0) {\n            letter_grades.push(\"\
    A+\");\n        } else if (value > 3.7) {\n            letter_grades.push(\"A\"\
    );\n        } else if (value > 3.3) {\n            letter_grades.push(\"A-\");\n\
    \        } else if (value > 3.0) {\n            letter_grades.push(\"B+\");\n\
    \        } else if (value > 2.7) {\n            letter_grades.push(\"B\");\n \
    \       } else if (value > 2.3) {\n            letter_grades.push(\"B-\");\n \
    \       } else if (value > 2.0) {\n            letter_grades.push(\"C+\");\n \
    \       } else if (value > 1.7) {\n            letter_grades.push(\"C\");\n  \
    \      } else if (value > 1.3) {\n            letter_grades.push(\"C-\");\n  \
    \      } else if (value > 1.0) {\n            letter_grades.push(\"D+\");\n  \
    \      } else if (value > 0.7) {\n            letter_grades.push(\"D\");\n   \
    \     } else if (value > 0.0) {\n            letter_grades.push(\"D-\");\n   \
    \     } else {\n            letter_grades.push(\"E\");\n        }\n    }\n   \
    \ return letter_grades;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    return\
    \ grades.map(function(grade){\n        if(grade >= 4.0){\n            return \"\
    A+\";\n        }else if(grade >= 3.7){\n            return \"A\";\n        }else\
    \ if(grade >= 3.3){\n            return \"A-\";\n        }else if(grade >= 3.0){\n\
    \            return \"B+\";\n        }else if(grade >= 2.7){\n            return\
    \ \"B\";\n        }else if(grade >= 2.3){\n            return \"B-\";\n      \
    \  }else if(grade >= 2.0){\n            return \"C+\";\n        }else if(grade\
    \ >= 1.7){\n            return \"C\";\n        }else if(grade >= 1.3){\n     \
    \       return \"C-\";\n        }else if(grade >= 1.0){\n            return \"\
    D+\";\n        }else if(grade >= 0.7){\n            return \"D\";\n        }else\
    \ if(grade > 0.0){\n            return \"D-\";\n        }else{\n            return\
    \ \"E\";\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp41pq9g0j.js:60:10)\n\
    \    at Object.<anonymous> (/tmp/tmp41pq9g0j.js:68:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ answer = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ === 4.0){\n            answer.push(\"A+\");\n        }else if(grades[i] >= 3.7){\n\
    \            answer.push(\"A\");\n        }else if(grades[i] >= 3.3){\n      \
    \      answer.push(\"A-\");\n        }else if(grades[i] >= 3.0){\n           \
    \ answer.push(\"B+\");\n        }else if(grades[i] >= 2.7){\n            answer.push(\"\
    B\");\n        }else if(grades[i] >= 2.3){\n            answer.push(\"B-\");\n\
    \        }else if(grades[i] >= 2.0){\n            answer.push(\"C+\");\n     \
    \   }else if(grades[i] >= 1.7){\n            answer.push(\"C\");\n        }else\
    \ if(grades[i] >= 1.3){\n            answer.push(\"C-\");\n        }else if(grades[i]\
    \ >= 1.0){\n            answer.push(\"D+\");\n        }else if(grades[i] >= 0.7){\n\
    \            answer.push(\"D\");\n        }else if(grades[i] >= 0.0){\n      \
    \      answer.push(\"D-\");\n        }else{\n            answer.push(\"E\");\n\
    \        }\n    }\n    return answer;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpd4nxe3ae.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpd4nxe3ae.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = [];\n    for (var grade of grades){\n        if (grade >= 4.0){\n\
    \            letter_grades.push(\"A+\");\n        }\n        else if (grade >=\
    \ 3.7){\n            letter_grades.push(\"A\");\n        }\n        else if (grade\
    \ >= 3.3){\n            letter_grades.push(\"A-\");\n        }\n        else if\
    \ (grade >= 3.0){\n            letter_grades.push(\"B+\");\n        }\n      \
    \  else if (grade >= 2.7){\n            letter_grades.push(\"B\");\n        }\n\
    \        else if (grade >= 2.3){\n            letter_grades.push(\"B-\");\n  \
    \      }\n        else if (grade >= 2.0){\n            letter_grades.push(\"C+\"\
    );\n        }\n        else if (grade >= 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grade >= 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grade >= 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grade >= 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grade >= 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else{\n            letter_grades.push(\"E\");\n   \
    \     }\n    }\n    return letter_grades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpstisrif2.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpstisrif2.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    const\
    \ rounded_grades = grades.map(Math.round);\n    const gpa_to_letter_grade = {\n\
    \        4: \"A+\",\n        3: \"A\",\n        2: \"A-\",\n        1: \"B+\"\
    ,\n        0: \"B\",\n        -1: \"B-\",\n        -2: \"C+\",\n        -3: \"\
    C\",\n        -4: \"C-\",\n        -5: \"D+\",\n        -6: \"D\",\n        -7:\
    \ \"D-\",\n        -8: \"E\"\n    }\n    const grade_letters = rounded_grades.map(\n\
    \        function(grade){\n            return gpa_to_letter_grade[grade];\n  \
    \      }\n    );\n    return grade_letters;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpyb873x6l.js:31\n        -1: \"B-\",\n        ^\n\nSyntaxError:\
    \ Unexpected token '-'\n    at Object.compileFunction (node:vm:360:18)\n    at\
    \ wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\treturn\
    \ grades.map(function(grade){\n\t\tif(grade >= 4.0){\n\t\t\treturn \"A+\";\n\t\
    \t}\n\t\telse if(grade >= 3.7){\n\t\t\treturn \"A\";\n\t\t}\n\t\telse if(grade\
    \ >= 3.3){\n\t\t\treturn \"A-\";\n\t\t}\n\t\telse if(grade >= 3.0){\n\t\t\treturn\
    \ \"B+\";\n\t\t}\n\t\telse if(grade >= 2.7){\n\t\t\treturn \"B\";\n\t\t}\n\t\t\
    else if(grade >= 2.3){\n\t\t\treturn \"B-\";\n\t\t}\n\t\telse if(grade >= 2.0){\n\
    \t\t\treturn \"C+\";\n\t\t}\n\t\telse if(grade >= 1.7){\n\t\t\treturn \"C\";\n\
    \t\t}\n\t\telse if(grade >= 1.3){\n\t\t\treturn \"C-\";\n\t\t}\n\t\telse if(grade\
    \ >= 1.0){\n\t\t\treturn \"D+\";\n\t\t}\n\t\telse if(grade >= 0.7){\n\t\t\treturn\
    \ \"D\";\n\t\t}\n\t\telse if(grade >= 0.0){\n\t\t\treturn \"D-\";\n\t\t}\n\t\t\
    else{\n\t\t\treturn \"E\";\n\t\t}\n\t});\n}\nnumerical_letter_grade([4.0, 3, 1.7,\
    \ 2, 3.5]);\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp4exqzyuy.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4exqzyuy.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tlet results\
    \ = [];\n\tlet result;\n\tfor(let g of grades){\n\t\tif(g == 4.0){\n\t\t\tresult\
    \ = \"A+\";\n\t\t}\n\t\telse if(g > 3.7){\n\t\t\tresult = \"A\";\n\t\t}\n\t\t\
    else if(g > 3.3){\n\t\t\tresult = \"A-\";\n\t\t}\n\t\telse if(g > 3.0){\n\t\t\t\
    result = \"B+\";\n\t\t}\n\t\telse if(g > 2.7){\n\t\t\tresult = \"B\";\n\t\t}\n\
    \t\telse if(g > 2.3){\n\t\t\tresult = \"B-\";\n\t\t}\n\t\telse if(g > 2.0){\n\t\
    \t\tresult = \"C+\";\n\t\t}\n\t\telse if(g > 1.7){\n\t\t\tresult = \"C\";\n\t\t\
    }\n\t\telse if(g > 1.3){\n\t\t\tresult = \"C-\";\n\t\t}\n\t\telse if(g > 1.0){\n\
    \t\t\tresult = \"D+\";\n\t\t}\n\t\telse if(g > 0.7){\n\t\t\tresult = \"D\";\n\t\
    \t}\n\t\telse if(g > 0.0){\n\t\t\tresult = \"D-\";\n\t\t}\n\t\telse{\n\t\t\tresult\
    \ = \"E\";\n\t\t}\n\t\tresults.push(result);\n\t}\n\treturn results;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ grade_map = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"\
    C-\", \"D+\", \"D\", \"D-\", \"E\"];\n    var grade_range = [4.0, 3.7, 3.3, 3.0,\
    \ 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0];\n    var letter_grades = [];\n    for(i=0;\
    \ i<grades.length; i++){\n        for(j=0; j<grade_range.length; j++){\n     \
    \       if(grades[i] >= grade_range[j]){\n                letter_grades.push(grade_map[j]);\n\
    \                break;\n            }\n        }\n    }\n    return letter_grades;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpw8g5htuk.js:42:10)\n\
    \    at Object.<anonymous> (/tmp/tmpw8g5htuk.js:50:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    for(let\
    \ i = 0; i < grades.length; i++){\n        switch(true){\n            case (grades[i]\
    \ >= 4.0):\n                grades[i] = \"A+\";\n                break;\n    \
    \        case (grades[i] >= 3.7):\n                grades[i] = \"A\";\n      \
    \          break;\n            case (grades[i] >= 3.3):\n                grades[i]\
    \ = \"A-\";\n                break;\n            case (grades[i] >= 3.0):\n  \
    \              grades[i] = \"B+\";\n                break;\n            case (grades[i]\
    \ >= 2.7):\n                grades[i] = \"B\";\n                break;\n     \
    \       case (grades[i] >= 2.3):\n                grades[i] = \"B-\";\n      \
    \          break;\n            case (grades[i] >= 2.0):\n                grades[i]\
    \ = \"C+\";\n                break;\n            case (grades[i] >= 1.7):\n  \
    \              grades[i] = \"C\";\n                break;\n            case (grades[i]\
    \ >= 1.3):\n                grades[i] = \"C-\";\n                break;\n    \
    \        case (grades[i] >= 1.0):\n                grades[i] = \"D+\";\n     \
    \           break;\n            case (grades[i] >= 0.7):\n                grades[i]\
    \ = \"D\";\n                break;\n            case (grades[i] >= 0.0):\n   \
    \             grades[i] = \"D-\";\n                break;\n            case (grades[i]\
    \ < 0.0):\n                grades[i] = \"E\";\n                break;\n      \
    \  }\n    }\n    return grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp3w7mlw5s.js:75:10)\n\
    \    at Object.<anonymous> (/tmp/tmp3w7mlw5s.js:83:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ result = [];\n    for(i=0; i<grades.length; i++){\n        if(grades[i]>=4.0){\n\
    \            result.push(\"A+\");\n        }else if(grades[i]>=3.7){\n       \
    \     result.push(\"A\");\n        }else if(grades[i]>=3.3){\n            result.push(\"\
    A-\");\n        }else if(grades[i]>=3.0){\n            result.push(\"B+\");\n\
    \        }else if(grades[i]>=2.7){\n            result.push(\"B\");\n        }else\
    \ if(grades[i]>=2.3){\n            result.push(\"B-\");\n        }else if(grades[i]>=2.0){\n\
    \            result.push(\"C+\");\n        }else if(grades[i]>=1.7){\n       \
    \     result.push(\"C\");\n        }else if(grades[i]>=1.3){\n            result.push(\"\
    C-\");\n        }else if(grades[i]>=1.0){\n            result.push(\"D+\");\n\
    \        }else if(grades[i]>=0.7){\n            result.push(\"D\");\n        }else\
    \ if(grades[i]>=0.0){\n            result.push(\"D-\");\n        }else if(grades[i]<0.0){\n\
    \            result.push(\"E\");\n        }\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp4fku07do.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4fku07do.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ grade = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ === 4.0){\n            grade.push(\"A+\");\n        }else if(grades[i] > 3.7){\n\
    \            grade.push(\"A\");\n        }else if(grades[i] > 3.3){\n        \
    \    grade.push(\"A-\");\n        }else if(grades[i] > 3.0){\n            grade.push(\"\
    B+\");\n        }else if(grades[i] > 2.7){\n            grade.push(\"B\");\n \
    \       }else if(grades[i] > 2.3){\n            grade.push(\"B-\");\n        }else\
    \ if(grades[i] > 2.0){\n            grade.push(\"C+\");\n        }else if(grades[i]\
    \ > 1.7){\n            grade.push(\"C\");\n        }else if(grades[i] > 1.3){\n\
    \            grade.push(\"C-\");\n        }else if(grades[i] > 1.0){\n       \
    \     grade.push(\"D+\");\n        }else if(grades[i] > 0.7){\n            grade.push(\"\
    D\");\n        }else if(grades[i] > 0.0){\n            grade.push(\"D-\");\n \
    \       }else{\n            grade.push(\"E\");\n        }\n    }\n    return grade;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n   let\
    \ letter_grades = grades.map(gpa => {\n      if (gpa >= 4.0) return \"A+\";\n\
    \      if (gpa >= 3.7) return \"A\";\n      if (gpa >= 3.3) return \"A-\";\n \
    \     if (gpa >= 3.0) return \"B+\";\n      if (gpa >= 2.7) return \"B\";\n  \
    \    if (gpa >= 2.3) return \"B-\";\n      if (gpa >= 2.0) return \"C+\";\n  \
    \    if (gpa >= 1.7) return \"C\";\n      if (gpa >= 1.3) return \"C-\";\n   \
    \   if (gpa >= 1.0) return \"D+\";\n      if (gpa >= 0.7) return \"D\";\n    \
    \  if (gpa >= 0.0) return \"D-\";\n      return \"E\";\n   });\n   return letter_grades;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpnu1ayypd.js:47:10)\n\
    \    at Object.<anonymous> (/tmp/tmpnu1ayypd.js:55:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var result\
    \ = []\n  for (var i = 0; i < grades.length; i++){\n    if (grades[i] >= 4.0){\n\
    \      result.push(\"A+\")\n    } else if (grades[i] >= 3.7){\n      result.push(\"\
    A\")\n    } else if (grades[i] >= 3.3){\n      result.push(\"A-\")\n    } else\
    \ if (grades[i] >= 3.0){\n      result.push(\"B+\")\n    } else if (grades[i]\
    \ >= 2.7){\n      result.push(\"B\")\n    } else if (grades[i] >= 2.3){\n    \
    \  result.push(\"B-\")\n    } else if (grades[i] >= 2.0){\n      result.push(\"\
    C+\")\n    } else if (grades[i] >= 1.7){\n      result.push(\"C\")\n    } else\
    \ if (grades[i] >= 1.3){\n      result.push(\"C-\")\n    } else if (grades[i]\
    \ >= 1.0){\n      result.push(\"D+\")\n    } else if (grades[i] >= 0.7){\n   \
    \   result.push(\"D\")\n    } else if (grades[i] >= 0.0){\n      result.push(\"\
    D-\")\n    } else {\n      result.push(\"E\")\n    }\n  }\n  return result\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp997gbfib.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmp997gbfib.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ result = []\n    for (var i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ === 4.0){\n            result.push(\"A+\")\n        } else if (grades[i] > 3.7){\n\
    \            result.push(\"A\")\n        } else if (grades[i] > 3.3){\n      \
    \      result.push(\"A-\")\n        } else if (grades[i] > 3.0){\n           \
    \ result.push(\"B+\")\n        } else if (grades[i] > 2.7){\n            result.push(\"\
    B\")\n        } else if (grades[i] > 2.3){\n            result.push(\"B-\")\n\
    \        } else if (grades[i] > 2.0){\n            result.push(\"C+\")\n     \
    \   } else if (grades[i] > 1.7){\n            result.push(\"C\")\n        } else\
    \ if (grades[i] > 1.3){\n            result.push(\"C-\")\n        } else if (grades[i]\
    \ > 1.0){\n            result.push(\"D+\")\n        } else if (grades[i] > 0.7){\n\
    \            result.push(\"D\")\n        } else if (grades[i] >= 0.0){\n     \
    \       result.push(\"D-\")\n        } else {\n            result.push(\"E\")\n\
    \        }\n    }\n    return result\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'D-'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'E'\n]\n    at test (/tmp/tmp230mr15l.js:64:10)\n\
    \    at Object.<anonymous> (/tmp/tmp230mr15l.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'D-' ],\n\
    \  expected: [ 'E' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  if (grades\
    \ <= 4.0 && grades >= 3.7){\n      return \"A\";\n  }\n  else if (grades < 3.7\
    \ && grades >= 3.3){\n      return \"A-\";\n  }\n  else if (grades < 3.3 && grades\
    \ >= 3.0){\n      return \"B+\";\n  }\n  else if (grades < 3.0 && grades >= 2.7){\n\
    \      return \"B\";\n  }\n  else if (grades < 2.7 && grades >= 2.3){\n      return\
    \ \"B-\";\n  }\n  else if (grades < 2.3 && grades >= 2.0){\n      return \"C+\"\
    ;\n  }\n  else if (grades < 2.0 && grades >= 1.7){\n      return \"C\";\n  }\n\
    \  else if (grades < 1.7 && grades >= 1.3){\n      return \"C-\";\n  }\n  else\
    \ if (grades < 1.3 && grades >= 1.0){\n      return \"D+\";\n  }\n  else if (grades\
    \ < 1.0 && grades >= 0.7){\n      return \"D\";\n  }\n  else if (grades < 0.7\
    \ && grades >= 0.0){\n      return \"D-\";\n  }\n  else if (grades < 0.0){\n \
    \     return \"E\";\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n\
    \    at test (/tmp/tmphad49pfi.js:67:10)\n    at Object.<anonymous> (/tmp/tmphad49pfi.js:75:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ result = [];\n    for(var i = 0; i < grades.length; i++){\n        var mark\
    \ = grades[i];\n        var letter;\n        if(mark >= 4.0){\n            letter\
    \ = \"A+\";\n        }\n        else if(mark >= 3.7){\n            letter = \"\
    A\";\n        }\n        else if(mark >= 3.3){\n            letter = \"A-\";\n\
    \        }\n        else if(mark >= 3.0){\n            letter = \"B+\";\n    \
    \    }\n        else if(mark >= 2.7){\n            letter = \"B\";\n        }\n\
    \        else if(mark >= 2.3){\n            letter = \"B-\";\n        }\n    \
    \    else if(mark >= 2.0){\n            letter = \"C+\";\n        }\n        else\
    \ if(mark >= 1.7){\n            letter = \"C\";\n        }\n        else if(mark\
    \ >= 1.3){\n            letter = \"C-\";\n        }\n        else if(mark >= 1.0){\n\
    \            letter = \"D+\";\n        }\n        else if(mark >= 0.7){\n    \
    \        letter = \"D\";\n        }\n        else if(mark >= 0.0){\n         \
    \   letter = \"D-\";\n        }\n        else{\n            letter = \"E\";\n\
    \        }\n        result.push(letter);\n    }\n    return result;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpjgha03d9.js:76:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjgha03d9.js:84:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ new_grades=[];\n    for(i=0;i<grades.length;i++){\n        if(grades[i]>=4.0){\n\
    \            new_grades.push(\"A+\");\n        }\n        else if(grades[i]>=3.7){\n\
    \            new_grades.push(\"A\");\n        }\n        else if(grades[i]>=3.3){\n\
    \            new_grades.push(\"A-\");\n        }\n        else if(grades[i]>=3.0){\n\
    \            new_grades.push(\"B+\");\n        }\n        else if(grades[i]>=2.7){\n\
    \            new_grades.push(\"B\");\n        }\n        else if(grades[i]>=2.3){\n\
    \            new_grades.push(\"B-\");\n        }\n        else if(grades[i]>=2.0){\n\
    \            new_grades.push(\"C+\");\n        }\n        else if(grades[i]>=1.7){\n\
    \            new_grades.push(\"C\");\n        }\n        else if(grades[i]>=1.3){\n\
    \            new_grades.push(\"C-\");\n        }\n        else if(grades[i]>=1.0){\n\
    \            new_grades.push(\"D+\");\n        }\n        else if(grades[i]>=0.7){\n\
    \            new_grades.push(\"D\");\n        }\n        else if(grades[i]>=0.0){\n\
    \            new_grades.push(\"D-\");\n        }\n        else if(grades[i]<0.0){\n\
    \            new_grades.push(\"E\");\n        }\n    }\n    return new_grades;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp698lrwtv.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmp698lrwtv.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var gpaLetterGrade\
    \ = {\n    \"4.0\": \"A+\",\n    \"3.7\": \"A\",\n    \"3.3\": \"A-\",\n    \"\
    3.0\": \"B+\",\n    \"2.7\": \"B\",\n    \"2.3\": \"B-\",\n    \"2.0\": \"C+\"\
    ,\n    \"1.7\": \"C\",\n    \"1.3\": \"C-\",\n    \"1.0\": \"D+\",\n    \"0.7\"\
    : \"D\",\n    \"0.0\": \"D-\",\n    \"-1.0\": \"E\"\n  };\n  var newgrades = [];\n\
    \  for (var i = 0; i < grades.length; i++) {\n    var grade = grades[i];\n   \
    \ if (grade >= 4.0) {\n      newgrades.push(gpaLetterGrade[4.0]);\n    } else\
    \ if (grade >= 3.7) {\n      newgrades.push(gpaLetterGrade[3.7]);\n    } else\
    \ if (grade >= 3.3) {\n      newgrades.push(gpaLetterGrade[3.3]);\n    } else\
    \ if (grade >= 3.0) {\n      newgrades.push(gpaLetterGrade[3.0]);\n    } else\
    \ if (grade >= 2.7) {\n      newgrades.push(gpaLetterGrade[2.7]);\n    } else\
    \ if (grade >= 2.3) {\n      newgrades.push(gpaLetterGrade[2.3]);\n    } else\
    \ if (grade >= 2.0) {\n      newgrades.push(gpaLetterGrade[2.0]);\n    } else\
    \ if (grade >= 1.7) {\n      newgrades.push(gpaLetterGrade[1.7]);\n    } else\
    \ if (grade >= 1.3) {\n      newgrades.push(gpaLetterGrade[1.3]);\n    } else\
    \ if (grade >= 1.0) {\n      newgrades.push(gpaLetterGrade[1.0]);\n    } else\
    \ if (grade >= 0.7) {\n      newgrades.push(gpaLetterGrade[0.7]);\n    } else\
    \ if (grade >= 0.0\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmpbafqygam.js:65\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    const\
    \ numerical_letter_grade = ['E', 'D-', 'D', 'D+', 'C-', 'C', 'C+', 'B-', 'B',\
    \ 'B+', 'A-', 'A', 'A+'];\n    let result = [];\n    for(let grade of grades){\n\
    \        let index = Math.floor(grade/0.5);\n        result.push(numerical_letter_grade[index]);\n\
    \    }\n    return result;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'B',\n  'C+',\n\
    \  'D+',\n  'C-',\n  'B-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp9m05vl5c.js:37:10)\n    at Object.<anonymous>\
    \ (/tmp/tmp9m05vl5c.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'B', 'C+',\
    \ 'D+', 'C-', 'B-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    //\
    \ YOUR CODE HERE\n    // console.log(grades)\n    // console.log(grades.length)\n\
    \    let myList = []\n    for (let i = 0; i < grades.length; i++){\n        //\
    \ console.log(grades[i])\n        if (grades[i] >= 4.0){\n            myList.push(\"\
    A+\")\n        }\n        else if (grades[i] >= 3.7){\n            myList.push(\"\
    A\")\n        }\n        else if (grades[i] >= 3.3){\n            myList.push(\"\
    A-\")\n        }\n        else if (grades[i] >= 3.0){\n            myList.push(\"\
    B+\")\n        }\n        else if (grades[i] >= 2.7){\n            myList.push(\"\
    B\")\n        }\n        else if (grades[i] >= 2.3){\n            myList.push(\"\
    B-\")\n        }\n        else if (grades[i] >= 2.0){\n            myList.push(\"\
    C+\")\n        }\n        else if (grades[i] >= 1.7){\n            myList.push(\"\
    C\")\n        }\n        else if (grades[i] >= 1.3){\n            myList.push(\"\
    C-\")\n        }\n        else if (grades[i] >= 1.0){\n            myList.push(\"\
    D+\")\n        }\n        else if (grades[i] >= 0.7){\n            myList.push(\"\
    D\")\n        }\n        else if (grades[i] >= 0.0){\n            myList.push(\"\
    D-\")\n        }\n        else if (grades[i] >= 0.0){\n            myList.push(\"\
    E\")\n        }\n    }\n    return myList\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplqkaw41m.js:77:10)\n\
    \    at Object.<anonymous> (/tmp/tmplqkaw41m.js:85:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    return\
    \ grades.map(function(g){\n        if(g >= 4){\n            return \"A+\";\n \
    \       }\n        else if(g >= 3.7){\n            return \"A\";\n        }\n\
    \        else if(g >= 3.3){\n            return \"A-\";\n        }\n        else\
    \ if(g >= 3){\n            return \"B+\";\n        }\n        else if(g >= 2.7){\n\
    \            return \"B\";\n        }\n        else if(g >= 2.3){\n          \
    \  return \"B-\";\n        }\n        else if(g >= 2){\n            return \"\
    C+\";\n        }\n        else if(g >= 1.7){\n            return \"C\";\n    \
    \    }\n        else if(g >= 1.3){\n            return \"C-\";\n        }\n  \
    \      else if(g >= 1){\n            return \"D+\";\n        }\n        else if(g\
    \ >= 0.7){\n            return \"D\";\n        }\n        else if(g >= 0){\n \
    \           return \"D-\";\n        }\n        else{\n            return \"E\"\
    ;\n        }\n    });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpwvho817a.js:72:10)\n\
    \    at Object.<anonymous> (/tmp/tmpwvho817a.js:80:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letter_grades = [];\n    let i;\n    for (i=0; i<grades.length; i++){\n    \
    \    if (grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n       \
    \ }\n        else if (grades[i] >= 3.7){\n            letter_grades.push(\"A\"\
    );\n        }\n        else if (grades[i] >= 3.3){\n            letter_grades.push(\"\
    A-\");\n        }\n        else if (grades[i] >= 3.0){\n            letter_grades.push(\"\
    B+\");\n        }\n        else if (grades[i] >= 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grades[i] >= 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grades[i] >= 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grades[i] >= 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grades[i] >= 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grades[i] >= 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grades[i] >= 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grades[i] >= 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else{\n            letter_grades.push(\"E\");\n   \
    \     }\n    }\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp0c42ezbm.js:75:10)\n\
    \    at Object.<anonymous> (/tmp/tmp0c42ezbm.js:83:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ result = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ === 4.0){\n            result.push(\"A+\");\n        }\n        else if(grades[i]\
    \ >= 3.7){\n            result.push(\"A\");\n        }\n        else if(grades[i]\
    \ >= 3.3){\n            result.push(\"A-\");\n        }\n        else if(grades[i]\
    \ >= 3.0){\n            result.push(\"B+\");\n        }\n        else if(grades[i]\
    \ >= 2.7){\n            result.push(\"B\");\n        }\n        else if(grades[i]\
    \ >= 2.3){\n            result.push(\"B-\");\n        }\n        else if(grades[i]\
    \ >= 2.0){\n            result.push(\"C+\");\n        }\n        else if(grades[i]\
    \ >= 1.7){\n            result.push(\"C\");\n        }\n        else if(grades[i]\
    \ >= 1.3){\n            result.push(\"C-\");\n        }\n        else if(grades[i]\
    \ >= 1.0){\n            result.push(\"D+\");\n        }\n        else if(grades[i]\
    \ >= 0.7){\n            result.push(\"D\");\n        }\n        else if(grades[i]\
    \ >= 0.0){\n            result.push(\"D-\");\n        }\n        else{\n     \
    \       result.push(\"E\");\n        }\n    }\n    return result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpz_1eceg0.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpz_1eceg0.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977538
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var letter_grades\
    \ = []\n  for (let i = 0; i < grades.length; i++){\n    if (grades[i] === 4.0){\n\
    \      letter_grades.push(\"A+\")\n    } else if (grades[i] > 3.7){\n      letter_grades.push(\"\
    A\")\n    } else if (grades[i] > 3.3){\n      letter_grades.push(\"A-\")\n   \
    \ } else if (grades[i] > 3.0){\n      letter_grades.push(\"B+\")\n    } else if\
    \ (grades[i] > 2.7){\n      letter_grades.push(\"B\")\n    } else if (grades[i]\
    \ > 2.3){\n      letter_grades.push(\"B-\")\n    } else if (grades[i] > 2.0){\n\
    \      letter_grades.push(\"C+\")\n    } else if (grades[i] > 1.7){\n      letter_grades.push(\"\
    C\")\n    } else if (grades[i] > 1.3){\n      letter_grades.push(\"C-\")\n   \
    \ } else if (grades[i] > 1.0){\n      letter_grades.push(\"D+\")\n    } else if\
    \ (grades[i] > 0.7){\n      letter_grades.push(\"D\")\n    } else if (grades[i]\
    \ > 0.0){\n      letter_grades.push(\"D-\")\n    } else {\n      letter_grades.push(\"\
    E\")\n    }\n  }\n  return letter_grades\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var grades\
    \ = [\"A+\", \"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\"\
    , \"D\", \"D-\", \"E\"];\n  var result = [];\n  var letter_grade = 0;\n  var gpa_length\
    \ = grades.length;\n  for(var i = 0; i < gpa_length; i++){\n    if(grades[i] >=\
    \ 4.0){\n      letter_grade = grades[0];\n    }else if(grades[i] >= 3.7){\n  \
    \    letter_grade = grades[1];\n    }else if(grades[i] >= 3.3){\n      letter_grade\
    \ = grades[2];\n    }else if(grades[i] >= 3.0){\n      letter_grade = grades[3];\n\
    \    }else if(grades[i] >= 2.7){\n      letter_grade = grades[4];\n    }else if(grades[i]\
    \ >= 2.3){\n      letter_grade = grades[5];\n    }else if(grades[i] >= 2.0){\n\
    \      letter_grade = grades[6];\n    }else if(grades[i] >= 1.7){\n      letter_grade\
    \ = grades[7];\n    }else if(grades[i] >= 1.3){\n      letter_grade = grades[8];\n\
    \    }else if(grades[i] >= 1.0){\n      letter_grade = grades[9];\n    }else if(grades[i]\
    \ >= 0.7){\n      letter_grade = grades[10];\n    }else if(grades[i] >= 0.0){\n\
    \      letter_grade = grades[11];\n    }else{\n      letter_grade = grades[12];\n\
    \    }\n    result.push(letter_grade);\n  }\n  return result;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'E',\n  'E',\n\
    \  'E',\n  'E',\n  'E',\n  'E',\n  'E',\n  'E',\n  'E',\n  'E',\n  'E',\n  'E',\n\
    \  'E'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n\
    \  'A-'\n]\n    at test (/tmp/tmpa1jt2x8j.js:66:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpa1jt2x8j.js:74:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    'E',\
    \ 'E', 'E', 'E',\n    'E', 'E', 'E', 'E',\n    'E', 'E', 'E', 'E',\n    'E'\n\
    \  ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  return\
    \ grades.map(function(grade){\n    if (grade == 4.0){\n      return \"A+\";\n\
    \    } else if (grade > 3.7){\n      return \"A\";\n    } else if (grade > 3.3){\n\
    \      return \"A-\";\n    } else if (grade > 3.0){\n      return \"B+\";\n  \
    \  } else if (grade > 2.7){\n      return \"B\";\n    } else if (grade > 2.3){\n\
    \      return \"B-\";\n    } else if (grade > 2.0){\n      return \"C+\";\n  \
    \  } else if (grade > 1.7){\n      return \"C\";\n    } else if (grade > 1.3){\n\
    \      return \"C-\";\n    } else if (grade > 1.0){\n      return \"D+\";\n  \
    \  } else if (grade > 0.7){\n      return \"D\";\n    } else if (grade > 0.0){\n\
    \      return \"D-\";\n    } else if (grade == 0.0){\n      return \"E\";\n  \
    \  } else {\n      return \"F\";\n    }\n  });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    return\
    \ grades.map(function(grade){\n        if(grade >= 4.0){\n            return \"\
    A+\";\n        }\n        else if(grade >= 3.7){\n            return \"A\";\n\
    \        }\n        else if(grade >= 3.3){\n            return \"A-\";\n     \
    \   }\n        else if(grade >= 3.0){\n            return \"B+\";\n        }\n\
    \        else if(grade >= 2.7){\n            return \"B\";\n        }\n      \
    \  else if(grade >= 2.3){\n            return \"B-\";\n        }\n        else\
    \ if(grade >= 2.0){\n            return \"C+\";\n        }\n        else if(grade\
    \ >= 1.7){\n            return \"C\";\n        }\n        else if(grade >= 1.3){\n\
    \            return \"C-\";\n        }\n        else if(grade >= 1.0){\n     \
    \       return \"D+\";\n        }\n        else if(grade >= 0.7){\n          \
    \  return \"D\";\n        }\n        else if(grade >= 0.0){\n            return\
    \ \"D-\";\n        }\n        else{\n            return \"E\";\n        }\n  \
    \  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpzi6s74cb.js:72:10)\n\
    \    at Object.<anonymous> (/tmp/tmpzi6s74cb.js:80:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\t//TODO\n\
    \tlet letter_grade = [];\n\tfor(let i = 0; i < grades.length; i++){\n\t\tif(grades[i]\
    \ == 4.0){\n\t\t\tletter_grade.push(\"A+\");\n\t\t}\n\t\telse if(grades[i] > 3.7){\n\
    \t\t\tletter_grade.push(\"A\");\n\t\t}\n\t\telse if(grades[i] > 3.3){\n\t\t\t\
    letter_grade.push(\"A-\");\n\t\t}\n\t\telse if(grades[i] > 3.0){\n\t\t\tletter_grade.push(\"\
    B+\");\n\t\t}\n\t\telse if(grades[i] > 2.7){\n\t\t\tletter_grade.push(\"B\");\n\
    \t\t}\n\t\telse if(grades[i] > 2.3){\n\t\t\tletter_grade.push(\"B-\");\n\t\t}\n\
    \t\telse if(grades[i] > 2.0){\n\t\t\tletter_grade.push(\"C+\");\n\t\t}\n\t\telse\
    \ if(grades[i] > 1.7){\n\t\t\tletter_grade.push(\"C\");\n\t\t}\n\t\telse if(grades[i]\
    \ > 1.3){\n\t\t\tletter_grade.push(\"C-\");\n\t\t}\n\t\telse if(grades[i] > 1.0){\n\
    \t\t\tletter_grade.push(\"D+\");\n\t\t}\n\t\telse if(grades[i] > 0.7){\n\t\t\t\
    letter_grade.push(\"D\");\n\t\t}\n\t\telse if(grades[i] > 0.0){\n\t\t\tletter_grade.push(\"\
    D-\");\n\t\t}\n\t\telse if(grades[i] == 0.0){\n\t\t\tletter_grade.push(\"E\");\n\
    \t\t}\n\t}\n\treturn letter_grade;\n}\nlet grades = [4.0, 3, 1.7, 2, 3.5];\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977538
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ result = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ >= 4.0){\n            result.push(\"A+\");\n        }\n        else if(grades[i]\
    \ >= 3.7){\n            result.push(\"A\");\n        }\n        else if(grades[i]\
    \ >= 3.3){\n            result.push(\"A-\");\n        }\n        else if(grades[i]\
    \ >= 3.0){\n            result.push(\"B+\");\n        }\n        else if(grades[i]\
    \ >= 2.7){\n            result.push(\"B\");\n        }\n        else if(grades[i]\
    \ >= 2.3){\n            result.push(\"B-\");\n        }\n        else if(grades[i]\
    \ >= 2.0){\n            result.push(\"C+\");\n        }\n        else if(grades[i]\
    \ >= 1.7){\n            result.push(\"C\");\n        }\n        else if(grades[i]\
    \ >= 1.3){\n            result.push(\"C-\");\n        }\n        else if(grades[i]\
    \ >= 1.0){\n            result.push(\"D+\");\n        }\n        else if(grades[i]\
    \ >= 0.7){\n            result.push(\"D\");\n        }\n        else if(grades[i]\
    \ >= 0.0){\n            result.push(\"D-\");\n        }\n        else if(grades[i]\
    \ < 0.0){\n            result.push(\"E\");\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpj5553c1o.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj5553c1o.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letters = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ >= 4.0){\n            letters.push(\"A+\");\n        }\n        else if(grades[i]\
    \ > 3.7){\n            letters.push(\"A\");\n        }\n        else if(grades[i]\
    \ > 3.3){\n            letters.push(\"A-\");\n        }\n        else if(grades[i]\
    \ > 3.0){\n            letters.push(\"B+\");\n        }\n        else if(grades[i]\
    \ > 2.7){\n            letters.push(\"B\");\n        }\n        else if(grades[i]\
    \ > 2.3){\n            letters.push(\"B-\");\n        }\n        else if(grades[i]\
    \ > 2.0){\n            letters.push(\"C+\");\n        }\n        else if(grades[i]\
    \ > 1.7){\n            letters.push(\"C\");\n        }\n        else if(grades[i]\
    \ > 1.3){\n            letters.push(\"C-\");\n        }\n        else if(grades[i]\
    \ > 1.0){\n            letters.push(\"D+\");\n        }\n        else if(grades[i]\
    \ > 0.7){\n            letters.push(\"D\");\n        }\n        else if(grades[i]\
    \ > 0.0){\n            letters.push(\"D-\");\n        }\n        else{\n     \
    \       letters.push(\"E\");\n        }\n    }\n    return letters;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    //\
    \ Remove the elements that are not numbers\n    var grades_numbers = grades.filter(function(element){\n\
    \        return typeof element === \"number\";\n    });\n    // We map them to\
    \ the letter grades\n    var letter_grades = grades_numbers.map(function(grade){\n\
    \        if(grade >= 4.0){\n            return \"A+\";\n        }else if(grade\
    \ >= 3.7){\n            return \"A\";\n        }else if(grade >= 3.3){\n     \
    \       return \"A-\";\n        }else if(grade >= 3.0){\n            return \"\
    B+\";\n        }else if(grade >= 2.7){\n            return \"B\";\n        }else\
    \ if(grade >= 2.3){\n            return \"B-\";\n        }else if(grade >= 2.0){\n\
    \            return \"C+\";\n        }else if(grade >= 1.7){\n            return\
    \ \"C\";\n        }else if(grade >= 1.3){\n            return \"C-\";\n      \
    \  }else if(grade >= 1.0){\n            return \"D+\";\n        }else if(grade\
    \ >= 0.7){\n            return \"D\";\n        }else if(grade >= 0.0){\n     \
    \       return \"D-\";\n        }else{\n            return \"E\";\n        }\n\
    \    });\n    return letter_grades;\n}\nvar grades = [4.0, 3, 1.7, 2, 3.5];\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmphzs8kzbg.js:66:10)\n\
    \    at Object.<anonymous> (/tmp/tmphzs8kzbg.js:74:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    \n\
    \    grades.forEach(function(grade){\n        if(grade >= 4.0){\n            console.log(\"\
    A+\");\n        }\n        else if(grade > 3.7){\n            console.log(\"A\"\
    );\n        }\n        else if(grade > 3.3){\n            console.log(\"A-\");\n\
    \        }\n        else if(grade > 3.0){\n            console.log(\"B+\");\n\
    \        }\n        else if(grade > 2.7){\n            console.log(\"B\");\n \
    \       }\n        else if(grade > 2.3){\n            console.log(\"B-\");\n \
    \       }\n        else if(grade > 2.0){\n            console.log(\"C+\");\n \
    \       }\n        else if(grade > 1.7){\n            console.log(\"C\");\n  \
    \      }\n        else if(grade > 1.3){\n            console.log(\"C-\");\n  \
    \      }\n        else if(grade > 1.0){\n            console.log(\"D+\");\n  \
    \      }\n        else if(grade > 0.7){\n            console.log(\"D\");\n   \
    \     }\n        else if(grade > 0.0){\n            console.log(\"D-\");\n   \
    \     }\n        else if(grade == 0.0){\n            console.log(\"E\");\n   \
    \     }\n    });\n}\nnumerical_letter_grade([4.0, 3, 1.7, 2, 3.5]);\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n\
    \    at test (/tmp/tmpp9pk95wm.js:73:10)\n    at Object.<anonymous> (/tmp/tmpp9pk95wm.js:81:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: 'A+

    B

    C-

    C

    A-

    A+

    B

    C-

    C

    A-

    '
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar letters\
    \ = [];\n\tfor (var i = 0; i < grades.length; i++) {\n\t\tif (grades[i] >= 4.0)\
    \ {\n\t\t\tletters.push(\"A+\");\n\t\t} else if (grades[i] >= 3.7) {\n\t\t\tletters.push(\"\
    A\");\n\t\t} else if (grades[i] >= 3.3) {\n\t\t\tletters.push(\"A-\");\n\t\t}\
    \ else if (grades[i] >= 3.0) {\n\t\t\tletters.push(\"B+\");\n\t\t} else if (grades[i]\
    \ >= 2.7) {\n\t\t\tletters.push(\"B\");\n\t\t} else if (grades[i] >= 2.3) {\n\t\
    \t\tletters.push(\"B-\");\n\t\t} else if (grades[i] >= 2.0) {\n\t\t\tletters.push(\"\
    C+\");\n\t\t} else if (grades[i] >= 1.7) {\n\t\t\tletters.push(\"C\");\n\t\t}\
    \ else if (grades[i] >= 1.3) {\n\t\t\tletters.push(\"C-\");\n\t\t} else if (grades[i]\
    \ >= 1.0) {\n\t\t\tletters.push(\"D+\");\n\t\t} else if (grades[i] >= 0.7) {\n\
    \t\t\tletters.push(\"D\");\n\t\t} else if (grades[i] >= 0.0) {\n\t\t\tletters.push(\"\
    D-\");\n\t\t} else {\n\t\t\tletters.push(\"E\");\n\t\t}\n\t}\n\treturn letters;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpjqlcqs70.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjqlcqs70.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var numerical_grade_list\
    \ = grades.map(function(grade){\n    if (grade >= 4.0){\n      return 'A+';\n\
    \    }\n    else if (grade >= 3.7){\n      return 'A';\n    }\n    else if (grade\
    \ >= 3.3){\n      return 'A-';\n    }\n    else if (grade >= 3.0){\n      return\
    \ 'B+';\n    }\n    else if (grade >= 2.7){\n      return 'B';\n    }\n    else\
    \ if (grade >= 2.3){\n      return 'B-';\n    }\n    else if (grade >= 2.0){\n\
    \      return 'C+';\n    }\n    else if (grade >= 1.7){\n      return 'C';\n \
    \   }\n    else if (grade >= 1.3){\n      return 'C-';\n    }\n    else if (grade\
    \ >= 1.0){\n      return 'D+';\n    }\n    else if (grade >= 0.7){\n      return\
    \ 'D';\n    }\n    else if (grade >= 0.0){\n      return 'D-';\n    }\n    else\
    \ {\n      return 'E';\n    }\n  });\n  return numerical_grade_list;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmplwbloq5f.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmplwbloq5f.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ new_grades = [];\n    for (let i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ >= 4.0){\n            new_grades.push(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7 && grades[i] < 4.0){\n            new_grades.push(\"A\");\n        }\
    \ else if (grades[i] >= 3.3 && grades[i] < 3.7){\n            new_grades.push(\"\
    A-\");\n        } else if (grades[i] >= 3.0 && grades[i] < 3.3){\n           \
    \ new_grades.push(\"B+\");\n        } else if (grades[i] >= 2.7 && grades[i] <\
    \ 3.0){\n            new_grades.push(\"B\");\n        } else if (grades[i] >=\
    \ 2.3 && grades[i] < 2.7){\n            new_grades.push(\"B-\");\n        } else\
    \ if (grades[i] >= 2.0 && grades[i] < 2.3){\n            new_grades.push(\"C+\"\
    );\n        } else if (grades[i] >= 1.7 && grades[i] < 2.0){\n            new_grades.push(\"\
    C\");\n        } else if (grades[i] >= 1.3 && grades[i] < 1.7){\n            new_grades.push(\"\
    C-\");\n        } else if (grades[i] >= 1.0 && grades[i] < 1.3){\n           \
    \ new_grades.push(\"D+\");\n        } else if (grades[i] >= 0.7 && grades[i] <\
    \ 1.0){\n            new_grades.push(\"D\");\n        } else if (grades[i] >=\
    \ 0.0 && grades[i] < 0.7){\n            new_grades.push(\"D-\");\n        } else\
    \ if (grades[i] < 0.0){\n            new_grades.push(\"E\");\n        }\n    }\n\
    \    return new_grades;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp565t7tks.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmp565t7tks.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ result = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ >= 4.0){\n            result.push(\"A+\");\n        }\n        else if(grades[i]\
    \ >= 3.7){\n            result.push(\"A\");\n        }\n        else if(grades[i]\
    \ >= 3.3){\n            result.push(\"A-\");\n        }\n        else if(grades[i]\
    \ >= 3.0){\n            result.push(\"B+\");\n        }\n        else if(grades[i]\
    \ >= 2.7){\n            result.push(\"B\");\n        }\n        else if(grades[i]\
    \ >= 2.3){\n            result.push(\"B-\");\n        }\n        else if(grades[i]\
    \ >= 2.0){\n            result.push(\"C+\");\n        }\n        else if(grades[i]\
    \ >= 1.7){\n            result.push(\"C\");\n        }\n        else if(grades[i]\
    \ >= 1.3){\n            result.push(\"C-\");\n        }\n        else if(grades[i]\
    \ >= 1.0){\n            result.push(\"D+\");\n        }\n        else if(grades[i]\
    \ >= 0.7){\n            result.push(\"D\");\n        }\n        else if(grades[i]\
    \ >= 0.0){\n            result.push(\"D-\");\n        }\n        else if(grades[i]\
    \ == 0.0){\n            result.push(\"E\");\n        }\n    }\n    return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpo4pr31zi.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpo4pr31zi.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ grade_array = [];\n    for (i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ >= 4.0){\n            grade_array.push(\"A+\");\n        }\n        else if\
    \ (grades[i] >= 3.7){\n            grade_array.push(\"A\");\n        }\n     \
    \   else if (grades[i] >= 3.3){\n            grade_array.push(\"A-\");\n     \
    \   }\n        else if (grades[i] >= 3.0){\n            grade_array.push(\"B+\"\
    );\n        }\n        else if (grades[i] >= 2.7){\n            grade_array.push(\"\
    B\");\n        }\n        else if (grades[i] >= 2.3){\n            grade_array.push(\"\
    B-\");\n        }\n        else if (grades[i] >= 2.0){\n            grade_array.push(\"\
    C+\");\n        }\n        else if (grades[i] >= 1.7){\n            grade_array.push(\"\
    C\");\n        }\n        else if (grades[i] >= 1.3){\n            grade_array.push(\"\
    C-\");\n        }\n        else if (grades[i] >= 1.0){\n            grade_array.push(\"\
    D+\");\n        }\n        else if (grades[i] >= 0.7){\n            grade_array.push(\"\
    D\");\n        }\n        else if (grades[i] >= 0.0){\n            grade_array.push(\"\
    D-\");\n        }\n        else if (grades[i] >= 0.0){\n            grade_array.push(\"\
    E\");\n        }\n    }\n    return grade_array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8acly524.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8acly524.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = [];\n    for (var index = 0; index < grades.length; index++){\n\
    \        if (grades[index] >= 4.0){\n            letter_grades.push(\"A+\");\n\
    \        } else if (grades[index] >= 3.7){\n            letter_grades.push(\"\
    A\");\n        } else if (grades[index] >= 3.3){\n            letter_grades.push(\"\
    A-\");\n        } else if (grades[index] >= 3.0){\n            letter_grades.push(\"\
    B+\");\n        } else if (grades[index] >= 2.7){\n            letter_grades.push(\"\
    B\");\n        } else if (grades[index] >= 2.3){\n            letter_grades.push(\"\
    B-\");\n        } else if (grades[index] >= 2.0){\n            letter_grades.push(\"\
    C+\");\n        } else if (grades[index] >= 1.7){\n            letter_grades.push(\"\
    C\");\n        } else if (grades[index] >= 1.3){\n            letter_grades.push(\"\
    C-\");\n        } else if (grades[index] >= 1.0){\n            letter_grades.push(\"\
    D+\");\n        } else if (grades[index] >= 0.7){\n            letter_grades.push(\"\
    D\");\n        } else if (grades[index] >= 0.0){\n            letter_grades.push(\"\
    D-\");\n        } else {\n            letter_grades.push(\"E\");\n        }\n\
    \    }\n    return letter_grades;\n}\nvar grades = [4.0, 3, 1.7, 2, 3.5];\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpdnmxv9tj.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpdnmxv9tj.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letter_grades = [];\n    for (let i = 0; i < grades.length; i++) {\n       \
    \ if (grades[i] > 4.0) {\n            letter_grades.push(\"A+\");\n        }\n\
    \        else if (grades[i] > 3.7) {\n            letter_grades.push(\"A\");\n\
    \        }\n        else if (grades[i] > 3.3) {\n            letter_grades.push(\"\
    A-\");\n        }\n        else if (grades[i] > 3.0) {\n            letter_grades.push(\"\
    B+\");\n        }\n        else if (grades[i] > 2.7) {\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grades[i] > 2.3) {\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grades[i] > 2.0) {\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grades[i] > 1.7) {\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grades[i] > 1.3) {\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grades[i] > 1.0) {\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grades[i] > 0.7) {\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grades[i] > 0.0) {\n            letter_grades.push(\"\
    D-\");\n        }\n        else {\n            letter_grades.push(\"E\");\n  \
    \      }\n    }\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpuxdf__5x.js:74:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpuxdf__5x.js:82:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A', 'B',\
    \ 'C-', 'C', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let grades_letter\
    \ = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0)\
    \ {\n      grades_letter.push(\"A+\");\n    } else if (grades[i] >= 3.7) {\n \
    \     grades_letter.push(\"A\");\n    } else if (grades[i] >= 3.3) {\n      grades_letter.push(\"\
    A-\");\n    } else if (grades[i] >= 3.0) {\n      grades_letter.push(\"B+\");\n\
    \    } else if (grades[i] >= 2.7) {\n      grades_letter.push(\"B\");\n    } else\
    \ if (grades[i] >= 2.3) {\n      grades_letter.push(\"B-\");\n    } else if (grades[i]\
    \ >= 2.0) {\n      grades_letter.push(\"C+\");\n    } else if (grades[i] >= 1.7)\
    \ {\n      grades_letter.push(\"C\");\n    } else if (grades[i] >= 1.3) {\n  \
    \    grades_letter.push(\"C-\");\n    } else if (grades[i] >= 1.0) {\n      grades_letter.push(\"\
    D+\");\n    } else if (grades[i] >= 0.7) {\n      grades_letter.push(\"D\");\n\
    \    } else if (grades[i] >= 0.0) {\n      grades_letter.push(\"D-\");\n    }\
    \ else {\n      grades_letter.push(\"E\");\n    }\n  }\n  return grades_letter;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpl91c1poi.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl91c1poi.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var final_grades\
    \ = [];\n  grades.forEach(function(grade){\n    if(grade >= 4.0){\n      final_grades.push(\"\
    A+\");\n    }\n    else if(grade >= 3.7){\n      final_grades.push(\"A\");\n \
    \   }\n    else if(grade >= 3.3){\n      final_grades.push(\"A-\");\n    }\n \
    \   else if(grade >= 3.0){\n      final_grades.push(\"B+\");\n    }\n    else\
    \ if(grade >= 2.7){\n      final_grades.push(\"B\");\n    }\n    else if(grade\
    \ >= 2.3){\n      final_grades.push(\"B-\");\n    }\n    else if(grade >= 2.0){\n\
    \      final_grades.push(\"C+\");\n    }\n    else if(grade >= 1.7){\n      final_grades.push(\"\
    C\");\n    }\n    else if(grade >= 1.3){\n      final_grades.push(\"C-\");\n \
    \   }\n    else if(grade >= 1.0){\n      final_grades.push(\"D+\");\n    }\n \
    \   else if(grade >= 0.7){\n      final_grades.push(\"D\");\n    }\n    else if(grade\
    \ >= 0.0){\n      final_grades.push(\"D-\");\n    }\n    else{\n      final_grades.push(\"\
    E\");\n    }\n  });\n  return final_grades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpj31a9srs.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmpj31a9srs.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letter_grades = [];\n    for (let i = 0; i < grades.length; i++){\n        if\
    \ (grades[i] == 4.0){\n            letter_grades.push(\"A+\");\n        }\n  \
    \      else if (grades[i] > 3.7){\n            letter_grades.push(\"A\");\n  \
    \      }\n        else if (grades[i] > 3.3){\n            letter_grades.push(\"\
    A-\");\n        }\n        else if (grades[i] > 3.0){\n            letter_grades.push(\"\
    B+\");\n        }\n        else if (grades[i] > 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grades[i] > 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grades[i] > 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grades[i] > 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grades[i] > 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grades[i] > 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grades[i] > 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grades[i] > 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else{\n            letter_grades.push(\"E\");\n   \
    \     }\n    }\n    return letter_grades;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ results = [];\n    for (var i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ == 4.0){\n            results.push(\"A+\");\n        }\n        else if (grades[i]\
    \ > 3.7){\n            results.push(\"A\");\n        }\n        else if (grades[i]\
    \ > 3.3){\n            results.push(\"A-\");\n        }\n        else if (grades[i]\
    \ > 3.0){\n            results.push(\"B+\");\n        }\n        else if (grades[i]\
    \ > 2.7){\n            results.push(\"B\");\n        }\n        else if (grades[i]\
    \ > 2.3){\n            results.push(\"B-\");\n        }\n        else if (grades[i]\
    \ > 2.0){\n            results.push(\"C+\");\n        }\n        else if (grades[i]\
    \ > 1.7){\n            results.push(\"C\");\n        }\n        else if (grades[i]\
    \ > 1.3){\n            results.push(\"C-\");\n        }\n        else if (grades[i]\
    \ > 1.0){\n            results.push(\"D+\");\n        }\n        else if (grades[i]\
    \ > 0.7){\n            results.push(\"D\");\n        }\n        else if (grades[i]\
    \ >= 0.0){\n            results.push(\"D-\");\n        }\n        else{\n    \
    \        results.push(\"E\");\n        }\n    }\n    return results;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'D-'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'E'\n]\n    at test (/tmp/tmpjns439w1.js:76:10)\n\
    \    at Object.<anonymous> (/tmp/tmpjns439w1.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'D-' ],\n\
    \  expected: [ 'E' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ result = [];\n    for(let gpa of grades){\n        let grade = \"\";\n     \
    \   if(gpa >= 4.0){\n            grade = \"A+\";\n        }\n        else if(gpa\
    \ >= 3.7){\n            grade = \"A\";\n        }\n        else if(gpa >= 3.3){\n\
    \            grade = \"A-\";\n        }\n        else if(gpa >= 3.0){\n      \
    \      grade = \"B+\";\n        }\n        else if(gpa >= 2.7){\n            grade\
    \ = \"B\";\n        }\n        else if(gpa >= 2.3){\n            grade = \"B-\"\
    ;\n        }\n        else if(gpa >= 2.0){\n            grade = \"C+\";\n    \
    \    }\n        else if(gpa >= 1.7){\n            grade = \"C\";\n        }\n\
    \        else if(gpa >= 1.3){\n            grade = \"C-\";\n        }\n      \
    \  else if(gpa >= 1.0){\n            grade = \"D+\";\n        }\n        else\
    \ if(gpa >= 0.7){\n            grade = \"D\";\n        }\n        else if(gpa\
    \ >= 0.0){\n            grade = \"D-\";\n        }\n        else{\n          \
    \  grade = \"E\";\n        }\n        result.push(grade);\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpkih_b1n5.js:76:10)\n\
    \    at Object.<anonymous> (/tmp/tmpkih_b1n5.js:84:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var grades_letter\
    \ = [];\n  for (var i = 0; i < grades.length; i++) {\n    if (grades[i] >= 4.0)\
    \ {\n      grades_letter.push(\"A+\");\n    } else if (grades[i] >= 3.7 && grades[i]\
    \ < 4.0) {\n      grades_letter.push(\"A\");\n    } else if (grades[i] >= 3.3\
    \ && grades[i] < 3.7) {\n      grades_letter.push(\"A-\");\n    } else if (grades[i]\
    \ >= 3.0 && grades[i] < 3.3) {\n      grades_letter.push(\"B+\");\n    } else\
    \ if (grades[i] >= 2.7 && grades[i] < 3.0) {\n      grades_letter.push(\"B\");\n\
    \    } else if (grades[i] >= 2.3 && grades[i] < 2.7) {\n      grades_letter.push(\"\
    B-\");\n    } else if (grades[i] >= 2.0 && grades[i] < 2.3) {\n      grades_letter.push(\"\
    C+\");\n    } else if (grades[i] >= 1.7 && grades[i] < 2.0) {\n      grades_letter.push(\"\
    C\");\n    } else if (grades[i] >= 1.3 && grades[i] < 1.7) {\n      grades_letter.push(\"\
    C-\");\n    } else if (grades[i] >= 1.0 && grades[i] < 1.3) {\n      grades_letter.push(\"\
    D+\");\n    } else if (grades[i] >= 0.7 && grades[i] < 1.0) {\n      grades_letter.push(\"\
    D\");\n    } else if (grades[i] >= 0.0 && grades[i] < 0.7) {\n      grades_letter.push(\"\
    D-\");\n    } else if (grades[i] === 0.0) {\n      grades_letter.push(\"E\");\n\
    \    }\n  }\n  return grades_letter;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpklexg8cx.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpklexg8cx.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    return\
    \ grades.map(function(grade){\n        if(grade >= 4.0){\n            return \"\
    A+\";\n        }else if(grade >= 3.7){\n            return \"A\";\n        }else\
    \ if(grade >= 3.3){\n            return \"A-\";\n        }else if(grade >= 3.0){\n\
    \            return \"B+\";\n        }else if(grade >= 2.7){\n            return\
    \ \"B\";\n        }else if(grade >= 2.3){\n            return \"B-\";\n      \
    \  }else if(grade >= 2.0){\n            return \"C+\";\n        }else if(grade\
    \ >= 1.7){\n            return \"C\";\n        }else if(grade >= 1.3){\n     \
    \       return \"C-\";\n        }else if(grade >= 1.0){\n            return \"\
    D+\";\n        }else if(grade >= 0.7){\n            return \"D\";\n        }else\
    \ if(grade >= 0.0){\n            return \"D-\";\n        }else{\n            return\
    \ \"E\";\n        }\n    });\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpizn4oz80.js:59:10)\n\
    \    at Object.<anonymous> (/tmp/tmpizn4oz80.js:67:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letters = []\n    for (let i = 0; i < grades.length; i++){\n        if (grades[i]\
    \ >= 4.0){\n            letters.push(\"A+\")\n        } else if (grades[i] >=\
    \ 3.7){\n            letters.push(\"A\")\n        } else if (grades[i] >= 3.3){\n\
    \            letters.push(\"A-\")\n        } else if (grades[i] >= 3.0){\n   \
    \         letters.push(\"B+\")\n        } else if (grades[i] >= 2.7){\n      \
    \      letters.push(\"B\")\n        } else if (grades[i] >= 2.3){\n          \
    \  letters.push(\"B-\")\n        } else if (grades[i] >= 2.0){\n            letters.push(\"\
    C+\")\n        } else if (grades[i] >= 1.7){\n            letters.push(\"C\")\n\
    \        } else if (grades[i] >= 1.3){\n            letters.push(\"C-\")\n   \
    \     } else if (grades[i] >= 1.0){\n            letters.push(\"D+\")\n      \
    \  } else if (grades[i] >= 0.7){\n            letters.push(\"D\")\n        } else\
    \ if (grades[i] >= 0.0){\n            letters.push(\"D-\")\n        } else {\n\
    \            letters.push(\"E\")\n        }\n    }\n    return letters\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpyoku0xk_.js:62:10)\n\
    \    at Object.<anonymous> (/tmp/tmpyoku0xk_.js:70:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    //\
    \ your code here\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[\n  'A+',\n  'B',\n  'C-',\n  'C',\n  'A-'\n]\n\
    \    at test (/tmp/tmpi5u2i0un.js:32:10)\n    at Object.<anonymous> (/tmp/tmpi5u2i0un.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ result = [];\n    for(let i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ >= 4.0){\n            result.push(\"A+\");\n        }else if(grades[i] >= 3.7){\n\
    \            result.push(\"A\");\n        }else if(grades[i] >= 3.3){\n      \
    \      result.push(\"A-\");\n        }else if(grades[i] >= 3.0){\n           \
    \ result.push(\"B+\");\n        }else if(grades[i] >= 2.7){\n            result.push(\"\
    B\");\n        }else if(grades[i] >= 2.3){\n            result.push(\"B-\");\n\
    \        }else if(grades[i] >= 2.0){\n            result.push(\"C+\");\n     \
    \   }else if(grades[i] >= 1.7){\n            result.push(\"C\");\n        }else\
    \ if(grades[i] >= 1.3){\n            result.push(\"C-\");\n        }else if(grades[i]\
    \ >= 1.0){\n            result.push(\"D+\");\n        }else if(grades[i] >= 0.7){\n\
    \            result.push(\"D\");\n        }else if(grades[i] >= 0.0){\n      \
    \      result.push(\"D-\");\n        }else{\n            result.push(\"E\");\n\
    \        }\n    }\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpvjy9nk9f.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpvjy9nk9f.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ final_grade = [];\n    let decoded_grade = {\n        4.0: \"A+\",\n       \
    \ 3.7: \"A\",\n        3.3: \"A-\",\n        3.0: \"B+\",\n        2.7: \"B\"\
    ,\n        2.3: \"B-\",\n        2.0: \"C+\",\n        1.7: \"C\",\n        1.3:\
    \ \"C-\",\n        1.0: \"D+\",\n        0.7: \"D\",\n        0.0: \"D-\",\n \
    \       \"-1\": \"E\"\n    }\n    for(let i=0; i<grades.length; i++){\n      \
    \  if(grades[i]<=4.0 && grades[i]>=3.7){\n            final_grade.push(decoded_grade[4.0]);\n\
    \        }\n        else if(grades[i]<3.7 && grades[i]>=3.3){\n            final_grade.push(decoded_grade[3.7]);\n\
    \        }\n        else if(grades[i]<3.3 && grades[i]>=3.0){\n            final_grade.push(decoded_grade[3.3]);\n\
    \        }\n        else if(grades[i]<3.0 && grades[i]>=2.7){\n            final_grade.push(decoded_grade[3.0]);\n\
    \        }\n        else if(grades[i]<2.7 && grades[i]>=2.3){\n            final_grade.push(decoded_grade[2.7]);\n\
    \        }\n        else if(grades[i]<2.3 && grades[i]>=2.0){\n            final_grade.push(decoded_grade[2.3]);\n\
    \        }\n        else if(grades[i]<2.0 && grades[i]>=1.7){\n            final_grade.push(decoded_grade[2.0]);\n\
    \        }\n        else if(grades[i]<1.7 && grades[i]>=1.3){\n            final_grade.push(decoded_grade[1.7]);\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp6__zax7x.js:78\ntest();\n       \n\nSyntaxError: Unexpected end\
    \ of input\n    at Object.compileFunction (node:vm:360:18)\n    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 0
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = [];\n    for (var i = 0; i < grades.length; i++){\n        if\
    \ (grades[i] === 4.0){\n            letter_grades.push(\"A+\");\n        }\n \
    \       else if (grades[i] > 3.7){\n            letter_grades.push(\"A\");\n \
    \       }\n        else if (grades[i] > 3.3){\n            letter_grades.push(\"\
    A-\");\n        }\n        else if (grades[i] > 3.0){\n            letter_grades.push(\"\
    B+\");\n        }\n        else if (grades[i] > 2.7){\n            letter_grades.push(\"\
    B\");\n        }\n        else if (grades[i] > 2.3){\n            letter_grades.push(\"\
    B-\");\n        }\n        else if (grades[i] > 2.0){\n            letter_grades.push(\"\
    C+\");\n        }\n        else if (grades[i] > 1.7){\n            letter_grades.push(\"\
    C\");\n        }\n        else if (grades[i] > 1.3){\n            letter_grades.push(\"\
    C-\");\n        }\n        else if (grades[i] > 1.0){\n            letter_grades.push(\"\
    D+\");\n        }\n        else if (grades[i] > 0.7){\n            letter_grades.push(\"\
    D\");\n        }\n        else if (grades[i] > 0.0){\n            letter_grades.push(\"\
    D-\");\n        }\n        else if (grades[i] === 0.0){\n            letter_grades.push(\"\
    E\");\n        }\n    }\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  let letter_grades\
    \ = grades.map(function(gpa){\n    if (gpa === 4.0){\n      return \"A+\";\n \
    \   } else if (gpa > 3.7){\n      return \"A\";\n    } else if (gpa > 3.3){\n\
    \      return \"A-\";\n    } else if (gpa > 3.0){\n      return \"B+\";\n    }\
    \ else if (gpa > 2.7){\n      return \"B\";\n    } else if (gpa > 2.3){\n    \
    \  return \"B-\";\n    } else if (gpa > 2.0){\n      return \"C+\";\n    } else\
    \ if (gpa > 1.7){\n      return \"C\";\n    } else if (gpa > 1.3){\n      return\
    \ \"C-\";\n    } else if (gpa > 1.0){\n      return \"D+\";\n    } else if (gpa\
    \ > 0.7){\n      return \"D\";\n    } else if (gpa >= 0.0){\n      return \"D-\"\
    ;\n    } else if (gpa === 0.0){\n      return \"E\";\n    } else {\n      return\
    \ \"This is not a valid grade\";\n    }\n  });\n  return letter_grades;\n}\n\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'D-'\n]\n\
    \nshould loosely deep-equal\n\n[\n  'E'\n]\n    at test (/tmp/tmph9hmemk5.js:67:10)\n\
    \    at Object.<anonymous> (/tmp/tmph9hmemk5.js:72:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'D-' ],\n\
    \  expected: [ 'E' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  var letter_grades\
    \ = [];\n  for (var i = 0; i < grades.length; i++){\n    if (grades[i] >= 4.0){\n\
    \      letter_grades.push(\"A+\");\n    }\n    else if (grades[i] >= 3.7){\n \
    \     letter_grades.push(\"A\");\n    }\n    else if (grades[i] >= 3.3){\n   \
    \   letter_grades.push(\"A-\");\n    }\n    else if (grades[i] >= 3.0){\n    \
    \  letter_grades.push(\"B+\");\n    }\n    else if (grades[i] >= 2.7){\n     \
    \ letter_grades.push(\"B\");\n    }\n    else if (grades[i] >= 2.3){\n      letter_grades.push(\"\
    B-\");\n    }\n    else if (grades[i] >= 2.0){\n      letter_grades.push(\"C+\"\
    );\n    }\n    else if (grades[i] >= 1.7){\n      letter_grades.push(\"C\");\n\
    \    }\n    else if (grades[i] >= 1.3){\n      letter_grades.push(\"C-\");\n \
    \   }\n    else if (grades[i] >= 1.0){\n      letter_grades.push(\"D+\");\n  \
    \  }\n    else if (grades[i] >= 0.7){\n      letter_grades.push(\"D\");\n    }\n\
    \    else if (grades[i] >= 0.0){\n      letter_grades.push(\"D-\");\n    }\n \
    \   else {\n      letter_grades.push(\"E\");\n    }\n  }\n  return letter_grades;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpq00p5q1x.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmpq00p5q1x.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letter_grades = [];\n    for (let grade of grades){\n        let letter_grade\
    \ = \"\";\n        if (grade < 1.0){\n            letter_grade = \"D-\";\n   \
    \     } else if (grade < 1.3){\n            letter_grade = \"D\";\n        } else\
    \ if (grade < 1.7){\n            letter_grade = \"D+\";\n        } else if (grade\
    \ < 2.0){\n            letter_grade = \"C-\";\n        } else if (grade < 2.3){\n\
    \            letter_grade = \"C\";\n        } else if (grade < 2.7){\n       \
    \     letter_grade = \"C+\";\n        } else if (grade < 3.0){\n            letter_grade\
    \ = \"B-\";\n        } else if (grade < 3.3){\n            letter_grade = \"B\"\
    ;\n        } else if (grade < 3.7){\n            letter_grade = \"B+\";\n    \
    \    } else if (grade < 4.0){\n            letter_grade = \"A-\";\n        } else\
    \ {\n            letter_grade = \"A+\";\n        }\n        letter_grades.push(letter_grade);\n\
    \    }\n    return letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B',\n  'C-',\n  'C',\n  'B+'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp324q12my.js:60:10)\n\
    \    at Object.<anonymous> (/tmp/tmp324q12my.js:68:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B',\
    \ 'C-', 'C', 'B+' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    let\
    \ letter_grades = [];\n    for (let i = 0; i < grades.length; i++){\n        if\
    \ (grades[i] >= 4.0){\n            letter_grades.push(\"A+\");\n        } else\
    \ if (grades[i] >= 3.7){\n            letter_grades.push(\"A\");\n        } else\
    \ if (grades[i] >= 3.3){\n            letter_grades.push(\"A-\");\n        } else\
    \ if (grades[i] >= 3.0){\n            letter_grades.push(\"B+\");\n        } else\
    \ if (grades[i] >= 2.7){\n            letter_grades.push(\"B\");\n        } else\
    \ if (grades[i] >= 2.3){\n            letter_grades.push(\"B-\");\n        } else\
    \ if (grades[i] >= 2.0){\n            letter_grades.push(\"C+\");\n        } else\
    \ if (grades[i] >= 1.7){\n            letter_grades.push(\"C\");\n        } else\
    \ if (grades[i] >= 1.3){\n            letter_grades.push(\"C-\");\n        } else\
    \ if (grades[i] >= 1.0){\n            letter_grades.push(\"D+\");\n        } else\
    \ if (grades[i] >= 0.7){\n            letter_grades.push(\"D\");\n        } else\
    \ if (grades[i] >= 0.0){\n            letter_grades.push(\"D-\");\n        } else\
    \ if (grades[i] < 0.0){\n            letter_grades.push(\"E\");\n        }\n \
    \   }\n    return letter_grades;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpr757ul4n.js:61:10)\n\
    \    at Object.<anonymous> (/tmp/tmpr757ul4n.js:69:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    const\
    \ letter_grades = [];\n    const grade_equation = {\n        \"4.0\": \"A+\",\n\
    \        \"3.7\": \"A\",\n        \"3.3\": \"A-\",\n        \"3.0\": \"B+\",\n\
    \        \"2.7\": \"B\",\n        \"2.3\": \"B-\",\n        \"2.0\": \"C+\",\n\
    \        \"1.7\": \"C\",\n        \"1.3\": \"C-\",\n        \"1.0\": \"D+\",\n\
    \        \"0.7\": \"D\",\n        \"0.0\": \"D-\",\n        \"-1.0\": \"E\"\n\
    \    }\n    for (let i = 0; i < grades.length; i++){\n        if (grades[i] >=\
    \ 4.0){\n            letter_grades.push(grade_equation[\"4.0\"]);\n        } else\
    \ if (grades[i] >= 3.7){\n            letter_grades.push(grade_equation[\"3.7\"\
    ]);\n        } else if (grades[i] >= 3.3){\n            letter_grades.push(grade_equation[\"\
    3.3\"]);\n        } else if (grades[i] >= 3.0){\n            letter_grades.push(grade_equation[\"\
    3.0\"]);\n        } else if (grades[i] >= 2.7){\n            letter_grades.push(grade_equation[\"\
    2.7\"]);\n        } else if (grades[i] >= 2.3){\n            letter_grades.push(grade_equation[\"\
    2.3\"]);\n        } else if (grades[i] >= 2.0){\n            letter_grades.push(grade_equation[\"\
    2.0\"]);\n        } else if (grades[i] >= 1.7){\n            letter_grades.push(grade_equation[\"\
    1.7\"]);\n        } else if (grades[i] >= 1.3){\n            letter_grades.push(grade_equation[\"\
    1.3\"]);\n        } else if (grades[i] >= 1.0){\n            letter_grades.push(grade_equation[\"\
    1.0\"]);\n        } else if (grades[\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: SyntaxError
  stderr: "/tmp/tmp62ohvo4r.js:62\nconst assert = require('node:assert');\n^^^^^\n\
    \nSyntaxError: Unexpected token 'const'\n    at Object.compileFunction (node:vm:360:18)\n\
    \    at wrapSafe (node:internal/modules/cjs/loader:1049:15)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1084:27)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n\tvar letter_grades\
    \ = [];\n\tfor (var i = 0; i < grades.length; i++){\n\t\tif (grades[i] >= 4.0){\n\
    \t\t\tletter_grades.push(\"A+\");\n\t\t}\n\t\telse if (grades[i] >= 3.7){\n\t\t\
    \tletter_grades.push(\"A\");\n\t\t}\n\t\telse if (grades[i] >= 3.3){\n\t\t\tletter_grades.push(\"\
    A-\");\n\t\t}\n\t\telse if (grades[i] >= 3.0){\n\t\t\tletter_grades.push(\"B+\"\
    );\n\t\t}\n\t\telse if (grades[i] >= 2.7){\n\t\t\tletter_grades.push(\"B\");\n\
    \t\t}\n\t\telse if (grades[i] >= 2.3){\n\t\t\tletter_grades.push(\"B-\");\n\t\t\
    }\n\t\telse if (grades[i] >= 2.0){\n\t\t\tletter_grades.push(\"C+\");\n\t\t}\n\
    \t\telse if (grades[i] >= 1.7){\n\t\t\tletter_grades.push(\"C\");\n\t\t}\n\t\t\
    else if (grades[i] >= 1.3){\n\t\t\tletter_grades.push(\"C-\");\n\t\t}\n\t\telse\
    \ if (grades[i] >= 1.0){\n\t\t\tletter_grades.push(\"D+\");\n\t\t}\n\t\telse if\
    \ (grades[i] >= 0.7){\n\t\t\tletter_grades.push(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ >= 0.0){\n\t\t\tletter_grades.push(\"D-\");\n\t\t}\n\t\telse {\n\t\t\tletter_grades.push(\"\
    E\");\n\t\t}\n\t}\n\treturn letter_grades;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp4at4v95_.js:74:10)\n\
    \    at Object.<anonymous> (/tmp/tmp4at4v95_.js:82:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    const\
    \ letter_grade = [];\n    const grade_matrix = {\"A+\": 4.0, \"A\": 3.7, \"A-\"\
    : 3.3, \"B+\": 3.0, \"B\": 2.7, \"B-\": 2.3, \"C+\": 2.0, \"C\": 1.7, \"C-\":\
    \ 1.3, \"D+\": 1.0, \"D\": 0.7, \"D-\": 0.0};\n    grades.forEach(grade => {\n\
    \        for(let i in grade_matrix){\n            if(grade > grade_matrix[i]){\n\
    \                letter_grade.push(i);\n                break;\n            }\n\
    \        }\n    });\n    return letter_grade;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n  'B',\n\
    \  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpaqbcor90.js:41:10)\n    at Object.<anonymous>\
    \ (/tmp/tmpaqbcor90.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A', 'B',\
    \ 'C-', 'C', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n  const\
    \ gradeMap = {\n    \"A+\": 4.0,\n    \"A\": 3.7,\n    \"A-\": 3.3,\n    \"B+\"\
    : 3.0,\n    \"B\": 2.7,\n    \"B-\": 2.3,\n    \"C+\": 2.0,\n    \"C\": 1.7,\n\
    \    \"C-\": 1.3,\n    \"D+\": 1.0,\n    \"D\": 0.7,\n    \"D-\": 0.0,\n    \"\
    E\": 0.0\n  }\n  const gradeMapKeys = Object.keys(gradeMap);\n  const letterGrades\
    \ = [];\n  grades.forEach(grade => {\n    for (let i = 0; i < gradeMapKeys.length;\
    \ i++) {\n      const key = gradeMapKeys[i];\n      if (grade >= gradeMap[key])\
    \ {\n        letterGrades.push(key);\n        break;\n      }\n    }\n  });\n\
    \  return letterGrades;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
    \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp_2j06h0m.js:58:10)\n\
    \    at Object.<anonymous> (/tmp/tmp_2j06h0m.js:66:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ response = [];\n    for(var i = 0; i < grades.length; i++){\n        if(grades[i]\
    \ == 4.0){\n            response.push(\"A+\");\n        }\n        else if(grades[i]\
    \ >= 3.7){\n            response.push(\"A\");\n        }\n        else if(grades[i]\
    \ >= 3.3){\n            response.push(\"A-\");\n        }\n        else if(grades[i]\
    \ >= 3.0){\n            response.push(\"B+\");\n        }\n        else if(grades[i]\
    \ >= 2.7){\n            response.push(\"B\");\n        }\n        else if(grades[i]\
    \ >= 2.3){\n            response.push(\"B-\");\n        }\n        else if(grades[i]\
    \ >= 2.0){\n            response.push(\"C+\");\n        }\n        else if(grades[i]\
    \ >= 1.7){\n            response.push(\"C\");\n        }\n        else if(grades[i]\
    \ >= 1.3){\n            response.push(\"C-\");\n        }\n        else if(grades[i]\
    \ >= 1.0){\n            response.push(\"D+\");\n        }\n        else if(grades[i]\
    \ >= 0.7){\n            response.push(\"D\");\n        }\n        else if(grades[i]\
    \ > 0.0){\n            response.push(\"D-\");\n        }\n        else{\n    \
    \        response.push(\"E\");\n        }\n    }\n    return response;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp2vu1sm2o.js:73:10)\n\
    \    at Object.<anonymous> (/tmp/tmp2vu1sm2o.js:81:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    var\
    \ letter_grades = []\n    for (var i = 0; i < grades.length; i++){\n        var\
    \ letter = \"\"\n        var num = grades[i]\n        if (num >= 4.0){\n     \
    \       letter = \"A+\"\n        }\n        else if (num >= 3.7){\n          \
    \  letter = \"A\"\n        }\n        else if (num >= 3.3){\n            letter\
    \ = \"A-\"\n        }\n        else if (num >= 3.0){\n            letter = \"\
    B+\"\n        }\n        else if (num >= 2.7){\n            letter = \"B\"\n \
    \       }\n        else if (num >= 2.3){\n            letter = \"B-\"\n      \
    \  }\n        else if (num >= 2.0){\n            letter = \"C+\"\n        }\n\
    \        else if (num >= 1.7){\n            letter = \"C\"\n        }\n      \
    \  else if (num >= 1.3){\n            letter = \"C-\"\n        }\n        else\
    \ if (num >= 1.0){\n            letter = \"D+\"\n        }\n        else if (num\
    \ >= 0.7){\n            letter = \"D\"\n        }\n        else if (num >= 0.0){\n\
    \            letter = \"D-\"\n        }\n        else {\n            letter =\
    \ \"E\"\n        }\n        letter_grades.push(letter)\n    }\n    return letter_grades\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"\
    A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
    D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
    E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\"\
    , \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
    D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmpu6e85mko.js:77:10)\n\
    \    at Object.<anonymous> (/tmp/tmpu6e85mko.js:85:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977539
- exit_code: 1
  program: "//It is the last week of the semester and the teacher has to give the\
    \ grades\n// to students. The teacher has been making her own algorithm for grading.\n\
    // The only problem is, she has lost the code she used for grading.\n// She has\
    \ given you an array of GPAs for some students and you have to write \n// a function\
    \ that can output an array of letter grades using the following table:\n// GPA\
    \       |    Letter grade\n// 4.0                A+\n// > 3.7                A\
    \ \n// > 3.3                A- \n// > 3.0                B+\n// > 2.7        \
    \        B \n// > 2.3                B-\n// > 2.0                C+\n// > 1.7\
    \                C\n// > 1.3                C-\n// > 1.0                D+ \n\
    // > 0.7                D \n// > 0.0                D-\n// 0.0               \
    \ E\n// Example:\n// >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n// [\"A+\", \"\
    B\", \"C-\", \"C\", \"A-\"]\nfunction numerical_letter_grade(grades){\n    return\
    \ grades.map(grade => {\n        if (grade >= 4.0) {\n            return \"A+\"\
    ;\n        } else if (grade >= 3.7) {\n            return \"A\";\n        } else\
    \ if (grade >= 3.3) {\n            return \"A-\";\n        } else if (grade >=\
    \ 3.0) {\n            return \"B+\";\n        } else if (grade >= 2.7) {\n   \
    \         return \"B\";\n        } else if (grade >= 2.3) {\n            return\
    \ \"B-\";\n        } else if (grade >= 2.0) {\n            return \"C+\";\n  \
    \      } else if (grade >= 1.7) {\n            return \"C\";\n        } else if\
    \ (grade >= 1.3) {\n            return \"C-\";\n        } else if (grade >= 1.0)\
    \ {\n            return \"D+\";\n        } else if (grade >= 0.7) {\n        \
    \    return \"D\";\n        } else if (grade >= 0.0) {\n            return \"\
    D-\";\n        } else {\n            return \"E\";\n        }\n    });\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = numerical_letter_grade;\n\
    \  assert.deepEqual(candidate([4.0, 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"\
    C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"\
    D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"E\"]);\n  assert.deepEqual(candidate([1.0,\
    \ 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\", \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0,\
    \ 0.7]),[\"E\", \"D-\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  'A+',\n \
    \ 'B+',\n  'C',\n  'C+',\n  'A-'\n]\n\nshould loosely deep-equal\n\n[\n  'A+',\n\
    \  'B',\n  'C-',\n  'C',\n  'A-'\n]\n    at test (/tmp/tmp8k1oxqr_.js:59:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8k1oxqr_.js:67:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 'A+', 'B+',\
    \ 'C', 'C+', 'A-' ],\n  expected: [ 'A+', 'B', 'C-', 'C', 'A-' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822333
