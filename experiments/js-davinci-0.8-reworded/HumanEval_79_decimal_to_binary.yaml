name: HumanEval_79_decimal_to_binary
language: js
prompt: "//You will be given a number in decimal form and your task is to convert\
  \ it to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n\
  // \"db100000db\"\nfunction decimal_to_binary(decimal){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"db0db\");\n  assert.deepEqual(candidate(32),\"\
  db100000db\");\n  assert.deepEqual(candidate(103),\"db1100111db\");\n  assert.deepEqual(candidate(15),\"\
  db1111db\");\n}\n\ntest();"
completions: ["    var binary = \"\";\n    //turn number into binary\n    while(decimal\
    \ > 0){\n        binary = binary + (decimal % 2);\n        decimal = Math.floor(decimal\
    \ / 2);\n    }\n    binary = \"db\" + binary + \"db\";\n    return binary;\n}",
  "    var result = \"db\";\n    var decimal = decimal.toString();\n    for(var i\
    \ = 0; i < decimal.length; i++){\n        result += \"db\" + decimal[i].charCodeAt().toString(2);\n\
    \    }\n    return result;\n}", "    let bin = \"db\";\n    while(decimal){\n\
    \        bin = bin + decimal % 2;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return bin + \"db\";\n}", "  var string = '';\n  if(decimal == 0){\n\
    \    return 'db00000db';\n  }\n  while(decimal > 0){\n    string = (decimal %\
    \ 2).toString() + string;\n    decimal = Math.floor(decimal / 2);\n  }\n  if(string.length\
    \ < 6){\n    var number = string.length;\n    for(var i = 0; i < 6 - number; i++){\n\
    \      string = '0' + string;\n    }\n  }\n  return 'db' + string + 'db';\n}\n",
  "    return `db${decimal.toString(2)}db`;\n}\n", "    return 'db' + decimal.toString(2)\
    \ + 'db';\n}", "    return \"db\" + decimal.toString(2) + \"db\";\n}\n", "   \
    \ let binary = '';\n    while(decimal > 0){\n        binary = (decimal % 2) +\
    \ binary;\n        decimal = Math.floor(decimal / 2);\n    }\n    return 'db'\
    \ + binary + 'db';\n}\n", "  // Write your code here\n}", "    let solution=\"\
    db\";\n    if(decimal===0){\n        solution+=\"0db\";\n    }else{\n        while(decimal>0){\n\
    \            solution+=decimal%2;\n            decimal=Math.floor(decimal/2);\n\
    \        }\n        solution+=\"db\";\n    }\n    return solution;\n}", "    let\
    \ str = '';\n    let stack = [];\n    if(decimal == 0){\n        str = '0';\n\
    \    }\n    while(decimal > 0){\n        stack.push(decimal % 2);\n        decimal\
    \ = Math.floor(decimal / 2);\n    }\n    while(stack.length > 0){\n        str\
    \ += stack.pop();\n    }\n    str = 'db' + str + 'db';\n    return str;\n}\n",
  "  let result=decimal.toString(2);\n  return `db${result}db`;\n}", "    var bin\
    \ = \"\";\n    var result = [];\n    result.push(\"db\");\n    while(decimal>=1){\n\
    \        if(decimal % 2 == 0){\n            bin = \"0\" + bin;\n        }else{\n\
    \            bin = \"1\" + bin;\n        }\n        decimal = Math.floor(decimal/2);\n\
    \    }\n    result.push(bin);\n    result.push(\"db\");\n    return result.join(\"\
    \");\n}\n", "   return 'db' + (decimal >>> 0).toString(2) + 'db';\n}", "    let\
    \ result = \"db\";\n    while(decimal > 0){\n        result += decimal % 2;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    return result + \"db\"\
    ;\n}\n", "    // TODO: Complete me\n    return 'db' + decimal.toString(2) + 'db';\n\
    }\n", "    return `db${decimal.toString(2)}db`;\n}\ndecimal_to_binary(15);\ndecimal_to_binary(32);\n",
  "    var binary = 'db';\n    while(decimal > 0){\n        binary += decimal % 2;\n\
    \        decimal = Math.floor(decimal / 2);\n    }\n    binary += 'db';\n    return\
    \ binary;\n}", "    if(decimal <= 0) return \"db0db\";\n    let remainderStack\
    \ = [];\n    let binary = \"\";\n    while(decimal > 0){\n        remainderStack.push(decimal\
    \ % 2);\n        decimal = Math.floor(decimal / 2);\n    }\n    while(remainderStack.length\
    \ > 0){\n        binary += remainderStack.pop();\n    }\n    return \"db\" + binary\
    \ + \"db\";\n}", "  var binary = '';\n  while(decimal !== 0){\n    if(decimal\
    \ % 2 === 0){\n      binary = '0' + binary;\n    }else{\n      binary = '1' +\
    \ binary;\n    }\n    decimal = Math.floor(decimal / 2);\n  }\n  binary = 'db'\
    \ + binary + 'db';\n  return binary;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
