language: js
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar new_list = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_list = [];\n  \
    \  for (var i=0; i<l.length; i++){\n        new_list.push(l[i]+1);\n    }\n  \
    \  return new_list;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar newl = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tnewl.push(l[i] + 1);\n\t}\n\treturn newl;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    let res = [];\n    for(let\
    \ i = 0; i < l.length; i++){\n        res.push(l[i] + 1);\n    }\n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var arr_incr = [];\n  for\
    \ (var i = 0; i < l.length; i++){\n    arr_incr.push(l[i] + 1);\n  }\n  return\
    \ arr_incr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(el){\n\
    \        return el+1;\n    });\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(item){return\
    \ item+1});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(item => item+1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var l2=[];\n    for(var\
    \ i=0;i<l.length;i++){\n        l2.push(l[i]+1);\n    }\n    return l2;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar newList = l.map(function(x){\n\
    \t\treturn x + 1;\n\t});\n\treturn newList;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar l_new = [];\n\tfor (var\
    \ i = 0; i < l.length; i++){\n\t\tl_new.push(l[i] + 1);\n\t}\n\treturn l_new;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var result = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        result.push(l[i] + 1);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(num){\n\
    \        return num + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var ret=[];\n    for(var\
    \ i=0;i<l.length;i++){\n        ret.push(l[i]+1);\n    }\n    return ret;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var arr = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        arr.push(l[i] + 1);\n    }\n    return arr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_l = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        new_l.push(l[i] + 1);\n    }\n    return\
    \ new_l;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var r = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        r.push(l[i] + 1);\n    }\n    return r;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(elem){\n\
    \        return elem+1;\n    });\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return list_map(x => x\
    \ + 1, l);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpnpombfpg.js:7\n    return list_map(x => x + 1, l);\n    ^\n\nReferenceError:\
    \ list_map is not defined\n    at incr_list (/tmp/tmpnpombfpg.js:7:5)\n    at\
    \ test (/tmp/tmpnpombfpg.js:15:20)\n    at Object.<anonymous> (/tmp/tmpnpombfpg.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var i;\n  var inc_list =\
    \ [];\n  for (i = 0; i < l.length; i++) {\n    inc_list.push(l[i] + 1);\n  }\n\
    \  return inc_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var incr_array = l.map(function(i){\n\
    \    return i + 1;\n  });\n  return incr_array;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  if(l == []) return [];\n\
    \  else return [l[0] + 1].concat(incr_list(l.slice(1)));\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp7gx5u5c0.js:8\n  else return [l[0] + 1].concat(incr_list(l.slice(1)));\n\
    \       ^\n\nRangeError: Maximum call stack size exceeded\n    at incr_list (/tmp/tmp7gx5u5c0.js:8:8)\n\
    \    at incr_list (/tmp/tmp7gx5u5c0.js:8:33)\n    at incr_list (/tmp/tmp7gx5u5c0.js:8:33)\n\
    \    at incr_list (/tmp/tmp7gx5u5c0.js:8:33)\n    at incr_list (/tmp/tmp7gx5u5c0.js:8:33)\n\
    \    at incr_list (/tmp/tmp7gx5u5c0.js:8:33)\n    at incr_list (/tmp/tmp7gx5u5c0.js:8:33)\n\
    \    at incr_list (/tmp/tmp7gx5u5c0.js:8:33)\n    at incr_list (/tmp/tmp7gx5u5c0.js:8:33)\n\
    \    at incr_list (/tmp/tmp7gx5u5c0.js:8:33)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var i;\n    var b = [];\n\
    \    for (i = 0; i < l.length; i++){\n        b.push(l[i] + 1);\n    }\n    return\
    \ b;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tfor(var i = 0; i < l.length;\
    \ i++){\n\t\tl[i] += 1;\n\t}\n\treturn l;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var a = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        a.push(l[i] + 1);\n    }\n    return a;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar new_list = [];\n\tfor(var\
    \ x = 0; x < l.length; x++){\n\t\tnew_list.push(l[x] + 1);\n\t}\n\treturn new_list;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(n => n + 1);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar result = [];\n\tfor(var\
    \ i=0; i<l.length; i++){\n\t\tresult.push(l[i]+1);\n\t}\n\treturn result;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_l = [];\n    for(var\
    \ i=0; i<l.length; i++){\n        new_l.push(l[i]+1);\n    }\n    return new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    let result = [];\n    for(let\
    \ i = 0; i < l.length; i++){\n        result.push(l[i] + 1);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_list = [];\n  \
    \  for (var i=0; i<l.length; i++){\n        new_list.push(l[i]+1);\n    }\n  \
    \  return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(v => v + 1);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return\
    \ x+1});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var result = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        result.push(l[i] + 1);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tlet new_list = [];\n\tfor(let\
    \ num of l){\n\t\tnew_list.push(num + 1);\n\t}\n\treturn new_list;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    let temp = [];\n    for(i=0;\
    \ i<l.length; i++){\n        temp.push(l[i]+1);\n    }\n    return temp;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(val){\n\
    \        return val+1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  //YOUR CODE HERE\n  var ret\
    \ = [];\n  for(var i = 0; i < l.length; i++){\n    ret.push(l[i] + 1);\n  }\n\
    \  return ret;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\treturn l.map(v => v+1);\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var p = [];\n    for(var\
    \ i=0; i<l.length; i++){\n        p.push(l[i]+1);\n    }\n    return p;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(e){\n\
    \        return e + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    for(var i = 0; i < l.length;\
    \ i++){\n        l[i] = l[i] + 1;\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var result = [];\n  for (var\
    \ i = 0; i < l.length; i++){\n    result.push(l[i] + 1);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(n){return\
    \ n + 1;});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var newArr = []\n    for(var\
    \ i = 0; i < l.length; i++){\n        newArr.push(l[i] + 1)\n    }\n    return\
    \ newArr\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\treturn map(function(x){return\
    \ x+1;}, l);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmptng38j11.js:7\n\treturn map(function(x){return x+1;}, l);\n\t^\n\
    \nReferenceError: map is not defined\n    at incr_list (/tmp/tmptng38j11.js:7:2)\n\
    \    at test (/tmp/tmptng38j11.js:15:20)\n    at Object.<anonymous> (/tmp/tmptng38j11.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmptz9bczk2.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmptz9bczk2.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(e => e + 1);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var r = []\n    for(var\
    \ i=0; i<l.length; i++){\n        r.push(l[i]+1)\n    }\n    return r\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    let result = [];\n    for(let\
    \ i = 0; i < l.length; i++){\n        result.push(l[i] + 1);\n    }\n    return\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar inc = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tinc.push(l[i] + 1);\n\t}\n\treturn inc;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var l1 = [];\n    for(var\
    \ i=0; i<l.length; i++){\n        l1.push(l[i]+1);\n    }\n    return l1;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var result = l.map(function(x){\n\
    \        return x+1;\n    });\n    return result;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var temp = new Array();\n\
    \    var i;\n    for(i = 0; i < l.length; i++){\n        temp[i] = l[i] + 1;\n\
    \    }\n    return temp;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(num => num +\
    \ 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(x){\n\
    \    return x + 1;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\treturn l.map(function(elem){\n\
    \t\treturn elem + 1;\n\t});\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    for(var i = 0; i < l.length;\
    \ i++){\n        l[i]++;\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  //This function always returns\
    \ the same thing if we pass in the same thing.\n  //This means it's a pure function.\n\
    \  //We can compose pure functions.\n  return map(l, function(e){\n    return\
    \ e + 1;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp6mbexkmv.js:10\n  return map(l, function(e){\n  ^\n\nReferenceError:\
    \ map is not defined\n    at incr_list (/tmp/tmp6mbexkmv.js:10:3)\n    at test\
    \ (/tmp/tmp6mbexkmv.js:20:20)\n    at Object.<anonymous> (/tmp/tmp6mbexkmv.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var res = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        res.push(l[i] + 1);\n    }\n    return res;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(e){\n\
    \        return e + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var m = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        m.push(l[i] + 1);\n    }\n    return m;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\treturn l.map(e => e+1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var newArray = [];\n  \
    \  for(var i = 0; i < l.length; i++){\n        newArray.push(l[i] + 1);\n    }\n\
    \    return newArray;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(num){return\
    \ num+1;});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var newlist = [];\n  for\
    \ (var i = 0; i < l.length; i++){\n    newlist.push(l[i] + 1);\n  }\n  return\
    \ newlist;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){\n\
    \        return x + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var result = []\n    for\
    \ (var i = 0; i < l.length; i++){\n        result.push(l[i] + 1)\n    }\n    return\
    \ result\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    for(var i = 0; i < l.length;\
    \ i++){\n        l[i]++;\n    }\n    return l;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(a => ++a);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return (l.map(function(x){\n\
    \        return x + 1;\n    }));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    if(l.length == 0){\n  \
    \      return [];\n    }\n    return [l[0] + 1].concat(incr_list(l.slice(1)));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\treturn l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    function helper(l, out){\n\
    \        if(is_null(l)){\n            return out;\n        } else {\n        \
    \    out = pair(head(l) + 1, out);\n            return helper(tail(l), out);\n\
    \        }\n    }\n    return reverse(helper(l, []));\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp3n8sqnrb.js:15\n    return reverse(helper(l, []));\n    ^\n\nReferenceError:\
    \ reverse is not defined\n    at incr_list (/tmp/tmp3n8sqnrb.js:15:5)\n    at\
    \ test (/tmp/tmp3n8sqnrb.js:23:20)\n    at Object.<anonymous> (/tmp/tmp3n8sqnrb.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    let result = l.map(function(val){\n\
    \        return val + 1;\n    });\n    return result;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(incr);\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp9n7srh6v.js:7\n  return l.map(incr);\n               ^\n\nReferenceError:\
    \ incr is not defined\n    at incr_list (/tmp/tmp9n7srh6v.js:7:16)\n    at test\
    \ (/tmp/tmp9n7srh6v.js:15:20)\n    at Object.<anonymous> (/tmp/tmp9n7srh6v.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    // your code here\n   \
    \ var numbers = l;\n    var i = 0;\n    while (i < numbers.length) {\n       \
    \ numbers[i] = numbers[i] + 1;\n        i = i + 1;\n    }\n    return numbers;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar newlist = [];\n\tfor\
    \ (var i = 0; i < l.length; i++){\n\t\tnewlist.push(l[i] + 1);\n\t}\n\treturn\
    \ newlist;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(element => element\
    \ + 1);\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return(l.map(x => x+1));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\treturn l.map(function(v){\n\
    \t\treturn v + 1;\n\t});\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(v => v + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  l = l.map(function(el) {\n\
    \    return el + 1;\n  });\n  return l;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(e => e + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var result = [];\n  for (var\
    \ i = 0; i < l.length; i++){\n    result.push(l[i] + 1);\n  }\n  return result;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar new_l = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tnew_l.push(l[i] + 1);\n\t}\n\treturn new_l;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  \n  return l.map(el=>el+1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(e => e + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(num){\n\
    \    return num + 1;\n  });\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar new_list = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var l1 = [];\n  for(var i=0;\
    \ i<l.length; i++){\n    l1.push(l[i]+1);\n  }\n  return l1;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar arr = l.map(function(num){\n\
    \t\treturn num += 1;\n\t});\n\treturn arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(e){\n\
    \    return e + 1;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar res = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tres.push(l[i] + 1);\n\t}\n\treturn res;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  \n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmproc8jlr6.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmproc8jlr6.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar newArr = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tnewArr.push(l[i] + 1);\n\t}\n\treturn newArr;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var output = [];\n    for(var\
    \ x = 0; x < l.length; x++){\n        output.push(l[x] + 1);\n    }\n    return\
    \ output;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\t//COMPLETE\n}\n\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmplreext13.js:16:10)\n   \
    \ at Object.<anonymous> (/tmp/tmplreext13.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var newArray = l.map(function(num){\n\
    \    return num+1;\n  });\n  return newArray;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var r = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        r.push(l[i] + 1);\n    }\n    return r;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return\
    \ x+1;});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    for(let i = 0; i < l.length;\
    \ i++){\n        l[i] += 1;\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    if (l.length == 0){\n \
    \       return []\n    }\n    let r = [];\n    for (let i = 0; i < l.length; i++){\n\
    \        r.push(l[i] + 1);\n    }\n    return r;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var inc_list = [];\n  \
    \  for(var i = 0; i < l.length; i++){\n        inc_list.push(l[i] + 1);\n    }\n\
    \    return inc_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(a => a+1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return map(function(x){return\
    \ x+1}, l);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmp10a0vq9h.js:7\n    return map(function(x){return x+1}, l);\n  \
    \  ^\n\nReferenceError: map is not defined\n    at incr_list (/tmp/tmp10a0vq9h.js:7:5)\n\
    \    at test (/tmp/tmp10a0vq9h.js:15:20)\n    at Object.<anonymous> (/tmp/tmp10a0vq9h.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var output = [];\n  for (var\
    \ i = 0; i < l.length; i++){\n    output.push(l[i] + 1);\n  }\n  return output;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  let n = [];\n  for(let i=0;\
    \ i<l.length; i++){\n    n.push(l[i]+1);\n  }\n  return n;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar t = [];\n\tfor(var i\
    \ = 0; i < l.length; i++){\n\t\tt.push(l[i] + 1);\n\t}\n\treturn t;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar newlist = [];\n\tfor\
    \ (var i = 0; i < l.length; i++){\n\t\tnewlist.push(l[i] + 1);\n\t}\n\treturn\
    \ newlist;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var i;\n    var arr = [];\n\
    \    for(i = 0; i < l.length; i++){\n        arr.push(l[i] + 1);\n    }\n    return\
    \ arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n \
    \ let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var a=[];\n    for(var\
    \ i=0;i<l.length;i++){\n        a.push(l[i]+1);\n    }\n    return a;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(e){\n\
    \        return e+1;\n    });\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar arr = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tarr.push(l[i] + 1);\n\t}\n\treturn arr;\n}\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(v => v + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return\
    \ x+1;});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(x){return\
    \ x+1});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tfor(var i = 0; i < l.length;\
    \ i++){\n\t\tl[i]++;\n\t}\n\treturn l;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(function(element){\n\
    \        return element + 1;\n    });\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var res = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        res.push(l[i] + 1);\n    }\n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar l1 = [];\n\tfor(i=0;\
    \ i<l.length; i++){\n\t\tl1.push(l[i]+1);\n\t}\n\treturn l1;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  // TODO\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp3spzg342.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmp3spzg342.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821315
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return _.map(l, function(element){return\
    \ element + 1;});\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmpbk0x2xm9.js:7\n  return _.map(l, function(element){return element\
    \ + 1;});\n  ^\n\nReferenceError: _ is not defined\n    at incr_list (/tmp/tmpbk0x2xm9.js:7:3)\n\
    \    at test (/tmp/tmpbk0x2xm9.js:15:20)\n    at Object.<anonymous> (/tmp/tmpbk0x2xm9.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var nums = [];\n  for(var\
    \ i = 0; i < l.length; i++){\n    nums.push(l[i] + 1);\n  }\n  return nums;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\t\tif(l.length == 0){\n\t\t\
    \treturn [];\n\t\t}\n\t\telse {\n\t\t\tvar first = l[0] + 1;\n\t\t\tvar rest =\
    \ incr_list(l.slice(1));\n\t\t\trest.unshift(first);\n\t\t\treturn rest;\n\t\t\
    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(e){\n\
    \    return e+1;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    function incr(elem){\n\
    \        return elem + 1;\n    }\n    return l.map(incr);\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tlet newl = [];\n\tl.forEach(function(x){\n\
    \t\tnewl.push(x+1);\n\t});\n\treturn newl;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(e){\n\
    \    return e + 1;\n  });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var new_list = [];\n  \
    \  for (var i = 0; i < l.length; i++){\n        new_list.push(l[i] + 1);\n   \
    \ }\n    return new_list;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  let arr = [];\n  for(i=0;\
    \ i<l.length; i++){\n    arr.push(l[i]+1);\n  }\n  return arr;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n\
    }\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var newArr = [];\n  for(i=0;\
    \ i<l.length; i++){\n    var x = l[i] + 1;\n    newArr.push(x);\n  }\n  return\
    \ newArr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar new_list = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var array = l;\n  var new_arr\
    \ = [];\n  for (var i = 0; i < array.length; i++) {\n    new_arr.push(array[i]\
    \ + 1);\n  }\n  return new_arr;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(v => v + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    l.forEach(function(ele,\
    \ i){\n        l[i]++;\n    });\n    return l;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar res=[];\n\tfor(var i=0;i<l.length;i++){\n\
    \t\tres.push(l[i]+1);\n\t}\n\treturn res;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var i =0;\n    var k =\
    \ [];\n    while(i<l.length){\n        k.push(l[i]+1);\n        i=i+1;\n    }\n\
    \    return k;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var result = [];\n  for (var\
    \ i = 0; i < l.length; i++){\n    result.push(l[i] + 1);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tif (l.length == 0){\n\t\t\
    return [];\n\t}\n\telse{\n\t\tvar new_list = incr_list(l.slice(1));\n\t\treturn\
    \ [l[0] + 1].concat(new_list);\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpnmaoiv68.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpnmaoiv68.js:16:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpnmaoiv68.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\treturn l.map(function(elem){\n\
    \t\treturn elem + 1;\n\t});\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar i = 0;\n\tvar incr_arr\
    \ = [];\n\twhile(i < l.length){\n\t\tincr_arr.push(l[i] + 1);\n\t\ti++;\n\t}\n\
    \treturn incr_arr;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp_xk_jtkn.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp_xk_jtkn.js:16:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp_xk_jtkn.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\treturn l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var res=[];\n    l.forEach(function(el){\n\
    \        res.push(el+1);\n    });\n    return res;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpneylc2bk.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpneylc2bk.js:14:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpneylc2bk.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar result = [];\n\t\n\t\
    for(var i = 0; i < l.length; i++){\n\t\tresult.push(l[i] + 1);\n\t}\n\t\n\treturn\
    \ result;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpavhoq5v6.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpavhoq5v6.js:16:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpavhoq5v6.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var result = [];\n  for (var\
    \ i = 0; i < l.length; i++){\n    result.push(l[i] + 1);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    if(!(l instanceof Array)){\n\
    \        return -1;\n    }\n    var res = new Array(l.length);\n    for(var i\
    \ = 0; i < l.length; i++){\n        res[i] = l[i] + 1;\n    }\n    return res;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpxaln65m7.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpxaln65m7.js:17:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpxaln65m7.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(function(item){\n\
    \    return item + 1;\n  });\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpfe2zz0a8.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpfe2zz0a8.js:12:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpfe2zz0a8.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar new_list = [];\n\tfor(var\
    \ i = 0; i < l.length; i++){\n\t\tnew_list.push(l[i] + 1);\n\t}\n\treturn new_list;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tlet result = [];\n\tl.forEach(function(item){\n\
    \t\titem++;\n\t\tresult.push(item);\n\t});\n\treturn result;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = incr_list;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3, 2, 1]),[4,\
    \ 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3,\
    \ 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmplj6x6uac.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmplj6x6uac.js:14:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmplj6x6uac.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var len = l.length;\n \
    \   var b = [];\n    for(var i = 0; i < len; i++){\n        b.push(l[i] + 1);\n\
    \    }\n    return b;\n}\nvar e = incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]);\n\
    document.getElementById(\"display_e\").innerHTML = e;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: ReferenceError
  stderr: "/tmp/tmphmnf_pu5.js:15\ndocument.getElementById(\"display_e\").innerHTML\
    \ = e;\n^\n\nReferenceError: document is not defined\n    at Object.<anonymous>\
    \ (/tmp/tmphmnf_pu5.js:15:1)\n    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n\
    \    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)\n\
    \    at Module.load (internal/modules/cjs/loader.js:928:32)\n    at Function.Module._load\
    \ (internal/modules/cjs/loader.js:769:14)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (internal/modules/run_main.js:72:12)\n    at internal/main/run_main_module.js:17:47\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var result = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        result.push(l[i] + 1);\n    }\n    return\
    \ result;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpa6o9o650.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpa6o9o650.js:13:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpa6o9o650.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\treturn l.map(function(v)\
    \ { return v + 1; });\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpdsznsizh.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpdsznsizh.js:10:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpdsznsizh.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmptz9bczk2.js:15:10)\n   \
    \ at Object.<anonymous> (/tmp/tmptz9bczk2.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821314
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(x => x + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    if(l.length == 0){\n  \
    \      return [];\n    }\n    let tail = l.slice(1);\n    return [l[0] + 1].concat(incr_list(tail));\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmplvutqdm2.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmplvutqdm2.js:14:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmplvutqdm2.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    if(l.length > 0){\n   \
    \     return l.map(x => x + 1);\n    }\n    return [];\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp0ipf_8xn.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp0ipf_8xn.js:13:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp0ipf_8xn.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar incr_l = [];\n\tfor(var\
    \ i=0; i<l.length; i++){\n\t\tincr_l.push(l[i]+1);\n\t}\n\treturn incr_l;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp5jfsf5a2.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp5jfsf5a2.js:13:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp5jfsf5a2.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(element => element\
    \ + 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp_57tofvr.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp_57tofvr.js:10:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp_57tofvr.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var a = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        a.push(l[i] + 1);\n    }\n    return a;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  // do something here...\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp1jcxm3va.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp1jcxm3va.js:10:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp1jcxm3va.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  var newList = [];\n  for\
    \ (var i = 0; i < l.length; i++){\n    newList.push(l[i] + 1);\n  }\n  return\
    \ newList;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpr6fn8p2_.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpr6fn8p2_.js:14:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpr6fn8p2_.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    let l2 = [];\n    for(let\
    \ i = 0; i < l.length; i++){\n        l2.push(l[i] + 1);\n    }\n    return l2;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmplgslwe9x.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmplgslwe9x.js:14:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmplgslwe9x.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    for(let i = 0; i < l.length;\
    \ i++){\n        l[i] += 1;\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821315
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\t//Your code goes here.\n\t\
    return l.map(x => x + 1);\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpqlzb4eiv.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpqlzb4eiv.js:11:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpqlzb4eiv.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\tvar incrementedList = [];\n\
    \tfor(var i = 0; i < l.length; i++){\n\t\tincrementedList.push(l[i] + 1);\n\t\
    }\n\treturn incrementedList;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpsnkq4i98.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpsnkq4i98.js:14:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpsnkq4i98.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    if (l == null){\n     \
    \   return [];\n    }\n    let array = [];\n    for (let i=0; i<l.length; i++){\n\
    \        array.push(l[i]+1);\n    }\n    return array;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmp9reyunp8.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmp9reyunp8.js:17:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmp9reyunp8.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    let array = [];\n    for(let\
    \ i = 0; i < l.length; i++){\n        array.push(l[i] + 1);\n    }\n    return\
    \ array;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmplulr8b1k.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmplulr8b1k.js:14:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmplulr8b1k.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 0
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    for(var i = 0; i < l.length;\
    \ i++){\n        l[i] = l[i] + 1;\n    }\n    return l;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821314
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n\treturn l.map(x => x + 1);\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpq52bhiw9.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpq52bhiw9.js:9:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpq52bhiw9.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var q = [];\n    for (var\
    \ i = 0; i < l.length; i++){\n        q.push(l[i] + 1);\n    }\n    return q;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpkhofbs5_.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpkhofbs5_.js:13:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpkhofbs5_.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n    var a = [];\n    for(var\
    \ i = 0; i < l.length; i++){\n        a.push(l[i] + 1);\n    }\n    return a;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpslswlygu.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpslswlygu.js:13:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpslswlygu.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  let result = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    result.push(l[i] + 1);\n  }\n  return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmploa4izgc.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmploa4izgc.js:14:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmploa4izgc.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
- exit_code: 1
  program: "//Return array with elements incremented by 1.\n// >>> incr_list([1, 2,\
    \ 3])\n// [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\nfunction incr_list(l){\n  return l.map(n => n + 1);\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = incr_list;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([3,\
    \ 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]),[6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
  status: Exception
  stderr: "internal/modules/cjs/loader.js:883\n  throw err;\n  ^\n\nError: Cannot\
    \ find module 'node:assert'\nRequire stack:\n- /tmp/tmpvwmf32lb.js\n    at Function.Module._resolveFilename\
    \ (internal/modules/cjs/loader.js:880:15)\n    at Function.Module._load (internal/modules/cjs/loader.js:725:27)\n\
    \    at Module.require (internal/modules/cjs/loader.js:952:19)\n    at require\
    \ (internal/modules/cjs/helpers.js:88:18)\n    at Object.<anonymous> (/tmp/tmpvwmf32lb.js:10:16)\n\
    \    at Module._compile (internal/modules/cjs/loader.js:1063:30)\n    at Object.Module._extensions..js\
    \ (internal/modules/cjs/loader.js:1092:10)\n    at Module.load (internal/modules/cjs/loader.js:928:32)\n\
    \    at Function.Module._load (internal/modules/cjs/loader.js:769:14)\n    at\
    \ Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)\
    \ {\n  code: 'MODULE_NOT_FOUND',\n  requireStack: [ '/tmp/tmpvwmf32lb.js' ]\n\
    }\n"
  stdout: ''
  timestamp: 1659977413
