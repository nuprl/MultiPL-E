name: HumanEval_158_find_max
language: js
prompt: "//Write a function that accepts an array of strings.\n// The array contains\
  \ different words. Return the word with maximum number\n// of unique characters.\
  \ If multiple strings have maximum number of unique\n// characters, return the one\
  \ which comes first in lexicographical order.\n// >>> find_max([\"name\", \"of\"\
  , \"string\"])\n// \"string\"\n// >>> find_max([\"name\", \"enam\", \"game\"])\n\
  // \"enam\"\n// >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n// \"aaaaaaa\"\nfunction\
  \ find_max(words){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = find_max;\n  assert.deepEqual(candidate([\"name\", \"of\", \"string\"]),\"string\"\
  );\n  assert.deepEqual(candidate([\"name\", \"enam\", \"game\"]),\"enam\");\n  assert.deepEqual(candidate([\"\
  aaaaaaa\", \"bb\", \"cc\"]),\"aaaaaaa\");\n  assert.deepEqual(candidate([\"abc\"\
  , \"cba\"]),\"abc\");\n  assert.deepEqual(candidate([\"play\", \"this\", \"game\"\
  , \"of\", \"footbott\"]),\"footbott\");\n  assert.deepEqual(candidate([\"we\", \"\
  are\", \"gonna\", \"rock\"]),\"gonna\");\n  assert.deepEqual(candidate([\"we\",\
  \ \"are\", \"a\", \"mad\", \"nation\"]),\"nation\");\n  assert.deepEqual(candidate([\"\
  this\", \"is\", \"a\", \"prrk\"]),\"this\");\n  assert.deepEqual(candidate([\"b\"\
  ]),\"b\");\n  assert.deepEqual(candidate([\"play\", \"play\", \"play\"]),\"play\"\
  );\n}\n\ntest();"
completions: ["  var max_word = \"\";\n  for(var i = 0; i < words.length; i++){\n\
    \    if(words[i].length > max_word.length){\n      max_word = words[i];\n    }\n\
    \  }\n  return max_word;\n}", "    var counts = [];\n    var obj = {};\n    var\
    \ n;\n    var letter;\n    var word;\n    var max = 0;\n    var ans = \"\";\n\
    \    for(i = 0; i < words.length; i++){\n        word = words[i];\n        n =\
    \ word.length;\n        obj = {};\n        for(j = 0; j < n; j++){\n         \
    \   letter = word[j];\n            if(!obj[letter]){\n                obj[letter]\
    \ = 1;\n            }\n        }\n        counts.push(Object.keys(obj).length);\n\
    \    }\n    for(i = 0; i < counts.length; i++){\n        if(counts[i] > max){\n\
    \            max = counts[i];\n            ans = words[i];\n        }\n    }\n\
    \    return ans;\n}\n", "    var result = words[0];\n    var word_list = words.split(\"\
    \");\n    var result_list = result.split(\"\");\n    var count = 0;\n    var max_count\
    \ = 0;\n    var max_result = \"\";\n    for (var i = 0; i < word_list.length;\
    \ i++){\n        var current_word = word_list[i];\n        for (var j = 0; j <\
    \ result_list.length; j++){\n            if (current_word == result_list[j]){\n\
    \                count++;\n            }\n        }\n        if (count > max_count){\n\
    \            max_count = count;\n            max_result = current_word;\n    \
    \    }\n    }\n    return max_result;\n}", "  var count_arr = [];\n  for(var i\
    \ = 0; i < words.length; i++){\n    var word = words[i];\n    var count = 0;\n\
    \    for(var j = 0; j < word.length; j++){\n      var char = word[j];\n      if(word.indexOf(char)\
    \ === word.lastIndexOf(char)){\n        count += 1;\n      }\n    }\n    count_arr.push(count);\n\
    \  }\n  var max = Math.max.apply(null, count_arr);\n  return words[count_arr.indexOf(max)];\n\
    }\n", "    var maximum_count = 0;\n    var max_index = 0;\n    var current_count\
    \ = 0;\n    var character_list = [];\n    for(var i = 0; i < words.length; i++){\n\
    \        //iterate through the characters of the word\n        for(var j = 0;\
    \ j < words[i].length; j++){\n            //if the character does not exist in\
    \ the list, then it is unique\n            if(character_list.indexOf(words[i][j])\
    \ === -1){\n                current_count += 1;\n                character_list.push(words[i][j]);\n\
    \            }\n        }\n        //if the current count is larger than the maximum\
    \ count,\n        // replace the max\n        if(current_count > maximum_count){\n\
    \            maximum_count = current_count;\n            max_index = i;\n    \
    \    }\n        //reset for next word\n        current_count = 0;\n        character_list\
    \ = [];\n    }\n    return words[max_index];\n}\n", "\tvar count = 0;\n\tvar max_count\
    \ = 0;\n\tvar word = \"\";\n\tfor(i=0; i<words.length; i++){\n\t\tcount = 0;\n\
    \t\tfor(j=0; j<words[i].length; j++){\n\t\t\tfor(k=0; k<words[i].length; k++){\n\
    \t\t\t\tif(words[i][j] === words[i][k]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t\tif(count > max_count){\n\t\t\tmax_count = count;\n\t\t\tword = words[i];\n\
    \t\t}\n\t}\n\treturn word;\n}", "    var unique_characters = 0;\n    var max_word\
    \ = \"\";\n    for(var i = 0; i < words.length; i++){\n        if(unique_characters\
    \ < count_unique_characters(words[i])){\n            unique_characters = count_unique_characters(words[i]);\n\
    \            max_word = words[i];\n        }\n    }\n    return max_word;\n}",
  "    let unique = [];\n    for(let i = 0; i < words.length; i++){\n        unique.push(unique_chars(words[i]));\n\
    \    }\n    let max = 0;\n    let index = 0;\n    for(let i = 0; i < unique.length;\
    \ i++){\n        if(unique[i] > max){\n            max = unique[i];\n        \
    \    index = i;\n        }\n    }\n    return words[index];\n}", "    var i,j,n=words.length,count=0,max=0,c=0,index=0;\n\
    \    for(i=0;i<n;i++){\n        var x=words[i];\n        var y={};\n        for(j=0;j<x.length;j++){\n\
    \            var z=x[j];\n            if(y[z]===undefined){\n                y[z]=1;\n\
    \                count+=1;\n            }\n        }\n        if(count>max){\n\
    \            max=count;\n            c=count;\n            index=i;\n        }\n\
    \        else if(count===max){\n            for(j=0;j<c;j++){\n              \
    \  if(words[index][j]>x[j]){\n                    break;\n                }\n\
    \                else if(words[index][j]<x[j]){\n                    index=i;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     count=0;\n    }\n    return words[index];\n}", "    var max = 0;\n    var\
    \ maxword = \"\";\n    for (var i = 0; i < words.length; i++){\n        var l\
    \ = letters(words[i]);\n        if (l > max){\n            max = l;\n        \
    \    maxword = words[i];\n        }\n    }\n    return maxword;\n}\n", "    let\
    \ result = \"\";\n    let max_length = 0;\n    for(let i = 0; i < words.length;\
    \ i++){\n        let current_string = words[i];\n        let current_string_length\
    \ = 0;\n        let set = new Set();\n        for(let j = 0; j < current_string.length;\
    \ j++){\n            if(!set.has(current_string[j])){\n                set.add(current_string[j]);\n\
    \                current_string_length++;\n            }\n        }\n        if(current_string_length\
    \ > max_length){\n            max_length = current_string_length;\n          \
    \  result = current_string;\n        }\n    }\n    return result;\n}", "  var\
    \ max_count = 0;\n  var max_word = \"\";\n  for(var i = 0; i < words.length; i++){\n\
    \    var word = words[i];\n    var count = count_unique(word);\n    if(count >\
    \ max_count){\n      max_count = count;\n      max_word = word;\n    }\n  }\n\
    \  return max_word;\n}\n", "    var final_word = \"\";\n    var final_word_count\
    \ = 0;\n    for(var i = 0; i < words.length; i++){\n        var unique_count =\
    \ count_unique(words[i]);\n        if(unique_count > final_word_count){\n    \
    \        final_word = words[i];\n            final_word_count = unique_count;\n\
    \        }\n    }\n    return final_word;\n}", "  let u_chars = [];\n  for(let\
    \ i = 0; i < words.length; i++){\n    u_chars.push(new Set(words[i]).size);\n\
    \  }\n  let max = Math.max(...u_chars);\n  return words[u_chars.indexOf(max)];\n\
    }", "    let max = 0;\n    let maxWord = '';\n    for(let i = 0; i < words.length;\
    \ i++){\n        let word = words[i];\n        let wordSet = new Set(word);\n\
    \        if(wordSet.size > max){\n            max = wordSet.size;\n          \
    \  maxWord = word;\n        }\n    }\n    return maxWord;\n}", "  var max = words[0];\n\
    \  var max_count = 0;\n  for(var i = 0; i < words.length; i++){\n    var count\
    \ = 0;\n    for(var j = 0; j < words[i].length; j++){\n      if(words[i].indexOf(words[i][j])\
    \ === j){\n        count += 1;\n      }\n    }\n    if(count > max_count){\n \
    \     max = words[i];\n      max_count = count;\n    }\n  }\n  return max;\n}\n",
  "  var maxCharMap = {};\n  var maxCharWord = \"\";\n  for(var i = 0; i < words.length;\
    \ i++){\n    var currCharMap = {};\n    var word = words[i];\n    for(var j =\
    \ 0; j < word.length; j++){\n      var char = word[j];\n      if(currCharMap[char]\
    \ === undefined){\n        currCharMap[char] = 1;\n      }\n    }\n    if(Object.keys(currCharMap).length\
    \ > Object.keys(maxCharMap).length){\n      maxCharMap = currCharMap;\n      maxCharWord\
    \ = word;\n    }\n  }\n  return maxCharWord;\n}", "    let maxLength = 0;\n  \
    \  let wordWithMaxLength = \"\";\n    let currentWord = \"\";\n    for(let word\
    \ of words){\n        currentWord = uniqChars(word);\n        if(currentWord.length\
    \ > maxLength){\n            maxLength = currentWord.length;\n            wordWithMaxLength\
    \ = word;\n        }\n    }\n    return wordWithMaxLength;\n}\n", "    var maxChar\
    \ = 0\n    var maxWord = words[0]\n    for(var i = 0; i < words.length; i++){\n\
    \        var charInWord = 0\n        for(var j = 0; j < words[i].length; j++){\n\
    \            for(var k = 0; k < words[i].length; k++){\n                if(words[i][j]\
    \ == words[i][k]){\n                    charInWord += 1\n                }\n \
    \           }\n        }\n        if(charInWord > maxChar){\n            maxChar\
    \ = charInWord\n            maxWord = words[i]\n        }\n    }\n    return maxWord\n\
    }", "    if(words.length == 0){\n        return \"No words\";\n    }\n    let\
    \ max = words[0];\n    let max_value = words[0].length;\n    for(let i = 1; i\
    \ < words.length; i++){\n        if(max_value < words[i].length){\n          \
    \  max = words[i];\n            max_value = words[i].length;\n        }\n    }\n\
    \    return max;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
