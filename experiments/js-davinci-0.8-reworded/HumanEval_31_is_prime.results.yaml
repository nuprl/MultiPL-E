language: js
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n==1) {\n        return false;\n    }\n\n    if (n==2) {\n        return\
    \ true;\n    }\n\n    if (n%2==0) {\n        return false;\n    }\n\n    var limit\
    \ = Math.sqrt(n);\n    for (var i = 3; i <= limit; i += 2) {\n        if (n%i==0)\
    \ {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  // your answer here\n  if (n==1){\n    return false;\n  }\n  else if (n<=0){\n\
    \    return false;\n  }\n  else{\n    for (var i=2; i<n; i++){\n      if (n%i==0){\n\
    \        return false;\n      }\n    }\n    return true;\n  }\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n <= 1){\n\t\treturn false;\n\t}\n\n\tfor (i = 2; i < n; i++){\n\t\tif (n\
    \ % i == 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (var i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n <= 1) return false;\n    if (n === 2) return true;\n    if (n % 2 ===\
    \ 0) return false;\n    for (var i = 3; i < n; i+=2){\n        if (n % i === 0)\
    \ return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) {\n    return false;\n  }\n  for (var i = 2; i < n; i++) {\n   \
    \ if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    let m = Math.floor(Math.sqrt(n));\n    for(let i = 2; i <= m; i++) {\n  \
    \      if(n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpr26wkuzf.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpr26wkuzf.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) return false;\n  for (var i = 2; i < n; i++){\n    if (n % i ==\
    \ 0) return false;\n  }\n  return true;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n < 2) return false;\n\tfor (var i = 2; i < n; i++){\n\t\tif (n % i == 0)\
    \ return false;\n\t}\n\treturn true;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n < 2) {\n      return false;\n    } else if (n == 2) {\n      return\
    \ true;\n    } else {\n      for (var x = 2; x < n; x++) {\n        if (n % x\
    \ == 0) {\n          return false;\n        }\n      }\n      return true;\n \
    \   }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    var divisor = 2;\n    while (n > divisor){\n        if(n % divisor == 0){\n\
    \            return false;\n        }\n        else\n            divisor++;\n\
    \    }\n    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7w0cm2sj.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp7w0cm2sj.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    var i;\n    if (n > 3){\n        for (i = 2; i < n; i++){\n            if\
    \ (n % i == 0){\n                return false;\n            }\n        }\n   \
    \     return true;\n    }\n    else{\n        return false;\n    }\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n === 2){\n        return true;\n    }\n    else if (n < 2 || n % 2 ===\
    \ 0){\n        return false;\n    }\n    else {\n        for (var i = 3; i <=\
    \ Math.sqrt(n); i++){\n            if (n % i === 0){\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    var prime = true;\n    for(var i = 2; i < n; i++){\n        if(n % i == 0){\n\
    \            prime = false;\n        }\n    }\n    return prime;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp14lngvmc.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp14lngvmc.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(var i = 2; i < n; i++){\n        if(n % i === 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn_q1d0uy.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn_q1d0uy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n == 1){\n    return false;\n  }\n  for (i = 2; i < n; i++){\n    if (n\
    \ % i == 0){\n      return false;\n    }\n  }\n  return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  let i;\n  let j;\n  let last = 1;\n  if (n < 2){\n    return false;\n  }\n\
    \  if (n == 2){\n    return true;\n  }\n  if (n % 2 == 0){\n    return false;\n\
    \  }\n  for (i = 3; i < n; i += 2){\n    for (j = 3; j < i; j += 2){\n      if\
    \ (i % j == 0){\n        last = 0;\n        break;\n      }\n    }\n    if (last\
    \ == 1){\n      if (n % i == 0){\n        return false;\n      }\n    }\n    last\
    \ = 1;\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) {\n    return false;\n  }\n  var i = 2;\n  while (i < n) {\n   \
    \ if (n % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    // TODO\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8caeatgd.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmp8caeatgd.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \treturn (n >= 1) && (n <= 3) || (n % 2 != 0 && n % 3 != 0);\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp27j_adtk.js:31:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp27j_adtk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) {\n    return false;\n  } else if (n === 2) {\n    return true;\n\
    \  } else {\n    for (var i = 2; i < n; i++) {\n      if (n % i === 0) {\n   \
    \     return false;\n      }\n    }\n    return true;\n  }\n}\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n == 1) return false;\n\tfor (var i = 2; i <= Math.sqrt(n); i++){\n\t\t\
    if (n % i == 0) return false;\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tvar i;\n\tif (n <= 1) {\n\t\treturn false;\n\t}\n\tif (n === 2) {\n\t\treturn\
    \ true;\n\t}\n\tif (n % 2 === 0) {\n\t\treturn false;\n\t}\n\tfor (i = 3; i <\
    \ n; i += 2) {\n\t\tif (n % i === 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn\
    \ true;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) return false;\n  for (var i = 2; i < n; i++){\n    if (n % i ==\
    \ 0) return false;\n  }\n  return true;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n<2){\n        return false;\n    }\n    for (var i=2; i<=Math.sqrt(n);\
    \ i++){\n        if (n%i == 0){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  // for(var i = n - 1; i >= 2; i--){\n  //   if(n % i === 0){\n  //     return\
    \ false;\n  //   }\n  // }\n  // return true;\n  var divisor = 2;\n  while(n >\
    \ divisor){\n    if(n % divisor === 0){\n      return false;\n    } else {\n \
    \     divisor++;\n    }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6qso9_i7.js:45:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6qso9_i7.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n < 2) {\n\t\treturn false;\n\t}\n\tfor (var i = 2; i < n; i++) {\n\t\t\
    if (n % i == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n <= 1){\n\t\treturn false;\n\t}\n\tfor (var i = 2; i <= Math.floor(Math.sqrt(n));\
    \ i++){\n\t\tif (n % i == 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n==1){\n        return false;\n    }\n    if (n==2){\n        return\
    \ true;\n    }\n    if (n%2==0){\n        return false;\n    }\n    var r = Math.floor(Math.sqrt(n));\n\
    \    for (var i=3; i<=r; i+=2){\n        if (n%i==0){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  var check;\n  var i = 2;\n  if (n === 1){\n    return false;\n  }\n  while\
    \ (i < n){\n    if (n % i === 0){\n      return false;\n    }\n    i++;\n  }\n\
    \  return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(var i = 2; i < n; i++){\n        if(n % i === 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn_q1d0uy.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn_q1d0uy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n == 1){\n\t\treturn false;\n\t}\n\tfor (var i = 2; i < n; i++){\n\t\tif\
    \ (n % i == 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 ==\
    \ 0 || n % 3 == 0) return false;\n    for (var i = 5; i * i <= n; i = i + 6) {\n\
    \        if (n % i == 0 || n % (i + 2) == 0)\n           return false;\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n <= 1) return false;\n    for (var i = 2; i < n; i++) {\n        if\
    \ (n % i == 0) return false;\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    var count = 0;\n    for(var i = 1; i <= n; i++){\n        if(n % i == 0){\n\
    \            count++;\n        }\n    }\n    if(count == 2){\n        return true;\n\
    \    }\n    else{\n        return false;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n < 2) return false;\n\tif (n == 2) return true;\n\tif (n % 2 == 0) return\
    \ false;\n\tfor (var i = 3; i <= Math.sqrt(n); i += 2) {\n\t\tif (n % i == 0)\
    \ return false;\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  var count = 0;\n  for(var i = 1; i <= n; i++){\n    if(n % i == 0){\n     \
    \ count++;\n    }\n  }\n  if(count == 2){\n    return true;\n  }\n  else{\n  \
    \  return false;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tvar is_prime = true;\n\tfor (var i = 2; i < n; i++) {\n\t\tif (n % i == 0) {\n\
    \t\t\tis_prime = false;\n\t\t}\n\t}\n\treturn is_prime;\n}\n\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpuxjol16v.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpuxjol16v.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n < 2) return false;\n    var i = 2;\n    while (i * i <= n) {\n    \
    \    if (n % i == 0) return false;\n        i += 1;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(var i = 2; i < n; i++){\n        if(n % i === 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn_q1d0uy.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn_q1d0uy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n<=1){\n        return false;\n    }\n    for (let i=2; i<n; i++){\n\
    \        if (n%i==0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(var i = n-1; i > 1; i--){\n        if(n % i == 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp980tzo3l.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp980tzo3l.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n == 2){\n\t\treturn true;\n\t}\n\telse if (n == 3){\n\t\treturn true;\n\
    \t}\n\telse if (n%2 == 0){\n\t\treturn false;\n\t}\n\telse if (n%3 == 0){\n\t\t\
    return false;\n\t}\n\telse{\n\t\tfor (var i = 5; i < Math.sqrt(n); i = i+6){\n\
    \t\t\tif (n%i == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse if (n%(i+2) ==\
    \ 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpyyqdlw70.js:52:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpyyqdlw70.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tlet div = 2;\n\tfor(; div * div <= n; div++){\n\t\tif(n % div == 0){\n\t\t\t\
    return false;\n\t\t}\n\t}\n\treturn true;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpej829nzn.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpej829nzn.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tvar mod = 0;\n\tvar i = 2;\n\tfor(i; i<n; i++){\n\t\tmod = n%i;\n\t\tif(mod\
    \ == 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmph14x_39i.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmph14x_39i.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n <= 0) {\n    return false;\n  }\n  for (var i = 2; i < n; i++) {\n  \
    \  if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo5a02w9r.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpo5a02w9r.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n === 1) {\n        return false;\n    } else if (n === 2) {\n      \
    \  return true;\n    } else {\n        for (var x = 2; x < n; x++) {\n       \
    \     if (n % x === 0) {\n                return false;\n            }\n     \
    \   }\n        return true;\n    }\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tvar flag = true;\n\tif(n!=1){\n\t\tfor(var i=2;i<n;i++){\n\t\t\tif(n%i==0){\n\
    \t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\telse{\n\t\tflag\
    \ = false;\n\t}\n\treturn flag;\n}\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(var i = 2; i < n; i++){\n        if(n % i === 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn_q1d0uy.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn_q1d0uy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n<2){\n        return false;\n    }\n    for (var i=2; i<=Math.sqrt(n);\
    \ i++){\n        if (n%i===0){\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n == 1){\n    return false;\n  }\n  if (n == 2){\n    return true;\n  }\n\
    \  for (i = 2; i < n; i++){\n    if (n % i == 0){\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n<2){\n        return false;\n    }\n    for (let i=2; i<n; i++){\n \
    \       if (n%i==0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let\
    \ candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(var i = n-1; i>1; i--){\n        if(n%i === 0){\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp34jzstbj.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp34jzstbj.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n <= 1) return false;\n    if (n == 2) return true;\n    for (var i =\
    \ 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i == 0) {\n      \
    \      return false;\n        }\n    }\n    return true;\n}\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    // your answer here\n    if (n == 1){\n        return false;\n    }\n   \
    \ else if (n == 2){\n        return true;\n    }\n    else if (n % 2 == 0){\n\
    \        return false;\n    }\n    else {\n        var i = 3;\n        var count\
    \ = 0;\n        while (i < Math.sqrt(n) + 1){\n            if (n % i == 0){\n\
    \                count += 1;\n            }\n            i += 2;\n        }\n\
    \        if (count == 0){\n            return true;\n        }\n        else {\n\
    \            return false;\n        }\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(var i = n-1; i > 1; i--){\n        if(n % i == 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp980tzo3l.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp980tzo3l.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n > 1) {\n\t\tfor (var i = 2; i < n; i++) {\n\t\t\tif (n % i === 0) {\n\t\
    \t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    }\n    if (n <= 3) {\n        return\
    \ true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n \
    \   }\n    for (var i = 5; i * i <= n; i = i + 6) {\n        if (n % i == 0 ||\
    \ n % (i + 2) == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    let sum=0;\n    if(n<2){\n        return false;\n    }\n    else{\n     \
    \   for(i=2;i<=n/2;i++){\n            if(n%i==0){\n                sum+=1;\n \
    \           }\n        }\n        if(sum==0){\n            return true;\n    \
    \    }\n        else{\n            return false;\n        }\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif ( n < 2){\n\t\treturn false;\n\t}\n\tfor ( var x = 2; x <= Math.sqrt(n);\
    \ x++){\n\t\tif ( n % x == 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (var i = 2; i <= Math.sqrt(n);\
    \ i++){\n        if (n % i == 0){\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    var prime = true;\n    for(var i = 2; i < n; i++){\n        if(n % i == 0){\n\
    \            prime = false;\n        }\n    }\n    return prime;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpe08mrk7r.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpe08mrk7r.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  for(var i = 2; i < n; i++){\n    if(n % i === 0){\n      return false;\n  \
    \  }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp956dqji0.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp956dqji0.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n <= 1){\n\t\treturn false;\n\t}\n\tif (n == 2){\n\t\treturn true;\n\t}\n\
    \tif (n % 2 == 0){\n\t\treturn false;\n\t}\n\tfor (i = 3; i < n; i += 2){\n\t\t\
    if (n % i == 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n==1){\n        return false;\n    }\n    if (n==2){\n        return\
    \ true;\n    }\n    var d=n-1;\n    while (d>1){\n        if (n%d==0){\n     \
    \       return false;\n        }\n        d-=1;\n    }\n    return true;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n <= 3) return true;\n\tfor (var i = 2; i < n; i++){\n\t\tif (n % i == 0)\
    \ return false;\n\t}\n\treturn true;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3ivmhj60.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp3ivmhj60.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(var i = 2; i < n; i++){\n        if(n % i === 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn_q1d0uy.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn_q1d0uy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n==1){\n\t\treturn false;\n\t}\n\tvar prime=true;\n\tfor (var i=2; i<n;\
    \ i++){\n\t\tif (n%i==0){\n\t\t\tprime=false;\n\t\t}\n\t}\n\treturn prime;\n}\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n === 1) {\n\t\treturn false;\n\t}\n\tif (n === 2) {\n\t\treturn true;\n\
    \t}\n\tif (n%2 === 0) {\n\t\treturn false;\n\t}\n\tfor (var i = 3; i < Math.sqrt(n)+1;\
    \ i+=2) {\n\t\tif (n%i === 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \t// ===> TODO\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbb7oo9xu.js:25:10)\n\
    \    at Object.<anonymous> (/tmp/tmpbb7oo9xu.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tfor(var i = 2; i < n; i++){\n\t\tif(n % i === 0){\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnll0pnqi.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnll0pnqi.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n <= 1){\n\t\treturn false;\n\t}\n\n\tfor (var i = 2; i <= Math.floor(Math.sqrt(n));\
    \ i++){\n\t\tif (n % i == 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n < 2) return false;\n\tif (n === 2) return true;\n\telse if (n % 2 ===\
    \ 0) return false;\n\tfor (let i = 3; i <= Math.sqrt(n); i += 2)\n\t\tif (n %\
    \ i === 0) return false;\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n === 1) {\n        return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n == 1) {\n\t\treturn false;\n\t}\n\telse {\n\t\tfor (var i = 2; i < n;\
    \ i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\
    return true;\n\t}\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tvar m = n - 1;\n\twhile (m > 1){\n\t\tif (n % m == 0){\n\t\t\treturn false;\n\
    \t\t}\n\t\tm--;\n\t}\n\treturn true;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplr__hf2k.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmplr__hf2k.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n < 2) {\n      return false;\n    }\n    var i = 2;\n    while (i *\
    \ i <= n) {\n      if (n % i == 0) {\n        return false;\n      }\n      i\
    \ += 1;\n    }\n    return true;\n  }\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  for(var i = 2; i < n; i++){\n    if(n % i === 0){\n      return false;\n  \
    \  }\n  }\n  return true;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfw91l5he.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfw91l5he.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  //We will check if a number can be evenly divided by each number up to the\
    \ square root of that number.\n  //If it can be evenly divided by one of them,\
    \ it's not prime.\n  var length = Math.floor(Math.sqrt(n));\n  //We will not divide\
    \ by 1.\n  for(var i = 2; i <= length; i++){\n    if(n % i === 0){\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb9r19vmn.js:39:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpb9r19vmn.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n <= 1) {\n    return false;\n  }\n  for (var i = 2; i < n; i++) {\n  \
    \  if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n == 2){\n        return true;\n    }\n    else if (n < 2 || n % 2 ==\
    \ 0){\n        return false;\n    }\n    for (let i = 3; i * i <= n; i += 2){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n <= 1) return false;\n    for (var i = 2; i < n; i++) {\n        if\
    \ (n % i == 0) return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n == 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    } else if (n == 2 || n == 3) {\n\
    \        return true;\n    } else if (n % 2 == 0 || n % 3 == 0) {\n        return\
    \ false;\n    } else {\n        for (var i = 5; i * i <= n; i += 6) {\n      \
    \      if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\n\n\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n===2){\n        return true;\n    }\n    else if (n>2){\n        for\
    \ (var i=2; i<n; i++){\n            if (n%i===0){\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    else {\n        return\
    \ false;\n    }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n===2){\n        return true;\n    }\n    if (n===1 || n%2===0){\n  \
    \      return false;\n    }\n    for (var i=3; i*i<=n; i+=2){\n        if (n%i===0){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n==1){\n    return false;\n  }\n  for (i=2; i<n; i++){\n    if (n%i ==\
    \ 0){\n      return false;\n    }\n  }\n  return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n <= 1){\n\t\treturn false;\n\t}\n\tvar count = 0;\n\tfor (var i = 1; i\
    \ <= n; i++){\n\t\tif (n % i == 0){\n\t\t\tcount++;\n\t\t}\n\t}\n\tif (count ==\
    \ 2){\n\t\treturn true;\n\t}\n\telse{\n\t\treturn false;\n\t}\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n === 1){\n    return false;\n  }\n  for (var i = 2; i < n; i++){\n   \
    \ if (n % i === 0){\n      return false;\n    }\n  }\n  return true;\n}\n\n\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n === 1) return false;\n    var p = 2;\n    while (p*p <= n){\n     \
    \   if (n % p === 0) return false;\n        p += 1;\n    }\n    return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n < 2) {\n        return false;\n    }\n    for (let i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \t//return false if n is 1, otherwise true if n is not divisible by 2 to n-1\n\
    \tif (n==1){\n\t\treturn false;\n\t}\n\tfor (var i=2; i<n; i++){\n\t\tif (n%i==0){\n\
    \t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    let i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n        i = i + 1;\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbdcll_2b.js:38:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpbdcll_2b.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n\
    \  }\n  if (n > 2) {\n    for (var i = 2; i < n; i++) {\n      if (n % i === 0)\
    \ {\n        return false;\n      }\n    }\n    return true;\n  }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n==1) {\n        return false;\n    }\n    else if (n==2) {\n       \
    \ return true;\n    }\n    else {\n        for (var i=2; i<n; i++) {\n       \
    \     if (n%i == 0) {\n                return false;\n            }\n        }\n\
    \        return true;\n    }\n}\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n == 1) {\n        return false;\n    }\n    for (var i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n === 2) {\n\t\treturn true;\n\t} else if (n < 2) {\n\t\treturn false;\n\
    \t} else {\n\t\tvar sqr = Math.floor(Math.sqrt(n));\n\t\tfor (var i = 2; i <=\
    \ sqr; i++) {\n\t\t\tif (n % i === 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\
    }\n\t\treturn true;\n\t}\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n == 2){\n        return true;\n    }\n    if (n%2 == 0){\n        return\
    \ false;\n    }\n    for (var i = 3; i*i <= n; i+=2){\n        if (n%i == 0){\n\
    \            return false;\n        }\n    }\n    return true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd9rm8f0p.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpd9rm8f0p.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tvar prime = true;\n\tfor(var i = 2; i < n; i++){\n\t\tif(n % i == 0){\n\t\t\t\
    prime = false;\n\t\t}\n\t}\n\treturn prime;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8laxt1c_.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp8laxt1c_.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n == 1){\n\t\treturn false;\n\t}\n\tif (n == 2){\n\t\treturn true;\n\t}\n\
    \tfor (i = 2; i <= Math.sqrt(n); i++){\n\t\tif (n % i == 0){\n\t\t\treturn false;\n\
    \t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    var f = 0;\n    for(var i = 2; i < n; i++){\n        if(n % i == 0){\n  \
    \          f = 1;\n            break;\n        }\n    }\n    if(f == 0){\n   \
    \     return true;\n    }\n    else{\n        return false;\n    }\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpe43mdb_h.js:42:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpe43mdb_h.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n===1){\n        return false;\n    }\n    if (n===2){\n        return\
    \ true;\n    }\n    if (n%2 === 0){\n        return false;\n    }\n    for (let\
    \ i=3; i<n; i++){\n        if (n%i === 0){\n            return false;\n      \
    \  }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tfor(var i = 2; i < n; i++){\n\t\tif(n % i === 0){\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnll0pnqi.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpnll0pnqi.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  for(var i = 2; i < n; i++){\n    if(n % i === 0){\n      return false;\n  \
    \  }\n  }\n  return true;\n}\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfw91l5he.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpfw91l5he.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n <= 1) return false;\n    if (n <= 3) return true;\n    if (n % 2 ==\
    \ 0 || n % 3 == 0) return false;\n    for (var i = 5; i * i <= n; i = i + 6) {\n\
    \        if (n % i == 0 || n % (i + 2) == 0) return false;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n <= 1) {\n        return false;\n    } else if (n <= 3) {\n        return\
    \ true;\n    } else if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n \
    \   }\n    var i = 5;\n    while (i * i <= n) {\n        if (n % i == 0 || n %\
    \ (i + 2) == 0) {\n            return false;\n        }\n        i = i + 6;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    //determine if a given number is prime, return true/false\n    if (n===1){\n\
    \        return false;\n    }\n    if (n===2){\n        return true;\n    }\n\
    \    if (n % 2 === 0){\n        return false;\n    }\n    if (n % 3 === 0){\n\
    \        return false;\n    }\n    var m = Math.floor(Math.sqrt(n));\n    for\
    \ (var i = 5; i <= m; i+=6){\n        if (n % i === 0){\n            return false;\n\
    \        }\n        if (n % (i+2) === 0){\n            return false;\n       \
    \ }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(var i = 2; i < n; i++){\n        if(n % i === 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn_q1d0uy.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpn_q1d0uy.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n == 1){\n        return false;\n    }\n    for (i = 2; i < n; i++){\n\
    \        if (n % i == 0){\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n == 2){\n        return true;\n    } else if (n < 2){\n        return\
    \ false;\n    }\n    for (var i = 2; i < n; i++){\n        if (n % i == 0){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) return false;\n  for (var i = 2; i < n; i++){\n    if (n % i ==\
    \ 0) return false;\n  }\n  return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(let i = 2; i < n; i++){\n        if(n % i === 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgsjyq7cx.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgsjyq7cx.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n==1){\n    return false;\n  }\n  else if (n == 2){\n    return true;\n\
    \  }\n  else {\n    for (i=2; i<n; i++){\n      if (n%i==0){\n        return false;\n\
    \      }\n    }\n    return true;\n  }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    // Your code here\n    if (n <= 1) {\n        return false;\n    }\n    if\
    \ (n == 2) {\n        return true;\n    }\n    for (var i = 2; i < n; i++) {\n\
    \        if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n<2){\n        return false;\n    }\n    if (n==2){\n        return true;\n\
    \    }\n    if (n%2==0){\n        return false;\n    }\n    for (var i=3; i<=Math.sqrt(n);\
    \ i++){\n        if (n%i==0){\n            return false;\n        }\n    }\n \
    \   return true;\n}\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n === 2) {\n        return true;\n    } else if (n < 2 || n % 2 === 0)\
    \ {\n        return false;\n    }\n    let m = Math.sqrt(n);\n    for (let i =\
    \ 3; i <= m; i += 2) {\n        if (n % i === 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n <= 1) return false;\n    for (var i = 2; i < n; i++) {\n        if\
    \ (n % i == 0) return false;\n    }\n    return true;\n}\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n==1){\n        return false;\n    }\n    if (n == 2){\n        return\
    \ true;\n    }\n    if (n%2 == 0){\n        return false;\n    }\n    var i =\
    \ 3;\n    var range = Math.sqrt(n);\n    while (i <= range){\n        if (n%i\
    \ == 0){\n            return false;\n        }\n        i += 2;\n    }\n    return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n === 1){\n    return false;\n  }\n  else{\n    for (var i = 2; i < n;\
    \ i++){\n      if (n % i === 0){\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    //your code here\n\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\nfalse\n    at test (/tmp/tmpl3mi9yq2.js:26:10)\n\
    \    at Object.<anonymous> (/tmp/tmpl3mi9yq2.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n===1){\n    return false;\n  }\n  if (n===2){\n    return true;\n  }\n\
    \  if (n%2===0){\n    return false;\n  }\n  for (i=3; i<=Math.sqrt(n); i++){\n\
    \    if (n%i===0){\n      return false;\n    }\n  }\n  return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \treturn true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxylp98qk.js:25:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpxylp98qk.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    //check input\n    if(n <= 0 || n == 1){\n        return false;\n    }\n\
    \    //handle 2 and 3\n    if(n == 2 || n == 3){\n        return true;\n    }\n\
    \    //handle even numbers\n    if(n % 2 == 0){\n        return false;\n    }\n\
    \    //handle odd numbers\n    var i = 3;\n    while(i <= Math.sqrt(n)){\n   \
    \     if(n % i == 0){\n            return false;\n        }\n        i += 2;\n\
    \    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n == 1){\n    return false;\n  }\n\n  for (var i = 2; i < n; i++){\n  \
    \  if (n % i == 0){\n      return false;\n    }\n  }\n  return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  var i;\n  if (n <= 1) return false;\n  if (n <= 3) return true;\n  if (n %\
    \ 2 == 0 || n % 3 == 0) return false;\n  for (i = 5; i * i <= n; i = i + 6) {\n\
    \    if (n % i == 0 || n % (i + 2) == 0) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    //If number is 1 or below return false, it cannot be prime.\n    if(n <=\
    \ 1){\n        return false;\n    }\n    //Loop over all the numbers below the\
    \ input number.\n    for(let i = 2; i < n; i++){\n        //If the input number\
    \ modulo i is 0 then the input number is not prime.\n        if(n % i == 0){\n\
    \            return false;\n        }\n    }\n    //If not prime is returned then\
    \ the input number is prime.\n    return true;\n}\n\n\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n === 1) return false;\n  for (var i = 2; i < n; i++){\n    if (n % i ===\
    \ 0) return false;\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  for(i=2; i<n; i++){\n    if(n%i==0){\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmps1wh1msx.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmps1wh1msx.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n==1){\n        return false;\n    }\n    if (n==2){\n        return\
    \ true;\n    }\n    for (var i=2; i<n; i++){\n        if (n%i==0){\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n <= 1) return false;\n    for (let i = 2; i < n; i++){\n        if (n\
    \ % i == 0) return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) {\n      return false;\n  }\n  for (var i = 2; i <= Math.sqrt(n);\
    \ i++) {\n      if (n % i == 0) {\n          return false;\n      }\n  }\n  return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(let i = 2; i < n; i++){\n        if(n % i === 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmi49jwfp.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpmi49jwfp.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n === 1){\n\t\treturn false;\n\t}\n\n\tfor (i = 2; i < n; i++){\n\t\tif\
    \ (n % i === 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(let i = 2; i <= Math.sqrt(n); i++){\n        if(n % i == 0){\n      \
    \      return false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpblwn5ifv.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpblwn5ifv.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n < 2) {\n\t\treturn false;\n\t} else if (n == 2) {\n\t\treturn true;\n\t\
    } else {\n\t\tfor (var i = 2; i < n; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\t\
    return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n == 1) {\n\t\treturn false;\n\t}\n\tfor (var i = 2; i < n; i++) {\n\t\t\
    if (n % i == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n <= 1) return false;\n    for (var i = 2; i < n; i++) {\n        if\
    \ (n % i == 0) return false;\n    }\n    return true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tvar is_prime = true;\n\tfor (var i = 2; i <= Math.sqrt(n); i++) {\n\t\tif (n\
    \ % i == 0) {\n\t\t\tis_prime = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn is_prime\
    \ && n != 1;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    for(var i = 2; i < n; i++){\n        if(n % i === 0){\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_jh4c3d5.js:35:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp_jh4c3d5.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n <= 1) {return false;}\n  if (n <= 3) {return true;}\n  if (n % 2 == 0\
    \ || n % 3 == 0) {return false;}\n  var i = 5;\n  while (i * i <= n) {\n    if\
    \ (n % i == 0 || n % (i + 2) == 0) {return false;}\n    i = i + 6;\n  }\n  return\
    \ true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n == 1) {\n        return false;\n    }\n    else if (n == 2) {\n   \
    \     return true;\n    }\n    else {\n        for (var i = 2; i < n; i++) {\n\
    \            if (n % i == 0) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n === 2){\n\t\treturn true;\n\t} else if (n < 2 || n % 2 === 0){\n\t\treturn\
    \ false;\n\t}\n\n\tif (n % 3 === 0){\n\t\treturn false;\n\t}\n\n\tlet curr_divisor\
    \ = 5;\n\tlet max_divisor = Math.floor(Math.sqrt(n));\n\n\twhile (curr_divisor\
    \ <= max_divisor){\n\t\tif (n % curr_divisor === 0){\n\t\t\treturn false;\n\t\t\
    }\n\n\t\tcurr_divisor += 2;\n\n\t\tif (n % curr_divisor === 0){\n\t\t\treturn\
    \ false;\n\t\t}\n\n\t\tcurr_divisor += 4;\n\t}\n\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    //Insert your code here\n    var prime = false;\n    var num = 2;\n    while\
    \ (num < n) {\n        if (n % num == 0) {\n            prime = false;\n     \
    \       break;\n        }\n        else {\n            prime = true;\n       \
    \ }\n        num++;\n    }\n    return prime;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tfor(var i = 2; i <= Math.sqrt(n); i++) {\n\t\tif(n % i == 0) {\n\t\t\treturn\
    \ false;\n\t\t}\n\t}\n\treturn true;\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp14_vdany.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp14_vdany.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tvar divisor = n - 1;\n\twhile (divisor > 1){\n\t\tif (n % divisor === 0){\n\t\
    \t\treturn false;\n\t\t}\n\t\tdivisor -= 1;\n\t}\n\treturn true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpih8xa8wb.js:37:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpih8xa8wb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) return false;\n  if (n === 2) return true;\n  if (n % 2 === 0) return\
    \ false;\n  for (var i = 3; i <= Math.sqrt(n); i+=2) {\n    if (n % i === 0) return\
    \ false;\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n <= 1){\n\t\treturn false;\n\t}\n\tfor (var i = 2; i < n; i++){\n\t\tif\
    \ (n % i == 0){\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n === 1) {\n\t\treturn false;\n\t}\n\tif (n === 2 || n === 3 || n === 5\
    \ || n === 7) {\n\t\treturn true;\n\t}\n\tif (n % 2 === 0 || n % 3 === 0 || n\
    \ % 5 === 0 || n % 7 === 0) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp05io2ex1.js:46:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp05io2ex1.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n<=1){\n        return false;\n    }\n    else{\n        for (var i=2;\
    \ i<=Math.sqrt(n); i++){\n            if (n%i==0){\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    var result = true;\n    if (n > 1){\n        for (var i = 2; i < n; i++){\n\
    \            if (n % i == 0){\n                result = false;\n            }\n\
    \        }\n    } else {\n        result = false;\n    }\n    return result;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) {\n    return false;\n  }\n  for (var i = 2; i < n; i++) {\n   \
    \ if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) {\n    return false;\n  }\n  var prime = true;\n  for (var i = 2;\
    \ i < n; i++) {\n    if (n % i === 0) {\n      prime = false;\n    }\n  }\n  return\
    \ prime;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  for(var i = 2; i < n; i++){\n    if(n % i === 0){\n      return false;\n  \
    \  }\n  }\n  return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp956dqji0.js:36:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp956dqji0.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821256
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n <= 1){\n\t\treturn false;\n\t}\n\telse if (n <= 3){\n\t\treturn true;\n\
    \t}\n\telse if (n % 2 == 0 || n % 3 == 0){\n\t\treturn false;\n\t}\n\tvar i =\
    \ 5;\n\twhile (i * i <= n){\n\t\tif (n % i == 0 || n % (i + 2) == 0){\n\t\t\t\
    return false;\n\t\t}\n\t\ti = i + 6;\n\t}\n\treturn true;\n}\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n < 2) {\n\t\treturn false;\n\t}\n\tvar m = n;\n\twhile (m > 0) {\n\t\t\
    if (m === n){\n\t\t\tm -= 1;\n\t\t\tcontinue;\n\t\t}\n\t\tif (n % m === 0) {\n\
    \t\t\treturn false;\n\t\t}\n\t\tm -= 1;\n\t}\n\treturn true;\n}\n\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgewbiubv.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmpgewbiubv.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) {\n    return false;\n  }\n  var i = 2;\n  while (i * i <= n) {\n\
    \    if (n % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n\
    }\n\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n < 2) return false;\n  var is_prime = true;\n  for (var i = 2; i <= Math.sqrt(n);\
    \ i++){\n    if (n % i == 0){\n      is_prime = false;\n      break;\n    }\n\
    \  }\n  return is_prime;\n}\n\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \  if (n == 1) {\n    return false;\n  }\n  for (var i = 2; i < n; i++) {\n  \
    \  if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\n\
    \nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \tif (n === 2){\n\t\treturn true;\n\t}\n\telse if (n === 1){\n\t\treturn false;\n\
    \t}\n\telse{\n\t\tfor (var x = 2; x < n; x++){\n\t\t\tif (n % x === 0){\n\t\t\t\
    \treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821257
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n){\n\
    \    if (n == 2 || n == 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return\
    \ false;\n    let i = 5;\n    let w = 2;\n    while (i * i <= n){\n        if\
    \ (n % i == 0) return false;\n        i += w;\n        w = 6 - w;\n    }\n   \
    \ return true;\n}\n\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6hlmizz2.js:40:10)\n    at\
    \ Object.<anonymous> (/tmp/tmp6hlmizz2.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821257
