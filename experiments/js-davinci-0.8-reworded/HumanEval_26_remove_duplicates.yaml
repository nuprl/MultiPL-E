name: HumanEval_26_remove_duplicates
language: js
prompt: "//From an array of integers, remove all elements that occur more than once.\n\
  // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1,\
  \ 4, 5]);\n}\n\ntest();"
completions: ["    var unique = numbers.filter(function(elem, index, self) {\n   \
    \     return index == self.indexOf(elem);\n    });\n    return unique;\n}\n",
  "    // let result = [];\n    // for(let i = 0; i < numbers.length; i++){\n    //\
    \     let j = i + 1;\n    //     if(numbers[i] != numbers[j]){\n    //       \
    \  result.push(numbers[i]);\n    //     }\n    // }\n    // return result;\n \
    \   let result = numbers.filter(function(num, i){\n        return numbers.indexOf(num)\
    \ == i;\n    });\n    return result;\n}\nlet integers = [1, 2, 3, 2, 4];", "\t\
    var temp = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(temp.indexOf(numbers[i])\
    \ == -1){\n\t\t\ttemp.push(numbers[i]);\n\t\t}\n\t}\n\treturn temp;\n}", "  return\
    \ numbers.filter((number,index) => numbers.indexOf(number) === index);\n}\n",
  "    var uniqueNumbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     if(uniqueNumbers.indexOf(numbers[i]) == -1){\n            uniqueNumbers.push(numbers[i]);\n\
    \        }\n    }\n    return uniqueNumbers;\n}\n", "    // const arr = new Set(numbers);\n\
    \    // return Array.from(arr);\n    return numbers.filter((v, i) => numbers.indexOf(v)\
    \ === i);\n}\n", "    let result = [];\n    numbers.forEach(function(value){\n\
    \        if(numbers.indexOf(value) === numbers.lastIndexOf(value)){\n        \
    \    result.push(value);\n        }\n    });\n    return result;\n}\n", "    let\
    \ unique_numbers = []\n    let unique_copy = []\n    for (i=0; i<numbers.length;\
    \ i++){\n        if (unique_numbers.includes(numbers[i])){\n            unique_copy.push(numbers[i])\n\
    \        } else {\n            unique_numbers.push(numbers[i])\n        }\n  \
    \  }\n    for (j=0; j<unique_copy.length; j++){\n        unique_numbers.splice(unique_numbers.indexOf(unique_copy[j]),\
    \ 1)\n    }\n    return unique_numbers\n}", "  var unique_numbers = [];\n  var\
    \ number_count = {};\n  var i = 0;\n  var number;\n  while (i < numbers.length){\n\
    \    number = numbers[i];\n    if (!number_count[number]){\n      number_count[number]\
    \ = 0;\n    }\n    number_count[number]++;\n    if (number_count[number] === 1){\n\
    \      unique_numbers.push(number);\n    }\n    i++;\n  }\n  return unique_numbers;\n\
    }", "    var res = [];\n    for(var i = 0; i < numbers.length; i++){\n       \
    \ var current = numbers[i];\n        if(res.indexOf(current) === -1){\n      \
    \      res.push(current);\n        }\n    }\n    return res;\n}", "    return\
    \ numbers.filter((number, index) => numbers.indexOf(number) === index);\n}", " \
    \   const numSet = new Set(numbers);\n    return Array.from(numSet);\n}", "  \
    \  let uniqueArray = [];\n    numbers.forEach(number => {\n        if(!uniqueArray.includes(number)){\n\
    \            uniqueArray.push(number);\n        }\n    });\n    return uniqueArray;\n\
    }", "    return numbers.filter((num, i) => numbers.indexOf(num) === i);\n}", " \
    \   numbers = numbers.reverse();\n    var result = [];\n    while(numbers.length\
    \ > 0){\n        var n = numbers.pop();\n        var count = 0;\n        for(var\
    \ i=0; i<numbers.length; i++){\n            if(numbers[i] == n){\n           \
    \     count ++;\n            }\n        }\n        if(count == 0){\n         \
    \   result.push(n);\n        }\n    }\n    return result;\n}\n", "  let new_arr\
    \ = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(new_arr.indexOf(numbers[i])\
    \ === -1){\n      new_arr.push(numbers[i]);\n    }\n  }\n  return new_arr;\n}\n",
  "    var unique_numbers = [];\n    var is_unique = true;\n    var index;\n    var\
    \ j = 0;\n    // console.log(numbers.length);\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        // console.log(\"i: \" + i);\n        index = unique_numbers.indexOf(numbers[i]);\n\
    \        // console.log(\"index: \" + index);\n        if(index == -1){\n    \
    \        // console.log(\"index is -1\");\n            for(j = i + 1; j < numbers.length;\
    \ j++){\n                // console.log(\"j: \" + j);\n                if(numbers[i]\
    \ == numbers[j]){\n                    // console.log(\"i and j matched\");\n\
    \                    is_unique = false;\n                    break;\n        \
    \        }\n            }\n            if(is_unique){\n                // console.log(\"\
    i is unique\");\n                unique_numbers.push(numbers[i]);\n          \
    \  }\n            is_unique = true;\n        }\n    }\n    return unique_numbers;\n\
    }\n", "  //your code here\n}\n", "    return numbers.filter((x, y) => numbers.indexOf(x)\
    \ === y);\n}\n", "    let unique_numbers = [];\n    let number_set = new Set();\n\
    \    for (let i = 0; i < numbers.length; i++){\n        if (number_set.has(numbers[i])){\n\
    \            continue;\n        } else {\n            number_set.add(numbers[i]);\n\
    \            unique_numbers.push(numbers[i]);\n        }\n    }\n    return unique_numbers;\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
