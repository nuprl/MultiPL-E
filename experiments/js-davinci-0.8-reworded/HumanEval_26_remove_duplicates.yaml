name: HumanEval_26_remove_duplicates
language: js
prompt: "//From an array of integers, remove all elements that occur more than once.\n\
  // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1, 2, 3, 2, 4, 3, 5]),[1,\
  \ 4, 5]);\n}\n\ntest();"
completions: ["    var unique = numbers.filter(function(elem, index, self) {\n   \
    \     return index == self.indexOf(elem);\n    });\n    return unique;\n}\n",
  "    // let result = [];\n    // for(let i = 0; i < numbers.length; i++){\n    //\
    \     let j = i + 1;\n    //     if(numbers[i] != numbers[j]){\n    //       \
    \  result.push(numbers[i]);\n    //     }\n    // }\n    // return result;\n \
    \   let result = numbers.filter(function(num, i){\n        return numbers.indexOf(num)\
    \ == i;\n    });\n    return result;\n}\nlet integers = [1, 2, 3, 2, 4];", "\t\
    var temp = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(temp.indexOf(numbers[i])\
    \ == -1){\n\t\t\ttemp.push(numbers[i]);\n\t\t}\n\t}\n\treturn temp;\n}", "  return\
    \ numbers.filter((number,index) => numbers.indexOf(number) === index);\n}\n",
  "    var uniqueNumbers = [];\n    for(var i = 0; i < numbers.length; i++){\n   \
    \     if(uniqueNumbers.indexOf(numbers[i]) == -1){\n            uniqueNumbers.push(numbers[i]);\n\
    \        }\n    }\n    return uniqueNumbers;\n}\n", "    // const arr = new Set(numbers);\n\
    \    // return Array.from(arr);\n    return numbers.filter((v, i) => numbers.indexOf(v)\
    \ === i);\n}\n", "    let result = [];\n    numbers.forEach(function(value){\n\
    \        if(numbers.indexOf(value) === numbers.lastIndexOf(value)){\n        \
    \    result.push(value);\n        }\n    });\n    return result;\n}\n", "    let\
    \ unique_numbers = []\n    let unique_copy = []\n    for (i=0; i<numbers.length;\
    \ i++){\n        if (unique_numbers.includes(numbers[i])){\n            unique_copy.push(numbers[i])\n\
    \        } else {\n            unique_numbers.push(numbers[i])\n        }\n  \
    \  }\n    for (j=0; j<unique_copy.length; j++){\n        unique_numbers.splice(unique_numbers.indexOf(unique_copy[j]),\
    \ 1)\n    }\n    return unique_numbers\n}", "  var unique_numbers = [];\n  var\
    \ number_count = {};\n  var i = 0;\n  var number;\n  while (i < numbers.length){\n\
    \    number = numbers[i];\n    if (!number_count[number]){\n      number_count[number]\
    \ = 0;\n    }\n    number_count[number]++;\n    if (number_count[number] === 1){\n\
    \      unique_numbers.push(number);\n    }\n    i++;\n  }\n  return unique_numbers;\n\
    }", "    var res = [];\n    for(var i = 0; i < numbers.length; i++){\n       \
    \ var current = numbers[i];\n        if(res.indexOf(current) === -1){\n      \
    \      res.push(current);\n        }\n    }\n    return res;\n}", "    return\
    \ numbers.filter((number, index) => numbers.indexOf(number) === index);\n}", " \
    \   const numSet = new Set(numbers);\n    return Array.from(numSet);\n}", "  \
    \  let uniqueArray = [];\n    numbers.forEach(number => {\n        if(!uniqueArray.includes(number)){\n\
    \            uniqueArray.push(number);\n        }\n    });\n    return uniqueArray;\n\
    }", "    return numbers.filter((num, i) => numbers.indexOf(num) === i);\n}", " \
    \   numbers = numbers.reverse();\n    var result = [];\n    while(numbers.length\
    \ > 0){\n        var n = numbers.pop();\n        var count = 0;\n        for(var\
    \ i=0; i<numbers.length; i++){\n            if(numbers[i] == n){\n           \
    \     count ++;\n            }\n        }\n        if(count == 0){\n         \
    \   result.push(n);\n        }\n    }\n    return result;\n}\n", "  let new_arr\
    \ = [];\n  for(let i = 0; i < numbers.length; i++){\n    if(new_arr.indexOf(numbers[i])\
    \ === -1){\n      new_arr.push(numbers[i]);\n    }\n  }\n  return new_arr;\n}\n",
  "    var unique_numbers = [];\n    var is_unique = true;\n    var index;\n    var\
    \ j = 0;\n    // console.log(numbers.length);\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        // console.log(\"i: \" + i);\n        index = unique_numbers.indexOf(numbers[i]);\n\
    \        // console.log(\"index: \" + index);\n        if(index == -1){\n    \
    \        // console.log(\"index is -1\");\n            for(j = i + 1; j < numbers.length;\
    \ j++){\n                // console.log(\"j: \" + j);\n                if(numbers[i]\
    \ == numbers[j]){\n                    // console.log(\"i and j matched\");\n\
    \                    is_unique = false;\n                    break;\n        \
    \        }\n            }\n            if(is_unique){\n                // console.log(\"\
    i is unique\");\n                unique_numbers.push(numbers[i]);\n          \
    \  }\n            is_unique = true;\n        }\n    }\n    return unique_numbers;\n\
    }\n", "  //your code here\n}\n", "    return numbers.filter((x, y) => numbers.indexOf(x)\
    \ === y);\n}\n", "    let unique_numbers = [];\n    let number_set = new Set();\n\
    \    for (let i = 0; i < numbers.length; i++){\n        if (number_set.has(numbers[i])){\n\
    \            continue;\n        } else {\n            number_set.add(numbers[i]);\n\
    \            unique_numbers.push(numbers[i]);\n        }\n    }\n    return unique_numbers;\n\
    }", "    let numbersSet = new Set(numbers);\n    return Array.from(numbersSet);\n\
    }", "  var counts = {};\n  numbers.forEach(function(x) { counts[x] = (counts[x]\
    \ || 0)+1; });\n  return numbers.filter(function(x) { return counts[x] == 1; });\n\
    }\n\n", "    let unique = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if(unique.indexOf(numbers[i]) === -1){\n            unique.push(numbers[i]);\n\
    \        }\n    }\n    return unique;\n}\n", "\tvar temp = [];\n\t//sort the array\
    \ in ascending order\n\tnumbers.sort(function(a, b){return a-b});\n\t//push the\
    \ first number into the temp array\n\ttemp.push(numbers[0]);\n\t//iterate through\
    \ the rest of the numbers\n\tfor(var i = 1; i < numbers.length; i++){\n\t\t//if\
    \ the current number does not equal the previous number\n\t\tif(numbers[i] !=\
    \ numbers[i-1]){\n\t\t\t//push the current number into the temp array\n\t\t\t\
    temp.push(numbers[i]);\n\t\t}\n\t}\n\t//return the temp array\n\treturn temp;\n\
    }\n", "    //create an empty array\n    var unique = [];\n    //loop through the\
    \ array of numbers\n    for(var i = 0; i < numbers.length; i++){\n        //if\
    \ the numbers do not appear in the empty array, push\n        if(unique.indexOf(numbers[i])\
    \ === -1){\n            unique.push(numbers[i]);\n        }\n    }\n    return\
    \ unique;\n}", "    let noDuplicates = numbers.filter(function(item, index){\n\
    \        return numbers.indexOf(item) === index;\n    });\n    return noDuplicates;\n\
    }\n", "    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n\
    \        if (result.indexOf(numbers[i]) == -1)\n            result.push(numbers[i]);\n\
    \    }\n    return result;\n}", "    var unique = [];\n    for(var i = 0; i <\
    \ numbers.length; i++){\n        if(unique.indexOf(numbers[i]) === -1){\n    \
    \        unique.push(numbers[i]);\n        }\n    }\n    return unique;\n}", " \
    \   for(let i = 0; i < numbers.length; i++){\n        let element = numbers[i];\n\
    \        let times = 0;\n        for(let j = 0; j < numbers.length; j++){\n  \
    \          if(element === numbers[j]){\n                times++;\n           \
    \ }\n        }\n        if(times > 1){\n            let index = numbers.indexOf(element);\n\
    \            numbers.splice(index, 1);\n            i--;\n        }\n    }\n \
    \   return numbers;\n}\n", "    let counted = [];\n    for (let i = 0; i < numbers.length;\
    \ i++){\n        if (counted.includes(numbers[i])){\n            numbers.splice(i,\
    \ 1);\n            i--;\n        } else {\n            counted.push(numbers[i]);\n\
    \        }\n    }\n    return numbers;\n}", "    // remove duplicates \n    let\
    \ result = numbers.filter((number, i) => {\n        return numbers.indexOf(number)\
    \ == i;\n    });\n    return result;\n}", "    var result = [];\n    var tmp =\
    \ [];\n    for(var i = 0; i < numbers.length; i++){\n        var num = numbers[i];\n\
    \        if(tmp.indexOf(num) == -1){\n            tmp.push(num);\n           \
    \ result.push(num);\n        }\n    }\n    return result;\n}\n", "  let result\
    \ = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (result.indexOf(numbers[i])\
    \ === -1) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n}\n",
  "    let i = 0;\n    let nums = [];\n    for(let j = 0; j < numbers.length; j++){\n\
    \        if(numbers[i] != numbers[j]){\n            nums.push(numbers[i]);\n \
    \           i = j;\n        }\n    }\n    return nums;\n}", "    let non_duplicates\
    \ = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers.indexOf(numbers[i])\
    \ === i){\n            non_duplicates.push(numbers[i]);\n        }\n    }\n  \
    \  return non_duplicates;\n}\n", "  //Your code here\n  return numbers.filter((number,\
    \ index) => (index === numbers.indexOf(number)));\n}", "    return numbers.filter((element,\
    \ index) => numbers.indexOf(element) == index);\n}", "    var newArray = [];\n\
    \    for(var i = 0; i < numbers.length; i++){\n        var el = numbers[i];\n\
    \        if(newArray.indexOf(el) === -1){\n            newArray.push(el);\n  \
    \      }\n    }\n    return newArray;\n}\n", "    let set = new Set();\n    let\
    \ result = [];\n    for(let item of numbers){\n        if(!set.has(item)){\n \
    \           set.add(item);\n            result.push(item);\n        }\n    }\n\
    \    return result;\n}", "   var array_dic = {}\n   var non_duplicate_array =\
    \ []\n   for(var i = 0; i < numbers.length; i++){\n      if(array_dic[numbers[i]]){\n\
    \         array_dic[numbers[i]] += 1\n      }\n      else{\n         array_dic[numbers[i]]\
    \ = 1\n      }\n   }\n   for(var num in array_dic){\n      if(array_dic[num] ==\
    \ 1){\n         non_duplicate_array.push(num)\n      }\n   }\n   return non_duplicate_array\n\
    }", "  let dict = {};\n  let result = [];\n  for (let i = 0; i < numbers.length;\
    \ i++){\n    if (dict[numbers[i]] === undefined){\n      dict[numbers[i]] = 1;\n\
    \    } else {\n      dict[numbers[i]] += 1;\n    }\n  }\n  for (let number in\
    \ dict){\n    if (dict[number] === 1){\n      result.push(parseInt(number));\n\
    \    }\n  }\n  return result;\n}", "  var n = numbers.length;\n  var temp = [];\n\
    \  var j = 0;\n  for(var i = 0; i < n; i++){\n    if(temp.indexOf(numbers[i])\
    \ == -1){\n      temp[j++] = numbers[i];\n    }\n  }\n  return temp;\n}\n", " \
    \   var unique_numbers = [];\n    for (var i = 0; i < numbers.length; i++){\n\
    \        if (unique_numbers.indexOf(numbers[i]) == -1){\n            unique_numbers.push(numbers[i]);\n\
    \        }\n    }\n    return unique_numbers;\n}\n", "    var unique_numbers =\
    \ [];\n    for (var i = 0; i < numbers.length; i++){\n        if(unique_numbers.indexOf(numbers[i])\
    \ === -1){\n            unique_numbers.push(numbers[i]);\n        }\n    }\n \
    \   return unique_numbers;\n}\n", "  var uniqueNumbers = []\n  for (var i = 0;\
    \ i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === i){\n  \
    \    uniqueNumbers.push(numbers[i])\n    }\n  }\n  return uniqueNumbers\n}\n",
  "  // To determine whether a number has already occurred in the array,\n  // keep\
    \ track of the numbers as keys in a new object.\n  var unique_numbers = {};\n\
    \  var result = [];\n  for (var i = 0; i < numbers.length; i++) {\n    if (unique_numbers[numbers[i]])\
    \ {\n      // The number has already occurred in the array.\n      continue;\n\
    \    }\n    // The number has not already occurred in the array.\n    // Mark\
    \ that we've seen it in the object.\n    unique_numbers[numbers[i]] = true;\n\
    \    // Then push the number onto the result array.\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\n", "    let result = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (result.indexOf(numbers[i]) == -1) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}", "  return [...new Set(numbers)];\n\
    }\n", "    let unique_numbers = [];\n    for (let i = 0; i < numbers.length; i++){\n\
    \        if (unique_numbers.indexOf(numbers[i]) === -1){\n            unique_numbers.push(numbers[i]);\n\
    \        }\n    }\n    return unique_numbers;\n}", "  var unique = numbers.filter(function(num,\
    \ index, array){\n    return array.indexOf(num) === index;\n  });\n  return unique;\n\
    }", "    const unique_numbers = numbers.filter((number,index) => numbers.indexOf(number)\
    \ === index)\n    return unique_numbers\n}", "    return new Set(numbers);\n}\n\
    remove_duplicates([1, 2, 3, 2, 4]);\n", "    let results = [];\n    let only_once\
    \ = [];\n    let many_times = [];\n    numbers.forEach(function(num){\n      \
    \  if (only_once.includes(num)){\n            many_times.push(num);\n        }\n\
    \        else{\n            only_once.push(num);\n        }\n    });\n    results\
    \ = only_once.filter(num => !many_times.includes(num));\n    return results;\n\
    }", "    var uniques = [];\n    for (var i = 0; i < numbers.length; i++){\n  \
    \      var value = numbers[i];\n        if (uniques.indexOf(value) === -1){\n\
    \            uniques.push(value);\n        }\n    }\n    return uniques;\n}\n",
  "    var newArr = [];\n    for(i=0; i<numbers.length; i++){\n        // if(newArr.indexOf(numbers[i])\
    \ === -1){\n        //     newArr.push(numbers[i]);\n        // }\n        if(newArr.includes(numbers[i])\
    \ === false){\n            newArr.push(numbers[i]);\n        }\n    }\n    return\
    \ newArr;\n}\n", "  return [... new Set(numbers)];\n}", "    //init array without\
    \ duplicates\n    let result = [];\n    //iterate over array of integers\n   \
    \ for(let i = 0; i < numbers.length; i++){\n        //find duplicates inside our\
    \ array of integers\n        //if duplicates are not found, push it to our array\
    \ without duplicates\n        if(result.indexOf(numbers[i]) === -1){\n       \
    \     result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n", " \
    \ var hash = {};\n  var unique = [];\n  for(var i = 0; i < numbers.length; i++){\n\
    \    if(!hash[numbers[i]]){\n      hash[numbers[i]] = 1;\n      unique.push(numbers[i]);\n\
    \    }\n  }\n  return unique;\n}", "    let unique_array = [];\n    let map =\
    \ new Map();\n    for(let i = 0; i < numbers.length; i++){\n        map.set(numbers[i],\
    \ i);\n    }\n    for(let [key, value] of map){\n        unique_array.push(key);\n\
    \    }\n    return unique_array;\n}\n", "    var dups = []\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        var num = numbers[i]\n        for(var j =\
    \ 0; j < numbers.length; j++){\n            if(num == numbers[j] && i != j){\n\
    \                dups.push(num)\n            }\n        }\n    }\n    for(var\
    \ i = 0; i < dups.length; i++){\n        for(var j = 0; j < numbers.length; j++){\n\
    \            if(dups[i] == numbers[j]){\n                numbers.splice(j, 1)\n\
    \            }\n        }\n    }\n    return numbers\n}", "  \n  var newarr =\
    \ [];\n  for(var i = 0; i < numbers.length; i++){\n    if(i !== numbers.indexOf(numbers[i])){\n\
    \      newarr.push(numbers[i]);\n    }\n  }\n  return newarr;\n}\n", "    var\
    \ unique = new Set(numbers);\n    return Array.from(unique);\n}", "    let unique\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (unique.indexOf(numbers[i])\
    \ == -1) {\n            unique.push(numbers[i]);\n        }\n    }\n    return\
    \ unique;\n}\n\nlet result = remove_duplicates([1, 2, 3, 2, 4]);", "  var temp_array\
    \ = [];\n  var count = 0;\n  for(var i = 0; i < numbers.length; i++){\n    for(var\
    \ x = 0; x < numbers.length; x++){\n      if(numbers[i] == numbers[x]){\n    \
    \    count += 1;\n      }\n    }\n    if(count == 1){\n      temp_array.push(numbers[i]);\n\
    \    }\n    count = 0;\n  }\n  return temp_array;\n}", "    for(var i = 0; i <\
    \ numbers.length; i++){\n        for(var j = i + 1; j < numbers.length; j++){\n\
    \            if(numbers[i] == numbers[j]){\n                numbers.splice(j,\
    \ 1);\n                i--;\n            }\n        }\n    }\n    return numbers;\n\
    }\n", "    var result = [];\n    var checkExist = (element) => element == numbers[0];\n\
    \    var arr = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(result.every(checkExist)\
    \ == false){\n            result.push(numbers[i]);\n        }\n    }\n    return\
    \ result;\n}", "    let result = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (numbers.indexOf(numbers[i]) === numbers.lastIndexOf(numbers[i]))\
    \ {\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n\
    }\nremove_duplicates([1, 2, 3, 2, 4]);\n\n", "    let output = [];\n    for(let\
    \ i = 0; i < numbers.length; i++){\n        if(!output.includes(numbers[i])){\n\
    \            output.push(numbers[i]);\n        }\n    }\n    return output;\n\
    }\n", "\tvar newArray = [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\t\
    if(newArray.indexOf(numbers[i]) === -1){\n\t\t\tnewArray.push(numbers[i]);\n\t\
    \t}\n\t}\n\treturn newArray;\n}\n", "    var array = [];\n    numbers.forEach(function(item){\n\
    \        if(array.indexOf(item) < 0){\n            array.push(item);\n       \
    \ }\n    });\n    return array;\n}\n\nvar numbers = [1, 2, 3, 2, 4];\n", "   \
    \ let no_dupes = []\n    let added = false\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        for(let n = 0; n < no_dupes.length; n++){\n            if(numbers[i]\
    \ == no_dupes[n]){\n                added = true\n            }\n        }\n \
    \       if(added == false){\n            no_dupes.push(numbers[i])\n        }\n\
    \        added = false\n    }\n    return no_dupes\n}\n", "    return numbers.filter((item,\
    \ pos) => {\n        return numbers.indexOf(item) == pos;\n    });\n}\n", "  \
    \  var newArray = [...new Set(numbers)];\n    return newArray;\n}\n", "    var\
    \ cleanArray = numbers.filter(function(elem, index, self) {\n        return index\
    \ == self.indexOf(elem);\n    });\n    return cleanArray;\n}\n", "    return Array.from(new\
    \ Set(numbers));\n}\n", "    let uniques = []\n    for(let number of numbers){\n\
    \        if(!uniques.includes(number)){\n            uniques.push(number)\n  \
    \      }\n    }\n    return uniques\n}", "    var count = {};\n    var result\
    \ = [];\n    for (var i = 0; i < numbers.length; i++) {\n        if (count[numbers[i]])\
    \ {\n            count[numbers[i]]++;\n        } else {\n            count[numbers[i]]\
    \ = 1;\n        }\n    }\n    for (var key in count) {\n        if (count[key]\
    \ === 1) {\n            result.push(key);\n        }\n    }\n    return result;\n\
    }\n", "    return [...new Set(numbers)];\n}\n", "\treturn numbers.filter(function(value,\
    \ index, self){\n\t\treturn self.indexOf(value) == index;\n\t});\n}\n", "    let\
    \ unique = [];\n    for (let i = 0; i < numbers.length; i++) {\n        let number\
    \ = numbers[i];\n        if (unique.indexOf(number) === -1) {\n            unique.push(number);\n\
    \        }\n    }\n    return unique;\n}\n", "    // var num = [1, 2, 3, 2, 4];\n\
    \    // var uniqueNums = [];\n    // num.forEach(function(item){\n    //     if(uniqueNums.indexOf(item)\
    \ === -1){\n    //         uniqueNums.push(item);\n    //     }\n    // });\n\
    \    // return uniqueNums;\n    var unique = {};\n    var distinct = [];\n   \
    \ for( var i in numbers ){\n        if( typeof(unique[numbers[i]]) == \"undefined\"\
    ){\n            distinct.push(numbers[i]);\n        }\n        unique[numbers[i]]\
    \ = 0;\n    }\n    return distinct;\n}\n", "    let result = [];\n    numbers.forEach(function(item,\
    \ index, array){\n        if(array.indexOf(item) === index){\n            result.push(item);\n\
    \        }\n    });\n    return result;\n}", "    //\n    // YOUR CODE HERE\n\
    \    //\n}\n\nassert.deepEqual(remove_duplicates([1, 2, 3, 2, 4]), [1, 3, 4]);\n",
  "  var numbers = [1, 2, 3, 2, 4];\n  return numbers.filter(function(x, i, a) {\n\
    \    return a.indexOf(x) == i;\n  });\n}\n", "  var orig = numbers.slice();\n\
    \  var deduped = [];\n  for (var i = 0; i < orig.length; i++){\n    if (deduped.indexOf(orig[i])\
    \ === -1){\n      deduped.push(orig[i]);\n    }\n  }\n  return deduped;\n}\n",
  "    let arr = [];\n    for(let i=0; i<numbers.length; i++){\n        let flag =\
    \ false;\n        for(let j=0; j<arr.length; j++){\n            if(numbers[i]\
    \ === arr[j]){\n                flag = true;\n            }\n        }\n     \
    \   if(!flag){\n            arr.push(numbers[i]);\n        }\n    }\n    return\
    \ arr;\n}", "  if(numbers.length == 0){\n    return \"Array cannot be empty\"\n\
    \  }\n  var newArr = [];\n  for(var i = 0; i < numbers.length; i++){\n    var\
    \ newArrLength = newArr.length;\n    if(newArr.indexOf(numbers[i]) < 0){\n   \
    \   newArr.push(numbers[i]);\n    }\n  }\n  return newArr;\n}\nremove_duplicates([1,\
    \ 2, 3, 2, 4]);\n\n\n", "\tvar new_array = [];\n\tvar count = 0;\n\tfor(var i\
    \ = 0; i < numbers.length; i++){\n\t\tfor(var j = 0; j < numbers.length; j++){\n\
    \t\t\tif(numbers[i] === numbers[j]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count\
    \ === 1){\n\t\t\tnew_array.push(numbers[i]);\n\t\t}\n\t\tcount = 0;\n\t}\n\treturn\
    \ new_array;\n}\n", "    var sorted_numbers = numbers.sort();\n    for (var i\
    \ = 0; i < sorted_numbers.length - 1; i++) {\n        if (sorted_numbers[i] ==\
    \ sorted_numbers[i + 1]) {\n            sorted_numbers.splice(i, 1);\n       \
    \     i--;\n        }\n    }\n    return sorted_numbers;\n}", "\tif(!Array.isArray(numbers)){\n\
    \t\treturn numbers\n\t}\n\treturn numbers.filter((number, index) => {\n\t\treturn\
    \ numbers.indexOf(number) === index\n\t})\n}\n", "  var clean_array = [];\n  //\
    \ numbers.forEach(element => {\n  //   if(clean_array.indexOf(element) < 0){\n\
    \  //     clean_array.push(element);\n  //   }\n  // });\n  var non_duplicates\
    \ = [...new Set(numbers)];\n  return non_duplicates;\n}", "    var unique = numbers.filter(function(elem,\
    \ index, self) {\n    return index == self.indexOf(elem);\n    })\n    return\
    \ unique;\n}", "    let no_duplicates = new Set(numbers);\n    return Array.from(no_duplicates);\n\
    }\n", "    let numbersSet = new Set(numbers);\n    let uniqueArray = [];\n   \
    \ for (const item of numbersSet){\n        uniqueArray.push(item);\n    }\n  \
    \  return uniqueArray;\n}\n", "    var unique = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        if(unique.indexOf(numbers[i]) == -1){\n            unique.push(numbers[i]);\n\
    \        }\n    }\n    return unique;\n}\n", "  var result = [];\n  for (var i\
    \ = 0; i < numbers.length; i++) {\n    var count = 0;\n    for (var j = 0; j <\
    \ numbers.length; j++) {\n      if (numbers[i] === numbers[j]) {\n        count++;\n\
    \      }\n    }\n    if (count === 1) {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}\n", "    const deduped = new Set(numbers);\n    const\
    \ dedupedArray = Array.from(deduped);\n    return dedupedArray;\n}\n", "  var\
    \ unique_numbers = [];\n  for (var i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i])\
    \ === i) {\n      unique_numbers.push(numbers[i]);\n    }\n  }\n  return unique_numbers;\n\
    }\n", "  var result = [];\n  for (var i = 0; i < numbers.length; i++) {\n    if\
    \ (result.indexOf(numbers[i]) < 0) {\n      result.push(numbers[i]);\n    }\n\
    \  }\n  return result;\n}", "    let set = new Set();\n    let left = [];\n  \
    \  for(let number of numbers){\n        if(!set.has(number)){\n            set.add(number);\n\
    \            left.push(number);\n        }\n    }\n    return left;\n}\n", " \
    \   let arr = [];\n    for(let i = 0; i < numbers.length; i++){\n        if(!arr.includes(numbers[i])){\n\
    \            arr.push(numbers[i]);\n        }\n    }\n    return arr;\n}", " \
    \   let unique = []\n    for(let i = 0; i < numbers.length; i++){\n        if(unique.indexOf(numbers[i])\
    \ == -1){\n            unique.push(numbers[i])\n        }\n    }\n    return unique\n\
    }\n", "    var res=[];\n    for(var i=0;i<numbers.length;i++){\n        if(res.indexOf(numbers[i])==-1){\n\
    \            res.push(numbers[i]);\n        }\n    }\n    return res;\n}\nremove_duplicates([1,\
    \ 2, 3, 2, 4]);\n", "\tvar dictionary = {};\n\tfor(var i = 0; i < numbers.length;\
    \ i++){\n\t\tif(dictionary[numbers[i]]){\n\t\t\tdictionary[numbers[i]]++;\n\t\t\
    }\n\t\telse{\n\t\t\tdictionary[numbers[i]] = 1;\n\t\t}\n\t}\n\tvar newArray =\
    \ [];\n\tfor(var i = 0; i < numbers.length; i++){\n\t\tif(dictionary[numbers[i]]\
    \ == 1){\n\t\t\tnewArray.push(numbers[i]);\n\t\t}\n\t}\n\treturn newArray;\n}\n",
  "    let unique_numbers = [];\n    for (let i = 0; i < numbers.length; i++){\n \
    \       let is_unique = true;\n        for (let j = 0; j < unique_numbers.length;\
    \ j++){\n            if (numbers[i] === unique_numbers[j]){\n                is_unique\
    \ = false;\n            }\n        }\n        if (is_unique){\n            unique_numbers.push(numbers[i]);\n\
    \        }\n    }\n    return unique_numbers;\n}\n", "    var result = [];\n \
    \   for (var i = 0; i < numbers.length; i++){\n        if (numbers.indexOf(numbers[i])\
    \ == i){\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n\
    }\n", "    return numbers.filter((v, i) => numbers.indexOf(v) === i)\n}\n", " \
    \   // your code here\n    var result = [];\n    var unique = {};\n    var element;\n\
    \    for (var i = 0; i < numbers.length; i++) {\n        element = numbers[i];\n\
    \        if (unique[element] !== true) {\n            result.push(element);\n\
    \            unique[element] = true;\n        }\n    }\n    return result;\n}\n",
  "  let result = [];\n  numbers.forEach(function(n){\n    if(result.indexOf(n) ==\
    \ -1){\n      result.push(n);\n    }\n  });\n  return result;\n}\n", "    const\
    \ unique = [...new Set(numbers)];\n    return unique;\n}\n", "    numbers.sort();\n\
    \    for(var i = 0; i < numbers.length; i++){\n        for(var j = i+1; j < numbers.length;\
    \ j++){\n            if(numbers[i] == numbers[j]){\n                numbers.splice(j,\
    \ 1);\n            }\n        }\n    }\n    return numbers;\n}\n", "    let result\
    \ = [numbers[0]];\n    for (let i = 1; i < numbers.length; i++){\n        if (numbers[i]\
    \ != numbers[i-1]){\n            result.push(numbers[i]);\n        }\n    }\n\
    \    return result;\n}\n", "    let i = 0;\n    let j = 1;\n    let n = numbers.length;\n\
    \    for(i; i < n; i++){\n        for(j; j < n; j++){\n            if(numbers[i]\
    \ === numbers[j]){\n                //remove numbers[j]\n                numbers.splice(j,\
    \ 1);\n                n = numbers.length;\n                j = i;\n         \
    \   }\n        }\n        j = i + 1;\n    }\n    return numbers;\n}\n", "    var\
    \ unique = [];\n    var result = [];\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        if(unique.indexOf(numbers[i]) === -1){\n            unique.push(numbers[i]);\n\
    \            result.push(numbers[i]);\n        }\n    }\n    return result;\n}",
  "    var uniqueArray = [];\n    for(var i = 0; i < numbers.length; i++){\n     \
    \   if(uniqueArray.indexOf(numbers[i]) === -1){\n            uniqueArray.push(numbers[i]);\n\
    \        }\n    }\n    return uniqueArray;\n}\n", "    return numbers.filter((item,\
    \ index) => numbers.indexOf(item) === index);\n}", "  let a = numbers.slice();\n\
    \  for (let i = a.length-1; i >= 0; i--){\n    let temp = a[i];\n    for (let\
    \ j = i-1; j >= 0; j--){\n      if (temp === a[j]){\n        a.splice(i, 1);\n\
    \        break;\n      }\n    }\n  }\n  return a;\n}\n", "   var result =[];\n\
    \   for(var i=0; i<numbers.length; i++){\n       if(!(result.includes(numbers[i]))){\n\
    \           result.push(numbers[i]);\n       }\n   }\n   return result;\n}", " \
    \ return Array.from(new Set(numbers));\n}\n", "  return numbers.filter((number,\
    \ index) => numbers.indexOf(number) === index);\n}\n", "\tvar index = 0;\n\tvar\
    \ usedNumbers = [];\n\twhile(index < numbers.length){\n\t\tif(usedNumbers.indexOf(numbers[index])\
    \ > -1){\n\t\t\tnumbers.splice(index, 1);\n\t\t}\n\t\telse{\n\t\t\tusedNumbers.push(numbers[index]);\n\
    \t\t\tindex++;\n\t\t}\n\t}\n\treturn numbers;\n}\n", "  var unique = [];\n  for\
    \ (var i = 0; i < numbers.length; i++) {\n    if(unique.indexOf(numbers[i]) ==\
    \ -1){\n      unique.push(numbers[i]);\n    }\n  }\n  return unique;\n}", "  \
    \  var unique = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(unique.indexOf(numbers[i])\
    \ === -1){\n            unique.push(numbers[i]);\n        }\n    }\n    return\
    \ unique;\n}\n", "    let tempNumbers = [];\n    for(let i = 0; i < numbers.length;\
    \ i++){\n        if(tempNumbers.indexOf(numbers[i]) === -1){\n            tempNumbers.push(numbers[i]);\n\
    \        }\n    }\n    return tempNumbers;\n}\n", "    let newList = [];\n   \
    \ for(let i = 0; i < numbers.length; i++){\n        if(!newList.includes(numbers[i])){\n\
    \            newList.push(numbers[i]);\n        }\n    }\n    return newList;\n\
    }", "    var res = [];\n    for(var i = 0; i < numbers.length; i++){\n       \
    \ if(i != numbers.indexOf(numbers[i])){\n            continue;\n        }\n  \
    \      res.push(numbers[i]);\n    }\n    return res;\n}", "    let unique = [];\n\
    \    for (i = 0; i < numbers.length; i++){\n        if (unique.indexOf(numbers[i])\
    \ == -1){\n            unique.push(numbers[i]);\n        }\n    }\n    return\
    \ unique;\n}", "  if(numbers === undefined || numbers.length === 0) {\n    return\
    \ [];\n  }\n\n  var unique = [];\n  for(var i = 0; i < numbers.length; i++) {\n\
    \    if(unique.indexOf(numbers[i]) === -1) {\n      unique.push(numbers[i]);\n\
    \    }\n  }\n  return unique;\n}\n\n", "  var array = [];\n  for(var i = 0; i\
    \ < numbers.length; i++){\n    var num = numbers[i];\n    if(numbers.indexOf(num)\
    \ === i){\n      array.push(num);\n    }\n  }\n  return array;\n}", "  var obj\
    \ = {};\n  for(var i = 0; i < numbers.length; i++){\n    obj[numbers[i]] = (obj[numbers[i]]\
    \ || 0) + 1;\n  }\n  var newArr = [];\n  for(var key in obj){\n    if(obj[key]\
    \ === 1){\n      newArr.push(parseInt(key));\n    }\n  }\n  return newArr;\n}\n",
  "    return numbers.filter((value, index, self) => self.indexOf(value) === index);\n\
    }", "    let result = [];\n    for (let i = 0; i < numbers.length; i++) {\n  \
    \      let num = numbers[i];\n        if (result.indexOf(num) == -1) {\n     \
    \       result.push(num);\n        }\n    }\n    return result;\n}\n", "    var\
    \ result = numbers.filter(function(item, pos){\n        return numbers.indexOf(item)\
    \ == pos;\n    });\n    return result;\n}", "    // return numbers.filter((n,\
    \ i) => numbers.indexOf(n) === i);\n    return numbers.filter((n, i) => i ===\
    \ numbers.lastIndexOf(n));\n}", "    let duplicates = [];\n    let unique = [];\n\
    \    for(let i = 0; i < numbers.length; i++){\n        for(let j = 0; j < numbers.length;\
    \ j++){\n            if(numbers[i] === numbers[j] && i !== j){\n             \
    \   duplicates.push(numbers[i]);\n            }\n        }\n    }\n    unique\
    \ = numbers.filter(e => duplicates.indexOf(e) === -1);\n    return unique;\n}",
  "    var unique_numbers = [];\n    var check = false;\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        for(var j = 0; j < unique_numbers.length; j++){\n           \
    \ if(numbers[i] == unique_numbers[j]){\n                check = true;\n      \
    \      }\n        }\n        if(check == false){\n            unique_numbers.push(numbers[i]);\n\
    \        }\n        check = false;\n    }\n    return unique_numbers;\n}", " \
    \   let newArray = []\n    for(let i = 0; i < numbers.length; i++){\n        for(let\
    \ x = 0; x < numbers.length; x++){\n            if(numbers[i] === numbers[x] &&\
    \ i !== x){\n                delete numbers[i]\n            }\n        }\n   \
    \ }\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers[i] !== undefined){\n\
    \            newArray.push(numbers[i])\n        }\n    }\n    return newArray\n\
    }\n", "    // console.log(numbers);\n    var numObj = {};\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        // console.log(numbers[i]);\n        if(!numObj[numbers[i]]){\n\
    \            numObj[numbers[i]] = 1;\n        } else {\n            numObj[numbers[i]]\
    \ += 1;\n        }\n    }\n    // console.log(numObj);\n    var uniques = [];\n\
    \    for(var i = 0; i < numbers.length; i++){\n        if(numObj[numbers[i]] ===\
    \ 1){\n            uniques.push(numbers[i]);\n        }\n    }\n    return uniques;\n\
    }\n", "  var uniqueNumbers = [];\n  numbers.forEach(function(number){\n    if(uniqueNumbers.indexOf(number)\
    \ === -1){\n      uniqueNumbers.push(number);\n    }\n  });\n  return uniqueNumbers;\n\
    }", "  let newArray = [];\n  for (let i = 0; i < numbers.length; i++){\n    if\
    \ (newArray.indexOf(numbers[i]) < 0){\n      newArray.push(numbers[i]);\n    }\n\
    \  }\n  return newArray;\n}", "  let unique = []\n  let unique_number = {}\n \
    \ for(let number of numbers){\n    if(!unique_number[number]){\n      unique_number[number]\
    \ = number\n      unique.push(number)\n    }\n  }\n  return unique\n}", "    return\
    \ numbers.filter((v, i) => numbers.indexOf(v) === i)\n}\n", "    var remove_duplicates\
    \ = []\n    var count = 0\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    var remove = numbers[i]\n        count = 0\n        for(var j = 0; j < numbers.length;\
    \ j++){\n            if(remove === numbers[j]){\n                count++\n   \
    \         }\n        }\n        if(count == 1){\n            remove_duplicates.push(remove)\n\
    \        }\n    }\n    return remove_duplicates\n}", "    let numbers2 = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if(numbers.indexOf(numbers[i])\
    \ == i){\n            numbers2.push(numbers[i]);\n        }\n    }\n    return\
    \ numbers2;\n}\n", "    for(var i = 0; i < numbers.length; i++){\n        for(var\
    \ j = i + 1; j < numbers.length; j++){\n            if(numbers[i] == numbers[j]){\n\
    \                numbers.splice(j, 1);\n                j--;\n            }\n\
    \        }\n    }\n    return numbers;\n}", "  var output = [];\n  for (var i\
    \ = 0; i < numbers.length; i++) {\n    if (output.indexOf(numbers[i]) === -1)\
    \ {\n      output.push(numbers[i]);\n    }\n  }\n  return output;\n}\n", "\tvar\
    \ numbersArray = [];\n\tfor (var i = 0; i < numbers.length; i++) {\n\t\t// console.log(i);\n\
    \t\t// console.log(numbersArray.indexOf(numbers[i]));\n\t\tif (numbersArray.indexOf(numbers[i])\
    \ == -1) {\n\t\t\tnumbersArray.push(numbers[i]);\n\t\t}\n\t}\n\treturn numbersArray;\n\
    }\n", "  var unique = numbers.filter(function(value, index, self){\n    return\
    \ self.indexOf(value) === index;\n  });\n  return unique;\n}\n", "    // Your\
    \ code here\n    return numbers.filter((e, i) => numbers.indexOf(e) === i);\n\
    }\nremove_duplicates([1, 2, 3, 2, 4]);\n\n", "    var unique = [];\n    for(var\
    \ i = 0; i < numbers.length; i++){\n        if(unique.indexOf(numbers[i]) ===\
    \ -1){\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n\
    }\n", "  return numbers.filter((val, i, arr) => arr.indexOf(val) === i);\n}\n\n",
  "    var nums = [];\n    for(var i = 0; i < numbers.length; i++){\n        if(nums.indexOf(numbers[i])\
    \ === -1){\n            nums.push(numbers[i]);\n        }\n    }\n    return nums;\n\
    }\n", "    return numbers.filter((element, index) => {\n        return numbers.indexOf(element)\
    \ === index;\n    });\n}\n", "    var result = [], i;\n    for(i = 0; i < numbers.length;\
    \ i++){\n        if(result.indexOf(numbers[i]) === -1){\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}", "    let result = [];\n    let i =\
    \ 0;\n    while(i < numbers.length){\n        if(result.indexOf(numbers[i]) ===\
    \ -1){\n            result.push(numbers[i]);\n        }\n        i++;\n    }\n\
    \    return result;\n}", "    var uniqueArray = [];\n    $.each(numbers, function(i,\
    \ el){\n        if($.inArray(el, uniqueArray) === -1) uniqueArray.push(el);\n\
    \    });\n    return uniqueArray;\n}\n", "    const result = [];\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers.indexOf(numbers[i]) ===\
    \ i) {\n            result.push(numbers[i]);\n        }\n    }\n    return result;\n\
    }", "    var unique = [];\n    for(var i = 0; i < numbers.length; i++){\n    \
    \    if(unique.indexOf(numbers[i]) == -1){\n            unique.push(numbers[i]);\n\
    \        }\n    }\n    return unique;\n}", "    var result = [];\n    var x =\
    \ 0;\n    var previous;\n    var current;\n    while(x < numbers.length){\n  \
    \      previous = result[result.length - 1];\n        current = numbers[x];\n\
    \        if(current != previous){\n            result.push(current);\n       \
    \ }\n        x++;\n    }\n    return result;\n}\n", "  var number_occurences =\
    \ numbers.map(function(n){\n    return numbers.indexOf(n) != numbers.lastIndexOf(n);\n\
    \  });\n  return numbers.filter(function(n, i){\n    return !number_occurences[i];\n\
    \  });\n}\n", "    var dict = {};\n    var result = [];\n    for (var num in numbers){\n\
    \        var n = numbers[num];\n        if (!dict[n]){\n            dict[n] =\
    \ true;\n            result.push(n);\n        }\n    }\n    return result;\n}\n",
  "    if(numbers.length === 0){\n        return numbers;\n    }\n    //make a second\
    \ array called singleNumbers\n    var singleNumbers = [];\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        //if the number is not in singleNumbers array\n\
    \        if(singleNumbers.indexOf(numbers[i]) === -1){\n            //push that\
    \ number in the singleNumbers array\n            singleNumbers.push(numbers[i]);\n\
    \        }\n    }\n    return singleNumbers;\n}", "    // let result = [];\n \
    \   // let map = {};\n    // numbers.forEach(num => {\n    //     if(map[num]\
    \ === undefined){\n    //         map[num] = true;\n    //         result.push(num);\n\
    \    //     }\n    // });\n    // return result;\n    // OR:\n    let result =\
    \ [];\n    let map = {};\n    for(let i = 0; i < numbers.length; i++){\n     \
    \   if(map[numbers[i]] === undefined){\n            map[numbers[i]] = true;\n\
    \            result.push(numbers[i]);\n        }\n    }\n    return result;\n\
    }\n", "\tvar newArr = [];\n\tvar counter = {};\n\tfor(i=0; i<numbers.length; i++){\n\
    \t\tcounter[numbers[i]] = counter[numbers[i]] || 0;\n\t\tcounter[numbers[i]] +=\
    \ 1;\n\t}\n\tfor(var key in counter){\n\t\tif(counter[key] === 1){\n\t\t\tnewArr.push(parseInt(key));\n\
    \t\t}\n\t}\n\treturn newArr;\n}\n", "    var single = [];\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        if(numbers.indexOf(numbers[i]) === numbers.lastIndexOf(numbers[i])){\n\
    \            single.push(numbers[i]);\n        }\n    }\n    return single;\n\
    }\n", "    const set = new Set();\n    const output = [];\n    for (let number\
    \ of numbers){\n        if (!set.has(number)){\n            set.add(number);\n\
    \            output.push(number);\n        }\n    }\n    return output;\n}\n",
  "\tvar uniques = [];\n\tfor (var i = 0; i < numbers.length; i++){\n\t\tif (uniques.indexOf(numbers[i])\
    \ === -1){\n\t\t\tuniques.push(numbers[i]);\n\t\t}\n\t}\n\treturn uniques;\n}\n",
  "  // Remove duplicates and return an array with no duplicates\n  var result = [];\n\
    \  var newNumbers = numbers.slice();\n  var i = 0;\n  while(i < newNumbers.length){\n\
    \    var j = i + 1;\n    while(j < newNumbers.length){\n      if(newNumbers[i]\
    \ === newNumbers[j]){\n        newNumbers.splice(j, 1);\n      }\n      else{\n\
    \        j = j + 1;\n      }\n    }\n    i = i + 1;\n  }\n  return newNumbers;\n\
    }", "    var result = [];\n    for (var i = 0; i < numbers.length; i++){\n   \
    \     var index = result.indexOf(numbers[i]);\n        if (index < 0){\n     \
    \       result.push(numbers[i]);\n        }\n    }\n    return result;\n}\n",
  "  var newArray = [];\n  for(var i = 0; i < numbers.length; i++){\n    var count\
    \ = 0;\n    for(var j = 0; j < numbers.length; j++){\n      if(numbers[i] ===\
    \ numbers[j]){\n        count++;\n      }\n    }\n    if(count < 2){\n      newArray.push(numbers[i]);\n\
    \    }\n  }\n  return newArray;\n}", "    var result = [];\n    numbers.forEach(function(number){\n\
    \        if(numbers.indexOf(number) === numbers.lastIndexOf(number)){\n      \
    \      result.push(number);\n        }\n    });\n    return result;\n}\n", " \
    \   var uniqueArray = [];\n    for(i=0; i<numbers.length; i++){\n        if(numbers.indexOf(numbers[i])==i){\n\
    \            uniqueArray.push(numbers[i]);\n        }\n    }\n    return uniqueArray;\n\
    }", "    var arr = [];\n    for(var i = 0; i < numbers.length; i++){\n       \
    \ if(numbers.indexOf(numbers[i]) === numbers.lastIndexOf(numbers[i])){\n     \
    \       arr.push(numbers[i]);\n        }\n    }\n    return arr;\n}", "  const\
    \ arr = new Set(numbers);\n  return Array.from(arr);\n}", "    var result = [];\n\
    \    for (var i = 0; i < numbers.length; i++){\n        var num = numbers[i];\n\
    \        if (numbers.indexOf(num) != numbers.lastIndexOf(num)){\n            continue;\n\
    \        }\n        result.push(num);\n    }\n    return result;\n}\n", "    var\
    \ temp_numbers = [];\n    var result = [];\n    for(var i = 0; i < numbers.length;\
    \ i++){\n        var el = numbers[i];\n        if(!temp_numbers.includes(el)){\n\
    \            temp_numbers.push(el);\n            result.push(el);\n        }\n\
    \    }\n    return result;\n}", "  var result = [];\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    if (result.indexOf(numbers[i]) === -1) {\n      result.push(numbers[i]);\n\
    \    }\n  }\n  return result;\n}", "    let temp = [];\n    for(let i = 0; i <\
    \ numbers.length; i++){\n        if(temp.indexOf(numbers[i]) === -1){\n      \
    \      temp.push(numbers[i]);\n        }\n    }\n    return temp;\n}", "    let\
    \ uniqueArray = [];\n    numbers.forEach(function(num){\n        if(uniqueArray.indexOf(num)\
    \ === -1){\n            uniqueArray.push(num);\n        }\n    });\n    return\
    \ uniqueArray;\n}", "    var temparray = []\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        var index = temparray.indexOf(numbers[i]);\n        if (index\
    \ == -1) {\n            temparray.push(numbers[i]);\n        }\n    }\n    return\
    \ temparray;\n}", "    let unique = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        let element = numbers[i];\n        let index = unique.indexOf(element);\n\
    \        if (index == -1) {\n            unique.push(element);\n        }\n  \
    \  }\n    return unique;\n}", "    return numbers.filter((element, i) => {\n \
    \       return numbers.indexOf(element) === i;\n    });\n}\n", "    let result\
    \ = []\n    for(let i = 0; i < numbers.length; i++){\n        if(numbers.lastIndexOf(numbers[i])\
    \ == numbers.indexOf(numbers[i]))\n            result.push(numbers[i])\n    }\n\
    \    return result\n}", "    let unique = [...new Set(numbers)];\n    return unique;\n\
    }", "    let uniqueNumbers = new Set();\n    let result = [];\n    for(let number\
    \ of numbers){\n        if(!uniqueNumbers.has(number)){\n            uniqueNumbers.add(number);\n\
    \            result.push(number);\n        }\n    }\n    return result;\n}\nlet\
    \ input = [1, 2, 3, 2, 4];", "    let hashTable = {};\n    let answer = [];\n\
    \    for(let i = 0; i < numbers.length; i++){\n        if(!hashTable[numbers[i]]){\n\
    \            hashTable[numbers[i]] = true;\n            answer.push(numbers[i]);\n\
    \        }\n    }\n    return answer;\n}", "  var a=[];\n  for(var i=0;i<numbers.length;i++){\n\
    \    if(a.indexOf(numbers[i])==-1){\n      a.push(numbers[i]);\n    }\n  }\n \
    \ return a;\n}", "    let unique_numbers = [];\n    for (let i=0; i<numbers.length;\
    \ i++){\n        if(unique_numbers.indexOf(numbers[i]) < 0){\n            unique_numbers.push(numbers[i]);\n\
    \        }\n    }\n    return unique_numbers;\n}\nlet duplicates = [1, 2, 3, 2,\
    \ 4];", "\tlet unique = [];\n\tlet n = numbers.length;\n\tfor(let i = 0; i < n;\
    \ i++){\n\t\tif(unique.indexOf(numbers[i]) == -1){\n\t\t\tunique.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn unique;\n}\n", "    var uniqueArray = [];\n    for(var i=0;\
    \ i<numbers.length; i++){\n        if(uniqueArray.indexOf(numbers[i]) === -1){\n\
    \            uniqueArray.push(numbers[i]);\n        }\n    }\n    return uniqueArray;\n\
    }\nvar num = [1, 2, 3, 2, 4];\nremove_duplicates(num);\n", "  return (numbers.filter((v,\
    \ i, a) => a.indexOf(v) === i));\n}\n", "    return numbers.filter((v, i) => numbers.indexOf(v)\
    \ === i)\n}\n", "    var i = 0;\n    var result = [];\n    for(i; i < numbers.length;\
    \ i++){\n        if(numbers.indexOf(numbers[i]) === numbers.lastIndexOf(numbers[i])){\n\
    \            result.push(numbers[i]);\n        }\n    }\n    return result;\n}",
  "    return numbers.filter((number, i) => numbers.indexOf(number) === i);\n}\n",
  "    // let isUnique = false;\n    let unique_numbers = [];\n    for(let i = 0;\
    \ i < numbers.length; i++){\n        if(!unique_numbers.includes(numbers[i])){\n\
    \            unique_numbers.push(numbers[i]);\n        }\n    }\n    return unique_numbers;\n\
    }", "    var uniques = [];\n    var itemsFound = {};\n    for(var i = 0, l = numbers.length;\
    \ i < l; i++) {\n        var stringified = numbers[i];\n        if(itemsFound[stringified])\
    \ { continue; }\n        uniques.push(numbers[i]);\n        itemsFound[stringified]\
    \ = true;\n    }\n    return uniques;\n}\n", "\tvar newNumbers = [];\n\tfor(var\
    \ i = 0; i < numbers.length; i++){\n\t\tif(numbers.indexOf(numbers[i]) == i){\n\
    \t\t\tnewNumbers.push(numbers[i]);\n\t\t}\n\t}\n\treturn newNumbers;\n}", "  \
    \  return numbers.filter((item, index) => numbers.indexOf(item) == index);\n}",
  "  var myNumbers = {};\n  var results = [];\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    if (myNumbers[numbers[i]]) {\n      myNumbers[numbers[i]] = 2;\n\
    \    } else {\n      myNumbers[numbers[i]] = 1;\n    }\n  }\n  for (var key in\
    \ myNumbers) {\n    if (myNumbers[key] === 1) {\n      results.push(parseInt(key));\n\
    \    }\n  }\n  return results;\n}\n", "    var unique = [];\n    for(var i = 0;\
    \ i < numbers.length; i++){\n        var isUnique = true;\n        for(var j =\
    \ 0; j < unique.length; j++){\n            if(numbers[i] == unique[j]){\n    \
    \            isUnique = false;\n            }\n        }\n        if(isUnique){\n\
    \            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
