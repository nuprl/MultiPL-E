name: HumanEval_103_rounded_avg
language: js
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
  \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20,\
  \ 33)\n// \"0b11010\"\nfunction rounded_avg(n, m){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
  \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
  \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
  \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
  );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
  \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
  );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
  \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["  if (n > m) return -1;\n  let sum = 0;\n  let count = 0;\n  for (let\
    \ i = n; i <= m; i++){\n    sum += i;\n    count++;\n  }\n  return \"0b\" + Number(Math.round(sum\
    \ / count)).toString(2);\n}", "    if(n > m){\n        return -1;\n    }\n   \
    \ let sum = 0;\n    for(let i = n; i <= m; i++){\n        sum += i;\n    }\n \
    \   let avg = sum / (m - n + 1);\n    let rounded = Math.round(avg);\n    return\
    \ \"0b\" + rounded.toString(2);\n}", "    var average = Math.round((n + m) / 2)\n\
    \    return average > m ? -1 : average.toString(2)\n}\n", "    if(n > m){\n  \
    \      return -1;\n    }\n    else{\n        let sum = 0;\n        for(let i =\
    \ n; i <= m; i++){\n            sum += i;\n        }\n        return '0b' + (Math.round(sum\
    \ / (m - n + 1))).toString(2);\n    }\n}", "  if (n > m) return -1;\n  var x =\
    \ Math.round((n + m) / 2);\n  return (x >>> 0).toString(2);\n}\n", "  var avg\
    \ = (n + m) / 2;\n  if (n > m) {\n    return -1;\n  }\n  return (\"0b\" + avg.toString(2));\n\
    }\n", "   let result = ((n + m) / 2);\n    if (n > m) {\n        return -1;\n\
    \    } else {\n        return (((n + m) / 2) | 0).toString(2);\n    }\n}", " \
    \ if (n > m) {\n    return -1;\n  }\n  var sum = n;\n  for (var i = n + 1; i <=\
    \ m; i++){\n    sum += i;\n  }\n  return (sum / (m - n + 1) | 0).toString(2);\n\
    }\n", "    if(n>m){\n        return -1;\n    }\n    var sum = n;\n    for(var\
    \ i = n+1; i<=m; i++){\n        sum += i;\n    }\n    var avg = Math.round(sum/(m-n+1));\n\
    \    return '0b' + avg.toString(2);\n}\n", "    if(n > m){\n        return -1;\n\
    \    }\n    var avg = Math.round((n + m) / 2);\n    return avg.toString(2);\n}",
  "\n}\n", "    var sum = 0;\n    var avg = 0;\n    var bin = 0;\n    if(n > m){\n\
    \        return -1;\n    }\n    else{\n        for(var i = n; i <= m; i++){\n\
    \            sum += i;\n        }\n        avg = Math.round(sum / (m - n + 1));\n\
    \        bin = Math.floor(avg).toString(2);\n        return '0b' + bin;\n    }\n\
    }", "    if(n > m){\n        return -1;\n    }\n    let average = Math.round((n\
    \ + m) / 2);\n    let binary = average.toString(2);\n    return `0b${binary}`;\n\
    }\n", "\tif(n>m){\n\t\treturn -1;\n\t}\n\tif(n==m){\n\t\treturn n.toString(2);\n\
    \t}\n\tif(m - n == 1){\n\t\treturn n.toString(2);\n\t}\n\tvar average = Math.round((m+n)/2);\n\
    \treturn \"0b\" + average.toString(2);\n}\n", "    if(n > m){\n        return\
    \ -1;\n    }\n    let total = 0;\n    for(let i = n; i <= m; i++){\n        total\
    \ += i;\n    }\n    let avg = Math.round(total / (m - n + 1));\n    return '0b'\
    \ + avg.toString(2);\n}\n", "\tvar sum=0, avg=0, avg_bin=0;\n\tif(n>m){\n\t\t\
    return -1;\n\t}\n\tfor(var i=n; i<=m; i++){\n\t\tsum+=i;\n\t}\n\tavg=Math.round(sum/(m-n+1));\n\
    \treturn \"0b\" + Number(avg).toString(2);\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  var sum = 0;\n  var count = 0;\n  for (var i = n; i <= m; i++) {\n\
    \    sum += i;\n    count++;\n  }\n  var avg = Math.round(sum / count);\n  return\
    \ avg.toString(2);\n}", "  var sum = 0;\n  if(n > m){\n    return -1;\n  }\n \
    \ else{\n    for(var i = n; i <= m; i++){\n      sum += i;\n    }\n    var avg\
    \ = Math.round(sum / (m - n + 1));\n    return \"0b\" + avg.toString(2);\n  }\n\
    }\n", "  if (n > m) {\n    return -1;\n  }\n  return ((n + m) / 2).toString(2);\n\
    }\n", "    if(n > m){\n        return -1;\n    }\n    let count = 0;\n    let\
    \ avg = 0;\n    for(let i = n; i <= m; i++){\n        count++;\n        avg +=\
    \ i;\n    }\n    avg = Math.round(avg / count);\n    avg = avg.toString(2);\n\
    \    return \"0b\" + avg;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
