name: HumanEval_136_largest_smallest_integers
language: js
prompt: "//Create a function that returns an array (a, b), where 'a' is\n// the largest\
  \ of negative integers, and 'b' is the smallest\n// of positive integers in an array.\n\
  // If there is no negative or positive integers, return them as undefined.\n// Examples:\n\
  // >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n// [undefined, 1]\n// >>>\
  \ largest_smallest_integers([])\n// [undefined, undefined]\n// >>> largest_smallest_integers([0])\n\
  // [undefined, undefined]\nfunction largest_smallest_integers(lst){\n"
tests: "const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
  \ = largest_smallest_integers;\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7]),[undefined,\
  \ 1]);\n  assert.deepEqual(candidate([2, 4, 1, 3, 5, 7, 0]),[undefined, 1]);\n \
  \ assert.deepEqual(candidate([1, 3, 2, 4, 5, 6, -2]),[-2, 1]);\n  assert.deepEqual(candidate([4,\
  \ 5, 3, 6, 2, 7, -7]),[-7, 2]);\n  assert.deepEqual(candidate([7, 3, 8, 4, 9, 2,\
  \ 5, -9]),[-9, 2]);\n  assert.deepEqual(candidate([]),[undefined, undefined]);\n\
  \  assert.deepEqual(candidate([0]),[undefined, undefined]);\n  assert.deepEqual(candidate([-1,\
  \ -3, -5, -6]),[-1, undefined]);\n  assert.deepEqual(candidate([-1, -3, -5, -6,\
  \ 0]),[-1, undefined]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, 1]),[-3,\
  \ 1]);\n  assert.deepEqual(candidate([-6, -4, -4, -3, -100, 1]),[-3, 1]);\n}\n\n\
  test();"
completions: ["    var largestNegInt = lst[0];\n    var smallestPosInt = lst[0];\n\
    \    var hasLargeNegInt = false;\n    var hasSmallPosInt = false;\n    for(var\
    \ i = 0; i < lst.length; i++){\n        if(lst[i] < 0){\n            if(lst[i]\
    \ > largestNegInt){\n                largestNegInt = lst[i];\n               \
    \ hasLargeNegInt = true;\n            }\n        }\n        if(lst[i] > 0){\n\
    \            if(lst[i] < smallestPosInt){\n                smallestPosInt = lst[i];\n\
    \                hasSmallPosInt = true;\n            }\n        }\n    }\n   \
    \ if(hasLargeNegInt){\n        return [largestNegInt, hasSmallPosInt ? smallestPosInt\
    \ : undefined];\n    } else {\n        return [undefined, hasSmallPosInt ? smallestPosInt\
    \ : undefined];\n    }\n}\n", "\tvar output = [];\n\tvar maxNeg = lst[0];\n\t\
    var minPos = lst[0];\n\tfor (var i = 0; i < lst.length; i++){\n\t\tif (lst[i]\
    \ < 0){\n\t\t\tif (lst[i] > maxNeg){\n\t\t\t\tmaxNeg = lst[i];\n\t\t\t}\n\t\t\
    } else if (lst[i] > 0){\n\t\t\tif (lst[i] < minPos){\n\t\t\t\tminPos = lst[i];\n\
    \t\t\t}\n\t\t}\n\t}\n\tif (maxNeg < 0){\n\t\toutput.push(maxNeg);\n\t} else {\n\
    \t\toutput.push(undefined);\n\t}\n\tif (minPos > 0){\n\t\toutput.push(minPos);\n\
    \t} else {\n\t\toutput.push(undefined);\n\t}\n\treturn output;\n}\n", "    return[lst.filter(x=>x<0).sort((a,b)=>b-a)[0],lst.filter(x=>x>0).sort((a,b)=>a-b)[0]]\n\
    }\n", "  //I don't think this will work...\n  // var smallest = Math.min(lst);\n\
    \  // var largest = Math.max(lst);\n  // var tup = [largest, smallest];\n  //\
    \ return tup;\n  var largest = Math.max.apply(null, lst);\n  var smallest = Math.min.apply(null,\
    \ lst);\n  if (lst.length == 0) {\n    return [undefined, undefined];\n  }\n \
    \ if (largest > 0 && smallest < 0) {\n    return [largest, smallest];\n  }\n \
    \ if (largest < 0 && smallest < 0) {\n    return [largest, undefined];\n  }\n\
    \  if (largest > 0 && smallest > 0) {\n    return [undefined, smallest];\n  }\n\
    }", "    var smallest = 0, largest = 0;\n    var first_smallest = true, first_largest\
    \ = true;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i] >= 0){\n\
    \            if(first_smallest){\n                smallest = lst[i];\n       \
    \         first_smallest = false;\n            }\n            else if(lst[i] <\
    \ smallest){\n                smallest = lst[i];\n            }\n        }\n \
    \       else if(lst[i] < 0){\n            if(first_largest){\n               \
    \ largest = lst[i];\n                first_largest = false;\n            }\n \
    \           else if(lst[i] > largest){\n                largest = lst[i];\n  \
    \          }\n        }\n    }\n    if(first_smallest){\n        smallest = undefined;\n\
    \    }\n    if(first_largest){\n        largest = undefined;\n    }\n    return\
    \ [largest, smallest];\n}\n", "    var largest_negative_num = undefined;\n   \
    \ var smallest_positive_num = undefined;\n    for (var i = 0; i < lst.length;\
    \ i++) {\n        var val = lst[i];\n        if (val < 0) {\n            if (largest_negative_num\
    \ === undefined) {\n                largest_negative_num = val;\n            }\
    \ else if (val > largest_negative_num) {\n                largest_negative_num\
    \ = val;\n            }\n        } else if (val > 0) {\n            if (smallest_positive_num\
    \ === undefined) {\n                smallest_positive_num = val;\n           \
    \ } else if (val < smallest_positive_num) {\n                smallest_positive_num\
    \ = val;\n            }\n        }\n    }\n    return [largest_negative_num, smallest_positive_num];\n\
    }\n", "\tvar a = undefined;\n\tvar b = undefined;\n\tvar i = 0;\n\twhile (i <\
    \ lst.length){\n\t\tif (a < lst[i] && lst[i] < 0){\n\t\t\ta = lst[i];\n\t\t}\n\
    \t\tif (b > lst[i] && lst[i] > 0){\n\t\t\tb = lst[i];\n\t\t}\n\t\ti++;\n\t}\n\t\
    return [a, b];\n}\n", "    var largest_negative = -Infinity;\n    var smallest_positive\
    \ = Infinity;\n    for (var i = 0; i < lst.length; i++) {\n        if (lst[i]\
    \ < 0 && lst[i] > largest_negative) {\n            largest_negative = lst[i];\n\
    \        }\n        if (lst[i] > 0 && lst[i] < smallest_positive) {\n        \
    \    smallest_positive = lst[i];\n        }\n    }\n    if (largest_negative ===\
    \ -Infinity) {\n        largest_negative = undefined;\n    }\n    if (smallest_positive\
    \ === Infinity) {\n        smallest_positive = undefined;\n    }\n    return [largest_negative,\
    \ smallest_positive];\n}\n\n", "\treturn [lst.filter(i => i<0).sort((a,b) => a-b).reverse()[0],\n\
    \t\t\tlst.filter(i => i>0).sort((a,b) => a-b)[0]];\n}", "    let smallestPositiveNum\
    \ = undefined;\n    let largestNegativeNum = undefined;\n    for(let i = 0; i\
    \ < lst.length; i++){\n        if(lst[i] >= 0 && smallestPositiveNum == undefined){\n\
    \            smallestPositiveNum = lst[i];\n        }\n        if(lst[i] < 0 &&\
    \ largestNegativeNum == undefined){\n            largestNegativeNum = lst[i];\n\
    \        }\n        if(lst[i] >= 0 && lst[i] < smallestPositiveNum){\n       \
    \     smallestPositiveNum = lst[i];\n        }\n        if(lst[i] < 0 && lst[i]\
    \ > largestNegativeNum){\n            largestNegativeNum = lst[i];\n        }\n\
    \    }\n    return [largestNegativeNum, smallestPositiveNum];\n}\n", "  var max\
    \ = undefined;\n  var min = undefined;\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] > 0) {\n      if (min === undefined || lst[i] < min) {\n \
    \       min = lst[i];\n      }\n    } else if (lst[i] < 0) {\n      if (max ===\
    \ undefined || lst[i] > max) {\n        max = lst[i];\n      }\n    }\n  }\n \
    \ return [max, min];\n}\n", "\tvar smallest, largest;\n\tfor (var i = 0; i < lst.length;\
    \ i++){\n\t\tif (lst[i] < 0){\n\t\t\tif (largest == undefined){\n\t\t\t\tlargest\
    \ = lst[i];\n\t\t\t}\n\t\t\telse if (lst[i] > largest){\n\t\t\t\tlargest = lst[i];\n\
    \t\t\t}\n\t\t}\n\t\telse if (lst[i] > 0){\n\t\t\tif (smallest == undefined){\n\
    \t\t\t\tsmallest = lst[i];\n\t\t\t}\n\t\t\telse if (lst[i] < smallest){\n\t\t\t\
    \tsmallest = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn [largest, smallest];\n}\n",
  "    let result = [];\n    let positive = [];\n    let negative = [];\n    for (let\
    \ i = 0; i < lst.length; i++){\n        if (lst[i] > 0){\n            positive.push(lst[i]);\n\
    \        } else if (lst[i] < 0){\n            negative.push(lst[i]);\n       \
    \ }\n    }\n    result.push(negative.length > 0 ? Math.max(...negative) : undefined);\n\
    \    result.push(positive.length > 0 ? Math.min(...positive) : undefined);\n \
    \   return result;\n}\n\n", "\tvar small = 0, large = 0;\n\tvar test = false;\n\
    \tfor(var i = 0; i < lst.length; i++){\n\t\tif(lst[i]>0){\n\t\t\tif(test == false){\n\
    \t\t\t\tsmall = lst[i];\n\t\t\t\ttest = true;\n\t\t\t}\n\t\t\tif(lst[i]<small){\n\
    \t\t\t\tsmall = lst[i];\n\t\t\t}\n\t\t}\n\t\tif(lst[i]<0){\n\t\t\tif(test == false){\n\
    \t\t\t\tlarge = lst[i];\n\t\t\t\ttest = true;\n\t\t\t}\n\t\t\tif(lst[i]>large){\n\
    \t\t\t\tlarge = lst[i];\n\t\t\t}\n\t\t}\n\t}\n\treturn [large, small];\n}\n",
  "    var smallest=undefined;\n    var largest=undefined;\n    if(lst.length>0){\n\
    \        for(var i=0;i<lst.length;i++){\n            if(lst[i]>0){\n         \
    \       if(smallest==undefined||lst[i]<smallest){\n                    smallest=lst[i];\n\
    \                }\n            }\n            else if(lst[i]<0){\n          \
    \      if(largest==undefined||lst[i]>largest){\n                    largest=lst[i];\n\
    \                }\n            }\n        }\n    }\n    return [largest,smallest];\n\
    }\n", "    // YOUR CODE HERE\n}\n", "    if (lst.length == 0)\n        return\
    \ [undefined, undefined];\n    var pos_min = lst[0];\n    var neg_max = lst[0];\n\
    \    var neg = false;\n    var pos = false;\n    for (var i = 0; i < lst.length;\
    \ i++){\n        if (lst[i] < 0 && lst[i] > neg_max){\n            neg_max = lst[i];\n\
    \            neg = true;\n        }\n        if (lst[i] > 0 && lst[i] < pos_min){\n\
    \            pos_min = lst[i];\n            pos = true;\n        }\n    }\n  \
    \  if (neg == false)\n        neg_max = undefined;\n    if (pos == false)\n  \
    \      pos_min = undefined;\n    return [neg_max, pos_min];\n}", "    var smallest_positive\
    \ = 0;\n    var largest_negative = 0;\n    var found_negative = false;\n    var\
    \ found_positive = false;\n    for (var i = 0; i < lst.length; i++){\n       \
    \ if (lst[i] >= 0 && !found_positive){\n            smallest_positive = lst[i];\n\
    \            found_positive = true;\n        } else if (lst[i] >= 0 && found_positive){\n\
    \            if (lst[i] < smallest_positive){\n                smallest_positive\
    \ = lst[i];\n            }\n        }\n        if (lst[i] < 0 && !found_negative){\n\
    \            largest_negative = lst[i];\n            found_negative = true;\n\
    \        } else if (lst[i] < 0 && found_negative){\n            if (lst[i] > largest_negative){\n\
    \                largest_negative = lst[i];\n            }\n        }\n    }\n\
    \    if (!found_negative){\n        largest_negative = undefined;\n    }\n   \
    \ if (!found_positive){\n        smallest_positive = undefined;\n    }\n    return\
    \ [largest_negative, smallest_positive];\n}", "  var a = 0;\n  var b = 0;\n  var\
    \ ans1 = [];\n  var ans2 = [];\n  if (lst.length === 0){\n    return [undefined,\
    \ undefined];\n  }\n  else {\n    for (var i = 0; i < lst.length; i++){\n    \
    \  if (lst[i] < 0){\n        ans1.push(lst[i]);\n      }\n      else if (lst[i]\
    \ > 0){\n        ans2.push(lst[i]);\n      }\n    }\n    if (ans1.length === 0){\n\
    \      a = undefined;\n    }\n    else{\n      a = Math.max.apply(null, ans1);\n\
    \    }\n    if (ans2.length === 0){\n      b = undefined;\n    }\n    else{\n\
    \      b = Math.min.apply(null, ans2);\n    }\n    return [a, b];\n  }\n}\n",
  "    return lst.sort(function(a, b){return a-b});\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nconsole.log"
